// Generated from /Users/zhangliang/personal/shardingsphere/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-mysql/src/main/antlr4/imports/mysql/DALStatement.g4 by ANTLR 4.8
import org.antlr.v4.runtime.dfa.DFA;

import java.util.List;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DALStatementParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.8", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, AND_=2, OR_=3, NOT_=4, TILDE_=5, VERTICAL_BAR_=6, AMPERSAND_=7, 
		SIGNED_LEFT_SHIFT_=8, SIGNED_RIGHT_SHIFT_=9, CARET_=10, MOD_=11, COLON_=12, 
		PLUS_=13, MINUS_=14, ASTERISK_=15, SLASH_=16, BACKSLASH_=17, DOT_=18, 
		DOT_ASTERISK_=19, SAFE_EQ_=20, DEQ_=21, EQ_=22, NEQ_=23, GT_=24, GTE_=25, 
		LT_=26, LTE_=27, POUND_=28, LP_=29, RP_=30, LBE_=31, RBE_=32, LBT_=33, 
		RBT_=34, COMMA_=35, DQ_=36, SQ_=37, BQ_=38, QUESTION_=39, AT_=40, SEMI_=41, 
		JSON_SEPARATOR=42, JSON_UNQUOTED_SEPARATOR=43, WS=44, MAX=45, MIN=46, 
		SUM=47, COUNT=48, GROUP_CONCAT=49, CAST=50, POSITION=51, SUBSTRING=52, 
		SUBSTR=53, EXTRACT=54, TRIM=55, LAST_DAY=56, TRADITIONAL=57, TREE=58, 
		MYSQL_MAIN=59, MYSQL_ADMIN=60, INSTANT=61, INPLACE=62, COPY=63, UL_BINARY=64, 
		AUTOCOMMIT=65, FOR_GENERATOR=66, ACCESSIBLE=67, ACCOUNT=68, ACTION=69, 
		ACTIVE=70, ADD=71, ADMIN=72, AFTER=73, AGAINST=74, AGGREGATE=75, ALGORITHM=76, 
		ALL=77, ALTER=78, ALWAYS=79, ANALYZE=80, AND=81, ANY=82, ARRAY=83, AS=84, 
		ASC=85, ASCII=86, ASENSITIVE=87, AT=88, ATTRIBUTE=89, AUTOEXTEND_SIZE=90, 
		AUTO_INCREMENT=91, AVG=92, AVG_ROW_LENGTH=93, BACKUP=94, BEFORE=95, BEGIN=96, 
		BETWEEN=97, BIGINT=98, BINARY=99, BINLOG=100, BIT=101, BLOB=102, BLOCK=103, 
		BOOL=104, BOOLEAN=105, BOTH=106, BTREE=107, BUCKETS=108, BY=109, BYTE=110, 
		CACHE=111, CALL=112, CASCADE=113, CASCADED=114, CASE=115, CATALOG_NAME=116, 
		CHAIN=117, CHANGE=118, CHANGED=119, CHANNEL=120, CHAR=121, CHARACTER=122, 
		CHARSET=123, CHECK=124, CHECKSUM=125, CIPHER=126, CLASS_ORIGIN=127, CLIENT=128, 
		CLONE=129, CLOSE=130, COALESCE=131, CODE=132, COLLATE=133, COLLATION=134, 
		COLUMN=135, COLUMNS=136, COLUMN_FORMAT=137, COLUMN_NAME=138, COMMENT=139, 
		COMMIT=140, COMMITTED=141, COMPACT=142, COMPLETION=143, COMPONENT=144, 
		COMPRESSED=145, COMPRESSION=146, CONCURRENT=147, CONDITION=148, CONNECTION=149, 
		CONSISTENT=150, CONSTRAINT=151, CONSTRAINT_CATALOG=152, CONSTRAINT_NAME=153, 
		CONSTRAINT_SCHEMA=154, CONTAINS=155, CONTEXT=156, CONTINUE=157, CONVERT=158, 
		CPU=159, CREATE=160, CROSS=161, CUBE=162, CUME_DIST=163, CURRENT=164, 
		CURRENT_DATE=165, CURRENT_TIME=166, CURRENT_TIMESTAMP=167, CURRENT_USER=168, 
		CURSOR=169, CURSOR_NAME=170, DATA=171, DATABASE=172, DATABASES=173, DATAFILE=174, 
		DATE=175, DATETIME=176, DAY=177, DAY_HOUR=178, DAY_MICROSECOND=179, DAY_MINUTE=180, 
		DAY_SECOND=181, DEALLOCATE=182, DEC=183, DECIMAL=184, DECLARE=185, DEFAULT=186, 
		DEFAULT_AUTH=187, DEFINER=188, DEFINITION=189, DELAYED=190, DELAY_KEY_WRITE=191, 
		DELETE=192, DENSE_RANK=193, DESC=194, DESCRIBE=195, DESCRIPTION=196, DETERMINISTIC=197, 
		DIAGNOSTICS=198, DIRECTORY=199, DISABLE=200, DISCARD=201, DISK=202, DISTINCT=203, 
		DISTINCTROW=204, DIV=205, DO=206, DOUBLE=207, DROP=208, DUAL=209, DUMPFILE=210, 
		DUPLICATE=211, DYNAMIC=212, EACH=213, ELSE=214, ELSEIF=215, EMPTY=216, 
		ENABLE=217, ENCLOSED=218, ENCRYPTION=219, END=220, ENDS=221, ENFORCED=222, 
		ENGINE=223, ENGINES=224, ENGINE_ATTRIBUTE=225, ENUM=226, ERROR=227, ERRORS=228, 
		ESCAPE=229, ESCAPED=230, EVENT=231, EVENTS=232, EVERY=233, EXCEPT=234, 
		EXCHANGE=235, EXCLUDE=236, EXECUTE=237, EXISTS=238, EXIT=239, EXPANSION=240, 
		EXPIRE=241, EXPLAIN=242, EXPORT=243, EXTENDED=244, EXTENT_SIZE=245, FAILED_LOGIN_ATTEMPTS=246, 
		FALSE=247, FAST=248, FAULTS=249, FETCH=250, FIELDS=251, FILE=252, FILE_BLOCK_SIZE=253, 
		FILTER=254, FIRST=255, FIRST_VALUE=256, FIXED=257, FLOAT=258, FLOAT4=259, 
		FLOAT8=260, FLUSH=261, FOLLOWING=262, FOLLOWS=263, FOR=264, FORCE=265, 
		FOREIGN=266, FORMAT=267, FOUND=268, FROM=269, FULL=270, FULLTEXT=271, 
		FUNCTION=272, GENERAL=273, GENERATED=274, GEOMCOLLECTION=275, GEOMETRY=276, 
		GEOMETRYCOLLECTION=277, GET=278, GET_FORMAT=279, GET_MASTER_PUBLIC_KEY=280, 
		GLOBAL=281, GRANT=282, GRANTS=283, GROUP=284, GROUPING=285, GROUPS=286, 
		GROUP_REPLICATION=287, HANDLER=288, HASH=289, HAVING=290, HELP=291, HIGH_PRIORITY=292, 
		HISTOGRAM=293, HISTORY=294, HOST=295, HOSTS=296, HOUR=297, HOUR_MICROSECOND=298, 
		HOUR_MINUTE=299, HOUR_SECOND=300, IDENTIFIED=301, IF=302, IGNORE=303, 
		IGNORE_SERVER_IDS=304, IMPORT=305, IN=306, INACTIVE=307, INDEX=308, INDEXES=309, 
		INFILE=310, INITIAL_SIZE=311, INNER=312, INOUT=313, INSENSITIVE=314, INSERT=315, 
		INSERT_METHOD=316, INSTALL=317, INSTANCE=318, INT=319, INT1=320, INT2=321, 
		INT3=322, INT4=323, INT8=324, INTEGER=325, INTERVAL=326, INTO=327, INVISIBLE=328, 
		INVOKER=329, IO=330, IO_AFTER_GTIDS=331, IO_BEFORE_GTIDS=332, IO_THREAD=333, 
		IPC=334, IS=335, ISOLATION=336, ISSUER=337, ITERATE=338, JOIN=339, JSON=340, 
		JSON_TABLE=341, JSON_VALUE=342, KEY=343, KEYS=344, KEY_BLOCK_SIZE=345, 
		KILL=346, LAG=347, LANGUAGE=348, LAST=349, LAST_VALUE=350, LATERAL=351, 
		LEAD=352, LEADING=353, LEAVE=354, LEAVES=355, LEFT=356, LESS=357, LEVEL=358, 
		LIKE=359, LIMIT=360, LINEAR=361, LINES=362, LINESTRING=363, LIST=364, 
		LOAD=365, LOCAL=366, LOCALTIME=367, LOCALTIMESTAMP=368, LOCK=369, LOCKED=370, 
		LOCKS=371, LOGFILE=372, LOGS=373, LONG=374, LONGBLOB=375, LONGTEXT=376, 
		LOOP=377, LOW_PRIORITY=378, MANAGED=379, MASTER=380, MASTER_AUTO_POSITION=381, 
		MASTER_BIND=382, MASTER_COMPRESSION_ALGORITHMS=383, MASTER_CONNECT_RETRY=384, 
		MASTER_DELAY=385, MASTER_HEARTBEAT_PERIOD=386, MASTER_HOST=387, MASTER_LOG_FILE=388, 
		MASTER_LOG_POS=389, MASTER_PASSWORD=390, MASTER_PORT=391, MASTER_PUBLIC_KEY_PATH=392, 
		MASTER_RETRY_COUNT=393, MASTER_SERVER_ID=394, MASTER_SSL=395, MASTER_SSL_CA=396, 
		MASTER_SSL_CAPATH=397, MASTER_SSL_CERT=398, MASTER_SSL_CIPHER=399, MASTER_SSL_CRL=400, 
		MASTER_SSL_CRLPATH=401, MASTER_SSL_KEY=402, MASTER_SSL_VERIFY_SERVER_CERT=403, 
		MASTER_TLS_CIPHERSUITES=404, MASTER_TLS_VERSION=405, MASTER_USER=406, 
		MASTER_ZSTD_COMPRESSION_LEVEL=407, MATCH=408, MAXVALUE=409, MAX_CONNECTIONS_PER_HOUR=410, 
		MAX_QUERIES_PER_HOUR=411, MAX_ROWS=412, MAX_SIZE=413, MAX_UPDATES_PER_HOUR=414, 
		MAX_USER_CONNECTIONS=415, MEDIUM=416, MEDIUMBLOB=417, MEDIUMINT=418, MEDIUMTEXT=419, 
		MEMBER=420, MEMORY=421, MERGE=422, MESSAGE_TEXT=423, MICROSECOND=424, 
		MIDDLEINT=425, MIGRATE=426, MINUTE=427, MINUTE_MICROSECOND=428, MINUTE_SECOND=429, 
		MIN_ROWS=430, MOD=431, MODE=432, MODIFIES=433, MODIFY=434, MONTH=435, 
		MULTILINESTRING=436, MULTIPOINT=437, MULTIPOLYGON=438, MUTEX=439, MYSQL_ERRNO=440, 
		NAME=441, NAMES=442, NATIONAL=443, NATURAL=444, NCHAR=445, NDB=446, NDBCLUSTER=447, 
		NESTED=448, NETWORK_NAMESPACE=449, NEVER=450, NEW=451, NEXT=452, NO=453, 
		NODEGROUP=454, NONE=455, NOT=456, NOWAIT=457, NO_WAIT=458, NO_WRITE_TO_BINLOG=459, 
		NTH_VALUE=460, NTILE=461, NULL=462, NULLS=463, NUMBER=464, NUMERIC=465, 
		NVARCHAR=466, OF=467, OFF=468, OFFSET=469, OJ=470, OLD=471, ON=472, ONE=473, 
		ONLY=474, OPEN=475, OPTIMIZE=476, OPTIMIZER_COSTS=477, OPTION=478, OPTIONAL=479, 
		OPTIONALLY=480, OPTIONS=481, OR=482, ORDER=483, ORDINALITY=484, ORGANIZATION=485, 
		OTHERS=486, OUT=487, OUTER=488, OUTFILE=489, OVER=490, OWNER=491, PACK_KEYS=492, 
		PAGE=493, PARSER=494, PARTIAL=495, PARTITION=496, PARTITIONING=497, PARTITIONS=498, 
		PASSWORD=499, PASSWORD_LOCK_TIME=500, PATH=501, PERCENT_RANK=502, PERSIST=503, 
		PERSIST_ONLY=504, PHASE=505, PLUGIN=506, PLUGINS=507, PLUGIN_DIR=508, 
		POINT=509, POLYGON=510, PORT=511, PRECEDES=512, PRECEDING=513, PRECISION=514, 
		PREPARE=515, PRESERVE=516, PREV=517, PRIMARY=518, PRIVILEGES=519, PRIVILEGE_CHECKS_USER=520, 
		PROCEDURE=521, PROCESS=522, PROCESSLIST=523, PROFILE=524, PROFILES=525, 
		PROXY=526, PURGE=527, QUARTER=528, QUERY=529, QUICK=530, RANDOM=531, RANGE=532, 
		RANK=533, READ=534, READS=535, READ_ONLY=536, READ_WRITE=537, REAL=538, 
		REBUILD=539, RECOVER=540, RECURSIVE=541, REDO_BUFFER_SIZE=542, REDUNDANT=543, 
		REFERENCE=544, REFERENCES=545, REGEXP=546, RELAY=547, RELAYLOG=548, RELAY_LOG_FILE=549, 
		RELAY_LOG_POS=550, RELAY_THREAD=551, RELEASE=552, RELOAD=553, REMOVE=554, 
		RENAME=555, REORGANIZE=556, REPAIR=557, REPEAT=558, REPEATABLE=559, REPLACE=560, 
		REPLICATE_DO_DB=561, REPLICATE_DO_TABLE=562, REPLICATE_IGNORE_DB=563, 
		REPLICATE_IGNORE_TABLE=564, REPLICATE_REWRITE_DB=565, REPLICATE_WILD_DO_TABLE=566, 
		REPLICATE_WILD_IGNORE_TABLE=567, REPLICATION=568, REQUIRE=569, REQUIRE_ROW_FORMAT=570, 
		RESET=571, RESIGNAL=572, RESOURCE=573, RESPECT=574, RESTART=575, RESTORE=576, 
		RESTRICT=577, RESUME=578, RETAIN=579, RETURN=580, RETURNED_SQLSTATE=581, 
		RETURNING=582, RETURNS=583, REUSE=584, REVERSE=585, REVOKE=586, RIGHT=587, 
		RLIKE=588, ROLE=589, ROLLBACK=590, ROLLUP=591, ROTATE=592, ROUTINE=593, 
		ROW=594, ROWS=595, ROW_COUNT=596, ROW_FORMAT=597, ROW_NUMBER=598, RTREE=599, 
		SAVEPOINT=600, SCHEDULE=601, SCHEMA=602, SCHEMAS=603, SCHEMA_NAME=604, 
		SECOND=605, SECONDARY=606, SECONDARY_ENGINE=607, SECONDARY_ENGINE_ATTRIBUTE=608, 
		SECONDARY_LOAD=609, SECONDARY_UNLOAD=610, SECOND_MICROSECOND=611, SECURITY=612, 
		SELECT=613, SENSITIVE=614, SEPARATOR=615, SERIAL=616, SERIALIZABLE=617, 
		SERVER=618, SESSION=619, SET=620, SHARE=621, SHOW=622, SHUTDOWN=623, SIGNAL=624, 
		SIGNED=625, SIMPLE=626, SLAVE=627, SLOW=628, SMALLINT=629, SNAPSHOT=630, 
		SOCKET=631, SOME=632, SONAME=633, SOUNDS=634, SOURCE=635, SPATIAL=636, 
		SPECIFIC=637, SQL=638, SQL_CACHE=639, SQLEXCEPTION=640, SQLSTATE=641, 
		SQLWARNING=642, SQL_AFTER_GTIDS=643, SQL_AFTER_MTS_GAPS=644, SQL_BEFORE_GTIDS=645, 
		SQL_BIG_RESULT=646, SQL_BUFFER_RESULT=647, SQL_CALC_FOUND_ROWS=648, SQL_NO_CACHE=649, 
		SQL_SMALL_RESULT=650, SQL_THREAD=651, SQL_TSI_DAY=652, SQL_TSI_HOUR=653, 
		SQL_TSI_MINUTE=654, SQL_TSI_MONTH=655, SQL_TSI_QUARTER=656, SQL_TSI_SECOND=657, 
		SQL_TSI_WEEK=658, SQL_TSI_YEAR=659, SRID=660, SSL=661, STACKED=662, START=663, 
		STARTING=664, STARTS=665, STATS_AUTO_RECALC=666, STATS_PERSISTENT=667, 
		STATS_SAMPLE_PAGES=668, STATUS=669, STOP=670, STORAGE=671, STORED=672, 
		STRAIGHT_JOIN=673, STREAM=674, STRING=675, SUBCLASS_ORIGIN=676, SUBJECT=677, 
		SUBPARTITION=678, SUBPARTITIONS=679, SUPER=680, SUSPEND=681, SWAPS=682, 
		SWITCHES=683, SYSTEM=684, TABLE=685, TABLES=686, TABLESPACE=687, TABLE_CHECKSUM=688, 
		TABLE_NAME=689, TEMPORARY=690, TEMPTABLE=691, TERMINATED=692, TEXT=693, 
		THAN=694, THEN=695, THREAD_PRIORITY=696, TIES=697, TIME=698, TIMESTAMP=699, 
		TIMESTAMPADD=700, TIMESTAMPDIFF=701, TINYBLOB=702, TINYINT=703, TINYTEXT=704, 
		TLS=705, TO=706, TRAILING=707, TRANSACTION=708, TRIGGER=709, TRIGGERS=710, 
		TRUE=711, TRUNCATE=712, TYPE=713, TYPES=714, UNBOUNDED=715, UNCOMMITTED=716, 
		UNDEFINED=717, UNDO=718, UNDOFILE=719, UNDO_BUFFER_SIZE=720, UNICODE=721, 
		UNINSTALL=722, UNION=723, UNIQUE=724, UNKNOWN=725, UNLOCK=726, UNSIGNED=727, 
		UNTIL=728, UPDATE=729, UPGRADE=730, USAGE=731, USE=732, USER=733, USER_RESOURCES=734, 
		USE_FRM=735, USING=736, UTC_DATE=737, UTC_TIME=738, UTC_TIMESTAMP=739, 
		VALIDATION=740, VALUE=741, VALUES=742, VARBINARY=743, VARCHAR=744, VARCHARACTER=745, 
		VARIABLES=746, VARYING=747, VCPU=748, VIEW=749, VIRTUAL=750, VISIBLE=751, 
		WAIT=752, WARNINGS=753, WEEK=754, WEIGHT_STRING=755, WHEN=756, WHERE=757, 
		WHILE=758, WINDOW=759, WITH=760, WITHOUT=761, WORK=762, WRAPPER=763, WRITE=764, 
		X509=765, XA=766, XID=767, XML=768, XOR=769, YEAR=770, YEAR_MONTH=771, 
		ZEROFILL=772, INNODB_=773, REDO_LOG_=774, FILESIZE_LITERAL=775, IDENTIFIER_=776, 
		STRING_=777, NUMBER_=778, HEX_DIGIT_=779, BIT_NUM_=780, NOT_SUPPORT_=781;
	public static final int
		RULE_use = 0, RULE_help = 1, RULE_explain = 2, RULE_showDatabases = 3, 
		RULE_showTables = 4, RULE_showTableStatus = 5, RULE_showColumns = 6, RULE_showIndex = 7, 
		RULE_showCreateTable = 8, RULE_showOther = 9, RULE_fromSchema = 10, RULE_fromTable = 11, 
		RULE_showLike = 12, RULE_showColumnLike_ = 13, RULE_showWhereClause_ = 14, 
		RULE_showFilter = 15, RULE_showProfileType = 16, RULE_setVariable = 17, 
		RULE_variableAssign = 18, RULE_showBinaryLogs = 19, RULE_showBinlogEvents = 20, 
		RULE_showCharacterSet = 21, RULE_showCollation = 22, RULE_showCreateDatabase = 23, 
		RULE_showCreateEvent = 24, RULE_showCreateFunction = 25, RULE_showCreateProcedure = 26, 
		RULE_showCreateTrigger = 27, RULE_showCreateUser = 28, RULE_showCreateView = 29, 
		RULE_showEngine = 30, RULE_showEngines = 31, RULE_showErrors = 32, RULE_showEvents = 33, 
		RULE_showFunctionCode = 34, RULE_showFunctionStatus = 35, RULE_showGrant = 36, 
		RULE_showMasterStatus = 37, RULE_showOpenTables = 38, RULE_showPlugins = 39, 
		RULE_showPrivileges = 40, RULE_showProcedureCode = 41, RULE_showProcedureStatus = 42, 
		RULE_showProcesslist = 43, RULE_showProfile = 44, RULE_showProfiles = 45, 
		RULE_showRelaylogEvent = 46, RULE_showSlavehost = 47, RULE_showSlaveStatus = 48, 
		RULE_showStatus = 49, RULE_showTrriggers = 50, RULE_showVariables = 51, 
		RULE_showWarnings = 52, RULE_setCharacter = 53, RULE_setName = 54, RULE_clone = 55, 
		RULE_cloneAction_ = 56, RULE_createUdf = 57, RULE_installComponent = 58, 
		RULE_installPlugin = 59, RULE_uninstallComponent = 60, RULE_uninstallPlugin = 61, 
		RULE_analyzeTable = 62, RULE_checkTable = 63, RULE_checkTableOption_ = 64, 
		RULE_checksumTable = 65, RULE_optimizeTable = 66, RULE_repairTable = 67, 
		RULE_alterResourceGroup = 68, RULE_vcpuSpec_ = 69, RULE_createResourceGroup = 70, 
		RULE_dropResourceGroup = 71, RULE_setResourceGroup = 72, RULE_binlog = 73, 
		RULE_cacheIndex = 74, RULE_tableIndexList = 75, RULE_partitionList = 76, 
		RULE_flush = 77, RULE_flushOption_ = 78, RULE_tablesOption_ = 79, RULE_kill = 80, 
		RULE_loadIndexInfo = 81, RULE_resetStatement = 82, RULE_resetOption_ = 83, 
		RULE_resetPersist = 84, RULE_restart = 85, RULE_shutdown = 86, RULE_explainType = 87, 
		RULE_explainableStatement = 88, RULE_formatName = 89, RULE_parameterMarker = 90, 
		RULE_customKeyword = 91, RULE_literals = 92, RULE_stringLiterals = 93, 
		RULE_numberLiterals = 94, RULE_dateTimeLiterals = 95, RULE_hexadecimalLiterals = 96, 
		RULE_bitValueLiterals = 97, RULE_booleanLiterals = 98, RULE_nullValueLiterals = 99, 
		RULE_characterSetName_ = 100, RULE_collationName_ = 101, RULE_identifier = 102, 
		RULE_unreservedWord = 103, RULE_variable = 104, RULE_scope = 105, RULE_schemaName = 106, 
		RULE_schemaNames = 107, RULE_schemaPairs = 108, RULE_schemaPair = 109, 
		RULE_tableName = 110, RULE_columnName = 111, RULE_indexName = 112, RULE_userName = 113, 
		RULE_eventName = 114, RULE_serverName = 115, RULE_wrapperName = 116, RULE_functionName = 117, 
		RULE_viewName = 118, RULE_owner = 119, RULE_alias = 120, RULE_name = 121, 
		RULE_tableNames = 122, RULE_columnNames = 123, RULE_groupName = 124, RULE_routineName = 125, 
		RULE_shardLibraryName = 126, RULE_componentName = 127, RULE_pluginName = 128, 
		RULE_hostName = 129, RULE_port = 130, RULE_cloneInstance = 131, RULE_cloneDir = 132, 
		RULE_channelName = 133, RULE_logName = 134, RULE_roleName = 135, RULE_engineName = 136, 
		RULE_triggerName = 137, RULE_triggerTime = 138, RULE_userOrRole = 139, 
		RULE_partitionName = 140, RULE_triggerEvent = 141, RULE_triggerOrder = 142, 
		RULE_expr = 143, RULE_logicalOperator = 144, RULE_notOperator_ = 145, 
		RULE_booleanPrimary = 146, RULE_comparisonOperator = 147, RULE_predicate = 148, 
		RULE_bitExpr = 149, RULE_simpleExpr = 150, RULE_functionCall = 151, RULE_aggregationFunction = 152, 
		RULE_aggregationFunctionName = 153, RULE_distinct = 154, RULE_overClause_ = 155, 
		RULE_windowSpecification_ = 156, RULE_partitionClause_ = 157, RULE_frameClause_ = 158, 
		RULE_frameStart_ = 159, RULE_frameEnd_ = 160, RULE_frameBetween_ = 161, 
		RULE_specialFunction = 162, RULE_currentUserFunction = 163, RULE_groupConcatFunction = 164, 
		RULE_windowFunction = 165, RULE_castFunction = 166, RULE_convertFunction = 167, 
		RULE_positionFunction = 168, RULE_substringFunction = 169, RULE_extractFunction = 170, 
		RULE_charFunction = 171, RULE_trimFunction_ = 172, RULE_valuesFunction_ = 173, 
		RULE_weightStringFunction = 174, RULE_levelClause_ = 175, RULE_levelInWeightListElement_ = 176, 
		RULE_regularFunction = 177, RULE_shorthandRegularFunction = 178, RULE_completeRegularFunction = 179, 
		RULE_regularFunctionName_ = 180, RULE_matchExpression_ = 181, RULE_matchSearchModifier_ = 182, 
		RULE_caseExpression = 183, RULE_datetimeExpr = 184, RULE_binaryLogFileIndexNumber = 185, 
		RULE_caseWhen_ = 186, RULE_caseElse_ = 187, RULE_intervalExpression = 188, 
		RULE_intervalValue = 189, RULE_intervalUnit_ = 190, RULE_subquery = 191, 
		RULE_orderByClause = 192, RULE_orderByItem = 193, RULE_dataType = 194, 
		RULE_dataTypeName = 195, RULE_dataTypeLength = 196, RULE_collectionOptions = 197, 
		RULE_characterSet_ = 198, RULE_collateClause_ = 199, RULE_ignoredIdentifier_ = 200, 
		RULE_ignoredIdentifiers_ = 201, RULE_fieldOrVarSpec = 202, RULE_notExistClause_ = 203, 
		RULE_existClause_ = 204, RULE_pattern = 205, RULE_connectionId_ = 206, 
		RULE_labelName = 207, RULE_cursorName = 208, RULE_conditionName = 209, 
		RULE_insert = 210, RULE_insertSpecification_ = 211, RULE_insertValuesClause = 212, 
		RULE_insertSelectClause = 213, RULE_onDuplicateKeyClause = 214, RULE_valueReference_ = 215, 
		RULE_derivedColumns_ = 216, RULE_replace = 217, RULE_replaceSpecification_ = 218, 
		RULE_replaceValuesClause = 219, RULE_replaceSelectClause = 220, RULE_update = 221, 
		RULE_updateSpecification_ = 222, RULE_assignment = 223, RULE_setAssignmentsClause = 224, 
		RULE_assignmentValues = 225, RULE_assignmentValue = 226, RULE_blobValue = 227, 
		RULE_delete = 228, RULE_deleteSpecification_ = 229, RULE_singleTableClause = 230, 
		RULE_multipleTablesClause = 231, RULE_multipleTableNames = 232, RULE_select = 233, 
		RULE_call = 234, RULE_doStatement = 235, RULE_handlerStatement = 236, 
		RULE_handlerOpenStatement = 237, RULE_handlerReadIndexStatement = 238, 
		RULE_handlerReadStatement = 239, RULE_handlerCloseStatement = 240, RULE_importStatement = 241, 
		RULE_loadDataStatement = 242, RULE_loadXmlStatement = 243, RULE_tableStatement = 244, 
		RULE_valuesStatement = 245, RULE_columnDesignator = 246, RULE_rowConstructorList = 247, 
		RULE_withClause_ = 248, RULE_cteClause_ = 249, RULE_unionClause = 250, 
		RULE_selectClause = 251, RULE_selectSpecification = 252, RULE_duplicateSpecification = 253, 
		RULE_projections = 254, RULE_projection = 255, RULE_unqualifiedShorthand = 256, 
		RULE_qualifiedShorthand = 257, RULE_fromClause = 258, RULE_tableReferences = 259, 
		RULE_escapedTableReference = 260, RULE_tableReference = 261, RULE_tableFactor = 262, 
		RULE_partitionNames_ = 263, RULE_indexHintList_ = 264, RULE_indexHint_ = 265, 
		RULE_joinedTable = 266, RULE_joinSpecification = 267, RULE_whereClause = 268, 
		RULE_groupByClause = 269, RULE_havingClause = 270, RULE_limitClause = 271, 
		RULE_limitRowCount = 272, RULE_limitOffset = 273, RULE_windowClause_ = 274, 
		RULE_windowItem_ = 275, RULE_selectLinesInto_ = 276, RULE_selectFieldsInto_ = 277, 
		RULE_selectIntoExpression_ = 278, RULE_lockClause = 279;
	private static String[] makeRuleNames() {
		return new String[] {
			"use", "help", "explain", "showDatabases", "showTables", "showTableStatus", 
			"showColumns", "showIndex", "showCreateTable", "showOther", "fromSchema", 
			"fromTable", "showLike", "showColumnLike_", "showWhereClause_", "showFilter", 
			"showProfileType", "setVariable", "variableAssign", "showBinaryLogs", 
			"showBinlogEvents", "showCharacterSet", "showCollation", "showCreateDatabase", 
			"showCreateEvent", "showCreateFunction", "showCreateProcedure", "showCreateTrigger", 
			"showCreateUser", "showCreateView", "showEngine", "showEngines", "showErrors", 
			"showEvents", "showFunctionCode", "showFunctionStatus", "showGrant", 
			"showMasterStatus", "showOpenTables", "showPlugins", "showPrivileges", 
			"showProcedureCode", "showProcedureStatus", "showProcesslist", "showProfile", 
			"showProfiles", "showRelaylogEvent", "showSlavehost", "showSlaveStatus", 
			"showStatus", "showTrriggers", "showVariables", "showWarnings", "setCharacter", 
			"setName", "clone", "cloneAction_", "createUdf", "installComponent", 
			"installPlugin", "uninstallComponent", "uninstallPlugin", "analyzeTable", 
			"checkTable", "checkTableOption_", "checksumTable", "optimizeTable", 
			"repairTable", "alterResourceGroup", "vcpuSpec_", "createResourceGroup", 
			"dropResourceGroup", "setResourceGroup", "binlog", "cacheIndex", "tableIndexList", 
			"partitionList", "flush", "flushOption_", "tablesOption_", "kill", "loadIndexInfo", 
			"resetStatement", "resetOption_", "resetPersist", "restart", "shutdown", 
			"explainType", "explainableStatement", "formatName", "parameterMarker", 
			"customKeyword", "literals", "stringLiterals", "numberLiterals", "dateTimeLiterals", 
			"hexadecimalLiterals", "bitValueLiterals", "booleanLiterals", "nullValueLiterals", 
			"characterSetName_", "collationName_", "identifier", "unreservedWord", 
			"variable", "scope", "schemaName", "schemaNames", "schemaPairs", "schemaPair", 
			"tableName", "columnName", "indexName", "userName", "eventName", "serverName", 
			"wrapperName", "functionName", "viewName", "owner", "alias", "name", 
			"tableNames", "columnNames", "groupName", "routineName", "shardLibraryName", 
			"componentName", "pluginName", "hostName", "port", "cloneInstance", "cloneDir", 
			"channelName", "logName", "roleName", "engineName", "triggerName", "triggerTime", 
			"userOrRole", "partitionName", "triggerEvent", "triggerOrder", "expr", 
			"logicalOperator", "notOperator_", "booleanPrimary", "comparisonOperator", 
			"predicate", "bitExpr", "simpleExpr", "functionCall", "aggregationFunction", 
			"aggregationFunctionName", "distinct", "overClause_", "windowSpecification_", 
			"partitionClause_", "frameClause_", "frameStart_", "frameEnd_", "frameBetween_", 
			"specialFunction", "currentUserFunction", "groupConcatFunction", "windowFunction", 
			"castFunction", "convertFunction", "positionFunction", "substringFunction", 
			"extractFunction", "charFunction", "trimFunction_", "valuesFunction_", 
			"weightStringFunction", "levelClause_", "levelInWeightListElement_", 
			"regularFunction", "shorthandRegularFunction", "completeRegularFunction", 
			"regularFunctionName_", "matchExpression_", "matchSearchModifier_", "caseExpression", 
			"datetimeExpr", "binaryLogFileIndexNumber", "caseWhen_", "caseElse_", 
			"intervalExpression", "intervalValue", "intervalUnit_", "subquery", "orderByClause", 
			"orderByItem", "dataType", "dataTypeName", "dataTypeLength", "collectionOptions", 
			"characterSet_", "collateClause_", "ignoredIdentifier_", "ignoredIdentifiers_", 
			"fieldOrVarSpec", "notExistClause_", "existClause_", "pattern", "connectionId_", 
			"labelName", "cursorName", "conditionName", "insert", "insertSpecification_", 
			"insertValuesClause", "insertSelectClause", "onDuplicateKeyClause", "valueReference_", 
			"derivedColumns_", "replace", "replaceSpecification_", "replaceValuesClause", 
			"replaceSelectClause", "update", "updateSpecification_", "assignment", 
			"setAssignmentsClause", "assignmentValues", "assignmentValue", "blobValue", 
			"delete", "deleteSpecification_", "singleTableClause", "multipleTablesClause", 
			"multipleTableNames", "select", "call", "doStatement", "handlerStatement", 
			"handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement", 
			"handlerCloseStatement", "importStatement", "loadDataStatement", "loadXmlStatement", 
			"tableStatement", "valuesStatement", "columnDesignator", "rowConstructorList", 
			"withClause_", "cteClause_", "unionClause", "selectClause", "selectSpecification", 
			"duplicateSpecification", "projections", "projection", "unqualifiedShorthand", 
			"qualifiedShorthand", "fromClause", "tableReferences", "escapedTableReference", 
			"tableReference", "tableFactor", "partitionNames_", "indexHintList_", 
			"indexHint_", "joinedTable", "joinSpecification", "whereClause", "groupByClause", 
			"havingClause", "limitClause", "limitRowCount", "limitOffset", "windowClause_", 
			"windowItem_", "selectLinesInto_", "selectFieldsInto_", "selectIntoExpression_", 
			"lockClause"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'refer subquery in DMStement.g4'", "'&&'", "'||'", "'!'", "'~'", 
			"'|'", "'&'", "'<<'", "'>>'", "'^'", "'%'", "':'", "'+'", "'-'", "'*'", 
			"'/'", "'\\'", "'.'", "'.*'", "'<=>'", "'=='", "'='", null, "'>'", "'>='", 
			"'<'", "'<='", "'#'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", 
			"'\"'", "'''", "'`'", "'?'", "'@'", "';'", "'->'", "'->>'", null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, "'DO NOT MATCH ANY THING, JUST FOR GENERATOR'", 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, "'INNODB'", 
			"'REDO_LOG'", null, null, null, null, null, null, "'not support'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, "AND_", "OR_", "NOT_", "TILDE_", "VERTICAL_BAR_", "AMPERSAND_", 
			"SIGNED_LEFT_SHIFT_", "SIGNED_RIGHT_SHIFT_", "CARET_", "MOD_", "COLON_", 
			"PLUS_", "MINUS_", "ASTERISK_", "SLASH_", "BACKSLASH_", "DOT_", "DOT_ASTERISK_", 
			"SAFE_EQ_", "DEQ_", "EQ_", "NEQ_", "GT_", "GTE_", "LT_", "LTE_", "POUND_", 
			"LP_", "RP_", "LBE_", "RBE_", "LBT_", "RBT_", "COMMA_", "DQ_", "SQ_", 
			"BQ_", "QUESTION_", "AT_", "SEMI_", "JSON_SEPARATOR", "JSON_UNQUOTED_SEPARATOR", 
			"WS", "MAX", "MIN", "SUM", "COUNT", "GROUP_CONCAT", "CAST", "POSITION", 
			"SUBSTRING", "SUBSTR", "EXTRACT", "TRIM", "LAST_DAY", "TRADITIONAL", 
			"TREE", "MYSQL_MAIN", "MYSQL_ADMIN", "INSTANT", "INPLACE", "COPY", "UL_BINARY", 
			"AUTOCOMMIT", "FOR_GENERATOR", "ACCESSIBLE", "ACCOUNT", "ACTION", "ACTIVE", 
			"ADD", "ADMIN", "AFTER", "AGAINST", "AGGREGATE", "ALGORITHM", "ALL", 
			"ALTER", "ALWAYS", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "ASCII", 
			"ASENSITIVE", "AT", "ATTRIBUTE", "AUTOEXTEND_SIZE", "AUTO_INCREMENT", 
			"AVG", "AVG_ROW_LENGTH", "BACKUP", "BEFORE", "BEGIN", "BETWEEN", "BIGINT", 
			"BINARY", "BINLOG", "BIT", "BLOB", "BLOCK", "BOOL", "BOOLEAN", "BOTH", 
			"BTREE", "BUCKETS", "BY", "BYTE", "CACHE", "CALL", "CASCADE", "CASCADED", 
			"CASE", "CATALOG_NAME", "CHAIN", "CHANGE", "CHANGED", "CHANNEL", "CHAR", 
			"CHARACTER", "CHARSET", "CHECK", "CHECKSUM", "CIPHER", "CLASS_ORIGIN", 
			"CLIENT", "CLONE", "CLOSE", "COALESCE", "CODE", "COLLATE", "COLLATION", 
			"COLUMN", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", "COMMENT", "COMMIT", 
			"COMMITTED", "COMPACT", "COMPLETION", "COMPONENT", "COMPRESSED", "COMPRESSION", 
			"CONCURRENT", "CONDITION", "CONNECTION", "CONSISTENT", "CONSTRAINT", 
			"CONSTRAINT_CATALOG", "CONSTRAINT_NAME", "CONSTRAINT_SCHEMA", "CONTAINS", 
			"CONTEXT", "CONTINUE", "CONVERT", "CPU", "CREATE", "CROSS", "CUBE", "CUME_DIST", 
			"CURRENT", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
			"CURSOR", "CURSOR_NAME", "DATA", "DATABASE", "DATABASES", "DATAFILE", 
			"DATE", "DATETIME", "DAY", "DAY_HOUR", "DAY_MICROSECOND", "DAY_MINUTE", 
			"DAY_SECOND", "DEALLOCATE", "DEC", "DECIMAL", "DECLARE", "DEFAULT", "DEFAULT_AUTH", 
			"DEFINER", "DEFINITION", "DELAYED", "DELAY_KEY_WRITE", "DELETE", "DENSE_RANK", 
			"DESC", "DESCRIBE", "DESCRIPTION", "DETERMINISTIC", "DIAGNOSTICS", "DIRECTORY", 
			"DISABLE", "DISCARD", "DISK", "DISTINCT", "DISTINCTROW", "DIV", "DO", 
			"DOUBLE", "DROP", "DUAL", "DUMPFILE", "DUPLICATE", "DYNAMIC", "EACH", 
			"ELSE", "ELSEIF", "EMPTY", "ENABLE", "ENCLOSED", "ENCRYPTION", "END", 
			"ENDS", "ENFORCED", "ENGINE", "ENGINES", "ENGINE_ATTRIBUTE", "ENUM", 
			"ERROR", "ERRORS", "ESCAPE", "ESCAPED", "EVENT", "EVENTS", "EVERY", "EXCEPT", 
			"EXCHANGE", "EXCLUDE", "EXECUTE", "EXISTS", "EXIT", "EXPANSION", "EXPIRE", 
			"EXPLAIN", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAILED_LOGIN_ATTEMPTS", 
			"FALSE", "FAST", "FAULTS", "FETCH", "FIELDS", "FILE", "FILE_BLOCK_SIZE", 
			"FILTER", "FIRST", "FIRST_VALUE", "FIXED", "FLOAT", "FLOAT4", "FLOAT8", 
			"FLUSH", "FOLLOWING", "FOLLOWS", "FOR", "FORCE", "FOREIGN", "FORMAT", 
			"FOUND", "FROM", "FULL", "FULLTEXT", "FUNCTION", "GENERAL", "GENERATED", 
			"GEOMCOLLECTION", "GEOMETRY", "GEOMETRYCOLLECTION", "GET", "GET_FORMAT", 
			"GET_MASTER_PUBLIC_KEY", "GLOBAL", "GRANT", "GRANTS", "GROUP", "GROUPING", 
			"GROUPS", "GROUP_REPLICATION", "HANDLER", "HASH", "HAVING", "HELP", "HIGH_PRIORITY", 
			"HISTOGRAM", "HISTORY", "HOST", "HOSTS", "HOUR", "HOUR_MICROSECOND", 
			"HOUR_MINUTE", "HOUR_SECOND", "IDENTIFIED", "IF", "IGNORE", "IGNORE_SERVER_IDS", 
			"IMPORT", "IN", "INACTIVE", "INDEX", "INDEXES", "INFILE", "INITIAL_SIZE", 
			"INNER", "INOUT", "INSENSITIVE", "INSERT", "INSERT_METHOD", "INSTALL", 
			"INSTANCE", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", "INTEGER", 
			"INTERVAL", "INTO", "INVISIBLE", "INVOKER", "IO", "IO_AFTER_GTIDS", "IO_BEFORE_GTIDS", 
			"IO_THREAD", "IPC", "IS", "ISOLATION", "ISSUER", "ITERATE", "JOIN", "JSON", 
			"JSON_TABLE", "JSON_VALUE", "KEY", "KEYS", "KEY_BLOCK_SIZE", "KILL", 
			"LAG", "LANGUAGE", "LAST", "LAST_VALUE", "LATERAL", "LEAD", "LEADING", 
			"LEAVE", "LEAVES", "LEFT", "LESS", "LEVEL", "LIKE", "LIMIT", "LINEAR", 
			"LINES", "LINESTRING", "LIST", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", 
			"LOCK", "LOCKED", "LOCKS", "LOGFILE", "LOGS", "LONG", "LONGBLOB", "LONGTEXT", 
			"LOOP", "LOW_PRIORITY", "MANAGED", "MASTER", "MASTER_AUTO_POSITION", 
			"MASTER_BIND", "MASTER_COMPRESSION_ALGORITHMS", "MASTER_CONNECT_RETRY", 
			"MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", 
			"MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", "MASTER_PUBLIC_KEY_PATH", 
			"MASTER_RETRY_COUNT", "MASTER_SERVER_ID", "MASTER_SSL", "MASTER_SSL_CA", 
			"MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", 
			"MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_SSL_VERIFY_SERVER_CERT", 
			"MASTER_TLS_CIPHERSUITES", "MASTER_TLS_VERSION", "MASTER_USER", "MASTER_ZSTD_COMPRESSION_LEVEL", 
			"MATCH", "MAXVALUE", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", 
			"MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", 
			"MEDIUM", "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEMBER", "MEMORY", 
			"MERGE", "MESSAGE_TEXT", "MICROSECOND", "MIDDLEINT", "MIGRATE", "MINUTE", 
			"MINUTE_MICROSECOND", "MINUTE_SECOND", "MIN_ROWS", "MOD", "MODE", "MODIFIES", 
			"MODIFY", "MONTH", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON", "MUTEX", 
			"MYSQL_ERRNO", "NAME", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NDB", 
			"NDBCLUSTER", "NESTED", "NETWORK_NAMESPACE", "NEVER", "NEW", "NEXT", 
			"NO", "NODEGROUP", "NONE", "NOT", "NOWAIT", "NO_WAIT", "NO_WRITE_TO_BINLOG", 
			"NTH_VALUE", "NTILE", "NULL", "NULLS", "NUMBER", "NUMERIC", "NVARCHAR", 
			"OF", "OFF", "OFFSET", "OJ", "OLD", "ON", "ONE", "ONLY", "OPEN", "OPTIMIZE", 
			"OPTIMIZER_COSTS", "OPTION", "OPTIONAL", "OPTIONALLY", "OPTIONS", "OR", 
			"ORDER", "ORDINALITY", "ORGANIZATION", "OTHERS", "OUT", "OUTER", "OUTFILE", 
			"OVER", "OWNER", "PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITION", 
			"PARTITIONING", "PARTITIONS", "PASSWORD", "PASSWORD_LOCK_TIME", "PATH", 
			"PERCENT_RANK", "PERSIST", "PERSIST_ONLY", "PHASE", "PLUGIN", "PLUGINS", 
			"PLUGIN_DIR", "POINT", "POLYGON", "PORT", "PRECEDES", "PRECEDING", "PRECISION", 
			"PREPARE", "PRESERVE", "PREV", "PRIMARY", "PRIVILEGES", "PRIVILEGE_CHECKS_USER", 
			"PROCEDURE", "PROCESS", "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", 
			"PURGE", "QUARTER", "QUERY", "QUICK", "RANDOM", "RANGE", "RANK", "READ", 
			"READS", "READ_ONLY", "READ_WRITE", "REAL", "REBUILD", "RECOVER", "RECURSIVE", 
			"REDO_BUFFER_SIZE", "REDUNDANT", "REFERENCE", "REFERENCES", "REGEXP", 
			"RELAY", "RELAYLOG", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAY_THREAD", 
			"RELEASE", "RELOAD", "REMOVE", "RENAME", "REORGANIZE", "REPAIR", "REPEAT", 
			"REPEATABLE", "REPLACE", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", 
			"REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
			"REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "REQUIRE", "REQUIRE_ROW_FORMAT", 
			"RESET", "RESIGNAL", "RESOURCE", "RESPECT", "RESTART", "RESTORE", "RESTRICT", 
			"RESUME", "RETAIN", "RETURN", "RETURNED_SQLSTATE", "RETURNING", "RETURNS", 
			"REUSE", "REVERSE", "REVOKE", "RIGHT", "RLIKE", "ROLE", "ROLLBACK", "ROLLUP", 
			"ROTATE", "ROUTINE", "ROW", "ROWS", "ROW_COUNT", "ROW_FORMAT", "ROW_NUMBER", 
			"RTREE", "SAVEPOINT", "SCHEDULE", "SCHEMA", "SCHEMAS", "SCHEMA_NAME", 
			"SECOND", "SECONDARY", "SECONDARY_ENGINE", "SECONDARY_ENGINE_ATTRIBUTE", 
			"SECONDARY_LOAD", "SECONDARY_UNLOAD", "SECOND_MICROSECOND", "SECURITY", 
			"SELECT", "SENSITIVE", "SEPARATOR", "SERIAL", "SERIALIZABLE", "SERVER", 
			"SESSION", "SET", "SHARE", "SHOW", "SHUTDOWN", "SIGNAL", "SIGNED", "SIMPLE", 
			"SLAVE", "SLOW", "SMALLINT", "SNAPSHOT", "SOCKET", "SOME", "SONAME", 
			"SOUNDS", "SOURCE", "SPATIAL", "SPECIFIC", "SQL", "SQL_CACHE", "SQLEXCEPTION", 
			"SQLSTATE", "SQLWARNING", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", 
			"SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE", 
			"SQL_SMALL_RESULT", "SQL_THREAD", "SQL_TSI_DAY", "SQL_TSI_HOUR", "SQL_TSI_MINUTE", 
			"SQL_TSI_MONTH", "SQL_TSI_QUARTER", "SQL_TSI_SECOND", "SQL_TSI_WEEK", 
			"SQL_TSI_YEAR", "SRID", "SSL", "STACKED", "START", "STARTING", "STARTS", 
			"STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", "STATUS", 
			"STOP", "STORAGE", "STORED", "STRAIGHT_JOIN", "STREAM", "STRING", "SUBCLASS_ORIGIN", 
			"SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUPER", "SUSPEND", "SWAPS", 
			"SWITCHES", "SYSTEM", "TABLE", "TABLES", "TABLESPACE", "TABLE_CHECKSUM", 
			"TABLE_NAME", "TEMPORARY", "TEMPTABLE", "TERMINATED", "TEXT", "THAN", 
			"THEN", "THREAD_PRIORITY", "TIES", "TIME", "TIMESTAMP", "TIMESTAMPADD", 
			"TIMESTAMPDIFF", "TINYBLOB", "TINYINT", "TINYTEXT", "TLS", "TO", "TRAILING", 
			"TRANSACTION", "TRIGGER", "TRIGGERS", "TRUE", "TRUNCATE", "TYPE", "TYPES", 
			"UNBOUNDED", "UNCOMMITTED", "UNDEFINED", "UNDO", "UNDOFILE", "UNDO_BUFFER_SIZE", 
			"UNICODE", "UNINSTALL", "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", "UNSIGNED", 
			"UNTIL", "UPDATE", "UPGRADE", "USAGE", "USE", "USER", "USER_RESOURCES", 
			"USE_FRM", "USING", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "VALIDATION", 
			"VALUE", "VALUES", "VARBINARY", "VARCHAR", "VARCHARACTER", "VARIABLES", 
			"VARYING", "VCPU", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", 
			"WEEK", "WEIGHT_STRING", "WHEN", "WHERE", "WHILE", "WINDOW", "WITH", 
			"WITHOUT", "WORK", "WRAPPER", "WRITE", "X509", "XA", "XID", "XML", "XOR", 
			"YEAR", "YEAR_MONTH", "ZEROFILL", "INNODB_", "REDO_LOG_", "FILESIZE_LITERAL", 
			"IDENTIFIER_", "STRING_", "NUMBER_", "HEX_DIGIT_", "BIT_NUM_", "NOT_SUPPORT_"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "DALStatement.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public DALStatementParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class UseContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(DALStatementParser.USE, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public UseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterUse(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitUse(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitUse(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseContext use() throws RecognitionException {
		UseContext _localctx = new UseContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_use);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(560);
			match(USE);
			setState(561);
			schemaName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpContext extends ParserRuleContext {
		public TerminalNode HELP() { return getToken(DALStatementParser.HELP, 0); }
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public HelpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_help; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterHelp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitHelp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitHelp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HelpContext help() throws RecognitionException {
		HelpContext _localctx = new HelpContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_help);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(563);
			match(HELP);
			setState(564);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainContext extends ParserRuleContext {
		public TerminalNode DESC() { return getToken(DALStatementParser.DESC, 0); }
		public TerminalNode DESCRIBE() { return getToken(DALStatementParser.DESCRIBE, 0); }
		public TerminalNode EXPLAIN() { return getToken(DALStatementParser.EXPLAIN, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode ANALYZE() { return getToken(DALStatementParser.ANALYZE, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public ExplainableStatementContext explainableStatement() {
			return getRuleContext(ExplainableStatementContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DALStatementParser.FOR, 0); }
		public TerminalNode CONNECTION() { return getToken(DALStatementParser.CONNECTION, 0); }
		public ConnectionId_Context connectionId_() {
			return getRuleContext(ConnectionId_Context.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public PatternContext pattern() {
			return getRuleContext(PatternContext.class,0);
		}
		public ExplainTypeContext explainType() {
			return getRuleContext(ExplainTypeContext.class,0);
		}
		public ExplainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterExplain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitExplain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitExplain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainContext explain() throws RecognitionException {
		ExplainContext _localctx = new ExplainContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_explain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(566);
			_la = _input.LA(1);
			if ( !(((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (DESC - 194)) | (1L << (DESCRIBE - 194)) | (1L << (EXPLAIN - 194)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(583);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				setState(567);
				tableName();
				setState(570);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MAX:
				case MIN:
				case SUM:
				case COUNT:
				case GROUP_CONCAT:
				case CAST:
				case POSITION:
				case SUBSTRING:
				case SUBSTR:
				case EXTRACT:
				case TRIM:
				case LAST_DAY:
				case TRADITIONAL:
				case TREE:
				case MYSQL_ADMIN:
				case INSTANT:
				case INPLACE:
				case COPY:
				case UL_BINARY:
				case AUTOCOMMIT:
				case ACCOUNT:
				case ACTION:
				case ACTIVE:
				case ADMIN:
				case AFTER:
				case AGAINST:
				case AGGREGATE:
				case ALGORITHM:
				case ALWAYS:
				case ANY:
				case ASCII:
				case AT:
				case ATTRIBUTE:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG:
				case AVG_ROW_LENGTH:
				case BACKUP:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case BUCKETS:
				case BYTE:
				case CACHE:
				case CASCADED:
				case CATALOG_NAME:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHARSET:
				case CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLONE:
				case CLOSE:
				case COALESCE:
				case CODE:
				case COLLATION:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPACT:
				case COMPLETION:
				case COMPONENT:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_NAME:
				case CONSTRAINT_SCHEMA:
				case CONTAINS:
				case CONTEXT:
				case CPU:
				case CURRENT:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DATE:
				case DATETIME:
				case DAY:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DEFINITION:
				case DELAY_KEY_WRITE:
				case DESCRIPTION:
				case DIAGNOSTICS:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENFORCED:
				case ENGINE:
				case ENGINES:
				case ENGINE_ATTRIBUTE:
				case ENUM:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUDE:
				case EXECUTE:
				case EXPANSION:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAILED_LOGIN_ATTEMPTS:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWING:
				case FOLLOWS:
				case FORMAT:
				case FULL:
				case GENERAL:
				case GEOMCOLLECTION:
				case GEOMETRY:
				case GEOMETRYCOLLECTION:
				case GET_FORMAT:
				case GET_MASTER_PUBLIC_KEY:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HISTOGRAM:
				case HISTORY:
				case HOST:
				case HOSTS:
				case HOUR:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INACTIVE:
				case INDEXES:
				case INITIAL_SIZE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case JSON_VALUE:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LINESTRING:
				case LIST:
				case LOCAL:
				case LOCKED:
				case LOCKS:
				case LOGFILE:
				case LOGS:
				case MANAGED:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_COMPRESSION_ALGORITHMS:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_PUBLIC_KEY_PATH:
				case MASTER_RETRY_COUNT:
				case MASTER_SERVER_ID:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_CIPHERSUITES:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MASTER_ZSTD_COMPRESSION_LEVEL:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMORY:
				case MERGE:
				case MESSAGE_TEXT:
				case MICROSECOND:
				case MIGRATE:
				case MINUTE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MONTH:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case MUTEX:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NATIONAL:
				case NCHAR:
				case NDB:
				case NDBCLUSTER:
				case NESTED:
				case NETWORK_NAMESPACE:
				case NEVER:
				case NEW:
				case NEXT:
				case NO:
				case NODEGROUP:
				case NONE:
				case NOWAIT:
				case NO_WAIT:
				case NULLS:
				case NUMBER:
				case NVARCHAR:
				case OFF:
				case OFFSET:
				case OJ:
				case OLD:
				case ONE:
				case ONLY:
				case OPEN:
				case OPTIONAL:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PASSWORD:
				case PASSWORD_LOCK_TIME:
				case PATH:
				case PERSIST:
				case PERSIST_ONLY:
				case PHASE:
				case PLUGIN:
				case PLUGINS:
				case PLUGIN_DIR:
				case POINT:
				case POLYGON:
				case PORT:
				case PRECEDES:
				case PRECEDING:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PRIVILEGES:
				case PRIVILEGE_CHECKS_USER:
				case PROCESS:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUARTER:
				case QUERY:
				case QUICK:
				case RANDOM:
				case READ_ONLY:
				case REBUILD:
				case RECOVER:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case REFERENCE:
				case RELAY:
				case RELAYLOG:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAY_THREAD:
				case RELOAD:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPEATABLE:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case REQUIRE_ROW_FORMAT:
				case RESET:
				case RESOURCE:
				case RESPECT:
				case RESTART:
				case RESTORE:
				case RESUME:
				case RETAIN:
				case RETURNED_SQLSTATE:
				case RETURNING:
				case RETURNS:
				case REUSE:
				case REVERSE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROUTINE:
				case ROW_COUNT:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SCHEMA_NAME:
				case SECOND:
				case SECONDARY:
				case SECONDARY_ENGINE:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SECONDARY_LOAD:
				case SECONDARY_UNLOAD:
				case SECURITY:
				case SERIAL:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHUTDOWN:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_CACHE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case SQL_TSI_DAY:
				case SQL_TSI_HOUR:
				case SQL_TSI_MINUTE:
				case SQL_TSI_MONTH:
				case SQL_TSI_QUARTER:
				case SQL_TSI_SECOND:
				case SQL_TSI_WEEK:
				case SQL_TSI_YEAR:
				case SRID:
				case STACKED:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STREAM:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUPER:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLES:
				case TABLESPACE:
				case TABLE_CHECKSUM:
				case TABLE_NAME:
				case TEMPORARY:
				case TEMPTABLE:
				case TEXT:
				case THAN:
				case THREAD_PRIORITY:
				case TIES:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TLS:
				case TRANSACTION:
				case TRIGGERS:
				case TRUNCATE:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNICODE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USER_RESOURCES:
				case USE_FRM:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VCPU:
				case VIEW:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WEEK:
				case WEIGHT_STRING:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XID:
				case XML:
				case YEAR:
				case IDENTIFIER_:
					{
					setState(568);
					columnName();
					}
					break;
				case STRING_:
					{
					setState(569);
					pattern();
					}
					break;
				case EOF:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				{
				setState(573);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORMAT) {
					{
					setState(572);
					explainType();
					}
				}

				setState(579);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LP_:
				case DELETE:
				case INSERT:
				case REPLACE:
				case SELECT:
				case TABLE:
				case UPDATE:
				case WITH:
					{
					setState(575);
					explainableStatement();
					}
					break;
				case FOR:
					{
					setState(576);
					match(FOR);
					setState(577);
					match(CONNECTION);
					setState(578);
					connectionId_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				setState(581);
				match(ANALYZE);
				setState(582);
				select();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowDatabasesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode DATABASES() { return getToken(DALStatementParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(DALStatementParser.SCHEMAS, 0); }
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowDatabasesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showDatabases; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowDatabases(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowDatabases(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowDatabases(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowDatabasesContext showDatabases() throws RecognitionException {
		ShowDatabasesContext _localctx = new ShowDatabasesContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_showDatabases);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(585);
			match(SHOW);
			setState(586);
			_la = _input.LA(1);
			if ( !(_la==DATABASES || _la==SCHEMAS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE || _la==WHERE) {
				{
				setState(587);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowTablesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode TABLES() { return getToken(DALStatementParser.TABLES, 0); }
		public TerminalNode EXTENDED() { return getToken(DALStatementParser.EXTENDED, 0); }
		public TerminalNode FULL() { return getToken(DALStatementParser.FULL, 0); }
		public FromSchemaContext fromSchema() {
			return getRuleContext(FromSchemaContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowTablesContext showTables() throws RecognitionException {
		ShowTablesContext _localctx = new ShowTablesContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_showTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(590);
			match(SHOW);
			setState(592);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(591);
				match(EXTENDED);
				}
			}

			setState(595);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULL) {
				{
				setState(594);
				match(FULL);
				}
			}

			setState(597);
			match(TABLES);
			setState(599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==IN) {
				{
				setState(598);
				fromSchema();
				}
			}

			setState(602);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE || _la==WHERE) {
				{
				setState(601);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowTableStatusContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode TABLE() { return getToken(DALStatementParser.TABLE, 0); }
		public TerminalNode STATUS() { return getToken(DALStatementParser.STATUS, 0); }
		public FromSchemaContext fromSchema() {
			return getRuleContext(FromSchemaContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowTableStatusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showTableStatus; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowTableStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowTableStatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowTableStatus(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowTableStatusContext showTableStatus() throws RecognitionException {
		ShowTableStatusContext _localctx = new ShowTableStatusContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_showTableStatus);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(604);
			match(SHOW);
			setState(605);
			match(TABLE);
			setState(606);
			match(STATUS);
			setState(608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==IN) {
				{
				setState(607);
				fromSchema();
				}
			}

			setState(611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE || _la==WHERE) {
				{
				setState(610);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowColumnsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public FromTableContext fromTable() {
			return getRuleContext(FromTableContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(DALStatementParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(DALStatementParser.FIELDS, 0); }
		public TerminalNode EXTENDED() { return getToken(DALStatementParser.EXTENDED, 0); }
		public TerminalNode FULL() { return getToken(DALStatementParser.FULL, 0); }
		public FromSchemaContext fromSchema() {
			return getRuleContext(FromSchemaContext.class,0);
		}
		public ShowColumnLike_Context showColumnLike_() {
			return getRuleContext(ShowColumnLike_Context.class,0);
		}
		public ShowWhereClause_Context showWhereClause_() {
			return getRuleContext(ShowWhereClause_Context.class,0);
		}
		public ShowColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowColumnsContext showColumns() throws RecognitionException {
		ShowColumnsContext _localctx = new ShowColumnsContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_showColumns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(613);
			match(SHOW);
			setState(615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(614);
				match(EXTENDED);
				}
			}

			setState(618);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULL) {
				{
				setState(617);
				match(FULL);
				}
			}

			setState(620);
			_la = _input.LA(1);
			if ( !(_la==COLUMNS || _la==FIELDS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(621);
			fromTable();
			setState(623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==IN) {
				{
				setState(622);
				fromSchema();
				}
			}

			setState(627);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				{
				setState(625);
				showColumnLike_();
				}
				break;
			case WHERE:
				{
				setState(626);
				showWhereClause_();
				}
				break;
			case EOF:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowIndexContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public FromTableContext fromTable() {
			return getRuleContext(FromTableContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(DALStatementParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(DALStatementParser.INDEXES, 0); }
		public TerminalNode KEYS() { return getToken(DALStatementParser.KEYS, 0); }
		public TerminalNode EXTENDED() { return getToken(DALStatementParser.EXTENDED, 0); }
		public FromSchemaContext fromSchema() {
			return getRuleContext(FromSchemaContext.class,0);
		}
		public ShowWhereClause_Context showWhereClause_() {
			return getRuleContext(ShowWhereClause_Context.class,0);
		}
		public ShowIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowIndexContext showIndex() throws RecognitionException {
		ShowIndexContext _localctx = new ShowIndexContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_showIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(629);
			match(SHOW);
			setState(631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(630);
				match(EXTENDED);
				}
			}

			setState(633);
			_la = _input.LA(1);
			if ( !(((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (INDEX - 308)) | (1L << (INDEXES - 308)) | (1L << (KEYS - 308)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(634);
			fromTable();
			setState(636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==IN) {
				{
				setState(635);
				fromSchema();
				}
			}

			setState(639);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(638);
				showWhereClause_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateTableContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(DALStatementParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(DALStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ShowCreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCreateTableContext showCreateTable() throws RecognitionException {
		ShowCreateTableContext _localctx = new ShowCreateTableContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_showCreateTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(641);
			match(SHOW);
			setState(642);
			match(CREATE);
			setState(643);
			match(TABLE);
			setState(644);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowOtherContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public ShowOtherContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showOther; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowOther(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowOther(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowOther(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowOtherContext showOther() throws RecognitionException {
		ShowOtherContext _localctx = new ShowOtherContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_showOther);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(646);
			match(SHOW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromSchemaContext extends ParserRuleContext {
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DALStatementParser.FROM, 0); }
		public TerminalNode IN() { return getToken(DALStatementParser.IN, 0); }
		public FromSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromSchema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterFromSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitFromSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitFromSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromSchemaContext fromSchema() throws RecognitionException {
		FromSchemaContext _localctx = new FromSchemaContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_fromSchema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(648);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==IN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(649);
			schemaName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromTableContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DALStatementParser.FROM, 0); }
		public TerminalNode IN() { return getToken(DALStatementParser.IN, 0); }
		public FromTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterFromTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitFromTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitFromTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromTableContext fromTable() throws RecognitionException {
		FromTableContext _localctx = new FromTableContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_fromTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(651);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==IN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(652);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowLikeContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(DALStatementParser.LIKE, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public ShowLikeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showLike; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowLike(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowLike(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowLike(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowLikeContext showLike() throws RecognitionException {
		ShowLikeContext _localctx = new ShowLikeContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_showLike);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(654);
			match(LIKE);
			setState(655);
			stringLiterals();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowColumnLike_Context extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(DALStatementParser.LIKE, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public ShowColumnLike_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showColumnLike_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowColumnLike_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowColumnLike_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowColumnLike_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowColumnLike_Context showColumnLike_() throws RecognitionException {
		ShowColumnLike_Context _localctx = new ShowColumnLike_Context(_ctx, getState());
		enterRule(_localctx, 26, RULE_showColumnLike_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(657);
			match(LIKE);
			setState(658);
			stringLiterals();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowWhereClause_Context extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(DALStatementParser.WHERE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public ShowWhereClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showWhereClause_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowWhereClause_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowWhereClause_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowWhereClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowWhereClause_Context showWhereClause_() throws RecognitionException {
		ShowWhereClause_Context _localctx = new ShowWhereClause_Context(_ctx, getState());
		enterRule(_localctx, 28, RULE_showWhereClause_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(660);
			match(WHERE);
			setState(661);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFilterContext extends ParserRuleContext {
		public ShowLikeContext showLike() {
			return getRuleContext(ShowLikeContext.class,0);
		}
		public ShowWhereClause_Context showWhereClause_() {
			return getRuleContext(ShowWhereClause_Context.class,0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFilterContext showFilter() throws RecognitionException {
		ShowFilterContext _localctx = new ShowFilterContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_showFilter);
		try {
			setState(665);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(663);
				showLike();
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(664);
				showWhereClause_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileTypeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(DALStatementParser.ALL, 0); }
		public TerminalNode BLOCK() { return getToken(DALStatementParser.BLOCK, 0); }
		public TerminalNode IO() { return getToken(DALStatementParser.IO, 0); }
		public TerminalNode CONTEXT() { return getToken(DALStatementParser.CONTEXT, 0); }
		public TerminalNode SWITCHES() { return getToken(DALStatementParser.SWITCHES, 0); }
		public TerminalNode CPU() { return getToken(DALStatementParser.CPU, 0); }
		public TerminalNode IPC() { return getToken(DALStatementParser.IPC, 0); }
		public TerminalNode MEMORY() { return getToken(DALStatementParser.MEMORY, 0); }
		public TerminalNode PAGE() { return getToken(DALStatementParser.PAGE, 0); }
		public TerminalNode FAULTS() { return getToken(DALStatementParser.FAULTS, 0); }
		public TerminalNode SOURCE() { return getToken(DALStatementParser.SOURCE, 0); }
		public TerminalNode SWAPS() { return getToken(DALStatementParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowProfileType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowProfileType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowProfileType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfileTypeContext showProfileType() throws RecognitionException {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_showProfileType);
		try {
			setState(679);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(667);
				match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(668);
				match(BLOCK);
				setState(669);
				match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(670);
				match(CONTEXT);
				setState(671);
				match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(672);
				match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(673);
				match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(674);
				match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(675);
				match(PAGE);
				setState(676);
				match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(677);
				match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(678);
				match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetVariableContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DALStatementParser.SET, 0); }
		public List<VariableAssignContext> variableAssign() {
			return getRuleContexts(VariableAssignContext.class);
		}
		public VariableAssignContext variableAssign(int i) {
			return getRuleContext(VariableAssignContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public SetVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSetVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSetVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSetVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetVariableContext setVariable() throws RecognitionException {
		SetVariableContext _localctx = new SetVariableContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_setVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(681);
			match(SET);
			setState(682);
			variableAssign();
			setState(687);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(683);
				match(COMMA_);
				setState(684);
				variableAssign();
				}
				}
				setState(689);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableAssignContext extends ParserRuleContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DALStatementParser.EQ_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public VariableAssignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableAssign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterVariableAssign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitVariableAssign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitVariableAssign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableAssignContext variableAssign() throws RecognitionException {
		VariableAssignContext _localctx = new VariableAssignContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_variableAssign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(690);
			variable();
			setState(691);
			match(EQ_);
			setState(692);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowBinaryLogsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(DALStatementParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(DALStatementParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(DALStatementParser.MASTER, 0); }
		public ShowBinaryLogsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showBinaryLogs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowBinaryLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowBinaryLogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowBinaryLogs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowBinaryLogsContext showBinaryLogs() throws RecognitionException {
		ShowBinaryLogsContext _localctx = new ShowBinaryLogsContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_showBinaryLogs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(694);
			match(SHOW);
			setState(695);
			_la = _input.LA(1);
			if ( !(_la==BINARY || _la==MASTER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(696);
			match(LOGS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowBinlogEventsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode BINLOG() { return getToken(DALStatementParser.BINLOG, 0); }
		public TerminalNode EVENTS() { return getToken(DALStatementParser.EVENTS, 0); }
		public TerminalNode IN() { return getToken(DALStatementParser.IN, 0); }
		public TerminalNode DEFINER() { return getToken(DALStatementParser.DEFINER, 0); }
		public TerminalNode FROM() { return getToken(DALStatementParser.FROM, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(DALStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(DALStatementParser.NUMBER_, i);
		}
		public TerminalNode LIMIT() { return getToken(DALStatementParser.LIMIT, 0); }
		public TerminalNode COMMA_() { return getToken(DALStatementParser.COMMA_, 0); }
		public ShowBinlogEventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showBinlogEvents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowBinlogEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowBinlogEvents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowBinlogEvents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowBinlogEventsContext showBinlogEvents() throws RecognitionException {
		ShowBinlogEventsContext _localctx = new ShowBinlogEventsContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_showBinlogEvents);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(698);
			match(SHOW);
			setState(699);
			match(BINLOG);
			setState(700);
			match(EVENTS);
			setState(703);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(701);
				match(IN);
				setState(702);
				match(DEFINER);
				}
			}

			setState(707);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(705);
				match(FROM);
				setState(706);
				match(NUMBER_);
				}
			}

			setState(715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(709);
				match(LIMIT);
				setState(712);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
				case 1:
					{
					setState(710);
					match(NUMBER_);
					setState(711);
					match(COMMA_);
					}
					break;
				}
				setState(714);
				match(NUMBER_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCharacterSetContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode CHARACTER() { return getToken(DALStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(DALStatementParser.SET, 0); }
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowCharacterSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCharacterSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowCharacterSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowCharacterSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowCharacterSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCharacterSetContext showCharacterSet() throws RecognitionException {
		ShowCharacterSetContext _localctx = new ShowCharacterSetContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_showCharacterSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(717);
			match(SHOW);
			setState(718);
			match(CHARACTER);
			setState(719);
			match(SET);
			setState(721);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE || _la==WHERE) {
				{
				setState(720);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCollationContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode COLLATION() { return getToken(DALStatementParser.COLLATION, 0); }
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCollation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowCollation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCollationContext showCollation() throws RecognitionException {
		ShowCollationContext _localctx = new ShowCollationContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_showCollation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(723);
			match(SHOW);
			setState(724);
			match(COLLATION);
			setState(726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE || _la==WHERE) {
				{
				setState(725);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateDatabaseContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(DALStatementParser.CREATE, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(DALStatementParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(DALStatementParser.SCHEMA, 0); }
		public NotExistClause_Context notExistClause_() {
			return getRuleContext(NotExistClause_Context.class,0);
		}
		public ShowCreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCreateDatabaseContext showCreateDatabase() throws RecognitionException {
		ShowCreateDatabaseContext _localctx = new ShowCreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_showCreateDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(728);
			match(SHOW);
			setState(729);
			match(CREATE);
			setState(730);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(731);
				notExistClause_();
				}
			}

			setState(734);
			schemaName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateEventContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(DALStatementParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(DALStatementParser.EVENT, 0); }
		public EventNameContext eventName() {
			return getRuleContext(EventNameContext.class,0);
		}
		public ShowCreateEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowCreateEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowCreateEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowCreateEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCreateEventContext showCreateEvent() throws RecognitionException {
		ShowCreateEventContext _localctx = new ShowCreateEventContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_showCreateEvent);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(736);
			match(SHOW);
			setState(737);
			match(CREATE);
			setState(738);
			match(EVENT);
			setState(739);
			eventName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateFunctionContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(DALStatementParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DALStatementParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public ShowCreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowCreateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCreateFunctionContext showCreateFunction() throws RecognitionException {
		ShowCreateFunctionContext _localctx = new ShowCreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_showCreateFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(741);
			match(SHOW);
			setState(742);
			match(CREATE);
			setState(743);
			match(FUNCTION);
			setState(744);
			functionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateProcedureContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(DALStatementParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(DALStatementParser.PROCEDURE, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public ShowCreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowCreateProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCreateProcedureContext showCreateProcedure() throws RecognitionException {
		ShowCreateProcedureContext _localctx = new ShowCreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_showCreateProcedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(746);
			match(SHOW);
			setState(747);
			match(CREATE);
			setState(748);
			match(PROCEDURE);
			setState(749);
			functionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateTriggerContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(DALStatementParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(DALStatementParser.TRIGGER, 0); }
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public ShowCreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowCreateTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowCreateTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCreateTriggerContext showCreateTrigger() throws RecognitionException {
		ShowCreateTriggerContext _localctx = new ShowCreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_showCreateTrigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(751);
			match(SHOW);
			setState(752);
			match(CREATE);
			setState(753);
			match(TRIGGER);
			setState(754);
			triggerName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateUserContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(DALStatementParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(DALStatementParser.USER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowCreateUserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateUser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowCreateUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowCreateUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCreateUserContext showCreateUser() throws RecognitionException {
		ShowCreateUserContext _localctx = new ShowCreateUserContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_showCreateUser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(756);
			match(SHOW);
			setState(757);
			match(CREATE);
			setState(758);
			match(USER);
			setState(759);
			userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCreateViewContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(DALStatementParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(DALStatementParser.VIEW, 0); }
		public ViewNameContext viewName() {
			return getRuleContext(ViewNameContext.class,0);
		}
		public ShowCreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCreateView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCreateViewContext showCreateView() throws RecognitionException {
		ShowCreateViewContext _localctx = new ShowCreateViewContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_showCreateView);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(761);
			match(SHOW);
			setState(762);
			match(CREATE);
			setState(763);
			match(VIEW);
			setState(764);
			viewName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowEngineContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode ENGINE() { return getToken(DALStatementParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(DALStatementParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(DALStatementParser.MUTEX, 0); }
		public ShowEngineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showEngine; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowEngine(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowEngineContext showEngine() throws RecognitionException {
		ShowEngineContext _localctx = new ShowEngineContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_showEngine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(766);
			match(SHOW);
			setState(767);
			match(ENGINE);
			setState(768);
			engineName();
			setState(769);
			_la = _input.LA(1);
			if ( !(_la==MUTEX || _la==STATUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowEnginesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode ENGINES() { return getToken(DALStatementParser.ENGINES, 0); }
		public TerminalNode STORAGE() { return getToken(DALStatementParser.STORAGE, 0); }
		public ShowEnginesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showEngines; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowEngines(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowEngines(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowEngines(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowEnginesContext showEngines() throws RecognitionException {
		ShowEnginesContext _localctx = new ShowEnginesContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_showEngines);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(771);
			match(SHOW);
			setState(773);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STORAGE) {
				{
				setState(772);
				match(STORAGE);
				}
			}

			setState(775);
			match(ENGINES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowErrorsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(DALStatementParser.ERRORS, 0); }
		public TerminalNode COUNT() { return getToken(DALStatementParser.COUNT, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public TerminalNode ASTERISK_() { return getToken(DALStatementParser.ASTERISK_, 0); }
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public TerminalNode LIMIT() { return getToken(DALStatementParser.LIMIT, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(DALStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(DALStatementParser.NUMBER_, i);
		}
		public TerminalNode COMMA_() { return getToken(DALStatementParser.COMMA_, 0); }
		public ShowErrorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showErrors; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowErrors(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowErrorsContext showErrors() throws RecognitionException {
		ShowErrorsContext _localctx = new ShowErrorsContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_showErrors);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(777);
			match(SHOW);
			setState(782);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COUNT) {
				{
				setState(778);
				match(COUNT);
				setState(779);
				match(LP_);
				setState(780);
				match(ASTERISK_);
				setState(781);
				match(RP_);
				}
			}

			setState(784);
			match(ERRORS);
			setState(791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(785);
				match(LIMIT);
				setState(788);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
				case 1:
					{
					setState(786);
					match(NUMBER_);
					setState(787);
					match(COMMA_);
					}
					break;
				}
				setState(790);
				match(NUMBER_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowEventsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(DALStatementParser.EVENTS, 0); }
		public FromSchemaContext fromSchema() {
			return getRuleContext(FromSchemaContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowEventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showEvents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowEvents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowEvents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowEventsContext showEvents() throws RecognitionException {
		ShowEventsContext _localctx = new ShowEventsContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_showEvents);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(793);
			match(SHOW);
			setState(794);
			match(EVENTS);
			setState(796);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==IN) {
				{
				setState(795);
				fromSchema();
				}
			}

			setState(799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE || _la==WHERE) {
				{
				setState(798);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFunctionCodeContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode FUNCTION() { return getToken(DALStatementParser.FUNCTION, 0); }
		public TerminalNode CODE() { return getToken(DALStatementParser.CODE, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public ShowFunctionCodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFunctionCode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowFunctionCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowFunctionCode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowFunctionCode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFunctionCodeContext showFunctionCode() throws RecognitionException {
		ShowFunctionCodeContext _localctx = new ShowFunctionCodeContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_showFunctionCode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(801);
			match(SHOW);
			setState(802);
			match(FUNCTION);
			setState(803);
			match(CODE);
			setState(804);
			functionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFunctionStatusContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode FUNCTION() { return getToken(DALStatementParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(DALStatementParser.STATUS, 0); }
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowFunctionStatusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFunctionStatus; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowFunctionStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowFunctionStatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowFunctionStatus(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFunctionStatusContext showFunctionStatus() throws RecognitionException {
		ShowFunctionStatusContext _localctx = new ShowFunctionStatusContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_showFunctionStatus);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(806);
			match(SHOW);
			setState(807);
			match(FUNCTION);
			setState(808);
			match(STATUS);
			setState(810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE || _la==WHERE) {
				{
				setState(809);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowGrantContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(DALStatementParser.GRANTS, 0); }
		public TerminalNode FOR() { return getToken(DALStatementParser.FOR, 0); }
		public UserOrRoleContext userOrRole() {
			return getRuleContext(UserOrRoleContext.class,0);
		}
		public TerminalNode USING() { return getToken(DALStatementParser.USING, 0); }
		public List<RoleNameContext> roleName() {
			return getRuleContexts(RoleNameContext.class);
		}
		public RoleNameContext roleName(int i) {
			return getRuleContext(RoleNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public ShowGrantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGrant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowGrant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowGrant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowGrant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowGrantContext showGrant() throws RecognitionException {
		ShowGrantContext _localctx = new ShowGrantContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_showGrant);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(812);
			match(SHOW);
			setState(813);
			match(GRANTS);
			setState(826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(814);
				match(FOR);
				setState(815);
				userOrRole();
				setState(824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(816);
					match(USING);
					setState(817);
					roleName();
					setState(820); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(818);
						match(COMMA_);
						setState(819);
						roleName();
						}
						}
						setState(822); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==COMMA_ );
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowMasterStatusContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode MASTER() { return getToken(DALStatementParser.MASTER, 0); }
		public TerminalNode STATUS() { return getToken(DALStatementParser.STATUS, 0); }
		public ShowMasterStatusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showMasterStatus; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowMasterStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowMasterStatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowMasterStatus(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowMasterStatusContext showMasterStatus() throws RecognitionException {
		ShowMasterStatusContext _localctx = new ShowMasterStatusContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_showMasterStatus);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(828);
			match(SHOW);
			setState(829);
			match(MASTER);
			setState(830);
			match(STATUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowOpenTablesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(DALStatementParser.OPEN, 0); }
		public TerminalNode TABLES() { return getToken(DALStatementParser.TABLES, 0); }
		public FromSchemaContext fromSchema() {
			return getRuleContext(FromSchemaContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowOpenTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showOpenTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowOpenTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowOpenTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowOpenTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowOpenTablesContext showOpenTables() throws RecognitionException {
		ShowOpenTablesContext _localctx = new ShowOpenTablesContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_showOpenTables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(832);
			match(SHOW);
			setState(833);
			match(OPEN);
			setState(834);
			match(TABLES);
			setState(836);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==IN) {
				{
				setState(835);
				fromSchema();
				}
			}

			setState(839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE || _la==WHERE) {
				{
				setState(838);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowPluginsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode PLUGINS() { return getToken(DALStatementParser.PLUGINS, 0); }
		public ShowPluginsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showPlugins; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowPlugins(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowPlugins(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowPlugins(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowPluginsContext showPlugins() throws RecognitionException {
		ShowPluginsContext _localctx = new ShowPluginsContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_showPlugins);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(841);
			match(SHOW);
			setState(842);
			match(PLUGINS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowPrivilegesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DALStatementParser.PRIVILEGES, 0); }
		public ShowPrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showPrivileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowPrivilegesContext showPrivileges() throws RecognitionException {
		ShowPrivilegesContext _localctx = new ShowPrivilegesContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_showPrivileges);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(844);
			match(SHOW);
			setState(845);
			match(PRIVILEGES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProcedureCodeContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode PROCEDURE() { return getToken(DALStatementParser.PROCEDURE, 0); }
		public TerminalNode CODE() { return getToken(DALStatementParser.CODE, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public ShowProcedureCodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProcedureCode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowProcedureCode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowProcedureCode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowProcedureCode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProcedureCodeContext showProcedureCode() throws RecognitionException {
		ShowProcedureCodeContext _localctx = new ShowProcedureCodeContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_showProcedureCode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(847);
			match(SHOW);
			setState(848);
			match(PROCEDURE);
			setState(849);
			match(CODE);
			setState(850);
			functionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProcedureStatusContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode PROCEDURE() { return getToken(DALStatementParser.PROCEDURE, 0); }
		public TerminalNode STATUS() { return getToken(DALStatementParser.STATUS, 0); }
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowProcedureStatusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProcedureStatus; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowProcedureStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowProcedureStatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowProcedureStatus(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProcedureStatusContext showProcedureStatus() throws RecognitionException {
		ShowProcedureStatusContext _localctx = new ShowProcedureStatusContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_showProcedureStatus);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(852);
			match(SHOW);
			setState(853);
			match(PROCEDURE);
			setState(854);
			match(STATUS);
			setState(855);
			showFilter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProcesslistContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode PROCESSLIST() { return getToken(DALStatementParser.PROCESSLIST, 0); }
		public TerminalNode FULL() { return getToken(DALStatementParser.FULL, 0); }
		public ShowProcesslistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProcesslist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowProcesslist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowProcesslist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowProcesslist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProcesslistContext showProcesslist() throws RecognitionException {
		ShowProcesslistContext _localctx = new ShowProcesslistContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_showProcesslist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(857);
			match(SHOW);
			setState(859);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FULL) {
				{
				setState(858);
				match(FULL);
				}
			}

			setState(861);
			match(PROCESSLIST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode PROFILE() { return getToken(DALStatementParser.PROFILE, 0); }
		public List<ShowProfileTypeContext> showProfileType() {
			return getRuleContexts(ShowProfileTypeContext.class);
		}
		public ShowProfileTypeContext showProfileType(int i) {
			return getRuleContext(ShowProfileTypeContext.class,i);
		}
		public TerminalNode FOR() { return getToken(DALStatementParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(DALStatementParser.QUERY, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(DALStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(DALStatementParser.NUMBER_, i);
		}
		public TerminalNode LIMIT() { return getToken(DALStatementParser.LIMIT, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public TerminalNode OFFSET() { return getToken(DALStatementParser.OFFSET, 0); }
		public ShowProfileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfile; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowProfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowProfile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowProfile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfileContext showProfile() throws RecognitionException {
		ShowProfileContext _localctx = new ShowProfileContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_showProfile);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(863);
			match(SHOW);
			setState(864);
			match(PROFILE);
			setState(873);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==BLOCK || _la==CONTEXT || _la==CPU || _la==IPC || _la==MEMORY || _la==PAGE || _la==SOURCE || _la==SWAPS) {
				{
				setState(865);
				showProfileType();
				setState(870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(866);
					match(COMMA_);
					setState(867);
					showProfileType();
					}
					}
					setState(872);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(875);
				match(FOR);
				setState(876);
				match(QUERY);
				setState(877);
				match(NUMBER_);
				}
			}

			setState(886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(880);
				match(LIMIT);
				setState(881);
				match(NUMBER_);
				setState(884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OFFSET) {
					{
					setState(882);
					match(OFFSET);
					setState(883);
					match(NUMBER_);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfilesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode PROFILES() { return getToken(DALStatementParser.PROFILES, 0); }
		public ShowProfilesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfiles; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowProfiles(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowProfiles(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowProfiles(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfilesContext showProfiles() throws RecognitionException {
		ShowProfilesContext _localctx = new ShowProfilesContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_showProfiles);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(888);
			match(SHOW);
			setState(889);
			match(PROFILES);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowRelaylogEventContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode RELAYLOG() { return getToken(DALStatementParser.RELAYLOG, 0); }
		public TerminalNode EVENTS() { return getToken(DALStatementParser.EVENTS, 0); }
		public TerminalNode FOR() { return getToken(DALStatementParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(DALStatementParser.CHANNEL, 0); }
		public ChannelNameContext channelName() {
			return getRuleContext(ChannelNameContext.class,0);
		}
		public TerminalNode IN() { return getToken(DALStatementParser.IN, 0); }
		public LogNameContext logName() {
			return getRuleContext(LogNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DALStatementParser.FROM, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(DALStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(DALStatementParser.NUMBER_, i);
		}
		public TerminalNode LIMIT() { return getToken(DALStatementParser.LIMIT, 0); }
		public TerminalNode COMMA_() { return getToken(DALStatementParser.COMMA_, 0); }
		public ShowRelaylogEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showRelaylogEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowRelaylogEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowRelaylogEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowRelaylogEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowRelaylogEventContext showRelaylogEvent() throws RecognitionException {
		ShowRelaylogEventContext _localctx = new ShowRelaylogEventContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_showRelaylogEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(891);
			match(SHOW);
			setState(892);
			match(RELAYLOG);
			setState(893);
			match(EVENTS);
			setState(896);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(894);
				match(IN);
				setState(895);
				logName();
				}
			}

			setState(900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(898);
				match(FROM);
				setState(899);
				match(NUMBER_);
				}
			}

			setState(908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(902);
				match(LIMIT);
				setState(905);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(903);
					match(NUMBER_);
					setState(904);
					match(COMMA_);
					}
					break;
				}
				setState(907);
				match(NUMBER_);
				}
			}

			setState(910);
			match(FOR);
			setState(911);
			match(CHANNEL);
			setState(912);
			channelName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSlavehostContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(DALStatementParser.SLAVE, 0); }
		public TerminalNode HOST() { return getToken(DALStatementParser.HOST, 0); }
		public ShowSlavehostContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSlavehost; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowSlavehost(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowSlavehost(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowSlavehost(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowSlavehostContext showSlavehost() throws RecognitionException {
		ShowSlavehostContext _localctx = new ShowSlavehostContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_showSlavehost);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(914);
			match(SHOW);
			setState(915);
			match(SLAVE);
			setState(916);
			match(HOST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSlaveStatusContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(DALStatementParser.SLAVE, 0); }
		public TerminalNode STATUS() { return getToken(DALStatementParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(DALStatementParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(DALStatementParser.CHANNEL, 0); }
		public ChannelNameContext channelName() {
			return getRuleContext(ChannelNameContext.class,0);
		}
		public ShowSlaveStatusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSlaveStatus; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowSlaveStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowSlaveStatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowSlaveStatus(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowSlaveStatusContext showSlaveStatus() throws RecognitionException {
		ShowSlaveStatusContext _localctx = new ShowSlaveStatusContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_showSlaveStatus);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(918);
			match(SHOW);
			setState(919);
			match(SLAVE);
			setState(920);
			match(STATUS);
			setState(924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(921);
				match(FOR);
				setState(922);
				match(CHANNEL);
				setState(923);
				channelName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatusContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode STATUS() { return getToken(DALStatementParser.STATUS, 0); }
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(DALStatementParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(DALStatementParser.SESSION, 0); }
		public ShowStatusContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatus; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowStatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowStatus(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatusContext showStatus() throws RecognitionException {
		ShowStatusContext _localctx = new ShowStatusContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_showStatus);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(926);
			match(SHOW);
			setState(928);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				setState(927);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(930);
			match(STATUS);
			setState(932);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE || _la==WHERE) {
				{
				setState(931);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowTrriggersContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode TRIGGER() { return getToken(DALStatementParser.TRIGGER, 0); }
		public FromSchemaContext fromSchema() {
			return getRuleContext(FromSchemaContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowTrriggersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showTrriggers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowTrriggers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowTrriggers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowTrriggers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowTrriggersContext showTrriggers() throws RecognitionException {
		ShowTrriggersContext _localctx = new ShowTrriggersContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_showTrriggers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(934);
			match(SHOW);
			setState(935);
			match(TRIGGER);
			setState(937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM || _la==IN) {
				{
				setState(936);
				fromSchema();
				}
			}

			setState(940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE || _la==WHERE) {
				{
				setState(939);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowVariablesContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode VARIABLES() { return getToken(DALStatementParser.VARIABLES, 0); }
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(DALStatementParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(DALStatementParser.SESSION, 0); }
		public ShowVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showVariables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowVariables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowVariablesContext showVariables() throws RecognitionException {
		ShowVariablesContext _localctx = new ShowVariablesContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_showVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(942);
			match(SHOW);
			setState(944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GLOBAL || _la==SESSION) {
				{
				setState(943);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==SESSION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(946);
			match(VARIABLES);
			setState(948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIKE || _la==WHERE) {
				{
				setState(947);
				showFilter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowWarningsContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(DALStatementParser.SHOW, 0); }
		public TerminalNode WARNINGS() { return getToken(DALStatementParser.WARNINGS, 0); }
		public TerminalNode COUNT() { return getToken(DALStatementParser.COUNT, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public TerminalNode ASTERISK_() { return getToken(DALStatementParser.ASTERISK_, 0); }
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public TerminalNode LIMIT() { return getToken(DALStatementParser.LIMIT, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(DALStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(DALStatementParser.NUMBER_, i);
		}
		public TerminalNode COMMA_() { return getToken(DALStatementParser.COMMA_, 0); }
		public ShowWarningsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showWarnings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShowWarnings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShowWarnings(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShowWarnings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowWarningsContext showWarnings() throws RecognitionException {
		ShowWarningsContext _localctx = new ShowWarningsContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_showWarnings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(950);
			match(SHOW);
			setState(955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COUNT) {
				{
				setState(951);
				match(COUNT);
				setState(952);
				match(LP_);
				setState(953);
				match(ASTERISK_);
				setState(954);
				match(RP_);
				}
			}

			setState(957);
			match(WARNINGS);
			setState(964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(958);
				match(LIMIT);
				setState(961);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
				case 1:
					{
					setState(959);
					match(NUMBER_);
					setState(960);
					match(COMMA_);
					}
					break;
				}
				setState(963);
				match(NUMBER_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetCharacterContext extends ParserRuleContext {
		public List<TerminalNode> SET() { return getTokens(DALStatementParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(DALStatementParser.SET, i);
		}
		public TerminalNode CHARACTER() { return getToken(DALStatementParser.CHARACTER, 0); }
		public TerminalNode CHARSET() { return getToken(DALStatementParser.CHARSET, 0); }
		public CharacterSetName_Context characterSetName_() {
			return getRuleContext(CharacterSetName_Context.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DALStatementParser.DEFAULT, 0); }
		public SetCharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setCharacter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSetCharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSetCharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSetCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetCharacterContext setCharacter() throws RecognitionException {
		SetCharacterContext _localctx = new SetCharacterContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_setCharacter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(966);
			match(SET);
			setState(970);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				{
				setState(967);
				match(CHARACTER);
				setState(968);
				match(SET);
				}
				break;
			case CHARSET:
				{
				setState(969);
				match(CHARSET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(974);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_:
				{
				setState(972);
				characterSetName_();
				}
				break;
			case DEFAULT:
				{
				setState(973);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetNameContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DALStatementParser.SET, 0); }
		public TerminalNode NAMES() { return getToken(DALStatementParser.NAMES, 0); }
		public CharacterSetName_Context characterSetName_() {
			return getRuleContext(CharacterSetName_Context.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DALStatementParser.DEFAULT, 0); }
		public TerminalNode COLLATE() { return getToken(DALStatementParser.COLLATE, 0); }
		public CollationName_Context collationName_() {
			return getRuleContext(CollationName_Context.class,0);
		}
		public SetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSetName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetNameContext setName() throws RecognitionException {
		SetNameContext _localctx = new SetNameContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_setName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(976);
			match(SET);
			setState(977);
			match(NAMES);
			setState(984);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_:
				{
				setState(978);
				characterSetName_();
				setState(981);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(979);
					match(COLLATE);
					setState(980);
					collationName_();
					}
				}

				}
				break;
			case DEFAULT:
				{
				setState(983);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloneContext extends ParserRuleContext {
		public TerminalNode CLONE() { return getToken(DALStatementParser.CLONE, 0); }
		public CloneAction_Context cloneAction_() {
			return getRuleContext(CloneAction_Context.class,0);
		}
		public CloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterClone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitClone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitClone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloneContext clone() throws RecognitionException {
		CloneContext _localctx = new CloneContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_clone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(986);
			match(CLONE);
			setState(987);
			cloneAction_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloneAction_Context extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(DALStatementParser.LOCAL, 0); }
		public TerminalNode DATA() { return getToken(DALStatementParser.DATA, 0); }
		public TerminalNode DIRECTORY() { return getToken(DALStatementParser.DIRECTORY, 0); }
		public CloneDirContext cloneDir() {
			return getRuleContext(CloneDirContext.class,0);
		}
		public TerminalNode SEMI_() { return getToken(DALStatementParser.SEMI_, 0); }
		public TerminalNode EQ_() { return getToken(DALStatementParser.EQ_, 0); }
		public TerminalNode INSTANCE() { return getToken(DALStatementParser.INSTANCE, 0); }
		public TerminalNode FROM() { return getToken(DALStatementParser.FROM, 0); }
		public CloneInstanceContext cloneInstance() {
			return getRuleContext(CloneInstanceContext.class,0);
		}
		public TerminalNode IDENTIFIED() { return getToken(DALStatementParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(DALStatementParser.BY, 0); }
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public TerminalNode REQUIRE() { return getToken(DALStatementParser.REQUIRE, 0); }
		public TerminalNode SSL() { return getToken(DALStatementParser.SSL, 0); }
		public TerminalNode NO() { return getToken(DALStatementParser.NO, 0); }
		public CloneAction_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloneAction_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCloneAction_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCloneAction_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCloneAction_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloneAction_Context cloneAction_() throws RecognitionException {
		CloneAction_Context _localctx = new CloneAction_Context(_ctx, getState());
		enterRule(_localctx, 112, RULE_cloneAction_);
		int _la;
		try {
			setState(1019);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(989);
				match(LOCAL);
				setState(990);
				match(DATA);
				setState(991);
				match(DIRECTORY);
				setState(993);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(992);
					match(EQ_);
					}
				}

				setState(995);
				cloneDir();
				setState(996);
				match(SEMI_);
				}
				break;
			case INSTANCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(998);
				match(INSTANCE);
				setState(999);
				match(FROM);
				setState(1000);
				cloneInstance();
				setState(1001);
				match(IDENTIFIED);
				setState(1002);
				match(BY);
				setState(1003);
				match(STRING_);
				setState(1010);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DATA) {
					{
					setState(1004);
					match(DATA);
					setState(1005);
					match(DIRECTORY);
					setState(1007);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EQ_) {
						{
						setState(1006);
						match(EQ_);
						}
					}

					setState(1009);
					cloneDir();
					}
				}

				setState(1017);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REQUIRE) {
					{
					setState(1012);
					match(REQUIRE);
					setState(1014);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(1013);
						match(NO);
						}
					}

					setState(1016);
					match(SSL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUdfContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DALStatementParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DALStatementParser.FUNCTION, 0); }
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(DALStatementParser.RETURNS, 0); }
		public TerminalNode SONAME() { return getToken(DALStatementParser.SONAME, 0); }
		public ShardLibraryNameContext shardLibraryName() {
			return getRuleContext(ShardLibraryNameContext.class,0);
		}
		public TerminalNode STRING() { return getToken(DALStatementParser.STRING, 0); }
		public TerminalNode INTEGER() { return getToken(DALStatementParser.INTEGER, 0); }
		public TerminalNode REAL() { return getToken(DALStatementParser.REAL, 0); }
		public TerminalNode DECIMAL() { return getToken(DALStatementParser.DECIMAL, 0); }
		public TerminalNode AGGREGATE() { return getToken(DALStatementParser.AGGREGATE, 0); }
		public CreateUdfContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUdf; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCreateUdf(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCreateUdf(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCreateUdf(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUdfContext createUdf() throws RecognitionException {
		CreateUdfContext _localctx = new CreateUdfContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_createUdf);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1021);
			match(CREATE);
			setState(1023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGGREGATE) {
				{
				setState(1022);
				match(AGGREGATE);
				}
			}

			setState(1025);
			match(FUNCTION);
			setState(1026);
			functionName();
			setState(1027);
			match(RETURNS);
			setState(1028);
			_la = _input.LA(1);
			if ( !(_la==DECIMAL || _la==INTEGER || _la==REAL || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1029);
			match(SONAME);
			setState(1030);
			shardLibraryName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallComponentContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(DALStatementParser.INSTALL, 0); }
		public TerminalNode COMPONENT() { return getToken(DALStatementParser.COMPONENT, 0); }
		public List<ComponentNameContext> componentName() {
			return getRuleContexts(ComponentNameContext.class);
		}
		public ComponentNameContext componentName(int i) {
			return getRuleContext(ComponentNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public InstallComponentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installComponent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterInstallComponent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitInstallComponent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitInstallComponent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstallComponentContext installComponent() throws RecognitionException {
		InstallComponentContext _localctx = new InstallComponentContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_installComponent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1032);
			match(INSTALL);
			setState(1033);
			match(COMPONENT);
			setState(1034);
			componentName();
			setState(1039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1035);
				match(COMMA_);
				setState(1036);
				componentName();
				}
				}
				setState(1041);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InstallPluginContext extends ParserRuleContext {
		public TerminalNode INSTALL() { return getToken(DALStatementParser.INSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(DALStatementParser.PLUGIN, 0); }
		public PluginNameContext pluginName() {
			return getRuleContext(PluginNameContext.class,0);
		}
		public TerminalNode SONAME() { return getToken(DALStatementParser.SONAME, 0); }
		public ShardLibraryNameContext shardLibraryName() {
			return getRuleContext(ShardLibraryNameContext.class,0);
		}
		public InstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_installPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterInstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitInstallPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitInstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InstallPluginContext installPlugin() throws RecognitionException {
		InstallPluginContext _localctx = new InstallPluginContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_installPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1042);
			match(INSTALL);
			setState(1043);
			match(PLUGIN);
			setState(1044);
			pluginName();
			setState(1045);
			match(SONAME);
			setState(1046);
			shardLibraryName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallComponentContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(DALStatementParser.UNINSTALL, 0); }
		public TerminalNode COMPONENT() { return getToken(DALStatementParser.COMPONENT, 0); }
		public List<ComponentNameContext> componentName() {
			return getRuleContexts(ComponentNameContext.class);
		}
		public ComponentNameContext componentName(int i) {
			return getRuleContext(ComponentNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public UninstallComponentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallComponent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterUninstallComponent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitUninstallComponent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitUninstallComponent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UninstallComponentContext uninstallComponent() throws RecognitionException {
		UninstallComponentContext _localctx = new UninstallComponentContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_uninstallComponent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1048);
			match(UNINSTALL);
			setState(1049);
			match(COMPONENT);
			setState(1050);
			componentName();
			setState(1055);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1051);
				match(COMMA_);
				setState(1052);
				componentName();
				}
				}
				setState(1057);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UninstallPluginContext extends ParserRuleContext {
		public TerminalNode UNINSTALL() { return getToken(DALStatementParser.UNINSTALL, 0); }
		public TerminalNode PLUGIN() { return getToken(DALStatementParser.PLUGIN, 0); }
		public PluginNameContext pluginName() {
			return getRuleContext(PluginNameContext.class,0);
		}
		public UninstallPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uninstallPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterUninstallPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitUninstallPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitUninstallPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UninstallPluginContext uninstallPlugin() throws RecognitionException {
		UninstallPluginContext _localctx = new UninstallPluginContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_uninstallPlugin);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1058);
			match(UNINSTALL);
			setState(1059);
			match(PLUGIN);
			setState(1060);
			pluginName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeTableContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(DALStatementParser.ANALYZE, 0); }
		public TerminalNode TABLE() { return getToken(DALStatementParser.TABLE, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(DALStatementParser.UPDATE, 0); }
		public TerminalNode HISTOGRAM() { return getToken(DALStatementParser.HISTOGRAM, 0); }
		public TerminalNode ON() { return getToken(DALStatementParser.ON, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode DROP() { return getToken(DALStatementParser.DROP, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(DALStatementParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(DALStatementParser.LOCAL, 0); }
		public TerminalNode WITH() { return getToken(DALStatementParser.WITH, 0); }
		public TerminalNode NUMBER_() { return getToken(DALStatementParser.NUMBER_, 0); }
		public TerminalNode BUCKETS() { return getToken(DALStatementParser.BUCKETS, 0); }
		public AnalyzeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterAnalyzeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitAnalyzeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitAnalyzeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeTableContext analyzeTable() throws RecognitionException {
		AnalyzeTableContext _localctx = new AnalyzeTableContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_analyzeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1062);
			match(ANALYZE);
			setState(1064);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL || _la==NO_WRITE_TO_BINLOG) {
				{
				setState(1063);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==NO_WRITE_TO_BINLOG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1066);
			match(TABLE);
			setState(1083);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				setState(1067);
				tableNames();
				}
				break;
			case 2:
				{
				setState(1068);
				tableName();
				setState(1069);
				match(UPDATE);
				setState(1070);
				match(HISTOGRAM);
				setState(1071);
				match(ON);
				setState(1072);
				columnNames();
				{
				setState(1073);
				match(WITH);
				setState(1074);
				match(NUMBER_);
				setState(1075);
				match(BUCKETS);
				}
				}
				break;
			case 3:
				{
				setState(1077);
				tableName();
				setState(1078);
				match(DROP);
				setState(1079);
				match(HISTOGRAM);
				setState(1080);
				match(ON);
				setState(1081);
				columnNames();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(DALStatementParser.CHECK, 0); }
		public TerminalNode TABLE() { return getToken(DALStatementParser.TABLE, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public CheckTableOption_Context checkTableOption_() {
			return getRuleContext(CheckTableOption_Context.class,0);
		}
		public CheckTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCheckTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCheckTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCheckTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableContext checkTable() throws RecognitionException {
		CheckTableContext _localctx = new CheckTableContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_checkTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1085);
			match(CHECK);
			setState(1086);
			match(TABLE);
			setState(1087);
			tableNames();
			setState(1088);
			checkTableOption_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckTableOption_Context extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DALStatementParser.FOR, 0); }
		public TerminalNode UPGRADE() { return getToken(DALStatementParser.UPGRADE, 0); }
		public TerminalNode QUICK() { return getToken(DALStatementParser.QUICK, 0); }
		public TerminalNode FAST() { return getToken(DALStatementParser.FAST, 0); }
		public TerminalNode MEDIUM() { return getToken(DALStatementParser.MEDIUM, 0); }
		public TerminalNode EXTENDED() { return getToken(DALStatementParser.EXTENDED, 0); }
		public TerminalNode CHANGE() { return getToken(DALStatementParser.CHANGE, 0); }
		public CheckTableOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkTableOption_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCheckTableOption_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCheckTableOption_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCheckTableOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckTableOption_Context checkTableOption_() throws RecognitionException {
		CheckTableOption_Context _localctx = new CheckTableOption_Context(_ctx, getState());
		enterRule(_localctx, 128, RULE_checkTableOption_);
		try {
			setState(1097);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(1090);
				match(FOR);
				setState(1091);
				match(UPGRADE);
				}
				break;
			case QUICK:
				enterOuterAlt(_localctx, 2);
				{
				setState(1092);
				match(QUICK);
				}
				break;
			case FAST:
				enterOuterAlt(_localctx, 3);
				{
				setState(1093);
				match(FAST);
				}
				break;
			case MEDIUM:
				enterOuterAlt(_localctx, 4);
				{
				setState(1094);
				match(MEDIUM);
				}
				break;
			case EXTENDED:
				enterOuterAlt(_localctx, 5);
				{
				setState(1095);
				match(EXTENDED);
				}
				break;
			case CHANGE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1096);
				match(CHANGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChecksumTableContext extends ParserRuleContext {
		public TerminalNode CHECKSUM() { return getToken(DALStatementParser.CHECKSUM, 0); }
		public TerminalNode TABLE() { return getToken(DALStatementParser.TABLE, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(DALStatementParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(DALStatementParser.EXTENDED, 0); }
		public ChecksumTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checksumTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterChecksumTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitChecksumTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitChecksumTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChecksumTableContext checksumTable() throws RecognitionException {
		ChecksumTableContext _localctx = new ChecksumTableContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_checksumTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1099);
			match(CHECKSUM);
			setState(1100);
			match(TABLE);
			setState(1101);
			tableNames();
			setState(1102);
			_la = _input.LA(1);
			if ( !(_la==EXTENDED || _la==QUICK) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptimizeTableContext extends ParserRuleContext {
		public TerminalNode OPTIMIZE() { return getToken(DALStatementParser.OPTIMIZE, 0); }
		public TerminalNode TABLE() { return getToken(DALStatementParser.TABLE, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(DALStatementParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(DALStatementParser.LOCAL, 0); }
		public OptimizeTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimizeTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterOptimizeTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitOptimizeTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitOptimizeTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptimizeTableContext optimizeTable() throws RecognitionException {
		OptimizeTableContext _localctx = new OptimizeTableContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_optimizeTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1104);
			match(OPTIMIZE);
			setState(1106);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL || _la==NO_WRITE_TO_BINLOG) {
				{
				setState(1105);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==NO_WRITE_TO_BINLOG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1108);
			match(TABLE);
			setState(1109);
			tableNames();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepairTableContext extends ParserRuleContext {
		public TerminalNode REPAIR() { return getToken(DALStatementParser.REPAIR, 0); }
		public TerminalNode TABLE() { return getToken(DALStatementParser.TABLE, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(DALStatementParser.QUICK, 0); }
		public TerminalNode EXTENDED() { return getToken(DALStatementParser.EXTENDED, 0); }
		public TerminalNode USE_FRM() { return getToken(DALStatementParser.USE_FRM, 0); }
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(DALStatementParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(DALStatementParser.LOCAL, 0); }
		public RepairTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repairTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterRepairTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitRepairTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitRepairTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepairTableContext repairTable() throws RecognitionException {
		RepairTableContext _localctx = new RepairTableContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_repairTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1111);
			match(REPAIR);
			setState(1113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL || _la==NO_WRITE_TO_BINLOG) {
				{
				setState(1112);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==NO_WRITE_TO_BINLOG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1115);
			match(TABLE);
			setState(1116);
			tableNames();
			setState(1118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(1117);
				match(QUICK);
				}
			}

			setState(1121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED) {
				{
				setState(1120);
				match(EXTENDED);
				}
			}

			setState(1124);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USE_FRM) {
				{
				setState(1123);
				match(USE_FRM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterResourceGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DALStatementParser.ALTER, 0); }
		public TerminalNode RESOURCE() { return getToken(DALStatementParser.RESOURCE, 0); }
		public TerminalNode GROUP() { return getToken(DALStatementParser.GROUP, 0); }
		public GroupNameContext groupName() {
			return getRuleContext(GroupNameContext.class,0);
		}
		public TerminalNode VCPU() { return getToken(DALStatementParser.VCPU, 0); }
		public List<VcpuSpec_Context> vcpuSpec_() {
			return getRuleContexts(VcpuSpec_Context.class);
		}
		public VcpuSpec_Context vcpuSpec_(int i) {
			return getRuleContext(VcpuSpec_Context.class,i);
		}
		public TerminalNode THREAD_PRIORITY() { return getToken(DALStatementParser.THREAD_PRIORITY, 0); }
		public TerminalNode NUMBER_() { return getToken(DALStatementParser.NUMBER_, 0); }
		public TerminalNode ENABLE() { return getToken(DALStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DALStatementParser.DISABLE, 0); }
		public List<TerminalNode> EQ_() { return getTokens(DALStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(DALStatementParser.EQ_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public TerminalNode FORCE() { return getToken(DALStatementParser.FORCE, 0); }
		public AlterResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterResourceGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterAlterResourceGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitAlterResourceGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitAlterResourceGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterResourceGroupContext alterResourceGroup() throws RecognitionException {
		AlterResourceGroupContext _localctx = new AlterResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_alterResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1126);
			match(ALTER);
			setState(1127);
			match(RESOURCE);
			setState(1128);
			match(GROUP);
			setState(1129);
			groupName();
			setState(1142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VCPU) {
				{
				setState(1130);
				match(VCPU);
				setState(1132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(1131);
					match(EQ_);
					}
				}

				setState(1134);
				vcpuSpec_();
				setState(1139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1135);
					match(COMMA_);
					setState(1136);
					vcpuSpec_();
					}
					}
					setState(1141);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THREAD_PRIORITY) {
				{
				setState(1144);
				match(THREAD_PRIORITY);
				setState(1146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(1145);
					match(EQ_);
					}
				}

				setState(1148);
				match(NUMBER_);
				}
			}

			setState(1156);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE:
				{
				setState(1151);
				match(ENABLE);
				}
				break;
			case DISABLE:
				{
				setState(1152);
				match(DISABLE);
				setState(1154);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(1153);
					match(FORCE);
					}
				}

				}
				break;
			case EOF:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VcpuSpec_Context extends ParserRuleContext {
		public List<TerminalNode> NUMBER_() { return getTokens(DALStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(DALStatementParser.NUMBER_, i);
		}
		public TerminalNode MINUS_() { return getToken(DALStatementParser.MINUS_, 0); }
		public VcpuSpec_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vcpuSpec_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterVcpuSpec_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitVcpuSpec_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitVcpuSpec_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VcpuSpec_Context vcpuSpec_() throws RecognitionException {
		VcpuSpec_Context _localctx = new VcpuSpec_Context(_ctx, getState());
		enterRule(_localctx, 138, RULE_vcpuSpec_);
		try {
			setState(1162);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1158);
				match(NUMBER_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1159);
				match(NUMBER_);
				setState(1160);
				match(MINUS_);
				setState(1161);
				match(NUMBER_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateResourceGroupContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DALStatementParser.CREATE, 0); }
		public TerminalNode RESOURCE() { return getToken(DALStatementParser.RESOURCE, 0); }
		public TerminalNode GROUP() { return getToken(DALStatementParser.GROUP, 0); }
		public GroupNameContext groupName() {
			return getRuleContext(GroupNameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(DALStatementParser.TYPE, 0); }
		public List<TerminalNode> EQ_() { return getTokens(DALStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(DALStatementParser.EQ_, i);
		}
		public TerminalNode SYSTEM() { return getToken(DALStatementParser.SYSTEM, 0); }
		public TerminalNode USER() { return getToken(DALStatementParser.USER, 0); }
		public TerminalNode VCPU() { return getToken(DALStatementParser.VCPU, 0); }
		public List<VcpuSpec_Context> vcpuSpec_() {
			return getRuleContexts(VcpuSpec_Context.class);
		}
		public VcpuSpec_Context vcpuSpec_(int i) {
			return getRuleContext(VcpuSpec_Context.class,i);
		}
		public TerminalNode THREAD_PRIORITY() { return getToken(DALStatementParser.THREAD_PRIORITY, 0); }
		public TerminalNode NUMBER_() { return getToken(DALStatementParser.NUMBER_, 0); }
		public TerminalNode ENABLE() { return getToken(DALStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DALStatementParser.DISABLE, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public CreateResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createResourceGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCreateResourceGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCreateResourceGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCreateResourceGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateResourceGroupContext createResourceGroup() throws RecognitionException {
		CreateResourceGroupContext _localctx = new CreateResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_createResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1164);
			match(CREATE);
			setState(1165);
			match(RESOURCE);
			setState(1166);
			match(GROUP);
			setState(1167);
			groupName();
			setState(1168);
			match(TYPE);
			setState(1169);
			match(EQ_);
			setState(1170);
			_la = _input.LA(1);
			if ( !(_la==SYSTEM || _la==USER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1183);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VCPU) {
				{
				setState(1171);
				match(VCPU);
				setState(1173);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(1172);
					match(EQ_);
					}
				}

				setState(1175);
				vcpuSpec_();
				setState(1180);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1176);
					match(COMMA_);
					setState(1177);
					vcpuSpec_();
					}
					}
					setState(1182);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==THREAD_PRIORITY) {
				{
				setState(1185);
				match(THREAD_PRIORITY);
				setState(1187);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(1186);
					match(EQ_);
					}
				}

				setState(1189);
				match(NUMBER_);
				}
			}

			setState(1193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISABLE || _la==ENABLE) {
				{
				setState(1192);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropResourceGroupContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DALStatementParser.DROP, 0); }
		public TerminalNode RESOURCE() { return getToken(DALStatementParser.RESOURCE, 0); }
		public TerminalNode GROUP() { return getToken(DALStatementParser.GROUP, 0); }
		public GroupNameContext groupName() {
			return getRuleContext(GroupNameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(DALStatementParser.FORCE, 0); }
		public DropResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropResourceGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterDropResourceGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitDropResourceGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitDropResourceGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropResourceGroupContext dropResourceGroup() throws RecognitionException {
		DropResourceGroupContext _localctx = new DropResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_dropResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1195);
			match(DROP);
			setState(1196);
			match(RESOURCE);
			setState(1197);
			match(GROUP);
			setState(1198);
			groupName();
			setState(1200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(1199);
				match(FORCE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetResourceGroupContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DALStatementParser.SET, 0); }
		public TerminalNode RESOURCE() { return getToken(DALStatementParser.RESOURCE, 0); }
		public TerminalNode GROUP() { return getToken(DALStatementParser.GROUP, 0); }
		public GroupNameContext groupName() {
			return getRuleContext(GroupNameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DALStatementParser.FOR, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(DALStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(DALStatementParser.NUMBER_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public SetResourceGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResourceGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSetResourceGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSetResourceGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSetResourceGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetResourceGroupContext setResourceGroup() throws RecognitionException {
		SetResourceGroupContext _localctx = new SetResourceGroupContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_setResourceGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1202);
			match(SET);
			setState(1203);
			match(RESOURCE);
			setState(1204);
			match(GROUP);
			setState(1205);
			groupName();
			setState(1215);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1206);
				match(FOR);
				setState(1207);
				match(NUMBER_);
				setState(1212);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1208);
					match(COMMA_);
					setState(1209);
					match(NUMBER_);
					}
					}
					setState(1214);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinlogContext extends ParserRuleContext {
		public TerminalNode BINLOG() { return getToken(DALStatementParser.BINLOG, 0); }
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public BinlogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binlog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterBinlog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitBinlog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitBinlog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinlogContext binlog() throws RecognitionException {
		BinlogContext _localctx = new BinlogContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_binlog);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1217);
			match(BINLOG);
			setState(1218);
			stringLiterals();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CacheIndexContext extends ParserRuleContext {
		public TerminalNode CACHE() { return getToken(DALStatementParser.CACHE, 0); }
		public TerminalNode INDEX() { return getToken(DALStatementParser.INDEX, 0); }
		public TerminalNode IN() { return getToken(DALStatementParser.IN, 0); }
		public TerminalNode IDENTIFIER_() { return getToken(DALStatementParser.IDENTIFIER_, 0); }
		public List<TableIndexListContext> tableIndexList() {
			return getRuleContexts(TableIndexListContext.class);
		}
		public TableIndexListContext tableIndexList(int i) {
			return getRuleContext(TableIndexListContext.class,i);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(DALStatementParser.PARTITION, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public PartitionListContext partitionList() {
			return getRuleContext(PartitionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public CacheIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cacheIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCacheIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCacheIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCacheIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CacheIndexContext cacheIndex() throws RecognitionException {
		CacheIndexContext _localctx = new CacheIndexContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_cacheIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1220);
			match(CACHE);
			setState(1221);
			match(INDEX);
			setState(1236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				setState(1222);
				tableIndexList();
				setState(1227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1223);
					match(COMMA_);
					setState(1224);
					tableIndexList();
					}
					}
					setState(1229);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(1230);
				tableName();
				setState(1231);
				match(PARTITION);
				setState(1232);
				match(LP_);
				setState(1233);
				partitionList();
				setState(1234);
				match(RP_);
				}
				break;
			}
			setState(1238);
			match(IN);
			setState(1239);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableIndexListContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(DALStatementParser.PARTITION, 0); }
		public List<TerminalNode> LP_() { return getTokens(DALStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(DALStatementParser.LP_, i);
		}
		public PartitionListContext partitionList() {
			return getRuleContext(PartitionListContext.class,0);
		}
		public List<TerminalNode> RP_() { return getTokens(DALStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(DALStatementParser.RP_, i);
		}
		public List<IndexNameContext> indexName() {
			return getRuleContexts(IndexNameContext.class);
		}
		public IndexNameContext indexName(int i) {
			return getRuleContext(IndexNameContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(DALStatementParser.IGNORE, 0); }
		public TerminalNode LEAVES() { return getToken(DALStatementParser.LEAVES, 0); }
		public TerminalNode INDEX() { return getToken(DALStatementParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(DALStatementParser.KEY, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public TableIndexListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableIndexList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterTableIndexList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitTableIndexList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitTableIndexList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableIndexListContext tableIndexList() throws RecognitionException {
		TableIndexListContext _localctx = new TableIndexListContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_tableIndexList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1241);
			tableName();
			setState(1247);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1242);
				match(PARTITION);
				setState(1243);
				match(LP_);
				setState(1244);
				partitionList();
				setState(1245);
				match(RP_);
				}
			}

			setState(1261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==KEY) {
				{
				setState(1249);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1250);
				match(LP_);
				setState(1251);
				indexName();
				setState(1256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1252);
					match(COMMA_);
					setState(1253);
					indexName();
					}
					}
					setState(1258);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1259);
				match(RP_);
				}
			}

			setState(1265);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1263);
				match(IGNORE);
				setState(1264);
				match(LEAVES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionListContext extends ParserRuleContext {
		public List<PartitionNameContext> partitionName() {
			return getRuleContexts(PartitionNameContext.class);
		}
		public PartitionNameContext partitionName(int i) {
			return getRuleContext(PartitionNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public TerminalNode ALL() { return getToken(DALStatementParser.ALL, 0); }
		public PartitionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterPartitionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitPartitionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitPartitionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionListContext partitionList() throws RecognitionException {
		PartitionListContext _localctx = new PartitionListContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_partitionList);
		int _la;
		try {
			setState(1276);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1267);
				partitionName();
				setState(1272);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1268);
					match(COMMA_);
					setState(1269);
					partitionName();
					}
					}
					setState(1274);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1275);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushContext extends ParserRuleContext {
		public TerminalNode FLUSH() { return getToken(DALStatementParser.FLUSH, 0); }
		public List<FlushOption_Context> flushOption_() {
			return getRuleContexts(FlushOption_Context.class);
		}
		public FlushOption_Context flushOption_(int i) {
			return getRuleContext(FlushOption_Context.class,i);
		}
		public TablesOption_Context tablesOption_() {
			return getRuleContext(TablesOption_Context.class,0);
		}
		public TerminalNode NO_WRITE_TO_BINLOG() { return getToken(DALStatementParser.NO_WRITE_TO_BINLOG, 0); }
		public TerminalNode LOCAL() { return getToken(DALStatementParser.LOCAL, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public FlushContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flush; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterFlush(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitFlush(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitFlush(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushContext flush() throws RecognitionException {
		FlushContext _localctx = new FlushContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_flush);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1278);
			match(FLUSH);
			setState(1280);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL || _la==NO_WRITE_TO_BINLOG) {
				{
				setState(1279);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==NO_WRITE_TO_BINLOG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1291);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case ENGINE:
			case ERROR:
			case GENERAL:
			case HOSTS:
			case LOGS:
			case OPTIMIZER_COSTS:
			case PRIVILEGES:
			case RELAY:
			case SLOW:
			case STATUS:
			case USER_RESOURCES:
				{
				setState(1282);
				flushOption_();
				setState(1287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1283);
					match(COMMA_);
					setState(1284);
					flushOption_();
					}
					}
					setState(1289);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case TABLES:
				{
				setState(1290);
				tablesOption_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FlushOption_Context extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(DALStatementParser.BINARY, 0); }
		public TerminalNode LOGS() { return getToken(DALStatementParser.LOGS, 0); }
		public TerminalNode ENGINE() { return getToken(DALStatementParser.ENGINE, 0); }
		public TerminalNode ERROR() { return getToken(DALStatementParser.ERROR, 0); }
		public TerminalNode GENERAL() { return getToken(DALStatementParser.GENERAL, 0); }
		public TerminalNode HOSTS() { return getToken(DALStatementParser.HOSTS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DALStatementParser.PRIVILEGES, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(DALStatementParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode RELAY() { return getToken(DALStatementParser.RELAY, 0); }
		public TerminalNode FOR() { return getToken(DALStatementParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(DALStatementParser.CHANNEL, 0); }
		public ChannelNameContext channelName() {
			return getRuleContext(ChannelNameContext.class,0);
		}
		public TerminalNode SLOW() { return getToken(DALStatementParser.SLOW, 0); }
		public TerminalNode STATUS() { return getToken(DALStatementParser.STATUS, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(DALStatementParser.USER_RESOURCES, 0); }
		public FlushOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flushOption_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterFlushOption_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitFlushOption_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitFlushOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FlushOption_Context flushOption_() throws RecognitionException {
		FlushOption_Context _localctx = new FlushOption_Context(_ctx, getState());
		enterRule(_localctx, 156, RULE_flushOption_);
		int _la;
		try {
			setState(1316);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(1293);
				match(BINARY);
				setState(1294);
				match(LOGS);
				}
				break;
			case ENGINE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1295);
				match(ENGINE);
				setState(1296);
				match(LOGS);
				}
				break;
			case ERROR:
				enterOuterAlt(_localctx, 3);
				{
				setState(1297);
				match(ERROR);
				setState(1298);
				match(LOGS);
				}
				break;
			case GENERAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(1299);
				match(GENERAL);
				setState(1300);
				match(LOGS);
				}
				break;
			case HOSTS:
				enterOuterAlt(_localctx, 5);
				{
				setState(1301);
				match(HOSTS);
				}
				break;
			case LOGS:
				enterOuterAlt(_localctx, 6);
				{
				setState(1302);
				match(LOGS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 7);
				{
				setState(1303);
				match(PRIVILEGES);
				}
				break;
			case OPTIMIZER_COSTS:
				enterOuterAlt(_localctx, 8);
				{
				setState(1304);
				match(OPTIMIZER_COSTS);
				}
				break;
			case RELAY:
				enterOuterAlt(_localctx, 9);
				{
				setState(1305);
				match(RELAY);
				setState(1306);
				match(LOGS);
				setState(1310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(1307);
					match(FOR);
					setState(1308);
					match(CHANNEL);
					setState(1309);
					channelName();
					}
				}

				}
				break;
			case SLOW:
				enterOuterAlt(_localctx, 10);
				{
				setState(1312);
				match(SLOW);
				setState(1313);
				match(LOGS);
				}
				break;
			case STATUS:
				enterOuterAlt(_localctx, 11);
				{
				setState(1314);
				match(STATUS);
				}
				break;
			case USER_RESOURCES:
				enterOuterAlt(_localctx, 12);
				{
				setState(1315);
				match(USER_RESOURCES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesOption_Context extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(DALStatementParser.TABLES, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public TerminalNode WITH() { return getToken(DALStatementParser.WITH, 0); }
		public TerminalNode READ() { return getToken(DALStatementParser.READ, 0); }
		public TerminalNode LOCK() { return getToken(DALStatementParser.LOCK, 0); }
		public TerminalNode FOR() { return getToken(DALStatementParser.FOR, 0); }
		public TerminalNode EXPORT() { return getToken(DALStatementParser.EXPORT, 0); }
		public TablesOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablesOption_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterTablesOption_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitTablesOption_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitTablesOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesOption_Context tablesOption_() throws RecognitionException {
		TablesOption_Context _localctx = new TablesOption_Context(_ctx, getState());
		enterRule(_localctx, 158, RULE_tablesOption_);
		int _la;
		try {
			setState(1357);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1318);
				match(TABLES);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1319);
				match(TABLES);
				setState(1320);
				tableName();
				setState(1325);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1321);
					match(COMMA_);
					setState(1322);
					tableName();
					}
					}
					setState(1327);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1328);
				match(TABLES);
				setState(1329);
				match(WITH);
				setState(1330);
				match(READ);
				setState(1331);
				match(LOCK);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1332);
				match(TABLES);
				setState(1333);
				tableName();
				setState(1338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1334);
					match(COMMA_);
					setState(1335);
					tableName();
					}
					}
					setState(1340);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1341);
				match(WITH);
				setState(1342);
				match(READ);
				setState(1343);
				match(LOCK);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1345);
				match(TABLES);
				setState(1346);
				tableName();
				setState(1351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1347);
					match(COMMA_);
					setState(1348);
					tableName();
					}
					}
					setState(1353);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1354);
				match(FOR);
				setState(1355);
				match(EXPORT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KillContext extends ParserRuleContext {
		public TerminalNode KILL() { return getToken(DALStatementParser.KILL, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(DALStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(DALStatementParser.NUMBER_, i);
		}
		public TerminalNode CONNECTION() { return getToken(DALStatementParser.CONNECTION, 0); }
		public TerminalNode QUERY() { return getToken(DALStatementParser.QUERY, 0); }
		public KillContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kill; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterKill(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitKill(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitKill(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KillContext kill() throws RecognitionException {
		KillContext _localctx = new KillContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_kill);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1359);
			match(KILL);
			setState(1361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONNECTION || _la==QUERY) {
				{
				setState(1360);
				_la = _input.LA(1);
				if ( !(_la==CONNECTION || _la==QUERY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1364); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1363);
				match(NUMBER_);
				}
				}
				setState(1366); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NUMBER_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadIndexInfoContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(DALStatementParser.LOAD, 0); }
		public TerminalNode INDEX() { return getToken(DALStatementParser.INDEX, 0); }
		public TerminalNode INTO() { return getToken(DALStatementParser.INTO, 0); }
		public TerminalNode CACHE() { return getToken(DALStatementParser.CACHE, 0); }
		public List<TableIndexListContext> tableIndexList() {
			return getRuleContexts(TableIndexListContext.class);
		}
		public TableIndexListContext tableIndexList(int i) {
			return getRuleContext(TableIndexListContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public LoadIndexInfoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadIndexInfo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterLoadIndexInfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitLoadIndexInfo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitLoadIndexInfo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadIndexInfoContext loadIndexInfo() throws RecognitionException {
		LoadIndexInfoContext _localctx = new LoadIndexInfoContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_loadIndexInfo);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1368);
			match(LOAD);
			setState(1369);
			match(INDEX);
			setState(1370);
			match(INTO);
			setState(1371);
			match(CACHE);
			setState(1372);
			tableIndexList();
			setState(1377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1373);
				match(COMMA_);
				setState(1374);
				tableIndexList();
				}
				}
				setState(1379);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetStatementContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(DALStatementParser.RESET, 0); }
		public List<ResetOption_Context> resetOption_() {
			return getRuleContexts(ResetOption_Context.class);
		}
		public ResetOption_Context resetOption_(int i) {
			return getRuleContext(ResetOption_Context.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public ResetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterResetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitResetStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitResetStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetStatementContext resetStatement() throws RecognitionException {
		ResetStatementContext _localctx = new ResetStatementContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_resetStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1380);
			match(RESET);
			setState(1381);
			resetOption_();
			setState(1386);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1382);
				match(COMMA_);
				setState(1383);
				resetOption_();
				}
				}
				setState(1388);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetOption_Context extends ParserRuleContext {
		public TerminalNode MASTER() { return getToken(DALStatementParser.MASTER, 0); }
		public TerminalNode SLAVE() { return getToken(DALStatementParser.SLAVE, 0); }
		public TerminalNode QUERY() { return getToken(DALStatementParser.QUERY, 0); }
		public TerminalNode CACHE() { return getToken(DALStatementParser.CACHE, 0); }
		public ResetOption_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetOption_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterResetOption_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitResetOption_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitResetOption_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetOption_Context resetOption_() throws RecognitionException {
		ResetOption_Context _localctx = new ResetOption_Context(_ctx, getState());
		enterRule(_localctx, 166, RULE_resetOption_);
		try {
			setState(1393);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1389);
				match(MASTER);
				}
				break;
			case SLAVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1390);
				match(SLAVE);
				}
				break;
			case QUERY:
				enterOuterAlt(_localctx, 3);
				{
				setState(1391);
				match(QUERY);
				setState(1392);
				match(CACHE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetPersistContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(DALStatementParser.RESET, 0); }
		public TerminalNode PERSIST() { return getToken(DALStatementParser.PERSIST, 0); }
		public TerminalNode IDENTIFIER_() { return getToken(DALStatementParser.IDENTIFIER_, 0); }
		public ExistClause_Context existClause_() {
			return getRuleContext(ExistClause_Context.class,0);
		}
		public ResetPersistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetPersist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterResetPersist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitResetPersist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitResetPersist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetPersistContext resetPersist() throws RecognitionException {
		ResetPersistContext _localctx = new ResetPersistContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_resetPersist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1395);
			match(RESET);
			setState(1396);
			match(PERSIST);
			{
			setState(1398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1397);
				existClause_();
				}
			}

			setState(1400);
			match(IDENTIFIER_);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RestartContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(DALStatementParser.RESTART, 0); }
		public RestartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterRestart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitRestart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitRestart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RestartContext restart() throws RecognitionException {
		RestartContext _localctx = new RestartContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_restart);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1402);
			match(RESTART);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShutdownContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(DALStatementParser.SHUTDOWN, 0); }
		public ShutdownContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdown; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShutdown(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShutdown(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShutdown(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShutdownContext shutdown() throws RecognitionException {
		ShutdownContext _localctx = new ShutdownContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_shutdown);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1404);
			match(SHUTDOWN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainTypeContext extends ParserRuleContext {
		public TerminalNode FORMAT() { return getToken(DALStatementParser.FORMAT, 0); }
		public TerminalNode EQ_() { return getToken(DALStatementParser.EQ_, 0); }
		public FormatNameContext formatName() {
			return getRuleContext(FormatNameContext.class,0);
		}
		public ExplainTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterExplainType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitExplainType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitExplainType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainTypeContext explainType() throws RecognitionException {
		ExplainTypeContext _localctx = new ExplainTypeContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_explainType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1406);
			match(FORMAT);
			setState(1407);
			match(EQ_);
			setState(1408);
			formatName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainableStatementContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TableStatementContext tableStatement() {
			return getRuleContext(TableStatementContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public ReplaceContext replace() {
			return getRuleContext(ReplaceContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public ExplainableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterExplainableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitExplainableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitExplainableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainableStatementContext explainableStatement() throws RecognitionException {
		ExplainableStatementContext _localctx = new ExplainableStatementContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_explainableStatement);
		try {
			setState(1416);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1410);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1411);
				tableStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1412);
				delete();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1413);
				insert();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1414);
				replace();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1415);
				update();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FormatNameContext extends ParserRuleContext {
		public TerminalNode TRADITIONAL() { return getToken(DALStatementParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(DALStatementParser.JSON, 0); }
		public TerminalNode TREE() { return getToken(DALStatementParser.TREE, 0); }
		public FormatNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_formatName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterFormatName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitFormatName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitFormatName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FormatNameContext formatName() throws RecognitionException {
		FormatNameContext _localctx = new FormatNameContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_formatName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1418);
			_la = _input.LA(1);
			if ( !(_la==TRADITIONAL || _la==TREE || _la==JSON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterMarkerContext extends ParserRuleContext {
		public TerminalNode QUESTION_() { return getToken(DALStatementParser.QUESTION_, 0); }
		public ParameterMarkerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterMarker; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterParameterMarker(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitParameterMarker(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitParameterMarker(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterMarkerContext parameterMarker() throws RecognitionException {
		ParameterMarkerContext _localctx = new ParameterMarkerContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_parameterMarker);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1420);
			match(QUESTION_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CustomKeywordContext extends ParserRuleContext {
		public TerminalNode MAX() { return getToken(DALStatementParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(DALStatementParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(DALStatementParser.SUM, 0); }
		public TerminalNode COUNT() { return getToken(DALStatementParser.COUNT, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(DALStatementParser.GROUP_CONCAT, 0); }
		public TerminalNode CAST() { return getToken(DALStatementParser.CAST, 0); }
		public TerminalNode POSITION() { return getToken(DALStatementParser.POSITION, 0); }
		public TerminalNode SUBSTRING() { return getToken(DALStatementParser.SUBSTRING, 0); }
		public TerminalNode SUBSTR() { return getToken(DALStatementParser.SUBSTR, 0); }
		public TerminalNode EXTRACT() { return getToken(DALStatementParser.EXTRACT, 0); }
		public TerminalNode TRIM() { return getToken(DALStatementParser.TRIM, 0); }
		public TerminalNode LAST_DAY() { return getToken(DALStatementParser.LAST_DAY, 0); }
		public TerminalNode TRADITIONAL() { return getToken(DALStatementParser.TRADITIONAL, 0); }
		public TerminalNode TREE() { return getToken(DALStatementParser.TREE, 0); }
		public TerminalNode MYSQL_ADMIN() { return getToken(DALStatementParser.MYSQL_ADMIN, 0); }
		public TerminalNode INSTANT() { return getToken(DALStatementParser.INSTANT, 0); }
		public TerminalNode INPLACE() { return getToken(DALStatementParser.INPLACE, 0); }
		public TerminalNode COPY() { return getToken(DALStatementParser.COPY, 0); }
		public TerminalNode UL_BINARY() { return getToken(DALStatementParser.UL_BINARY, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(DALStatementParser.AUTOCOMMIT, 0); }
		public CustomKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_customKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCustomKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCustomKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCustomKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CustomKeywordContext customKeyword() throws RecognitionException {
		CustomKeywordContext _localctx = new CustomKeywordContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_customKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1422);
			_la = _input.LA(1);
			if ( !(((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & ((1L << (MAX - 45)) | (1L << (MIN - 45)) | (1L << (SUM - 45)) | (1L << (COUNT - 45)) | (1L << (GROUP_CONCAT - 45)) | (1L << (CAST - 45)) | (1L << (POSITION - 45)) | (1L << (SUBSTRING - 45)) | (1L << (SUBSTR - 45)) | (1L << (EXTRACT - 45)) | (1L << (TRIM - 45)) | (1L << (LAST_DAY - 45)) | (1L << (TRADITIONAL - 45)) | (1L << (TREE - 45)) | (1L << (MYSQL_ADMIN - 45)) | (1L << (INSTANT - 45)) | (1L << (INPLACE - 45)) | (1L << (COPY - 45)) | (1L << (UL_BINARY - 45)) | (1L << (AUTOCOMMIT - 45)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralsContext extends ParserRuleContext {
		public StringLiteralsContext stringLiterals() {
			return getRuleContext(StringLiteralsContext.class,0);
		}
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public DateTimeLiteralsContext dateTimeLiterals() {
			return getRuleContext(DateTimeLiteralsContext.class,0);
		}
		public HexadecimalLiteralsContext hexadecimalLiterals() {
			return getRuleContext(HexadecimalLiteralsContext.class,0);
		}
		public BitValueLiteralsContext bitValueLiterals() {
			return getRuleContext(BitValueLiteralsContext.class,0);
		}
		public BooleanLiteralsContext booleanLiterals() {
			return getRuleContext(BooleanLiteralsContext.class,0);
		}
		public NullValueLiteralsContext nullValueLiterals() {
			return getRuleContext(NullValueLiteralsContext.class,0);
		}
		public LiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralsContext literals() throws RecognitionException {
		LiteralsContext _localctx = new LiteralsContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_literals);
		try {
			setState(1431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1424);
				stringLiterals();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1425);
				numberLiterals();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1426);
				dateTimeLiterals();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1427);
				hexadecimalLiterals();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1428);
				bitValueLiterals();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1429);
				booleanLiterals();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1430);
				nullValueLiterals();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralsContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public CharacterSetName_Context characterSetName_() {
			return getRuleContext(CharacterSetName_Context.class,0);
		}
		public CollateClause_Context collateClause_() {
			return getRuleContext(CollateClause_Context.class,0);
		}
		public StringLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterStringLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitStringLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitStringLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralsContext stringLiterals() throws RecognitionException {
		StringLiteralsContext _localctx = new StringLiteralsContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_stringLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1434);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IDENTIFIER_) {
				{
				setState(1433);
				characterSetName_();
				}
			}

			setState(1436);
			match(STRING_);
			setState(1438);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				setState(1437);
				collateClause_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumberLiteralsContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DALStatementParser.NUMBER_, 0); }
		public TerminalNode MINUS_() { return getToken(DALStatementParser.MINUS_, 0); }
		public NumberLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterNumberLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitNumberLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitNumberLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberLiteralsContext numberLiterals() throws RecognitionException {
		NumberLiteralsContext _localctx = new NumberLiteralsContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_numberLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS_) {
				{
				setState(1440);
				match(MINUS_);
				}
			}

			setState(1443);
			match(NUMBER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateTimeLiteralsContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public TerminalNode DATE() { return getToken(DALStatementParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DALStatementParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DALStatementParser.TIMESTAMP, 0); }
		public TerminalNode LBE_() { return getToken(DALStatementParser.LBE_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RBE_() { return getToken(DALStatementParser.RBE_, 0); }
		public DateTimeLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateTimeLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterDateTimeLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitDateTimeLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitDateTimeLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DateTimeLiteralsContext dateTimeLiterals() throws RecognitionException {
		DateTimeLiteralsContext _localctx = new DateTimeLiteralsContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_dateTimeLiterals);
		int _la;
		try {
			setState(1452);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE:
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(1445);
				_la = _input.LA(1);
				if ( !(_la==DATE || _la==TIME || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1446);
				match(STRING_);
				}
				break;
			case LBE_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1447);
				match(LBE_);
				setState(1448);
				identifier();
				setState(1449);
				match(STRING_);
				setState(1450);
				match(RBE_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralsContext extends ParserRuleContext {
		public TerminalNode HEX_DIGIT_() { return getToken(DALStatementParser.HEX_DIGIT_, 0); }
		public CharacterSetName_Context characterSetName_() {
			return getRuleContext(CharacterSetName_Context.class,0);
		}
		public CollateClause_Context collateClause_() {
			return getRuleContext(CollateClause_Context.class,0);
		}
		public HexadecimalLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterHexadecimalLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitHexadecimalLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitHexadecimalLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralsContext hexadecimalLiterals() throws RecognitionException {
		HexadecimalLiteralsContext _localctx = new HexadecimalLiteralsContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_hexadecimalLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IDENTIFIER_) {
				{
				setState(1454);
				characterSetName_();
				}
			}

			setState(1457);
			match(HEX_DIGIT_);
			setState(1459);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				setState(1458);
				collateClause_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitValueLiteralsContext extends ParserRuleContext {
		public TerminalNode BIT_NUM_() { return getToken(DALStatementParser.BIT_NUM_, 0); }
		public CharacterSetName_Context characterSetName_() {
			return getRuleContext(CharacterSetName_Context.class,0);
		}
		public CollateClause_Context collateClause_() {
			return getRuleContext(CollateClause_Context.class,0);
		}
		public BitValueLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitValueLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterBitValueLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitBitValueLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitBitValueLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitValueLiteralsContext bitValueLiterals() throws RecognitionException {
		BitValueLiteralsContext _localctx = new BitValueLiteralsContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_bitValueLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1462);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IDENTIFIER_) {
				{
				setState(1461);
				characterSetName_();
				}
			}

			setState(1464);
			match(BIT_NUM_);
			setState(1466);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				setState(1465);
				collateClause_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralsContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(DALStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(DALStatementParser.FALSE, 0); }
		public BooleanLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterBooleanLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitBooleanLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitBooleanLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralsContext booleanLiterals() throws RecognitionException {
		BooleanLiteralsContext _localctx = new BooleanLiteralsContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_booleanLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1468);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullValueLiteralsContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(DALStatementParser.NULL, 0); }
		public NullValueLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullValueLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterNullValueLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitNullValueLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitNullValueLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullValueLiteralsContext nullValueLiterals() throws RecognitionException {
		NullValueLiteralsContext _localctx = new NullValueLiteralsContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_nullValueLiterals);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1470);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterSetName_Context extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DALStatementParser.IDENTIFIER_, 0); }
		public CharacterSetName_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterSetName_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCharacterSetName_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCharacterSetName_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCharacterSetName_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterSetName_Context characterSetName_() throws RecognitionException {
		CharacterSetName_Context _localctx = new CharacterSetName_Context(_ctx, getState());
		enterRule(_localctx, 200, RULE_characterSetName_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1472);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationName_Context extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DALStatementParser.IDENTIFIER_, 0); }
		public CollationName_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCollationName_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCollationName_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCollationName_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationName_Context collationName_() throws RecognitionException {
		CollationName_Context _localctx = new CollationName_Context(_ctx, getState());
		enterRule(_localctx, 202, RULE_collationName_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1474);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DALStatementParser.IDENTIFIER_, 0); }
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public CustomKeywordContext customKeyword() {
			return getRuleContext(CustomKeywordContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_identifier);
		try {
			setState(1479);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1476);
				match(IDENTIFIER_);
				}
				break;
			case ACCOUNT:
			case ACTION:
			case ACTIVE:
			case ADMIN:
			case AFTER:
			case AGAINST:
			case AGGREGATE:
			case ALGORITHM:
			case ALWAYS:
			case ANY:
			case ASCII:
			case AT:
			case ATTRIBUTE:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG:
			case AVG_ROW_LENGTH:
			case BACKUP:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case BUCKETS:
			case BYTE:
			case CACHE:
			case CASCADED:
			case CATALOG_NAME:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLONE:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLLATION:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETION:
			case COMPONENT:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONTAINS:
			case CONTEXT:
			case CPU:
			case CURRENT:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DATE:
			case DATETIME:
			case DAY:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DEFINITION:
			case DELAY_KEY_WRITE:
			case DESCRIPTION:
			case DIAGNOSTICS:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENFORCED:
			case ENGINE:
			case ENGINES:
			case ENGINE_ATTRIBUTE:
			case ENUM:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUDE:
			case EXECUTE:
			case EXPANSION:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWING:
			case FOLLOWS:
			case FORMAT:
			case FULL:
			case GENERAL:
			case GEOMCOLLECTION:
			case GEOMETRY:
			case GEOMETRYCOLLECTION:
			case GET_FORMAT:
			case GET_MASTER_PUBLIC_KEY:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTOGRAM:
			case HISTORY:
			case HOST:
			case HOSTS:
			case HOUR:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INACTIVE:
			case INDEXES:
			case INITIAL_SIZE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case JSON_VALUE:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LINESTRING:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOCKS:
			case LOGFILE:
			case LOGS:
			case MANAGED:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_COMPRESSION_ALGORITHMS:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_PUBLIC_KEY_PATH:
			case MASTER_RETRY_COUNT:
			case MASTER_SERVER_ID:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_CIPHERSUITES:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MASTER_ZSTD_COMPRESSION_LEVEL:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMORY:
			case MERGE:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MIGRATE:
			case MINUTE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MONTH:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case MUTEX:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NDB:
			case NDBCLUSTER:
			case NESTED:
			case NETWORK_NAMESPACE:
			case NEVER:
			case NEW:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case NOWAIT:
			case NO_WAIT:
			case NULLS:
			case NUMBER:
			case NVARCHAR:
			case OFF:
			case OFFSET:
			case OJ:
			case OLD:
			case ONE:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PATH:
			case PERSIST:
			case PERSIST_ONLY:
			case PHASE:
			case PLUGIN:
			case PLUGINS:
			case PLUGIN_DIR:
			case POINT:
			case POLYGON:
			case PORT:
			case PRECEDES:
			case PRECEDING:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PRIVILEGES:
			case PRIVILEGE_CHECKS_USER:
			case PROCESS:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUARTER:
			case QUERY:
			case QUICK:
			case RANDOM:
			case READ_ONLY:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case REFERENCE:
			case RELAY:
			case RELAYLOG:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAY_THREAD:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPEATABLE:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case REQUIRE_ROW_FORMAT:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESUME:
			case RETAIN:
			case RETURNED_SQLSTATE:
			case RETURNING:
			case RETURNS:
			case REUSE:
			case REVERSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROUTINE:
			case ROW_COUNT:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SCHEMA_NAME:
			case SECOND:
			case SECONDARY:
			case SECONDARY_ENGINE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SECONDARY_LOAD:
			case SECONDARY_UNLOAD:
			case SECURITY:
			case SERIAL:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHUTDOWN:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_CACHE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case SQL_TSI_DAY:
			case SQL_TSI_HOUR:
			case SQL_TSI_MINUTE:
			case SQL_TSI_MONTH:
			case SQL_TSI_QUARTER:
			case SQL_TSI_SECOND:
			case SQL_TSI_WEEK:
			case SQL_TSI_YEAR:
			case SRID:
			case STACKED:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUPER:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLES:
			case TABLESPACE:
			case TABLE_CHECKSUM:
			case TABLE_NAME:
			case TEMPORARY:
			case TEMPTABLE:
			case TEXT:
			case THAN:
			case THREAD_PRIORITY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TLS:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNICODE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USER_RESOURCES:
			case USE_FRM:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VCPU:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WEEK:
			case WEIGHT_STRING:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XID:
			case XML:
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1477);
				unreservedWord();
				}
				break;
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case GROUP_CONCAT:
			case CAST:
			case POSITION:
			case SUBSTRING:
			case SUBSTR:
			case EXTRACT:
			case TRIM:
			case LAST_DAY:
			case TRADITIONAL:
			case TREE:
			case MYSQL_ADMIN:
			case INSTANT:
			case INPLACE:
			case COPY:
			case UL_BINARY:
			case AUTOCOMMIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1478);
				customKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnreservedWordContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(DALStatementParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(DALStatementParser.ACTION, 0); }
		public TerminalNode ACTIVE() { return getToken(DALStatementParser.ACTIVE, 0); }
		public TerminalNode ADMIN() { return getToken(DALStatementParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(DALStatementParser.AFTER, 0); }
		public TerminalNode AGAINST() { return getToken(DALStatementParser.AGAINST, 0); }
		public TerminalNode AGGREGATE() { return getToken(DALStatementParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(DALStatementParser.ALGORITHM, 0); }
		public TerminalNode ALWAYS() { return getToken(DALStatementParser.ALWAYS, 0); }
		public TerminalNode ANY() { return getToken(DALStatementParser.ANY, 0); }
		public TerminalNode ASCII() { return getToken(DALStatementParser.ASCII, 0); }
		public TerminalNode AT() { return getToken(DALStatementParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(DALStatementParser.ATTRIBUTE, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(DALStatementParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(DALStatementParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG() { return getToken(DALStatementParser.AVG, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(DALStatementParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BACKUP() { return getToken(DALStatementParser.BACKUP, 0); }
		public TerminalNode BEGIN() { return getToken(DALStatementParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(DALStatementParser.BINLOG, 0); }
		public TerminalNode BIT() { return getToken(DALStatementParser.BIT, 0); }
		public TerminalNode BLOCK() { return getToken(DALStatementParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(DALStatementParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(DALStatementParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(DALStatementParser.BTREE, 0); }
		public TerminalNode BUCKETS() { return getToken(DALStatementParser.BUCKETS, 0); }
		public TerminalNode BYTE() { return getToken(DALStatementParser.BYTE, 0); }
		public TerminalNode CACHE() { return getToken(DALStatementParser.CACHE, 0); }
		public TerminalNode CASCADED() { return getToken(DALStatementParser.CASCADED, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(DALStatementParser.CATALOG_NAME, 0); }
		public TerminalNode CHAIN() { return getToken(DALStatementParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(DALStatementParser.CHANGED, 0); }
		public TerminalNode CHANNEL() { return getToken(DALStatementParser.CHANNEL, 0); }
		public TerminalNode CHARSET() { return getToken(DALStatementParser.CHARSET, 0); }
		public TerminalNode CHECKSUM() { return getToken(DALStatementParser.CHECKSUM, 0); }
		public TerminalNode CIPHER() { return getToken(DALStatementParser.CIPHER, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(DALStatementParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLIENT() { return getToken(DALStatementParser.CLIENT, 0); }
		public TerminalNode CLONE() { return getToken(DALStatementParser.CLONE, 0); }
		public TerminalNode CLOSE() { return getToken(DALStatementParser.CLOSE, 0); }
		public TerminalNode COALESCE() { return getToken(DALStatementParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(DALStatementParser.CODE, 0); }
		public TerminalNode COLLATION() { return getToken(DALStatementParser.COLLATION, 0); }
		public TerminalNode COLUMNS() { return getToken(DALStatementParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(DALStatementParser.COLUMN_FORMAT, 0); }
		public TerminalNode COMMENT() { return getToken(DALStatementParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(DALStatementParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(DALStatementParser.COMMITTED, 0); }
		public TerminalNode COMPACT() { return getToken(DALStatementParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(DALStatementParser.COMPLETION, 0); }
		public TerminalNode COMPONENT() { return getToken(DALStatementParser.COMPONENT, 0); }
		public TerminalNode COMPRESSED() { return getToken(DALStatementParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(DALStatementParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(DALStatementParser.CONCURRENT, 0); }
		public TerminalNode CONNECTION() { return getToken(DALStatementParser.CONNECTION, 0); }
		public TerminalNode CONSISTENT() { return getToken(DALStatementParser.CONSISTENT, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(DALStatementParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(DALStatementParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(DALStatementParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONTAINS() { return getToken(DALStatementParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(DALStatementParser.CONTEXT, 0); }
		public TerminalNode CPU() { return getToken(DALStatementParser.CPU, 0); }
		public TerminalNode CURRENT() { return getToken(DALStatementParser.CURRENT, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(DALStatementParser.CURSOR_NAME, 0); }
		public TerminalNode DATA() { return getToken(DALStatementParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(DALStatementParser.DATAFILE, 0); }
		public TerminalNode DATE() { return getToken(DALStatementParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(DALStatementParser.DATETIME, 0); }
		public TerminalNode DAY() { return getToken(DALStatementParser.DAY, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(DALStatementParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(DALStatementParser.DEFINER, 0); }
		public TerminalNode DEFINITION() { return getToken(DALStatementParser.DEFINITION, 0); }
		public TerminalNode DEALLOCATE() { return getToken(DALStatementParser.DEALLOCATE, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(DALStatementParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DESCRIPTION() { return getToken(DALStatementParser.DESCRIPTION, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(DALStatementParser.DIAGNOSTICS, 0); }
		public TerminalNode DIRECTORY() { return getToken(DALStatementParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(DALStatementParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(DALStatementParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(DALStatementParser.DISK, 0); }
		public TerminalNode DO() { return getToken(DALStatementParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(DALStatementParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(DALStatementParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(DALStatementParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(DALStatementParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(DALStatementParser.ENCRYPTION, 0); }
		public TerminalNode ENFORCED() { return getToken(DALStatementParser.ENFORCED, 0); }
		public TerminalNode END() { return getToken(DALStatementParser.END, 0); }
		public TerminalNode ENDS() { return getToken(DALStatementParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(DALStatementParser.ENGINE, 0); }
		public TerminalNode ENGINES() { return getToken(DALStatementParser.ENGINES, 0); }
		public TerminalNode ENGINE_ATTRIBUTE() { return getToken(DALStatementParser.ENGINE_ATTRIBUTE, 0); }
		public TerminalNode ENUM() { return getToken(DALStatementParser.ENUM, 0); }
		public TerminalNode ERROR() { return getToken(DALStatementParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(DALStatementParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(DALStatementParser.ESCAPE, 0); }
		public TerminalNode EVENT() { return getToken(DALStatementParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(DALStatementParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(DALStatementParser.EVERY, 0); }
		public TerminalNode EXCHANGE() { return getToken(DALStatementParser.EXCHANGE, 0); }
		public TerminalNode EXCLUDE() { return getToken(DALStatementParser.EXCLUDE, 0); }
		public TerminalNode EXECUTE() { return getToken(DALStatementParser.EXECUTE, 0); }
		public TerminalNode EXPANSION() { return getToken(DALStatementParser.EXPANSION, 0); }
		public TerminalNode EXPIRE() { return getToken(DALStatementParser.EXPIRE, 0); }
		public TerminalNode EXPORT() { return getToken(DALStatementParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(DALStatementParser.EXTENDED, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(DALStatementParser.EXTENT_SIZE, 0); }
		public TerminalNode FAILED_LOGIN_ATTEMPTS() { return getToken(DALStatementParser.FAILED_LOGIN_ATTEMPTS, 0); }
		public TerminalNode FAST() { return getToken(DALStatementParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(DALStatementParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(DALStatementParser.FIELDS, 0); }
		public TerminalNode FILE() { return getToken(DALStatementParser.FILE, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(DALStatementParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(DALStatementParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(DALStatementParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(DALStatementParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(DALStatementParser.FLUSH, 0); }
		public TerminalNode FOLLOWING() { return getToken(DALStatementParser.FOLLOWING, 0); }
		public TerminalNode FOLLOWS() { return getToken(DALStatementParser.FOLLOWS, 0); }
		public TerminalNode FORMAT() { return getToken(DALStatementParser.FORMAT, 0); }
		public TerminalNode FULL() { return getToken(DALStatementParser.FULL, 0); }
		public TerminalNode GENERAL() { return getToken(DALStatementParser.GENERAL, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(DALStatementParser.GEOMCOLLECTION, 0); }
		public TerminalNode GEOMETRY() { return getToken(DALStatementParser.GEOMETRY, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(DALStatementParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GET_FORMAT() { return getToken(DALStatementParser.GET_FORMAT, 0); }
		public TerminalNode GET_MASTER_PUBLIC_KEY() { return getToken(DALStatementParser.GET_MASTER_PUBLIC_KEY, 0); }
		public TerminalNode GLOBAL() { return getToken(DALStatementParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(DALStatementParser.GRANTS, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(DALStatementParser.GROUP_REPLICATION, 0); }
		public TerminalNode HANDLER() { return getToken(DALStatementParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(DALStatementParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(DALStatementParser.HELP, 0); }
		public TerminalNode HISTOGRAM() { return getToken(DALStatementParser.HISTOGRAM, 0); }
		public TerminalNode HISTORY() { return getToken(DALStatementParser.HISTORY, 0); }
		public TerminalNode HOST() { return getToken(DALStatementParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(DALStatementParser.HOSTS, 0); }
		public TerminalNode HOUR() { return getToken(DALStatementParser.HOUR, 0); }
		public TerminalNode IDENTIFIED() { return getToken(DALStatementParser.IDENTIFIED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(DALStatementParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(DALStatementParser.IMPORT, 0); }
		public TerminalNode INACTIVE() { return getToken(DALStatementParser.INACTIVE, 0); }
		public TerminalNode INDEXES() { return getToken(DALStatementParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(DALStatementParser.INITIAL_SIZE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(DALStatementParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(DALStatementParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(DALStatementParser.INSTANCE, 0); }
		public TerminalNode INVISIBLE() { return getToken(DALStatementParser.INVISIBLE, 0); }
		public TerminalNode INVOKER() { return getToken(DALStatementParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(DALStatementParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(DALStatementParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(DALStatementParser.IPC, 0); }
		public TerminalNode ISOLATION() { return getToken(DALStatementParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(DALStatementParser.ISSUER, 0); }
		public TerminalNode JSON() { return getToken(DALStatementParser.JSON, 0); }
		public TerminalNode JSON_VALUE() { return getToken(DALStatementParser.JSON_VALUE, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(DALStatementParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LANGUAGE() { return getToken(DALStatementParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(DALStatementParser.LAST, 0); }
		public TerminalNode LEAVES() { return getToken(DALStatementParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(DALStatementParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(DALStatementParser.LEVEL, 0); }
		public TerminalNode LINESTRING() { return getToken(DALStatementParser.LINESTRING, 0); }
		public TerminalNode LIST() { return getToken(DALStatementParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(DALStatementParser.LOCAL, 0); }
		public TerminalNode LOCKED() { return getToken(DALStatementParser.LOCKED, 0); }
		public TerminalNode LOCKS() { return getToken(DALStatementParser.LOCKS, 0); }
		public TerminalNode LOGFILE() { return getToken(DALStatementParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(DALStatementParser.LOGS, 0); }
		public TerminalNode MANAGED() { return getToken(DALStatementParser.MANAGED, 0); }
		public TerminalNode MASTER() { return getToken(DALStatementParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(DALStatementParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_COMPRESSION_ALGORITHMS() { return getToken(DALStatementParser.MASTER_COMPRESSION_ALGORITHMS, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(DALStatementParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(DALStatementParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(DALStatementParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(DALStatementParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(DALStatementParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(DALStatementParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(DALStatementParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PUBLIC_KEY_PATH() { return getToken(DALStatementParser.MASTER_PUBLIC_KEY_PATH, 0); }
		public TerminalNode MASTER_PORT() { return getToken(DALStatementParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(DALStatementParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SERVER_ID() { return getToken(DALStatementParser.MASTER_SERVER_ID, 0); }
		public TerminalNode MASTER_SSL() { return getToken(DALStatementParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(DALStatementParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(DALStatementParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(DALStatementParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(DALStatementParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(DALStatementParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(DALStatementParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(DALStatementParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_CIPHERSUITES() { return getToken(DALStatementParser.MASTER_TLS_CIPHERSUITES, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(DALStatementParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(DALStatementParser.MASTER_USER, 0); }
		public TerminalNode MASTER_ZSTD_COMPRESSION_LEVEL() { return getToken(DALStatementParser.MASTER_ZSTD_COMPRESSION_LEVEL, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(DALStatementParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(DALStatementParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX_ROWS() { return getToken(DALStatementParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(DALStatementParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(DALStatementParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(DALStatementParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(DALStatementParser.MEDIUM, 0); }
		public TerminalNode MEMORY() { return getToken(DALStatementParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(DALStatementParser.MERGE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(DALStatementParser.MESSAGE_TEXT, 0); }
		public TerminalNode MICROSECOND() { return getToken(DALStatementParser.MICROSECOND, 0); }
		public TerminalNode MIGRATE() { return getToken(DALStatementParser.MIGRATE, 0); }
		public TerminalNode MINUTE() { return getToken(DALStatementParser.MINUTE, 0); }
		public TerminalNode MIN_ROWS() { return getToken(DALStatementParser.MIN_ROWS, 0); }
		public TerminalNode MODE() { return getToken(DALStatementParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(DALStatementParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(DALStatementParser.MONTH, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(DALStatementParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(DALStatementParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(DALStatementParser.MULTIPOLYGON, 0); }
		public TerminalNode MUTEX() { return getToken(DALStatementParser.MUTEX, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(DALStatementParser.MYSQL_ERRNO, 0); }
		public TerminalNode NAME() { return getToken(DALStatementParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(DALStatementParser.NAMES, 0); }
		public TerminalNode NATIONAL() { return getToken(DALStatementParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(DALStatementParser.NCHAR, 0); }
		public TerminalNode NDB() { return getToken(DALStatementParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(DALStatementParser.NDBCLUSTER, 0); }
		public TerminalNode NESTED() { return getToken(DALStatementParser.NESTED, 0); }
		public TerminalNode NETWORK_NAMESPACE() { return getToken(DALStatementParser.NETWORK_NAMESPACE, 0); }
		public TerminalNode NEVER() { return getToken(DALStatementParser.NEVER, 0); }
		public TerminalNode NEW() { return getToken(DALStatementParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(DALStatementParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(DALStatementParser.NO, 0); }
		public TerminalNode NODEGROUP() { return getToken(DALStatementParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(DALStatementParser.NONE, 0); }
		public TerminalNode NOWAIT() { return getToken(DALStatementParser.NOWAIT, 0); }
		public TerminalNode NO_WAIT() { return getToken(DALStatementParser.NO_WAIT, 0); }
		public TerminalNode NULLS() { return getToken(DALStatementParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(DALStatementParser.NUMBER, 0); }
		public TerminalNode NVARCHAR() { return getToken(DALStatementParser.NVARCHAR, 0); }
		public TerminalNode OFFSET() { return getToken(DALStatementParser.OFFSET, 0); }
		public TerminalNode OFF() { return getToken(DALStatementParser.OFF, 0); }
		public TerminalNode OJ() { return getToken(DALStatementParser.OJ, 0); }
		public TerminalNode OLD() { return getToken(DALStatementParser.OLD, 0); }
		public TerminalNode ONE() { return getToken(DALStatementParser.ONE, 0); }
		public TerminalNode ONLY() { return getToken(DALStatementParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(DALStatementParser.OPEN, 0); }
		public TerminalNode OPTIONAL() { return getToken(DALStatementParser.OPTIONAL, 0); }
		public TerminalNode OPTIONS() { return getToken(DALStatementParser.OPTIONS, 0); }
		public TerminalNode ORDINALITY() { return getToken(DALStatementParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(DALStatementParser.OTHERS, 0); }
		public TerminalNode OWNER() { return getToken(DALStatementParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(DALStatementParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(DALStatementParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(DALStatementParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(DALStatementParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(DALStatementParser.PARTITIONING, 0); }
		public TerminalNode PASSWORD() { return getToken(DALStatementParser.PASSWORD, 0); }
		public TerminalNode PASSWORD_LOCK_TIME() { return getToken(DALStatementParser.PASSWORD_LOCK_TIME, 0); }
		public TerminalNode PATH() { return getToken(DALStatementParser.PATH, 0); }
		public TerminalNode PERSIST() { return getToken(DALStatementParser.PERSIST, 0); }
		public TerminalNode PERSIST_ONLY() { return getToken(DALStatementParser.PERSIST_ONLY, 0); }
		public TerminalNode PHASE() { return getToken(DALStatementParser.PHASE, 0); }
		public TerminalNode PLUGIN() { return getToken(DALStatementParser.PLUGIN, 0); }
		public TerminalNode PLUGINS() { return getToken(DALStatementParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(DALStatementParser.PLUGIN_DIR, 0); }
		public TerminalNode POINT() { return getToken(DALStatementParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(DALStatementParser.POLYGON, 0); }
		public TerminalNode PORT() { return getToken(DALStatementParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(DALStatementParser.PRECEDES, 0); }
		public TerminalNode PRECEDING() { return getToken(DALStatementParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(DALStatementParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(DALStatementParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(DALStatementParser.PREV, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DALStatementParser.PRIVILEGES, 0); }
		public TerminalNode PRIVILEGE_CHECKS_USER() { return getToken(DALStatementParser.PRIVILEGE_CHECKS_USER, 0); }
		public TerminalNode PROCESS() { return getToken(DALStatementParser.PROCESS, 0); }
		public TerminalNode PROCESSLIST() { return getToken(DALStatementParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(DALStatementParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(DALStatementParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(DALStatementParser.PROXY, 0); }
		public TerminalNode QUARTER() { return getToken(DALStatementParser.QUARTER, 0); }
		public TerminalNode QUERY() { return getToken(DALStatementParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(DALStatementParser.QUICK, 0); }
		public TerminalNode RANDOM() { return getToken(DALStatementParser.RANDOM, 0); }
		public TerminalNode READ_ONLY() { return getToken(DALStatementParser.READ_ONLY, 0); }
		public TerminalNode REBUILD() { return getToken(DALStatementParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(DALStatementParser.RECOVER, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(DALStatementParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(DALStatementParser.REDUNDANT, 0); }
		public TerminalNode REFERENCE() { return getToken(DALStatementParser.REFERENCE, 0); }
		public TerminalNode RELAY() { return getToken(DALStatementParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(DALStatementParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(DALStatementParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(DALStatementParser.RELAY_LOG_POS, 0); }
		public TerminalNode RELAY_THREAD() { return getToken(DALStatementParser.RELAY_THREAD, 0); }
		public TerminalNode RELOAD() { return getToken(DALStatementParser.RELOAD, 0); }
		public TerminalNode REMOVE() { return getToken(DALStatementParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(DALStatementParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(DALStatementParser.REPAIR, 0); }
		public TerminalNode REPEATABLE() { return getToken(DALStatementParser.REPEATABLE, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(DALStatementParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(DALStatementParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(DALStatementParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(DALStatementParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(DALStatementParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(DALStatementParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(DALStatementParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(DALStatementParser.REPLICATION, 0); }
		public TerminalNode REQUIRE_ROW_FORMAT() { return getToken(DALStatementParser.REQUIRE_ROW_FORMAT, 0); }
		public TerminalNode RESET() { return getToken(DALStatementParser.RESET, 0); }
		public TerminalNode RESOURCE() { return getToken(DALStatementParser.RESOURCE, 0); }
		public TerminalNode RESPECT() { return getToken(DALStatementParser.RESPECT, 0); }
		public TerminalNode RESTART() { return getToken(DALStatementParser.RESTART, 0); }
		public TerminalNode RESTORE() { return getToken(DALStatementParser.RESTORE, 0); }
		public TerminalNode RESUME() { return getToken(DALStatementParser.RESUME, 0); }
		public TerminalNode RETAIN() { return getToken(DALStatementParser.RETAIN, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(DALStatementParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNING() { return getToken(DALStatementParser.RETURNING, 0); }
		public TerminalNode RETURNS() { return getToken(DALStatementParser.RETURNS, 0); }
		public TerminalNode REUSE() { return getToken(DALStatementParser.REUSE, 0); }
		public TerminalNode REVERSE() { return getToken(DALStatementParser.REVERSE, 0); }
		public TerminalNode ROLE() { return getToken(DALStatementParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(DALStatementParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(DALStatementParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(DALStatementParser.ROTATE, 0); }
		public TerminalNode ROUTINE() { return getToken(DALStatementParser.ROUTINE, 0); }
		public TerminalNode ROW_COUNT() { return getToken(DALStatementParser.ROW_COUNT, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(DALStatementParser.ROW_FORMAT, 0); }
		public TerminalNode RTREE() { return getToken(DALStatementParser.RTREE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(DALStatementParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(DALStatementParser.SCHEDULE, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(DALStatementParser.SCHEMA_NAME, 0); }
		public TerminalNode SECOND() { return getToken(DALStatementParser.SECOND, 0); }
		public TerminalNode SECONDARY() { return getToken(DALStatementParser.SECONDARY, 0); }
		public TerminalNode SECONDARY_ENGINE() { return getToken(DALStatementParser.SECONDARY_ENGINE, 0); }
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return getToken(DALStatementParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public TerminalNode SECONDARY_LOAD() { return getToken(DALStatementParser.SECONDARY_LOAD, 0); }
		public TerminalNode SECONDARY_UNLOAD() { return getToken(DALStatementParser.SECONDARY_UNLOAD, 0); }
		public TerminalNode SECURITY() { return getToken(DALStatementParser.SECURITY, 0); }
		public TerminalNode SERIAL() { return getToken(DALStatementParser.SERIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(DALStatementParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(DALStatementParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(DALStatementParser.SESSION, 0); }
		public TerminalNode SHARE() { return getToken(DALStatementParser.SHARE, 0); }
		public TerminalNode SHUTDOWN() { return getToken(DALStatementParser.SHUTDOWN, 0); }
		public TerminalNode SIGNED() { return getToken(DALStatementParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(DALStatementParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(DALStatementParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(DALStatementParser.SLOW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(DALStatementParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(DALStatementParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(DALStatementParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(DALStatementParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(DALStatementParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(DALStatementParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(DALStatementParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(DALStatementParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(DALStatementParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(DALStatementParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(DALStatementParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(DALStatementParser.SQL_THREAD, 0); }
		public TerminalNode SQL_TSI_DAY() { return getToken(DALStatementParser.SQL_TSI_DAY, 0); }
		public TerminalNode SQL_TSI_HOUR() { return getToken(DALStatementParser.SQL_TSI_HOUR, 0); }
		public TerminalNode SQL_TSI_MINUTE() { return getToken(DALStatementParser.SQL_TSI_MINUTE, 0); }
		public TerminalNode SQL_TSI_MONTH() { return getToken(DALStatementParser.SQL_TSI_MONTH, 0); }
		public TerminalNode SQL_TSI_QUARTER() { return getToken(DALStatementParser.SQL_TSI_QUARTER, 0); }
		public TerminalNode SQL_TSI_SECOND() { return getToken(DALStatementParser.SQL_TSI_SECOND, 0); }
		public TerminalNode SQL_TSI_WEEK() { return getToken(DALStatementParser.SQL_TSI_WEEK, 0); }
		public TerminalNode SQL_TSI_YEAR() { return getToken(DALStatementParser.SQL_TSI_YEAR, 0); }
		public TerminalNode SRID() { return getToken(DALStatementParser.SRID, 0); }
		public TerminalNode STACKED() { return getToken(DALStatementParser.STACKED, 0); }
		public TerminalNode START() { return getToken(DALStatementParser.START, 0); }
		public TerminalNode STARTS() { return getToken(DALStatementParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(DALStatementParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(DALStatementParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(DALStatementParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(DALStatementParser.STATUS, 0); }
		public TerminalNode STOP() { return getToken(DALStatementParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(DALStatementParser.STORAGE, 0); }
		public TerminalNode STREAM() { return getToken(DALStatementParser.STREAM, 0); }
		public TerminalNode STRING() { return getToken(DALStatementParser.STRING, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(DALStatementParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBJECT() { return getToken(DALStatementParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(DALStatementParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(DALStatementParser.SUBPARTITIONS, 0); }
		public TerminalNode SUPER() { return getToken(DALStatementParser.SUPER, 0); }
		public TerminalNode SUSPEND() { return getToken(DALStatementParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(DALStatementParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(DALStatementParser.SWITCHES, 0); }
		public TerminalNode SQL_CACHE() { return getToken(DALStatementParser.SQL_CACHE, 0); }
		public TerminalNode TABLES() { return getToken(DALStatementParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(DALStatementParser.TABLESPACE, 0); }
		public TerminalNode TABLE_CHECKSUM() { return getToken(DALStatementParser.TABLE_CHECKSUM, 0); }
		public TerminalNode TABLE_NAME() { return getToken(DALStatementParser.TABLE_NAME, 0); }
		public TerminalNode TEMPORARY() { return getToken(DALStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(DALStatementParser.TEMPTABLE, 0); }
		public TerminalNode TEXT() { return getToken(DALStatementParser.TEXT, 0); }
		public TerminalNode THAN() { return getToken(DALStatementParser.THAN, 0); }
		public TerminalNode THREAD_PRIORITY() { return getToken(DALStatementParser.THREAD_PRIORITY, 0); }
		public TerminalNode TIES() { return getToken(DALStatementParser.TIES, 0); }
		public TerminalNode TIME() { return getToken(DALStatementParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DALStatementParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(DALStatementParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(DALStatementParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TLS() { return getToken(DALStatementParser.TLS, 0); }
		public TerminalNode TRANSACTION() { return getToken(DALStatementParser.TRANSACTION, 0); }
		public TerminalNode TRIGGERS() { return getToken(DALStatementParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(DALStatementParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(DALStatementParser.TYPE, 0); }
		public TerminalNode TYPES() { return getToken(DALStatementParser.TYPES, 0); }
		public TerminalNode UNBOUNDED() { return getToken(DALStatementParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(DALStatementParser.UNCOMMITTED, 0); }
		public TerminalNode UNDEFINED() { return getToken(DALStatementParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(DALStatementParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(DALStatementParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNICODE() { return getToken(DALStatementParser.UNICODE, 0); }
		public TerminalNode UNINSTALL() { return getToken(DALStatementParser.UNINSTALL, 0); }
		public TerminalNode UNKNOWN() { return getToken(DALStatementParser.UNKNOWN, 0); }
		public TerminalNode UNTIL() { return getToken(DALStatementParser.UNTIL, 0); }
		public TerminalNode UPGRADE() { return getToken(DALStatementParser.UPGRADE, 0); }
		public TerminalNode USER() { return getToken(DALStatementParser.USER, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(DALStatementParser.USER_RESOURCES, 0); }
		public TerminalNode USE_FRM() { return getToken(DALStatementParser.USE_FRM, 0); }
		public TerminalNode VALIDATION() { return getToken(DALStatementParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(DALStatementParser.VALUE, 0); }
		public TerminalNode VARIABLES() { return getToken(DALStatementParser.VARIABLES, 0); }
		public TerminalNode VCPU() { return getToken(DALStatementParser.VCPU, 0); }
		public TerminalNode VIEW() { return getToken(DALStatementParser.VIEW, 0); }
		public TerminalNode VISIBLE() { return getToken(DALStatementParser.VISIBLE, 0); }
		public TerminalNode WAIT() { return getToken(DALStatementParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(DALStatementParser.WARNINGS, 0); }
		public TerminalNode WEEK() { return getToken(DALStatementParser.WEEK, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(DALStatementParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHOUT() { return getToken(DALStatementParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(DALStatementParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(DALStatementParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(DALStatementParser.X509, 0); }
		public TerminalNode XA() { return getToken(DALStatementParser.XA, 0); }
		public TerminalNode XID() { return getToken(DALStatementParser.XID, 0); }
		public TerminalNode XML() { return getToken(DALStatementParser.XML, 0); }
		public TerminalNode YEAR() { return getToken(DALStatementParser.YEAR, 0); }
		public UnreservedWordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreservedWord; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterUnreservedWord(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitUnreservedWord(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitUnreservedWord(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnreservedWordContext unreservedWord() throws RecognitionException {
		UnreservedWordContext _localctx = new UnreservedWordContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_unreservedWord);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1481);
			_la = _input.LA(1);
			if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ACCOUNT - 68)) | (1L << (ACTION - 68)) | (1L << (ACTIVE - 68)) | (1L << (ADMIN - 68)) | (1L << (AFTER - 68)) | (1L << (AGAINST - 68)) | (1L << (AGGREGATE - 68)) | (1L << (ALGORITHM - 68)) | (1L << (ALWAYS - 68)) | (1L << (ANY - 68)) | (1L << (ASCII - 68)) | (1L << (AT - 68)) | (1L << (ATTRIBUTE - 68)) | (1L << (AUTOEXTEND_SIZE - 68)) | (1L << (AUTO_INCREMENT - 68)) | (1L << (AVG - 68)) | (1L << (AVG_ROW_LENGTH - 68)) | (1L << (BACKUP - 68)) | (1L << (BEGIN - 68)) | (1L << (BINLOG - 68)) | (1L << (BIT - 68)) | (1L << (BLOCK - 68)) | (1L << (BOOL - 68)) | (1L << (BOOLEAN - 68)) | (1L << (BTREE - 68)) | (1L << (BUCKETS - 68)) | (1L << (BYTE - 68)) | (1L << (CACHE - 68)) | (1L << (CASCADED - 68)) | (1L << (CATALOG_NAME - 68)) | (1L << (CHAIN - 68)) | (1L << (CHANGED - 68)) | (1L << (CHANNEL - 68)) | (1L << (CHARSET - 68)) | (1L << (CHECKSUM - 68)) | (1L << (CIPHER - 68)) | (1L << (CLASS_ORIGIN - 68)) | (1L << (CLIENT - 68)) | (1L << (CLONE - 68)) | (1L << (CLOSE - 68)) | (1L << (COALESCE - 68)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (CODE - 132)) | (1L << (COLLATION - 132)) | (1L << (COLUMNS - 132)) | (1L << (COLUMN_FORMAT - 132)) | (1L << (COMMENT - 132)) | (1L << (COMMIT - 132)) | (1L << (COMMITTED - 132)) | (1L << (COMPACT - 132)) | (1L << (COMPLETION - 132)) | (1L << (COMPONENT - 132)) | (1L << (COMPRESSED - 132)) | (1L << (COMPRESSION - 132)) | (1L << (CONCURRENT - 132)) | (1L << (CONNECTION - 132)) | (1L << (CONSISTENT - 132)) | (1L << (CONSTRAINT_CATALOG - 132)) | (1L << (CONSTRAINT_NAME - 132)) | (1L << (CONSTRAINT_SCHEMA - 132)) | (1L << (CONTAINS - 132)) | (1L << (CONTEXT - 132)) | (1L << (CPU - 132)) | (1L << (CURRENT - 132)) | (1L << (CURSOR_NAME - 132)) | (1L << (DATA - 132)) | (1L << (DATAFILE - 132)) | (1L << (DATE - 132)) | (1L << (DATETIME - 132)) | (1L << (DAY - 132)) | (1L << (DEALLOCATE - 132)) | (1L << (DEFAULT_AUTH - 132)) | (1L << (DEFINER - 132)) | (1L << (DEFINITION - 132)) | (1L << (DELAY_KEY_WRITE - 132)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (DESCRIPTION - 196)) | (1L << (DIAGNOSTICS - 196)) | (1L << (DIRECTORY - 196)) | (1L << (DISABLE - 196)) | (1L << (DISCARD - 196)) | (1L << (DISK - 196)) | (1L << (DO - 196)) | (1L << (DUMPFILE - 196)) | (1L << (DUPLICATE - 196)) | (1L << (DYNAMIC - 196)) | (1L << (ENABLE - 196)) | (1L << (ENCRYPTION - 196)) | (1L << (END - 196)) | (1L << (ENDS - 196)) | (1L << (ENFORCED - 196)) | (1L << (ENGINE - 196)) | (1L << (ENGINES - 196)) | (1L << (ENGINE_ATTRIBUTE - 196)) | (1L << (ENUM - 196)) | (1L << (ERROR - 196)) | (1L << (ERRORS - 196)) | (1L << (ESCAPE - 196)) | (1L << (EVENT - 196)) | (1L << (EVENTS - 196)) | (1L << (EVERY - 196)) | (1L << (EXCHANGE - 196)) | (1L << (EXCLUDE - 196)) | (1L << (EXECUTE - 196)) | (1L << (EXPANSION - 196)) | (1L << (EXPIRE - 196)) | (1L << (EXPORT - 196)) | (1L << (EXTENDED - 196)) | (1L << (EXTENT_SIZE - 196)) | (1L << (FAILED_LOGIN_ATTEMPTS - 196)) | (1L << (FAST - 196)) | (1L << (FAULTS - 196)) | (1L << (FIELDS - 196)) | (1L << (FILE - 196)) | (1L << (FILE_BLOCK_SIZE - 196)) | (1L << (FILTER - 196)) | (1L << (FIRST - 196)) | (1L << (FIXED - 196)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (FLUSH - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FOLLOWS - 261)) | (1L << (FORMAT - 261)) | (1L << (FULL - 261)) | (1L << (GENERAL - 261)) | (1L << (GEOMCOLLECTION - 261)) | (1L << (GEOMETRY - 261)) | (1L << (GEOMETRYCOLLECTION - 261)) | (1L << (GET_FORMAT - 261)) | (1L << (GET_MASTER_PUBLIC_KEY - 261)) | (1L << (GLOBAL - 261)) | (1L << (GRANTS - 261)) | (1L << (GROUP_REPLICATION - 261)) | (1L << (HANDLER - 261)) | (1L << (HASH - 261)) | (1L << (HELP - 261)) | (1L << (HISTOGRAM - 261)) | (1L << (HISTORY - 261)) | (1L << (HOST - 261)) | (1L << (HOSTS - 261)) | (1L << (HOUR - 261)) | (1L << (IDENTIFIED - 261)) | (1L << (IGNORE_SERVER_IDS - 261)) | (1L << (IMPORT - 261)) | (1L << (INACTIVE - 261)) | (1L << (INDEXES - 261)) | (1L << (INITIAL_SIZE - 261)) | (1L << (INSERT_METHOD - 261)) | (1L << (INSTALL - 261)) | (1L << (INSTANCE - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (JSON_VALUE - 328)) | (1L << (KEY_BLOCK_SIZE - 328)) | (1L << (LANGUAGE - 328)) | (1L << (LAST - 328)) | (1L << (LEAVES - 328)) | (1L << (LESS - 328)) | (1L << (LEVEL - 328)) | (1L << (LINESTRING - 328)) | (1L << (LIST - 328)) | (1L << (LOCAL - 328)) | (1L << (LOCKED - 328)) | (1L << (LOCKS - 328)) | (1L << (LOGFILE - 328)) | (1L << (LOGS - 328)) | (1L << (MANAGED - 328)) | (1L << (MASTER - 328)) | (1L << (MASTER_AUTO_POSITION - 328)) | (1L << (MASTER_COMPRESSION_ALGORITHMS - 328)) | (1L << (MASTER_CONNECT_RETRY - 328)) | (1L << (MASTER_DELAY - 328)) | (1L << (MASTER_HEARTBEAT_PERIOD - 328)) | (1L << (MASTER_HOST - 328)) | (1L << (MASTER_LOG_FILE - 328)) | (1L << (MASTER_LOG_POS - 328)) | (1L << (MASTER_PASSWORD - 328)) | (1L << (MASTER_PORT - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (MASTER_PUBLIC_KEY_PATH - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SERVER_ID - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_CIPHERSUITES - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MEMORY - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MICROSECOND - 392)) | (1L << (MIGRATE - 392)) | (1L << (MINUTE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MONTH - 392)) | (1L << (MULTILINESTRING - 392)) | (1L << (MULTIPOINT - 392)) | (1L << (MULTIPOLYGON - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NATIONAL - 392)) | (1L << (NCHAR - 392)) | (1L << (NDB - 392)) | (1L << (NDBCLUSTER - 392)) | (1L << (NESTED - 392)) | (1L << (NETWORK_NAMESPACE - 392)) | (1L << (NEVER - 392)) | (1L << (NEW - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (NOWAIT - 457)) | (1L << (NO_WAIT - 457)) | (1L << (NULLS - 457)) | (1L << (NUMBER - 457)) | (1L << (NVARCHAR - 457)) | (1L << (OFF - 457)) | (1L << (OFFSET - 457)) | (1L << (OJ - 457)) | (1L << (OLD - 457)) | (1L << (ONE - 457)) | (1L << (ONLY - 457)) | (1L << (OPEN - 457)) | (1L << (OPTIONAL - 457)) | (1L << (OPTIONS - 457)) | (1L << (ORDINALITY - 457)) | (1L << (OTHERS - 457)) | (1L << (OWNER - 457)) | (1L << (PACK_KEYS - 457)) | (1L << (PAGE - 457)) | (1L << (PARSER - 457)) | (1L << (PARTIAL - 457)) | (1L << (PARTITIONING - 457)) | (1L << (PASSWORD - 457)) | (1L << (PASSWORD_LOCK_TIME - 457)) | (1L << (PATH - 457)) | (1L << (PERSIST - 457)) | (1L << (PERSIST_ONLY - 457)) | (1L << (PHASE - 457)) | (1L << (PLUGIN - 457)) | (1L << (PLUGINS - 457)) | (1L << (PLUGIN_DIR - 457)) | (1L << (POINT - 457)) | (1L << (POLYGON - 457)) | (1L << (PORT - 457)) | (1L << (PRECEDES - 457)) | (1L << (PRECEDING - 457)) | (1L << (PREPARE - 457)) | (1L << (PRESERVE - 457)) | (1L << (PREV - 457)) | (1L << (PRIVILEGES - 457)) | (1L << (PRIVILEGE_CHECKS_USER - 457)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (PROCESS - 522)) | (1L << (PROCESSLIST - 522)) | (1L << (PROFILE - 522)) | (1L << (PROFILES - 522)) | (1L << (PROXY - 522)) | (1L << (QUARTER - 522)) | (1L << (QUERY - 522)) | (1L << (QUICK - 522)) | (1L << (RANDOM - 522)) | (1L << (READ_ONLY - 522)) | (1L << (REBUILD - 522)) | (1L << (RECOVER - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (REDUNDANT - 522)) | (1L << (REFERENCE - 522)) | (1L << (RELAY - 522)) | (1L << (RELAYLOG - 522)) | (1L << (RELAY_LOG_FILE - 522)) | (1L << (RELAY_LOG_POS - 522)) | (1L << (RELAY_THREAD - 522)) | (1L << (RELOAD - 522)) | (1L << (REMOVE - 522)) | (1L << (REORGANIZE - 522)) | (1L << (REPAIR - 522)) | (1L << (REPEATABLE - 522)) | (1L << (REPLICATE_DO_DB - 522)) | (1L << (REPLICATE_DO_TABLE - 522)) | (1L << (REPLICATE_IGNORE_DB - 522)) | (1L << (REPLICATE_IGNORE_TABLE - 522)) | (1L << (REPLICATE_REWRITE_DB - 522)) | (1L << (REPLICATE_WILD_DO_TABLE - 522)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 522)) | (1L << (REPLICATION - 522)) | (1L << (REQUIRE_ROW_FORMAT - 522)) | (1L << (RESET - 522)) | (1L << (RESOURCE - 522)) | (1L << (RESPECT - 522)) | (1L << (RESTART - 522)) | (1L << (RESTORE - 522)) | (1L << (RESUME - 522)) | (1L << (RETAIN - 522)) | (1L << (RETURNED_SQLSTATE - 522)) | (1L << (RETURNING - 522)) | (1L << (RETURNS - 522)) | (1L << (REUSE - 522)) | (1L << (REVERSE - 522)))) != 0) || ((((_la - 589)) & ~0x3f) == 0 && ((1L << (_la - 589)) & ((1L << (ROLE - 589)) | (1L << (ROLLBACK - 589)) | (1L << (ROLLUP - 589)) | (1L << (ROTATE - 589)) | (1L << (ROUTINE - 589)) | (1L << (ROW_COUNT - 589)) | (1L << (ROW_FORMAT - 589)) | (1L << (RTREE - 589)) | (1L << (SAVEPOINT - 589)) | (1L << (SCHEDULE - 589)) | (1L << (SCHEMA_NAME - 589)) | (1L << (SECOND - 589)) | (1L << (SECONDARY - 589)) | (1L << (SECONDARY_ENGINE - 589)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 589)) | (1L << (SECONDARY_LOAD - 589)) | (1L << (SECONDARY_UNLOAD - 589)) | (1L << (SECURITY - 589)) | (1L << (SERIAL - 589)) | (1L << (SERIALIZABLE - 589)) | (1L << (SERVER - 589)) | (1L << (SESSION - 589)) | (1L << (SHARE - 589)) | (1L << (SHUTDOWN - 589)) | (1L << (SIGNED - 589)) | (1L << (SIMPLE - 589)) | (1L << (SLAVE - 589)) | (1L << (SLOW - 589)) | (1L << (SNAPSHOT - 589)) | (1L << (SOCKET - 589)) | (1L << (SOME - 589)) | (1L << (SONAME - 589)) | (1L << (SOUNDS - 589)) | (1L << (SOURCE - 589)) | (1L << (SQL_CACHE - 589)) | (1L << (SQL_AFTER_GTIDS - 589)) | (1L << (SQL_AFTER_MTS_GAPS - 589)) | (1L << (SQL_BEFORE_GTIDS - 589)) | (1L << (SQL_BUFFER_RESULT - 589)) | (1L << (SQL_NO_CACHE - 589)) | (1L << (SQL_THREAD - 589)) | (1L << (SQL_TSI_DAY - 589)))) != 0) || ((((_la - 653)) & ~0x3f) == 0 && ((1L << (_la - 653)) & ((1L << (SQL_TSI_HOUR - 653)) | (1L << (SQL_TSI_MINUTE - 653)) | (1L << (SQL_TSI_MONTH - 653)) | (1L << (SQL_TSI_QUARTER - 653)) | (1L << (SQL_TSI_SECOND - 653)) | (1L << (SQL_TSI_WEEK - 653)) | (1L << (SQL_TSI_YEAR - 653)) | (1L << (SRID - 653)) | (1L << (STACKED - 653)) | (1L << (START - 653)) | (1L << (STARTS - 653)) | (1L << (STATS_AUTO_RECALC - 653)) | (1L << (STATS_PERSISTENT - 653)) | (1L << (STATS_SAMPLE_PAGES - 653)) | (1L << (STATUS - 653)) | (1L << (STOP - 653)) | (1L << (STORAGE - 653)) | (1L << (STREAM - 653)) | (1L << (STRING - 653)) | (1L << (SUBCLASS_ORIGIN - 653)) | (1L << (SUBJECT - 653)) | (1L << (SUBPARTITION - 653)) | (1L << (SUBPARTITIONS - 653)) | (1L << (SUPER - 653)) | (1L << (SUSPEND - 653)) | (1L << (SWAPS - 653)) | (1L << (SWITCHES - 653)) | (1L << (TABLES - 653)) | (1L << (TABLESPACE - 653)) | (1L << (TABLE_CHECKSUM - 653)) | (1L << (TABLE_NAME - 653)) | (1L << (TEMPORARY - 653)) | (1L << (TEMPTABLE - 653)) | (1L << (TEXT - 653)) | (1L << (THAN - 653)) | (1L << (THREAD_PRIORITY - 653)) | (1L << (TIES - 653)) | (1L << (TIME - 653)) | (1L << (TIMESTAMP - 653)) | (1L << (TIMESTAMPADD - 653)) | (1L << (TIMESTAMPDIFF - 653)) | (1L << (TLS - 653)) | (1L << (TRANSACTION - 653)) | (1L << (TRIGGERS - 653)) | (1L << (TRUNCATE - 653)) | (1L << (TYPE - 653)) | (1L << (TYPES - 653)) | (1L << (UNBOUNDED - 653)) | (1L << (UNCOMMITTED - 653)))) != 0) || ((((_la - 717)) & ~0x3f) == 0 && ((1L << (_la - 717)) & ((1L << (UNDEFINED - 717)) | (1L << (UNDOFILE - 717)) | (1L << (UNDO_BUFFER_SIZE - 717)) | (1L << (UNICODE - 717)) | (1L << (UNINSTALL - 717)) | (1L << (UNKNOWN - 717)) | (1L << (UNTIL - 717)) | (1L << (UPGRADE - 717)) | (1L << (USER - 717)) | (1L << (USER_RESOURCES - 717)) | (1L << (USE_FRM - 717)) | (1L << (VALIDATION - 717)) | (1L << (VALUE - 717)) | (1L << (VARIABLES - 717)) | (1L << (VCPU - 717)) | (1L << (VIEW - 717)) | (1L << (VISIBLE - 717)) | (1L << (WAIT - 717)) | (1L << (WARNINGS - 717)) | (1L << (WEEK - 717)) | (1L << (WEIGHT_STRING - 717)) | (1L << (WITHOUT - 717)) | (1L << (WORK - 717)) | (1L << (WRAPPER - 717)) | (1L << (X509 - 717)) | (1L << (XA - 717)) | (1L << (XID - 717)) | (1L << (XML - 717)) | (1L << (YEAR - 717)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> AT_() { return getTokens(DALStatementParser.AT_); }
		public TerminalNode AT_(int i) {
			return getToken(DALStatementParser.AT_, i);
		}
		public ScopeContext scope() {
			return getRuleContext(ScopeContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DALStatementParser.DOT_, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_) {
				{
				setState(1484);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
				case 1:
					{
					setState(1483);
					match(AT_);
					}
					break;
				}
				setState(1486);
				match(AT_);
				}
			}

			setState(1490);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				{
				setState(1489);
				scope();
				}
				break;
			}
			setState(1493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT_) {
				{
				setState(1492);
				match(DOT_);
				}
			}

			setState(1495);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScopeContext extends ParserRuleContext {
		public TerminalNode GLOBAL() { return getToken(DALStatementParser.GLOBAL, 0); }
		public TerminalNode PERSIST() { return getToken(DALStatementParser.PERSIST, 0); }
		public TerminalNode PERSIST_ONLY() { return getToken(DALStatementParser.PERSIST_ONLY, 0); }
		public TerminalNode SESSION() { return getToken(DALStatementParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(DALStatementParser.LOCAL, 0); }
		public TerminalNode NEW() { return getToken(DALStatementParser.NEW, 0); }
		public ScopeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scope; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterScope(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitScope(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitScope(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScopeContext scope() throws RecognitionException {
		ScopeContext _localctx = new ScopeContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_scope);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1497);
			_la = _input.LA(1);
			if ( !(_la==GLOBAL || _la==LOCAL || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (NEW - 451)) | (1L << (PERSIST - 451)) | (1L << (PERSIST_ONLY - 451)))) != 0) || _la==SESSION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1499);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNamesContext extends ParserRuleContext {
		public List<SchemaNameContext> schemaName() {
			return getRuleContexts(SchemaNameContext.class);
		}
		public SchemaNameContext schemaName(int i) {
			return getRuleContext(SchemaNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public SchemaNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSchemaNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSchemaNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSchemaNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNamesContext schemaNames() throws RecognitionException {
		SchemaNamesContext _localctx = new SchemaNamesContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_schemaNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1501);
			schemaName();
			setState(1506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1502);
				match(COMMA_);
				setState(1503);
				schemaName();
				}
				}
				setState(1508);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaPairsContext extends ParserRuleContext {
		public List<SchemaPairContext> schemaPair() {
			return getRuleContexts(SchemaPairContext.class);
		}
		public SchemaPairContext schemaPair(int i) {
			return getRuleContext(SchemaPairContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public SchemaPairsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaPairs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSchemaPairs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSchemaPairs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSchemaPairs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaPairsContext schemaPairs() throws RecognitionException {
		SchemaPairsContext _localctx = new SchemaPairsContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_schemaPairs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1509);
			schemaPair();
			setState(1514);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1510);
				match(COMMA_);
				setState(1511);
				schemaPair();
				}
				}
				setState(1516);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaPairContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public List<SchemaNameContext> schemaName() {
			return getRuleContexts(SchemaNameContext.class);
		}
		public SchemaNameContext schemaName(int i) {
			return getRuleContext(SchemaNameContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(DALStatementParser.COMMA_, 0); }
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public SchemaPairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaPair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSchemaPair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSchemaPair(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSchemaPair(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaPairContext schemaPair() throws RecognitionException {
		SchemaPairContext _localctx = new SchemaPairContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_schemaPair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1517);
			match(LP_);
			setState(1518);
			schemaName();
			setState(1519);
			match(COMMA_);
			setState(1520);
			schemaName();
			setState(1521);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DALStatementParser.DOT_, 0); }
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
			case 1:
				{
				setState(1523);
				owner();
				setState(1524);
				match(DOT_);
				}
				break;
			}
			setState(1528);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DALStatementParser.DOT_, 0); }
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_columnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1533);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
			case 1:
				{
				setState(1530);
				owner();
				setState(1531);
				match(DOT_);
				}
				break;
			}
			setState(1535);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterIndexName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitIndexName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitIndexName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1537);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserNameContext extends ParserRuleContext {
		public List<TerminalNode> STRING_() { return getTokens(DALStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DALStatementParser.STRING_, i);
		}
		public TerminalNode AT_() { return getToken(DALStatementParser.AT_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterUserName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitUserName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitUserName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserNameContext userName() throws RecognitionException {
		UserNameContext _localctx = new UserNameContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_userName);
		try {
			setState(1544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1539);
				match(STRING_);
				setState(1540);
				match(AT_);
				setState(1541);
				match(STRING_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1542);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1543);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventNameContext extends ParserRuleContext {
		public TerminalNode AT_() { return getToken(DALStatementParser.AT_, 0); }
		public List<TerminalNode> STRING_() { return getTokens(DALStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DALStatementParser.STRING_, i);
		}
		public List<TerminalNode> IDENTIFIER_() { return getTokens(DALStatementParser.IDENTIFIER_); }
		public TerminalNode IDENTIFIER_(int i) {
			return getToken(DALStatementParser.IDENTIFIER_, i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public EventNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterEventName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitEventName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitEventName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventNameContext eventName() throws RecognitionException {
		EventNameContext _localctx = new EventNameContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_eventName);
		int _la;
		try {
			setState(1552);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1546);
				_la = _input.LA(1);
				if ( !(_la==IDENTIFIER_ || _la==STRING_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1547);
				match(AT_);
				{
				setState(1548);
				match(STRING_);
				setState(1549);
				match(IDENTIFIER_);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1550);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1551);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public ServerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterServerName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitServerName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitServerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerNameContext serverName() throws RecognitionException {
		ServerNameContext _localctx = new ServerNameContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_serverName);
		try {
			setState(1556);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case GROUP_CONCAT:
			case CAST:
			case POSITION:
			case SUBSTRING:
			case SUBSTR:
			case EXTRACT:
			case TRIM:
			case LAST_DAY:
			case TRADITIONAL:
			case TREE:
			case MYSQL_ADMIN:
			case INSTANT:
			case INPLACE:
			case COPY:
			case UL_BINARY:
			case AUTOCOMMIT:
			case ACCOUNT:
			case ACTION:
			case ACTIVE:
			case ADMIN:
			case AFTER:
			case AGAINST:
			case AGGREGATE:
			case ALGORITHM:
			case ALWAYS:
			case ANY:
			case ASCII:
			case AT:
			case ATTRIBUTE:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG:
			case AVG_ROW_LENGTH:
			case BACKUP:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case BUCKETS:
			case BYTE:
			case CACHE:
			case CASCADED:
			case CATALOG_NAME:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLONE:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLLATION:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETION:
			case COMPONENT:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONTAINS:
			case CONTEXT:
			case CPU:
			case CURRENT:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DATE:
			case DATETIME:
			case DAY:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DEFINITION:
			case DELAY_KEY_WRITE:
			case DESCRIPTION:
			case DIAGNOSTICS:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENFORCED:
			case ENGINE:
			case ENGINES:
			case ENGINE_ATTRIBUTE:
			case ENUM:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUDE:
			case EXECUTE:
			case EXPANSION:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWING:
			case FOLLOWS:
			case FORMAT:
			case FULL:
			case GENERAL:
			case GEOMCOLLECTION:
			case GEOMETRY:
			case GEOMETRYCOLLECTION:
			case GET_FORMAT:
			case GET_MASTER_PUBLIC_KEY:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTOGRAM:
			case HISTORY:
			case HOST:
			case HOSTS:
			case HOUR:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INACTIVE:
			case INDEXES:
			case INITIAL_SIZE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case JSON_VALUE:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LINESTRING:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOCKS:
			case LOGFILE:
			case LOGS:
			case MANAGED:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_COMPRESSION_ALGORITHMS:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_PUBLIC_KEY_PATH:
			case MASTER_RETRY_COUNT:
			case MASTER_SERVER_ID:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_CIPHERSUITES:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MASTER_ZSTD_COMPRESSION_LEVEL:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMORY:
			case MERGE:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MIGRATE:
			case MINUTE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MONTH:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case MUTEX:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NDB:
			case NDBCLUSTER:
			case NESTED:
			case NETWORK_NAMESPACE:
			case NEVER:
			case NEW:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case NOWAIT:
			case NO_WAIT:
			case NULLS:
			case NUMBER:
			case NVARCHAR:
			case OFF:
			case OFFSET:
			case OJ:
			case OLD:
			case ONE:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PATH:
			case PERSIST:
			case PERSIST_ONLY:
			case PHASE:
			case PLUGIN:
			case PLUGINS:
			case PLUGIN_DIR:
			case POINT:
			case POLYGON:
			case PORT:
			case PRECEDES:
			case PRECEDING:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PRIVILEGES:
			case PRIVILEGE_CHECKS_USER:
			case PROCESS:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUARTER:
			case QUERY:
			case QUICK:
			case RANDOM:
			case READ_ONLY:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case REFERENCE:
			case RELAY:
			case RELAYLOG:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAY_THREAD:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPEATABLE:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case REQUIRE_ROW_FORMAT:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESUME:
			case RETAIN:
			case RETURNED_SQLSTATE:
			case RETURNING:
			case RETURNS:
			case REUSE:
			case REVERSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROUTINE:
			case ROW_COUNT:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SCHEMA_NAME:
			case SECOND:
			case SECONDARY:
			case SECONDARY_ENGINE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SECONDARY_LOAD:
			case SECONDARY_UNLOAD:
			case SECURITY:
			case SERIAL:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHUTDOWN:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_CACHE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case SQL_TSI_DAY:
			case SQL_TSI_HOUR:
			case SQL_TSI_MINUTE:
			case SQL_TSI_MONTH:
			case SQL_TSI_QUARTER:
			case SQL_TSI_SECOND:
			case SQL_TSI_WEEK:
			case SQL_TSI_YEAR:
			case SRID:
			case STACKED:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUPER:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLES:
			case TABLESPACE:
			case TABLE_CHECKSUM:
			case TABLE_NAME:
			case TEMPORARY:
			case TEMPTABLE:
			case TEXT:
			case THAN:
			case THREAD_PRIORITY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TLS:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNICODE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USER_RESOURCES:
			case USE_FRM:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VCPU:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WEEK:
			case WEIGHT_STRING:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XID:
			case XML:
			case YEAR:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1554);
				identifier();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1555);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WrapperNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public WrapperNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wrapperName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterWrapperName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitWrapperName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitWrapperName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WrapperNameContext wrapperName() throws RecognitionException {
		WrapperNameContext _localctx = new WrapperNameContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_wrapperName);
		try {
			setState(1560);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case GROUP_CONCAT:
			case CAST:
			case POSITION:
			case SUBSTRING:
			case SUBSTR:
			case EXTRACT:
			case TRIM:
			case LAST_DAY:
			case TRADITIONAL:
			case TREE:
			case MYSQL_ADMIN:
			case INSTANT:
			case INPLACE:
			case COPY:
			case UL_BINARY:
			case AUTOCOMMIT:
			case ACCOUNT:
			case ACTION:
			case ACTIVE:
			case ADMIN:
			case AFTER:
			case AGAINST:
			case AGGREGATE:
			case ALGORITHM:
			case ALWAYS:
			case ANY:
			case ASCII:
			case AT:
			case ATTRIBUTE:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG:
			case AVG_ROW_LENGTH:
			case BACKUP:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case BUCKETS:
			case BYTE:
			case CACHE:
			case CASCADED:
			case CATALOG_NAME:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLONE:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLLATION:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETION:
			case COMPONENT:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONTAINS:
			case CONTEXT:
			case CPU:
			case CURRENT:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DATE:
			case DATETIME:
			case DAY:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DEFINITION:
			case DELAY_KEY_WRITE:
			case DESCRIPTION:
			case DIAGNOSTICS:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENFORCED:
			case ENGINE:
			case ENGINES:
			case ENGINE_ATTRIBUTE:
			case ENUM:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUDE:
			case EXECUTE:
			case EXPANSION:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWING:
			case FOLLOWS:
			case FORMAT:
			case FULL:
			case GENERAL:
			case GEOMCOLLECTION:
			case GEOMETRY:
			case GEOMETRYCOLLECTION:
			case GET_FORMAT:
			case GET_MASTER_PUBLIC_KEY:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTOGRAM:
			case HISTORY:
			case HOST:
			case HOSTS:
			case HOUR:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INACTIVE:
			case INDEXES:
			case INITIAL_SIZE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case JSON_VALUE:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LINESTRING:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOCKS:
			case LOGFILE:
			case LOGS:
			case MANAGED:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_COMPRESSION_ALGORITHMS:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_PUBLIC_KEY_PATH:
			case MASTER_RETRY_COUNT:
			case MASTER_SERVER_ID:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_CIPHERSUITES:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MASTER_ZSTD_COMPRESSION_LEVEL:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMORY:
			case MERGE:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MIGRATE:
			case MINUTE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MONTH:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case MUTEX:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NDB:
			case NDBCLUSTER:
			case NESTED:
			case NETWORK_NAMESPACE:
			case NEVER:
			case NEW:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case NOWAIT:
			case NO_WAIT:
			case NULLS:
			case NUMBER:
			case NVARCHAR:
			case OFF:
			case OFFSET:
			case OJ:
			case OLD:
			case ONE:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PATH:
			case PERSIST:
			case PERSIST_ONLY:
			case PHASE:
			case PLUGIN:
			case PLUGINS:
			case PLUGIN_DIR:
			case POINT:
			case POLYGON:
			case PORT:
			case PRECEDES:
			case PRECEDING:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PRIVILEGES:
			case PRIVILEGE_CHECKS_USER:
			case PROCESS:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUARTER:
			case QUERY:
			case QUICK:
			case RANDOM:
			case READ_ONLY:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case REFERENCE:
			case RELAY:
			case RELAYLOG:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAY_THREAD:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPEATABLE:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case REQUIRE_ROW_FORMAT:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESUME:
			case RETAIN:
			case RETURNED_SQLSTATE:
			case RETURNING:
			case RETURNS:
			case REUSE:
			case REVERSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROUTINE:
			case ROW_COUNT:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SCHEMA_NAME:
			case SECOND:
			case SECONDARY:
			case SECONDARY_ENGINE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SECONDARY_LOAD:
			case SECONDARY_UNLOAD:
			case SECURITY:
			case SERIAL:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHUTDOWN:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_CACHE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case SQL_TSI_DAY:
			case SQL_TSI_HOUR:
			case SQL_TSI_MINUTE:
			case SQL_TSI_MONTH:
			case SQL_TSI_QUARTER:
			case SQL_TSI_SECOND:
			case SQL_TSI_WEEK:
			case SQL_TSI_YEAR:
			case SRID:
			case STACKED:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUPER:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLES:
			case TABLESPACE:
			case TABLE_CHECKSUM:
			case TABLE_NAME:
			case TEMPORARY:
			case TEMPTABLE:
			case TEXT:
			case THAN:
			case THREAD_PRIORITY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TLS:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNICODE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USER_RESOURCES:
			case USE_FRM:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VCPU:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WEEK:
			case WEIGHT_STRING:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XID:
			case XML:
			case YEAR:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1558);
				identifier();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1559);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DALStatementParser.DOT_, 0); }
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_functionName);
		try {
			setState(1569);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1562);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1566);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
				case 1:
					{
					setState(1563);
					owner();
					setState(1564);
					match(DOT_);
					}
					break;
				}
				setState(1568);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DALStatementParser.DOT_, 0); }
		public ViewNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterViewName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitViewName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitViewName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewNameContext viewName() throws RecognitionException {
		ViewNameContext _localctx = new ViewNameContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_viewName);
		try {
			setState(1578);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1571);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1575);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
				case 1:
					{
					setState(1572);
					owner();
					setState(1573);
					match(DOT_);
					}
					break;
				}
				setState(1577);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitOwner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerContext owner() throws RecognitionException {
		OwnerContext _localctx = new OwnerContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_owner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1580);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_alias);
		try {
			setState(1584);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case GROUP_CONCAT:
			case CAST:
			case POSITION:
			case SUBSTRING:
			case SUBSTR:
			case EXTRACT:
			case TRIM:
			case LAST_DAY:
			case TRADITIONAL:
			case TREE:
			case MYSQL_ADMIN:
			case INSTANT:
			case INPLACE:
			case COPY:
			case UL_BINARY:
			case AUTOCOMMIT:
			case ACCOUNT:
			case ACTION:
			case ACTIVE:
			case ADMIN:
			case AFTER:
			case AGAINST:
			case AGGREGATE:
			case ALGORITHM:
			case ALWAYS:
			case ANY:
			case ASCII:
			case AT:
			case ATTRIBUTE:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG:
			case AVG_ROW_LENGTH:
			case BACKUP:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case BUCKETS:
			case BYTE:
			case CACHE:
			case CASCADED:
			case CATALOG_NAME:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLONE:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLLATION:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETION:
			case COMPONENT:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONTAINS:
			case CONTEXT:
			case CPU:
			case CURRENT:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DATE:
			case DATETIME:
			case DAY:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DEFINITION:
			case DELAY_KEY_WRITE:
			case DESCRIPTION:
			case DIAGNOSTICS:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENFORCED:
			case ENGINE:
			case ENGINES:
			case ENGINE_ATTRIBUTE:
			case ENUM:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUDE:
			case EXECUTE:
			case EXPANSION:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWING:
			case FOLLOWS:
			case FORMAT:
			case FULL:
			case GENERAL:
			case GEOMCOLLECTION:
			case GEOMETRY:
			case GEOMETRYCOLLECTION:
			case GET_FORMAT:
			case GET_MASTER_PUBLIC_KEY:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTOGRAM:
			case HISTORY:
			case HOST:
			case HOSTS:
			case HOUR:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INACTIVE:
			case INDEXES:
			case INITIAL_SIZE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case JSON_VALUE:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LINESTRING:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOCKS:
			case LOGFILE:
			case LOGS:
			case MANAGED:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_COMPRESSION_ALGORITHMS:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_PUBLIC_KEY_PATH:
			case MASTER_RETRY_COUNT:
			case MASTER_SERVER_ID:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_CIPHERSUITES:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MASTER_ZSTD_COMPRESSION_LEVEL:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMORY:
			case MERGE:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MIGRATE:
			case MINUTE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MONTH:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case MUTEX:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NDB:
			case NDBCLUSTER:
			case NESTED:
			case NETWORK_NAMESPACE:
			case NEVER:
			case NEW:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case NOWAIT:
			case NO_WAIT:
			case NULLS:
			case NUMBER:
			case NVARCHAR:
			case OFF:
			case OFFSET:
			case OJ:
			case OLD:
			case ONE:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PATH:
			case PERSIST:
			case PERSIST_ONLY:
			case PHASE:
			case PLUGIN:
			case PLUGINS:
			case PLUGIN_DIR:
			case POINT:
			case POLYGON:
			case PORT:
			case PRECEDES:
			case PRECEDING:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PRIVILEGES:
			case PRIVILEGE_CHECKS_USER:
			case PROCESS:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUARTER:
			case QUERY:
			case QUICK:
			case RANDOM:
			case READ_ONLY:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case REFERENCE:
			case RELAY:
			case RELAYLOG:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAY_THREAD:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPEATABLE:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case REQUIRE_ROW_FORMAT:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESUME:
			case RETAIN:
			case RETURNED_SQLSTATE:
			case RETURNING:
			case RETURNS:
			case REUSE:
			case REVERSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROUTINE:
			case ROW_COUNT:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SCHEMA_NAME:
			case SECOND:
			case SECONDARY:
			case SECONDARY_ENGINE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SECONDARY_LOAD:
			case SECONDARY_UNLOAD:
			case SECURITY:
			case SERIAL:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHUTDOWN:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_CACHE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case SQL_TSI_DAY:
			case SQL_TSI_HOUR:
			case SQL_TSI_MINUTE:
			case SQL_TSI_MONTH:
			case SQL_TSI_QUARTER:
			case SQL_TSI_SECOND:
			case SQL_TSI_WEEK:
			case SQL_TSI_YEAR:
			case SRID:
			case STACKED:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUPER:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLES:
			case TABLESPACE:
			case TABLE_CHECKSUM:
			case TABLE_NAME:
			case TEMPORARY:
			case TEMPTABLE:
			case TEXT:
			case THAN:
			case THREAD_PRIORITY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TLS:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNICODE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USER_RESOURCES:
			case USE_FRM:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VCPU:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WEEK:
			case WEIGHT_STRING:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XID:
			case XML:
			case YEAR:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1582);
				identifier();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1583);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1586);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNamesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public TableNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterTableNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitTableNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitTableNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNamesContext tableNames() throws RecognitionException {
		TableNamesContext _localctx = new TableNamesContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_tableNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(1588);
				match(LP_);
				}
			}

			setState(1591);
			tableName();
			setState(1596);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1592);
				match(COMMA_);
				setState(1593);
				tableName();
				}
				}
				setState(1598);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RP_) {
				{
				setState(1599);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNamesContext extends ParserRuleContext {
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public ColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNamesContext columnNames() throws RecognitionException {
		ColumnNamesContext _localctx = new ColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_columnNames);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(1602);
				match(LP_);
				}
			}

			setState(1605);
			columnName();
			setState(1610);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,153,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1606);
					match(COMMA_);
					setState(1607);
					columnName();
					}
					} 
				}
				setState(1612);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,153,_ctx);
			}
			setState(1614);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				setState(1613);
				match(RP_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupNameContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DALStatementParser.IDENTIFIER_, 0); }
		public GroupNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterGroupName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitGroupName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitGroupName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupNameContext groupName() throws RecognitionException {
		GroupNameContext _localctx = new GroupNameContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_groupName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1616);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RoutineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterRoutineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitRoutineName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitRoutineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineNameContext routineName() throws RecognitionException {
		RoutineNameContext _localctx = new RoutineNameContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_routineName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1618);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShardLibraryNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public ShardLibraryNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shardLibraryName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShardLibraryName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShardLibraryName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShardLibraryName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShardLibraryNameContext shardLibraryName() throws RecognitionException {
		ShardLibraryNameContext _localctx = new ShardLibraryNameContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_shardLibraryName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1620);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComponentNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public ComponentNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_componentName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterComponentName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitComponentName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitComponentName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComponentNameContext componentName() throws RecognitionException {
		ComponentNameContext _localctx = new ComponentNameContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_componentName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1622);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PluginNameContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DALStatementParser.IDENTIFIER_, 0); }
		public PluginNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pluginName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterPluginName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitPluginName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitPluginName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PluginNameContext pluginName() throws RecognitionException {
		PluginNameContext _localctx = new PluginNameContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_pluginName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1624);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public HostNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hostName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterHostName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitHostName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitHostName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HostNameContext hostName() throws RecognitionException {
		HostNameContext _localctx = new HostNameContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_hostName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1626);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PortContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DALStatementParser.NUMBER_, 0); }
		public PortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_port; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterPort(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitPort(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitPort(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PortContext port() throws RecognitionException {
		PortContext _localctx = new PortContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_port);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1628);
			match(NUMBER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloneInstanceContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode AT_() { return getToken(DALStatementParser.AT_, 0); }
		public HostNameContext hostName() {
			return getRuleContext(HostNameContext.class,0);
		}
		public TerminalNode COLON_() { return getToken(DALStatementParser.COLON_, 0); }
		public PortContext port() {
			return getRuleContext(PortContext.class,0);
		}
		public CloneInstanceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloneInstance; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCloneInstance(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCloneInstance(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCloneInstance(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloneInstanceContext cloneInstance() throws RecognitionException {
		CloneInstanceContext _localctx = new CloneInstanceContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_cloneInstance);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1630);
			userName();
			setState(1631);
			match(AT_);
			setState(1632);
			hostName();
			setState(1633);
			match(COLON_);
			setState(1634);
			port();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloneDirContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DALStatementParser.IDENTIFIER_, 0); }
		public CloneDirContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cloneDir; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCloneDir(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCloneDir(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCloneDir(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloneDirContext cloneDir() throws RecognitionException {
		CloneDirContext _localctx = new CloneDirContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_cloneDir);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1636);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ChannelNameContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DALStatementParser.IDENTIFIER_, 0); }
		public ChannelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_channelName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterChannelName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitChannelName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitChannelName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ChannelNameContext channelName() throws RecognitionException {
		ChannelNameContext _localctx = new ChannelNameContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_channelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1638);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LogNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterLogName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitLogName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitLogName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogNameContext logName() throws RecognitionException {
		LogNameContext _localctx = new LogNameContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_logName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1640);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleNameContext extends ParserRuleContext {
		public TerminalNode AT_() { return getToken(DALStatementParser.AT_, 0); }
		public List<TerminalNode> STRING_() { return getTokens(DALStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DALStatementParser.STRING_, i);
		}
		public List<TerminalNode> IDENTIFIER_() { return getTokens(DALStatementParser.IDENTIFIER_); }
		public TerminalNode IDENTIFIER_(int i) {
			return getToken(DALStatementParser.IDENTIFIER_, i);
		}
		public RoleNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterRoleName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitRoleName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitRoleName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleNameContext roleName() throws RecognitionException {
		RoleNameContext _localctx = new RoleNameContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_roleName);
		int _la;
		try {
			setState(1647);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1642);
				_la = _input.LA(1);
				if ( !(_la==IDENTIFIER_ || _la==STRING_) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1643);
				match(AT_);
				{
				setState(1644);
				match(STRING_);
				setState(1645);
				match(IDENTIFIER_);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1646);
				match(IDENTIFIER_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DALStatementParser.IDENTIFIER_, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterEngineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitEngineName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_engineName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1649);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerNameContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DALStatementParser.IDENTIFIER_, 0); }
		public TriggerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterTriggerName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitTriggerName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitTriggerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerNameContext triggerName() throws RecognitionException {
		TriggerNameContext _localctx = new TriggerNameContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_triggerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1651);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerTimeContext extends ParserRuleContext {
		public TerminalNode BEFORE() { return getToken(DALStatementParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(DALStatementParser.AFTER, 0); }
		public TriggerTimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerTime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterTriggerTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitTriggerTime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitTriggerTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerTimeContext triggerTime() throws RecognitionException {
		TriggerTimeContext _localctx = new TriggerTimeContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_triggerTime);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1653);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserOrRoleContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public RoleNameContext roleName() {
			return getRuleContext(RoleNameContext.class,0);
		}
		public UserOrRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userOrRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterUserOrRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitUserOrRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitUserOrRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserOrRoleContext userOrRole() throws RecognitionException {
		UserOrRoleContext _localctx = new UserOrRoleContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_userOrRole);
		try {
			setState(1657);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1655);
				userName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1656);
				roleName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionNameContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DALStatementParser.IDENTIFIER_, 0); }
		public PartitionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterPartitionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitPartitionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitPartitionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionNameContext partitionName() throws RecognitionException {
		PartitionNameContext _localctx = new PartitionNameContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_partitionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1659);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerEventContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DALStatementParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(DALStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(DALStatementParser.DELETE, 0); }
		public TriggerEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterTriggerEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitTriggerEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitTriggerEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerEventContext triggerEvent() throws RecognitionException {
		TriggerEventContext _localctx = new TriggerEventContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_triggerEvent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1661);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerOrderContext extends ParserRuleContext {
		public TriggerNameContext triggerName() {
			return getRuleContext(TriggerNameContext.class,0);
		}
		public TerminalNode FOLLOWS() { return getToken(DALStatementParser.FOLLOWS, 0); }
		public TerminalNode PRECEDES() { return getToken(DALStatementParser.PRECEDES, 0); }
		public TriggerOrderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerOrder; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterTriggerOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitTriggerOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitTriggerOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerOrderContext triggerOrder() throws RecognitionException {
		TriggerOrderContext _localctx = new TriggerOrderContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_triggerOrder);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1663);
			_la = _input.LA(1);
			if ( !(_la==FOLLOWS || _la==PRECEDES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1664);
			triggerName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprContext extends ParserRuleContext {
		public BooleanPrimaryContext booleanPrimary() {
			return getRuleContext(BooleanPrimaryContext.class,0);
		}
		public NotOperator_Context notOperator_() {
			return getRuleContext(NotOperator_Context.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public TerminalNode XOR() { return getToken(DALStatementParser.XOR, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprContext expr() throws RecognitionException {
		return expr(0);
	}

	private ExprContext expr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 286;
		enterRecursionRule(_localctx, 286, RULE_expr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1671);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				{
				setState(1667);
				booleanPrimary(0);
				}
				break;
			case 2:
				{
				setState(1668);
				notOperator_();
				setState(1669);
				expr(1);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(1682);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,159,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1680);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(1673);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1674);
						logicalOperator();
						setState(1675);
						expr(4);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expr);
						setState(1677);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1678);
						match(XOR);
						setState(1679);
						expr(3);
						}
						break;
					}
					} 
				}
				setState(1684);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,159,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(DALStatementParser.OR, 0); }
		public TerminalNode OR_() { return getToken(DALStatementParser.OR_, 0); }
		public TerminalNode AND() { return getToken(DALStatementParser.AND, 0); }
		public TerminalNode AND_() { return getToken(DALStatementParser.AND_, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_logicalOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1685);
			_la = _input.LA(1);
			if ( !(_la==AND_ || _la==OR_ || _la==AND || _la==OR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotOperator_Context extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(DALStatementParser.NOT, 0); }
		public TerminalNode NOT_() { return getToken(DALStatementParser.NOT_, 0); }
		public NotOperator_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notOperator_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterNotOperator_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitNotOperator_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitNotOperator_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotOperator_Context notOperator_() throws RecognitionException {
		NotOperator_Context _localctx = new NotOperator_Context(_ctx, getState());
		enterRule(_localctx, 290, RULE_notOperator_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1687);
			_la = _input.LA(1);
			if ( !(_la==NOT_ || _la==NOT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanPrimaryContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public BooleanPrimaryContext booleanPrimary() {
			return getRuleContext(BooleanPrimaryContext.class,0);
		}
		public TerminalNode IS() { return getToken(DALStatementParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(DALStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(DALStatementParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(DALStatementParser.UNKNOWN, 0); }
		public TerminalNode NULL() { return getToken(DALStatementParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(DALStatementParser.NOT, 0); }
		public TerminalNode SAFE_EQ_() { return getToken(DALStatementParser.SAFE_EQ_, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DALStatementParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(DALStatementParser.ANY, 0); }
		public BooleanPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterBooleanPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitBooleanPrimary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitBooleanPrimary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanPrimaryContext booleanPrimary() throws RecognitionException {
		return booleanPrimary(0);
	}

	private BooleanPrimaryContext booleanPrimary(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BooleanPrimaryContext _localctx = new BooleanPrimaryContext(_ctx, _parentState);
		BooleanPrimaryContext _prevctx = _localctx;
		int _startState = 292;
		enterRecursionRule(_localctx, 292, RULE_booleanPrimary, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1690);
			predicate();
			}
			_ctx.stop = _input.LT(-1);
			setState(1712);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,162,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1710);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,161,_ctx) ) {
					case 1:
						{
						_localctx = new BooleanPrimaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_booleanPrimary);
						setState(1692);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(1693);
						match(IS);
						setState(1695);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(1694);
							match(NOT);
							}
						}

						setState(1697);
						_la = _input.LA(1);
						if ( !(_la==FALSE || _la==NULL || _la==TRUE || _la==UNKNOWN) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						_localctx = new BooleanPrimaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_booleanPrimary);
						setState(1698);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(1699);
						match(SAFE_EQ_);
						setState(1700);
						predicate();
						}
						break;
					case 3:
						{
						_localctx = new BooleanPrimaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_booleanPrimary);
						setState(1701);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1702);
						comparisonOperator();
						setState(1703);
						predicate();
						}
						break;
					case 4:
						{
						_localctx = new BooleanPrimaryContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_booleanPrimary);
						setState(1705);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1706);
						comparisonOperator();
						setState(1707);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(1708);
						subquery();
						}
						break;
					}
					} 
				}
				setState(1714);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,162,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ_() { return getToken(DALStatementParser.EQ_, 0); }
		public TerminalNode GTE_() { return getToken(DALStatementParser.GTE_, 0); }
		public TerminalNode GT_() { return getToken(DALStatementParser.GT_, 0); }
		public TerminalNode LTE_() { return getToken(DALStatementParser.LTE_, 0); }
		public TerminalNode LT_() { return getToken(DALStatementParser.LT_, 0); }
		public TerminalNode NEQ_() { return getToken(DALStatementParser.NEQ_, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1715);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public List<BitExprContext> bitExpr() {
			return getRuleContexts(BitExprContext.class);
		}
		public BitExprContext bitExpr(int i) {
			return getRuleContext(BitExprContext.class,i);
		}
		public TerminalNode IN() { return getToken(DALStatementParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode NOT() { return getToken(DALStatementParser.NOT, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public TerminalNode BETWEEN() { return getToken(DALStatementParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DALStatementParser.AND, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode SOUNDS() { return getToken(DALStatementParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(DALStatementParser.LIKE, 0); }
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public TerminalNode ESCAPE() { return getToken(DALStatementParser.ESCAPE, 0); }
		public TerminalNode REGEXP() { return getToken(DALStatementParser.REGEXP, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_predicate);
		int _la;
		try {
			setState(1772);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1717);
				bitExpr(0);
				setState(1719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1718);
					match(NOT);
					}
				}

				setState(1721);
				match(IN);
				setState(1722);
				subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1724);
				bitExpr(0);
				setState(1726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1725);
					match(NOT);
					}
				}

				setState(1728);
				match(IN);
				setState(1729);
				match(LP_);
				setState(1730);
				expr(0);
				setState(1735);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1731);
					match(COMMA_);
					setState(1732);
					expr(0);
					}
					}
					setState(1737);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1738);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1740);
				bitExpr(0);
				setState(1742);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1741);
					match(NOT);
					}
				}

				setState(1744);
				match(BETWEEN);
				setState(1745);
				bitExpr(0);
				setState(1746);
				match(AND);
				setState(1747);
				predicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1749);
				bitExpr(0);
				setState(1750);
				match(SOUNDS);
				setState(1751);
				match(LIKE);
				setState(1752);
				bitExpr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1754);
				bitExpr(0);
				setState(1756);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1755);
					match(NOT);
					}
				}

				setState(1758);
				match(LIKE);
				setState(1759);
				simpleExpr(0);
				setState(1762);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
				case 1:
					{
					setState(1760);
					match(ESCAPE);
					setState(1761);
					simpleExpr(0);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1764);
				bitExpr(0);
				setState(1766);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1765);
					match(NOT);
					}
				}

				setState(1768);
				match(REGEXP);
				setState(1769);
				bitExpr(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1771);
				bitExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitExprContext extends ParserRuleContext {
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public List<BitExprContext> bitExpr() {
			return getRuleContexts(BitExprContext.class);
		}
		public BitExprContext bitExpr(int i) {
			return getRuleContext(BitExprContext.class,i);
		}
		public TerminalNode VERTICAL_BAR_() { return getToken(DALStatementParser.VERTICAL_BAR_, 0); }
		public TerminalNode AMPERSAND_() { return getToken(DALStatementParser.AMPERSAND_, 0); }
		public TerminalNode SIGNED_LEFT_SHIFT_() { return getToken(DALStatementParser.SIGNED_LEFT_SHIFT_, 0); }
		public TerminalNode SIGNED_RIGHT_SHIFT_() { return getToken(DALStatementParser.SIGNED_RIGHT_SHIFT_, 0); }
		public TerminalNode PLUS_() { return getToken(DALStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(DALStatementParser.MINUS_, 0); }
		public TerminalNode ASTERISK_() { return getToken(DALStatementParser.ASTERISK_, 0); }
		public TerminalNode SLASH_() { return getToken(DALStatementParser.SLASH_, 0); }
		public TerminalNode DIV() { return getToken(DALStatementParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(DALStatementParser.MOD, 0); }
		public TerminalNode MOD_() { return getToken(DALStatementParser.MOD_, 0); }
		public TerminalNode CARET_() { return getToken(DALStatementParser.CARET_, 0); }
		public IntervalExpressionContext intervalExpression() {
			return getRuleContext(IntervalExpressionContext.class,0);
		}
		public BitExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterBitExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitBitExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitBitExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitExprContext bitExpr() throws RecognitionException {
		return bitExpr(0);
	}

	private BitExprContext bitExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BitExprContext _localctx = new BitExprContext(_ctx, _parentState);
		BitExprContext _prevctx = _localctx;
		int _startState = 298;
		enterRecursionRule(_localctx, 298, RULE_bitExpr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1775);
			simpleExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(1821);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,172,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1819);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
					case 1:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1777);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(1778);
						match(VERTICAL_BAR_);
						setState(1779);
						bitExpr(16);
						}
						break;
					case 2:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1780);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(1781);
						match(AMPERSAND_);
						setState(1782);
						bitExpr(15);
						}
						break;
					case 3:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1783);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(1784);
						match(SIGNED_LEFT_SHIFT_);
						setState(1785);
						bitExpr(14);
						}
						break;
					case 4:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1786);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(1787);
						match(SIGNED_RIGHT_SHIFT_);
						setState(1788);
						bitExpr(13);
						}
						break;
					case 5:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1789);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(1790);
						match(PLUS_);
						setState(1791);
						bitExpr(12);
						}
						break;
					case 6:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1792);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(1793);
						match(MINUS_);
						setState(1794);
						bitExpr(11);
						}
						break;
					case 7:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1795);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(1796);
						match(ASTERISK_);
						setState(1797);
						bitExpr(10);
						}
						break;
					case 8:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1798);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(1799);
						match(SLASH_);
						setState(1800);
						bitExpr(9);
						}
						break;
					case 9:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1801);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(1802);
						match(DIV);
						setState(1803);
						bitExpr(8);
						}
						break;
					case 10:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1804);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(1805);
						match(MOD);
						setState(1806);
						bitExpr(7);
						}
						break;
					case 11:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1807);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(1808);
						match(MOD_);
						setState(1809);
						bitExpr(6);
						}
						break;
					case 12:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1810);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(1811);
						match(CARET_);
						setState(1812);
						bitExpr(5);
						}
						break;
					case 13:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1813);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(1814);
						match(PLUS_);
						setState(1815);
						intervalExpression();
						}
						break;
					case 14:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						setState(1816);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(1817);
						match(MINUS_);
						setState(1818);
						intervalExpression();
						}
						break;
					}
					} 
				}
				setState(1823);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,172,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SimpleExprContext extends ParserRuleContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public LiteralsContext literals() {
			return getRuleContext(LiteralsContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public List<SimpleExprContext> simpleExpr() {
			return getRuleContexts(SimpleExprContext.class);
		}
		public SimpleExprContext simpleExpr(int i) {
			return getRuleContext(SimpleExprContext.class,i);
		}
		public TerminalNode PLUS_() { return getToken(DALStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(DALStatementParser.MINUS_, 0); }
		public TerminalNode TILDE_() { return getToken(DALStatementParser.TILDE_, 0); }
		public NotOperator_Context notOperator_() {
			return getRuleContext(NotOperator_Context.class,0);
		}
		public TerminalNode BINARY() { return getToken(DALStatementParser.BINARY, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public TerminalNode ROW() { return getToken(DALStatementParser.ROW, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(DALStatementParser.EXISTS, 0); }
		public TerminalNode LBE_() { return getToken(DALStatementParser.LBE_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RBE_() { return getToken(DALStatementParser.RBE_, 0); }
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public TerminalNode JSON_SEPARATOR() { return getToken(DALStatementParser.JSON_SEPARATOR, 0); }
		public TerminalNode JSON_UNQUOTED_SEPARATOR() { return getToken(DALStatementParser.JSON_UNQUOTED_SEPARATOR, 0); }
		public MatchExpression_Context matchExpression_() {
			return getRuleContext(MatchExpression_Context.class,0);
		}
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public IntervalExpressionContext intervalExpression() {
			return getRuleContext(IntervalExpressionContext.class,0);
		}
		public TerminalNode OR_() { return getToken(DALStatementParser.OR_, 0); }
		public TerminalNode COLLATE() { return getToken(DALStatementParser.COLLATE, 0); }
		public SimpleExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSimpleExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSimpleExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSimpleExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleExprContext simpleExpr() throws RecognitionException {
		return simpleExpr(0);
	}

	private SimpleExprContext simpleExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SimpleExprContext _localctx = new SimpleExprContext(_ctx, _parentState);
		SimpleExprContext _prevctx = _localctx;
		int _startState = 300;
		enterRecursionRule(_localctx, 300, RULE_simpleExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				setState(1825);
				functionCall();
				}
				break;
			case 2:
				{
				setState(1826);
				parameterMarker();
				}
				break;
			case 3:
				{
				setState(1827);
				literals();
				}
				break;
			case 4:
				{
				setState(1828);
				columnName();
				}
				break;
			case 5:
				{
				setState(1829);
				variable();
				}
				break;
			case 6:
				{
				setState(1835);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PLUS_:
					{
					setState(1830);
					match(PLUS_);
					}
					break;
				case MINUS_:
					{
					setState(1831);
					match(MINUS_);
					}
					break;
				case TILDE_:
					{
					setState(1832);
					match(TILDE_);
					}
					break;
				case NOT_:
				case NOT:
					{
					setState(1833);
					notOperator_();
					}
					break;
				case BINARY:
					{
					setState(1834);
					match(BINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1837);
				simpleExpr(8);
				}
				break;
			case 7:
				{
				setState(1839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROW) {
					{
					setState(1838);
					match(ROW);
					}
				}

				setState(1841);
				match(LP_);
				setState(1842);
				expr(0);
				setState(1847);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1843);
					match(COMMA_);
					setState(1844);
					expr(0);
					}
					}
					setState(1849);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1850);
				match(RP_);
				}
				break;
			case 8:
				{
				setState(1853);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXISTS) {
					{
					setState(1852);
					match(EXISTS);
					}
				}

				setState(1855);
				subquery();
				}
				break;
			case 9:
				{
				setState(1856);
				match(LBE_);
				setState(1857);
				identifier();
				setState(1858);
				expr(0);
				setState(1859);
				match(RBE_);
				}
				break;
			case 10:
				{
				setState(1861);
				identifier();
				setState(1862);
				_la = _input.LA(1);
				if ( !(_la==JSON_SEPARATOR || _la==JSON_UNQUOTED_SEPARATOR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1863);
				match(STRING_);
				}
				break;
			case 11:
				{
				setState(1865);
				matchExpression_();
				}
				break;
			case 12:
				{
				setState(1866);
				caseExpression();
				}
				break;
			case 13:
				{
				setState(1867);
				intervalExpression();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(1881);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,180,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(1879);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
					case 1:
						{
						_localctx = new SimpleExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						setState(1870);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(1871);
						match(OR_);
						setState(1872);
						simpleExpr(10);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						setState(1873);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(1874);
						match(COLLATE);
						setState(1877);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING_:
							{
							setState(1875);
							match(STRING_);
							}
							break;
						case MAX:
						case MIN:
						case SUM:
						case COUNT:
						case GROUP_CONCAT:
						case CAST:
						case POSITION:
						case SUBSTRING:
						case SUBSTR:
						case EXTRACT:
						case TRIM:
						case LAST_DAY:
						case TRADITIONAL:
						case TREE:
						case MYSQL_ADMIN:
						case INSTANT:
						case INPLACE:
						case COPY:
						case UL_BINARY:
						case AUTOCOMMIT:
						case ACCOUNT:
						case ACTION:
						case ACTIVE:
						case ADMIN:
						case AFTER:
						case AGAINST:
						case AGGREGATE:
						case ALGORITHM:
						case ALWAYS:
						case ANY:
						case ASCII:
						case AT:
						case ATTRIBUTE:
						case AUTOEXTEND_SIZE:
						case AUTO_INCREMENT:
						case AVG:
						case AVG_ROW_LENGTH:
						case BACKUP:
						case BEGIN:
						case BINLOG:
						case BIT:
						case BLOCK:
						case BOOL:
						case BOOLEAN:
						case BTREE:
						case BUCKETS:
						case BYTE:
						case CACHE:
						case CASCADED:
						case CATALOG_NAME:
						case CHAIN:
						case CHANGED:
						case CHANNEL:
						case CHARSET:
						case CHECKSUM:
						case CIPHER:
						case CLASS_ORIGIN:
						case CLIENT:
						case CLONE:
						case CLOSE:
						case COALESCE:
						case CODE:
						case COLLATION:
						case COLUMNS:
						case COLUMN_FORMAT:
						case COMMENT:
						case COMMIT:
						case COMMITTED:
						case COMPACT:
						case COMPLETION:
						case COMPONENT:
						case COMPRESSED:
						case COMPRESSION:
						case CONCURRENT:
						case CONNECTION:
						case CONSISTENT:
						case CONSTRAINT_CATALOG:
						case CONSTRAINT_NAME:
						case CONSTRAINT_SCHEMA:
						case CONTAINS:
						case CONTEXT:
						case CPU:
						case CURRENT:
						case CURSOR_NAME:
						case DATA:
						case DATAFILE:
						case DATE:
						case DATETIME:
						case DAY:
						case DEALLOCATE:
						case DEFAULT_AUTH:
						case DEFINER:
						case DEFINITION:
						case DELAY_KEY_WRITE:
						case DESCRIPTION:
						case DIAGNOSTICS:
						case DIRECTORY:
						case DISABLE:
						case DISCARD:
						case DISK:
						case DO:
						case DUMPFILE:
						case DUPLICATE:
						case DYNAMIC:
						case ENABLE:
						case ENCRYPTION:
						case END:
						case ENDS:
						case ENFORCED:
						case ENGINE:
						case ENGINES:
						case ENGINE_ATTRIBUTE:
						case ENUM:
						case ERROR:
						case ERRORS:
						case ESCAPE:
						case EVENT:
						case EVENTS:
						case EVERY:
						case EXCHANGE:
						case EXCLUDE:
						case EXECUTE:
						case EXPANSION:
						case EXPIRE:
						case EXPORT:
						case EXTENDED:
						case EXTENT_SIZE:
						case FAILED_LOGIN_ATTEMPTS:
						case FAST:
						case FAULTS:
						case FIELDS:
						case FILE:
						case FILE_BLOCK_SIZE:
						case FILTER:
						case FIRST:
						case FIXED:
						case FLUSH:
						case FOLLOWING:
						case FOLLOWS:
						case FORMAT:
						case FULL:
						case GENERAL:
						case GEOMCOLLECTION:
						case GEOMETRY:
						case GEOMETRYCOLLECTION:
						case GET_FORMAT:
						case GET_MASTER_PUBLIC_KEY:
						case GLOBAL:
						case GRANTS:
						case GROUP_REPLICATION:
						case HANDLER:
						case HASH:
						case HELP:
						case HISTOGRAM:
						case HISTORY:
						case HOST:
						case HOSTS:
						case HOUR:
						case IDENTIFIED:
						case IGNORE_SERVER_IDS:
						case IMPORT:
						case INACTIVE:
						case INDEXES:
						case INITIAL_SIZE:
						case INSERT_METHOD:
						case INSTALL:
						case INSTANCE:
						case INVISIBLE:
						case INVOKER:
						case IO:
						case IO_THREAD:
						case IPC:
						case ISOLATION:
						case ISSUER:
						case JSON:
						case JSON_VALUE:
						case KEY_BLOCK_SIZE:
						case LANGUAGE:
						case LAST:
						case LEAVES:
						case LESS:
						case LEVEL:
						case LINESTRING:
						case LIST:
						case LOCAL:
						case LOCKED:
						case LOCKS:
						case LOGFILE:
						case LOGS:
						case MANAGED:
						case MASTER:
						case MASTER_AUTO_POSITION:
						case MASTER_COMPRESSION_ALGORITHMS:
						case MASTER_CONNECT_RETRY:
						case MASTER_DELAY:
						case MASTER_HEARTBEAT_PERIOD:
						case MASTER_HOST:
						case MASTER_LOG_FILE:
						case MASTER_LOG_POS:
						case MASTER_PASSWORD:
						case MASTER_PORT:
						case MASTER_PUBLIC_KEY_PATH:
						case MASTER_RETRY_COUNT:
						case MASTER_SERVER_ID:
						case MASTER_SSL:
						case MASTER_SSL_CA:
						case MASTER_SSL_CAPATH:
						case MASTER_SSL_CERT:
						case MASTER_SSL_CIPHER:
						case MASTER_SSL_CRL:
						case MASTER_SSL_CRLPATH:
						case MASTER_SSL_KEY:
						case MASTER_TLS_CIPHERSUITES:
						case MASTER_TLS_VERSION:
						case MASTER_USER:
						case MASTER_ZSTD_COMPRESSION_LEVEL:
						case MAX_CONNECTIONS_PER_HOUR:
						case MAX_QUERIES_PER_HOUR:
						case MAX_ROWS:
						case MAX_SIZE:
						case MAX_UPDATES_PER_HOUR:
						case MAX_USER_CONNECTIONS:
						case MEDIUM:
						case MEMORY:
						case MERGE:
						case MESSAGE_TEXT:
						case MICROSECOND:
						case MIGRATE:
						case MINUTE:
						case MIN_ROWS:
						case MODE:
						case MODIFY:
						case MONTH:
						case MULTILINESTRING:
						case MULTIPOINT:
						case MULTIPOLYGON:
						case MUTEX:
						case MYSQL_ERRNO:
						case NAME:
						case NAMES:
						case NATIONAL:
						case NCHAR:
						case NDB:
						case NDBCLUSTER:
						case NESTED:
						case NETWORK_NAMESPACE:
						case NEVER:
						case NEW:
						case NEXT:
						case NO:
						case NODEGROUP:
						case NONE:
						case NOWAIT:
						case NO_WAIT:
						case NULLS:
						case NUMBER:
						case NVARCHAR:
						case OFF:
						case OFFSET:
						case OJ:
						case OLD:
						case ONE:
						case ONLY:
						case OPEN:
						case OPTIONAL:
						case OPTIONS:
						case ORDINALITY:
						case OTHERS:
						case OWNER:
						case PACK_KEYS:
						case PAGE:
						case PARSER:
						case PARTIAL:
						case PARTITIONING:
						case PASSWORD:
						case PASSWORD_LOCK_TIME:
						case PATH:
						case PERSIST:
						case PERSIST_ONLY:
						case PHASE:
						case PLUGIN:
						case PLUGINS:
						case PLUGIN_DIR:
						case POINT:
						case POLYGON:
						case PORT:
						case PRECEDES:
						case PRECEDING:
						case PREPARE:
						case PRESERVE:
						case PREV:
						case PRIVILEGES:
						case PRIVILEGE_CHECKS_USER:
						case PROCESS:
						case PROCESSLIST:
						case PROFILE:
						case PROFILES:
						case PROXY:
						case QUARTER:
						case QUERY:
						case QUICK:
						case RANDOM:
						case READ_ONLY:
						case REBUILD:
						case RECOVER:
						case REDO_BUFFER_SIZE:
						case REDUNDANT:
						case REFERENCE:
						case RELAY:
						case RELAYLOG:
						case RELAY_LOG_FILE:
						case RELAY_LOG_POS:
						case RELAY_THREAD:
						case RELOAD:
						case REMOVE:
						case REORGANIZE:
						case REPAIR:
						case REPEATABLE:
						case REPLICATE_DO_DB:
						case REPLICATE_DO_TABLE:
						case REPLICATE_IGNORE_DB:
						case REPLICATE_IGNORE_TABLE:
						case REPLICATE_REWRITE_DB:
						case REPLICATE_WILD_DO_TABLE:
						case REPLICATE_WILD_IGNORE_TABLE:
						case REPLICATION:
						case REQUIRE_ROW_FORMAT:
						case RESET:
						case RESOURCE:
						case RESPECT:
						case RESTART:
						case RESTORE:
						case RESUME:
						case RETAIN:
						case RETURNED_SQLSTATE:
						case RETURNING:
						case RETURNS:
						case REUSE:
						case REVERSE:
						case ROLE:
						case ROLLBACK:
						case ROLLUP:
						case ROTATE:
						case ROUTINE:
						case ROW_COUNT:
						case ROW_FORMAT:
						case RTREE:
						case SAVEPOINT:
						case SCHEDULE:
						case SCHEMA_NAME:
						case SECOND:
						case SECONDARY:
						case SECONDARY_ENGINE:
						case SECONDARY_ENGINE_ATTRIBUTE:
						case SECONDARY_LOAD:
						case SECONDARY_UNLOAD:
						case SECURITY:
						case SERIAL:
						case SERIALIZABLE:
						case SERVER:
						case SESSION:
						case SHARE:
						case SHUTDOWN:
						case SIGNED:
						case SIMPLE:
						case SLAVE:
						case SLOW:
						case SNAPSHOT:
						case SOCKET:
						case SOME:
						case SONAME:
						case SOUNDS:
						case SOURCE:
						case SQL_CACHE:
						case SQL_AFTER_GTIDS:
						case SQL_AFTER_MTS_GAPS:
						case SQL_BEFORE_GTIDS:
						case SQL_BUFFER_RESULT:
						case SQL_NO_CACHE:
						case SQL_THREAD:
						case SQL_TSI_DAY:
						case SQL_TSI_HOUR:
						case SQL_TSI_MINUTE:
						case SQL_TSI_MONTH:
						case SQL_TSI_QUARTER:
						case SQL_TSI_SECOND:
						case SQL_TSI_WEEK:
						case SQL_TSI_YEAR:
						case SRID:
						case STACKED:
						case START:
						case STARTS:
						case STATS_AUTO_RECALC:
						case STATS_PERSISTENT:
						case STATS_SAMPLE_PAGES:
						case STATUS:
						case STOP:
						case STORAGE:
						case STREAM:
						case STRING:
						case SUBCLASS_ORIGIN:
						case SUBJECT:
						case SUBPARTITION:
						case SUBPARTITIONS:
						case SUPER:
						case SUSPEND:
						case SWAPS:
						case SWITCHES:
						case TABLES:
						case TABLESPACE:
						case TABLE_CHECKSUM:
						case TABLE_NAME:
						case TEMPORARY:
						case TEMPTABLE:
						case TEXT:
						case THAN:
						case THREAD_PRIORITY:
						case TIES:
						case TIME:
						case TIMESTAMP:
						case TIMESTAMPADD:
						case TIMESTAMPDIFF:
						case TLS:
						case TRANSACTION:
						case TRIGGERS:
						case TRUNCATE:
						case TYPE:
						case TYPES:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNDEFINED:
						case UNDOFILE:
						case UNDO_BUFFER_SIZE:
						case UNICODE:
						case UNINSTALL:
						case UNKNOWN:
						case UNTIL:
						case UPGRADE:
						case USER:
						case USER_RESOURCES:
						case USE_FRM:
						case VALIDATION:
						case VALUE:
						case VARIABLES:
						case VCPU:
						case VIEW:
						case VISIBLE:
						case WAIT:
						case WARNINGS:
						case WEEK:
						case WEIGHT_STRING:
						case WITHOUT:
						case WORK:
						case WRAPPER:
						case X509:
						case XA:
						case XID:
						case XML:
						case YEAR:
						case IDENTIFIER_:
							{
							setState(1876);
							identifier();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					} 
				}
				setState(1883);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,180,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public AggregationFunctionContext aggregationFunction() {
			return getRuleContext(AggregationFunctionContext.class,0);
		}
		public SpecialFunctionContext specialFunction() {
			return getRuleContext(SpecialFunctionContext.class,0);
		}
		public RegularFunctionContext regularFunction() {
			return getRuleContext(RegularFunctionContext.class,0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_functionCall);
		try {
			setState(1887);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1884);
				aggregationFunction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1885);
				specialFunction();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1886);
				regularFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregationFunctionContext extends ParserRuleContext {
		public AggregationFunctionNameContext aggregationFunctionName() {
			return getRuleContext(AggregationFunctionNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public DistinctContext distinct() {
			return getRuleContext(DistinctContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ASTERISK_() { return getToken(DALStatementParser.ASTERISK_, 0); }
		public OverClause_Context overClause_() {
			return getRuleContext(OverClause_Context.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public AggregationFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregationFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterAggregationFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitAggregationFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitAggregationFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregationFunctionContext aggregationFunction() throws RecognitionException {
		AggregationFunctionContext _localctx = new AggregationFunctionContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_aggregationFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1889);
			aggregationFunctionName();
			setState(1890);
			match(LP_);
			setState(1892);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISTINCT) {
				{
				setState(1891);
				distinct();
				}
			}

			setState(1903);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case NOT_:
			case TILDE_:
			case PLUS_:
			case MINUS_:
			case DOT_:
			case LP_:
			case LBE_:
			case QUESTION_:
			case AT_:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case GROUP_CONCAT:
			case CAST:
			case POSITION:
			case SUBSTRING:
			case SUBSTR:
			case EXTRACT:
			case TRIM:
			case LAST_DAY:
			case TRADITIONAL:
			case TREE:
			case MYSQL_ADMIN:
			case INSTANT:
			case INPLACE:
			case COPY:
			case UL_BINARY:
			case AUTOCOMMIT:
			case ACCOUNT:
			case ACTION:
			case ACTIVE:
			case ADMIN:
			case AFTER:
			case AGAINST:
			case AGGREGATE:
			case ALGORITHM:
			case ALWAYS:
			case ANY:
			case ASCII:
			case AT:
			case ATTRIBUTE:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG:
			case AVG_ROW_LENGTH:
			case BACKUP:
			case BEGIN:
			case BINARY:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case BUCKETS:
			case BYTE:
			case CACHE:
			case CASCADED:
			case CASE:
			case CATALOG_NAME:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHAR:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLONE:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLLATION:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETION:
			case COMPONENT:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONTAINS:
			case CONTEXT:
			case CONVERT:
			case CPU:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR_NAME:
			case DATA:
			case DATABASE:
			case DATAFILE:
			case DATE:
			case DATETIME:
			case DAY:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DEFINITION:
			case DELAY_KEY_WRITE:
			case DESCRIPTION:
			case DIAGNOSTICS:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENFORCED:
			case ENGINE:
			case ENGINES:
			case ENGINE_ATTRIBUTE:
			case ENUM:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXPANSION:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FALSE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWING:
			case FOLLOWS:
			case FORMAT:
			case FULL:
			case GENERAL:
			case GEOMCOLLECTION:
			case GEOMETRY:
			case GEOMETRYCOLLECTION:
			case GET_FORMAT:
			case GET_MASTER_PUBLIC_KEY:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTOGRAM:
			case HISTORY:
			case HOST:
			case HOSTS:
			case HOUR:
			case IDENTIFIED:
			case IF:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INACTIVE:
			case INDEXES:
			case INITIAL_SIZE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INTERVAL:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case JSON_VALUE:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LEFT:
			case LESS:
			case LEVEL:
			case LINESTRING:
			case LIST:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOCKS:
			case LOGFILE:
			case LOGS:
			case MANAGED:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_COMPRESSION_ALGORITHMS:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_PUBLIC_KEY_PATH:
			case MASTER_RETRY_COUNT:
			case MASTER_SERVER_ID:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_CIPHERSUITES:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MASTER_ZSTD_COMPRESSION_LEVEL:
			case MATCH:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMORY:
			case MERGE:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MIGRATE:
			case MINUTE:
			case MIN_ROWS:
			case MOD:
			case MODE:
			case MODIFY:
			case MONTH:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case MUTEX:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NDB:
			case NDBCLUSTER:
			case NESTED:
			case NETWORK_NAMESPACE:
			case NEVER:
			case NEW:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case NOT:
			case NOWAIT:
			case NO_WAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NVARCHAR:
			case OFF:
			case OFFSET:
			case OJ:
			case OLD:
			case ONE:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PATH:
			case PERSIST:
			case PERSIST_ONLY:
			case PHASE:
			case PLUGIN:
			case PLUGINS:
			case PLUGIN_DIR:
			case POINT:
			case POLYGON:
			case PORT:
			case PRECEDES:
			case PRECEDING:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PRIVILEGES:
			case PRIVILEGE_CHECKS_USER:
			case PROCESS:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUARTER:
			case QUERY:
			case QUICK:
			case RANDOM:
			case READ_ONLY:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case REFERENCE:
			case RELAY:
			case RELAYLOG:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAY_THREAD:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPEATABLE:
			case REPLACE:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case REQUIRE_ROW_FORMAT:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESUME:
			case RETAIN:
			case RETURNED_SQLSTATE:
			case RETURNING:
			case RETURNS:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROUTINE:
			case ROW:
			case ROW_COUNT:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SCHEMA_NAME:
			case SECOND:
			case SECONDARY:
			case SECONDARY_ENGINE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SECONDARY_LOAD:
			case SECONDARY_UNLOAD:
			case SECURITY:
			case SERIAL:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHUTDOWN:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_CACHE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case SQL_TSI_DAY:
			case SQL_TSI_HOUR:
			case SQL_TSI_MINUTE:
			case SQL_TSI_MONTH:
			case SQL_TSI_QUARTER:
			case SQL_TSI_SECOND:
			case SQL_TSI_WEEK:
			case SQL_TSI_YEAR:
			case SRID:
			case STACKED:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUPER:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLES:
			case TABLESPACE:
			case TABLE_CHECKSUM:
			case TABLE_NAME:
			case TEMPORARY:
			case TEMPTABLE:
			case TEXT:
			case THAN:
			case THREAD_PRIORITY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TLS:
			case TRANSACTION:
			case TRIGGERS:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNICODE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USER_RESOURCES:
			case USE_FRM:
			case VALIDATION:
			case VALUE:
			case VALUES:
			case VARIABLES:
			case VCPU:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WEEK:
			case WEIGHT_STRING:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XID:
			case XML:
			case YEAR:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
			case HEX_DIGIT_:
			case BIT_NUM_:
				{
				setState(1894);
				expr(0);
				setState(1899);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1895);
					match(COMMA_);
					setState(1896);
					expr(0);
					}
					}
					setState(1901);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case ASTERISK_:
				{
				setState(1902);
				match(ASTERISK_);
				}
				break;
			case RP_:
				break;
			default:
				break;
			}
			setState(1905);
			match(RP_);
			setState(1907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				setState(1906);
				overClause_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregationFunctionNameContext extends ParserRuleContext {
		public TerminalNode MAX() { return getToken(DALStatementParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(DALStatementParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(DALStatementParser.SUM, 0); }
		public TerminalNode COUNT() { return getToken(DALStatementParser.COUNT, 0); }
		public TerminalNode AVG() { return getToken(DALStatementParser.AVG, 0); }
		public AggregationFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregationFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterAggregationFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitAggregationFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitAggregationFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregationFunctionNameContext aggregationFunctionName() throws RecognitionException {
		AggregationFunctionNameContext _localctx = new AggregationFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_aggregationFunctionName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1909);
			_la = _input.LA(1);
			if ( !(((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & ((1L << (MAX - 45)) | (1L << (MIN - 45)) | (1L << (SUM - 45)) | (1L << (COUNT - 45)) | (1L << (AVG - 45)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(DALStatementParser.DISTINCT, 0); }
		public DistinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterDistinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitDistinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitDistinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctContext distinct() throws RecognitionException {
		DistinctContext _localctx = new DistinctContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_distinct);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1911);
			match(DISTINCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverClause_Context extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(DALStatementParser.OVER, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public WindowSpecification_Context windowSpecification_() {
			return getRuleContext(WindowSpecification_Context.class,0);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OverClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterOverClause_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitOverClause_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitOverClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClause_Context overClause_() throws RecognitionException {
		OverClause_Context _localctx = new OverClause_Context(_ctx, getState());
		enterRule(_localctx, 310, RULE_overClause_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1913);
			match(OVER);
			setState(1919);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				{
				setState(1914);
				match(LP_);
				setState(1915);
				windowSpecification_();
				setState(1916);
				match(RP_);
				}
				break;
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case GROUP_CONCAT:
			case CAST:
			case POSITION:
			case SUBSTRING:
			case SUBSTR:
			case EXTRACT:
			case TRIM:
			case LAST_DAY:
			case TRADITIONAL:
			case TREE:
			case MYSQL_ADMIN:
			case INSTANT:
			case INPLACE:
			case COPY:
			case UL_BINARY:
			case AUTOCOMMIT:
			case ACCOUNT:
			case ACTION:
			case ACTIVE:
			case ADMIN:
			case AFTER:
			case AGAINST:
			case AGGREGATE:
			case ALGORITHM:
			case ALWAYS:
			case ANY:
			case ASCII:
			case AT:
			case ATTRIBUTE:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG:
			case AVG_ROW_LENGTH:
			case BACKUP:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case BUCKETS:
			case BYTE:
			case CACHE:
			case CASCADED:
			case CATALOG_NAME:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLONE:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLLATION:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETION:
			case COMPONENT:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONTAINS:
			case CONTEXT:
			case CPU:
			case CURRENT:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DATE:
			case DATETIME:
			case DAY:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DEFINITION:
			case DELAY_KEY_WRITE:
			case DESCRIPTION:
			case DIAGNOSTICS:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENFORCED:
			case ENGINE:
			case ENGINES:
			case ENGINE_ATTRIBUTE:
			case ENUM:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUDE:
			case EXECUTE:
			case EXPANSION:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWING:
			case FOLLOWS:
			case FORMAT:
			case FULL:
			case GENERAL:
			case GEOMCOLLECTION:
			case GEOMETRY:
			case GEOMETRYCOLLECTION:
			case GET_FORMAT:
			case GET_MASTER_PUBLIC_KEY:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTOGRAM:
			case HISTORY:
			case HOST:
			case HOSTS:
			case HOUR:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INACTIVE:
			case INDEXES:
			case INITIAL_SIZE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case JSON_VALUE:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LINESTRING:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOCKS:
			case LOGFILE:
			case LOGS:
			case MANAGED:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_COMPRESSION_ALGORITHMS:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_PUBLIC_KEY_PATH:
			case MASTER_RETRY_COUNT:
			case MASTER_SERVER_ID:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_CIPHERSUITES:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MASTER_ZSTD_COMPRESSION_LEVEL:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMORY:
			case MERGE:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MIGRATE:
			case MINUTE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MONTH:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case MUTEX:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NDB:
			case NDBCLUSTER:
			case NESTED:
			case NETWORK_NAMESPACE:
			case NEVER:
			case NEW:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case NOWAIT:
			case NO_WAIT:
			case NULLS:
			case NUMBER:
			case NVARCHAR:
			case OFF:
			case OFFSET:
			case OJ:
			case OLD:
			case ONE:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PATH:
			case PERSIST:
			case PERSIST_ONLY:
			case PHASE:
			case PLUGIN:
			case PLUGINS:
			case PLUGIN_DIR:
			case POINT:
			case POLYGON:
			case PORT:
			case PRECEDES:
			case PRECEDING:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PRIVILEGES:
			case PRIVILEGE_CHECKS_USER:
			case PROCESS:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUARTER:
			case QUERY:
			case QUICK:
			case RANDOM:
			case READ_ONLY:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case REFERENCE:
			case RELAY:
			case RELAYLOG:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAY_THREAD:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPEATABLE:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case REQUIRE_ROW_FORMAT:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESUME:
			case RETAIN:
			case RETURNED_SQLSTATE:
			case RETURNING:
			case RETURNS:
			case REUSE:
			case REVERSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROUTINE:
			case ROW_COUNT:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SCHEMA_NAME:
			case SECOND:
			case SECONDARY:
			case SECONDARY_ENGINE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SECONDARY_LOAD:
			case SECONDARY_UNLOAD:
			case SECURITY:
			case SERIAL:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHUTDOWN:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_CACHE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case SQL_TSI_DAY:
			case SQL_TSI_HOUR:
			case SQL_TSI_MINUTE:
			case SQL_TSI_MONTH:
			case SQL_TSI_QUARTER:
			case SQL_TSI_SECOND:
			case SQL_TSI_WEEK:
			case SQL_TSI_YEAR:
			case SRID:
			case STACKED:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUPER:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLES:
			case TABLESPACE:
			case TABLE_CHECKSUM:
			case TABLE_NAME:
			case TEMPORARY:
			case TEMPTABLE:
			case TEXT:
			case THAN:
			case THREAD_PRIORITY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TLS:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNICODE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USER_RESOURCES:
			case USE_FRM:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VCPU:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WEEK:
			case WEIGHT_STRING:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XID:
			case XML:
			case YEAR:
			case IDENTIFIER_:
				{
				setState(1918);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecification_Context extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PartitionClause_Context partitionClause_() {
			return getRuleContext(PartitionClause_Context.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public FrameClause_Context frameClause_() {
			return getRuleContext(FrameClause_Context.class,0);
		}
		public WindowSpecification_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpecification_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterWindowSpecification_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitWindowSpecification_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitWindowSpecification_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecification_Context windowSpecification_() throws RecognitionException {
		WindowSpecification_Context _localctx = new WindowSpecification_Context(_ctx, getState());
		enterRule(_localctx, 312, RULE_windowSpecification_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1922);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MAX) | (1L << MIN) | (1L << SUM) | (1L << COUNT) | (1L << GROUP_CONCAT) | (1L << CAST) | (1L << POSITION) | (1L << SUBSTRING) | (1L << SUBSTR) | (1L << EXTRACT) | (1L << TRIM) | (1L << LAST_DAY) | (1L << TRADITIONAL) | (1L << TREE) | (1L << MYSQL_ADMIN) | (1L << INSTANT) | (1L << INPLACE) | (1L << COPY))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UL_BINARY - 64)) | (1L << (AUTOCOMMIT - 64)) | (1L << (ACCOUNT - 64)) | (1L << (ACTION - 64)) | (1L << (ACTIVE - 64)) | (1L << (ADMIN - 64)) | (1L << (AFTER - 64)) | (1L << (AGAINST - 64)) | (1L << (AGGREGATE - 64)) | (1L << (ALGORITHM - 64)) | (1L << (ALWAYS - 64)) | (1L << (ANY - 64)) | (1L << (ASCII - 64)) | (1L << (AT - 64)) | (1L << (ATTRIBUTE - 64)) | (1L << (AUTOEXTEND_SIZE - 64)) | (1L << (AUTO_INCREMENT - 64)) | (1L << (AVG - 64)) | (1L << (AVG_ROW_LENGTH - 64)) | (1L << (BACKUP - 64)) | (1L << (BEGIN - 64)) | (1L << (BINLOG - 64)) | (1L << (BIT - 64)) | (1L << (BLOCK - 64)) | (1L << (BOOL - 64)) | (1L << (BOOLEAN - 64)) | (1L << (BTREE - 64)) | (1L << (BUCKETS - 64)) | (1L << (BYTE - 64)) | (1L << (CACHE - 64)) | (1L << (CASCADED - 64)) | (1L << (CATALOG_NAME - 64)) | (1L << (CHAIN - 64)) | (1L << (CHANGED - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHARSET - 64)) | (1L << (CHECKSUM - 64)) | (1L << (CIPHER - 64)) | (1L << (CLASS_ORIGIN - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CLIENT - 128)) | (1L << (CLONE - 128)) | (1L << (CLOSE - 128)) | (1L << (COALESCE - 128)) | (1L << (CODE - 128)) | (1L << (COLLATION - 128)) | (1L << (COLUMNS - 128)) | (1L << (COLUMN_FORMAT - 128)) | (1L << (COMMENT - 128)) | (1L << (COMMIT - 128)) | (1L << (COMMITTED - 128)) | (1L << (COMPACT - 128)) | (1L << (COMPLETION - 128)) | (1L << (COMPONENT - 128)) | (1L << (COMPRESSED - 128)) | (1L << (COMPRESSION - 128)) | (1L << (CONCURRENT - 128)) | (1L << (CONNECTION - 128)) | (1L << (CONSISTENT - 128)) | (1L << (CONSTRAINT_CATALOG - 128)) | (1L << (CONSTRAINT_NAME - 128)) | (1L << (CONSTRAINT_SCHEMA - 128)) | (1L << (CONTAINS - 128)) | (1L << (CONTEXT - 128)) | (1L << (CPU - 128)) | (1L << (CURRENT - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (DATA - 128)) | (1L << (DATAFILE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEFAULT_AUTH - 128)) | (1L << (DEFINER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY_KEY_WRITE - 128)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (DESCRIPTION - 196)) | (1L << (DIAGNOSTICS - 196)) | (1L << (DIRECTORY - 196)) | (1L << (DISABLE - 196)) | (1L << (DISCARD - 196)) | (1L << (DISK - 196)) | (1L << (DO - 196)) | (1L << (DUMPFILE - 196)) | (1L << (DUPLICATE - 196)) | (1L << (DYNAMIC - 196)) | (1L << (ENABLE - 196)) | (1L << (ENCRYPTION - 196)) | (1L << (END - 196)) | (1L << (ENDS - 196)) | (1L << (ENFORCED - 196)) | (1L << (ENGINE - 196)) | (1L << (ENGINES - 196)) | (1L << (ENGINE_ATTRIBUTE - 196)) | (1L << (ENUM - 196)) | (1L << (ERROR - 196)) | (1L << (ERRORS - 196)) | (1L << (ESCAPE - 196)) | (1L << (EVENT - 196)) | (1L << (EVENTS - 196)) | (1L << (EVERY - 196)) | (1L << (EXCHANGE - 196)) | (1L << (EXCLUDE - 196)) | (1L << (EXECUTE - 196)) | (1L << (EXPANSION - 196)) | (1L << (EXPIRE - 196)) | (1L << (EXPORT - 196)) | (1L << (EXTENDED - 196)) | (1L << (EXTENT_SIZE - 196)) | (1L << (FAILED_LOGIN_ATTEMPTS - 196)) | (1L << (FAST - 196)) | (1L << (FAULTS - 196)) | (1L << (FIELDS - 196)) | (1L << (FILE - 196)) | (1L << (FILE_BLOCK_SIZE - 196)) | (1L << (FILTER - 196)) | (1L << (FIRST - 196)) | (1L << (FIXED - 196)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (FLUSH - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FOLLOWS - 261)) | (1L << (FORMAT - 261)) | (1L << (FULL - 261)) | (1L << (GENERAL - 261)) | (1L << (GEOMCOLLECTION - 261)) | (1L << (GEOMETRY - 261)) | (1L << (GEOMETRYCOLLECTION - 261)) | (1L << (GET_FORMAT - 261)) | (1L << (GET_MASTER_PUBLIC_KEY - 261)) | (1L << (GLOBAL - 261)) | (1L << (GRANTS - 261)) | (1L << (GROUP_REPLICATION - 261)) | (1L << (HANDLER - 261)) | (1L << (HASH - 261)) | (1L << (HELP - 261)) | (1L << (HISTOGRAM - 261)) | (1L << (HISTORY - 261)) | (1L << (HOST - 261)) | (1L << (HOSTS - 261)) | (1L << (HOUR - 261)) | (1L << (IDENTIFIED - 261)) | (1L << (IGNORE_SERVER_IDS - 261)) | (1L << (IMPORT - 261)) | (1L << (INACTIVE - 261)) | (1L << (INDEXES - 261)) | (1L << (INITIAL_SIZE - 261)) | (1L << (INSERT_METHOD - 261)) | (1L << (INSTALL - 261)) | (1L << (INSTANCE - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (JSON_VALUE - 328)) | (1L << (KEY_BLOCK_SIZE - 328)) | (1L << (LANGUAGE - 328)) | (1L << (LAST - 328)) | (1L << (LEAVES - 328)) | (1L << (LESS - 328)) | (1L << (LEVEL - 328)) | (1L << (LINESTRING - 328)) | (1L << (LIST - 328)) | (1L << (LOCAL - 328)) | (1L << (LOCKED - 328)) | (1L << (LOCKS - 328)) | (1L << (LOGFILE - 328)) | (1L << (LOGS - 328)) | (1L << (MANAGED - 328)) | (1L << (MASTER - 328)) | (1L << (MASTER_AUTO_POSITION - 328)) | (1L << (MASTER_COMPRESSION_ALGORITHMS - 328)) | (1L << (MASTER_CONNECT_RETRY - 328)) | (1L << (MASTER_DELAY - 328)) | (1L << (MASTER_HEARTBEAT_PERIOD - 328)) | (1L << (MASTER_HOST - 328)) | (1L << (MASTER_LOG_FILE - 328)) | (1L << (MASTER_LOG_POS - 328)) | (1L << (MASTER_PASSWORD - 328)) | (1L << (MASTER_PORT - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (MASTER_PUBLIC_KEY_PATH - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SERVER_ID - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_CIPHERSUITES - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MEMORY - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MICROSECOND - 392)) | (1L << (MIGRATE - 392)) | (1L << (MINUTE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MONTH - 392)) | (1L << (MULTILINESTRING - 392)) | (1L << (MULTIPOINT - 392)) | (1L << (MULTIPOLYGON - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NATIONAL - 392)) | (1L << (NCHAR - 392)) | (1L << (NDB - 392)) | (1L << (NDBCLUSTER - 392)) | (1L << (NESTED - 392)) | (1L << (NETWORK_NAMESPACE - 392)) | (1L << (NEVER - 392)) | (1L << (NEW - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (NOWAIT - 457)) | (1L << (NO_WAIT - 457)) | (1L << (NULLS - 457)) | (1L << (NUMBER - 457)) | (1L << (NVARCHAR - 457)) | (1L << (OFF - 457)) | (1L << (OFFSET - 457)) | (1L << (OJ - 457)) | (1L << (OLD - 457)) | (1L << (ONE - 457)) | (1L << (ONLY - 457)) | (1L << (OPEN - 457)) | (1L << (OPTIONAL - 457)) | (1L << (OPTIONS - 457)) | (1L << (ORDINALITY - 457)) | (1L << (OTHERS - 457)) | (1L << (OWNER - 457)) | (1L << (PACK_KEYS - 457)) | (1L << (PAGE - 457)) | (1L << (PARSER - 457)) | (1L << (PARTIAL - 457)) | (1L << (PARTITIONING - 457)) | (1L << (PASSWORD - 457)) | (1L << (PASSWORD_LOCK_TIME - 457)) | (1L << (PATH - 457)) | (1L << (PERSIST - 457)) | (1L << (PERSIST_ONLY - 457)) | (1L << (PHASE - 457)) | (1L << (PLUGIN - 457)) | (1L << (PLUGINS - 457)) | (1L << (PLUGIN_DIR - 457)) | (1L << (POINT - 457)) | (1L << (POLYGON - 457)) | (1L << (PORT - 457)) | (1L << (PRECEDES - 457)) | (1L << (PRECEDING - 457)) | (1L << (PREPARE - 457)) | (1L << (PRESERVE - 457)) | (1L << (PREV - 457)) | (1L << (PRIVILEGES - 457)) | (1L << (PRIVILEGE_CHECKS_USER - 457)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (PROCESS - 522)) | (1L << (PROCESSLIST - 522)) | (1L << (PROFILE - 522)) | (1L << (PROFILES - 522)) | (1L << (PROXY - 522)) | (1L << (QUARTER - 522)) | (1L << (QUERY - 522)) | (1L << (QUICK - 522)) | (1L << (RANDOM - 522)) | (1L << (READ_ONLY - 522)) | (1L << (REBUILD - 522)) | (1L << (RECOVER - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (REDUNDANT - 522)) | (1L << (REFERENCE - 522)) | (1L << (RELAY - 522)) | (1L << (RELAYLOG - 522)) | (1L << (RELAY_LOG_FILE - 522)) | (1L << (RELAY_LOG_POS - 522)) | (1L << (RELAY_THREAD - 522)) | (1L << (RELOAD - 522)) | (1L << (REMOVE - 522)) | (1L << (REORGANIZE - 522)) | (1L << (REPAIR - 522)) | (1L << (REPEATABLE - 522)) | (1L << (REPLICATE_DO_DB - 522)) | (1L << (REPLICATE_DO_TABLE - 522)) | (1L << (REPLICATE_IGNORE_DB - 522)) | (1L << (REPLICATE_IGNORE_TABLE - 522)) | (1L << (REPLICATE_REWRITE_DB - 522)) | (1L << (REPLICATE_WILD_DO_TABLE - 522)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 522)) | (1L << (REPLICATION - 522)) | (1L << (REQUIRE_ROW_FORMAT - 522)) | (1L << (RESET - 522)) | (1L << (RESOURCE - 522)) | (1L << (RESPECT - 522)) | (1L << (RESTART - 522)) | (1L << (RESTORE - 522)) | (1L << (RESUME - 522)) | (1L << (RETAIN - 522)) | (1L << (RETURNED_SQLSTATE - 522)) | (1L << (RETURNING - 522)) | (1L << (RETURNS - 522)) | (1L << (REUSE - 522)) | (1L << (REVERSE - 522)))) != 0) || ((((_la - 589)) & ~0x3f) == 0 && ((1L << (_la - 589)) & ((1L << (ROLE - 589)) | (1L << (ROLLBACK - 589)) | (1L << (ROLLUP - 589)) | (1L << (ROTATE - 589)) | (1L << (ROUTINE - 589)) | (1L << (ROW_COUNT - 589)) | (1L << (ROW_FORMAT - 589)) | (1L << (RTREE - 589)) | (1L << (SAVEPOINT - 589)) | (1L << (SCHEDULE - 589)) | (1L << (SCHEMA_NAME - 589)) | (1L << (SECOND - 589)) | (1L << (SECONDARY - 589)) | (1L << (SECONDARY_ENGINE - 589)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 589)) | (1L << (SECONDARY_LOAD - 589)) | (1L << (SECONDARY_UNLOAD - 589)) | (1L << (SECURITY - 589)) | (1L << (SERIAL - 589)) | (1L << (SERIALIZABLE - 589)) | (1L << (SERVER - 589)) | (1L << (SESSION - 589)) | (1L << (SHARE - 589)) | (1L << (SHUTDOWN - 589)) | (1L << (SIGNED - 589)) | (1L << (SIMPLE - 589)) | (1L << (SLAVE - 589)) | (1L << (SLOW - 589)) | (1L << (SNAPSHOT - 589)) | (1L << (SOCKET - 589)) | (1L << (SOME - 589)) | (1L << (SONAME - 589)) | (1L << (SOUNDS - 589)) | (1L << (SOURCE - 589)) | (1L << (SQL_CACHE - 589)) | (1L << (SQL_AFTER_GTIDS - 589)) | (1L << (SQL_AFTER_MTS_GAPS - 589)) | (1L << (SQL_BEFORE_GTIDS - 589)) | (1L << (SQL_BUFFER_RESULT - 589)) | (1L << (SQL_NO_CACHE - 589)) | (1L << (SQL_THREAD - 589)) | (1L << (SQL_TSI_DAY - 589)))) != 0) || ((((_la - 653)) & ~0x3f) == 0 && ((1L << (_la - 653)) & ((1L << (SQL_TSI_HOUR - 653)) | (1L << (SQL_TSI_MINUTE - 653)) | (1L << (SQL_TSI_MONTH - 653)) | (1L << (SQL_TSI_QUARTER - 653)) | (1L << (SQL_TSI_SECOND - 653)) | (1L << (SQL_TSI_WEEK - 653)) | (1L << (SQL_TSI_YEAR - 653)) | (1L << (SRID - 653)) | (1L << (STACKED - 653)) | (1L << (START - 653)) | (1L << (STARTS - 653)) | (1L << (STATS_AUTO_RECALC - 653)) | (1L << (STATS_PERSISTENT - 653)) | (1L << (STATS_SAMPLE_PAGES - 653)) | (1L << (STATUS - 653)) | (1L << (STOP - 653)) | (1L << (STORAGE - 653)) | (1L << (STREAM - 653)) | (1L << (STRING - 653)) | (1L << (SUBCLASS_ORIGIN - 653)) | (1L << (SUBJECT - 653)) | (1L << (SUBPARTITION - 653)) | (1L << (SUBPARTITIONS - 653)) | (1L << (SUPER - 653)) | (1L << (SUSPEND - 653)) | (1L << (SWAPS - 653)) | (1L << (SWITCHES - 653)) | (1L << (TABLES - 653)) | (1L << (TABLESPACE - 653)) | (1L << (TABLE_CHECKSUM - 653)) | (1L << (TABLE_NAME - 653)) | (1L << (TEMPORARY - 653)) | (1L << (TEMPTABLE - 653)) | (1L << (TEXT - 653)) | (1L << (THAN - 653)) | (1L << (THREAD_PRIORITY - 653)) | (1L << (TIES - 653)) | (1L << (TIME - 653)) | (1L << (TIMESTAMP - 653)) | (1L << (TIMESTAMPADD - 653)) | (1L << (TIMESTAMPDIFF - 653)) | (1L << (TLS - 653)) | (1L << (TRANSACTION - 653)) | (1L << (TRIGGERS - 653)) | (1L << (TRUNCATE - 653)) | (1L << (TYPE - 653)) | (1L << (TYPES - 653)) | (1L << (UNBOUNDED - 653)) | (1L << (UNCOMMITTED - 653)))) != 0) || ((((_la - 717)) & ~0x3f) == 0 && ((1L << (_la - 717)) & ((1L << (UNDEFINED - 717)) | (1L << (UNDOFILE - 717)) | (1L << (UNDO_BUFFER_SIZE - 717)) | (1L << (UNICODE - 717)) | (1L << (UNINSTALL - 717)) | (1L << (UNKNOWN - 717)) | (1L << (UNTIL - 717)) | (1L << (UPGRADE - 717)) | (1L << (USER - 717)) | (1L << (USER_RESOURCES - 717)) | (1L << (USE_FRM - 717)) | (1L << (VALIDATION - 717)) | (1L << (VALUE - 717)) | (1L << (VARIABLES - 717)) | (1L << (VCPU - 717)) | (1L << (VIEW - 717)) | (1L << (VISIBLE - 717)) | (1L << (WAIT - 717)) | (1L << (WARNINGS - 717)) | (1L << (WEEK - 717)) | (1L << (WEIGHT_STRING - 717)) | (1L << (WITHOUT - 717)) | (1L << (WORK - 717)) | (1L << (WRAPPER - 717)) | (1L << (X509 - 717)) | (1L << (XA - 717)) | (1L << (XID - 717)) | (1L << (XML - 717)) | (1L << (YEAR - 717)) | (1L << (IDENTIFIER_ - 717)))) != 0)) {
				{
				setState(1921);
				identifier();
				}
			}

			setState(1925);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1924);
				partitionClause_();
				}
			}

			setState(1928);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(1927);
				orderByClause();
				}
			}

			setState(1931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(1930);
				frameClause_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClause_Context extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DALStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DALStatementParser.BY, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public PartitionClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterPartitionClause_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitPartitionClause_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitPartitionClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClause_Context partitionClause_() throws RecognitionException {
		PartitionClause_Context _localctx = new PartitionClause_Context(_ctx, getState());
		enterRule(_localctx, 314, RULE_partitionClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1933);
			match(PARTITION);
			setState(1934);
			match(BY);
			setState(1935);
			expr(0);
			setState(1940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1936);
				match(COMMA_);
				setState(1937);
				expr(0);
				}
				}
				setState(1942);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameClause_Context extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(DALStatementParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(DALStatementParser.RANGE, 0); }
		public FrameStart_Context frameStart_() {
			return getRuleContext(FrameStart_Context.class,0);
		}
		public FrameBetween_Context frameBetween_() {
			return getRuleContext(FrameBetween_Context.class,0);
		}
		public FrameClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterFrameClause_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitFrameClause_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitFrameClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameClause_Context frameClause_() throws RecognitionException {
		FrameClause_Context _localctx = new FrameClause_Context(_ctx, getState());
		enterRule(_localctx, 316, RULE_frameClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1943);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1946);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case NOT_:
			case TILDE_:
			case PLUS_:
			case MINUS_:
			case DOT_:
			case LP_:
			case LBE_:
			case QUESTION_:
			case AT_:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case GROUP_CONCAT:
			case CAST:
			case POSITION:
			case SUBSTRING:
			case SUBSTR:
			case EXTRACT:
			case TRIM:
			case LAST_DAY:
			case TRADITIONAL:
			case TREE:
			case MYSQL_ADMIN:
			case INSTANT:
			case INPLACE:
			case COPY:
			case UL_BINARY:
			case AUTOCOMMIT:
			case ACCOUNT:
			case ACTION:
			case ACTIVE:
			case ADMIN:
			case AFTER:
			case AGAINST:
			case AGGREGATE:
			case ALGORITHM:
			case ALWAYS:
			case ANY:
			case ASCII:
			case AT:
			case ATTRIBUTE:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG:
			case AVG_ROW_LENGTH:
			case BACKUP:
			case BEGIN:
			case BINARY:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case BUCKETS:
			case BYTE:
			case CACHE:
			case CASCADED:
			case CASE:
			case CATALOG_NAME:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHAR:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLONE:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLLATION:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETION:
			case COMPONENT:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONTAINS:
			case CONTEXT:
			case CONVERT:
			case CPU:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR_NAME:
			case DATA:
			case DATABASE:
			case DATAFILE:
			case DATE:
			case DATETIME:
			case DAY:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DEFINITION:
			case DELAY_KEY_WRITE:
			case DESCRIPTION:
			case DIAGNOSTICS:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENFORCED:
			case ENGINE:
			case ENGINES:
			case ENGINE_ATTRIBUTE:
			case ENUM:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXPANSION:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FALSE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWING:
			case FOLLOWS:
			case FORMAT:
			case FULL:
			case GENERAL:
			case GEOMCOLLECTION:
			case GEOMETRY:
			case GEOMETRYCOLLECTION:
			case GET_FORMAT:
			case GET_MASTER_PUBLIC_KEY:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTOGRAM:
			case HISTORY:
			case HOST:
			case HOSTS:
			case HOUR:
			case IDENTIFIED:
			case IF:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INACTIVE:
			case INDEXES:
			case INITIAL_SIZE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INTERVAL:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case JSON_VALUE:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LEFT:
			case LESS:
			case LEVEL:
			case LINESTRING:
			case LIST:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOCKS:
			case LOGFILE:
			case LOGS:
			case MANAGED:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_COMPRESSION_ALGORITHMS:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_PUBLIC_KEY_PATH:
			case MASTER_RETRY_COUNT:
			case MASTER_SERVER_ID:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_CIPHERSUITES:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MASTER_ZSTD_COMPRESSION_LEVEL:
			case MATCH:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMORY:
			case MERGE:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MIGRATE:
			case MINUTE:
			case MIN_ROWS:
			case MOD:
			case MODE:
			case MODIFY:
			case MONTH:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case MUTEX:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NDB:
			case NDBCLUSTER:
			case NESTED:
			case NETWORK_NAMESPACE:
			case NEVER:
			case NEW:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case NOT:
			case NOWAIT:
			case NO_WAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NVARCHAR:
			case OFF:
			case OFFSET:
			case OJ:
			case OLD:
			case ONE:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PATH:
			case PERSIST:
			case PERSIST_ONLY:
			case PHASE:
			case PLUGIN:
			case PLUGINS:
			case PLUGIN_DIR:
			case POINT:
			case POLYGON:
			case PORT:
			case PRECEDES:
			case PRECEDING:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PRIVILEGES:
			case PRIVILEGE_CHECKS_USER:
			case PROCESS:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUARTER:
			case QUERY:
			case QUICK:
			case RANDOM:
			case READ_ONLY:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case REFERENCE:
			case RELAY:
			case RELAYLOG:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAY_THREAD:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPEATABLE:
			case REPLACE:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case REQUIRE_ROW_FORMAT:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESUME:
			case RETAIN:
			case RETURNED_SQLSTATE:
			case RETURNING:
			case RETURNS:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROUTINE:
			case ROW:
			case ROW_COUNT:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SCHEMA_NAME:
			case SECOND:
			case SECONDARY:
			case SECONDARY_ENGINE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SECONDARY_LOAD:
			case SECONDARY_UNLOAD:
			case SECURITY:
			case SERIAL:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHUTDOWN:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_CACHE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case SQL_TSI_DAY:
			case SQL_TSI_HOUR:
			case SQL_TSI_MINUTE:
			case SQL_TSI_MONTH:
			case SQL_TSI_QUARTER:
			case SQL_TSI_SECOND:
			case SQL_TSI_WEEK:
			case SQL_TSI_YEAR:
			case SRID:
			case STACKED:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUPER:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLES:
			case TABLESPACE:
			case TABLE_CHECKSUM:
			case TABLE_NAME:
			case TEMPORARY:
			case TEMPTABLE:
			case TEXT:
			case THAN:
			case THREAD_PRIORITY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TLS:
			case TRANSACTION:
			case TRIGGERS:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNICODE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USER_RESOURCES:
			case USE_FRM:
			case VALIDATION:
			case VALUE:
			case VALUES:
			case VARIABLES:
			case VCPU:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WEEK:
			case WEIGHT_STRING:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XID:
			case XML:
			case YEAR:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
			case HEX_DIGIT_:
			case BIT_NUM_:
				{
				setState(1944);
				frameStart_();
				}
				break;
			case BETWEEN:
				{
				setState(1945);
				frameBetween_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameStart_Context extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(DALStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DALStatementParser.ROW, 0); }
		public TerminalNode UNBOUNDED() { return getToken(DALStatementParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(DALStatementParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(DALStatementParser.FOLLOWING, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public FrameStart_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameStart_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterFrameStart_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitFrameStart_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitFrameStart_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameStart_Context frameStart_() throws RecognitionException {
		FrameStart_Context _localctx = new FrameStart_Context(_ctx, getState());
		enterRule(_localctx, 318, RULE_frameStart_);
		try {
			setState(1960);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1948);
				match(CURRENT);
				setState(1949);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1950);
				match(UNBOUNDED);
				setState(1951);
				match(PRECEDING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1952);
				match(UNBOUNDED);
				setState(1953);
				match(FOLLOWING);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1954);
				expr(0);
				setState(1955);
				match(PRECEDING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1957);
				expr(0);
				setState(1958);
				match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameEnd_Context extends ParserRuleContext {
		public FrameStart_Context frameStart_() {
			return getRuleContext(FrameStart_Context.class,0);
		}
		public FrameEnd_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameEnd_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterFrameEnd_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitFrameEnd_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitFrameEnd_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameEnd_Context frameEnd_() throws RecognitionException {
		FrameEnd_Context _localctx = new FrameEnd_Context(_ctx, getState());
		enterRule(_localctx, 320, RULE_frameEnd_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1962);
			frameStart_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBetween_Context extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(DALStatementParser.BETWEEN, 0); }
		public FrameStart_Context frameStart_() {
			return getRuleContext(FrameStart_Context.class,0);
		}
		public TerminalNode AND() { return getToken(DALStatementParser.AND, 0); }
		public FrameEnd_Context frameEnd_() {
			return getRuleContext(FrameEnd_Context.class,0);
		}
		public FrameBetween_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBetween_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterFrameBetween_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitFrameBetween_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitFrameBetween_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBetween_Context frameBetween_() throws RecognitionException {
		FrameBetween_Context _localctx = new FrameBetween_Context(_ctx, getState());
		enterRule(_localctx, 322, RULE_frameBetween_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1964);
			match(BETWEEN);
			setState(1965);
			frameStart_();
			setState(1966);
			match(AND);
			setState(1967);
			frameEnd_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecialFunctionContext extends ParserRuleContext {
		public GroupConcatFunctionContext groupConcatFunction() {
			return getRuleContext(GroupConcatFunctionContext.class,0);
		}
		public WindowFunctionContext windowFunction() {
			return getRuleContext(WindowFunctionContext.class,0);
		}
		public CastFunctionContext castFunction() {
			return getRuleContext(CastFunctionContext.class,0);
		}
		public ConvertFunctionContext convertFunction() {
			return getRuleContext(ConvertFunctionContext.class,0);
		}
		public PositionFunctionContext positionFunction() {
			return getRuleContext(PositionFunctionContext.class,0);
		}
		public SubstringFunctionContext substringFunction() {
			return getRuleContext(SubstringFunctionContext.class,0);
		}
		public ExtractFunctionContext extractFunction() {
			return getRuleContext(ExtractFunctionContext.class,0);
		}
		public CharFunctionContext charFunction() {
			return getRuleContext(CharFunctionContext.class,0);
		}
		public TrimFunction_Context trimFunction_() {
			return getRuleContext(TrimFunction_Context.class,0);
		}
		public WeightStringFunctionContext weightStringFunction() {
			return getRuleContext(WeightStringFunctionContext.class,0);
		}
		public ValuesFunction_Context valuesFunction_() {
			return getRuleContext(ValuesFunction_Context.class,0);
		}
		public CurrentUserFunctionContext currentUserFunction() {
			return getRuleContext(CurrentUserFunctionContext.class,0);
		}
		public SpecialFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specialFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSpecialFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSpecialFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSpecialFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecialFunctionContext specialFunction() throws RecognitionException {
		SpecialFunctionContext _localctx = new SpecialFunctionContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_specialFunction);
		try {
			setState(1981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1969);
				groupConcatFunction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1970);
				windowFunction();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1971);
				castFunction();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1972);
				convertFunction();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1973);
				positionFunction();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1974);
				substringFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1975);
				extractFunction();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1976);
				charFunction();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1977);
				trimFunction_();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1978);
				weightStringFunction();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1979);
				valuesFunction_();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1980);
				currentUserFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentUserFunctionContext extends ParserRuleContext {
		public TerminalNode CURRENT_USER() { return getToken(DALStatementParser.CURRENT_USER, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public CurrentUserFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentUserFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCurrentUserFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCurrentUserFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCurrentUserFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentUserFunctionContext currentUserFunction() throws RecognitionException {
		CurrentUserFunctionContext _localctx = new CurrentUserFunctionContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_currentUserFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1983);
			match(CURRENT_USER);
			setState(1986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				setState(1984);
				match(LP_);
				setState(1985);
				match(RP_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupConcatFunctionContext extends ParserRuleContext {
		public TerminalNode GROUP_CONCAT() { return getToken(DALStatementParser.GROUP_CONCAT, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public DistinctContext distinct() {
			return getRuleContext(DistinctContext.class,0);
		}
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ASTERISK_() { return getToken(DALStatementParser.ASTERISK_, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode SEPARATOR() { return getToken(DALStatementParser.SEPARATOR, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public GroupConcatFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupConcatFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterGroupConcatFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitGroupConcatFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitGroupConcatFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupConcatFunctionContext groupConcatFunction() throws RecognitionException {
		GroupConcatFunctionContext _localctx = new GroupConcatFunctionContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_groupConcatFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1988);
			match(GROUP_CONCAT);
			setState(1989);
			match(LP_);
			setState(1991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DISTINCT) {
				{
				setState(1990);
				distinct();
				}
			}

			setState(2002);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case NOT_:
			case TILDE_:
			case PLUS_:
			case MINUS_:
			case DOT_:
			case LP_:
			case LBE_:
			case QUESTION_:
			case AT_:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case GROUP_CONCAT:
			case CAST:
			case POSITION:
			case SUBSTRING:
			case SUBSTR:
			case EXTRACT:
			case TRIM:
			case LAST_DAY:
			case TRADITIONAL:
			case TREE:
			case MYSQL_ADMIN:
			case INSTANT:
			case INPLACE:
			case COPY:
			case UL_BINARY:
			case AUTOCOMMIT:
			case ACCOUNT:
			case ACTION:
			case ACTIVE:
			case ADMIN:
			case AFTER:
			case AGAINST:
			case AGGREGATE:
			case ALGORITHM:
			case ALWAYS:
			case ANY:
			case ASCII:
			case AT:
			case ATTRIBUTE:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG:
			case AVG_ROW_LENGTH:
			case BACKUP:
			case BEGIN:
			case BINARY:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case BUCKETS:
			case BYTE:
			case CACHE:
			case CASCADED:
			case CASE:
			case CATALOG_NAME:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHAR:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLONE:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLLATION:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETION:
			case COMPONENT:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONTAINS:
			case CONTEXT:
			case CONVERT:
			case CPU:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR_NAME:
			case DATA:
			case DATABASE:
			case DATAFILE:
			case DATE:
			case DATETIME:
			case DAY:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DEFINITION:
			case DELAY_KEY_WRITE:
			case DESCRIPTION:
			case DIAGNOSTICS:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENFORCED:
			case ENGINE:
			case ENGINES:
			case ENGINE_ATTRIBUTE:
			case ENUM:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXPANSION:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FALSE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWING:
			case FOLLOWS:
			case FORMAT:
			case FULL:
			case GENERAL:
			case GEOMCOLLECTION:
			case GEOMETRY:
			case GEOMETRYCOLLECTION:
			case GET_FORMAT:
			case GET_MASTER_PUBLIC_KEY:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTOGRAM:
			case HISTORY:
			case HOST:
			case HOSTS:
			case HOUR:
			case IDENTIFIED:
			case IF:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INACTIVE:
			case INDEXES:
			case INITIAL_SIZE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INTERVAL:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case JSON_VALUE:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LEFT:
			case LESS:
			case LEVEL:
			case LINESTRING:
			case LIST:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOCKS:
			case LOGFILE:
			case LOGS:
			case MANAGED:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_COMPRESSION_ALGORITHMS:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_PUBLIC_KEY_PATH:
			case MASTER_RETRY_COUNT:
			case MASTER_SERVER_ID:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_CIPHERSUITES:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MASTER_ZSTD_COMPRESSION_LEVEL:
			case MATCH:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMORY:
			case MERGE:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MIGRATE:
			case MINUTE:
			case MIN_ROWS:
			case MOD:
			case MODE:
			case MODIFY:
			case MONTH:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case MUTEX:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NDB:
			case NDBCLUSTER:
			case NESTED:
			case NETWORK_NAMESPACE:
			case NEVER:
			case NEW:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case NOT:
			case NOWAIT:
			case NO_WAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NVARCHAR:
			case OFF:
			case OFFSET:
			case OJ:
			case OLD:
			case ONE:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PATH:
			case PERSIST:
			case PERSIST_ONLY:
			case PHASE:
			case PLUGIN:
			case PLUGINS:
			case PLUGIN_DIR:
			case POINT:
			case POLYGON:
			case PORT:
			case PRECEDES:
			case PRECEDING:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PRIVILEGES:
			case PRIVILEGE_CHECKS_USER:
			case PROCESS:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUARTER:
			case QUERY:
			case QUICK:
			case RANDOM:
			case READ_ONLY:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case REFERENCE:
			case RELAY:
			case RELAYLOG:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAY_THREAD:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPEATABLE:
			case REPLACE:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case REQUIRE_ROW_FORMAT:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESUME:
			case RETAIN:
			case RETURNED_SQLSTATE:
			case RETURNING:
			case RETURNS:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROUTINE:
			case ROW:
			case ROW_COUNT:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SCHEMA_NAME:
			case SECOND:
			case SECONDARY:
			case SECONDARY_ENGINE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SECONDARY_LOAD:
			case SECONDARY_UNLOAD:
			case SECURITY:
			case SERIAL:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHUTDOWN:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_CACHE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case SQL_TSI_DAY:
			case SQL_TSI_HOUR:
			case SQL_TSI_MINUTE:
			case SQL_TSI_MONTH:
			case SQL_TSI_QUARTER:
			case SQL_TSI_SECOND:
			case SQL_TSI_WEEK:
			case SQL_TSI_YEAR:
			case SRID:
			case STACKED:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUPER:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLES:
			case TABLESPACE:
			case TABLE_CHECKSUM:
			case TABLE_NAME:
			case TEMPORARY:
			case TEMPTABLE:
			case TEXT:
			case THAN:
			case THREAD_PRIORITY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TLS:
			case TRANSACTION:
			case TRIGGERS:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNICODE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USER_RESOURCES:
			case USE_FRM:
			case VALIDATION:
			case VALUE:
			case VALUES:
			case VARIABLES:
			case VCPU:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WEEK:
			case WEIGHT_STRING:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XID:
			case XML:
			case YEAR:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
			case HEX_DIGIT_:
			case BIT_NUM_:
				{
				setState(1993);
				expr(0);
				setState(1998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1994);
					match(COMMA_);
					setState(1995);
					expr(0);
					}
					}
					setState(2000);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case ASTERISK_:
				{
				setState(2001);
				match(ASTERISK_);
				}
				break;
			case RP_:
			case ORDER:
			case SEPARATOR:
				break;
			default:
				break;
			}
			setState(2005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2004);
				orderByClause();
				}
			}

			setState(2009);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEPARATOR) {
				{
				setState(2007);
				match(SEPARATOR);
				setState(2008);
				expr(0);
				}
			}

			setState(2011);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowFunctionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public OverClause_Context overClause_() {
			return getRuleContext(OverClause_Context.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public WindowFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterWindowFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitWindowFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitWindowFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowFunctionContext windowFunction() throws RecognitionException {
		WindowFunctionContext _localctx = new WindowFunctionContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_windowFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2013);
			identifier();
			setState(2014);
			match(LP_);
			setState(2015);
			expr(0);
			setState(2020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2016);
				match(COMMA_);
				setState(2017);
				expr(0);
				}
				}
				setState(2022);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2023);
			match(RP_);
			setState(2024);
			overClause_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastFunctionContext extends ParserRuleContext {
		public TerminalNode CAST() { return getToken(DALStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(DALStatementParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public CastFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCastFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCastFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCastFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastFunctionContext castFunction() throws RecognitionException {
		CastFunctionContext _localctx = new CastFunctionContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_castFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2026);
			match(CAST);
			setState(2027);
			match(LP_);
			setState(2028);
			expr(0);
			setState(2029);
			match(AS);
			setState(2030);
			dataType();
			setState(2031);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertFunctionContext extends ParserRuleContext {
		public TerminalNode CONVERT() { return getToken(DALStatementParser.CONVERT, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DALStatementParser.COMMA_, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public TerminalNode USING() { return getToken(DALStatementParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConvertFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterConvertFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitConvertFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitConvertFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertFunctionContext convertFunction() throws RecognitionException {
		ConvertFunctionContext _localctx = new ConvertFunctionContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_convertFunction);
		try {
			setState(2047);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2033);
				match(CONVERT);
				setState(2034);
				match(LP_);
				setState(2035);
				expr(0);
				setState(2036);
				match(COMMA_);
				setState(2037);
				dataType();
				setState(2038);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2040);
				match(CONVERT);
				setState(2041);
				match(LP_);
				setState(2042);
				expr(0);
				setState(2043);
				match(USING);
				setState(2044);
				identifier();
				setState(2045);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PositionFunctionContext extends ParserRuleContext {
		public TerminalNode POSITION() { return getToken(DALStatementParser.POSITION, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode IN() { return getToken(DALStatementParser.IN, 0); }
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public PositionFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterPositionFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitPositionFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitPositionFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionFunctionContext positionFunction() throws RecognitionException {
		PositionFunctionContext _localctx = new PositionFunctionContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_positionFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2049);
			match(POSITION);
			setState(2050);
			match(LP_);
			setState(2051);
			expr(0);
			setState(2052);
			match(IN);
			setState(2053);
			expr(0);
			setState(2054);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstringFunctionContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DALStatementParser.FROM, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(DALStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(DALStatementParser.NUMBER_, i);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public TerminalNode SUBSTRING() { return getToken(DALStatementParser.SUBSTRING, 0); }
		public TerminalNode SUBSTR() { return getToken(DALStatementParser.SUBSTR, 0); }
		public TerminalNode FOR() { return getToken(DALStatementParser.FOR, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public SubstringFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substringFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSubstringFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSubstringFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSubstringFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstringFunctionContext substringFunction() throws RecognitionException {
		SubstringFunctionContext _localctx = new SubstringFunctionContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_substringFunction);
		int _la;
		try {
			setState(2078);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2056);
				_la = _input.LA(1);
				if ( !(_la==SUBSTRING || _la==SUBSTR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2057);
				match(LP_);
				setState(2058);
				expr(0);
				setState(2059);
				match(FROM);
				setState(2060);
				match(NUMBER_);
				setState(2063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2061);
					match(FOR);
					setState(2062);
					match(NUMBER_);
					}
				}

				setState(2065);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2067);
				_la = _input.LA(1);
				if ( !(_la==SUBSTRING || _la==SUBSTR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2068);
				match(LP_);
				setState(2069);
				expr(0);
				setState(2070);
				match(COMMA_);
				setState(2071);
				match(NUMBER_);
				setState(2074);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(2072);
					match(COMMA_);
					setState(2073);
					match(NUMBER_);
					}
				}

				setState(2076);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtractFunctionContext extends ParserRuleContext {
		public TerminalNode EXTRACT() { return getToken(DALStatementParser.EXTRACT, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DALStatementParser.FROM, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public ExtractFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterExtractFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitExtractFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitExtractFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtractFunctionContext extractFunction() throws RecognitionException {
		ExtractFunctionContext _localctx = new ExtractFunctionContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_extractFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2080);
			match(EXTRACT);
			setState(2081);
			match(LP_);
			setState(2082);
			identifier();
			setState(2083);
			match(FROM);
			setState(2084);
			expr(0);
			setState(2085);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharFunctionContext extends ParserRuleContext {
		public TerminalNode CHAR() { return getToken(DALStatementParser.CHAR, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public TerminalNode USING() { return getToken(DALStatementParser.USING, 0); }
		public IgnoredIdentifier_Context ignoredIdentifier_() {
			return getRuleContext(IgnoredIdentifier_Context.class,0);
		}
		public CharFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCharFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCharFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCharFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharFunctionContext charFunction() throws RecognitionException {
		CharFunctionContext _localctx = new CharFunctionContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_charFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2087);
			match(CHAR);
			setState(2088);
			match(LP_);
			setState(2089);
			expr(0);
			setState(2094);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2090);
				match(COMMA_);
				setState(2091);
				expr(0);
				}
				}
				setState(2096);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2099);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2097);
				match(USING);
				setState(2098);
				ignoredIdentifier_();
				}
			}

			setState(2101);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrimFunction_Context extends ParserRuleContext {
		public TerminalNode TRIM() { return getToken(DALStatementParser.TRIM, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public List<TerminalNode> STRING_() { return getTokens(DALStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DALStatementParser.STRING_, i);
		}
		public TerminalNode FROM() { return getToken(DALStatementParser.FROM, 0); }
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public TerminalNode LEADING() { return getToken(DALStatementParser.LEADING, 0); }
		public TerminalNode BOTH() { return getToken(DALStatementParser.BOTH, 0); }
		public TerminalNode TRAILING() { return getToken(DALStatementParser.TRAILING, 0); }
		public TrimFunction_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimFunction_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterTrimFunction_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitTrimFunction_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitTrimFunction_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrimFunction_Context trimFunction_() throws RecognitionException {
		TrimFunction_Context _localctx = new TrimFunction_Context(_ctx, getState());
		enterRule(_localctx, 344, RULE_trimFunction_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2103);
			match(TRIM);
			setState(2104);
			match(LP_);
			setState(2105);
			_la = _input.LA(1);
			if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2106);
			match(STRING_);
			setState(2107);
			match(FROM);
			setState(2108);
			match(STRING_);
			setState(2109);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesFunction_Context extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(DALStatementParser.VALUES, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public ValuesFunction_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesFunction_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterValuesFunction_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitValuesFunction_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitValuesFunction_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesFunction_Context valuesFunction_() throws RecognitionException {
		ValuesFunction_Context _localctx = new ValuesFunction_Context(_ctx, getState());
		enterRule(_localctx, 346, RULE_valuesFunction_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2111);
			match(VALUES);
			setState(2112);
			match(LP_);
			setState(2113);
			columnName();
			setState(2114);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WeightStringFunctionContext extends ParserRuleContext {
		public TerminalNode WEIGHT_STRING() { return getToken(DALStatementParser.WEIGHT_STRING, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public TerminalNode AS() { return getToken(DALStatementParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public LevelClause_Context levelClause_() {
			return getRuleContext(LevelClause_Context.class,0);
		}
		public WeightStringFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_weightStringFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterWeightStringFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitWeightStringFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitWeightStringFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WeightStringFunctionContext weightStringFunction() throws RecognitionException {
		WeightStringFunctionContext _localctx = new WeightStringFunctionContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_weightStringFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2116);
			match(WEIGHT_STRING);
			setState(2117);
			match(LP_);
			setState(2118);
			expr(0);
			setState(2121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2119);
				match(AS);
				setState(2120);
				dataType();
				}
			}

			setState(2124);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEVEL) {
				{
				setState(2123);
				levelClause_();
				}
			}

			setState(2126);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelClause_Context extends ParserRuleContext {
		public TerminalNode LEVEL() { return getToken(DALStatementParser.LEVEL, 0); }
		public List<LevelInWeightListElement_Context> levelInWeightListElement_() {
			return getRuleContexts(LevelInWeightListElement_Context.class);
		}
		public LevelInWeightListElement_Context levelInWeightListElement_(int i) {
			return getRuleContext(LevelInWeightListElement_Context.class,i);
		}
		public List<TerminalNode> NUMBER_() { return getTokens(DALStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(DALStatementParser.NUMBER_, i);
		}
		public TerminalNode MINUS_() { return getToken(DALStatementParser.MINUS_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public LevelClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelClause_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterLevelClause_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitLevelClause_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitLevelClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelClause_Context levelClause_() throws RecognitionException {
		LevelClause_Context _localctx = new LevelClause_Context(_ctx, getState());
		enterRule(_localctx, 350, RULE_levelClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2128);
			match(LEVEL);
			setState(2140);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				{
				setState(2129);
				levelInWeightListElement_();
				setState(2134);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(2130);
					match(COMMA_);
					setState(2131);
					levelInWeightListElement_();
					}
					}
					setState(2136);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(2137);
				match(NUMBER_);
				setState(2138);
				match(MINUS_);
				setState(2139);
				match(NUMBER_);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElement_Context extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DALStatementParser.NUMBER_, 0); }
		public TerminalNode REVERSE() { return getToken(DALStatementParser.REVERSE, 0); }
		public TerminalNode ASC() { return getToken(DALStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DALStatementParser.DESC, 0); }
		public LevelInWeightListElement_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterLevelInWeightListElement_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitLevelInWeightListElement_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitLevelInWeightListElement_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelInWeightListElement_Context levelInWeightListElement_() throws RecognitionException {
		LevelInWeightListElement_Context _localctx = new LevelInWeightListElement_Context(_ctx, getState());
		enterRule(_localctx, 352, RULE_levelInWeightListElement_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2142);
			match(NUMBER_);
			setState(2144);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(2143);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2147);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REVERSE) {
				{
				setState(2146);
				match(REVERSE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegularFunctionContext extends ParserRuleContext {
		public CompleteRegularFunctionContext completeRegularFunction() {
			return getRuleContext(CompleteRegularFunctionContext.class,0);
		}
		public ShorthandRegularFunctionContext shorthandRegularFunction() {
			return getRuleContext(ShorthandRegularFunctionContext.class,0);
		}
		public RegularFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regularFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterRegularFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitRegularFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitRegularFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegularFunctionContext regularFunction() throws RecognitionException {
		RegularFunctionContext _localctx = new RegularFunctionContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_regularFunction);
		try {
			setState(2151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2149);
				completeRegularFunction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2150);
				shorthandRegularFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShorthandRegularFunctionContext extends ParserRuleContext {
		public TerminalNode CURRENT_DATE() { return getToken(DALStatementParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(DALStatementParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DALStatementParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LAST_DAY() { return getToken(DALStatementParser.LAST_DAY, 0); }
		public TerminalNode LOCALTIME() { return getToken(DALStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(DALStatementParser.LOCALTIMESTAMP, 0); }
		public ShorthandRegularFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shorthandRegularFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterShorthandRegularFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitShorthandRegularFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitShorthandRegularFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShorthandRegularFunctionContext shorthandRegularFunction() throws RecognitionException {
		ShorthandRegularFunctionContext _localctx = new ShorthandRegularFunctionContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_shorthandRegularFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2153);
			_la = _input.LA(1);
			if ( !(_la==LAST_DAY || ((((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & ((1L << (CURRENT_DATE - 165)) | (1L << (CURRENT_TIME - 165)) | (1L << (CURRENT_TIMESTAMP - 165)))) != 0) || _la==LOCALTIME || _la==LOCALTIMESTAMP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompleteRegularFunctionContext extends ParserRuleContext {
		public RegularFunctionName_Context regularFunctionName_() {
			return getRuleContext(RegularFunctionName_Context.class,0);
		}
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode ASTERISK_() { return getToken(DALStatementParser.ASTERISK_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public CompleteRegularFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_completeRegularFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCompleteRegularFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCompleteRegularFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCompleteRegularFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompleteRegularFunctionContext completeRegularFunction() throws RecognitionException {
		CompleteRegularFunctionContext _localctx = new CompleteRegularFunctionContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_completeRegularFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2155);
			regularFunctionName_();
			{
			setState(2156);
			match(LP_);
			setState(2166);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case NOT_:
			case TILDE_:
			case PLUS_:
			case MINUS_:
			case DOT_:
			case LP_:
			case LBE_:
			case QUESTION_:
			case AT_:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case GROUP_CONCAT:
			case CAST:
			case POSITION:
			case SUBSTRING:
			case SUBSTR:
			case EXTRACT:
			case TRIM:
			case LAST_DAY:
			case TRADITIONAL:
			case TREE:
			case MYSQL_ADMIN:
			case INSTANT:
			case INPLACE:
			case COPY:
			case UL_BINARY:
			case AUTOCOMMIT:
			case ACCOUNT:
			case ACTION:
			case ACTIVE:
			case ADMIN:
			case AFTER:
			case AGAINST:
			case AGGREGATE:
			case ALGORITHM:
			case ALWAYS:
			case ANY:
			case ASCII:
			case AT:
			case ATTRIBUTE:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG:
			case AVG_ROW_LENGTH:
			case BACKUP:
			case BEGIN:
			case BINARY:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case BUCKETS:
			case BYTE:
			case CACHE:
			case CASCADED:
			case CASE:
			case CATALOG_NAME:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHAR:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLONE:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLLATION:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETION:
			case COMPONENT:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONTAINS:
			case CONTEXT:
			case CONVERT:
			case CPU:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR_NAME:
			case DATA:
			case DATABASE:
			case DATAFILE:
			case DATE:
			case DATETIME:
			case DAY:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DEFINITION:
			case DELAY_KEY_WRITE:
			case DESCRIPTION:
			case DIAGNOSTICS:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENFORCED:
			case ENGINE:
			case ENGINES:
			case ENGINE_ATTRIBUTE:
			case ENUM:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXPANSION:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FALSE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWING:
			case FOLLOWS:
			case FORMAT:
			case FULL:
			case GENERAL:
			case GEOMCOLLECTION:
			case GEOMETRY:
			case GEOMETRYCOLLECTION:
			case GET_FORMAT:
			case GET_MASTER_PUBLIC_KEY:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTOGRAM:
			case HISTORY:
			case HOST:
			case HOSTS:
			case HOUR:
			case IDENTIFIED:
			case IF:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INACTIVE:
			case INDEXES:
			case INITIAL_SIZE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INTERVAL:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case JSON_VALUE:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LEFT:
			case LESS:
			case LEVEL:
			case LINESTRING:
			case LIST:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOCKS:
			case LOGFILE:
			case LOGS:
			case MANAGED:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_COMPRESSION_ALGORITHMS:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_PUBLIC_KEY_PATH:
			case MASTER_RETRY_COUNT:
			case MASTER_SERVER_ID:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_CIPHERSUITES:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MASTER_ZSTD_COMPRESSION_LEVEL:
			case MATCH:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMORY:
			case MERGE:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MIGRATE:
			case MINUTE:
			case MIN_ROWS:
			case MOD:
			case MODE:
			case MODIFY:
			case MONTH:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case MUTEX:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NDB:
			case NDBCLUSTER:
			case NESTED:
			case NETWORK_NAMESPACE:
			case NEVER:
			case NEW:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case NOT:
			case NOWAIT:
			case NO_WAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NVARCHAR:
			case OFF:
			case OFFSET:
			case OJ:
			case OLD:
			case ONE:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PATH:
			case PERSIST:
			case PERSIST_ONLY:
			case PHASE:
			case PLUGIN:
			case PLUGINS:
			case PLUGIN_DIR:
			case POINT:
			case POLYGON:
			case PORT:
			case PRECEDES:
			case PRECEDING:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PRIVILEGES:
			case PRIVILEGE_CHECKS_USER:
			case PROCESS:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUARTER:
			case QUERY:
			case QUICK:
			case RANDOM:
			case READ_ONLY:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case REFERENCE:
			case RELAY:
			case RELAYLOG:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAY_THREAD:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPEATABLE:
			case REPLACE:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case REQUIRE_ROW_FORMAT:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESUME:
			case RETAIN:
			case RETURNED_SQLSTATE:
			case RETURNING:
			case RETURNS:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROUTINE:
			case ROW:
			case ROW_COUNT:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SCHEMA_NAME:
			case SECOND:
			case SECONDARY:
			case SECONDARY_ENGINE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SECONDARY_LOAD:
			case SECONDARY_UNLOAD:
			case SECURITY:
			case SERIAL:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHUTDOWN:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_CACHE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case SQL_TSI_DAY:
			case SQL_TSI_HOUR:
			case SQL_TSI_MINUTE:
			case SQL_TSI_MONTH:
			case SQL_TSI_QUARTER:
			case SQL_TSI_SECOND:
			case SQL_TSI_WEEK:
			case SQL_TSI_YEAR:
			case SRID:
			case STACKED:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUPER:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLES:
			case TABLESPACE:
			case TABLE_CHECKSUM:
			case TABLE_NAME:
			case TEMPORARY:
			case TEMPTABLE:
			case TEXT:
			case THAN:
			case THREAD_PRIORITY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TLS:
			case TRANSACTION:
			case TRIGGERS:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNICODE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USER_RESOURCES:
			case USE_FRM:
			case VALIDATION:
			case VALUE:
			case VALUES:
			case VARIABLES:
			case VCPU:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WEEK:
			case WEIGHT_STRING:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XID:
			case XML:
			case YEAR:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
			case HEX_DIGIT_:
			case BIT_NUM_:
				{
				setState(2157);
				expr(0);
				setState(2162);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(2158);
					match(COMMA_);
					setState(2159);
					expr(0);
					}
					}
					setState(2164);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case ASTERISK_:
				{
				setState(2165);
				match(ASTERISK_);
				}
				break;
			case RP_:
				break;
			default:
				break;
			}
			setState(2168);
			match(RP_);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegularFunctionName_Context extends ParserRuleContext {
		public TerminalNode IF() { return getToken(DALStatementParser.IF, 0); }
		public TerminalNode LOCALTIME() { return getToken(DALStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(DALStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode REPLACE() { return getToken(DALStatementParser.REPLACE, 0); }
		public TerminalNode INTERVAL() { return getToken(DALStatementParser.INTERVAL, 0); }
		public TerminalNode MOD() { return getToken(DALStatementParser.MOD, 0); }
		public TerminalNode DATABASE() { return getToken(DALStatementParser.DATABASE, 0); }
		public TerminalNode LEFT() { return getToken(DALStatementParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(DALStatementParser.RIGHT, 0); }
		public TerminalNode DATE() { return getToken(DALStatementParser.DATE, 0); }
		public TerminalNode DAY() { return getToken(DALStatementParser.DAY, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(DALStatementParser.GEOMCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(DALStatementParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(DALStatementParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(DALStatementParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(DALStatementParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(DALStatementParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(DALStatementParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(DALStatementParser.POLYGON, 0); }
		public TerminalNode TIME() { return getToken(DALStatementParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DALStatementParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(DALStatementParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(DALStatementParser.TIMESTAMPDIFF, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DALStatementParser.CURRENT_TIMESTAMP, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RegularFunctionName_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regularFunctionName_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterRegularFunctionName_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitRegularFunctionName_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitRegularFunctionName_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RegularFunctionName_Context regularFunctionName_() throws RecognitionException {
		RegularFunctionName_Context _localctx = new RegularFunctionName_Context(_ctx, getState());
		enterRule(_localctx, 360, RULE_regularFunctionName_);
		try {
			setState(2196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2170);
				match(IF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2171);
				match(LOCALTIME);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2172);
				match(LOCALTIMESTAMP);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2173);
				match(REPLACE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2174);
				match(INTERVAL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2175);
				match(MOD);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2176);
				match(DATABASE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2177);
				match(LEFT);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2178);
				match(RIGHT);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2179);
				match(DATE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2180);
				match(DAY);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2181);
				match(GEOMCOLLECTION);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2182);
				match(GEOMETRYCOLLECTION);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2183);
				match(LINESTRING);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2184);
				match(MULTILINESTRING);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2185);
				match(MULTIPOINT);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2186);
				match(MULTIPOLYGON);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2187);
				match(POINT);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2188);
				match(POLYGON);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2189);
				match(TIME);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2190);
				match(TIMESTAMP);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2191);
				match(TIMESTAMPADD);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2192);
				match(TIMESTAMPDIFF);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2193);
				match(DATE);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2194);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2195);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MatchExpression_Context extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(DALStatementParser.MATCH, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode AGAINST() { return getToken(DALStatementParser.AGAINST, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public MatchSearchModifier_Context matchSearchModifier_() {
			return getRuleContext(MatchSearchModifier_Context.class,0);
		}
		public MatchExpression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchExpression_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterMatchExpression_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitMatchExpression_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitMatchExpression_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchExpression_Context matchExpression_() throws RecognitionException {
		MatchExpression_Context _localctx = new MatchExpression_Context(_ctx, getState());
		enterRule(_localctx, 362, RULE_matchExpression_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2198);
			match(MATCH);
			setState(2199);
			columnNames();
			setState(2200);
			match(AGAINST);
			setState(2201);
			match(LP_);
			setState(2202);
			expr(0);
			setState(2204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN || _la==WITH) {
				{
				setState(2203);
				matchSearchModifier_();
				}
			}

			setState(2206);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MatchSearchModifier_Context extends ParserRuleContext {
		public TerminalNode IN() { return getToken(DALStatementParser.IN, 0); }
		public TerminalNode NATURAL() { return getToken(DALStatementParser.NATURAL, 0); }
		public TerminalNode LANGUAGE() { return getToken(DALStatementParser.LANGUAGE, 0); }
		public TerminalNode MODE() { return getToken(DALStatementParser.MODE, 0); }
		public TerminalNode WITH() { return getToken(DALStatementParser.WITH, 0); }
		public TerminalNode QUERY() { return getToken(DALStatementParser.QUERY, 0); }
		public TerminalNode EXPANSION() { return getToken(DALStatementParser.EXPANSION, 0); }
		public TerminalNode BOOLEAN() { return getToken(DALStatementParser.BOOLEAN, 0); }
		public MatchSearchModifier_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchSearchModifier_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterMatchSearchModifier_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitMatchSearchModifier_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitMatchSearchModifier_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MatchSearchModifier_Context matchSearchModifier_() throws RecognitionException {
		MatchSearchModifier_Context _localctx = new MatchSearchModifier_Context(_ctx, getState());
		enterRule(_localctx, 364, RULE_matchSearchModifier_);
		try {
			setState(2225);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2208);
				match(IN);
				setState(2209);
				match(NATURAL);
				setState(2210);
				match(LANGUAGE);
				setState(2211);
				match(MODE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2212);
				match(IN);
				setState(2213);
				match(NATURAL);
				setState(2214);
				match(LANGUAGE);
				setState(2215);
				match(MODE);
				setState(2216);
				match(WITH);
				setState(2217);
				match(QUERY);
				setState(2218);
				match(EXPANSION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2219);
				match(IN);
				setState(2220);
				match(BOOLEAN);
				setState(2221);
				match(MODE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2222);
				match(WITH);
				setState(2223);
				match(QUERY);
				setState(2224);
				match(EXPANSION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExpressionContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(DALStatementParser.CASE, 0); }
		public TerminalNode END() { return getToken(DALStatementParser.END, 0); }
		public SimpleExprContext simpleExpr() {
			return getRuleContext(SimpleExprContext.class,0);
		}
		public List<CaseWhen_Context> caseWhen_() {
			return getRuleContexts(CaseWhen_Context.class);
		}
		public CaseWhen_Context caseWhen_(int i) {
			return getRuleContext(CaseWhen_Context.class,i);
		}
		public CaseElse_Context caseElse_() {
			return getRuleContext(CaseElse_Context.class,0);
		}
		public CaseExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCaseExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCaseExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCaseExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExpressionContext caseExpression() throws RecognitionException {
		CaseExpressionContext _localctx = new CaseExpressionContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_caseExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2227);
			match(CASE);
			setState(2229);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << NOT_) | (1L << TILDE_) | (1L << PLUS_) | (1L << MINUS_) | (1L << DOT_) | (1L << LP_) | (1L << LBE_) | (1L << QUESTION_) | (1L << AT_) | (1L << MAX) | (1L << MIN) | (1L << SUM) | (1L << COUNT) | (1L << GROUP_CONCAT) | (1L << CAST) | (1L << POSITION) | (1L << SUBSTRING) | (1L << SUBSTR) | (1L << EXTRACT) | (1L << TRIM) | (1L << LAST_DAY) | (1L << TRADITIONAL) | (1L << TREE) | (1L << MYSQL_ADMIN) | (1L << INSTANT) | (1L << INPLACE) | (1L << COPY))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UL_BINARY - 64)) | (1L << (AUTOCOMMIT - 64)) | (1L << (ACCOUNT - 64)) | (1L << (ACTION - 64)) | (1L << (ACTIVE - 64)) | (1L << (ADMIN - 64)) | (1L << (AFTER - 64)) | (1L << (AGAINST - 64)) | (1L << (AGGREGATE - 64)) | (1L << (ALGORITHM - 64)) | (1L << (ALWAYS - 64)) | (1L << (ANY - 64)) | (1L << (ASCII - 64)) | (1L << (AT - 64)) | (1L << (ATTRIBUTE - 64)) | (1L << (AUTOEXTEND_SIZE - 64)) | (1L << (AUTO_INCREMENT - 64)) | (1L << (AVG - 64)) | (1L << (AVG_ROW_LENGTH - 64)) | (1L << (BACKUP - 64)) | (1L << (BEGIN - 64)) | (1L << (BINARY - 64)) | (1L << (BINLOG - 64)) | (1L << (BIT - 64)) | (1L << (BLOCK - 64)) | (1L << (BOOL - 64)) | (1L << (BOOLEAN - 64)) | (1L << (BTREE - 64)) | (1L << (BUCKETS - 64)) | (1L << (BYTE - 64)) | (1L << (CACHE - 64)) | (1L << (CASCADED - 64)) | (1L << (CASE - 64)) | (1L << (CATALOG_NAME - 64)) | (1L << (CHAIN - 64)) | (1L << (CHANGED - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHAR - 64)) | (1L << (CHARSET - 64)) | (1L << (CHECKSUM - 64)) | (1L << (CIPHER - 64)) | (1L << (CLASS_ORIGIN - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CLIENT - 128)) | (1L << (CLONE - 128)) | (1L << (CLOSE - 128)) | (1L << (COALESCE - 128)) | (1L << (CODE - 128)) | (1L << (COLLATION - 128)) | (1L << (COLUMNS - 128)) | (1L << (COLUMN_FORMAT - 128)) | (1L << (COMMENT - 128)) | (1L << (COMMIT - 128)) | (1L << (COMMITTED - 128)) | (1L << (COMPACT - 128)) | (1L << (COMPLETION - 128)) | (1L << (COMPONENT - 128)) | (1L << (COMPRESSED - 128)) | (1L << (COMPRESSION - 128)) | (1L << (CONCURRENT - 128)) | (1L << (CONNECTION - 128)) | (1L << (CONSISTENT - 128)) | (1L << (CONSTRAINT_CATALOG - 128)) | (1L << (CONSTRAINT_NAME - 128)) | (1L << (CONSTRAINT_SCHEMA - 128)) | (1L << (CONTAINS - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONVERT - 128)) | (1L << (CPU - 128)) | (1L << (CURRENT - 128)) | (1L << (CURRENT_DATE - 128)) | (1L << (CURRENT_TIME - 128)) | (1L << (CURRENT_TIMESTAMP - 128)) | (1L << (CURRENT_USER - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (DATA - 128)) | (1L << (DATABASE - 128)) | (1L << (DATAFILE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEFAULT_AUTH - 128)) | (1L << (DEFINER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY_KEY_WRITE - 128)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (DESCRIPTION - 196)) | (1L << (DIAGNOSTICS - 196)) | (1L << (DIRECTORY - 196)) | (1L << (DISABLE - 196)) | (1L << (DISCARD - 196)) | (1L << (DISK - 196)) | (1L << (DO - 196)) | (1L << (DUMPFILE - 196)) | (1L << (DUPLICATE - 196)) | (1L << (DYNAMIC - 196)) | (1L << (ENABLE - 196)) | (1L << (ENCRYPTION - 196)) | (1L << (END - 196)) | (1L << (ENDS - 196)) | (1L << (ENFORCED - 196)) | (1L << (ENGINE - 196)) | (1L << (ENGINES - 196)) | (1L << (ENGINE_ATTRIBUTE - 196)) | (1L << (ENUM - 196)) | (1L << (ERROR - 196)) | (1L << (ERRORS - 196)) | (1L << (ESCAPE - 196)) | (1L << (EVENT - 196)) | (1L << (EVENTS - 196)) | (1L << (EVERY - 196)) | (1L << (EXCHANGE - 196)) | (1L << (EXCLUDE - 196)) | (1L << (EXECUTE - 196)) | (1L << (EXISTS - 196)) | (1L << (EXPANSION - 196)) | (1L << (EXPIRE - 196)) | (1L << (EXPORT - 196)) | (1L << (EXTENDED - 196)) | (1L << (EXTENT_SIZE - 196)) | (1L << (FAILED_LOGIN_ATTEMPTS - 196)) | (1L << (FALSE - 196)) | (1L << (FAST - 196)) | (1L << (FAULTS - 196)) | (1L << (FIELDS - 196)) | (1L << (FILE - 196)) | (1L << (FILE_BLOCK_SIZE - 196)) | (1L << (FILTER - 196)) | (1L << (FIRST - 196)) | (1L << (FIXED - 196)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (FLUSH - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FOLLOWS - 261)) | (1L << (FORMAT - 261)) | (1L << (FULL - 261)) | (1L << (GENERAL - 261)) | (1L << (GEOMCOLLECTION - 261)) | (1L << (GEOMETRY - 261)) | (1L << (GEOMETRYCOLLECTION - 261)) | (1L << (GET_FORMAT - 261)) | (1L << (GET_MASTER_PUBLIC_KEY - 261)) | (1L << (GLOBAL - 261)) | (1L << (GRANTS - 261)) | (1L << (GROUP_REPLICATION - 261)) | (1L << (HANDLER - 261)) | (1L << (HASH - 261)) | (1L << (HELP - 261)) | (1L << (HISTOGRAM - 261)) | (1L << (HISTORY - 261)) | (1L << (HOST - 261)) | (1L << (HOSTS - 261)) | (1L << (HOUR - 261)) | (1L << (IDENTIFIED - 261)) | (1L << (IF - 261)) | (1L << (IGNORE_SERVER_IDS - 261)) | (1L << (IMPORT - 261)) | (1L << (INACTIVE - 261)) | (1L << (INDEXES - 261)) | (1L << (INITIAL_SIZE - 261)) | (1L << (INSERT_METHOD - 261)) | (1L << (INSTALL - 261)) | (1L << (INSTANCE - 261)))) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & ((1L << (INTERVAL - 326)) | (1L << (INVISIBLE - 326)) | (1L << (INVOKER - 326)) | (1L << (IO - 326)) | (1L << (IO_THREAD - 326)) | (1L << (IPC - 326)) | (1L << (ISOLATION - 326)) | (1L << (ISSUER - 326)) | (1L << (JSON - 326)) | (1L << (JSON_VALUE - 326)) | (1L << (KEY_BLOCK_SIZE - 326)) | (1L << (LANGUAGE - 326)) | (1L << (LAST - 326)) | (1L << (LEAVES - 326)) | (1L << (LEFT - 326)) | (1L << (LESS - 326)) | (1L << (LEVEL - 326)) | (1L << (LINESTRING - 326)) | (1L << (LIST - 326)) | (1L << (LOCAL - 326)) | (1L << (LOCALTIME - 326)) | (1L << (LOCALTIMESTAMP - 326)) | (1L << (LOCKED - 326)) | (1L << (LOCKS - 326)) | (1L << (LOGFILE - 326)) | (1L << (LOGS - 326)) | (1L << (MANAGED - 326)) | (1L << (MASTER - 326)) | (1L << (MASTER_AUTO_POSITION - 326)) | (1L << (MASTER_COMPRESSION_ALGORITHMS - 326)) | (1L << (MASTER_CONNECT_RETRY - 326)) | (1L << (MASTER_DELAY - 326)) | (1L << (MASTER_HEARTBEAT_PERIOD - 326)) | (1L << (MASTER_HOST - 326)) | (1L << (MASTER_LOG_FILE - 326)) | (1L << (MASTER_LOG_POS - 326)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (MASTER_PASSWORD - 390)) | (1L << (MASTER_PORT - 390)) | (1L << (MASTER_PUBLIC_KEY_PATH - 390)) | (1L << (MASTER_RETRY_COUNT - 390)) | (1L << (MASTER_SERVER_ID - 390)) | (1L << (MASTER_SSL - 390)) | (1L << (MASTER_SSL_CA - 390)) | (1L << (MASTER_SSL_CAPATH - 390)) | (1L << (MASTER_SSL_CERT - 390)) | (1L << (MASTER_SSL_CIPHER - 390)) | (1L << (MASTER_SSL_CRL - 390)) | (1L << (MASTER_SSL_CRLPATH - 390)) | (1L << (MASTER_SSL_KEY - 390)) | (1L << (MASTER_TLS_CIPHERSUITES - 390)) | (1L << (MASTER_TLS_VERSION - 390)) | (1L << (MASTER_USER - 390)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL - 390)) | (1L << (MATCH - 390)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 390)) | (1L << (MAX_QUERIES_PER_HOUR - 390)) | (1L << (MAX_ROWS - 390)) | (1L << (MAX_SIZE - 390)) | (1L << (MAX_UPDATES_PER_HOUR - 390)) | (1L << (MAX_USER_CONNECTIONS - 390)) | (1L << (MEDIUM - 390)) | (1L << (MEMORY - 390)) | (1L << (MERGE - 390)) | (1L << (MESSAGE_TEXT - 390)) | (1L << (MICROSECOND - 390)) | (1L << (MIGRATE - 390)) | (1L << (MINUTE - 390)) | (1L << (MIN_ROWS - 390)) | (1L << (MOD - 390)) | (1L << (MODE - 390)) | (1L << (MODIFY - 390)) | (1L << (MONTH - 390)) | (1L << (MULTILINESTRING - 390)) | (1L << (MULTIPOINT - 390)) | (1L << (MULTIPOLYGON - 390)) | (1L << (MUTEX - 390)) | (1L << (MYSQL_ERRNO - 390)) | (1L << (NAME - 390)) | (1L << (NAMES - 390)) | (1L << (NATIONAL - 390)) | (1L << (NCHAR - 390)) | (1L << (NDB - 390)) | (1L << (NDBCLUSTER - 390)) | (1L << (NESTED - 390)) | (1L << (NETWORK_NAMESPACE - 390)) | (1L << (NEVER - 390)) | (1L << (NEW - 390)) | (1L << (NEXT - 390)) | (1L << (NO - 390)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (NODEGROUP - 454)) | (1L << (NONE - 454)) | (1L << (NOT - 454)) | (1L << (NOWAIT - 454)) | (1L << (NO_WAIT - 454)) | (1L << (NULL - 454)) | (1L << (NULLS - 454)) | (1L << (NUMBER - 454)) | (1L << (NVARCHAR - 454)) | (1L << (OFF - 454)) | (1L << (OFFSET - 454)) | (1L << (OJ - 454)) | (1L << (OLD - 454)) | (1L << (ONE - 454)) | (1L << (ONLY - 454)) | (1L << (OPEN - 454)) | (1L << (OPTIONAL - 454)) | (1L << (OPTIONS - 454)) | (1L << (ORDINALITY - 454)) | (1L << (OTHERS - 454)) | (1L << (OWNER - 454)) | (1L << (PACK_KEYS - 454)) | (1L << (PAGE - 454)) | (1L << (PARSER - 454)) | (1L << (PARTIAL - 454)) | (1L << (PARTITIONING - 454)) | (1L << (PASSWORD - 454)) | (1L << (PASSWORD_LOCK_TIME - 454)) | (1L << (PATH - 454)) | (1L << (PERSIST - 454)) | (1L << (PERSIST_ONLY - 454)) | (1L << (PHASE - 454)) | (1L << (PLUGIN - 454)) | (1L << (PLUGINS - 454)) | (1L << (PLUGIN_DIR - 454)) | (1L << (POINT - 454)) | (1L << (POLYGON - 454)) | (1L << (PORT - 454)) | (1L << (PRECEDES - 454)) | (1L << (PRECEDING - 454)) | (1L << (PREPARE - 454)) | (1L << (PRESERVE - 454)) | (1L << (PREV - 454)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (PRIVILEGES - 519)) | (1L << (PRIVILEGE_CHECKS_USER - 519)) | (1L << (PROCESS - 519)) | (1L << (PROCESSLIST - 519)) | (1L << (PROFILE - 519)) | (1L << (PROFILES - 519)) | (1L << (PROXY - 519)) | (1L << (QUARTER - 519)) | (1L << (QUERY - 519)) | (1L << (QUICK - 519)) | (1L << (RANDOM - 519)) | (1L << (READ_ONLY - 519)) | (1L << (REBUILD - 519)) | (1L << (RECOVER - 519)) | (1L << (REDO_BUFFER_SIZE - 519)) | (1L << (REDUNDANT - 519)) | (1L << (REFERENCE - 519)) | (1L << (RELAY - 519)) | (1L << (RELAYLOG - 519)) | (1L << (RELAY_LOG_FILE - 519)) | (1L << (RELAY_LOG_POS - 519)) | (1L << (RELAY_THREAD - 519)) | (1L << (RELOAD - 519)) | (1L << (REMOVE - 519)) | (1L << (REORGANIZE - 519)) | (1L << (REPAIR - 519)) | (1L << (REPEATABLE - 519)) | (1L << (REPLACE - 519)) | (1L << (REPLICATE_DO_DB - 519)) | (1L << (REPLICATE_DO_TABLE - 519)) | (1L << (REPLICATE_IGNORE_DB - 519)) | (1L << (REPLICATE_IGNORE_TABLE - 519)) | (1L << (REPLICATE_REWRITE_DB - 519)) | (1L << (REPLICATE_WILD_DO_TABLE - 519)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 519)) | (1L << (REPLICATION - 519)) | (1L << (REQUIRE_ROW_FORMAT - 519)) | (1L << (RESET - 519)) | (1L << (RESOURCE - 519)) | (1L << (RESPECT - 519)) | (1L << (RESTART - 519)) | (1L << (RESTORE - 519)) | (1L << (RESUME - 519)) | (1L << (RETAIN - 519)) | (1L << (RETURNED_SQLSTATE - 519)) | (1L << (RETURNING - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (RETURNS - 583)) | (1L << (REUSE - 583)) | (1L << (REVERSE - 583)) | (1L << (RIGHT - 583)) | (1L << (ROLE - 583)) | (1L << (ROLLBACK - 583)) | (1L << (ROLLUP - 583)) | (1L << (ROTATE - 583)) | (1L << (ROUTINE - 583)) | (1L << (ROW - 583)) | (1L << (ROW_COUNT - 583)) | (1L << (ROW_FORMAT - 583)) | (1L << (RTREE - 583)) | (1L << (SAVEPOINT - 583)) | (1L << (SCHEDULE - 583)) | (1L << (SCHEMA_NAME - 583)) | (1L << (SECOND - 583)) | (1L << (SECONDARY - 583)) | (1L << (SECONDARY_ENGINE - 583)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 583)) | (1L << (SECONDARY_LOAD - 583)) | (1L << (SECONDARY_UNLOAD - 583)) | (1L << (SECURITY - 583)) | (1L << (SERIAL - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (SERVER - 583)) | (1L << (SESSION - 583)) | (1L << (SHARE - 583)) | (1L << (SHUTDOWN - 583)) | (1L << (SIGNED - 583)) | (1L << (SIMPLE - 583)) | (1L << (SLAVE - 583)) | (1L << (SLOW - 583)) | (1L << (SNAPSHOT - 583)) | (1L << (SOCKET - 583)) | (1L << (SOME - 583)) | (1L << (SONAME - 583)) | (1L << (SOUNDS - 583)) | (1L << (SOURCE - 583)) | (1L << (SQL_CACHE - 583)) | (1L << (SQL_AFTER_GTIDS - 583)) | (1L << (SQL_AFTER_MTS_GAPS - 583)) | (1L << (SQL_BEFORE_GTIDS - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (SQL_BUFFER_RESULT - 647)) | (1L << (SQL_NO_CACHE - 647)) | (1L << (SQL_THREAD - 647)) | (1L << (SQL_TSI_DAY - 647)) | (1L << (SQL_TSI_HOUR - 647)) | (1L << (SQL_TSI_MINUTE - 647)) | (1L << (SQL_TSI_MONTH - 647)) | (1L << (SQL_TSI_QUARTER - 647)) | (1L << (SQL_TSI_SECOND - 647)) | (1L << (SQL_TSI_WEEK - 647)) | (1L << (SQL_TSI_YEAR - 647)) | (1L << (SRID - 647)) | (1L << (STACKED - 647)) | (1L << (START - 647)) | (1L << (STARTS - 647)) | (1L << (STATS_AUTO_RECALC - 647)) | (1L << (STATS_PERSISTENT - 647)) | (1L << (STATS_SAMPLE_PAGES - 647)) | (1L << (STATUS - 647)) | (1L << (STOP - 647)) | (1L << (STORAGE - 647)) | (1L << (STREAM - 647)) | (1L << (STRING - 647)) | (1L << (SUBCLASS_ORIGIN - 647)) | (1L << (SUBJECT - 647)) | (1L << (SUBPARTITION - 647)) | (1L << (SUBPARTITIONS - 647)) | (1L << (SUPER - 647)) | (1L << (SUSPEND - 647)) | (1L << (SWAPS - 647)) | (1L << (SWITCHES - 647)) | (1L << (TABLES - 647)) | (1L << (TABLESPACE - 647)) | (1L << (TABLE_CHECKSUM - 647)) | (1L << (TABLE_NAME - 647)) | (1L << (TEMPORARY - 647)) | (1L << (TEMPTABLE - 647)) | (1L << (TEXT - 647)) | (1L << (THAN - 647)) | (1L << (THREAD_PRIORITY - 647)) | (1L << (TIES - 647)) | (1L << (TIME - 647)) | (1L << (TIMESTAMP - 647)) | (1L << (TIMESTAMPADD - 647)) | (1L << (TIMESTAMPDIFF - 647)) | (1L << (TLS - 647)) | (1L << (TRANSACTION - 647)) | (1L << (TRIGGERS - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (TRUE - 711)) | (1L << (TRUNCATE - 711)) | (1L << (TYPE - 711)) | (1L << (TYPES - 711)) | (1L << (UNBOUNDED - 711)) | (1L << (UNCOMMITTED - 711)) | (1L << (UNDEFINED - 711)) | (1L << (UNDOFILE - 711)) | (1L << (UNDO_BUFFER_SIZE - 711)) | (1L << (UNICODE - 711)) | (1L << (UNINSTALL - 711)) | (1L << (UNKNOWN - 711)) | (1L << (UNTIL - 711)) | (1L << (UPGRADE - 711)) | (1L << (USER - 711)) | (1L << (USER_RESOURCES - 711)) | (1L << (USE_FRM - 711)) | (1L << (VALIDATION - 711)) | (1L << (VALUE - 711)) | (1L << (VALUES - 711)) | (1L << (VARIABLES - 711)) | (1L << (VCPU - 711)) | (1L << (VIEW - 711)) | (1L << (VISIBLE - 711)) | (1L << (WAIT - 711)) | (1L << (WARNINGS - 711)) | (1L << (WEEK - 711)) | (1L << (WEIGHT_STRING - 711)) | (1L << (WITHOUT - 711)) | (1L << (WORK - 711)) | (1L << (WRAPPER - 711)) | (1L << (X509 - 711)) | (1L << (XA - 711)) | (1L << (XID - 711)) | (1L << (XML - 711)) | (1L << (YEAR - 711)))) != 0) || ((((_la - 776)) & ~0x3f) == 0 && ((1L << (_la - 776)) & ((1L << (IDENTIFIER_ - 776)) | (1L << (STRING_ - 776)) | (1L << (NUMBER_ - 776)) | (1L << (HEX_DIGIT_ - 776)) | (1L << (BIT_NUM_ - 776)))) != 0)) {
				{
				setState(2228);
				simpleExpr(0);
				}
			}

			setState(2232); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2231);
				caseWhen_();
				}
				}
				setState(2234); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(2237);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2236);
				caseElse_();
				}
			}

			setState(2239);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatetimeExprContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public DatetimeExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterDatetimeExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitDatetimeExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitDatetimeExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatetimeExprContext datetimeExpr() throws RecognitionException {
		DatetimeExprContext _localctx = new DatetimeExprContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_datetimeExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2241);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BinaryLogFileIndexNumberContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DALStatementParser.NUMBER_, 0); }
		public BinaryLogFileIndexNumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binaryLogFileIndexNumber; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterBinaryLogFileIndexNumber(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitBinaryLogFileIndexNumber(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitBinaryLogFileIndexNumber(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BinaryLogFileIndexNumberContext binaryLogFileIndexNumber() throws RecognitionException {
		BinaryLogFileIndexNumberContext _localctx = new BinaryLogFileIndexNumberContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_binaryLogFileIndexNumber);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2243);
			match(NUMBER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseWhen_Context extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(DALStatementParser.WHEN, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(DALStatementParser.THEN, 0); }
		public CaseWhen_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseWhen_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCaseWhen_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCaseWhen_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCaseWhen_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseWhen_Context caseWhen_() throws RecognitionException {
		CaseWhen_Context _localctx = new CaseWhen_Context(_ctx, getState());
		enterRule(_localctx, 372, RULE_caseWhen_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2245);
			match(WHEN);
			setState(2246);
			expr(0);
			setState(2247);
			match(THEN);
			setState(2248);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseElse_Context extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(DALStatementParser.ELSE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public CaseElse_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseElse_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCaseElse_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCaseElse_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCaseElse_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseElse_Context caseElse_() throws RecognitionException {
		CaseElse_Context _localctx = new CaseElse_Context(_ctx, getState());
		enterRule(_localctx, 374, RULE_caseElse_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2250);
			match(ELSE);
			setState(2251);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalExpressionContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(DALStatementParser.INTERVAL, 0); }
		public IntervalValueContext intervalValue() {
			return getRuleContext(IntervalValueContext.class,0);
		}
		public IntervalExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterIntervalExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitIntervalExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitIntervalExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalExpressionContext intervalExpression() throws RecognitionException {
		IntervalExpressionContext _localctx = new IntervalExpressionContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_intervalExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2253);
			match(INTERVAL);
			setState(2254);
			intervalValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalValueContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public IntervalUnit_Context intervalUnit_() {
			return getRuleContext(IntervalUnit_Context.class,0);
		}
		public IntervalValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterIntervalValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitIntervalValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitIntervalValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalValueContext intervalValue() throws RecognitionException {
		IntervalValueContext _localctx = new IntervalValueContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_intervalValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2256);
			expr(0);
			setState(2257);
			intervalUnit_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalUnit_Context extends ParserRuleContext {
		public TerminalNode MICROSECOND() { return getToken(DALStatementParser.MICROSECOND, 0); }
		public TerminalNode SECOND() { return getToken(DALStatementParser.SECOND, 0); }
		public TerminalNode MINUTE() { return getToken(DALStatementParser.MINUTE, 0); }
		public TerminalNode HOUR() { return getToken(DALStatementParser.HOUR, 0); }
		public TerminalNode DAY() { return getToken(DALStatementParser.DAY, 0); }
		public TerminalNode WEEK() { return getToken(DALStatementParser.WEEK, 0); }
		public TerminalNode MONTH() { return getToken(DALStatementParser.MONTH, 0); }
		public TerminalNode QUARTER() { return getToken(DALStatementParser.QUARTER, 0); }
		public TerminalNode YEAR() { return getToken(DALStatementParser.YEAR, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(DALStatementParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(DALStatementParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(DALStatementParser.MINUTE_SECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(DALStatementParser.HOUR_MICROSECOND, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(DALStatementParser.HOUR_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(DALStatementParser.HOUR_MINUTE, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(DALStatementParser.DAY_MICROSECOND, 0); }
		public TerminalNode DAY_SECOND() { return getToken(DALStatementParser.DAY_SECOND, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(DALStatementParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_HOUR() { return getToken(DALStatementParser.DAY_HOUR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(DALStatementParser.YEAR_MONTH, 0); }
		public IntervalUnit_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalUnit_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterIntervalUnit_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitIntervalUnit_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitIntervalUnit_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalUnit_Context intervalUnit_() throws RecognitionException {
		IntervalUnit_Context _localctx = new IntervalUnit_Context(_ctx, getState());
		enterRule(_localctx, 380, RULE_intervalUnit_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2259);
			_la = _input.LA(1);
			if ( !(((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & ((1L << (DAY - 177)) | (1L << (DAY_HOUR - 177)) | (1L << (DAY_MICROSECOND - 177)) | (1L << (DAY_MINUTE - 177)) | (1L << (DAY_SECOND - 177)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (HOUR - 297)) | (1L << (HOUR_MICROSECOND - 297)) | (1L << (HOUR_MINUTE - 297)) | (1L << (HOUR_SECOND - 297)))) != 0) || ((((_la - 424)) & ~0x3f) == 0 && ((1L << (_la - 424)) & ((1L << (MICROSECOND - 424)) | (1L << (MINUTE - 424)) | (1L << (MINUTE_MICROSECOND - 424)) | (1L << (MINUTE_SECOND - 424)) | (1L << (MONTH - 424)))) != 0) || _la==QUARTER || _la==SECOND || _la==SECOND_MICROSECOND || ((((_la - 754)) & ~0x3f) == 0 && ((1L << (_la - 754)) & ((1L << (WEEK - 754)) | (1L << (YEAR - 754)) | (1L << (YEAR_MONTH - 754)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2261);
			match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(DALStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DALStatementParser.BY, 0); }
		public List<OrderByItemContext> orderByItem() {
			return getRuleContexts(OrderByItemContext.class);
		}
		public OrderByItemContext orderByItem(int i) {
			return getRuleContext(OrderByItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2263);
			match(ORDER);
			setState(2264);
			match(BY);
			setState(2265);
			orderByItem();
			setState(2270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2266);
				match(COMMA_);
				setState(2267);
				orderByItem();
				}
				}
				setState(2272);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByItemContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode ASC() { return getToken(DALStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DALStatementParser.DESC, 0); }
		public OrderByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterOrderByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitOrderByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitOrderByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByItemContext orderByItem() throws RecognitionException {
		OrderByItemContext _localctx = new OrderByItemContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_orderByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2276);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
			case 1:
				{
				setState(2273);
				columnName();
				}
				break;
			case 2:
				{
				setState(2274);
				numberLiterals();
				}
				break;
			case 3:
				{
				setState(2275);
				expr(0);
				}
				break;
			}
			setState(2279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(2278);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeNameContext dataTypeName() {
			return getRuleContext(DataTypeNameContext.class,0);
		}
		public DataTypeLengthContext dataTypeLength() {
			return getRuleContext(DataTypeLengthContext.class,0);
		}
		public CharacterSet_Context characterSet_() {
			return getRuleContext(CharacterSet_Context.class,0);
		}
		public CollateClause_Context collateClause_() {
			return getRuleContext(CollateClause_Context.class,0);
		}
		public TerminalNode ZEROFILL() { return getToken(DALStatementParser.ZEROFILL, 0); }
		public TerminalNode UNSIGNED() { return getToken(DALStatementParser.UNSIGNED, 0); }
		public TerminalNode SIGNED() { return getToken(DALStatementParser.SIGNED, 0); }
		public CollectionOptionsContext collectionOptions() {
			return getRuleContext(CollectionOptionsContext.class,0);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_dataType);
		int _la;
		try {
			setState(2305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2281);
				dataTypeName();
				setState(2283);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(2282);
					dataTypeLength();
					}
				}

				setState(2286);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (CHAR - 121)) | (1L << (CHARACTER - 121)) | (1L << (CHARSET - 121)))) != 0)) {
					{
					setState(2285);
					characterSet_();
					}
				}

				setState(2289);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2288);
					collateClause_();
					}
				}

				setState(2292);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIGNED || _la==UNSIGNED) {
					{
					setState(2291);
					_la = _input.LA(1);
					if ( !(_la==SIGNED || _la==UNSIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2295);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ZEROFILL) {
					{
					setState(2294);
					match(ZEROFILL);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2297);
				dataTypeName();
				setState(2298);
				collectionOptions();
				setState(2300);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 121)) & ~0x3f) == 0 && ((1L << (_la - 121)) & ((1L << (CHAR - 121)) | (1L << (CHARACTER - 121)) | (1L << (CHARSET - 121)))) != 0)) {
					{
					setState(2299);
					characterSet_();
					}
				}

				setState(2303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2302);
					collateClause_();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeNameContext extends ParserRuleContext {
		public TerminalNode INTEGER() { return getToken(DALStatementParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(DALStatementParser.INT, 0); }
		public TerminalNode SMALLINT() { return getToken(DALStatementParser.SMALLINT, 0); }
		public TerminalNode TINYINT() { return getToken(DALStatementParser.TINYINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(DALStatementParser.MEDIUMINT, 0); }
		public TerminalNode BIGINT() { return getToken(DALStatementParser.BIGINT, 0); }
		public TerminalNode DECIMAL() { return getToken(DALStatementParser.DECIMAL, 0); }
		public TerminalNode NUMERIC() { return getToken(DALStatementParser.NUMERIC, 0); }
		public TerminalNode FLOAT() { return getToken(DALStatementParser.FLOAT, 0); }
		public TerminalNode DOUBLE() { return getToken(DALStatementParser.DOUBLE, 0); }
		public TerminalNode BIT() { return getToken(DALStatementParser.BIT, 0); }
		public TerminalNode BOOL() { return getToken(DALStatementParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(DALStatementParser.BOOLEAN, 0); }
		public TerminalNode DEC() { return getToken(DALStatementParser.DEC, 0); }
		public TerminalNode DATE() { return getToken(DALStatementParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(DALStatementParser.DATETIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DALStatementParser.TIMESTAMP, 0); }
		public TerminalNode TIME() { return getToken(DALStatementParser.TIME, 0); }
		public TerminalNode YEAR() { return getToken(DALStatementParser.YEAR, 0); }
		public TerminalNode CHAR() { return getToken(DALStatementParser.CHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(DALStatementParser.VARCHAR, 0); }
		public TerminalNode BINARY() { return getToken(DALStatementParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(DALStatementParser.VARBINARY, 0); }
		public TerminalNode TINYBLOB() { return getToken(DALStatementParser.TINYBLOB, 0); }
		public TerminalNode TINYTEXT() { return getToken(DALStatementParser.TINYTEXT, 0); }
		public TerminalNode BLOB() { return getToken(DALStatementParser.BLOB, 0); }
		public TerminalNode TEXT() { return getToken(DALStatementParser.TEXT, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(DALStatementParser.MEDIUMBLOB, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(DALStatementParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGBLOB() { return getToken(DALStatementParser.LONGBLOB, 0); }
		public TerminalNode LONGTEXT() { return getToken(DALStatementParser.LONGTEXT, 0); }
		public TerminalNode ENUM() { return getToken(DALStatementParser.ENUM, 0); }
		public TerminalNode SET() { return getToken(DALStatementParser.SET, 0); }
		public TerminalNode GEOMETRY() { return getToken(DALStatementParser.GEOMETRY, 0); }
		public TerminalNode POINT() { return getToken(DALStatementParser.POINT, 0); }
		public TerminalNode LINESTRING() { return getToken(DALStatementParser.LINESTRING, 0); }
		public TerminalNode POLYGON() { return getToken(DALStatementParser.POLYGON, 0); }
		public TerminalNode MULTIPOINT() { return getToken(DALStatementParser.MULTIPOINT, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(DALStatementParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(DALStatementParser.MULTIPOLYGON, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(DALStatementParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode JSON() { return getToken(DALStatementParser.JSON, 0); }
		public TerminalNode UNSIGNED() { return getToken(DALStatementParser.UNSIGNED, 0); }
		public TerminalNode SIGNED() { return getToken(DALStatementParser.SIGNED, 0); }
		public TerminalNode CHARACTER() { return getToken(DALStatementParser.CHARACTER, 0); }
		public TerminalNode VARYING() { return getToken(DALStatementParser.VARYING, 0); }
		public TerminalNode FIXED() { return getToken(DALStatementParser.FIXED, 0); }
		public TerminalNode FLOAT4() { return getToken(DALStatementParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(DALStatementParser.FLOAT8, 0); }
		public TerminalNode INT1() { return getToken(DALStatementParser.INT1, 0); }
		public TerminalNode INT2() { return getToken(DALStatementParser.INT2, 0); }
		public TerminalNode INT3() { return getToken(DALStatementParser.INT3, 0); }
		public TerminalNode INT4() { return getToken(DALStatementParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(DALStatementParser.INT8, 0); }
		public TerminalNode LONG() { return getToken(DALStatementParser.LONG, 0); }
		public TerminalNode MIDDLEINT() { return getToken(DALStatementParser.MIDDLEINT, 0); }
		public DataTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterDataTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitDataTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitDataTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeNameContext dataTypeName() throws RecognitionException {
		DataTypeNameContext _localctx = new DataTypeNameContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_dataTypeName);
		try {
			setState(2367);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2307);
				match(INTEGER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2308);
				match(INT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2309);
				match(SMALLINT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2310);
				match(TINYINT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2311);
				match(MEDIUMINT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2312);
				match(BIGINT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2313);
				match(DECIMAL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2314);
				match(NUMERIC);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2315);
				match(FLOAT);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2316);
				match(DOUBLE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2317);
				match(BIT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2318);
				match(BOOL);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2319);
				match(BOOLEAN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2320);
				match(DEC);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2321);
				match(DATE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2322);
				match(DATETIME);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2323);
				match(TIMESTAMP);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2324);
				match(TIME);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2325);
				match(YEAR);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2326);
				match(CHAR);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2327);
				match(VARCHAR);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2328);
				match(BINARY);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2329);
				match(VARBINARY);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2330);
				match(TINYBLOB);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2331);
				match(TINYTEXT);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2332);
				match(BLOB);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2333);
				match(TEXT);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(2334);
				match(MEDIUMBLOB);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(2335);
				match(MEDIUMTEXT);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(2336);
				match(LONGBLOB);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(2337);
				match(LONGTEXT);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(2338);
				match(ENUM);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(2339);
				match(SET);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(2340);
				match(GEOMETRY);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(2341);
				match(POINT);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(2342);
				match(LINESTRING);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(2343);
				match(POLYGON);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(2344);
				match(MULTIPOINT);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(2345);
				match(MULTILINESTRING);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(2346);
				match(MULTIPOLYGON);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(2347);
				match(GEOMETRYCOLLECTION);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(2348);
				match(JSON);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(2349);
				match(UNSIGNED);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(2350);
				match(SIGNED);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(2351);
				match(CHARACTER);
				setState(2352);
				match(VARYING);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(2353);
				match(FIXED);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(2354);
				match(FLOAT4);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(2355);
				match(FLOAT8);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(2356);
				match(INT1);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(2357);
				match(INT2);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(2358);
				match(INT3);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(2359);
				match(INT4);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(2360);
				match(INT8);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(2361);
				match(LONG);
				setState(2362);
				match(VARBINARY);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(2363);
				match(LONG);
				setState(2364);
				match(VARCHAR);
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(2365);
				match(LONG);
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(2366);
				match(MIDDLEINT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeLengthContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(DALStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(DALStatementParser.NUMBER_, i);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(DALStatementParser.COMMA_, 0); }
		public DataTypeLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterDataTypeLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitDataTypeLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitDataTypeLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeLengthContext dataTypeLength() throws RecognitionException {
		DataTypeLengthContext _localctx = new DataTypeLengthContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_dataTypeLength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2369);
			match(LP_);
			setState(2370);
			match(NUMBER_);
			setState(2373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(2371);
				match(COMMA_);
				setState(2372);
				match(NUMBER_);
				}
			}

			setState(2375);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionOptionsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public List<TerminalNode> STRING_() { return getTokens(DALStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DALStatementParser.STRING_, i);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCollectionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCollectionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCollectionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionOptionsContext collectionOptions() throws RecognitionException {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_collectionOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2377);
			match(LP_);
			setState(2378);
			match(STRING_);
			setState(2383);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2379);
				match(COMMA_);
				setState(2380);
				match(STRING_);
				}
				}
				setState(2385);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2386);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterSet_Context extends ParserRuleContext {
		public IgnoredIdentifier_Context ignoredIdentifier_() {
			return getRuleContext(IgnoredIdentifier_Context.class,0);
		}
		public TerminalNode CHARSET() { return getToken(DALStatementParser.CHARSET, 0); }
		public TerminalNode CHAR() { return getToken(DALStatementParser.CHAR, 0); }
		public TerminalNode SET() { return getToken(DALStatementParser.SET, 0); }
		public TerminalNode CHARACTER() { return getToken(DALStatementParser.CHARACTER, 0); }
		public TerminalNode EQ_() { return getToken(DALStatementParser.EQ_, 0); }
		public CharacterSet_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterSet_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCharacterSet_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCharacterSet_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCharacterSet_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterSet_Context characterSet_() throws RecognitionException {
		CharacterSet_Context _localctx = new CharacterSet_Context(_ctx, getState());
		enterRule(_localctx, 396, RULE_characterSet_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2393);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARSET:
				{
				setState(2388);
				match(CHARSET);
				}
				break;
			case CHAR:
				{
				setState(2389);
				match(CHAR);
				setState(2390);
				match(SET);
				}
				break;
			case CHARACTER:
				{
				setState(2391);
				match(CHARACTER);
				setState(2392);
				match(SET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2396);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(2395);
				match(EQ_);
				}
			}

			setState(2398);
			ignoredIdentifier_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateClause_Context extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(DALStatementParser.COLLATE, 0); }
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public IgnoredIdentifier_Context ignoredIdentifier_() {
			return getRuleContext(IgnoredIdentifier_Context.class,0);
		}
		public TerminalNode EQ_() { return getToken(DALStatementParser.EQ_, 0); }
		public CollateClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collateClause_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCollateClause_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCollateClause_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCollateClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateClause_Context collateClause_() throws RecognitionException {
		CollateClause_Context _localctx = new CollateClause_Context(_ctx, getState());
		enterRule(_localctx, 398, RULE_collateClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2400);
			match(COLLATE);
			setState(2402);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(2401);
				match(EQ_);
				}
			}

			setState(2406);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				{
				setState(2404);
				match(STRING_);
				}
				break;
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case GROUP_CONCAT:
			case CAST:
			case POSITION:
			case SUBSTRING:
			case SUBSTR:
			case EXTRACT:
			case TRIM:
			case LAST_DAY:
			case TRADITIONAL:
			case TREE:
			case MYSQL_ADMIN:
			case INSTANT:
			case INPLACE:
			case COPY:
			case UL_BINARY:
			case AUTOCOMMIT:
			case ACCOUNT:
			case ACTION:
			case ACTIVE:
			case ADMIN:
			case AFTER:
			case AGAINST:
			case AGGREGATE:
			case ALGORITHM:
			case ALWAYS:
			case ANY:
			case ASCII:
			case AT:
			case ATTRIBUTE:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG:
			case AVG_ROW_LENGTH:
			case BACKUP:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case BUCKETS:
			case BYTE:
			case CACHE:
			case CASCADED:
			case CATALOG_NAME:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLONE:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLLATION:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETION:
			case COMPONENT:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONTAINS:
			case CONTEXT:
			case CPU:
			case CURRENT:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DATE:
			case DATETIME:
			case DAY:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DEFINITION:
			case DELAY_KEY_WRITE:
			case DESCRIPTION:
			case DIAGNOSTICS:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENFORCED:
			case ENGINE:
			case ENGINES:
			case ENGINE_ATTRIBUTE:
			case ENUM:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUDE:
			case EXECUTE:
			case EXPANSION:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWING:
			case FOLLOWS:
			case FORMAT:
			case FULL:
			case GENERAL:
			case GEOMCOLLECTION:
			case GEOMETRY:
			case GEOMETRYCOLLECTION:
			case GET_FORMAT:
			case GET_MASTER_PUBLIC_KEY:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTOGRAM:
			case HISTORY:
			case HOST:
			case HOSTS:
			case HOUR:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INACTIVE:
			case INDEXES:
			case INITIAL_SIZE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case JSON_VALUE:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LINESTRING:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOCKS:
			case LOGFILE:
			case LOGS:
			case MANAGED:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_COMPRESSION_ALGORITHMS:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_PUBLIC_KEY_PATH:
			case MASTER_RETRY_COUNT:
			case MASTER_SERVER_ID:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_CIPHERSUITES:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MASTER_ZSTD_COMPRESSION_LEVEL:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMORY:
			case MERGE:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MIGRATE:
			case MINUTE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MONTH:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case MUTEX:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NDB:
			case NDBCLUSTER:
			case NESTED:
			case NETWORK_NAMESPACE:
			case NEVER:
			case NEW:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case NOWAIT:
			case NO_WAIT:
			case NULLS:
			case NUMBER:
			case NVARCHAR:
			case OFF:
			case OFFSET:
			case OJ:
			case OLD:
			case ONE:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PATH:
			case PERSIST:
			case PERSIST_ONLY:
			case PHASE:
			case PLUGIN:
			case PLUGINS:
			case PLUGIN_DIR:
			case POINT:
			case POLYGON:
			case PORT:
			case PRECEDES:
			case PRECEDING:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PRIVILEGES:
			case PRIVILEGE_CHECKS_USER:
			case PROCESS:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUARTER:
			case QUERY:
			case QUICK:
			case RANDOM:
			case READ_ONLY:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case REFERENCE:
			case RELAY:
			case RELAYLOG:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAY_THREAD:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPEATABLE:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case REQUIRE_ROW_FORMAT:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESUME:
			case RETAIN:
			case RETURNED_SQLSTATE:
			case RETURNING:
			case RETURNS:
			case REUSE:
			case REVERSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROUTINE:
			case ROW_COUNT:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SCHEMA_NAME:
			case SECOND:
			case SECONDARY:
			case SECONDARY_ENGINE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SECONDARY_LOAD:
			case SECONDARY_UNLOAD:
			case SECURITY:
			case SERIAL:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHUTDOWN:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_CACHE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case SQL_TSI_DAY:
			case SQL_TSI_HOUR:
			case SQL_TSI_MINUTE:
			case SQL_TSI_MONTH:
			case SQL_TSI_QUARTER:
			case SQL_TSI_SECOND:
			case SQL_TSI_WEEK:
			case SQL_TSI_YEAR:
			case SRID:
			case STACKED:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUPER:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLES:
			case TABLESPACE:
			case TABLE_CHECKSUM:
			case TABLE_NAME:
			case TEMPORARY:
			case TEMPTABLE:
			case TEXT:
			case THAN:
			case THREAD_PRIORITY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TLS:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNICODE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USER_RESOURCES:
			case USE_FRM:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VCPU:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WEEK:
			case WEIGHT_STRING:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XID:
			case XML:
			case YEAR:
			case IDENTIFIER_:
				{
				setState(2405);
				ignoredIdentifier_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IgnoredIdentifier_Context extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT_() { return getToken(DALStatementParser.DOT_, 0); }
		public IgnoredIdentifier_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredIdentifier_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterIgnoredIdentifier_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitIgnoredIdentifier_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitIgnoredIdentifier_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredIdentifier_Context ignoredIdentifier_() throws RecognitionException {
		IgnoredIdentifier_Context _localctx = new IgnoredIdentifier_Context(_ctx, getState());
		enterRule(_localctx, 400, RULE_ignoredIdentifier_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2408);
			identifier();
			setState(2411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				setState(2409);
				match(DOT_);
				setState(2410);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IgnoredIdentifiers_Context extends ParserRuleContext {
		public List<IgnoredIdentifier_Context> ignoredIdentifier_() {
			return getRuleContexts(IgnoredIdentifier_Context.class);
		}
		public IgnoredIdentifier_Context ignoredIdentifier_(int i) {
			return getRuleContext(IgnoredIdentifier_Context.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public IgnoredIdentifiers_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredIdentifiers_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterIgnoredIdentifiers_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitIgnoredIdentifiers_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitIgnoredIdentifiers_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredIdentifiers_Context ignoredIdentifiers_() throws RecognitionException {
		IgnoredIdentifiers_Context _localctx = new IgnoredIdentifiers_Context(_ctx, getState());
		enterRule(_localctx, 402, RULE_ignoredIdentifiers_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2413);
			ignoredIdentifier_();
			setState(2418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2414);
				match(COMMA_);
				setState(2415);
				ignoredIdentifier_();
				}
				}
				setState(2420);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldOrVarSpecContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public FieldOrVarSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldOrVarSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterFieldOrVarSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitFieldOrVarSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitFieldOrVarSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FieldOrVarSpecContext fieldOrVarSpec() throws RecognitionException {
		FieldOrVarSpecContext _localctx = new FieldOrVarSpecContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_fieldOrVarSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2421);
			match(LP_);
			setState(2430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MAX) | (1L << MIN) | (1L << SUM) | (1L << COUNT) | (1L << GROUP_CONCAT) | (1L << CAST) | (1L << POSITION) | (1L << SUBSTRING) | (1L << SUBSTR) | (1L << EXTRACT) | (1L << TRIM) | (1L << LAST_DAY) | (1L << TRADITIONAL) | (1L << TREE) | (1L << MYSQL_ADMIN) | (1L << INSTANT) | (1L << INPLACE) | (1L << COPY))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UL_BINARY - 64)) | (1L << (AUTOCOMMIT - 64)) | (1L << (ACCOUNT - 64)) | (1L << (ACTION - 64)) | (1L << (ACTIVE - 64)) | (1L << (ADMIN - 64)) | (1L << (AFTER - 64)) | (1L << (AGAINST - 64)) | (1L << (AGGREGATE - 64)) | (1L << (ALGORITHM - 64)) | (1L << (ALWAYS - 64)) | (1L << (ANY - 64)) | (1L << (ASCII - 64)) | (1L << (AT - 64)) | (1L << (ATTRIBUTE - 64)) | (1L << (AUTOEXTEND_SIZE - 64)) | (1L << (AUTO_INCREMENT - 64)) | (1L << (AVG - 64)) | (1L << (AVG_ROW_LENGTH - 64)) | (1L << (BACKUP - 64)) | (1L << (BEGIN - 64)) | (1L << (BINLOG - 64)) | (1L << (BIT - 64)) | (1L << (BLOCK - 64)) | (1L << (BOOL - 64)) | (1L << (BOOLEAN - 64)) | (1L << (BTREE - 64)) | (1L << (BUCKETS - 64)) | (1L << (BYTE - 64)) | (1L << (CACHE - 64)) | (1L << (CASCADED - 64)) | (1L << (CATALOG_NAME - 64)) | (1L << (CHAIN - 64)) | (1L << (CHANGED - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHARSET - 64)) | (1L << (CHECKSUM - 64)) | (1L << (CIPHER - 64)) | (1L << (CLASS_ORIGIN - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CLIENT - 128)) | (1L << (CLONE - 128)) | (1L << (CLOSE - 128)) | (1L << (COALESCE - 128)) | (1L << (CODE - 128)) | (1L << (COLLATION - 128)) | (1L << (COLUMNS - 128)) | (1L << (COLUMN_FORMAT - 128)) | (1L << (COMMENT - 128)) | (1L << (COMMIT - 128)) | (1L << (COMMITTED - 128)) | (1L << (COMPACT - 128)) | (1L << (COMPLETION - 128)) | (1L << (COMPONENT - 128)) | (1L << (COMPRESSED - 128)) | (1L << (COMPRESSION - 128)) | (1L << (CONCURRENT - 128)) | (1L << (CONNECTION - 128)) | (1L << (CONSISTENT - 128)) | (1L << (CONSTRAINT_CATALOG - 128)) | (1L << (CONSTRAINT_NAME - 128)) | (1L << (CONSTRAINT_SCHEMA - 128)) | (1L << (CONTAINS - 128)) | (1L << (CONTEXT - 128)) | (1L << (CPU - 128)) | (1L << (CURRENT - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (DATA - 128)) | (1L << (DATAFILE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEFAULT_AUTH - 128)) | (1L << (DEFINER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY_KEY_WRITE - 128)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (DESCRIPTION - 196)) | (1L << (DIAGNOSTICS - 196)) | (1L << (DIRECTORY - 196)) | (1L << (DISABLE - 196)) | (1L << (DISCARD - 196)) | (1L << (DISK - 196)) | (1L << (DO - 196)) | (1L << (DUMPFILE - 196)) | (1L << (DUPLICATE - 196)) | (1L << (DYNAMIC - 196)) | (1L << (ENABLE - 196)) | (1L << (ENCRYPTION - 196)) | (1L << (END - 196)) | (1L << (ENDS - 196)) | (1L << (ENFORCED - 196)) | (1L << (ENGINE - 196)) | (1L << (ENGINES - 196)) | (1L << (ENGINE_ATTRIBUTE - 196)) | (1L << (ENUM - 196)) | (1L << (ERROR - 196)) | (1L << (ERRORS - 196)) | (1L << (ESCAPE - 196)) | (1L << (EVENT - 196)) | (1L << (EVENTS - 196)) | (1L << (EVERY - 196)) | (1L << (EXCHANGE - 196)) | (1L << (EXCLUDE - 196)) | (1L << (EXECUTE - 196)) | (1L << (EXPANSION - 196)) | (1L << (EXPIRE - 196)) | (1L << (EXPORT - 196)) | (1L << (EXTENDED - 196)) | (1L << (EXTENT_SIZE - 196)) | (1L << (FAILED_LOGIN_ATTEMPTS - 196)) | (1L << (FAST - 196)) | (1L << (FAULTS - 196)) | (1L << (FIELDS - 196)) | (1L << (FILE - 196)) | (1L << (FILE_BLOCK_SIZE - 196)) | (1L << (FILTER - 196)) | (1L << (FIRST - 196)) | (1L << (FIXED - 196)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (FLUSH - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FOLLOWS - 261)) | (1L << (FORMAT - 261)) | (1L << (FULL - 261)) | (1L << (GENERAL - 261)) | (1L << (GEOMCOLLECTION - 261)) | (1L << (GEOMETRY - 261)) | (1L << (GEOMETRYCOLLECTION - 261)) | (1L << (GET_FORMAT - 261)) | (1L << (GET_MASTER_PUBLIC_KEY - 261)) | (1L << (GLOBAL - 261)) | (1L << (GRANTS - 261)) | (1L << (GROUP_REPLICATION - 261)) | (1L << (HANDLER - 261)) | (1L << (HASH - 261)) | (1L << (HELP - 261)) | (1L << (HISTOGRAM - 261)) | (1L << (HISTORY - 261)) | (1L << (HOST - 261)) | (1L << (HOSTS - 261)) | (1L << (HOUR - 261)) | (1L << (IDENTIFIED - 261)) | (1L << (IGNORE_SERVER_IDS - 261)) | (1L << (IMPORT - 261)) | (1L << (INACTIVE - 261)) | (1L << (INDEXES - 261)) | (1L << (INITIAL_SIZE - 261)) | (1L << (INSERT_METHOD - 261)) | (1L << (INSTALL - 261)) | (1L << (INSTANCE - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (JSON_VALUE - 328)) | (1L << (KEY_BLOCK_SIZE - 328)) | (1L << (LANGUAGE - 328)) | (1L << (LAST - 328)) | (1L << (LEAVES - 328)) | (1L << (LESS - 328)) | (1L << (LEVEL - 328)) | (1L << (LINESTRING - 328)) | (1L << (LIST - 328)) | (1L << (LOCAL - 328)) | (1L << (LOCKED - 328)) | (1L << (LOCKS - 328)) | (1L << (LOGFILE - 328)) | (1L << (LOGS - 328)) | (1L << (MANAGED - 328)) | (1L << (MASTER - 328)) | (1L << (MASTER_AUTO_POSITION - 328)) | (1L << (MASTER_COMPRESSION_ALGORITHMS - 328)) | (1L << (MASTER_CONNECT_RETRY - 328)) | (1L << (MASTER_DELAY - 328)) | (1L << (MASTER_HEARTBEAT_PERIOD - 328)) | (1L << (MASTER_HOST - 328)) | (1L << (MASTER_LOG_FILE - 328)) | (1L << (MASTER_LOG_POS - 328)) | (1L << (MASTER_PASSWORD - 328)) | (1L << (MASTER_PORT - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (MASTER_PUBLIC_KEY_PATH - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SERVER_ID - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_CIPHERSUITES - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MEMORY - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MICROSECOND - 392)) | (1L << (MIGRATE - 392)) | (1L << (MINUTE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MONTH - 392)) | (1L << (MULTILINESTRING - 392)) | (1L << (MULTIPOINT - 392)) | (1L << (MULTIPOLYGON - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NATIONAL - 392)) | (1L << (NCHAR - 392)) | (1L << (NDB - 392)) | (1L << (NDBCLUSTER - 392)) | (1L << (NESTED - 392)) | (1L << (NETWORK_NAMESPACE - 392)) | (1L << (NEVER - 392)) | (1L << (NEW - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (NOWAIT - 457)) | (1L << (NO_WAIT - 457)) | (1L << (NULLS - 457)) | (1L << (NUMBER - 457)) | (1L << (NVARCHAR - 457)) | (1L << (OFF - 457)) | (1L << (OFFSET - 457)) | (1L << (OJ - 457)) | (1L << (OLD - 457)) | (1L << (ONE - 457)) | (1L << (ONLY - 457)) | (1L << (OPEN - 457)) | (1L << (OPTIONAL - 457)) | (1L << (OPTIONS - 457)) | (1L << (ORDINALITY - 457)) | (1L << (OTHERS - 457)) | (1L << (OWNER - 457)) | (1L << (PACK_KEYS - 457)) | (1L << (PAGE - 457)) | (1L << (PARSER - 457)) | (1L << (PARTIAL - 457)) | (1L << (PARTITIONING - 457)) | (1L << (PASSWORD - 457)) | (1L << (PASSWORD_LOCK_TIME - 457)) | (1L << (PATH - 457)) | (1L << (PERSIST - 457)) | (1L << (PERSIST_ONLY - 457)) | (1L << (PHASE - 457)) | (1L << (PLUGIN - 457)) | (1L << (PLUGINS - 457)) | (1L << (PLUGIN_DIR - 457)) | (1L << (POINT - 457)) | (1L << (POLYGON - 457)) | (1L << (PORT - 457)) | (1L << (PRECEDES - 457)) | (1L << (PRECEDING - 457)) | (1L << (PREPARE - 457)) | (1L << (PRESERVE - 457)) | (1L << (PREV - 457)) | (1L << (PRIVILEGES - 457)) | (1L << (PRIVILEGE_CHECKS_USER - 457)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (PROCESS - 522)) | (1L << (PROCESSLIST - 522)) | (1L << (PROFILE - 522)) | (1L << (PROFILES - 522)) | (1L << (PROXY - 522)) | (1L << (QUARTER - 522)) | (1L << (QUERY - 522)) | (1L << (QUICK - 522)) | (1L << (RANDOM - 522)) | (1L << (READ_ONLY - 522)) | (1L << (REBUILD - 522)) | (1L << (RECOVER - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (REDUNDANT - 522)) | (1L << (REFERENCE - 522)) | (1L << (RELAY - 522)) | (1L << (RELAYLOG - 522)) | (1L << (RELAY_LOG_FILE - 522)) | (1L << (RELAY_LOG_POS - 522)) | (1L << (RELAY_THREAD - 522)) | (1L << (RELOAD - 522)) | (1L << (REMOVE - 522)) | (1L << (REORGANIZE - 522)) | (1L << (REPAIR - 522)) | (1L << (REPEATABLE - 522)) | (1L << (REPLICATE_DO_DB - 522)) | (1L << (REPLICATE_DO_TABLE - 522)) | (1L << (REPLICATE_IGNORE_DB - 522)) | (1L << (REPLICATE_IGNORE_TABLE - 522)) | (1L << (REPLICATE_REWRITE_DB - 522)) | (1L << (REPLICATE_WILD_DO_TABLE - 522)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 522)) | (1L << (REPLICATION - 522)) | (1L << (REQUIRE_ROW_FORMAT - 522)) | (1L << (RESET - 522)) | (1L << (RESOURCE - 522)) | (1L << (RESPECT - 522)) | (1L << (RESTART - 522)) | (1L << (RESTORE - 522)) | (1L << (RESUME - 522)) | (1L << (RETAIN - 522)) | (1L << (RETURNED_SQLSTATE - 522)) | (1L << (RETURNING - 522)) | (1L << (RETURNS - 522)) | (1L << (REUSE - 522)) | (1L << (REVERSE - 522)))) != 0) || ((((_la - 589)) & ~0x3f) == 0 && ((1L << (_la - 589)) & ((1L << (ROLE - 589)) | (1L << (ROLLBACK - 589)) | (1L << (ROLLUP - 589)) | (1L << (ROTATE - 589)) | (1L << (ROUTINE - 589)) | (1L << (ROW_COUNT - 589)) | (1L << (ROW_FORMAT - 589)) | (1L << (RTREE - 589)) | (1L << (SAVEPOINT - 589)) | (1L << (SCHEDULE - 589)) | (1L << (SCHEMA_NAME - 589)) | (1L << (SECOND - 589)) | (1L << (SECONDARY - 589)) | (1L << (SECONDARY_ENGINE - 589)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 589)) | (1L << (SECONDARY_LOAD - 589)) | (1L << (SECONDARY_UNLOAD - 589)) | (1L << (SECURITY - 589)) | (1L << (SERIAL - 589)) | (1L << (SERIALIZABLE - 589)) | (1L << (SERVER - 589)) | (1L << (SESSION - 589)) | (1L << (SHARE - 589)) | (1L << (SHUTDOWN - 589)) | (1L << (SIGNED - 589)) | (1L << (SIMPLE - 589)) | (1L << (SLAVE - 589)) | (1L << (SLOW - 589)) | (1L << (SNAPSHOT - 589)) | (1L << (SOCKET - 589)) | (1L << (SOME - 589)) | (1L << (SONAME - 589)) | (1L << (SOUNDS - 589)) | (1L << (SOURCE - 589)) | (1L << (SQL_CACHE - 589)) | (1L << (SQL_AFTER_GTIDS - 589)) | (1L << (SQL_AFTER_MTS_GAPS - 589)) | (1L << (SQL_BEFORE_GTIDS - 589)) | (1L << (SQL_BUFFER_RESULT - 589)) | (1L << (SQL_NO_CACHE - 589)) | (1L << (SQL_THREAD - 589)) | (1L << (SQL_TSI_DAY - 589)))) != 0) || ((((_la - 653)) & ~0x3f) == 0 && ((1L << (_la - 653)) & ((1L << (SQL_TSI_HOUR - 653)) | (1L << (SQL_TSI_MINUTE - 653)) | (1L << (SQL_TSI_MONTH - 653)) | (1L << (SQL_TSI_QUARTER - 653)) | (1L << (SQL_TSI_SECOND - 653)) | (1L << (SQL_TSI_WEEK - 653)) | (1L << (SQL_TSI_YEAR - 653)) | (1L << (SRID - 653)) | (1L << (STACKED - 653)) | (1L << (START - 653)) | (1L << (STARTS - 653)) | (1L << (STATS_AUTO_RECALC - 653)) | (1L << (STATS_PERSISTENT - 653)) | (1L << (STATS_SAMPLE_PAGES - 653)) | (1L << (STATUS - 653)) | (1L << (STOP - 653)) | (1L << (STORAGE - 653)) | (1L << (STREAM - 653)) | (1L << (STRING - 653)) | (1L << (SUBCLASS_ORIGIN - 653)) | (1L << (SUBJECT - 653)) | (1L << (SUBPARTITION - 653)) | (1L << (SUBPARTITIONS - 653)) | (1L << (SUPER - 653)) | (1L << (SUSPEND - 653)) | (1L << (SWAPS - 653)) | (1L << (SWITCHES - 653)) | (1L << (TABLES - 653)) | (1L << (TABLESPACE - 653)) | (1L << (TABLE_CHECKSUM - 653)) | (1L << (TABLE_NAME - 653)) | (1L << (TEMPORARY - 653)) | (1L << (TEMPTABLE - 653)) | (1L << (TEXT - 653)) | (1L << (THAN - 653)) | (1L << (THREAD_PRIORITY - 653)) | (1L << (TIES - 653)) | (1L << (TIME - 653)) | (1L << (TIMESTAMP - 653)) | (1L << (TIMESTAMPADD - 653)) | (1L << (TIMESTAMPDIFF - 653)) | (1L << (TLS - 653)) | (1L << (TRANSACTION - 653)) | (1L << (TRIGGERS - 653)) | (1L << (TRUNCATE - 653)) | (1L << (TYPE - 653)) | (1L << (TYPES - 653)) | (1L << (UNBOUNDED - 653)) | (1L << (UNCOMMITTED - 653)))) != 0) || ((((_la - 717)) & ~0x3f) == 0 && ((1L << (_la - 717)) & ((1L << (UNDEFINED - 717)) | (1L << (UNDOFILE - 717)) | (1L << (UNDO_BUFFER_SIZE - 717)) | (1L << (UNICODE - 717)) | (1L << (UNINSTALL - 717)) | (1L << (UNKNOWN - 717)) | (1L << (UNTIL - 717)) | (1L << (UPGRADE - 717)) | (1L << (USER - 717)) | (1L << (USER_RESOURCES - 717)) | (1L << (USE_FRM - 717)) | (1L << (VALIDATION - 717)) | (1L << (VALUE - 717)) | (1L << (VARIABLES - 717)) | (1L << (VCPU - 717)) | (1L << (VIEW - 717)) | (1L << (VISIBLE - 717)) | (1L << (WAIT - 717)) | (1L << (WARNINGS - 717)) | (1L << (WEEK - 717)) | (1L << (WEIGHT_STRING - 717)) | (1L << (WITHOUT - 717)) | (1L << (WORK - 717)) | (1L << (WRAPPER - 717)) | (1L << (X509 - 717)) | (1L << (XA - 717)) | (1L << (XID - 717)) | (1L << (XML - 717)) | (1L << (YEAR - 717)) | (1L << (IDENTIFIER_ - 717)))) != 0)) {
				{
				setState(2422);
				identifier();
				setState(2427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(2423);
					match(COMMA_);
					setState(2424);
					identifier();
					}
					}
					setState(2429);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(2432);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotExistClause_Context extends ParserRuleContext {
		public TerminalNode IF() { return getToken(DALStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(DALStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(DALStatementParser.EXISTS, 0); }
		public NotExistClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notExistClause_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterNotExistClause_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitNotExistClause_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitNotExistClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotExistClause_Context notExistClause_() throws RecognitionException {
		NotExistClause_Context _localctx = new NotExistClause_Context(_ctx, getState());
		enterRule(_localctx, 406, RULE_notExistClause_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2434);
			match(IF);
			setState(2435);
			match(NOT);
			setState(2436);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistClause_Context extends ParserRuleContext {
		public TerminalNode IF() { return getToken(DALStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DALStatementParser.EXISTS, 0); }
		public ExistClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existClause_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterExistClause_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitExistClause_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitExistClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistClause_Context existClause_() throws RecognitionException {
		ExistClause_Context _localctx = new ExistClause_Context(_ctx, getState());
		enterRule(_localctx, 408, RULE_existClause_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2438);
			match(IF);
			setState(2439);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PatternContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public PatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitPattern(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitPattern(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PatternContext pattern() throws RecognitionException {
		PatternContext _localctx = new PatternContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_pattern);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2441);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConnectionId_Context extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DALStatementParser.NUMBER_, 0); }
		public ConnectionId_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectionId_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterConnectionId_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitConnectionId_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitConnectionId_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConnectionId_Context connectionId_() throws RecognitionException {
		ConnectionId_Context _localctx = new ConnectionId_Context(_ctx, getState());
		enterRule(_localctx, 412, RULE_connectionId_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2443);
			match(NUMBER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public LabelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterLabelName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitLabelName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitLabelName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabelNameContext labelName() throws RecognitionException {
		LabelNameContext _localctx = new LabelNameContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_labelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2445);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CursorNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCursorName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCursorName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCursorName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorNameContext cursorName() throws RecognitionException {
		CursorNameContext _localctx = new CursorNameContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_cursorName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2447);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConditionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterConditionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitConditionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitConditionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionNameContext conditionName() throws RecognitionException {
		ConditionNameContext _localctx = new ConditionNameContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_conditionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2449);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DALStatementParser.INSERT, 0); }
		public InsertSpecification_Context insertSpecification_() {
			return getRuleContext(InsertSpecification_Context.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertValuesClauseContext insertValuesClause() {
			return getRuleContext(InsertValuesClauseContext.class,0);
		}
		public SetAssignmentsClauseContext setAssignmentsClause() {
			return getRuleContext(SetAssignmentsClauseContext.class,0);
		}
		public InsertSelectClauseContext insertSelectClause() {
			return getRuleContext(InsertSelectClauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(DALStatementParser.INTO, 0); }
		public PartitionNames_Context partitionNames_() {
			return getRuleContext(PartitionNames_Context.class,0);
		}
		public OnDuplicateKeyClauseContext onDuplicateKeyClause() {
			return getRuleContext(OnDuplicateKeyClauseContext.class,0);
		}
		public InsertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterInsert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitInsert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitInsert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertContext insert() throws RecognitionException {
		InsertContext _localctx = new InsertContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2451);
			match(INSERT);
			setState(2452);
			insertSpecification_();
			setState(2454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2453);
				match(INTO);
				}
			}

			setState(2456);
			tableName();
			setState(2458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2457);
				partitionNames_();
				}
			}

			setState(2463);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
			case 1:
				{
				setState(2460);
				insertValuesClause();
				}
				break;
			case 2:
				{
				setState(2461);
				setAssignmentsClause();
				}
				break;
			case 3:
				{
				setState(2462);
				insertSelectClause();
				}
				break;
			}
			setState(2466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2465);
				onDuplicateKeyClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertSpecification_Context extends ParserRuleContext {
		public TerminalNode IGNORE() { return getToken(DALStatementParser.IGNORE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(DALStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(DALStatementParser.DELAYED, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(DALStatementParser.HIGH_PRIORITY, 0); }
		public InsertSpecification_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertSpecification_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterInsertSpecification_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitInsertSpecification_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitInsertSpecification_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertSpecification_Context insertSpecification_() throws RecognitionException {
		InsertSpecification_Context _localctx = new InsertSpecification_Context(_ctx, getState());
		enterRule(_localctx, 422, RULE_insertSpecification_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==HIGH_PRIORITY || _la==LOW_PRIORITY) {
				{
				setState(2468);
				_la = _input.LA(1);
				if ( !(_la==DELAYED || _la==HIGH_PRIORITY || _la==LOW_PRIORITY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2471);
				match(IGNORE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertValuesClauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(DALStatementParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(DALStatementParser.VALUE, 0); }
		public List<AssignmentValuesContext> assignmentValues() {
			return getRuleContexts(AssignmentValuesContext.class);
		}
		public AssignmentValuesContext assignmentValues(int i) {
			return getRuleContext(AssignmentValuesContext.class,i);
		}
		public RowConstructorListContext rowConstructorList() {
			return getRuleContext(RowConstructorListContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public ValueReference_Context valueReference_() {
			return getRuleContext(ValueReference_Context.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public InsertValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertValuesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterInsertValuesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitInsertValuesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitInsertValuesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertValuesClauseContext insertValuesClause() throws RecognitionException {
		InsertValuesClauseContext _localctx = new InsertValuesClauseContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_insertValuesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2475);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
			case 1:
				{
				setState(2474);
				columnNames();
				}
				break;
			}
			setState(2477);
			_la = _input.LA(1);
			if ( !(_la==VALUE || _la==VALUES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2487);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				{
				setState(2478);
				assignmentValues();
				setState(2483);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(2479);
					match(COMMA_);
					setState(2480);
					assignmentValues();
					}
					}
					setState(2485);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case ROW:
				{
				setState(2486);
				rowConstructorList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2489);
				valueReference_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertSelectClauseContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public ValueReference_Context valueReference_() {
			return getRuleContext(ValueReference_Context.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public InsertSelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertSelectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterInsertSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitInsertSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitInsertSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertSelectClauseContext insertSelectClause() throws RecognitionException {
		InsertSelectClauseContext _localctx = new InsertSelectClauseContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_insertSelectClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2492);
				valueReference_();
				}
			}

			setState(2496);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				{
				setState(2495);
				columnNames();
				}
				break;
			}
			setState(2498);
			select();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnDuplicateKeyClauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DALStatementParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(DALStatementParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(DALStatementParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(DALStatementParser.UPDATE, 0); }
		public List<AssignmentContext> assignment() {
			return getRuleContexts(AssignmentContext.class);
		}
		public AssignmentContext assignment(int i) {
			return getRuleContext(AssignmentContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public OnDuplicateKeyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onDuplicateKeyClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterOnDuplicateKeyClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitOnDuplicateKeyClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitOnDuplicateKeyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnDuplicateKeyClauseContext onDuplicateKeyClause() throws RecognitionException {
		OnDuplicateKeyClauseContext _localctx = new OnDuplicateKeyClauseContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_onDuplicateKeyClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2500);
			match(ON);
			setState(2501);
			match(DUPLICATE);
			setState(2502);
			match(KEY);
			setState(2503);
			match(UPDATE);
			setState(2504);
			assignment();
			setState(2509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2505);
				match(COMMA_);
				setState(2506);
				assignment();
				}
				}
				setState(2511);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValueReference_Context extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DALStatementParser.AS, 0); }
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public DerivedColumns_Context derivedColumns_() {
			return getRuleContext(DerivedColumns_Context.class,0);
		}
		public ValueReference_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueReference_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterValueReference_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitValueReference_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitValueReference_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValueReference_Context valueReference_() throws RecognitionException {
		ValueReference_Context _localctx = new ValueReference_Context(_ctx, getState());
		enterRule(_localctx, 430, RULE_valueReference_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2512);
			match(AS);
			setState(2513);
			alias();
			setState(2515);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				{
				setState(2514);
				derivedColumns_();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DerivedColumns_Context extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public List<AliasContext> alias() {
			return getRuleContexts(AliasContext.class);
		}
		public AliasContext alias(int i) {
			return getRuleContext(AliasContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public DerivedColumns_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derivedColumns_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterDerivedColumns_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitDerivedColumns_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitDerivedColumns_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DerivedColumns_Context derivedColumns_() throws RecognitionException {
		DerivedColumns_Context _localctx = new DerivedColumns_Context(_ctx, getState());
		enterRule(_localctx, 432, RULE_derivedColumns_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2517);
			match(LP_);
			setState(2518);
			alias();
			setState(2523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2519);
				match(COMMA_);
				setState(2520);
				alias();
				}
				}
				setState(2525);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2526);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(DALStatementParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ReplaceValuesClauseContext replaceValuesClause() {
			return getRuleContext(ReplaceValuesClauseContext.class,0);
		}
		public SetAssignmentsClauseContext setAssignmentsClause() {
			return getRuleContext(SetAssignmentsClauseContext.class,0);
		}
		public ReplaceSelectClauseContext replaceSelectClause() {
			return getRuleContext(ReplaceSelectClauseContext.class,0);
		}
		public ReplaceSpecification_Context replaceSpecification_() {
			return getRuleContext(ReplaceSpecification_Context.class,0);
		}
		public TerminalNode INTO() { return getToken(DALStatementParser.INTO, 0); }
		public PartitionNames_Context partitionNames_() {
			return getRuleContext(PartitionNames_Context.class,0);
		}
		public ReplaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterReplace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitReplace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitReplace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceContext replace() throws RecognitionException {
		ReplaceContext _localctx = new ReplaceContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_replace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2528);
			match(REPLACE);
			setState(2530);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				setState(2529);
				replaceSpecification_();
				}
			}

			setState(2533);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2532);
				match(INTO);
				}
			}

			setState(2535);
			tableName();
			setState(2537);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2536);
				partitionNames_();
				}
			}

			setState(2542);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
			case 1:
				{
				setState(2539);
				replaceValuesClause();
				}
				break;
			case 2:
				{
				setState(2540);
				setAssignmentsClause();
				}
				break;
			case 3:
				{
				setState(2541);
				replaceSelectClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceSpecification_Context extends ParserRuleContext {
		public TerminalNode LOW_PRIORITY() { return getToken(DALStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(DALStatementParser.DELAYED, 0); }
		public ReplaceSpecification_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceSpecification_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterReplaceSpecification_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitReplaceSpecification_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitReplaceSpecification_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceSpecification_Context replaceSpecification_() throws RecognitionException {
		ReplaceSpecification_Context _localctx = new ReplaceSpecification_Context(_ctx, getState());
		enterRule(_localctx, 436, RULE_replaceSpecification_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2544);
			_la = _input.LA(1);
			if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceValuesClauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(DALStatementParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(DALStatementParser.VALUE, 0); }
		public List<AssignmentValuesContext> assignmentValues() {
			return getRuleContexts(AssignmentValuesContext.class);
		}
		public AssignmentValuesContext assignmentValues(int i) {
			return getRuleContext(AssignmentValuesContext.class,i);
		}
		public RowConstructorListContext rowConstructorList() {
			return getRuleContext(RowConstructorListContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public ValueReference_Context valueReference_() {
			return getRuleContext(ValueReference_Context.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public ReplaceValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceValuesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterReplaceValuesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitReplaceValuesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitReplaceValuesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceValuesClauseContext replaceValuesClause() throws RecognitionException {
		ReplaceValuesClauseContext _localctx = new ReplaceValuesClauseContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_replaceValuesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2547);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				{
				setState(2546);
				columnNames();
				}
				break;
			}
			setState(2549);
			_la = _input.LA(1);
			if ( !(_la==VALUE || _la==VALUES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2559);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				{
				setState(2550);
				assignmentValues();
				setState(2555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(2551);
					match(COMMA_);
					setState(2552);
					assignmentValues();
					}
					}
					setState(2557);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case ROW:
				{
				setState(2558);
				rowConstructorList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2562);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2561);
				valueReference_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceSelectClauseContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public ValueReference_Context valueReference_() {
			return getRuleContext(ValueReference_Context.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public ReplaceSelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceSelectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterReplaceSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitReplaceSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitReplaceSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceSelectClauseContext replaceSelectClause() throws RecognitionException {
		ReplaceSelectClauseContext _localctx = new ReplaceSelectClauseContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_replaceSelectClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2565);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2564);
				valueReference_();
				}
			}

			setState(2568);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				{
				setState(2567);
				columnNames();
				}
				break;
			}
			setState(2570);
			select();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DALStatementParser.UPDATE, 0); }
		public UpdateSpecification_Context updateSpecification_() {
			return getRuleContext(UpdateSpecification_Context.class,0);
		}
		public TableReferencesContext tableReferences() {
			return getRuleContext(TableReferencesContext.class,0);
		}
		public SetAssignmentsClauseContext setAssignmentsClause() {
			return getRuleContext(SetAssignmentsClauseContext.class,0);
		}
		public WithClause_Context withClause_() {
			return getRuleContext(WithClause_Context.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public UpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateContext update() throws RecognitionException {
		UpdateContext _localctx = new UpdateContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_update);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2573);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2572);
				withClause_();
				}
			}

			setState(2575);
			match(UPDATE);
			setState(2576);
			updateSpecification_();
			setState(2577);
			tableReferences();
			setState(2578);
			setAssignmentsClause();
			setState(2580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2579);
				whereClause();
				}
			}

			setState(2583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2582);
				orderByClause();
				}
			}

			setState(2586);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(2585);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateSpecification_Context extends ParserRuleContext {
		public TerminalNode LOW_PRIORITY() { return getToken(DALStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode IGNORE() { return getToken(DALStatementParser.IGNORE, 0); }
		public UpdateSpecification_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateSpecification_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterUpdateSpecification_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitUpdateSpecification_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitUpdateSpecification_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateSpecification_Context updateSpecification_() throws RecognitionException {
		UpdateSpecification_Context _localctx = new UpdateSpecification_Context(_ctx, getState());
		enterRule(_localctx, 444, RULE_updateSpecification_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(2588);
				match(LOW_PRIORITY);
				}
			}

			setState(2592);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2591);
				match(IGNORE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DALStatementParser.EQ_, 0); }
		public AssignmentValueContext assignmentValue() {
			return getRuleContext(AssignmentValueContext.class,0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterAssignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitAssignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitAssignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentContext assignment() throws RecognitionException {
		AssignmentContext _localctx = new AssignmentContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2594);
			columnName();
			setState(2595);
			match(EQ_);
			setState(2596);
			assignmentValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetAssignmentsClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DALStatementParser.SET, 0); }
		public List<AssignmentContext> assignment() {
			return getRuleContexts(AssignmentContext.class);
		}
		public AssignmentContext assignment(int i) {
			return getRuleContext(AssignmentContext.class,i);
		}
		public ValueReference_Context valueReference_() {
			return getRuleContext(ValueReference_Context.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public SetAssignmentsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAssignmentsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSetAssignmentsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSetAssignmentsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSetAssignmentsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetAssignmentsClauseContext setAssignmentsClause() throws RecognitionException {
		SetAssignmentsClauseContext _localctx = new SetAssignmentsClauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_setAssignmentsClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2598);
				valueReference_();
				}
			}

			setState(2601);
			match(SET);
			setState(2602);
			assignment();
			setState(2607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2603);
				match(COMMA_);
				setState(2604);
				assignment();
				}
				}
				setState(2609);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentValuesContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public List<AssignmentValueContext> assignmentValue() {
			return getRuleContexts(AssignmentValueContext.class);
		}
		public AssignmentValueContext assignmentValue(int i) {
			return getRuleContext(AssignmentValueContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public AssignmentValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentValues; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterAssignmentValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitAssignmentValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitAssignmentValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentValuesContext assignmentValues() throws RecognitionException {
		AssignmentValuesContext _localctx = new AssignmentValuesContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_assignmentValues);
		int _la;
		try {
			setState(2623);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2610);
				match(LP_);
				setState(2611);
				assignmentValue();
				setState(2616);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(2612);
					match(COMMA_);
					setState(2613);
					assignmentValue();
					}
					}
					setState(2618);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2619);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2621);
				match(LP_);
				setState(2622);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentValueContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DALStatementParser.DEFAULT, 0); }
		public BlobValueContext blobValue() {
			return getRuleContext(BlobValueContext.class,0);
		}
		public AssignmentValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterAssignmentValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitAssignmentValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitAssignmentValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentValueContext assignmentValue() throws RecognitionException {
		AssignmentValueContext _localctx = new AssignmentValueContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_assignmentValue);
		try {
			setState(2628);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2625);
				expr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2626);
				match(DEFAULT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2627);
				blobValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlobValueContext extends ParserRuleContext {
		public TerminalNode UL_BINARY() { return getToken(DALStatementParser.UL_BINARY, 0); }
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public BlobValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_blobValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterBlobValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitBlobValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitBlobValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlobValueContext blobValue() throws RecognitionException {
		BlobValueContext _localctx = new BlobValueContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_blobValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2630);
			match(UL_BINARY);
			setState(2631);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DALStatementParser.DELETE, 0); }
		public DeleteSpecification_Context deleteSpecification_() {
			return getRuleContext(DeleteSpecification_Context.class,0);
		}
		public SingleTableClauseContext singleTableClause() {
			return getRuleContext(SingleTableClauseContext.class,0);
		}
		public MultipleTablesClauseContext multipleTablesClause() {
			return getRuleContext(MultipleTablesClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public DeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteContext delete() throws RecognitionException {
		DeleteContext _localctx = new DeleteContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_delete);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2633);
			match(DELETE);
			setState(2634);
			deleteSpecification_();
			setState(2637);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				{
				setState(2635);
				singleTableClause();
				}
				break;
			case 2:
				{
				setState(2636);
				multipleTablesClause();
				}
				break;
			}
			setState(2640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2639);
				whereClause();
				}
			}

			setState(2643);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2642);
				orderByClause();
				}
			}

			setState(2646);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(2645);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteSpecification_Context extends ParserRuleContext {
		public TerminalNode LOW_PRIORITY() { return getToken(DALStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode QUICK() { return getToken(DALStatementParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(DALStatementParser.IGNORE, 0); }
		public DeleteSpecification_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteSpecification_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterDeleteSpecification_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitDeleteSpecification_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitDeleteSpecification_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteSpecification_Context deleteSpecification_() throws RecognitionException {
		DeleteSpecification_Context _localctx = new DeleteSpecification_Context(_ctx, getState());
		enterRule(_localctx, 458, RULE_deleteSpecification_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(2648);
				match(LOW_PRIORITY);
				}
			}

			setState(2652);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				setState(2651);
				match(QUICK);
				}
				break;
			}
			setState(2655);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2654);
				match(IGNORE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleTableClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(DALStatementParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public PartitionNames_Context partitionNames_() {
			return getRuleContext(PartitionNames_Context.class,0);
		}
		public TerminalNode AS() { return getToken(DALStatementParser.AS, 0); }
		public SingleTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSingleTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSingleTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSingleTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleTableClauseContext singleTableClause() throws RecognitionException {
		SingleTableClauseContext _localctx = new SingleTableClauseContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_singleTableClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2657);
			match(FROM);
			setState(2658);
			tableName();
			setState(2663);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MAX) | (1L << MIN) | (1L << SUM) | (1L << COUNT) | (1L << GROUP_CONCAT) | (1L << CAST) | (1L << POSITION) | (1L << SUBSTRING) | (1L << SUBSTR) | (1L << EXTRACT) | (1L << TRIM) | (1L << LAST_DAY) | (1L << TRADITIONAL) | (1L << TREE) | (1L << MYSQL_ADMIN) | (1L << INSTANT) | (1L << INPLACE) | (1L << COPY))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UL_BINARY - 64)) | (1L << (AUTOCOMMIT - 64)) | (1L << (ACCOUNT - 64)) | (1L << (ACTION - 64)) | (1L << (ACTIVE - 64)) | (1L << (ADMIN - 64)) | (1L << (AFTER - 64)) | (1L << (AGAINST - 64)) | (1L << (AGGREGATE - 64)) | (1L << (ALGORITHM - 64)) | (1L << (ALWAYS - 64)) | (1L << (ANY - 64)) | (1L << (AS - 64)) | (1L << (ASCII - 64)) | (1L << (AT - 64)) | (1L << (ATTRIBUTE - 64)) | (1L << (AUTOEXTEND_SIZE - 64)) | (1L << (AUTO_INCREMENT - 64)) | (1L << (AVG - 64)) | (1L << (AVG_ROW_LENGTH - 64)) | (1L << (BACKUP - 64)) | (1L << (BEGIN - 64)) | (1L << (BINLOG - 64)) | (1L << (BIT - 64)) | (1L << (BLOCK - 64)) | (1L << (BOOL - 64)) | (1L << (BOOLEAN - 64)) | (1L << (BTREE - 64)) | (1L << (BUCKETS - 64)) | (1L << (BYTE - 64)) | (1L << (CACHE - 64)) | (1L << (CASCADED - 64)) | (1L << (CATALOG_NAME - 64)) | (1L << (CHAIN - 64)) | (1L << (CHANGED - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHARSET - 64)) | (1L << (CHECKSUM - 64)) | (1L << (CIPHER - 64)) | (1L << (CLASS_ORIGIN - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CLIENT - 128)) | (1L << (CLONE - 128)) | (1L << (CLOSE - 128)) | (1L << (COALESCE - 128)) | (1L << (CODE - 128)) | (1L << (COLLATION - 128)) | (1L << (COLUMNS - 128)) | (1L << (COLUMN_FORMAT - 128)) | (1L << (COMMENT - 128)) | (1L << (COMMIT - 128)) | (1L << (COMMITTED - 128)) | (1L << (COMPACT - 128)) | (1L << (COMPLETION - 128)) | (1L << (COMPONENT - 128)) | (1L << (COMPRESSED - 128)) | (1L << (COMPRESSION - 128)) | (1L << (CONCURRENT - 128)) | (1L << (CONNECTION - 128)) | (1L << (CONSISTENT - 128)) | (1L << (CONSTRAINT_CATALOG - 128)) | (1L << (CONSTRAINT_NAME - 128)) | (1L << (CONSTRAINT_SCHEMA - 128)) | (1L << (CONTAINS - 128)) | (1L << (CONTEXT - 128)) | (1L << (CPU - 128)) | (1L << (CURRENT - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (DATA - 128)) | (1L << (DATAFILE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEFAULT_AUTH - 128)) | (1L << (DEFINER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY_KEY_WRITE - 128)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (DESCRIPTION - 196)) | (1L << (DIAGNOSTICS - 196)) | (1L << (DIRECTORY - 196)) | (1L << (DISABLE - 196)) | (1L << (DISCARD - 196)) | (1L << (DISK - 196)) | (1L << (DO - 196)) | (1L << (DUMPFILE - 196)) | (1L << (DUPLICATE - 196)) | (1L << (DYNAMIC - 196)) | (1L << (ENABLE - 196)) | (1L << (ENCRYPTION - 196)) | (1L << (END - 196)) | (1L << (ENDS - 196)) | (1L << (ENFORCED - 196)) | (1L << (ENGINE - 196)) | (1L << (ENGINES - 196)) | (1L << (ENGINE_ATTRIBUTE - 196)) | (1L << (ENUM - 196)) | (1L << (ERROR - 196)) | (1L << (ERRORS - 196)) | (1L << (ESCAPE - 196)) | (1L << (EVENT - 196)) | (1L << (EVENTS - 196)) | (1L << (EVERY - 196)) | (1L << (EXCHANGE - 196)) | (1L << (EXCLUDE - 196)) | (1L << (EXECUTE - 196)) | (1L << (EXPANSION - 196)) | (1L << (EXPIRE - 196)) | (1L << (EXPORT - 196)) | (1L << (EXTENDED - 196)) | (1L << (EXTENT_SIZE - 196)) | (1L << (FAILED_LOGIN_ATTEMPTS - 196)) | (1L << (FAST - 196)) | (1L << (FAULTS - 196)) | (1L << (FIELDS - 196)) | (1L << (FILE - 196)) | (1L << (FILE_BLOCK_SIZE - 196)) | (1L << (FILTER - 196)) | (1L << (FIRST - 196)) | (1L << (FIXED - 196)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (FLUSH - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FOLLOWS - 261)) | (1L << (FORMAT - 261)) | (1L << (FULL - 261)) | (1L << (GENERAL - 261)) | (1L << (GEOMCOLLECTION - 261)) | (1L << (GEOMETRY - 261)) | (1L << (GEOMETRYCOLLECTION - 261)) | (1L << (GET_FORMAT - 261)) | (1L << (GET_MASTER_PUBLIC_KEY - 261)) | (1L << (GLOBAL - 261)) | (1L << (GRANTS - 261)) | (1L << (GROUP_REPLICATION - 261)) | (1L << (HANDLER - 261)) | (1L << (HASH - 261)) | (1L << (HELP - 261)) | (1L << (HISTOGRAM - 261)) | (1L << (HISTORY - 261)) | (1L << (HOST - 261)) | (1L << (HOSTS - 261)) | (1L << (HOUR - 261)) | (1L << (IDENTIFIED - 261)) | (1L << (IGNORE_SERVER_IDS - 261)) | (1L << (IMPORT - 261)) | (1L << (INACTIVE - 261)) | (1L << (INDEXES - 261)) | (1L << (INITIAL_SIZE - 261)) | (1L << (INSERT_METHOD - 261)) | (1L << (INSTALL - 261)) | (1L << (INSTANCE - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (JSON_VALUE - 328)) | (1L << (KEY_BLOCK_SIZE - 328)) | (1L << (LANGUAGE - 328)) | (1L << (LAST - 328)) | (1L << (LEAVES - 328)) | (1L << (LESS - 328)) | (1L << (LEVEL - 328)) | (1L << (LINESTRING - 328)) | (1L << (LIST - 328)) | (1L << (LOCAL - 328)) | (1L << (LOCKED - 328)) | (1L << (LOCKS - 328)) | (1L << (LOGFILE - 328)) | (1L << (LOGS - 328)) | (1L << (MANAGED - 328)) | (1L << (MASTER - 328)) | (1L << (MASTER_AUTO_POSITION - 328)) | (1L << (MASTER_COMPRESSION_ALGORITHMS - 328)) | (1L << (MASTER_CONNECT_RETRY - 328)) | (1L << (MASTER_DELAY - 328)) | (1L << (MASTER_HEARTBEAT_PERIOD - 328)) | (1L << (MASTER_HOST - 328)) | (1L << (MASTER_LOG_FILE - 328)) | (1L << (MASTER_LOG_POS - 328)) | (1L << (MASTER_PASSWORD - 328)) | (1L << (MASTER_PORT - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (MASTER_PUBLIC_KEY_PATH - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SERVER_ID - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_CIPHERSUITES - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MEMORY - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MICROSECOND - 392)) | (1L << (MIGRATE - 392)) | (1L << (MINUTE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MONTH - 392)) | (1L << (MULTILINESTRING - 392)) | (1L << (MULTIPOINT - 392)) | (1L << (MULTIPOLYGON - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NATIONAL - 392)) | (1L << (NCHAR - 392)) | (1L << (NDB - 392)) | (1L << (NDBCLUSTER - 392)) | (1L << (NESTED - 392)) | (1L << (NETWORK_NAMESPACE - 392)) | (1L << (NEVER - 392)) | (1L << (NEW - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (NOWAIT - 457)) | (1L << (NO_WAIT - 457)) | (1L << (NULLS - 457)) | (1L << (NUMBER - 457)) | (1L << (NVARCHAR - 457)) | (1L << (OFF - 457)) | (1L << (OFFSET - 457)) | (1L << (OJ - 457)) | (1L << (OLD - 457)) | (1L << (ONE - 457)) | (1L << (ONLY - 457)) | (1L << (OPEN - 457)) | (1L << (OPTIONAL - 457)) | (1L << (OPTIONS - 457)) | (1L << (ORDINALITY - 457)) | (1L << (OTHERS - 457)) | (1L << (OWNER - 457)) | (1L << (PACK_KEYS - 457)) | (1L << (PAGE - 457)) | (1L << (PARSER - 457)) | (1L << (PARTIAL - 457)) | (1L << (PARTITIONING - 457)) | (1L << (PASSWORD - 457)) | (1L << (PASSWORD_LOCK_TIME - 457)) | (1L << (PATH - 457)) | (1L << (PERSIST - 457)) | (1L << (PERSIST_ONLY - 457)) | (1L << (PHASE - 457)) | (1L << (PLUGIN - 457)) | (1L << (PLUGINS - 457)) | (1L << (PLUGIN_DIR - 457)) | (1L << (POINT - 457)) | (1L << (POLYGON - 457)) | (1L << (PORT - 457)) | (1L << (PRECEDES - 457)) | (1L << (PRECEDING - 457)) | (1L << (PREPARE - 457)) | (1L << (PRESERVE - 457)) | (1L << (PREV - 457)) | (1L << (PRIVILEGES - 457)) | (1L << (PRIVILEGE_CHECKS_USER - 457)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (PROCESS - 522)) | (1L << (PROCESSLIST - 522)) | (1L << (PROFILE - 522)) | (1L << (PROFILES - 522)) | (1L << (PROXY - 522)) | (1L << (QUARTER - 522)) | (1L << (QUERY - 522)) | (1L << (QUICK - 522)) | (1L << (RANDOM - 522)) | (1L << (READ_ONLY - 522)) | (1L << (REBUILD - 522)) | (1L << (RECOVER - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (REDUNDANT - 522)) | (1L << (REFERENCE - 522)) | (1L << (RELAY - 522)) | (1L << (RELAYLOG - 522)) | (1L << (RELAY_LOG_FILE - 522)) | (1L << (RELAY_LOG_POS - 522)) | (1L << (RELAY_THREAD - 522)) | (1L << (RELOAD - 522)) | (1L << (REMOVE - 522)) | (1L << (REORGANIZE - 522)) | (1L << (REPAIR - 522)) | (1L << (REPEATABLE - 522)) | (1L << (REPLICATE_DO_DB - 522)) | (1L << (REPLICATE_DO_TABLE - 522)) | (1L << (REPLICATE_IGNORE_DB - 522)) | (1L << (REPLICATE_IGNORE_TABLE - 522)) | (1L << (REPLICATE_REWRITE_DB - 522)) | (1L << (REPLICATE_WILD_DO_TABLE - 522)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 522)) | (1L << (REPLICATION - 522)) | (1L << (REQUIRE_ROW_FORMAT - 522)) | (1L << (RESET - 522)) | (1L << (RESOURCE - 522)) | (1L << (RESPECT - 522)) | (1L << (RESTART - 522)) | (1L << (RESTORE - 522)) | (1L << (RESUME - 522)) | (1L << (RETAIN - 522)) | (1L << (RETURNED_SQLSTATE - 522)) | (1L << (RETURNING - 522)) | (1L << (RETURNS - 522)) | (1L << (REUSE - 522)) | (1L << (REVERSE - 522)))) != 0) || ((((_la - 589)) & ~0x3f) == 0 && ((1L << (_la - 589)) & ((1L << (ROLE - 589)) | (1L << (ROLLBACK - 589)) | (1L << (ROLLUP - 589)) | (1L << (ROTATE - 589)) | (1L << (ROUTINE - 589)) | (1L << (ROW_COUNT - 589)) | (1L << (ROW_FORMAT - 589)) | (1L << (RTREE - 589)) | (1L << (SAVEPOINT - 589)) | (1L << (SCHEDULE - 589)) | (1L << (SCHEMA_NAME - 589)) | (1L << (SECOND - 589)) | (1L << (SECONDARY - 589)) | (1L << (SECONDARY_ENGINE - 589)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 589)) | (1L << (SECONDARY_LOAD - 589)) | (1L << (SECONDARY_UNLOAD - 589)) | (1L << (SECURITY - 589)) | (1L << (SERIAL - 589)) | (1L << (SERIALIZABLE - 589)) | (1L << (SERVER - 589)) | (1L << (SESSION - 589)) | (1L << (SHARE - 589)) | (1L << (SHUTDOWN - 589)) | (1L << (SIGNED - 589)) | (1L << (SIMPLE - 589)) | (1L << (SLAVE - 589)) | (1L << (SLOW - 589)) | (1L << (SNAPSHOT - 589)) | (1L << (SOCKET - 589)) | (1L << (SOME - 589)) | (1L << (SONAME - 589)) | (1L << (SOUNDS - 589)) | (1L << (SOURCE - 589)) | (1L << (SQL_CACHE - 589)) | (1L << (SQL_AFTER_GTIDS - 589)) | (1L << (SQL_AFTER_MTS_GAPS - 589)) | (1L << (SQL_BEFORE_GTIDS - 589)) | (1L << (SQL_BUFFER_RESULT - 589)) | (1L << (SQL_NO_CACHE - 589)) | (1L << (SQL_THREAD - 589)) | (1L << (SQL_TSI_DAY - 589)))) != 0) || ((((_la - 653)) & ~0x3f) == 0 && ((1L << (_la - 653)) & ((1L << (SQL_TSI_HOUR - 653)) | (1L << (SQL_TSI_MINUTE - 653)) | (1L << (SQL_TSI_MONTH - 653)) | (1L << (SQL_TSI_QUARTER - 653)) | (1L << (SQL_TSI_SECOND - 653)) | (1L << (SQL_TSI_WEEK - 653)) | (1L << (SQL_TSI_YEAR - 653)) | (1L << (SRID - 653)) | (1L << (STACKED - 653)) | (1L << (START - 653)) | (1L << (STARTS - 653)) | (1L << (STATS_AUTO_RECALC - 653)) | (1L << (STATS_PERSISTENT - 653)) | (1L << (STATS_SAMPLE_PAGES - 653)) | (1L << (STATUS - 653)) | (1L << (STOP - 653)) | (1L << (STORAGE - 653)) | (1L << (STREAM - 653)) | (1L << (STRING - 653)) | (1L << (SUBCLASS_ORIGIN - 653)) | (1L << (SUBJECT - 653)) | (1L << (SUBPARTITION - 653)) | (1L << (SUBPARTITIONS - 653)) | (1L << (SUPER - 653)) | (1L << (SUSPEND - 653)) | (1L << (SWAPS - 653)) | (1L << (SWITCHES - 653)) | (1L << (TABLES - 653)) | (1L << (TABLESPACE - 653)) | (1L << (TABLE_CHECKSUM - 653)) | (1L << (TABLE_NAME - 653)) | (1L << (TEMPORARY - 653)) | (1L << (TEMPTABLE - 653)) | (1L << (TEXT - 653)) | (1L << (THAN - 653)) | (1L << (THREAD_PRIORITY - 653)) | (1L << (TIES - 653)) | (1L << (TIME - 653)) | (1L << (TIMESTAMP - 653)) | (1L << (TIMESTAMPADD - 653)) | (1L << (TIMESTAMPDIFF - 653)) | (1L << (TLS - 653)) | (1L << (TRANSACTION - 653)) | (1L << (TRIGGERS - 653)) | (1L << (TRUNCATE - 653)) | (1L << (TYPE - 653)) | (1L << (TYPES - 653)) | (1L << (UNBOUNDED - 653)) | (1L << (UNCOMMITTED - 653)))) != 0) || ((((_la - 717)) & ~0x3f) == 0 && ((1L << (_la - 717)) & ((1L << (UNDEFINED - 717)) | (1L << (UNDOFILE - 717)) | (1L << (UNDO_BUFFER_SIZE - 717)) | (1L << (UNICODE - 717)) | (1L << (UNINSTALL - 717)) | (1L << (UNKNOWN - 717)) | (1L << (UNTIL - 717)) | (1L << (UPGRADE - 717)) | (1L << (USER - 717)) | (1L << (USER_RESOURCES - 717)) | (1L << (USE_FRM - 717)) | (1L << (VALIDATION - 717)) | (1L << (VALUE - 717)) | (1L << (VARIABLES - 717)) | (1L << (VCPU - 717)) | (1L << (VIEW - 717)) | (1L << (VISIBLE - 717)) | (1L << (WAIT - 717)) | (1L << (WARNINGS - 717)) | (1L << (WEEK - 717)) | (1L << (WEIGHT_STRING - 717)) | (1L << (WITHOUT - 717)) | (1L << (WORK - 717)) | (1L << (WRAPPER - 717)) | (1L << (X509 - 717)) | (1L << (XA - 717)) | (1L << (XID - 717)) | (1L << (XML - 717)) | (1L << (YEAR - 717)) | (1L << (IDENTIFIER_ - 717)) | (1L << (STRING_ - 717)))) != 0)) {
				{
				setState(2660);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2659);
					match(AS);
					}
				}

				setState(2662);
				alias();
				}
			}

			setState(2666);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2665);
				partitionNames_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleTablesClauseContext extends ParserRuleContext {
		public MultipleTableNamesContext multipleTableNames() {
			return getRuleContext(MultipleTableNamesContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DALStatementParser.FROM, 0); }
		public TableReferencesContext tableReferences() {
			return getRuleContext(TableReferencesContext.class,0);
		}
		public TerminalNode USING() { return getToken(DALStatementParser.USING, 0); }
		public MultipleTablesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleTablesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterMultipleTablesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitMultipleTablesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitMultipleTablesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleTablesClauseContext multipleTablesClause() throws RecognitionException {
		MultipleTablesClauseContext _localctx = new MultipleTablesClauseContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_multipleTablesClause);
		try {
			setState(2677);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case GROUP_CONCAT:
			case CAST:
			case POSITION:
			case SUBSTRING:
			case SUBSTR:
			case EXTRACT:
			case TRIM:
			case LAST_DAY:
			case TRADITIONAL:
			case TREE:
			case MYSQL_ADMIN:
			case INSTANT:
			case INPLACE:
			case COPY:
			case UL_BINARY:
			case AUTOCOMMIT:
			case ACCOUNT:
			case ACTION:
			case ACTIVE:
			case ADMIN:
			case AFTER:
			case AGAINST:
			case AGGREGATE:
			case ALGORITHM:
			case ALWAYS:
			case ANY:
			case ASCII:
			case AT:
			case ATTRIBUTE:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG:
			case AVG_ROW_LENGTH:
			case BACKUP:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case BUCKETS:
			case BYTE:
			case CACHE:
			case CASCADED:
			case CATALOG_NAME:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLONE:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLLATION:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETION:
			case COMPONENT:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONTAINS:
			case CONTEXT:
			case CPU:
			case CURRENT:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DATE:
			case DATETIME:
			case DAY:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DEFINITION:
			case DELAY_KEY_WRITE:
			case DESCRIPTION:
			case DIAGNOSTICS:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENFORCED:
			case ENGINE:
			case ENGINES:
			case ENGINE_ATTRIBUTE:
			case ENUM:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUDE:
			case EXECUTE:
			case EXPANSION:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWING:
			case FOLLOWS:
			case FORMAT:
			case FULL:
			case GENERAL:
			case GEOMCOLLECTION:
			case GEOMETRY:
			case GEOMETRYCOLLECTION:
			case GET_FORMAT:
			case GET_MASTER_PUBLIC_KEY:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTOGRAM:
			case HISTORY:
			case HOST:
			case HOSTS:
			case HOUR:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INACTIVE:
			case INDEXES:
			case INITIAL_SIZE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case JSON_VALUE:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LINESTRING:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOCKS:
			case LOGFILE:
			case LOGS:
			case MANAGED:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_COMPRESSION_ALGORITHMS:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_PUBLIC_KEY_PATH:
			case MASTER_RETRY_COUNT:
			case MASTER_SERVER_ID:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_CIPHERSUITES:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MASTER_ZSTD_COMPRESSION_LEVEL:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMORY:
			case MERGE:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MIGRATE:
			case MINUTE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MONTH:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case MUTEX:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NDB:
			case NDBCLUSTER:
			case NESTED:
			case NETWORK_NAMESPACE:
			case NEVER:
			case NEW:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case NOWAIT:
			case NO_WAIT:
			case NULLS:
			case NUMBER:
			case NVARCHAR:
			case OFF:
			case OFFSET:
			case OJ:
			case OLD:
			case ONE:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PATH:
			case PERSIST:
			case PERSIST_ONLY:
			case PHASE:
			case PLUGIN:
			case PLUGINS:
			case PLUGIN_DIR:
			case POINT:
			case POLYGON:
			case PORT:
			case PRECEDES:
			case PRECEDING:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PRIVILEGES:
			case PRIVILEGE_CHECKS_USER:
			case PROCESS:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUARTER:
			case QUERY:
			case QUICK:
			case RANDOM:
			case READ_ONLY:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case REFERENCE:
			case RELAY:
			case RELAYLOG:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAY_THREAD:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPEATABLE:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case REQUIRE_ROW_FORMAT:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESUME:
			case RETAIN:
			case RETURNED_SQLSTATE:
			case RETURNING:
			case RETURNS:
			case REUSE:
			case REVERSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROUTINE:
			case ROW_COUNT:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SCHEMA_NAME:
			case SECOND:
			case SECONDARY:
			case SECONDARY_ENGINE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SECONDARY_LOAD:
			case SECONDARY_UNLOAD:
			case SECURITY:
			case SERIAL:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHUTDOWN:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_CACHE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case SQL_TSI_DAY:
			case SQL_TSI_HOUR:
			case SQL_TSI_MINUTE:
			case SQL_TSI_MONTH:
			case SQL_TSI_QUARTER:
			case SQL_TSI_SECOND:
			case SQL_TSI_WEEK:
			case SQL_TSI_YEAR:
			case SRID:
			case STACKED:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUPER:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLES:
			case TABLESPACE:
			case TABLE_CHECKSUM:
			case TABLE_NAME:
			case TEMPORARY:
			case TEMPTABLE:
			case TEXT:
			case THAN:
			case THREAD_PRIORITY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TLS:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNICODE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USER_RESOURCES:
			case USE_FRM:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VCPU:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WEEK:
			case WEIGHT_STRING:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XID:
			case XML:
			case YEAR:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2668);
				multipleTableNames();
				setState(2669);
				match(FROM);
				setState(2670);
				tableReferences();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				setState(2672);
				match(FROM);
				setState(2673);
				multipleTableNames();
				setState(2674);
				match(USING);
				setState(2675);
				tableReferences();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleTableNamesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> DOT_ASTERISK_() { return getTokens(DALStatementParser.DOT_ASTERISK_); }
		public TerminalNode DOT_ASTERISK_(int i) {
			return getToken(DALStatementParser.DOT_ASTERISK_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public MultipleTableNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleTableNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterMultipleTableNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitMultipleTableNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitMultipleTableNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleTableNamesContext multipleTableNames() throws RecognitionException {
		MultipleTableNamesContext _localctx = new MultipleTableNamesContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_multipleTableNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2679);
			tableName();
			setState(2681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT_ASTERISK_) {
				{
				setState(2680);
				match(DOT_ASTERISK_);
				}
			}

			setState(2690);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2683);
				match(COMMA_);
				setState(2684);
				tableName();
				setState(2686);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT_ASTERISK_) {
					{
					setState(2685);
					match(DOT_ASTERISK_);
					}
				}

				}
				}
				setState(2692);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectContext extends ParserRuleContext {
		public UnionClauseContext unionClause() {
			return getRuleContext(UnionClauseContext.class,0);
		}
		public WithClause_Context withClause_() {
			return getRuleContext(WithClause_Context.class,0);
		}
		public SelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectContext select() throws RecognitionException {
		SelectContext _localctx = new SelectContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_select);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2694);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2693);
				withClause_();
				}
			}

			setState(2696);
			unionClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(DALStatementParser.CALL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public CallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallContext call() throws RecognitionException {
		CallContext _localctx = new CallContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2698);
			match(CALL);
			setState(2699);
			identifier();
			setState(2712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(2700);
				match(LP_);
				setState(2709);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << NOT_) | (1L << TILDE_) | (1L << PLUS_) | (1L << MINUS_) | (1L << DOT_) | (1L << LP_) | (1L << LBE_) | (1L << QUESTION_) | (1L << AT_) | (1L << MAX) | (1L << MIN) | (1L << SUM) | (1L << COUNT) | (1L << GROUP_CONCAT) | (1L << CAST) | (1L << POSITION) | (1L << SUBSTRING) | (1L << SUBSTR) | (1L << EXTRACT) | (1L << TRIM) | (1L << LAST_DAY) | (1L << TRADITIONAL) | (1L << TREE) | (1L << MYSQL_ADMIN) | (1L << INSTANT) | (1L << INPLACE) | (1L << COPY))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UL_BINARY - 64)) | (1L << (AUTOCOMMIT - 64)) | (1L << (ACCOUNT - 64)) | (1L << (ACTION - 64)) | (1L << (ACTIVE - 64)) | (1L << (ADMIN - 64)) | (1L << (AFTER - 64)) | (1L << (AGAINST - 64)) | (1L << (AGGREGATE - 64)) | (1L << (ALGORITHM - 64)) | (1L << (ALWAYS - 64)) | (1L << (ANY - 64)) | (1L << (ASCII - 64)) | (1L << (AT - 64)) | (1L << (ATTRIBUTE - 64)) | (1L << (AUTOEXTEND_SIZE - 64)) | (1L << (AUTO_INCREMENT - 64)) | (1L << (AVG - 64)) | (1L << (AVG_ROW_LENGTH - 64)) | (1L << (BACKUP - 64)) | (1L << (BEGIN - 64)) | (1L << (BINARY - 64)) | (1L << (BINLOG - 64)) | (1L << (BIT - 64)) | (1L << (BLOCK - 64)) | (1L << (BOOL - 64)) | (1L << (BOOLEAN - 64)) | (1L << (BTREE - 64)) | (1L << (BUCKETS - 64)) | (1L << (BYTE - 64)) | (1L << (CACHE - 64)) | (1L << (CASCADED - 64)) | (1L << (CASE - 64)) | (1L << (CATALOG_NAME - 64)) | (1L << (CHAIN - 64)) | (1L << (CHANGED - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHAR - 64)) | (1L << (CHARSET - 64)) | (1L << (CHECKSUM - 64)) | (1L << (CIPHER - 64)) | (1L << (CLASS_ORIGIN - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CLIENT - 128)) | (1L << (CLONE - 128)) | (1L << (CLOSE - 128)) | (1L << (COALESCE - 128)) | (1L << (CODE - 128)) | (1L << (COLLATION - 128)) | (1L << (COLUMNS - 128)) | (1L << (COLUMN_FORMAT - 128)) | (1L << (COMMENT - 128)) | (1L << (COMMIT - 128)) | (1L << (COMMITTED - 128)) | (1L << (COMPACT - 128)) | (1L << (COMPLETION - 128)) | (1L << (COMPONENT - 128)) | (1L << (COMPRESSED - 128)) | (1L << (COMPRESSION - 128)) | (1L << (CONCURRENT - 128)) | (1L << (CONNECTION - 128)) | (1L << (CONSISTENT - 128)) | (1L << (CONSTRAINT_CATALOG - 128)) | (1L << (CONSTRAINT_NAME - 128)) | (1L << (CONSTRAINT_SCHEMA - 128)) | (1L << (CONTAINS - 128)) | (1L << (CONTEXT - 128)) | (1L << (CONVERT - 128)) | (1L << (CPU - 128)) | (1L << (CURRENT - 128)) | (1L << (CURRENT_DATE - 128)) | (1L << (CURRENT_TIME - 128)) | (1L << (CURRENT_TIMESTAMP - 128)) | (1L << (CURRENT_USER - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (DATA - 128)) | (1L << (DATABASE - 128)) | (1L << (DATAFILE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEFAULT_AUTH - 128)) | (1L << (DEFINER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY_KEY_WRITE - 128)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (DESCRIPTION - 196)) | (1L << (DIAGNOSTICS - 196)) | (1L << (DIRECTORY - 196)) | (1L << (DISABLE - 196)) | (1L << (DISCARD - 196)) | (1L << (DISK - 196)) | (1L << (DO - 196)) | (1L << (DUMPFILE - 196)) | (1L << (DUPLICATE - 196)) | (1L << (DYNAMIC - 196)) | (1L << (ENABLE - 196)) | (1L << (ENCRYPTION - 196)) | (1L << (END - 196)) | (1L << (ENDS - 196)) | (1L << (ENFORCED - 196)) | (1L << (ENGINE - 196)) | (1L << (ENGINES - 196)) | (1L << (ENGINE_ATTRIBUTE - 196)) | (1L << (ENUM - 196)) | (1L << (ERROR - 196)) | (1L << (ERRORS - 196)) | (1L << (ESCAPE - 196)) | (1L << (EVENT - 196)) | (1L << (EVENTS - 196)) | (1L << (EVERY - 196)) | (1L << (EXCHANGE - 196)) | (1L << (EXCLUDE - 196)) | (1L << (EXECUTE - 196)) | (1L << (EXISTS - 196)) | (1L << (EXPANSION - 196)) | (1L << (EXPIRE - 196)) | (1L << (EXPORT - 196)) | (1L << (EXTENDED - 196)) | (1L << (EXTENT_SIZE - 196)) | (1L << (FAILED_LOGIN_ATTEMPTS - 196)) | (1L << (FALSE - 196)) | (1L << (FAST - 196)) | (1L << (FAULTS - 196)) | (1L << (FIELDS - 196)) | (1L << (FILE - 196)) | (1L << (FILE_BLOCK_SIZE - 196)) | (1L << (FILTER - 196)) | (1L << (FIRST - 196)) | (1L << (FIXED - 196)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (FLUSH - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FOLLOWS - 261)) | (1L << (FORMAT - 261)) | (1L << (FULL - 261)) | (1L << (GENERAL - 261)) | (1L << (GEOMCOLLECTION - 261)) | (1L << (GEOMETRY - 261)) | (1L << (GEOMETRYCOLLECTION - 261)) | (1L << (GET_FORMAT - 261)) | (1L << (GET_MASTER_PUBLIC_KEY - 261)) | (1L << (GLOBAL - 261)) | (1L << (GRANTS - 261)) | (1L << (GROUP_REPLICATION - 261)) | (1L << (HANDLER - 261)) | (1L << (HASH - 261)) | (1L << (HELP - 261)) | (1L << (HISTOGRAM - 261)) | (1L << (HISTORY - 261)) | (1L << (HOST - 261)) | (1L << (HOSTS - 261)) | (1L << (HOUR - 261)) | (1L << (IDENTIFIED - 261)) | (1L << (IF - 261)) | (1L << (IGNORE_SERVER_IDS - 261)) | (1L << (IMPORT - 261)) | (1L << (INACTIVE - 261)) | (1L << (INDEXES - 261)) | (1L << (INITIAL_SIZE - 261)) | (1L << (INSERT_METHOD - 261)) | (1L << (INSTALL - 261)) | (1L << (INSTANCE - 261)))) != 0) || ((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & ((1L << (INTERVAL - 326)) | (1L << (INVISIBLE - 326)) | (1L << (INVOKER - 326)) | (1L << (IO - 326)) | (1L << (IO_THREAD - 326)) | (1L << (IPC - 326)) | (1L << (ISOLATION - 326)) | (1L << (ISSUER - 326)) | (1L << (JSON - 326)) | (1L << (JSON_VALUE - 326)) | (1L << (KEY_BLOCK_SIZE - 326)) | (1L << (LANGUAGE - 326)) | (1L << (LAST - 326)) | (1L << (LEAVES - 326)) | (1L << (LEFT - 326)) | (1L << (LESS - 326)) | (1L << (LEVEL - 326)) | (1L << (LINESTRING - 326)) | (1L << (LIST - 326)) | (1L << (LOCAL - 326)) | (1L << (LOCALTIME - 326)) | (1L << (LOCALTIMESTAMP - 326)) | (1L << (LOCKED - 326)) | (1L << (LOCKS - 326)) | (1L << (LOGFILE - 326)) | (1L << (LOGS - 326)) | (1L << (MANAGED - 326)) | (1L << (MASTER - 326)) | (1L << (MASTER_AUTO_POSITION - 326)) | (1L << (MASTER_COMPRESSION_ALGORITHMS - 326)) | (1L << (MASTER_CONNECT_RETRY - 326)) | (1L << (MASTER_DELAY - 326)) | (1L << (MASTER_HEARTBEAT_PERIOD - 326)) | (1L << (MASTER_HOST - 326)) | (1L << (MASTER_LOG_FILE - 326)) | (1L << (MASTER_LOG_POS - 326)))) != 0) || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & ((1L << (MASTER_PASSWORD - 390)) | (1L << (MASTER_PORT - 390)) | (1L << (MASTER_PUBLIC_KEY_PATH - 390)) | (1L << (MASTER_RETRY_COUNT - 390)) | (1L << (MASTER_SERVER_ID - 390)) | (1L << (MASTER_SSL - 390)) | (1L << (MASTER_SSL_CA - 390)) | (1L << (MASTER_SSL_CAPATH - 390)) | (1L << (MASTER_SSL_CERT - 390)) | (1L << (MASTER_SSL_CIPHER - 390)) | (1L << (MASTER_SSL_CRL - 390)) | (1L << (MASTER_SSL_CRLPATH - 390)) | (1L << (MASTER_SSL_KEY - 390)) | (1L << (MASTER_TLS_CIPHERSUITES - 390)) | (1L << (MASTER_TLS_VERSION - 390)) | (1L << (MASTER_USER - 390)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL - 390)) | (1L << (MATCH - 390)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 390)) | (1L << (MAX_QUERIES_PER_HOUR - 390)) | (1L << (MAX_ROWS - 390)) | (1L << (MAX_SIZE - 390)) | (1L << (MAX_UPDATES_PER_HOUR - 390)) | (1L << (MAX_USER_CONNECTIONS - 390)) | (1L << (MEDIUM - 390)) | (1L << (MEMORY - 390)) | (1L << (MERGE - 390)) | (1L << (MESSAGE_TEXT - 390)) | (1L << (MICROSECOND - 390)) | (1L << (MIGRATE - 390)) | (1L << (MINUTE - 390)) | (1L << (MIN_ROWS - 390)) | (1L << (MOD - 390)) | (1L << (MODE - 390)) | (1L << (MODIFY - 390)) | (1L << (MONTH - 390)) | (1L << (MULTILINESTRING - 390)) | (1L << (MULTIPOINT - 390)) | (1L << (MULTIPOLYGON - 390)) | (1L << (MUTEX - 390)) | (1L << (MYSQL_ERRNO - 390)) | (1L << (NAME - 390)) | (1L << (NAMES - 390)) | (1L << (NATIONAL - 390)) | (1L << (NCHAR - 390)) | (1L << (NDB - 390)) | (1L << (NDBCLUSTER - 390)) | (1L << (NESTED - 390)) | (1L << (NETWORK_NAMESPACE - 390)) | (1L << (NEVER - 390)) | (1L << (NEW - 390)) | (1L << (NEXT - 390)) | (1L << (NO - 390)))) != 0) || ((((_la - 454)) & ~0x3f) == 0 && ((1L << (_la - 454)) & ((1L << (NODEGROUP - 454)) | (1L << (NONE - 454)) | (1L << (NOT - 454)) | (1L << (NOWAIT - 454)) | (1L << (NO_WAIT - 454)) | (1L << (NULL - 454)) | (1L << (NULLS - 454)) | (1L << (NUMBER - 454)) | (1L << (NVARCHAR - 454)) | (1L << (OFF - 454)) | (1L << (OFFSET - 454)) | (1L << (OJ - 454)) | (1L << (OLD - 454)) | (1L << (ONE - 454)) | (1L << (ONLY - 454)) | (1L << (OPEN - 454)) | (1L << (OPTIONAL - 454)) | (1L << (OPTIONS - 454)) | (1L << (ORDINALITY - 454)) | (1L << (OTHERS - 454)) | (1L << (OWNER - 454)) | (1L << (PACK_KEYS - 454)) | (1L << (PAGE - 454)) | (1L << (PARSER - 454)) | (1L << (PARTIAL - 454)) | (1L << (PARTITIONING - 454)) | (1L << (PASSWORD - 454)) | (1L << (PASSWORD_LOCK_TIME - 454)) | (1L << (PATH - 454)) | (1L << (PERSIST - 454)) | (1L << (PERSIST_ONLY - 454)) | (1L << (PHASE - 454)) | (1L << (PLUGIN - 454)) | (1L << (PLUGINS - 454)) | (1L << (PLUGIN_DIR - 454)) | (1L << (POINT - 454)) | (1L << (POLYGON - 454)) | (1L << (PORT - 454)) | (1L << (PRECEDES - 454)) | (1L << (PRECEDING - 454)) | (1L << (PREPARE - 454)) | (1L << (PRESERVE - 454)) | (1L << (PREV - 454)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (PRIVILEGES - 519)) | (1L << (PRIVILEGE_CHECKS_USER - 519)) | (1L << (PROCESS - 519)) | (1L << (PROCESSLIST - 519)) | (1L << (PROFILE - 519)) | (1L << (PROFILES - 519)) | (1L << (PROXY - 519)) | (1L << (QUARTER - 519)) | (1L << (QUERY - 519)) | (1L << (QUICK - 519)) | (1L << (RANDOM - 519)) | (1L << (READ_ONLY - 519)) | (1L << (REBUILD - 519)) | (1L << (RECOVER - 519)) | (1L << (REDO_BUFFER_SIZE - 519)) | (1L << (REDUNDANT - 519)) | (1L << (REFERENCE - 519)) | (1L << (RELAY - 519)) | (1L << (RELAYLOG - 519)) | (1L << (RELAY_LOG_FILE - 519)) | (1L << (RELAY_LOG_POS - 519)) | (1L << (RELAY_THREAD - 519)) | (1L << (RELOAD - 519)) | (1L << (REMOVE - 519)) | (1L << (REORGANIZE - 519)) | (1L << (REPAIR - 519)) | (1L << (REPEATABLE - 519)) | (1L << (REPLACE - 519)) | (1L << (REPLICATE_DO_DB - 519)) | (1L << (REPLICATE_DO_TABLE - 519)) | (1L << (REPLICATE_IGNORE_DB - 519)) | (1L << (REPLICATE_IGNORE_TABLE - 519)) | (1L << (REPLICATE_REWRITE_DB - 519)) | (1L << (REPLICATE_WILD_DO_TABLE - 519)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 519)) | (1L << (REPLICATION - 519)) | (1L << (REQUIRE_ROW_FORMAT - 519)) | (1L << (RESET - 519)) | (1L << (RESOURCE - 519)) | (1L << (RESPECT - 519)) | (1L << (RESTART - 519)) | (1L << (RESTORE - 519)) | (1L << (RESUME - 519)) | (1L << (RETAIN - 519)) | (1L << (RETURNED_SQLSTATE - 519)) | (1L << (RETURNING - 519)))) != 0) || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & ((1L << (RETURNS - 583)) | (1L << (REUSE - 583)) | (1L << (REVERSE - 583)) | (1L << (RIGHT - 583)) | (1L << (ROLE - 583)) | (1L << (ROLLBACK - 583)) | (1L << (ROLLUP - 583)) | (1L << (ROTATE - 583)) | (1L << (ROUTINE - 583)) | (1L << (ROW - 583)) | (1L << (ROW_COUNT - 583)) | (1L << (ROW_FORMAT - 583)) | (1L << (RTREE - 583)) | (1L << (SAVEPOINT - 583)) | (1L << (SCHEDULE - 583)) | (1L << (SCHEMA_NAME - 583)) | (1L << (SECOND - 583)) | (1L << (SECONDARY - 583)) | (1L << (SECONDARY_ENGINE - 583)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 583)) | (1L << (SECONDARY_LOAD - 583)) | (1L << (SECONDARY_UNLOAD - 583)) | (1L << (SECURITY - 583)) | (1L << (SERIAL - 583)) | (1L << (SERIALIZABLE - 583)) | (1L << (SERVER - 583)) | (1L << (SESSION - 583)) | (1L << (SHARE - 583)) | (1L << (SHUTDOWN - 583)) | (1L << (SIGNED - 583)) | (1L << (SIMPLE - 583)) | (1L << (SLAVE - 583)) | (1L << (SLOW - 583)) | (1L << (SNAPSHOT - 583)) | (1L << (SOCKET - 583)) | (1L << (SOME - 583)) | (1L << (SONAME - 583)) | (1L << (SOUNDS - 583)) | (1L << (SOURCE - 583)) | (1L << (SQL_CACHE - 583)) | (1L << (SQL_AFTER_GTIDS - 583)) | (1L << (SQL_AFTER_MTS_GAPS - 583)) | (1L << (SQL_BEFORE_GTIDS - 583)))) != 0) || ((((_la - 647)) & ~0x3f) == 0 && ((1L << (_la - 647)) & ((1L << (SQL_BUFFER_RESULT - 647)) | (1L << (SQL_NO_CACHE - 647)) | (1L << (SQL_THREAD - 647)) | (1L << (SQL_TSI_DAY - 647)) | (1L << (SQL_TSI_HOUR - 647)) | (1L << (SQL_TSI_MINUTE - 647)) | (1L << (SQL_TSI_MONTH - 647)) | (1L << (SQL_TSI_QUARTER - 647)) | (1L << (SQL_TSI_SECOND - 647)) | (1L << (SQL_TSI_WEEK - 647)) | (1L << (SQL_TSI_YEAR - 647)) | (1L << (SRID - 647)) | (1L << (STACKED - 647)) | (1L << (START - 647)) | (1L << (STARTS - 647)) | (1L << (STATS_AUTO_RECALC - 647)) | (1L << (STATS_PERSISTENT - 647)) | (1L << (STATS_SAMPLE_PAGES - 647)) | (1L << (STATUS - 647)) | (1L << (STOP - 647)) | (1L << (STORAGE - 647)) | (1L << (STREAM - 647)) | (1L << (STRING - 647)) | (1L << (SUBCLASS_ORIGIN - 647)) | (1L << (SUBJECT - 647)) | (1L << (SUBPARTITION - 647)) | (1L << (SUBPARTITIONS - 647)) | (1L << (SUPER - 647)) | (1L << (SUSPEND - 647)) | (1L << (SWAPS - 647)) | (1L << (SWITCHES - 647)) | (1L << (TABLES - 647)) | (1L << (TABLESPACE - 647)) | (1L << (TABLE_CHECKSUM - 647)) | (1L << (TABLE_NAME - 647)) | (1L << (TEMPORARY - 647)) | (1L << (TEMPTABLE - 647)) | (1L << (TEXT - 647)) | (1L << (THAN - 647)) | (1L << (THREAD_PRIORITY - 647)) | (1L << (TIES - 647)) | (1L << (TIME - 647)) | (1L << (TIMESTAMP - 647)) | (1L << (TIMESTAMPADD - 647)) | (1L << (TIMESTAMPDIFF - 647)) | (1L << (TLS - 647)) | (1L << (TRANSACTION - 647)) | (1L << (TRIGGERS - 647)))) != 0) || ((((_la - 711)) & ~0x3f) == 0 && ((1L << (_la - 711)) & ((1L << (TRUE - 711)) | (1L << (TRUNCATE - 711)) | (1L << (TYPE - 711)) | (1L << (TYPES - 711)) | (1L << (UNBOUNDED - 711)) | (1L << (UNCOMMITTED - 711)) | (1L << (UNDEFINED - 711)) | (1L << (UNDOFILE - 711)) | (1L << (UNDO_BUFFER_SIZE - 711)) | (1L << (UNICODE - 711)) | (1L << (UNINSTALL - 711)) | (1L << (UNKNOWN - 711)) | (1L << (UNTIL - 711)) | (1L << (UPGRADE - 711)) | (1L << (USER - 711)) | (1L << (USER_RESOURCES - 711)) | (1L << (USE_FRM - 711)) | (1L << (VALIDATION - 711)) | (1L << (VALUE - 711)) | (1L << (VALUES - 711)) | (1L << (VARIABLES - 711)) | (1L << (VCPU - 711)) | (1L << (VIEW - 711)) | (1L << (VISIBLE - 711)) | (1L << (WAIT - 711)) | (1L << (WARNINGS - 711)) | (1L << (WEEK - 711)) | (1L << (WEIGHT_STRING - 711)) | (1L << (WITHOUT - 711)) | (1L << (WORK - 711)) | (1L << (WRAPPER - 711)) | (1L << (X509 - 711)) | (1L << (XA - 711)) | (1L << (XID - 711)) | (1L << (XML - 711)) | (1L << (YEAR - 711)))) != 0) || ((((_la - 776)) & ~0x3f) == 0 && ((1L << (_la - 776)) & ((1L << (IDENTIFIER_ - 776)) | (1L << (STRING_ - 776)) | (1L << (NUMBER_ - 776)) | (1L << (HEX_DIGIT_ - 776)) | (1L << (BIT_NUM_ - 776)))) != 0)) {
					{
					setState(2701);
					expr(0);
					setState(2706);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(2702);
						match(COMMA_);
						setState(2703);
						expr(0);
						}
						}
						setState(2708);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2711);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(DALStatementParser.DO, 0); }
		public List<ExprContext> expr() {
			return getRuleContexts(ExprContext.class);
		}
		public ExprContext expr(int i) {
			return getRuleContext(ExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitDoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_doStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2714);
			match(DO);
			setState(2715);
			expr(0);
			setState(2720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2716);
				match(COMMA_);
				setState(2717);
				expr(0);
				}
				}
				setState(2722);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public HandlerOpenStatementContext handlerOpenStatement() {
			return getRuleContext(HandlerOpenStatementContext.class,0);
		}
		public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return getRuleContext(HandlerReadIndexStatementContext.class,0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return getRuleContext(HandlerReadStatementContext.class,0);
		}
		public HandlerCloseStatementContext handlerCloseStatement() {
			return getRuleContext(HandlerCloseStatementContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterHandlerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitHandlerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitHandlerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_handlerStatement);
		try {
			setState(2727);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2723);
				handlerOpenStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2724);
				handlerReadIndexStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2725);
				handlerReadStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2726);
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerOpenStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(DALStatementParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(DALStatementParser.OPEN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(DALStatementParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerOpenStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterHandlerOpenStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitHandlerOpenStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitHandlerOpenStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_handlerOpenStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2729);
			match(HANDLER);
			setState(2730);
			tableName();
			setState(2731);
			match(OPEN);
			setState(2736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MAX) | (1L << MIN) | (1L << SUM) | (1L << COUNT) | (1L << GROUP_CONCAT) | (1L << CAST) | (1L << POSITION) | (1L << SUBSTRING) | (1L << SUBSTR) | (1L << EXTRACT) | (1L << TRIM) | (1L << LAST_DAY) | (1L << TRADITIONAL) | (1L << TREE) | (1L << MYSQL_ADMIN) | (1L << INSTANT) | (1L << INPLACE) | (1L << COPY))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UL_BINARY - 64)) | (1L << (AUTOCOMMIT - 64)) | (1L << (ACCOUNT - 64)) | (1L << (ACTION - 64)) | (1L << (ACTIVE - 64)) | (1L << (ADMIN - 64)) | (1L << (AFTER - 64)) | (1L << (AGAINST - 64)) | (1L << (AGGREGATE - 64)) | (1L << (ALGORITHM - 64)) | (1L << (ALWAYS - 64)) | (1L << (ANY - 64)) | (1L << (AS - 64)) | (1L << (ASCII - 64)) | (1L << (AT - 64)) | (1L << (ATTRIBUTE - 64)) | (1L << (AUTOEXTEND_SIZE - 64)) | (1L << (AUTO_INCREMENT - 64)) | (1L << (AVG - 64)) | (1L << (AVG_ROW_LENGTH - 64)) | (1L << (BACKUP - 64)) | (1L << (BEGIN - 64)) | (1L << (BINLOG - 64)) | (1L << (BIT - 64)) | (1L << (BLOCK - 64)) | (1L << (BOOL - 64)) | (1L << (BOOLEAN - 64)) | (1L << (BTREE - 64)) | (1L << (BUCKETS - 64)) | (1L << (BYTE - 64)) | (1L << (CACHE - 64)) | (1L << (CASCADED - 64)) | (1L << (CATALOG_NAME - 64)) | (1L << (CHAIN - 64)) | (1L << (CHANGED - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHARSET - 64)) | (1L << (CHECKSUM - 64)) | (1L << (CIPHER - 64)) | (1L << (CLASS_ORIGIN - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CLIENT - 128)) | (1L << (CLONE - 128)) | (1L << (CLOSE - 128)) | (1L << (COALESCE - 128)) | (1L << (CODE - 128)) | (1L << (COLLATION - 128)) | (1L << (COLUMNS - 128)) | (1L << (COLUMN_FORMAT - 128)) | (1L << (COMMENT - 128)) | (1L << (COMMIT - 128)) | (1L << (COMMITTED - 128)) | (1L << (COMPACT - 128)) | (1L << (COMPLETION - 128)) | (1L << (COMPONENT - 128)) | (1L << (COMPRESSED - 128)) | (1L << (COMPRESSION - 128)) | (1L << (CONCURRENT - 128)) | (1L << (CONNECTION - 128)) | (1L << (CONSISTENT - 128)) | (1L << (CONSTRAINT_CATALOG - 128)) | (1L << (CONSTRAINT_NAME - 128)) | (1L << (CONSTRAINT_SCHEMA - 128)) | (1L << (CONTAINS - 128)) | (1L << (CONTEXT - 128)) | (1L << (CPU - 128)) | (1L << (CURRENT - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (DATA - 128)) | (1L << (DATAFILE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEFAULT_AUTH - 128)) | (1L << (DEFINER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY_KEY_WRITE - 128)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (DESCRIPTION - 196)) | (1L << (DIAGNOSTICS - 196)) | (1L << (DIRECTORY - 196)) | (1L << (DISABLE - 196)) | (1L << (DISCARD - 196)) | (1L << (DISK - 196)) | (1L << (DO - 196)) | (1L << (DUMPFILE - 196)) | (1L << (DUPLICATE - 196)) | (1L << (DYNAMIC - 196)) | (1L << (ENABLE - 196)) | (1L << (ENCRYPTION - 196)) | (1L << (END - 196)) | (1L << (ENDS - 196)) | (1L << (ENFORCED - 196)) | (1L << (ENGINE - 196)) | (1L << (ENGINES - 196)) | (1L << (ENGINE_ATTRIBUTE - 196)) | (1L << (ENUM - 196)) | (1L << (ERROR - 196)) | (1L << (ERRORS - 196)) | (1L << (ESCAPE - 196)) | (1L << (EVENT - 196)) | (1L << (EVENTS - 196)) | (1L << (EVERY - 196)) | (1L << (EXCHANGE - 196)) | (1L << (EXCLUDE - 196)) | (1L << (EXECUTE - 196)) | (1L << (EXPANSION - 196)) | (1L << (EXPIRE - 196)) | (1L << (EXPORT - 196)) | (1L << (EXTENDED - 196)) | (1L << (EXTENT_SIZE - 196)) | (1L << (FAILED_LOGIN_ATTEMPTS - 196)) | (1L << (FAST - 196)) | (1L << (FAULTS - 196)) | (1L << (FIELDS - 196)) | (1L << (FILE - 196)) | (1L << (FILE_BLOCK_SIZE - 196)) | (1L << (FILTER - 196)) | (1L << (FIRST - 196)) | (1L << (FIXED - 196)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (FLUSH - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FOLLOWS - 261)) | (1L << (FORMAT - 261)) | (1L << (FULL - 261)) | (1L << (GENERAL - 261)) | (1L << (GEOMCOLLECTION - 261)) | (1L << (GEOMETRY - 261)) | (1L << (GEOMETRYCOLLECTION - 261)) | (1L << (GET_FORMAT - 261)) | (1L << (GET_MASTER_PUBLIC_KEY - 261)) | (1L << (GLOBAL - 261)) | (1L << (GRANTS - 261)) | (1L << (GROUP_REPLICATION - 261)) | (1L << (HANDLER - 261)) | (1L << (HASH - 261)) | (1L << (HELP - 261)) | (1L << (HISTOGRAM - 261)) | (1L << (HISTORY - 261)) | (1L << (HOST - 261)) | (1L << (HOSTS - 261)) | (1L << (HOUR - 261)) | (1L << (IDENTIFIED - 261)) | (1L << (IGNORE_SERVER_IDS - 261)) | (1L << (IMPORT - 261)) | (1L << (INACTIVE - 261)) | (1L << (INDEXES - 261)) | (1L << (INITIAL_SIZE - 261)) | (1L << (INSERT_METHOD - 261)) | (1L << (INSTALL - 261)) | (1L << (INSTANCE - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (JSON_VALUE - 328)) | (1L << (KEY_BLOCK_SIZE - 328)) | (1L << (LANGUAGE - 328)) | (1L << (LAST - 328)) | (1L << (LEAVES - 328)) | (1L << (LESS - 328)) | (1L << (LEVEL - 328)) | (1L << (LINESTRING - 328)) | (1L << (LIST - 328)) | (1L << (LOCAL - 328)) | (1L << (LOCKED - 328)) | (1L << (LOCKS - 328)) | (1L << (LOGFILE - 328)) | (1L << (LOGS - 328)) | (1L << (MANAGED - 328)) | (1L << (MASTER - 328)) | (1L << (MASTER_AUTO_POSITION - 328)) | (1L << (MASTER_COMPRESSION_ALGORITHMS - 328)) | (1L << (MASTER_CONNECT_RETRY - 328)) | (1L << (MASTER_DELAY - 328)) | (1L << (MASTER_HEARTBEAT_PERIOD - 328)) | (1L << (MASTER_HOST - 328)) | (1L << (MASTER_LOG_FILE - 328)) | (1L << (MASTER_LOG_POS - 328)) | (1L << (MASTER_PASSWORD - 328)) | (1L << (MASTER_PORT - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (MASTER_PUBLIC_KEY_PATH - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SERVER_ID - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_CIPHERSUITES - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MEMORY - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MICROSECOND - 392)) | (1L << (MIGRATE - 392)) | (1L << (MINUTE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MONTH - 392)) | (1L << (MULTILINESTRING - 392)) | (1L << (MULTIPOINT - 392)) | (1L << (MULTIPOLYGON - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NATIONAL - 392)) | (1L << (NCHAR - 392)) | (1L << (NDB - 392)) | (1L << (NDBCLUSTER - 392)) | (1L << (NESTED - 392)) | (1L << (NETWORK_NAMESPACE - 392)) | (1L << (NEVER - 392)) | (1L << (NEW - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (NOWAIT - 457)) | (1L << (NO_WAIT - 457)) | (1L << (NULLS - 457)) | (1L << (NUMBER - 457)) | (1L << (NVARCHAR - 457)) | (1L << (OFF - 457)) | (1L << (OFFSET - 457)) | (1L << (OJ - 457)) | (1L << (OLD - 457)) | (1L << (ONE - 457)) | (1L << (ONLY - 457)) | (1L << (OPEN - 457)) | (1L << (OPTIONAL - 457)) | (1L << (OPTIONS - 457)) | (1L << (ORDINALITY - 457)) | (1L << (OTHERS - 457)) | (1L << (OWNER - 457)) | (1L << (PACK_KEYS - 457)) | (1L << (PAGE - 457)) | (1L << (PARSER - 457)) | (1L << (PARTIAL - 457)) | (1L << (PARTITIONING - 457)) | (1L << (PASSWORD - 457)) | (1L << (PASSWORD_LOCK_TIME - 457)) | (1L << (PATH - 457)) | (1L << (PERSIST - 457)) | (1L << (PERSIST_ONLY - 457)) | (1L << (PHASE - 457)) | (1L << (PLUGIN - 457)) | (1L << (PLUGINS - 457)) | (1L << (PLUGIN_DIR - 457)) | (1L << (POINT - 457)) | (1L << (POLYGON - 457)) | (1L << (PORT - 457)) | (1L << (PRECEDES - 457)) | (1L << (PRECEDING - 457)) | (1L << (PREPARE - 457)) | (1L << (PRESERVE - 457)) | (1L << (PREV - 457)) | (1L << (PRIVILEGES - 457)) | (1L << (PRIVILEGE_CHECKS_USER - 457)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (PROCESS - 522)) | (1L << (PROCESSLIST - 522)) | (1L << (PROFILE - 522)) | (1L << (PROFILES - 522)) | (1L << (PROXY - 522)) | (1L << (QUARTER - 522)) | (1L << (QUERY - 522)) | (1L << (QUICK - 522)) | (1L << (RANDOM - 522)) | (1L << (READ_ONLY - 522)) | (1L << (REBUILD - 522)) | (1L << (RECOVER - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (REDUNDANT - 522)) | (1L << (REFERENCE - 522)) | (1L << (RELAY - 522)) | (1L << (RELAYLOG - 522)) | (1L << (RELAY_LOG_FILE - 522)) | (1L << (RELAY_LOG_POS - 522)) | (1L << (RELAY_THREAD - 522)) | (1L << (RELOAD - 522)) | (1L << (REMOVE - 522)) | (1L << (REORGANIZE - 522)) | (1L << (REPAIR - 522)) | (1L << (REPEATABLE - 522)) | (1L << (REPLICATE_DO_DB - 522)) | (1L << (REPLICATE_DO_TABLE - 522)) | (1L << (REPLICATE_IGNORE_DB - 522)) | (1L << (REPLICATE_IGNORE_TABLE - 522)) | (1L << (REPLICATE_REWRITE_DB - 522)) | (1L << (REPLICATE_WILD_DO_TABLE - 522)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 522)) | (1L << (REPLICATION - 522)) | (1L << (REQUIRE_ROW_FORMAT - 522)) | (1L << (RESET - 522)) | (1L << (RESOURCE - 522)) | (1L << (RESPECT - 522)) | (1L << (RESTART - 522)) | (1L << (RESTORE - 522)) | (1L << (RESUME - 522)) | (1L << (RETAIN - 522)) | (1L << (RETURNED_SQLSTATE - 522)) | (1L << (RETURNING - 522)) | (1L << (RETURNS - 522)) | (1L << (REUSE - 522)) | (1L << (REVERSE - 522)))) != 0) || ((((_la - 589)) & ~0x3f) == 0 && ((1L << (_la - 589)) & ((1L << (ROLE - 589)) | (1L << (ROLLBACK - 589)) | (1L << (ROLLUP - 589)) | (1L << (ROTATE - 589)) | (1L << (ROUTINE - 589)) | (1L << (ROW_COUNT - 589)) | (1L << (ROW_FORMAT - 589)) | (1L << (RTREE - 589)) | (1L << (SAVEPOINT - 589)) | (1L << (SCHEDULE - 589)) | (1L << (SCHEMA_NAME - 589)) | (1L << (SECOND - 589)) | (1L << (SECONDARY - 589)) | (1L << (SECONDARY_ENGINE - 589)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 589)) | (1L << (SECONDARY_LOAD - 589)) | (1L << (SECONDARY_UNLOAD - 589)) | (1L << (SECURITY - 589)) | (1L << (SERIAL - 589)) | (1L << (SERIALIZABLE - 589)) | (1L << (SERVER - 589)) | (1L << (SESSION - 589)) | (1L << (SHARE - 589)) | (1L << (SHUTDOWN - 589)) | (1L << (SIGNED - 589)) | (1L << (SIMPLE - 589)) | (1L << (SLAVE - 589)) | (1L << (SLOW - 589)) | (1L << (SNAPSHOT - 589)) | (1L << (SOCKET - 589)) | (1L << (SOME - 589)) | (1L << (SONAME - 589)) | (1L << (SOUNDS - 589)) | (1L << (SOURCE - 589)) | (1L << (SQL_CACHE - 589)) | (1L << (SQL_AFTER_GTIDS - 589)) | (1L << (SQL_AFTER_MTS_GAPS - 589)) | (1L << (SQL_BEFORE_GTIDS - 589)) | (1L << (SQL_BUFFER_RESULT - 589)) | (1L << (SQL_NO_CACHE - 589)) | (1L << (SQL_THREAD - 589)) | (1L << (SQL_TSI_DAY - 589)))) != 0) || ((((_la - 653)) & ~0x3f) == 0 && ((1L << (_la - 653)) & ((1L << (SQL_TSI_HOUR - 653)) | (1L << (SQL_TSI_MINUTE - 653)) | (1L << (SQL_TSI_MONTH - 653)) | (1L << (SQL_TSI_QUARTER - 653)) | (1L << (SQL_TSI_SECOND - 653)) | (1L << (SQL_TSI_WEEK - 653)) | (1L << (SQL_TSI_YEAR - 653)) | (1L << (SRID - 653)) | (1L << (STACKED - 653)) | (1L << (START - 653)) | (1L << (STARTS - 653)) | (1L << (STATS_AUTO_RECALC - 653)) | (1L << (STATS_PERSISTENT - 653)) | (1L << (STATS_SAMPLE_PAGES - 653)) | (1L << (STATUS - 653)) | (1L << (STOP - 653)) | (1L << (STORAGE - 653)) | (1L << (STREAM - 653)) | (1L << (STRING - 653)) | (1L << (SUBCLASS_ORIGIN - 653)) | (1L << (SUBJECT - 653)) | (1L << (SUBPARTITION - 653)) | (1L << (SUBPARTITIONS - 653)) | (1L << (SUPER - 653)) | (1L << (SUSPEND - 653)) | (1L << (SWAPS - 653)) | (1L << (SWITCHES - 653)) | (1L << (TABLES - 653)) | (1L << (TABLESPACE - 653)) | (1L << (TABLE_CHECKSUM - 653)) | (1L << (TABLE_NAME - 653)) | (1L << (TEMPORARY - 653)) | (1L << (TEMPTABLE - 653)) | (1L << (TEXT - 653)) | (1L << (THAN - 653)) | (1L << (THREAD_PRIORITY - 653)) | (1L << (TIES - 653)) | (1L << (TIME - 653)) | (1L << (TIMESTAMP - 653)) | (1L << (TIMESTAMPADD - 653)) | (1L << (TIMESTAMPDIFF - 653)) | (1L << (TLS - 653)) | (1L << (TRANSACTION - 653)) | (1L << (TRIGGERS - 653)) | (1L << (TRUNCATE - 653)) | (1L << (TYPE - 653)) | (1L << (TYPES - 653)) | (1L << (UNBOUNDED - 653)) | (1L << (UNCOMMITTED - 653)))) != 0) || ((((_la - 717)) & ~0x3f) == 0 && ((1L << (_la - 717)) & ((1L << (UNDEFINED - 717)) | (1L << (UNDOFILE - 717)) | (1L << (UNDO_BUFFER_SIZE - 717)) | (1L << (UNICODE - 717)) | (1L << (UNINSTALL - 717)) | (1L << (UNKNOWN - 717)) | (1L << (UNTIL - 717)) | (1L << (UPGRADE - 717)) | (1L << (USER - 717)) | (1L << (USER_RESOURCES - 717)) | (1L << (USE_FRM - 717)) | (1L << (VALIDATION - 717)) | (1L << (VALUE - 717)) | (1L << (VARIABLES - 717)) | (1L << (VCPU - 717)) | (1L << (VIEW - 717)) | (1L << (VISIBLE - 717)) | (1L << (WAIT - 717)) | (1L << (WARNINGS - 717)) | (1L << (WEEK - 717)) | (1L << (WEIGHT_STRING - 717)) | (1L << (WITHOUT - 717)) | (1L << (WORK - 717)) | (1L << (WRAPPER - 717)) | (1L << (X509 - 717)) | (1L << (XA - 717)) | (1L << (XID - 717)) | (1L << (XML - 717)) | (1L << (YEAR - 717)) | (1L << (IDENTIFIER_ - 717)))) != 0)) {
				{
				setState(2733);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2732);
					match(AS);
					}
				}

				setState(2735);
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadIndexStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(DALStatementParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(DALStatementParser.READ, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public TerminalNode FIRST() { return getToken(DALStatementParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(DALStatementParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(DALStatementParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(DALStatementParser.LAST, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterHandlerReadIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitHandlerReadIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitHandlerReadIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadIndexStatementContext handlerReadIndexStatement() throws RecognitionException {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_handlerReadIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2738);
			match(HANDLER);
			setState(2739);
			tableName();
			setState(2740);
			match(READ);
			setState(2741);
			indexName();
			setState(2748);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
				{
				setState(2742);
				comparisonOperator();
				setState(2743);
				match(LP_);
				setState(2744);
				identifier();
				setState(2745);
				match(RP_);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				setState(2747);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2751);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2750);
				whereClause();
				}
			}

			setState(2754);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(2753);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(DALStatementParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(DALStatementParser.READ, 0); }
		public TerminalNode FIRST() { return getToken(DALStatementParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(DALStatementParser.NEXT, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterHandlerReadStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitHandlerReadStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitHandlerReadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_handlerReadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2756);
			match(HANDLER);
			setState(2757);
			tableName();
			setState(2758);
			match(READ);
			setState(2759);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2760);
				whereClause();
				}
			}

			setState(2764);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(2763);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerCloseStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(DALStatementParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(DALStatementParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCloseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterHandlerCloseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitHandlerCloseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitHandlerCloseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_handlerCloseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2766);
			match(HANDLER);
			setState(2767);
			tableName();
			setState(2768);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportStatementContext extends ParserRuleContext {
		public TerminalNode IMPORT() { return getToken(DALStatementParser.IMPORT, 0); }
		public TerminalNode TABLE() { return getToken(DALStatementParser.TABLE, 0); }
		public TerminalNode FROM() { return getToken(DALStatementParser.FROM, 0); }
		public List<TerminalNode> STRING_() { return getTokens(DALStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DALStatementParser.STRING_, i);
		}
		public TerminalNode COMMA_() { return getToken(DALStatementParser.COMMA_, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterImportStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitImportStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitImportStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportStatementContext importStatement() throws RecognitionException {
		ImportStatementContext _localctx = new ImportStatementContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_importStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2770);
			match(IMPORT);
			setState(2771);
			match(TABLE);
			setState(2772);
			match(FROM);
			setState(2773);
			match(STRING_);
			setState(2776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(2774);
				match(COMMA_);
				setState(2775);
				match(STRING_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataStatementContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(DALStatementParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(DALStatementParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(DALStatementParser.INFILE, 0); }
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public TerminalNode INTO() { return getToken(DALStatementParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(DALStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(DALStatementParser.LOCAL, 0); }
		public PartitionNames_Context partitionNames_() {
			return getRuleContext(PartitionNames_Context.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(DALStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(DALStatementParser.SET, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> LINES() { return getTokens(DALStatementParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(DALStatementParser.LINES, i);
		}
		public List<TerminalNode> IGNORE() { return getTokens(DALStatementParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(DALStatementParser.IGNORE, i);
		}
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public FieldOrVarSpecContext fieldOrVarSpec() {
			return getRuleContext(FieldOrVarSpecContext.class,0);
		}
		public SetAssignmentsClauseContext setAssignmentsClause() {
			return getRuleContext(SetAssignmentsClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(DALStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(DALStatementParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(DALStatementParser.REPLACE, 0); }
		public TerminalNode FIELDS() { return getToken(DALStatementParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(DALStatementParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(DALStatementParser.ROWS, 0); }
		public List<SelectFieldsInto_Context> selectFieldsInto_() {
			return getRuleContexts(SelectFieldsInto_Context.class);
		}
		public SelectFieldsInto_Context selectFieldsInto_(int i) {
			return getRuleContext(SelectFieldsInto_Context.class,i);
		}
		public List<SelectLinesInto_Context> selectLinesInto_() {
			return getRuleContexts(SelectLinesInto_Context.class);
		}
		public SelectLinesInto_Context selectLinesInto_(int i) {
			return getRuleContext(SelectLinesInto_Context.class,i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterLoadDataStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitLoadDataStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitLoadDataStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataStatementContext loadDataStatement() throws RecognitionException {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_loadDataStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2778);
			match(LOAD);
			setState(2779);
			match(DATA);
			setState(2781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENT || _la==LOW_PRIORITY) {
				{
				setState(2780);
				_la = _input.LA(1);
				if ( !(_la==CONCURRENT || _la==LOW_PRIORITY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2784);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2783);
				match(LOCAL);
				}
			}

			setState(2786);
			match(INFILE);
			setState(2787);
			match(STRING_);
			setState(2789);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2788);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2791);
			match(INTO);
			setState(2792);
			match(TABLE);
			setState(2793);
			tableName();
			setState(2795);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2794);
				partitionNames_();
				}
			}

			setState(2800);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2797);
				match(CHARACTER);
				setState(2798);
				match(SET);
				setState(2799);
				identifier();
				}
			}

			setState(2808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				setState(2802);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2804); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2803);
					selectFieldsInto_();
					}
					}
					setState(2806); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			setState(2816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(2810);
				match(LINES);
				setState(2812); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2811);
					selectLinesInto_();
					}
					}
					setState(2814); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			setState(2822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2818);
				match(IGNORE);
				setState(2819);
				numberLiterals();
				setState(2820);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(2824);
				fieldOrVarSpec();
				}
			}

			setState(2828);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==SET) {
				{
				setState(2827);
				setAssignmentsClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadXmlStatementContext extends ParserRuleContext {
		public TerminalNode LOAD() { return getToken(DALStatementParser.LOAD, 0); }
		public TerminalNode XML() { return getToken(DALStatementParser.XML, 0); }
		public TerminalNode INFILE() { return getToken(DALStatementParser.INFILE, 0); }
		public List<TerminalNode> STRING_() { return getTokens(DALStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DALStatementParser.STRING_, i);
		}
		public TerminalNode INTO() { return getToken(DALStatementParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(DALStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(DALStatementParser.LOCAL, 0); }
		public TerminalNode CHARACTER() { return getToken(DALStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(DALStatementParser.SET, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> ROWS() { return getTokens(DALStatementParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(DALStatementParser.ROWS, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(DALStatementParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(DALStatementParser.BY, 0); }
		public TerminalNode LT_() { return getToken(DALStatementParser.LT_, 0); }
		public TerminalNode GT_() { return getToken(DALStatementParser.GT_, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(DALStatementParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(DALStatementParser.IGNORE, i);
		}
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public FieldOrVarSpecContext fieldOrVarSpec() {
			return getRuleContext(FieldOrVarSpecContext.class,0);
		}
		public SetAssignmentsClauseContext setAssignmentsClause() {
			return getRuleContext(SetAssignmentsClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(DALStatementParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(DALStatementParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(DALStatementParser.REPLACE, 0); }
		public TerminalNode LINES() { return getToken(DALStatementParser.LINES, 0); }
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadXmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterLoadXmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitLoadXmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitLoadXmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_loadXmlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2830);
			match(LOAD);
			setState(2831);
			match(XML);
			setState(2833);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENT || _la==LOW_PRIORITY) {
				{
				setState(2832);
				_la = _input.LA(1);
				if ( !(_la==CONCURRENT || _la==LOW_PRIORITY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2836);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(2835);
				match(LOCAL);
				}
			}

			setState(2838);
			match(INFILE);
			setState(2839);
			match(STRING_);
			setState(2841);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(2840);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2843);
			match(INTO);
			setState(2844);
			match(TABLE);
			setState(2845);
			tableName();
			setState(2849);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(2846);
				match(CHARACTER);
				setState(2847);
				match(SET);
				setState(2848);
				identifier();
				}
			}

			setState(2857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS) {
				{
				setState(2851);
				match(ROWS);
				setState(2852);
				match(IDENTIFIED);
				setState(2853);
				match(BY);
				setState(2854);
				match(LT_);
				setState(2855);
				match(STRING_);
				setState(2856);
				match(GT_);
				}
			}

			setState(2863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(2859);
				match(IGNORE);
				setState(2860);
				numberLiterals();
				setState(2861);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(2865);
				fieldOrVarSpec();
				}
			}

			setState(2869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==SET) {
				{
				setState(2868);
				setAssignmentsClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableStatementContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(DALStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode ORDER() { return getToken(DALStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DALStatementParser.BY, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(DALStatementParser.LIMIT, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(DALStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(DALStatementParser.NUMBER_, i);
		}
		public TerminalNode OFFSET() { return getToken(DALStatementParser.OFFSET, 0); }
		public TableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableStatementContext tableStatement() throws RecognitionException {
		TableStatementContext _localctx = new TableStatementContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_tableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2871);
			match(TABLE);
			setState(2872);
			tableName();
			setState(2876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2873);
				match(ORDER);
				setState(2874);
				match(BY);
				setState(2875);
				columnName();
				}
			}

			setState(2884);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(2878);
				match(LIMIT);
				setState(2879);
				match(NUMBER_);
				setState(2882);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OFFSET) {
					{
					setState(2880);
					match(OFFSET);
					setState(2881);
					match(NUMBER_);
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesStatementContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(DALStatementParser.VALUES, 0); }
		public RowConstructorListContext rowConstructorList() {
			return getRuleContext(RowConstructorListContext.class,0);
		}
		public TerminalNode ORDER() { return getToken(DALStatementParser.ORDER, 0); }
		public List<TerminalNode> BY() { return getTokens(DALStatementParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(DALStatementParser.BY, i);
		}
		public ColumnDesignatorContext columnDesignator() {
			return getRuleContext(ColumnDesignatorContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(DALStatementParser.LIMIT, 0); }
		public TerminalNode NUMBER_() { return getToken(DALStatementParser.NUMBER_, 0); }
		public ValuesStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterValuesStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitValuesStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitValuesStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesStatementContext valuesStatement() throws RecognitionException {
		ValuesStatementContext _localctx = new ValuesStatementContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_valuesStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2886);
			match(VALUES);
			setState(2887);
			rowConstructorList();
			setState(2891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2888);
				match(ORDER);
				setState(2889);
				match(BY);
				setState(2890);
				columnDesignator();
				}
			}

			setState(2896);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(2893);
				match(LIMIT);
				setState(2894);
				match(BY);
				setState(2895);
				match(NUMBER_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDesignatorContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public ColumnDesignatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDesignator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterColumnDesignator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitColumnDesignator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitColumnDesignator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDesignatorContext columnDesignator() throws RecognitionException {
		ColumnDesignatorContext _localctx = new ColumnDesignatorContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_columnDesignator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2898);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowConstructorListContext extends ParserRuleContext {
		public List<TerminalNode> ROW() { return getTokens(DALStatementParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(DALStatementParser.ROW, i);
		}
		public List<AssignmentValuesContext> assignmentValues() {
			return getRuleContexts(AssignmentValuesContext.class);
		}
		public AssignmentValuesContext assignmentValues(int i) {
			return getRuleContext(AssignmentValuesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public RowConstructorListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowConstructorList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterRowConstructorList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitRowConstructorList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitRowConstructorList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowConstructorListContext rowConstructorList() throws RecognitionException {
		RowConstructorListContext _localctx = new RowConstructorListContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_rowConstructorList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2900);
			match(ROW);
			setState(2901);
			assignmentValues();
			setState(2907);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2902);
				match(COMMA_);
				setState(2903);
				match(ROW);
				setState(2904);
				assignmentValues();
				}
				}
				setState(2909);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithClause_Context extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DALStatementParser.WITH, 0); }
		public List<CteClause_Context> cteClause_() {
			return getRuleContexts(CteClause_Context.class);
		}
		public CteClause_Context cteClause_(int i) {
			return getRuleContext(CteClause_Context.class,i);
		}
		public TerminalNode RECURSIVE() { return getToken(DALStatementParser.RECURSIVE, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public WithClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterWithClause_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitWithClause_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitWithClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithClause_Context withClause_() throws RecognitionException {
		WithClause_Context _localctx = new WithClause_Context(_ctx, getState());
		enterRule(_localctx, 496, RULE_withClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2910);
			match(WITH);
			setState(2912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECURSIVE) {
				{
				setState(2911);
				match(RECURSIVE);
				}
			}

			setState(2914);
			cteClause_();
			setState(2919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2915);
				match(COMMA_);
				setState(2916);
				cteClause_();
				}
				}
				setState(2921);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteClause_Context extends ParserRuleContext {
		public IgnoredIdentifier_Context ignoredIdentifier_() {
			return getRuleContext(IgnoredIdentifier_Context.class,0);
		}
		public TerminalNode AS() { return getToken(DALStatementParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public CteClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteClause_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterCteClause_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitCteClause_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitCteClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteClause_Context cteClause_() throws RecognitionException {
		CteClause_Context _localctx = new CteClause_Context(_ctx, getState());
		enterRule(_localctx, 498, RULE_cteClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2922);
			ignoredIdentifier_();
			setState(2924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LP_) | (1L << MAX) | (1L << MIN) | (1L << SUM) | (1L << COUNT) | (1L << GROUP_CONCAT) | (1L << CAST) | (1L << POSITION) | (1L << SUBSTRING) | (1L << SUBSTR) | (1L << EXTRACT) | (1L << TRIM) | (1L << LAST_DAY) | (1L << TRADITIONAL) | (1L << TREE) | (1L << MYSQL_ADMIN) | (1L << INSTANT) | (1L << INPLACE) | (1L << COPY))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UL_BINARY - 64)) | (1L << (AUTOCOMMIT - 64)) | (1L << (ACCOUNT - 64)) | (1L << (ACTION - 64)) | (1L << (ACTIVE - 64)) | (1L << (ADMIN - 64)) | (1L << (AFTER - 64)) | (1L << (AGAINST - 64)) | (1L << (AGGREGATE - 64)) | (1L << (ALGORITHM - 64)) | (1L << (ALWAYS - 64)) | (1L << (ANY - 64)) | (1L << (ASCII - 64)) | (1L << (AT - 64)) | (1L << (ATTRIBUTE - 64)) | (1L << (AUTOEXTEND_SIZE - 64)) | (1L << (AUTO_INCREMENT - 64)) | (1L << (AVG - 64)) | (1L << (AVG_ROW_LENGTH - 64)) | (1L << (BACKUP - 64)) | (1L << (BEGIN - 64)) | (1L << (BINLOG - 64)) | (1L << (BIT - 64)) | (1L << (BLOCK - 64)) | (1L << (BOOL - 64)) | (1L << (BOOLEAN - 64)) | (1L << (BTREE - 64)) | (1L << (BUCKETS - 64)) | (1L << (BYTE - 64)) | (1L << (CACHE - 64)) | (1L << (CASCADED - 64)) | (1L << (CATALOG_NAME - 64)) | (1L << (CHAIN - 64)) | (1L << (CHANGED - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHARSET - 64)) | (1L << (CHECKSUM - 64)) | (1L << (CIPHER - 64)) | (1L << (CLASS_ORIGIN - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CLIENT - 128)) | (1L << (CLONE - 128)) | (1L << (CLOSE - 128)) | (1L << (COALESCE - 128)) | (1L << (CODE - 128)) | (1L << (COLLATION - 128)) | (1L << (COLUMNS - 128)) | (1L << (COLUMN_FORMAT - 128)) | (1L << (COMMENT - 128)) | (1L << (COMMIT - 128)) | (1L << (COMMITTED - 128)) | (1L << (COMPACT - 128)) | (1L << (COMPLETION - 128)) | (1L << (COMPONENT - 128)) | (1L << (COMPRESSED - 128)) | (1L << (COMPRESSION - 128)) | (1L << (CONCURRENT - 128)) | (1L << (CONNECTION - 128)) | (1L << (CONSISTENT - 128)) | (1L << (CONSTRAINT_CATALOG - 128)) | (1L << (CONSTRAINT_NAME - 128)) | (1L << (CONSTRAINT_SCHEMA - 128)) | (1L << (CONTAINS - 128)) | (1L << (CONTEXT - 128)) | (1L << (CPU - 128)) | (1L << (CURRENT - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (DATA - 128)) | (1L << (DATAFILE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEFAULT_AUTH - 128)) | (1L << (DEFINER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY_KEY_WRITE - 128)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (DESCRIPTION - 196)) | (1L << (DIAGNOSTICS - 196)) | (1L << (DIRECTORY - 196)) | (1L << (DISABLE - 196)) | (1L << (DISCARD - 196)) | (1L << (DISK - 196)) | (1L << (DO - 196)) | (1L << (DUMPFILE - 196)) | (1L << (DUPLICATE - 196)) | (1L << (DYNAMIC - 196)) | (1L << (ENABLE - 196)) | (1L << (ENCRYPTION - 196)) | (1L << (END - 196)) | (1L << (ENDS - 196)) | (1L << (ENFORCED - 196)) | (1L << (ENGINE - 196)) | (1L << (ENGINES - 196)) | (1L << (ENGINE_ATTRIBUTE - 196)) | (1L << (ENUM - 196)) | (1L << (ERROR - 196)) | (1L << (ERRORS - 196)) | (1L << (ESCAPE - 196)) | (1L << (EVENT - 196)) | (1L << (EVENTS - 196)) | (1L << (EVERY - 196)) | (1L << (EXCHANGE - 196)) | (1L << (EXCLUDE - 196)) | (1L << (EXECUTE - 196)) | (1L << (EXPANSION - 196)) | (1L << (EXPIRE - 196)) | (1L << (EXPORT - 196)) | (1L << (EXTENDED - 196)) | (1L << (EXTENT_SIZE - 196)) | (1L << (FAILED_LOGIN_ATTEMPTS - 196)) | (1L << (FAST - 196)) | (1L << (FAULTS - 196)) | (1L << (FIELDS - 196)) | (1L << (FILE - 196)) | (1L << (FILE_BLOCK_SIZE - 196)) | (1L << (FILTER - 196)) | (1L << (FIRST - 196)) | (1L << (FIXED - 196)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (FLUSH - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FOLLOWS - 261)) | (1L << (FORMAT - 261)) | (1L << (FULL - 261)) | (1L << (GENERAL - 261)) | (1L << (GEOMCOLLECTION - 261)) | (1L << (GEOMETRY - 261)) | (1L << (GEOMETRYCOLLECTION - 261)) | (1L << (GET_FORMAT - 261)) | (1L << (GET_MASTER_PUBLIC_KEY - 261)) | (1L << (GLOBAL - 261)) | (1L << (GRANTS - 261)) | (1L << (GROUP_REPLICATION - 261)) | (1L << (HANDLER - 261)) | (1L << (HASH - 261)) | (1L << (HELP - 261)) | (1L << (HISTOGRAM - 261)) | (1L << (HISTORY - 261)) | (1L << (HOST - 261)) | (1L << (HOSTS - 261)) | (1L << (HOUR - 261)) | (1L << (IDENTIFIED - 261)) | (1L << (IGNORE_SERVER_IDS - 261)) | (1L << (IMPORT - 261)) | (1L << (INACTIVE - 261)) | (1L << (INDEXES - 261)) | (1L << (INITIAL_SIZE - 261)) | (1L << (INSERT_METHOD - 261)) | (1L << (INSTALL - 261)) | (1L << (INSTANCE - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (JSON_VALUE - 328)) | (1L << (KEY_BLOCK_SIZE - 328)) | (1L << (LANGUAGE - 328)) | (1L << (LAST - 328)) | (1L << (LEAVES - 328)) | (1L << (LESS - 328)) | (1L << (LEVEL - 328)) | (1L << (LINESTRING - 328)) | (1L << (LIST - 328)) | (1L << (LOCAL - 328)) | (1L << (LOCKED - 328)) | (1L << (LOCKS - 328)) | (1L << (LOGFILE - 328)) | (1L << (LOGS - 328)) | (1L << (MANAGED - 328)) | (1L << (MASTER - 328)) | (1L << (MASTER_AUTO_POSITION - 328)) | (1L << (MASTER_COMPRESSION_ALGORITHMS - 328)) | (1L << (MASTER_CONNECT_RETRY - 328)) | (1L << (MASTER_DELAY - 328)) | (1L << (MASTER_HEARTBEAT_PERIOD - 328)) | (1L << (MASTER_HOST - 328)) | (1L << (MASTER_LOG_FILE - 328)) | (1L << (MASTER_LOG_POS - 328)) | (1L << (MASTER_PASSWORD - 328)) | (1L << (MASTER_PORT - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (MASTER_PUBLIC_KEY_PATH - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SERVER_ID - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_CIPHERSUITES - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MEMORY - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MICROSECOND - 392)) | (1L << (MIGRATE - 392)) | (1L << (MINUTE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MONTH - 392)) | (1L << (MULTILINESTRING - 392)) | (1L << (MULTIPOINT - 392)) | (1L << (MULTIPOLYGON - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NATIONAL - 392)) | (1L << (NCHAR - 392)) | (1L << (NDB - 392)) | (1L << (NDBCLUSTER - 392)) | (1L << (NESTED - 392)) | (1L << (NETWORK_NAMESPACE - 392)) | (1L << (NEVER - 392)) | (1L << (NEW - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (NOWAIT - 457)) | (1L << (NO_WAIT - 457)) | (1L << (NULLS - 457)) | (1L << (NUMBER - 457)) | (1L << (NVARCHAR - 457)) | (1L << (OFF - 457)) | (1L << (OFFSET - 457)) | (1L << (OJ - 457)) | (1L << (OLD - 457)) | (1L << (ONE - 457)) | (1L << (ONLY - 457)) | (1L << (OPEN - 457)) | (1L << (OPTIONAL - 457)) | (1L << (OPTIONS - 457)) | (1L << (ORDINALITY - 457)) | (1L << (OTHERS - 457)) | (1L << (OWNER - 457)) | (1L << (PACK_KEYS - 457)) | (1L << (PAGE - 457)) | (1L << (PARSER - 457)) | (1L << (PARTIAL - 457)) | (1L << (PARTITIONING - 457)) | (1L << (PASSWORD - 457)) | (1L << (PASSWORD_LOCK_TIME - 457)) | (1L << (PATH - 457)) | (1L << (PERSIST - 457)) | (1L << (PERSIST_ONLY - 457)) | (1L << (PHASE - 457)) | (1L << (PLUGIN - 457)) | (1L << (PLUGINS - 457)) | (1L << (PLUGIN_DIR - 457)) | (1L << (POINT - 457)) | (1L << (POLYGON - 457)) | (1L << (PORT - 457)) | (1L << (PRECEDES - 457)) | (1L << (PRECEDING - 457)) | (1L << (PREPARE - 457)) | (1L << (PRESERVE - 457)) | (1L << (PREV - 457)) | (1L << (PRIVILEGES - 457)) | (1L << (PRIVILEGE_CHECKS_USER - 457)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (PROCESS - 522)) | (1L << (PROCESSLIST - 522)) | (1L << (PROFILE - 522)) | (1L << (PROFILES - 522)) | (1L << (PROXY - 522)) | (1L << (QUARTER - 522)) | (1L << (QUERY - 522)) | (1L << (QUICK - 522)) | (1L << (RANDOM - 522)) | (1L << (READ_ONLY - 522)) | (1L << (REBUILD - 522)) | (1L << (RECOVER - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (REDUNDANT - 522)) | (1L << (REFERENCE - 522)) | (1L << (RELAY - 522)) | (1L << (RELAYLOG - 522)) | (1L << (RELAY_LOG_FILE - 522)) | (1L << (RELAY_LOG_POS - 522)) | (1L << (RELAY_THREAD - 522)) | (1L << (RELOAD - 522)) | (1L << (REMOVE - 522)) | (1L << (REORGANIZE - 522)) | (1L << (REPAIR - 522)) | (1L << (REPEATABLE - 522)) | (1L << (REPLICATE_DO_DB - 522)) | (1L << (REPLICATE_DO_TABLE - 522)) | (1L << (REPLICATE_IGNORE_DB - 522)) | (1L << (REPLICATE_IGNORE_TABLE - 522)) | (1L << (REPLICATE_REWRITE_DB - 522)) | (1L << (REPLICATE_WILD_DO_TABLE - 522)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 522)) | (1L << (REPLICATION - 522)) | (1L << (REQUIRE_ROW_FORMAT - 522)) | (1L << (RESET - 522)) | (1L << (RESOURCE - 522)) | (1L << (RESPECT - 522)) | (1L << (RESTART - 522)) | (1L << (RESTORE - 522)) | (1L << (RESUME - 522)) | (1L << (RETAIN - 522)) | (1L << (RETURNED_SQLSTATE - 522)) | (1L << (RETURNING - 522)) | (1L << (RETURNS - 522)) | (1L << (REUSE - 522)) | (1L << (REVERSE - 522)))) != 0) || ((((_la - 589)) & ~0x3f) == 0 && ((1L << (_la - 589)) & ((1L << (ROLE - 589)) | (1L << (ROLLBACK - 589)) | (1L << (ROLLUP - 589)) | (1L << (ROTATE - 589)) | (1L << (ROUTINE - 589)) | (1L << (ROW_COUNT - 589)) | (1L << (ROW_FORMAT - 589)) | (1L << (RTREE - 589)) | (1L << (SAVEPOINT - 589)) | (1L << (SCHEDULE - 589)) | (1L << (SCHEMA_NAME - 589)) | (1L << (SECOND - 589)) | (1L << (SECONDARY - 589)) | (1L << (SECONDARY_ENGINE - 589)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 589)) | (1L << (SECONDARY_LOAD - 589)) | (1L << (SECONDARY_UNLOAD - 589)) | (1L << (SECURITY - 589)) | (1L << (SERIAL - 589)) | (1L << (SERIALIZABLE - 589)) | (1L << (SERVER - 589)) | (1L << (SESSION - 589)) | (1L << (SHARE - 589)) | (1L << (SHUTDOWN - 589)) | (1L << (SIGNED - 589)) | (1L << (SIMPLE - 589)) | (1L << (SLAVE - 589)) | (1L << (SLOW - 589)) | (1L << (SNAPSHOT - 589)) | (1L << (SOCKET - 589)) | (1L << (SOME - 589)) | (1L << (SONAME - 589)) | (1L << (SOUNDS - 589)) | (1L << (SOURCE - 589)) | (1L << (SQL_CACHE - 589)) | (1L << (SQL_AFTER_GTIDS - 589)) | (1L << (SQL_AFTER_MTS_GAPS - 589)) | (1L << (SQL_BEFORE_GTIDS - 589)) | (1L << (SQL_BUFFER_RESULT - 589)) | (1L << (SQL_NO_CACHE - 589)) | (1L << (SQL_THREAD - 589)) | (1L << (SQL_TSI_DAY - 589)))) != 0) || ((((_la - 653)) & ~0x3f) == 0 && ((1L << (_la - 653)) & ((1L << (SQL_TSI_HOUR - 653)) | (1L << (SQL_TSI_MINUTE - 653)) | (1L << (SQL_TSI_MONTH - 653)) | (1L << (SQL_TSI_QUARTER - 653)) | (1L << (SQL_TSI_SECOND - 653)) | (1L << (SQL_TSI_WEEK - 653)) | (1L << (SQL_TSI_YEAR - 653)) | (1L << (SRID - 653)) | (1L << (STACKED - 653)) | (1L << (START - 653)) | (1L << (STARTS - 653)) | (1L << (STATS_AUTO_RECALC - 653)) | (1L << (STATS_PERSISTENT - 653)) | (1L << (STATS_SAMPLE_PAGES - 653)) | (1L << (STATUS - 653)) | (1L << (STOP - 653)) | (1L << (STORAGE - 653)) | (1L << (STREAM - 653)) | (1L << (STRING - 653)) | (1L << (SUBCLASS_ORIGIN - 653)) | (1L << (SUBJECT - 653)) | (1L << (SUBPARTITION - 653)) | (1L << (SUBPARTITIONS - 653)) | (1L << (SUPER - 653)) | (1L << (SUSPEND - 653)) | (1L << (SWAPS - 653)) | (1L << (SWITCHES - 653)) | (1L << (TABLES - 653)) | (1L << (TABLESPACE - 653)) | (1L << (TABLE_CHECKSUM - 653)) | (1L << (TABLE_NAME - 653)) | (1L << (TEMPORARY - 653)) | (1L << (TEMPTABLE - 653)) | (1L << (TEXT - 653)) | (1L << (THAN - 653)) | (1L << (THREAD_PRIORITY - 653)) | (1L << (TIES - 653)) | (1L << (TIME - 653)) | (1L << (TIMESTAMP - 653)) | (1L << (TIMESTAMPADD - 653)) | (1L << (TIMESTAMPDIFF - 653)) | (1L << (TLS - 653)) | (1L << (TRANSACTION - 653)) | (1L << (TRIGGERS - 653)) | (1L << (TRUNCATE - 653)) | (1L << (TYPE - 653)) | (1L << (TYPES - 653)) | (1L << (UNBOUNDED - 653)) | (1L << (UNCOMMITTED - 653)))) != 0) || ((((_la - 717)) & ~0x3f) == 0 && ((1L << (_la - 717)) & ((1L << (UNDEFINED - 717)) | (1L << (UNDOFILE - 717)) | (1L << (UNDO_BUFFER_SIZE - 717)) | (1L << (UNICODE - 717)) | (1L << (UNINSTALL - 717)) | (1L << (UNKNOWN - 717)) | (1L << (UNTIL - 717)) | (1L << (UPGRADE - 717)) | (1L << (USER - 717)) | (1L << (USER_RESOURCES - 717)) | (1L << (USE_FRM - 717)) | (1L << (VALIDATION - 717)) | (1L << (VALUE - 717)) | (1L << (VARIABLES - 717)) | (1L << (VCPU - 717)) | (1L << (VIEW - 717)) | (1L << (VISIBLE - 717)) | (1L << (WAIT - 717)) | (1L << (WARNINGS - 717)) | (1L << (WEEK - 717)) | (1L << (WEIGHT_STRING - 717)) | (1L << (WITHOUT - 717)) | (1L << (WORK - 717)) | (1L << (WRAPPER - 717)) | (1L << (X509 - 717)) | (1L << (XA - 717)) | (1L << (XID - 717)) | (1L << (XML - 717)) | (1L << (YEAR - 717)) | (1L << (IDENTIFIER_ - 717)))) != 0)) {
				{
				setState(2923);
				columnNames();
				}
			}

			setState(2926);
			match(AS);
			setState(2927);
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionClauseContext extends ParserRuleContext {
		public List<SelectClauseContext> selectClause() {
			return getRuleContexts(SelectClauseContext.class);
		}
		public SelectClauseContext selectClause(int i) {
			return getRuleContext(SelectClauseContext.class,i);
		}
		public List<TerminalNode> UNION() { return getTokens(DALStatementParser.UNION); }
		public TerminalNode UNION(int i) {
			return getToken(DALStatementParser.UNION, i);
		}
		public List<TerminalNode> ALL() { return getTokens(DALStatementParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(DALStatementParser.ALL, i);
		}
		public List<TerminalNode> DISTINCT() { return getTokens(DALStatementParser.DISTINCT); }
		public TerminalNode DISTINCT(int i) {
			return getToken(DALStatementParser.DISTINCT, i);
		}
		public UnionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterUnionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitUnionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitUnionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionClauseContext unionClause() throws RecognitionException {
		UnionClauseContext _localctx = new UnionClauseContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_unionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2929);
			selectClause();
			setState(2937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==UNION) {
				{
				{
				setState(2930);
				match(UNION);
				setState(2932);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(2931);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2934);
				selectClause();
				}
				}
				setState(2939);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectClauseContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(DALStatementParser.SELECT, 0); }
		public ProjectionsContext projections() {
			return getRuleContext(ProjectionsContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public List<SelectSpecificationContext> selectSpecification() {
			return getRuleContexts(SelectSpecificationContext.class);
		}
		public SelectSpecificationContext selectSpecification(int i) {
			return getRuleContext(SelectSpecificationContext.class,i);
		}
		public List<SelectIntoExpression_Context> selectIntoExpression_() {
			return getRuleContexts(SelectIntoExpression_Context.class);
		}
		public SelectIntoExpression_Context selectIntoExpression_(int i) {
			return getRuleContext(SelectIntoExpression_Context.class,i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClause_Context windowClause_() {
			return getRuleContext(WindowClause_Context.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public LockClauseContext lockClause() {
			return getRuleContext(LockClauseContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public SelectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSelectClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSelectClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSelectClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseContext selectClause() throws RecognitionException {
		SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_selectClause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(2940);
				match(LP_);
				}
			}

			setState(2943);
			match(SELECT);
			setState(2947);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,341,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2944);
					selectSpecification();
					}
					} 
				}
				setState(2949);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,341,_ctx);
			}
			setState(2950);
			projections();
			setState(2952);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				setState(2951);
				selectIntoExpression_();
				}
				break;
			}
			setState(2955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(2954);
				fromClause();
				}
			}

			setState(2958);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2957);
				whereClause();
				}
			}

			setState(2961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(2960);
				groupByClause();
				}
			}

			setState(2964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(2963);
				havingClause();
				}
			}

			setState(2967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WINDOW) {
				{
				setState(2966);
				windowClause_();
				}
			}

			setState(2970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2969);
				orderByClause();
				}
			}

			setState(2973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(2972);
				limitClause();
				}
			}

			setState(2976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2975);
				selectIntoExpression_();
				}
			}

			setState(2979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR || _la==LOCK) {
				{
				setState(2978);
				lockClause();
				}
			}

			setState(2982);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RP_) {
				{
				setState(2981);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecificationContext extends ParserRuleContext {
		public DuplicateSpecificationContext duplicateSpecification() {
			return getRuleContext(DuplicateSpecificationContext.class,0);
		}
		public TerminalNode HIGH_PRIORITY() { return getToken(DALStatementParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(DALStatementParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(DALStatementParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(DALStatementParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(DALStatementParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(DALStatementParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(DALStatementParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(DALStatementParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSelectSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSelectSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSelectSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectSpecificationContext selectSpecification() throws RecognitionException {
		SelectSpecificationContext _localctx = new SelectSpecificationContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_selectSpecification);
		int _la;
		try {
			setState(2992);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(2984);
				duplicateSpecification();
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(2985);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2986);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(2987);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(2988);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2989);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2990);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(2991);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DuplicateSpecificationContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(DALStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(DALStatementParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(DALStatementParser.DISTINCTROW, 0); }
		public DuplicateSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_duplicateSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterDuplicateSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitDuplicateSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitDuplicateSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DuplicateSpecificationContext duplicateSpecification() throws RecognitionException {
		DuplicateSpecificationContext _localctx = new DuplicateSpecificationContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_duplicateSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2994);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT || _la==DISTINCTROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProjectionsContext extends ParserRuleContext {
		public UnqualifiedShorthandContext unqualifiedShorthand() {
			return getRuleContext(UnqualifiedShorthandContext.class,0);
		}
		public List<ProjectionContext> projection() {
			return getRuleContexts(ProjectionContext.class);
		}
		public ProjectionContext projection(int i) {
			return getRuleContext(ProjectionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public ProjectionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projections; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterProjections(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitProjections(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitProjections(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProjectionsContext projections() throws RecognitionException {
		ProjectionsContext _localctx = new ProjectionsContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_projections);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2998);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK_:
				{
				setState(2996);
				unqualifiedShorthand();
				}
				break;
			case T__0:
			case NOT_:
			case TILDE_:
			case PLUS_:
			case MINUS_:
			case DOT_:
			case LP_:
			case LBE_:
			case QUESTION_:
			case AT_:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case GROUP_CONCAT:
			case CAST:
			case POSITION:
			case SUBSTRING:
			case SUBSTR:
			case EXTRACT:
			case TRIM:
			case LAST_DAY:
			case TRADITIONAL:
			case TREE:
			case MYSQL_ADMIN:
			case INSTANT:
			case INPLACE:
			case COPY:
			case UL_BINARY:
			case AUTOCOMMIT:
			case ACCOUNT:
			case ACTION:
			case ACTIVE:
			case ADMIN:
			case AFTER:
			case AGAINST:
			case AGGREGATE:
			case ALGORITHM:
			case ALWAYS:
			case ANY:
			case ASCII:
			case AT:
			case ATTRIBUTE:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG:
			case AVG_ROW_LENGTH:
			case BACKUP:
			case BEGIN:
			case BINARY:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case BUCKETS:
			case BYTE:
			case CACHE:
			case CASCADED:
			case CASE:
			case CATALOG_NAME:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHAR:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLONE:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLLATION:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETION:
			case COMPONENT:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONTAINS:
			case CONTEXT:
			case CONVERT:
			case CPU:
			case CURRENT:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case CURSOR_NAME:
			case DATA:
			case DATABASE:
			case DATAFILE:
			case DATE:
			case DATETIME:
			case DAY:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DEFINITION:
			case DELAY_KEY_WRITE:
			case DESCRIPTION:
			case DIAGNOSTICS:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENFORCED:
			case ENGINE:
			case ENGINES:
			case ENGINE_ATTRIBUTE:
			case ENUM:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXPANSION:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FALSE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWING:
			case FOLLOWS:
			case FORMAT:
			case FULL:
			case GENERAL:
			case GEOMCOLLECTION:
			case GEOMETRY:
			case GEOMETRYCOLLECTION:
			case GET_FORMAT:
			case GET_MASTER_PUBLIC_KEY:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTOGRAM:
			case HISTORY:
			case HOST:
			case HOSTS:
			case HOUR:
			case IDENTIFIED:
			case IF:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INACTIVE:
			case INDEXES:
			case INITIAL_SIZE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INTERVAL:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case JSON_VALUE:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LEFT:
			case LESS:
			case LEVEL:
			case LINESTRING:
			case LIST:
			case LOCAL:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case LOCKED:
			case LOCKS:
			case LOGFILE:
			case LOGS:
			case MANAGED:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_COMPRESSION_ALGORITHMS:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_PUBLIC_KEY_PATH:
			case MASTER_RETRY_COUNT:
			case MASTER_SERVER_ID:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_CIPHERSUITES:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MASTER_ZSTD_COMPRESSION_LEVEL:
			case MATCH:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMORY:
			case MERGE:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MIGRATE:
			case MINUTE:
			case MIN_ROWS:
			case MOD:
			case MODE:
			case MODIFY:
			case MONTH:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case MUTEX:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NDB:
			case NDBCLUSTER:
			case NESTED:
			case NETWORK_NAMESPACE:
			case NEVER:
			case NEW:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case NOT:
			case NOWAIT:
			case NO_WAIT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NVARCHAR:
			case OFF:
			case OFFSET:
			case OJ:
			case OLD:
			case ONE:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PATH:
			case PERSIST:
			case PERSIST_ONLY:
			case PHASE:
			case PLUGIN:
			case PLUGINS:
			case PLUGIN_DIR:
			case POINT:
			case POLYGON:
			case PORT:
			case PRECEDES:
			case PRECEDING:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PRIVILEGES:
			case PRIVILEGE_CHECKS_USER:
			case PROCESS:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUARTER:
			case QUERY:
			case QUICK:
			case RANDOM:
			case READ_ONLY:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case REFERENCE:
			case RELAY:
			case RELAYLOG:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAY_THREAD:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPEATABLE:
			case REPLACE:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case REQUIRE_ROW_FORMAT:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESUME:
			case RETAIN:
			case RETURNED_SQLSTATE:
			case RETURNING:
			case RETURNS:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROUTINE:
			case ROW:
			case ROW_COUNT:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SCHEMA_NAME:
			case SECOND:
			case SECONDARY:
			case SECONDARY_ENGINE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SECONDARY_LOAD:
			case SECONDARY_UNLOAD:
			case SECURITY:
			case SERIAL:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHUTDOWN:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_CACHE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case SQL_TSI_DAY:
			case SQL_TSI_HOUR:
			case SQL_TSI_MINUTE:
			case SQL_TSI_MONTH:
			case SQL_TSI_QUARTER:
			case SQL_TSI_SECOND:
			case SQL_TSI_WEEK:
			case SQL_TSI_YEAR:
			case SRID:
			case STACKED:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUPER:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLES:
			case TABLESPACE:
			case TABLE_CHECKSUM:
			case TABLE_NAME:
			case TEMPORARY:
			case TEMPTABLE:
			case TEXT:
			case THAN:
			case THREAD_PRIORITY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TLS:
			case TRANSACTION:
			case TRIGGERS:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNICODE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USER_RESOURCES:
			case USE_FRM:
			case VALIDATION:
			case VALUE:
			case VALUES:
			case VARIABLES:
			case VCPU:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WEEK:
			case WEIGHT_STRING:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XID:
			case XML:
			case YEAR:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
			case HEX_DIGIT_:
			case BIT_NUM_:
				{
				setState(2997);
				projection();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3004);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3000);
				match(COMMA_);
				setState(3001);
				projection();
				}
				}
				setState(3006);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProjectionContext extends ParserRuleContext {
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(DALStatementParser.AS, 0); }
		public QualifiedShorthandContext qualifiedShorthand() {
			return getRuleContext(QualifiedShorthandContext.class,0);
		}
		public ProjectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_projection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterProjection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitProjection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitProjection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProjectionContext projection() throws RecognitionException {
		ProjectionContext _localctx = new ProjectionContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_projection);
		int _la;
		try {
			setState(3015);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3007);
				expr(0);
				setState(3012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MAX) | (1L << MIN) | (1L << SUM) | (1L << COUNT) | (1L << GROUP_CONCAT) | (1L << CAST) | (1L << POSITION) | (1L << SUBSTRING) | (1L << SUBSTR) | (1L << EXTRACT) | (1L << TRIM) | (1L << LAST_DAY) | (1L << TRADITIONAL) | (1L << TREE) | (1L << MYSQL_ADMIN) | (1L << INSTANT) | (1L << INPLACE) | (1L << COPY))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UL_BINARY - 64)) | (1L << (AUTOCOMMIT - 64)) | (1L << (ACCOUNT - 64)) | (1L << (ACTION - 64)) | (1L << (ACTIVE - 64)) | (1L << (ADMIN - 64)) | (1L << (AFTER - 64)) | (1L << (AGAINST - 64)) | (1L << (AGGREGATE - 64)) | (1L << (ALGORITHM - 64)) | (1L << (ALWAYS - 64)) | (1L << (ANY - 64)) | (1L << (AS - 64)) | (1L << (ASCII - 64)) | (1L << (AT - 64)) | (1L << (ATTRIBUTE - 64)) | (1L << (AUTOEXTEND_SIZE - 64)) | (1L << (AUTO_INCREMENT - 64)) | (1L << (AVG - 64)) | (1L << (AVG_ROW_LENGTH - 64)) | (1L << (BACKUP - 64)) | (1L << (BEGIN - 64)) | (1L << (BINLOG - 64)) | (1L << (BIT - 64)) | (1L << (BLOCK - 64)) | (1L << (BOOL - 64)) | (1L << (BOOLEAN - 64)) | (1L << (BTREE - 64)) | (1L << (BUCKETS - 64)) | (1L << (BYTE - 64)) | (1L << (CACHE - 64)) | (1L << (CASCADED - 64)) | (1L << (CATALOG_NAME - 64)) | (1L << (CHAIN - 64)) | (1L << (CHANGED - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHARSET - 64)) | (1L << (CHECKSUM - 64)) | (1L << (CIPHER - 64)) | (1L << (CLASS_ORIGIN - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CLIENT - 128)) | (1L << (CLONE - 128)) | (1L << (CLOSE - 128)) | (1L << (COALESCE - 128)) | (1L << (CODE - 128)) | (1L << (COLLATION - 128)) | (1L << (COLUMNS - 128)) | (1L << (COLUMN_FORMAT - 128)) | (1L << (COMMENT - 128)) | (1L << (COMMIT - 128)) | (1L << (COMMITTED - 128)) | (1L << (COMPACT - 128)) | (1L << (COMPLETION - 128)) | (1L << (COMPONENT - 128)) | (1L << (COMPRESSED - 128)) | (1L << (COMPRESSION - 128)) | (1L << (CONCURRENT - 128)) | (1L << (CONNECTION - 128)) | (1L << (CONSISTENT - 128)) | (1L << (CONSTRAINT_CATALOG - 128)) | (1L << (CONSTRAINT_NAME - 128)) | (1L << (CONSTRAINT_SCHEMA - 128)) | (1L << (CONTAINS - 128)) | (1L << (CONTEXT - 128)) | (1L << (CPU - 128)) | (1L << (CURRENT - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (DATA - 128)) | (1L << (DATAFILE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEFAULT_AUTH - 128)) | (1L << (DEFINER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY_KEY_WRITE - 128)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (DESCRIPTION - 196)) | (1L << (DIAGNOSTICS - 196)) | (1L << (DIRECTORY - 196)) | (1L << (DISABLE - 196)) | (1L << (DISCARD - 196)) | (1L << (DISK - 196)) | (1L << (DO - 196)) | (1L << (DUMPFILE - 196)) | (1L << (DUPLICATE - 196)) | (1L << (DYNAMIC - 196)) | (1L << (ENABLE - 196)) | (1L << (ENCRYPTION - 196)) | (1L << (END - 196)) | (1L << (ENDS - 196)) | (1L << (ENFORCED - 196)) | (1L << (ENGINE - 196)) | (1L << (ENGINES - 196)) | (1L << (ENGINE_ATTRIBUTE - 196)) | (1L << (ENUM - 196)) | (1L << (ERROR - 196)) | (1L << (ERRORS - 196)) | (1L << (ESCAPE - 196)) | (1L << (EVENT - 196)) | (1L << (EVENTS - 196)) | (1L << (EVERY - 196)) | (1L << (EXCHANGE - 196)) | (1L << (EXCLUDE - 196)) | (1L << (EXECUTE - 196)) | (1L << (EXPANSION - 196)) | (1L << (EXPIRE - 196)) | (1L << (EXPORT - 196)) | (1L << (EXTENDED - 196)) | (1L << (EXTENT_SIZE - 196)) | (1L << (FAILED_LOGIN_ATTEMPTS - 196)) | (1L << (FAST - 196)) | (1L << (FAULTS - 196)) | (1L << (FIELDS - 196)) | (1L << (FILE - 196)) | (1L << (FILE_BLOCK_SIZE - 196)) | (1L << (FILTER - 196)) | (1L << (FIRST - 196)) | (1L << (FIXED - 196)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (FLUSH - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FOLLOWS - 261)) | (1L << (FORMAT - 261)) | (1L << (FULL - 261)) | (1L << (GENERAL - 261)) | (1L << (GEOMCOLLECTION - 261)) | (1L << (GEOMETRY - 261)) | (1L << (GEOMETRYCOLLECTION - 261)) | (1L << (GET_FORMAT - 261)) | (1L << (GET_MASTER_PUBLIC_KEY - 261)) | (1L << (GLOBAL - 261)) | (1L << (GRANTS - 261)) | (1L << (GROUP_REPLICATION - 261)) | (1L << (HANDLER - 261)) | (1L << (HASH - 261)) | (1L << (HELP - 261)) | (1L << (HISTOGRAM - 261)) | (1L << (HISTORY - 261)) | (1L << (HOST - 261)) | (1L << (HOSTS - 261)) | (1L << (HOUR - 261)) | (1L << (IDENTIFIED - 261)) | (1L << (IGNORE_SERVER_IDS - 261)) | (1L << (IMPORT - 261)) | (1L << (INACTIVE - 261)) | (1L << (INDEXES - 261)) | (1L << (INITIAL_SIZE - 261)) | (1L << (INSERT_METHOD - 261)) | (1L << (INSTALL - 261)) | (1L << (INSTANCE - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (JSON_VALUE - 328)) | (1L << (KEY_BLOCK_SIZE - 328)) | (1L << (LANGUAGE - 328)) | (1L << (LAST - 328)) | (1L << (LEAVES - 328)) | (1L << (LESS - 328)) | (1L << (LEVEL - 328)) | (1L << (LINESTRING - 328)) | (1L << (LIST - 328)) | (1L << (LOCAL - 328)) | (1L << (LOCKED - 328)) | (1L << (LOCKS - 328)) | (1L << (LOGFILE - 328)) | (1L << (LOGS - 328)) | (1L << (MANAGED - 328)) | (1L << (MASTER - 328)) | (1L << (MASTER_AUTO_POSITION - 328)) | (1L << (MASTER_COMPRESSION_ALGORITHMS - 328)) | (1L << (MASTER_CONNECT_RETRY - 328)) | (1L << (MASTER_DELAY - 328)) | (1L << (MASTER_HEARTBEAT_PERIOD - 328)) | (1L << (MASTER_HOST - 328)) | (1L << (MASTER_LOG_FILE - 328)) | (1L << (MASTER_LOG_POS - 328)) | (1L << (MASTER_PASSWORD - 328)) | (1L << (MASTER_PORT - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (MASTER_PUBLIC_KEY_PATH - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SERVER_ID - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_CIPHERSUITES - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MEMORY - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MICROSECOND - 392)) | (1L << (MIGRATE - 392)) | (1L << (MINUTE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MONTH - 392)) | (1L << (MULTILINESTRING - 392)) | (1L << (MULTIPOINT - 392)) | (1L << (MULTIPOLYGON - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NATIONAL - 392)) | (1L << (NCHAR - 392)) | (1L << (NDB - 392)) | (1L << (NDBCLUSTER - 392)) | (1L << (NESTED - 392)) | (1L << (NETWORK_NAMESPACE - 392)) | (1L << (NEVER - 392)) | (1L << (NEW - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (NOWAIT - 457)) | (1L << (NO_WAIT - 457)) | (1L << (NULLS - 457)) | (1L << (NUMBER - 457)) | (1L << (NVARCHAR - 457)) | (1L << (OFF - 457)) | (1L << (OFFSET - 457)) | (1L << (OJ - 457)) | (1L << (OLD - 457)) | (1L << (ONE - 457)) | (1L << (ONLY - 457)) | (1L << (OPEN - 457)) | (1L << (OPTIONAL - 457)) | (1L << (OPTIONS - 457)) | (1L << (ORDINALITY - 457)) | (1L << (OTHERS - 457)) | (1L << (OWNER - 457)) | (1L << (PACK_KEYS - 457)) | (1L << (PAGE - 457)) | (1L << (PARSER - 457)) | (1L << (PARTIAL - 457)) | (1L << (PARTITIONING - 457)) | (1L << (PASSWORD - 457)) | (1L << (PASSWORD_LOCK_TIME - 457)) | (1L << (PATH - 457)) | (1L << (PERSIST - 457)) | (1L << (PERSIST_ONLY - 457)) | (1L << (PHASE - 457)) | (1L << (PLUGIN - 457)) | (1L << (PLUGINS - 457)) | (1L << (PLUGIN_DIR - 457)) | (1L << (POINT - 457)) | (1L << (POLYGON - 457)) | (1L << (PORT - 457)) | (1L << (PRECEDES - 457)) | (1L << (PRECEDING - 457)) | (1L << (PREPARE - 457)) | (1L << (PRESERVE - 457)) | (1L << (PREV - 457)) | (1L << (PRIVILEGES - 457)) | (1L << (PRIVILEGE_CHECKS_USER - 457)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (PROCESS - 522)) | (1L << (PROCESSLIST - 522)) | (1L << (PROFILE - 522)) | (1L << (PROFILES - 522)) | (1L << (PROXY - 522)) | (1L << (QUARTER - 522)) | (1L << (QUERY - 522)) | (1L << (QUICK - 522)) | (1L << (RANDOM - 522)) | (1L << (READ_ONLY - 522)) | (1L << (REBUILD - 522)) | (1L << (RECOVER - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (REDUNDANT - 522)) | (1L << (REFERENCE - 522)) | (1L << (RELAY - 522)) | (1L << (RELAYLOG - 522)) | (1L << (RELAY_LOG_FILE - 522)) | (1L << (RELAY_LOG_POS - 522)) | (1L << (RELAY_THREAD - 522)) | (1L << (RELOAD - 522)) | (1L << (REMOVE - 522)) | (1L << (REORGANIZE - 522)) | (1L << (REPAIR - 522)) | (1L << (REPEATABLE - 522)) | (1L << (REPLICATE_DO_DB - 522)) | (1L << (REPLICATE_DO_TABLE - 522)) | (1L << (REPLICATE_IGNORE_DB - 522)) | (1L << (REPLICATE_IGNORE_TABLE - 522)) | (1L << (REPLICATE_REWRITE_DB - 522)) | (1L << (REPLICATE_WILD_DO_TABLE - 522)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 522)) | (1L << (REPLICATION - 522)) | (1L << (REQUIRE_ROW_FORMAT - 522)) | (1L << (RESET - 522)) | (1L << (RESOURCE - 522)) | (1L << (RESPECT - 522)) | (1L << (RESTART - 522)) | (1L << (RESTORE - 522)) | (1L << (RESUME - 522)) | (1L << (RETAIN - 522)) | (1L << (RETURNED_SQLSTATE - 522)) | (1L << (RETURNING - 522)) | (1L << (RETURNS - 522)) | (1L << (REUSE - 522)) | (1L << (REVERSE - 522)))) != 0) || ((((_la - 589)) & ~0x3f) == 0 && ((1L << (_la - 589)) & ((1L << (ROLE - 589)) | (1L << (ROLLBACK - 589)) | (1L << (ROLLUP - 589)) | (1L << (ROTATE - 589)) | (1L << (ROUTINE - 589)) | (1L << (ROW_COUNT - 589)) | (1L << (ROW_FORMAT - 589)) | (1L << (RTREE - 589)) | (1L << (SAVEPOINT - 589)) | (1L << (SCHEDULE - 589)) | (1L << (SCHEMA_NAME - 589)) | (1L << (SECOND - 589)) | (1L << (SECONDARY - 589)) | (1L << (SECONDARY_ENGINE - 589)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 589)) | (1L << (SECONDARY_LOAD - 589)) | (1L << (SECONDARY_UNLOAD - 589)) | (1L << (SECURITY - 589)) | (1L << (SERIAL - 589)) | (1L << (SERIALIZABLE - 589)) | (1L << (SERVER - 589)) | (1L << (SESSION - 589)) | (1L << (SHARE - 589)) | (1L << (SHUTDOWN - 589)) | (1L << (SIGNED - 589)) | (1L << (SIMPLE - 589)) | (1L << (SLAVE - 589)) | (1L << (SLOW - 589)) | (1L << (SNAPSHOT - 589)) | (1L << (SOCKET - 589)) | (1L << (SOME - 589)) | (1L << (SONAME - 589)) | (1L << (SOUNDS - 589)) | (1L << (SOURCE - 589)) | (1L << (SQL_CACHE - 589)) | (1L << (SQL_AFTER_GTIDS - 589)) | (1L << (SQL_AFTER_MTS_GAPS - 589)) | (1L << (SQL_BEFORE_GTIDS - 589)) | (1L << (SQL_BUFFER_RESULT - 589)) | (1L << (SQL_NO_CACHE - 589)) | (1L << (SQL_THREAD - 589)) | (1L << (SQL_TSI_DAY - 589)))) != 0) || ((((_la - 653)) & ~0x3f) == 0 && ((1L << (_la - 653)) & ((1L << (SQL_TSI_HOUR - 653)) | (1L << (SQL_TSI_MINUTE - 653)) | (1L << (SQL_TSI_MONTH - 653)) | (1L << (SQL_TSI_QUARTER - 653)) | (1L << (SQL_TSI_SECOND - 653)) | (1L << (SQL_TSI_WEEK - 653)) | (1L << (SQL_TSI_YEAR - 653)) | (1L << (SRID - 653)) | (1L << (STACKED - 653)) | (1L << (START - 653)) | (1L << (STARTS - 653)) | (1L << (STATS_AUTO_RECALC - 653)) | (1L << (STATS_PERSISTENT - 653)) | (1L << (STATS_SAMPLE_PAGES - 653)) | (1L << (STATUS - 653)) | (1L << (STOP - 653)) | (1L << (STORAGE - 653)) | (1L << (STREAM - 653)) | (1L << (STRING - 653)) | (1L << (SUBCLASS_ORIGIN - 653)) | (1L << (SUBJECT - 653)) | (1L << (SUBPARTITION - 653)) | (1L << (SUBPARTITIONS - 653)) | (1L << (SUPER - 653)) | (1L << (SUSPEND - 653)) | (1L << (SWAPS - 653)) | (1L << (SWITCHES - 653)) | (1L << (TABLES - 653)) | (1L << (TABLESPACE - 653)) | (1L << (TABLE_CHECKSUM - 653)) | (1L << (TABLE_NAME - 653)) | (1L << (TEMPORARY - 653)) | (1L << (TEMPTABLE - 653)) | (1L << (TEXT - 653)) | (1L << (THAN - 653)) | (1L << (THREAD_PRIORITY - 653)) | (1L << (TIES - 653)) | (1L << (TIME - 653)) | (1L << (TIMESTAMP - 653)) | (1L << (TIMESTAMPADD - 653)) | (1L << (TIMESTAMPDIFF - 653)) | (1L << (TLS - 653)) | (1L << (TRANSACTION - 653)) | (1L << (TRIGGERS - 653)) | (1L << (TRUNCATE - 653)) | (1L << (TYPE - 653)) | (1L << (TYPES - 653)) | (1L << (UNBOUNDED - 653)) | (1L << (UNCOMMITTED - 653)))) != 0) || ((((_la - 717)) & ~0x3f) == 0 && ((1L << (_la - 717)) & ((1L << (UNDEFINED - 717)) | (1L << (UNDOFILE - 717)) | (1L << (UNDO_BUFFER_SIZE - 717)) | (1L << (UNICODE - 717)) | (1L << (UNINSTALL - 717)) | (1L << (UNKNOWN - 717)) | (1L << (UNTIL - 717)) | (1L << (UPGRADE - 717)) | (1L << (USER - 717)) | (1L << (USER_RESOURCES - 717)) | (1L << (USE_FRM - 717)) | (1L << (VALIDATION - 717)) | (1L << (VALUE - 717)) | (1L << (VARIABLES - 717)) | (1L << (VCPU - 717)) | (1L << (VIEW - 717)) | (1L << (VISIBLE - 717)) | (1L << (WAIT - 717)) | (1L << (WARNINGS - 717)) | (1L << (WEEK - 717)) | (1L << (WEIGHT_STRING - 717)) | (1L << (WITHOUT - 717)) | (1L << (WORK - 717)) | (1L << (WRAPPER - 717)) | (1L << (X509 - 717)) | (1L << (XA - 717)) | (1L << (XID - 717)) | (1L << (XML - 717)) | (1L << (YEAR - 717)) | (1L << (IDENTIFIER_ - 717)) | (1L << (STRING_ - 717)))) != 0)) {
					{
					setState(3009);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3008);
						match(AS);
						}
					}

					setState(3011);
					alias();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3014);
				qualifiedShorthand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnqualifiedShorthandContext extends ParserRuleContext {
		public TerminalNode ASTERISK_() { return getToken(DALStatementParser.ASTERISK_, 0); }
		public UnqualifiedShorthandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unqualifiedShorthand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterUnqualifiedShorthand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitUnqualifiedShorthand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitUnqualifiedShorthand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnqualifiedShorthandContext unqualifiedShorthand() throws RecognitionException {
		UnqualifiedShorthandContext _localctx = new UnqualifiedShorthandContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_unqualifiedShorthand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3017);
			match(ASTERISK_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedShorthandContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOT_ASTERISK_() { return getToken(DALStatementParser.DOT_ASTERISK_, 0); }
		public QualifiedShorthandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedShorthand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterQualifiedShorthand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitQualifiedShorthand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitQualifiedShorthand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedShorthandContext qualifiedShorthand() throws RecognitionException {
		QualifiedShorthandContext _localctx = new QualifiedShorthandContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_qualifiedShorthand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3019);
			identifier();
			setState(3020);
			match(DOT_ASTERISK_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(DALStatementParser.FROM, 0); }
		public TableReferencesContext tableReferences() {
			return getRuleContext(TableReferencesContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3022);
			match(FROM);
			setState(3023);
			tableReferences();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferencesContext extends ParserRuleContext {
		public List<EscapedTableReferenceContext> escapedTableReference() {
			return getRuleContexts(EscapedTableReferenceContext.class);
		}
		public EscapedTableReferenceContext escapedTableReference(int i) {
			return getRuleContext(EscapedTableReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public TableReferencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReferences; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterTableReferences(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitTableReferences(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitTableReferences(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferencesContext tableReferences() throws RecognitionException {
		TableReferencesContext _localctx = new TableReferencesContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_tableReferences);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3025);
			escapedTableReference();
			setState(3030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3026);
				match(COMMA_);
				setState(3027);
				escapedTableReference();
				}
				}
				setState(3032);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EscapedTableReferenceContext extends ParserRuleContext {
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public TerminalNode LBE_() { return getToken(DALStatementParser.LBE_, 0); }
		public TerminalNode OJ() { return getToken(DALStatementParser.OJ, 0); }
		public TerminalNode RBE_() { return getToken(DALStatementParser.RBE_, 0); }
		public EscapedTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_escapedTableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterEscapedTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitEscapedTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitEscapedTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EscapedTableReferenceContext escapedTableReference() throws RecognitionException {
		EscapedTableReferenceContext _localctx = new EscapedTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_escapedTableReference);
		try {
			setState(3039);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case LP_:
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case GROUP_CONCAT:
			case CAST:
			case POSITION:
			case SUBSTRING:
			case SUBSTR:
			case EXTRACT:
			case TRIM:
			case LAST_DAY:
			case TRADITIONAL:
			case TREE:
			case MYSQL_ADMIN:
			case INSTANT:
			case INPLACE:
			case COPY:
			case UL_BINARY:
			case AUTOCOMMIT:
			case ACCOUNT:
			case ACTION:
			case ACTIVE:
			case ADMIN:
			case AFTER:
			case AGAINST:
			case AGGREGATE:
			case ALGORITHM:
			case ALWAYS:
			case ANY:
			case ASCII:
			case AT:
			case ATTRIBUTE:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG:
			case AVG_ROW_LENGTH:
			case BACKUP:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case BUCKETS:
			case BYTE:
			case CACHE:
			case CASCADED:
			case CATALOG_NAME:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLONE:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLLATION:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETION:
			case COMPONENT:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONTAINS:
			case CONTEXT:
			case CPU:
			case CURRENT:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DATE:
			case DATETIME:
			case DAY:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DEFINITION:
			case DELAY_KEY_WRITE:
			case DESCRIPTION:
			case DIAGNOSTICS:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENFORCED:
			case ENGINE:
			case ENGINES:
			case ENGINE_ATTRIBUTE:
			case ENUM:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUDE:
			case EXECUTE:
			case EXPANSION:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWING:
			case FOLLOWS:
			case FORMAT:
			case FULL:
			case GENERAL:
			case GEOMCOLLECTION:
			case GEOMETRY:
			case GEOMETRYCOLLECTION:
			case GET_FORMAT:
			case GET_MASTER_PUBLIC_KEY:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTOGRAM:
			case HISTORY:
			case HOST:
			case HOSTS:
			case HOUR:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INACTIVE:
			case INDEXES:
			case INITIAL_SIZE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case JSON_VALUE:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LINESTRING:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOCKS:
			case LOGFILE:
			case LOGS:
			case MANAGED:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_COMPRESSION_ALGORITHMS:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_PUBLIC_KEY_PATH:
			case MASTER_RETRY_COUNT:
			case MASTER_SERVER_ID:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_CIPHERSUITES:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MASTER_ZSTD_COMPRESSION_LEVEL:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMORY:
			case MERGE:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MIGRATE:
			case MINUTE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MONTH:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case MUTEX:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NDB:
			case NDBCLUSTER:
			case NESTED:
			case NETWORK_NAMESPACE:
			case NEVER:
			case NEW:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case NOWAIT:
			case NO_WAIT:
			case NULLS:
			case NUMBER:
			case NVARCHAR:
			case OFF:
			case OFFSET:
			case OJ:
			case OLD:
			case ONE:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PATH:
			case PERSIST:
			case PERSIST_ONLY:
			case PHASE:
			case PLUGIN:
			case PLUGINS:
			case PLUGIN_DIR:
			case POINT:
			case POLYGON:
			case PORT:
			case PRECEDES:
			case PRECEDING:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PRIVILEGES:
			case PRIVILEGE_CHECKS_USER:
			case PROCESS:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUARTER:
			case QUERY:
			case QUICK:
			case RANDOM:
			case READ_ONLY:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case REFERENCE:
			case RELAY:
			case RELAYLOG:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAY_THREAD:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPEATABLE:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case REQUIRE_ROW_FORMAT:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESUME:
			case RETAIN:
			case RETURNED_SQLSTATE:
			case RETURNING:
			case RETURNS:
			case REUSE:
			case REVERSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROUTINE:
			case ROW_COUNT:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SCHEMA_NAME:
			case SECOND:
			case SECONDARY:
			case SECONDARY_ENGINE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SECONDARY_LOAD:
			case SECONDARY_UNLOAD:
			case SECURITY:
			case SERIAL:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHUTDOWN:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_CACHE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case SQL_TSI_DAY:
			case SQL_TSI_HOUR:
			case SQL_TSI_MINUTE:
			case SQL_TSI_MONTH:
			case SQL_TSI_QUARTER:
			case SQL_TSI_SECOND:
			case SQL_TSI_WEEK:
			case SQL_TSI_YEAR:
			case SRID:
			case STACKED:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUPER:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLES:
			case TABLESPACE:
			case TABLE_CHECKSUM:
			case TABLE_NAME:
			case TEMPORARY:
			case TEMPTABLE:
			case TEXT:
			case THAN:
			case THREAD_PRIORITY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TLS:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNICODE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USER_RESOURCES:
			case USE_FRM:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VCPU:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WEEK:
			case WEIGHT_STRING:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XID:
			case XML:
			case YEAR:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3033);
				tableReference();
				}
				break;
			case LBE_:
				enterOuterAlt(_localctx, 2);
				{
				setState(3034);
				match(LBE_);
				setState(3035);
				match(OJ);
				setState(3036);
				tableReference();
				setState(3037);
				match(RBE_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableReferenceContext extends ParserRuleContext {
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public List<JoinedTableContext> joinedTable() {
			return getRuleContexts(JoinedTableContext.class);
		}
		public JoinedTableContext joinedTable(int i) {
			return getRuleContext(JoinedTableContext.class,i);
		}
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_tableReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3041);
			tableFactor();
			setState(3045);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CROSS || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & ((1L << (INNER - 312)) | (1L << (JOIN - 312)) | (1L << (LEFT - 312)))) != 0) || _la==NATURAL || _la==RIGHT || _la==STRAIGHT_JOIN) {
				{
				{
				setState(3042);
				joinedTable();
				}
				}
				setState(3047);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFactorContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public PartitionNames_Context partitionNames_() {
			return getRuleContext(PartitionNames_Context.class,0);
		}
		public AliasContext alias() {
			return getRuleContext(AliasContext.class,0);
		}
		public IndexHintList_Context indexHintList_() {
			return getRuleContext(IndexHintList_Context.class,0);
		}
		public TerminalNode AS() { return getToken(DALStatementParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public TableReferencesContext tableReferences() {
			return getRuleContext(TableReferencesContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public TableFactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFactor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterTableFactor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitTableFactor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitTableFactor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFactorContext tableFactor() throws RecognitionException {
		TableFactorContext _localctx = new TableFactorContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_tableFactor);
		int _la;
		try {
			setState(3073);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAX:
			case MIN:
			case SUM:
			case COUNT:
			case GROUP_CONCAT:
			case CAST:
			case POSITION:
			case SUBSTRING:
			case SUBSTR:
			case EXTRACT:
			case TRIM:
			case LAST_DAY:
			case TRADITIONAL:
			case TREE:
			case MYSQL_ADMIN:
			case INSTANT:
			case INPLACE:
			case COPY:
			case UL_BINARY:
			case AUTOCOMMIT:
			case ACCOUNT:
			case ACTION:
			case ACTIVE:
			case ADMIN:
			case AFTER:
			case AGAINST:
			case AGGREGATE:
			case ALGORITHM:
			case ALWAYS:
			case ANY:
			case ASCII:
			case AT:
			case ATTRIBUTE:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG:
			case AVG_ROW_LENGTH:
			case BACKUP:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case BUCKETS:
			case BYTE:
			case CACHE:
			case CASCADED:
			case CATALOG_NAME:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHARSET:
			case CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLONE:
			case CLOSE:
			case COALESCE:
			case CODE:
			case COLLATION:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPACT:
			case COMPLETION:
			case COMPONENT:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_NAME:
			case CONSTRAINT_SCHEMA:
			case CONTAINS:
			case CONTEXT:
			case CPU:
			case CURRENT:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DATE:
			case DATETIME:
			case DAY:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DEFINITION:
			case DELAY_KEY_WRITE:
			case DESCRIPTION:
			case DIAGNOSTICS:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENFORCED:
			case ENGINE:
			case ENGINES:
			case ENGINE_ATTRIBUTE:
			case ENUM:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUDE:
			case EXECUTE:
			case EXPANSION:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAILED_LOGIN_ATTEMPTS:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWING:
			case FOLLOWS:
			case FORMAT:
			case FULL:
			case GENERAL:
			case GEOMCOLLECTION:
			case GEOMETRY:
			case GEOMETRYCOLLECTION:
			case GET_FORMAT:
			case GET_MASTER_PUBLIC_KEY:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HISTOGRAM:
			case HISTORY:
			case HOST:
			case HOSTS:
			case HOUR:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INACTIVE:
			case INDEXES:
			case INITIAL_SIZE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case JSON_VALUE:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LINESTRING:
			case LIST:
			case LOCAL:
			case LOCKED:
			case LOCKS:
			case LOGFILE:
			case LOGS:
			case MANAGED:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_COMPRESSION_ALGORITHMS:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_PUBLIC_KEY_PATH:
			case MASTER_RETRY_COUNT:
			case MASTER_SERVER_ID:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_CIPHERSUITES:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MASTER_ZSTD_COMPRESSION_LEVEL:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMORY:
			case MERGE:
			case MESSAGE_TEXT:
			case MICROSECOND:
			case MIGRATE:
			case MINUTE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MONTH:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case MUTEX:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NATIONAL:
			case NCHAR:
			case NDB:
			case NDBCLUSTER:
			case NESTED:
			case NETWORK_NAMESPACE:
			case NEVER:
			case NEW:
			case NEXT:
			case NO:
			case NODEGROUP:
			case NONE:
			case NOWAIT:
			case NO_WAIT:
			case NULLS:
			case NUMBER:
			case NVARCHAR:
			case OFF:
			case OFFSET:
			case OJ:
			case OLD:
			case ONE:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PASSWORD:
			case PASSWORD_LOCK_TIME:
			case PATH:
			case PERSIST:
			case PERSIST_ONLY:
			case PHASE:
			case PLUGIN:
			case PLUGINS:
			case PLUGIN_DIR:
			case POINT:
			case POLYGON:
			case PORT:
			case PRECEDES:
			case PRECEDING:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PRIVILEGES:
			case PRIVILEGE_CHECKS_USER:
			case PROCESS:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUARTER:
			case QUERY:
			case QUICK:
			case RANDOM:
			case READ_ONLY:
			case REBUILD:
			case RECOVER:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case REFERENCE:
			case RELAY:
			case RELAYLOG:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAY_THREAD:
			case RELOAD:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPEATABLE:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case REQUIRE_ROW_FORMAT:
			case RESET:
			case RESOURCE:
			case RESPECT:
			case RESTART:
			case RESTORE:
			case RESUME:
			case RETAIN:
			case RETURNED_SQLSTATE:
			case RETURNING:
			case RETURNS:
			case REUSE:
			case REVERSE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROUTINE:
			case ROW_COUNT:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SCHEMA_NAME:
			case SECOND:
			case SECONDARY:
			case SECONDARY_ENGINE:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SECONDARY_LOAD:
			case SECONDARY_UNLOAD:
			case SECURITY:
			case SERIAL:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHUTDOWN:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_CACHE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case SQL_TSI_DAY:
			case SQL_TSI_HOUR:
			case SQL_TSI_MINUTE:
			case SQL_TSI_MONTH:
			case SQL_TSI_QUARTER:
			case SQL_TSI_SECOND:
			case SQL_TSI_WEEK:
			case SQL_TSI_YEAR:
			case SRID:
			case STACKED:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STREAM:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUPER:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLES:
			case TABLESPACE:
			case TABLE_CHECKSUM:
			case TABLE_NAME:
			case TEMPORARY:
			case TEMPTABLE:
			case TEXT:
			case THAN:
			case THREAD_PRIORITY:
			case TIES:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TLS:
			case TRANSACTION:
			case TRIGGERS:
			case TRUNCATE:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNICODE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USER_RESOURCES:
			case USE_FRM:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VCPU:
			case VIEW:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WEEK:
			case WEIGHT_STRING:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XID:
			case XML:
			case YEAR:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3048);
				tableName();
				setState(3050);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(3049);
					partitionNames_();
					}
				}

				setState(3056);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
				case 1:
					{
					setState(3053);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3052);
						match(AS);
						}
					}

					setState(3055);
					alias();
					}
					break;
				}
				setState(3059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE || _la==IGNORE || _la==USE) {
					{
					setState(3058);
					indexHintList_();
					}
				}

				}
				break;
			case T__0:
				enterOuterAlt(_localctx, 2);
				{
				setState(3061);
				subquery();
				setState(3063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3062);
					match(AS);
					}
				}

				setState(3065);
				alias();
				setState(3067);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LP_) | (1L << MAX) | (1L << MIN) | (1L << SUM) | (1L << COUNT) | (1L << GROUP_CONCAT) | (1L << CAST) | (1L << POSITION) | (1L << SUBSTRING) | (1L << SUBSTR) | (1L << EXTRACT) | (1L << TRIM) | (1L << LAST_DAY) | (1L << TRADITIONAL) | (1L << TREE) | (1L << MYSQL_ADMIN) | (1L << INSTANT) | (1L << INPLACE) | (1L << COPY))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UL_BINARY - 64)) | (1L << (AUTOCOMMIT - 64)) | (1L << (ACCOUNT - 64)) | (1L << (ACTION - 64)) | (1L << (ACTIVE - 64)) | (1L << (ADMIN - 64)) | (1L << (AFTER - 64)) | (1L << (AGAINST - 64)) | (1L << (AGGREGATE - 64)) | (1L << (ALGORITHM - 64)) | (1L << (ALWAYS - 64)) | (1L << (ANY - 64)) | (1L << (ASCII - 64)) | (1L << (AT - 64)) | (1L << (ATTRIBUTE - 64)) | (1L << (AUTOEXTEND_SIZE - 64)) | (1L << (AUTO_INCREMENT - 64)) | (1L << (AVG - 64)) | (1L << (AVG_ROW_LENGTH - 64)) | (1L << (BACKUP - 64)) | (1L << (BEGIN - 64)) | (1L << (BINLOG - 64)) | (1L << (BIT - 64)) | (1L << (BLOCK - 64)) | (1L << (BOOL - 64)) | (1L << (BOOLEAN - 64)) | (1L << (BTREE - 64)) | (1L << (BUCKETS - 64)) | (1L << (BYTE - 64)) | (1L << (CACHE - 64)) | (1L << (CASCADED - 64)) | (1L << (CATALOG_NAME - 64)) | (1L << (CHAIN - 64)) | (1L << (CHANGED - 64)) | (1L << (CHANNEL - 64)) | (1L << (CHARSET - 64)) | (1L << (CHECKSUM - 64)) | (1L << (CIPHER - 64)) | (1L << (CLASS_ORIGIN - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (CLIENT - 128)) | (1L << (CLONE - 128)) | (1L << (CLOSE - 128)) | (1L << (COALESCE - 128)) | (1L << (CODE - 128)) | (1L << (COLLATION - 128)) | (1L << (COLUMNS - 128)) | (1L << (COLUMN_FORMAT - 128)) | (1L << (COMMENT - 128)) | (1L << (COMMIT - 128)) | (1L << (COMMITTED - 128)) | (1L << (COMPACT - 128)) | (1L << (COMPLETION - 128)) | (1L << (COMPONENT - 128)) | (1L << (COMPRESSED - 128)) | (1L << (COMPRESSION - 128)) | (1L << (CONCURRENT - 128)) | (1L << (CONNECTION - 128)) | (1L << (CONSISTENT - 128)) | (1L << (CONSTRAINT_CATALOG - 128)) | (1L << (CONSTRAINT_NAME - 128)) | (1L << (CONSTRAINT_SCHEMA - 128)) | (1L << (CONTAINS - 128)) | (1L << (CONTEXT - 128)) | (1L << (CPU - 128)) | (1L << (CURRENT - 128)) | (1L << (CURSOR_NAME - 128)) | (1L << (DATA - 128)) | (1L << (DATAFILE - 128)) | (1L << (DATE - 128)) | (1L << (DATETIME - 128)) | (1L << (DAY - 128)) | (1L << (DEALLOCATE - 128)) | (1L << (DEFAULT_AUTH - 128)) | (1L << (DEFINER - 128)) | (1L << (DEFINITION - 128)) | (1L << (DELAY_KEY_WRITE - 128)))) != 0) || ((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (DESCRIPTION - 196)) | (1L << (DIAGNOSTICS - 196)) | (1L << (DIRECTORY - 196)) | (1L << (DISABLE - 196)) | (1L << (DISCARD - 196)) | (1L << (DISK - 196)) | (1L << (DO - 196)) | (1L << (DUMPFILE - 196)) | (1L << (DUPLICATE - 196)) | (1L << (DYNAMIC - 196)) | (1L << (ENABLE - 196)) | (1L << (ENCRYPTION - 196)) | (1L << (END - 196)) | (1L << (ENDS - 196)) | (1L << (ENFORCED - 196)) | (1L << (ENGINE - 196)) | (1L << (ENGINES - 196)) | (1L << (ENGINE_ATTRIBUTE - 196)) | (1L << (ENUM - 196)) | (1L << (ERROR - 196)) | (1L << (ERRORS - 196)) | (1L << (ESCAPE - 196)) | (1L << (EVENT - 196)) | (1L << (EVENTS - 196)) | (1L << (EVERY - 196)) | (1L << (EXCHANGE - 196)) | (1L << (EXCLUDE - 196)) | (1L << (EXECUTE - 196)) | (1L << (EXPANSION - 196)) | (1L << (EXPIRE - 196)) | (1L << (EXPORT - 196)) | (1L << (EXTENDED - 196)) | (1L << (EXTENT_SIZE - 196)) | (1L << (FAILED_LOGIN_ATTEMPTS - 196)) | (1L << (FAST - 196)) | (1L << (FAULTS - 196)) | (1L << (FIELDS - 196)) | (1L << (FILE - 196)) | (1L << (FILE_BLOCK_SIZE - 196)) | (1L << (FILTER - 196)) | (1L << (FIRST - 196)) | (1L << (FIXED - 196)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (FLUSH - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FOLLOWS - 261)) | (1L << (FORMAT - 261)) | (1L << (FULL - 261)) | (1L << (GENERAL - 261)) | (1L << (GEOMCOLLECTION - 261)) | (1L << (GEOMETRY - 261)) | (1L << (GEOMETRYCOLLECTION - 261)) | (1L << (GET_FORMAT - 261)) | (1L << (GET_MASTER_PUBLIC_KEY - 261)) | (1L << (GLOBAL - 261)) | (1L << (GRANTS - 261)) | (1L << (GROUP_REPLICATION - 261)) | (1L << (HANDLER - 261)) | (1L << (HASH - 261)) | (1L << (HELP - 261)) | (1L << (HISTOGRAM - 261)) | (1L << (HISTORY - 261)) | (1L << (HOST - 261)) | (1L << (HOSTS - 261)) | (1L << (HOUR - 261)) | (1L << (IDENTIFIED - 261)) | (1L << (IGNORE_SERVER_IDS - 261)) | (1L << (IMPORT - 261)) | (1L << (INACTIVE - 261)) | (1L << (INDEXES - 261)) | (1L << (INITIAL_SIZE - 261)) | (1L << (INSERT_METHOD - 261)) | (1L << (INSTALL - 261)) | (1L << (INSTANCE - 261)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (JSON_VALUE - 328)) | (1L << (KEY_BLOCK_SIZE - 328)) | (1L << (LANGUAGE - 328)) | (1L << (LAST - 328)) | (1L << (LEAVES - 328)) | (1L << (LESS - 328)) | (1L << (LEVEL - 328)) | (1L << (LINESTRING - 328)) | (1L << (LIST - 328)) | (1L << (LOCAL - 328)) | (1L << (LOCKED - 328)) | (1L << (LOCKS - 328)) | (1L << (LOGFILE - 328)) | (1L << (LOGS - 328)) | (1L << (MANAGED - 328)) | (1L << (MASTER - 328)) | (1L << (MASTER_AUTO_POSITION - 328)) | (1L << (MASTER_COMPRESSION_ALGORITHMS - 328)) | (1L << (MASTER_CONNECT_RETRY - 328)) | (1L << (MASTER_DELAY - 328)) | (1L << (MASTER_HEARTBEAT_PERIOD - 328)) | (1L << (MASTER_HOST - 328)) | (1L << (MASTER_LOG_FILE - 328)) | (1L << (MASTER_LOG_POS - 328)) | (1L << (MASTER_PASSWORD - 328)) | (1L << (MASTER_PORT - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (MASTER_PUBLIC_KEY_PATH - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SERVER_ID - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_CIPHERSUITES - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MASTER_ZSTD_COMPRESSION_LEVEL - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MEMORY - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MICROSECOND - 392)) | (1L << (MIGRATE - 392)) | (1L << (MINUTE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MONTH - 392)) | (1L << (MULTILINESTRING - 392)) | (1L << (MULTIPOINT - 392)) | (1L << (MULTIPOLYGON - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NATIONAL - 392)) | (1L << (NCHAR - 392)) | (1L << (NDB - 392)) | (1L << (NDBCLUSTER - 392)) | (1L << (NESTED - 392)) | (1L << (NETWORK_NAMESPACE - 392)) | (1L << (NEVER - 392)) | (1L << (NEW - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)))) != 0) || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (NOWAIT - 457)) | (1L << (NO_WAIT - 457)) | (1L << (NULLS - 457)) | (1L << (NUMBER - 457)) | (1L << (NVARCHAR - 457)) | (1L << (OFF - 457)) | (1L << (OFFSET - 457)) | (1L << (OJ - 457)) | (1L << (OLD - 457)) | (1L << (ONE - 457)) | (1L << (ONLY - 457)) | (1L << (OPEN - 457)) | (1L << (OPTIONAL - 457)) | (1L << (OPTIONS - 457)) | (1L << (ORDINALITY - 457)) | (1L << (OTHERS - 457)) | (1L << (OWNER - 457)) | (1L << (PACK_KEYS - 457)) | (1L << (PAGE - 457)) | (1L << (PARSER - 457)) | (1L << (PARTIAL - 457)) | (1L << (PARTITIONING - 457)) | (1L << (PASSWORD - 457)) | (1L << (PASSWORD_LOCK_TIME - 457)) | (1L << (PATH - 457)) | (1L << (PERSIST - 457)) | (1L << (PERSIST_ONLY - 457)) | (1L << (PHASE - 457)) | (1L << (PLUGIN - 457)) | (1L << (PLUGINS - 457)) | (1L << (PLUGIN_DIR - 457)) | (1L << (POINT - 457)) | (1L << (POLYGON - 457)) | (1L << (PORT - 457)) | (1L << (PRECEDES - 457)) | (1L << (PRECEDING - 457)) | (1L << (PREPARE - 457)) | (1L << (PRESERVE - 457)) | (1L << (PREV - 457)) | (1L << (PRIVILEGES - 457)) | (1L << (PRIVILEGE_CHECKS_USER - 457)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (PROCESS - 522)) | (1L << (PROCESSLIST - 522)) | (1L << (PROFILE - 522)) | (1L << (PROFILES - 522)) | (1L << (PROXY - 522)) | (1L << (QUARTER - 522)) | (1L << (QUERY - 522)) | (1L << (QUICK - 522)) | (1L << (RANDOM - 522)) | (1L << (READ_ONLY - 522)) | (1L << (REBUILD - 522)) | (1L << (RECOVER - 522)) | (1L << (REDO_BUFFER_SIZE - 522)) | (1L << (REDUNDANT - 522)) | (1L << (REFERENCE - 522)) | (1L << (RELAY - 522)) | (1L << (RELAYLOG - 522)) | (1L << (RELAY_LOG_FILE - 522)) | (1L << (RELAY_LOG_POS - 522)) | (1L << (RELAY_THREAD - 522)) | (1L << (RELOAD - 522)) | (1L << (REMOVE - 522)) | (1L << (REORGANIZE - 522)) | (1L << (REPAIR - 522)) | (1L << (REPEATABLE - 522)) | (1L << (REPLICATE_DO_DB - 522)) | (1L << (REPLICATE_DO_TABLE - 522)) | (1L << (REPLICATE_IGNORE_DB - 522)) | (1L << (REPLICATE_IGNORE_TABLE - 522)) | (1L << (REPLICATE_REWRITE_DB - 522)) | (1L << (REPLICATE_WILD_DO_TABLE - 522)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 522)) | (1L << (REPLICATION - 522)) | (1L << (REQUIRE_ROW_FORMAT - 522)) | (1L << (RESET - 522)) | (1L << (RESOURCE - 522)) | (1L << (RESPECT - 522)) | (1L << (RESTART - 522)) | (1L << (RESTORE - 522)) | (1L << (RESUME - 522)) | (1L << (RETAIN - 522)) | (1L << (RETURNED_SQLSTATE - 522)) | (1L << (RETURNING - 522)) | (1L << (RETURNS - 522)) | (1L << (REUSE - 522)) | (1L << (REVERSE - 522)))) != 0) || ((((_la - 589)) & ~0x3f) == 0 && ((1L << (_la - 589)) & ((1L << (ROLE - 589)) | (1L << (ROLLBACK - 589)) | (1L << (ROLLUP - 589)) | (1L << (ROTATE - 589)) | (1L << (ROUTINE - 589)) | (1L << (ROW_COUNT - 589)) | (1L << (ROW_FORMAT - 589)) | (1L << (RTREE - 589)) | (1L << (SAVEPOINT - 589)) | (1L << (SCHEDULE - 589)) | (1L << (SCHEMA_NAME - 589)) | (1L << (SECOND - 589)) | (1L << (SECONDARY - 589)) | (1L << (SECONDARY_ENGINE - 589)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 589)) | (1L << (SECONDARY_LOAD - 589)) | (1L << (SECONDARY_UNLOAD - 589)) | (1L << (SECURITY - 589)) | (1L << (SERIAL - 589)) | (1L << (SERIALIZABLE - 589)) | (1L << (SERVER - 589)) | (1L << (SESSION - 589)) | (1L << (SHARE - 589)) | (1L << (SHUTDOWN - 589)) | (1L << (SIGNED - 589)) | (1L << (SIMPLE - 589)) | (1L << (SLAVE - 589)) | (1L << (SLOW - 589)) | (1L << (SNAPSHOT - 589)) | (1L << (SOCKET - 589)) | (1L << (SOME - 589)) | (1L << (SONAME - 589)) | (1L << (SOUNDS - 589)) | (1L << (SOURCE - 589)) | (1L << (SQL_CACHE - 589)) | (1L << (SQL_AFTER_GTIDS - 589)) | (1L << (SQL_AFTER_MTS_GAPS - 589)) | (1L << (SQL_BEFORE_GTIDS - 589)) | (1L << (SQL_BUFFER_RESULT - 589)) | (1L << (SQL_NO_CACHE - 589)) | (1L << (SQL_THREAD - 589)) | (1L << (SQL_TSI_DAY - 589)))) != 0) || ((((_la - 653)) & ~0x3f) == 0 && ((1L << (_la - 653)) & ((1L << (SQL_TSI_HOUR - 653)) | (1L << (SQL_TSI_MINUTE - 653)) | (1L << (SQL_TSI_MONTH - 653)) | (1L << (SQL_TSI_QUARTER - 653)) | (1L << (SQL_TSI_SECOND - 653)) | (1L << (SQL_TSI_WEEK - 653)) | (1L << (SQL_TSI_YEAR - 653)) | (1L << (SRID - 653)) | (1L << (STACKED - 653)) | (1L << (START - 653)) | (1L << (STARTS - 653)) | (1L << (STATS_AUTO_RECALC - 653)) | (1L << (STATS_PERSISTENT - 653)) | (1L << (STATS_SAMPLE_PAGES - 653)) | (1L << (STATUS - 653)) | (1L << (STOP - 653)) | (1L << (STORAGE - 653)) | (1L << (STREAM - 653)) | (1L << (STRING - 653)) | (1L << (SUBCLASS_ORIGIN - 653)) | (1L << (SUBJECT - 653)) | (1L << (SUBPARTITION - 653)) | (1L << (SUBPARTITIONS - 653)) | (1L << (SUPER - 653)) | (1L << (SUSPEND - 653)) | (1L << (SWAPS - 653)) | (1L << (SWITCHES - 653)) | (1L << (TABLES - 653)) | (1L << (TABLESPACE - 653)) | (1L << (TABLE_CHECKSUM - 653)) | (1L << (TABLE_NAME - 653)) | (1L << (TEMPORARY - 653)) | (1L << (TEMPTABLE - 653)) | (1L << (TEXT - 653)) | (1L << (THAN - 653)) | (1L << (THREAD_PRIORITY - 653)) | (1L << (TIES - 653)) | (1L << (TIME - 653)) | (1L << (TIMESTAMP - 653)) | (1L << (TIMESTAMPADD - 653)) | (1L << (TIMESTAMPDIFF - 653)) | (1L << (TLS - 653)) | (1L << (TRANSACTION - 653)) | (1L << (TRIGGERS - 653)) | (1L << (TRUNCATE - 653)) | (1L << (TYPE - 653)) | (1L << (TYPES - 653)) | (1L << (UNBOUNDED - 653)) | (1L << (UNCOMMITTED - 653)))) != 0) || ((((_la - 717)) & ~0x3f) == 0 && ((1L << (_la - 717)) & ((1L << (UNDEFINED - 717)) | (1L << (UNDOFILE - 717)) | (1L << (UNDO_BUFFER_SIZE - 717)) | (1L << (UNICODE - 717)) | (1L << (UNINSTALL - 717)) | (1L << (UNKNOWN - 717)) | (1L << (UNTIL - 717)) | (1L << (UPGRADE - 717)) | (1L << (USER - 717)) | (1L << (USER_RESOURCES - 717)) | (1L << (USE_FRM - 717)) | (1L << (VALIDATION - 717)) | (1L << (VALUE - 717)) | (1L << (VARIABLES - 717)) | (1L << (VCPU - 717)) | (1L << (VIEW - 717)) | (1L << (VISIBLE - 717)) | (1L << (WAIT - 717)) | (1L << (WARNINGS - 717)) | (1L << (WEEK - 717)) | (1L << (WEIGHT_STRING - 717)) | (1L << (WITHOUT - 717)) | (1L << (WORK - 717)) | (1L << (WRAPPER - 717)) | (1L << (X509 - 717)) | (1L << (XA - 717)) | (1L << (XID - 717)) | (1L << (XML - 717)) | (1L << (YEAR - 717)) | (1L << (IDENTIFIER_ - 717)))) != 0)) {
					{
					setState(3066);
					columnNames();
					}
				}

				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 3);
				{
				setState(3069);
				match(LP_);
				setState(3070);
				tableReferences();
				setState(3071);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionNames_Context extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DALStatementParser.PARTITION, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public PartitionNames_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionNames_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterPartitionNames_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitPartitionNames_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitPartitionNames_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionNames_Context partitionNames_() throws RecognitionException {
		PartitionNames_Context _localctx = new PartitionNames_Context(_ctx, getState());
		enterRule(_localctx, 526, RULE_partitionNames_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3075);
			match(PARTITION);
			setState(3076);
			match(LP_);
			setState(3077);
			identifier();
			setState(3082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3078);
				match(COMMA_);
				setState(3079);
				identifier();
				}
				}
				setState(3084);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3085);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintList_Context extends ParserRuleContext {
		public List<IndexHint_Context> indexHint_() {
			return getRuleContexts(IndexHint_Context.class);
		}
		public IndexHint_Context indexHint_(int i) {
			return getRuleContext(IndexHint_Context.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public IndexHintList_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintList_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterIndexHintList_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitIndexHintList_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitIndexHintList_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintList_Context indexHintList_() throws RecognitionException {
		IndexHintList_Context _localctx = new IndexHintList_Context(_ctx, getState());
		enterRule(_localctx, 528, RULE_indexHintList_);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3087);
			indexHint_();
			setState(3092);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,370,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3088);
					match(COMMA_);
					setState(3089);
					indexHint_();
					}
					} 
				}
				setState(3094);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,370,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHint_Context extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public List<IndexNameContext> indexName() {
			return getRuleContexts(IndexNameContext.class);
		}
		public IndexNameContext indexName(int i) {
			return getRuleContext(IndexNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public TerminalNode USE() { return getToken(DALStatementParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(DALStatementParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(DALStatementParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(DALStatementParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(DALStatementParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(DALStatementParser.FOR, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public TerminalNode JOIN() { return getToken(DALStatementParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(DALStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DALStatementParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(DALStatementParser.GROUP, 0); }
		public IndexHint_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterIndexHint_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitIndexHint_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitIndexHint_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHint_Context indexHint_() throws RecognitionException {
		IndexHint_Context _localctx = new IndexHint_Context(_ctx, getState());
		enterRule(_localctx, 530, RULE_indexHint_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3095);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3096);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3105);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3097);
				match(FOR);
				setState(3103);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case JOIN:
					{
					setState(3098);
					match(JOIN);
					}
					break;
				case ORDER:
					{
					setState(3099);
					match(ORDER);
					setState(3100);
					match(BY);
					}
					break;
				case GROUP:
					{
					setState(3101);
					match(GROUP);
					setState(3102);
					match(BY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(3107);
			match(LP_);
			setState(3108);
			indexName();
			setState(3113);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3109);
				match(COMMA_);
				setState(3110);
				indexName();
				}
				}
				setState(3115);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3116);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinedTableContext extends ParserRuleContext {
		public TableFactorContext tableFactor() {
			return getRuleContext(TableFactorContext.class,0);
		}
		public TerminalNode JOIN() { return getToken(DALStatementParser.JOIN, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(DALStatementParser.STRAIGHT_JOIN, 0); }
		public JoinSpecificationContext joinSpecification() {
			return getRuleContext(JoinSpecificationContext.class,0);
		}
		public TerminalNode INNER() { return getToken(DALStatementParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(DALStatementParser.CROSS, 0); }
		public TerminalNode LEFT() { return getToken(DALStatementParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(DALStatementParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(DALStatementParser.OUTER, 0); }
		public TerminalNode NATURAL() { return getToken(DALStatementParser.NATURAL, 0); }
		public JoinedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterJoinedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitJoinedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitJoinedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinedTableContext joinedTable() throws RecognitionException {
		JoinedTableContext _localctx = new JoinedTableContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_joinedTable);
		int _la;
		try {
			setState(3145);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3123);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CROSS:
				case INNER:
				case JOIN:
					{
					setState(3119);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CROSS || _la==INNER) {
						{
						setState(3118);
						_la = _input.LA(1);
						if ( !(_la==CROSS || _la==INNER) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3121);
					match(JOIN);
					}
					break;
				case STRAIGHT_JOIN:
					{
					setState(3122);
					match(STRAIGHT_JOIN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3125);
				tableFactor();
				setState(3127);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
				case 1:
					{
					setState(3126);
					joinSpecification();
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3129);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(3130);
					match(OUTER);
					}
				}

				setState(3133);
				match(JOIN);
				setState(3134);
				tableFactor();
				setState(3135);
				joinSpecification();
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3137);
				match(NATURAL);
				setState(3141);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INNER:
					{
					setState(3138);
					match(INNER);
					}
					break;
				case LEFT:
				case RIGHT:
					{
					setState(3139);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					{
					setState(3140);
					match(OUTER);
					}
					}
					break;
				case JOIN:
					break;
				default:
					break;
				}
				setState(3143);
				match(JOIN);
				setState(3144);
				tableFactor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinSpecificationContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DALStatementParser.ON, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public TerminalNode USING() { return getToken(DALStatementParser.USING, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public JoinSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterJoinSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitJoinSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitJoinSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinSpecificationContext joinSpecification() throws RecognitionException {
		JoinSpecificationContext _localctx = new JoinSpecificationContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_joinSpecification);
		try {
			setState(3151);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3147);
				match(ON);
				setState(3148);
				expr(0);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3149);
				match(USING);
				setState(3150);
				columnNames();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(DALStatementParser.WHERE, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3153);
			match(WHERE);
			setState(3154);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(DALStatementParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(DALStatementParser.BY, 0); }
		public List<OrderByItemContext> orderByItem() {
			return getRuleContexts(OrderByItemContext.class);
		}
		public OrderByItemContext orderByItem(int i) {
			return getRuleContext(OrderByItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public TerminalNode WITH() { return getToken(DALStatementParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(DALStatementParser.ROLLUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_groupByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3156);
			match(GROUP);
			setState(3157);
			match(BY);
			setState(3158);
			orderByItem();
			setState(3163);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3159);
				match(COMMA_);
				setState(3160);
				orderByItem();
				}
				}
				setState(3165);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3166);
				match(WITH);
				setState(3167);
				match(ROLLUP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(DALStatementParser.HAVING, 0); }
		public ExprContext expr() {
			return getRuleContext(ExprContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3170);
			match(HAVING);
			setState(3171);
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(DALStatementParser.LIMIT, 0); }
		public LimitRowCountContext limitRowCount() {
			return getRuleContext(LimitRowCountContext.class,0);
		}
		public TerminalNode OFFSET() { return getToken(DALStatementParser.OFFSET, 0); }
		public LimitOffsetContext limitOffset() {
			return getRuleContext(LimitOffsetContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DALStatementParser.COMMA_, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3173);
			match(LIMIT);
			setState(3184);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
			case 1:
				{
				setState(3177);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
				case 1:
					{
					setState(3174);
					limitOffset();
					setState(3175);
					match(COMMA_);
					}
					break;
				}
				setState(3179);
				limitRowCount();
				}
				break;
			case 2:
				{
				setState(3180);
				limitRowCount();
				setState(3181);
				match(OFFSET);
				setState(3182);
				limitOffset();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitRowCountContext extends ParserRuleContext {
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public LimitRowCountContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitRowCount; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterLimitRowCount(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitLimitRowCount(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitLimitRowCount(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitRowCountContext limitRowCount() throws RecognitionException {
		LimitRowCountContext _localctx = new LimitRowCountContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_limitRowCount);
		try {
			setState(3188);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3186);
				numberLiterals();
				}
				break;
			case QUESTION_:
				enterOuterAlt(_localctx, 2);
				{
				setState(3187);
				parameterMarker();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitOffsetContext extends ParserRuleContext {
		public NumberLiteralsContext numberLiterals() {
			return getRuleContext(NumberLiteralsContext.class,0);
		}
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public LimitOffsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitOffset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterLimitOffset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitLimitOffset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitLimitOffset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitOffsetContext limitOffset() throws RecognitionException {
		LimitOffsetContext _localctx = new LimitOffsetContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_limitOffset);
		try {
			setState(3192);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3190);
				numberLiterals();
				}
				break;
			case QUESTION_:
				enterOuterAlt(_localctx, 2);
				{
				setState(3191);
				parameterMarker();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClause_Context extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(DALStatementParser.WINDOW, 0); }
		public List<WindowItem_Context> windowItem_() {
			return getRuleContexts(WindowItem_Context.class);
		}
		public WindowItem_Context windowItem_(int i) {
			return getRuleContext(WindowItem_Context.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public WindowClause_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterWindowClause_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitWindowClause_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitWindowClause_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClause_Context windowClause_() throws RecognitionException {
		WindowClause_Context _localctx = new WindowClause_Context(_ctx, getState());
		enterRule(_localctx, 548, RULE_windowClause_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3194);
			match(WINDOW);
			setState(3195);
			windowItem_();
			setState(3200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3196);
				match(COMMA_);
				setState(3197);
				windowItem_();
				}
				}
				setState(3202);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowItem_Context extends ParserRuleContext {
		public IgnoredIdentifier_Context ignoredIdentifier_() {
			return getRuleContext(IgnoredIdentifier_Context.class,0);
		}
		public TerminalNode AS() { return getToken(DALStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(DALStatementParser.LP_, 0); }
		public WindowSpecification_Context windowSpecification_() {
			return getRuleContext(WindowSpecification_Context.class,0);
		}
		public TerminalNode RP_() { return getToken(DALStatementParser.RP_, 0); }
		public WindowItem_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowItem_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterWindowItem_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitWindowItem_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitWindowItem_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowItem_Context windowItem_() throws RecognitionException {
		WindowItem_Context _localctx = new WindowItem_Context(_ctx, getState());
		enterRule(_localctx, 550, RULE_windowItem_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3203);
			ignoredIdentifier_();
			setState(3204);
			match(AS);
			setState(3205);
			match(LP_);
			setState(3206);
			windowSpecification_();
			setState(3207);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesInto_Context extends ParserRuleContext {
		public TerminalNode STARTING() { return getToken(DALStatementParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(DALStatementParser.BY, 0); }
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public TerminalNode TERMINATED() { return getToken(DALStatementParser.TERMINATED, 0); }
		public SelectLinesInto_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSelectLinesInto_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSelectLinesInto_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSelectLinesInto_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLinesInto_Context selectLinesInto_() throws RecognitionException {
		SelectLinesInto_Context _localctx = new SelectLinesInto_Context(_ctx, getState());
		enterRule(_localctx, 552, RULE_selectLinesInto_);
		try {
			setState(3215);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3209);
				match(STARTING);
				setState(3210);
				match(BY);
				setState(3211);
				match(STRING_);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(3212);
				match(TERMINATED);
				setState(3213);
				match(BY);
				setState(3214);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsInto_Context extends ParserRuleContext {
		public TerminalNode TERMINATED() { return getToken(DALStatementParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(DALStatementParser.BY, 0); }
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public TerminalNode ENCLOSED() { return getToken(DALStatementParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(DALStatementParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(DALStatementParser.ESCAPED, 0); }
		public SelectFieldsInto_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSelectFieldsInto_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSelectFieldsInto_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSelectFieldsInto_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFieldsInto_Context selectFieldsInto_() throws RecognitionException {
		SelectFieldsInto_Context _localctx = new SelectFieldsInto_Context(_ctx, getState());
		enterRule(_localctx, 554, RULE_selectFieldsInto_);
		int _la;
		try {
			setState(3229);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3217);
				match(TERMINATED);
				setState(3218);
				match(BY);
				setState(3219);
				match(STRING_);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3221);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(3220);
					match(OPTIONALLY);
					}
				}

				setState(3223);
				match(ENCLOSED);
				setState(3224);
				match(BY);
				setState(3225);
				match(STRING_);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(3226);
				match(ESCAPED);
				setState(3227);
				match(BY);
				setState(3228);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoExpression_Context extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(DALStatementParser.INTO, 0); }
		public List<VariableContext> variable() {
			return getRuleContexts(VariableContext.class);
		}
		public VariableContext variable(int i) {
			return getRuleContext(VariableContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DALStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DALStatementParser.COMMA_, i);
		}
		public TerminalNode DUMPFILE() { return getToken(DALStatementParser.DUMPFILE, 0); }
		public TerminalNode STRING_() { return getToken(DALStatementParser.STRING_, 0); }
		public TerminalNode OUTFILE() { return getToken(DALStatementParser.OUTFILE, 0); }
		public TerminalNode CHARACTER() { return getToken(DALStatementParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(DALStatementParser.SET, 0); }
		public TerminalNode IDENTIFIER_() { return getToken(DALStatementParser.IDENTIFIER_, 0); }
		public TerminalNode LINES() { return getToken(DALStatementParser.LINES, 0); }
		public TerminalNode FIELDS() { return getToken(DALStatementParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(DALStatementParser.COLUMNS, 0); }
		public List<SelectFieldsInto_Context> selectFieldsInto_() {
			return getRuleContexts(SelectFieldsInto_Context.class);
		}
		public SelectFieldsInto_Context selectFieldsInto_(int i) {
			return getRuleContext(SelectFieldsInto_Context.class,i);
		}
		public List<SelectLinesInto_Context> selectLinesInto_() {
			return getRuleContexts(SelectLinesInto_Context.class);
		}
		public SelectLinesInto_Context selectLinesInto_(int i) {
			return getRuleContext(SelectLinesInto_Context.class,i);
		}
		public SelectIntoExpression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterSelectIntoExpression_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitSelectIntoExpression_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitSelectIntoExpression_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoExpression_Context selectIntoExpression_() throws RecognitionException {
		SelectIntoExpression_Context _localctx = new SelectIntoExpression_Context(_ctx, getState());
		enterRule(_localctx, 556, RULE_selectIntoExpression_);
		int _la;
		try {
			setState(3267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3231);
				match(INTO);
				setState(3232);
				variable();
				setState(3237);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(3233);
					match(COMMA_);
					setState(3234);
					variable();
					}
					}
					setState(3239);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3240);
				match(INTO);
				setState(3241);
				match(DUMPFILE);
				setState(3242);
				match(STRING_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(3243);
				match(INTO);
				setState(3244);
				match(OUTFILE);
				setState(3245);
				match(STRING_);
				setState(3249);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(3246);
					match(CHARACTER);
					setState(3247);
					match(SET);
					setState(3248);
					match(IDENTIFIER_);
					}
				}

				setState(3257);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS || _la==FIELDS) {
					{
					setState(3251);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3253); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3252);
						selectFieldsInto_();
						}
						}
						setState(3255); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
				}

				setState(3265);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(3259);
					match(LINES);
					setState(3261); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3260);
						selectLinesInto_();
						}
						}
						setState(3263); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockClauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DALStatementParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(DALStatementParser.UPDATE, 0); }
		public TerminalNode LOCK() { return getToken(DALStatementParser.LOCK, 0); }
		public TerminalNode IN() { return getToken(DALStatementParser.IN, 0); }
		public TerminalNode SHARE() { return getToken(DALStatementParser.SHARE, 0); }
		public TerminalNode MODE() { return getToken(DALStatementParser.MODE, 0); }
		public LockClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).enterLockClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DALStatementListener ) ((DALStatementListener)listener).exitLockClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DALStatementVisitor ) return ((DALStatementVisitor<? extends T>)visitor).visitLockClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockClauseContext lockClause() throws RecognitionException {
		LockClauseContext _localctx = new LockClauseContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_lockClause);
		try {
			setState(3275);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3269);
				match(FOR);
				setState(3270);
				match(UPDATE);
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(3271);
				match(LOCK);
				setState(3272);
				match(IN);
				setState(3273);
				match(SHARE);
				setState(3274);
				match(MODE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 143:
			return expr_sempred((ExprContext)_localctx, predIndex);
		case 146:
			return booleanPrimary_sempred((BooleanPrimaryContext)_localctx, predIndex);
		case 149:
			return bitExpr_sempred((BitExprContext)_localctx, predIndex);
		case 150:
			return simpleExpr_sempred((SimpleExprContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		case 1:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean booleanPrimary_sempred(BooleanPrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 5);
		case 3:
			return precpred(_ctx, 4);
		case 4:
			return precpred(_ctx, 3);
		case 5:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean bitExpr_sempred(BitExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 15);
		case 7:
			return precpred(_ctx, 14);
		case 8:
			return precpred(_ctx, 13);
		case 9:
			return precpred(_ctx, 12);
		case 10:
			return precpred(_ctx, 11);
		case 11:
			return precpred(_ctx, 10);
		case 12:
			return precpred(_ctx, 9);
		case 13:
			return precpred(_ctx, 8);
		case 14:
			return precpred(_ctx, 7);
		case 15:
			return precpred(_ctx, 6);
		case 16:
			return precpred(_ctx, 5);
		case 17:
			return precpred(_ctx, 4);
		case 18:
			return precpred(_ctx, 3);
		case 19:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean simpleExpr_sempred(SimpleExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20:
			return precpred(_ctx, 9);
		case 21:
			return precpred(_ctx, 11);
		}
		return true;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u030f\u0cd0\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\3\2\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\4\3\4\5\4\u023d\n\4\3\4\5\4\u0240\n"+
		"\4\3\4\3\4\3\4\3\4\5\4\u0246\n\4\3\4\3\4\5\4\u024a\n\4\3\5\3\5\3\5\5\5"+
		"\u024f\n\5\3\6\3\6\5\6\u0253\n\6\3\6\5\6\u0256\n\6\3\6\3\6\5\6\u025a\n"+
		"\6\3\6\5\6\u025d\n\6\3\7\3\7\3\7\3\7\5\7\u0263\n\7\3\7\5\7\u0266\n\7\3"+
		"\b\3\b\5\b\u026a\n\b\3\b\5\b\u026d\n\b\3\b\3\b\3\b\5\b\u0272\n\b\3\b\3"+
		"\b\5\b\u0276\n\b\3\t\3\t\5\t\u027a\n\t\3\t\3\t\3\t\5\t\u027f\n\t\3\t\5"+
		"\t\u0282\n\t\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\16"+
		"\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3\20\3\21\3\21\5\21\u029c\n\21\3\22"+
		"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u02aa\n\22"+
		"\3\23\3\23\3\23\3\23\7\23\u02b0\n\23\f\23\16\23\u02b3\13\23\3\24\3\24"+
		"\3\24\3\24\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\5\26\u02c2\n\26"+
		"\3\26\3\26\5\26\u02c6\n\26\3\26\3\26\3\26\5\26\u02cb\n\26\3\26\5\26\u02ce"+
		"\n\26\3\27\3\27\3\27\3\27\5\27\u02d4\n\27\3\30\3\30\3\30\5\30\u02d9\n"+
		"\30\3\31\3\31\3\31\3\31\5\31\u02df\n\31\3\31\3\31\3\32\3\32\3\32\3\32"+
		"\3\32\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35"+
		"\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3 \3 \3 "+
		"\3 \3 \3!\3!\5!\u0308\n!\3!\3!\3\"\3\"\3\"\3\"\3\"\5\"\u0311\n\"\3\"\3"+
		"\"\3\"\3\"\5\"\u0317\n\"\3\"\5\"\u031a\n\"\3#\3#\3#\5#\u031f\n#\3#\5#"+
		"\u0322\n#\3$\3$\3$\3$\3$\3%\3%\3%\3%\5%\u032d\n%\3&\3&\3&\3&\3&\3&\3&"+
		"\3&\6&\u0337\n&\r&\16&\u0338\5&\u033b\n&\5&\u033d\n&\3\'\3\'\3\'\3\'\3"+
		"(\3(\3(\3(\5(\u0347\n(\3(\5(\u034a\n(\3)\3)\3)\3*\3*\3*\3+\3+\3+\3+\3"+
		"+\3,\3,\3,\3,\3,\3-\3-\5-\u035e\n-\3-\3-\3.\3.\3.\3.\3.\7.\u0367\n.\f"+
		".\16.\u036a\13.\5.\u036c\n.\3.\3.\3.\5.\u0371\n.\3.\3.\3.\3.\5.\u0377"+
		"\n.\5.\u0379\n.\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\5\60\u0383\n\60\3\60"+
		"\3\60\5\60\u0387\n\60\3\60\3\60\3\60\5\60\u038c\n\60\3\60\5\60\u038f\n"+
		"\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62\3"+
		"\62\5\62\u039f\n\62\3\63\3\63\5\63\u03a3\n\63\3\63\3\63\5\63\u03a7\n\63"+
		"\3\64\3\64\3\64\5\64\u03ac\n\64\3\64\5\64\u03af\n\64\3\65\3\65\5\65\u03b3"+
		"\n\65\3\65\3\65\5\65\u03b7\n\65\3\66\3\66\3\66\3\66\3\66\5\66\u03be\n"+
		"\66\3\66\3\66\3\66\3\66\5\66\u03c4\n\66\3\66\5\66\u03c7\n\66\3\67\3\67"+
		"\3\67\3\67\5\67\u03cd\n\67\3\67\3\67\5\67\u03d1\n\67\38\38\38\38\38\5"+
		"8\u03d8\n8\38\58\u03db\n8\39\39\39\3:\3:\3:\3:\5:\u03e4\n:\3:\3:\3:\3"+
		":\3:\3:\3:\3:\3:\3:\3:\3:\5:\u03f2\n:\3:\5:\u03f5\n:\3:\3:\5:\u03f9\n"+
		":\3:\5:\u03fc\n:\5:\u03fe\n:\3;\3;\5;\u0402\n;\3;\3;\3;\3;\3;\3;\3;\3"+
		"<\3<\3<\3<\3<\7<\u0410\n<\f<\16<\u0413\13<\3=\3=\3=\3=\3=\3=\3>\3>\3>"+
		"\3>\3>\7>\u0420\n>\f>\16>\u0423\13>\3?\3?\3?\3?\3@\3@\5@\u042b\n@\3@\3"+
		"@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u043e\n@\3A\3A\3A\3"+
		"A\3A\3B\3B\3B\3B\3B\3B\3B\5B\u044c\nB\3C\3C\3C\3C\3C\3D\3D\5D\u0455\n"+
		"D\3D\3D\3D\3E\3E\5E\u045c\nE\3E\3E\3E\5E\u0461\nE\3E\5E\u0464\nE\3E\5"+
		"E\u0467\nE\3F\3F\3F\3F\3F\3F\5F\u046f\nF\3F\3F\3F\7F\u0474\nF\fF\16F\u0477"+
		"\13F\5F\u0479\nF\3F\3F\5F\u047d\nF\3F\5F\u0480\nF\3F\3F\3F\5F\u0485\n"+
		"F\5F\u0487\nF\3G\3G\3G\3G\5G\u048d\nG\3H\3H\3H\3H\3H\3H\3H\3H\3H\5H\u0498"+
		"\nH\3H\3H\3H\7H\u049d\nH\fH\16H\u04a0\13H\5H\u04a2\nH\3H\3H\5H\u04a6\n"+
		"H\3H\5H\u04a9\nH\3H\5H\u04ac\nH\3I\3I\3I\3I\3I\5I\u04b3\nI\3J\3J\3J\3"+
		"J\3J\3J\3J\3J\7J\u04bd\nJ\fJ\16J\u04c0\13J\5J\u04c2\nJ\3K\3K\3K\3L\3L"+
		"\3L\3L\3L\7L\u04cc\nL\fL\16L\u04cf\13L\3L\3L\3L\3L\3L\3L\5L\u04d7\nL\3"+
		"L\3L\3L\3M\3M\3M\3M\3M\3M\5M\u04e2\nM\3M\3M\3M\3M\3M\7M\u04e9\nM\fM\16"+
		"M\u04ec\13M\3M\3M\5M\u04f0\nM\3M\3M\5M\u04f4\nM\3N\3N\3N\7N\u04f9\nN\f"+
		"N\16N\u04fc\13N\3N\5N\u04ff\nN\3O\3O\5O\u0503\nO\3O\3O\3O\7O\u0508\nO"+
		"\fO\16O\u050b\13O\3O\5O\u050e\nO\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3"+
		"P\3P\3P\3P\3P\5P\u0521\nP\3P\3P\3P\3P\5P\u0527\nP\3Q\3Q\3Q\3Q\3Q\7Q\u052e"+
		"\nQ\fQ\16Q\u0531\13Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\7Q\u053b\nQ\fQ\16Q\u053e"+
		"\13Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\7Q\u0548\nQ\fQ\16Q\u054b\13Q\3Q\3Q\3Q\5Q"+
		"\u0550\nQ\3R\3R\5R\u0554\nR\3R\6R\u0557\nR\rR\16R\u0558\3S\3S\3S\3S\3"+
		"S\3S\3S\7S\u0562\nS\fS\16S\u0565\13S\3T\3T\3T\3T\7T\u056b\nT\fT\16T\u056e"+
		"\13T\3U\3U\3U\3U\5U\u0574\nU\3V\3V\3V\5V\u0579\nV\3V\3V\3W\3W\3X\3X\3"+
		"Y\3Y\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u058b\nZ\3[\3[\3\\\3\\\3]\3]\3^\3^\3^"+
		"\3^\3^\3^\3^\5^\u059a\n^\3_\5_\u059d\n_\3_\3_\5_\u05a1\n_\3`\5`\u05a4"+
		"\n`\3`\3`\3a\3a\3a\3a\3a\3a\3a\5a\u05af\na\3b\5b\u05b2\nb\3b\3b\5b\u05b6"+
		"\nb\3c\5c\u05b9\nc\3c\3c\5c\u05bd\nc\3d\3d\3e\3e\3f\3f\3g\3g\3h\3h\3h"+
		"\5h\u05ca\nh\3i\3i\3j\5j\u05cf\nj\3j\5j\u05d2\nj\3j\5j\u05d5\nj\3j\5j"+
		"\u05d8\nj\3j\3j\3k\3k\3l\3l\3m\3m\3m\7m\u05e3\nm\fm\16m\u05e6\13m\3n\3"+
		"n\3n\7n\u05eb\nn\fn\16n\u05ee\13n\3o\3o\3o\3o\3o\3o\3p\3p\3p\5p\u05f9"+
		"\np\3p\3p\3q\3q\3q\5q\u0600\nq\3q\3q\3r\3r\3s\3s\3s\3s\3s\5s\u060b\ns"+
		"\3t\3t\3t\3t\3t\3t\5t\u0613\nt\3u\3u\5u\u0617\nu\3v\3v\5v\u061b\nv\3w"+
		"\3w\3w\3w\5w\u0621\nw\3w\5w\u0624\nw\3x\3x\3x\3x\5x\u062a\nx\3x\5x\u062d"+
		"\nx\3y\3y\3z\3z\5z\u0633\nz\3{\3{\3|\5|\u0638\n|\3|\3|\3|\7|\u063d\n|"+
		"\f|\16|\u0640\13|\3|\5|\u0643\n|\3}\5}\u0646\n}\3}\3}\3}\7}\u064b\n}\f"+
		"}\16}\u064e\13}\3}\5}\u0651\n}\3~\3~\3\177\3\177\3\u0080\3\u0080\3\u0081"+
		"\3\u0081\3\u0082\3\u0082\3\u0083\3\u0083\3\u0084\3\u0084\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086\3\u0087\3\u0087\3\u0088"+
		"\3\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0672\n\u0089"+
		"\3\u008a\3\u008a\3\u008b\3\u008b\3\u008c\3\u008c\3\u008d\3\u008d\5\u008d"+
		"\u067c\n\u008d\3\u008e\3\u008e\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091\u068a\n\u0091\3\u0091"+
		"\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091\u0693\n\u0091"+
		"\f\u0091\16\u0091\u0696\13\u0091\3\u0092\3\u0092\3\u0093\3\u0093\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u06a2\n\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\7\u0094\u06b1\n\u0094\f\u0094\16\u0094\u06b4"+
		"\13\u0094\3\u0095\3\u0095\3\u0096\3\u0096\5\u0096\u06ba\n\u0096\3\u0096"+
		"\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u06c1\n\u0096\3\u0096\3\u0096"+
		"\3\u0096\3\u0096\3\u0096\7\u0096\u06c8\n\u0096\f\u0096\16\u0096\u06cb"+
		"\13\u0096\3\u0096\3\u0096\3\u0096\3\u0096\5\u0096\u06d1\n\u0096\3\u0096"+
		"\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096"+
		"\3\u0096\3\u0096\5\u0096\u06df\n\u0096\3\u0096\3\u0096\3\u0096\3\u0096"+
		"\5\u0096\u06e5\n\u0096\3\u0096\3\u0096\5\u0096\u06e9\n\u0096\3\u0096\3"+
		"\u0096\3\u0096\3\u0096\5\u0096\u06ef\n\u0096\3\u0097\3\u0097\3\u0097\3"+
		"\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\7\u0097\u071e\n\u0097"+
		"\f\u0097\16\u0097\u0721\13\u0097\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u072e\n\u0098"+
		"\3\u0098\3\u0098\5\u0098\u0732\n\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\7\u0098\u0738\n\u0098\f\u0098\16\u0098\u073b\13\u0098\3\u0098\3\u0098"+
		"\3\u0098\5\u0098\u0740\n\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098"+
		"\u074f\n\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\5\u0098\u0758\n\u0098\7\u0098\u075a\n\u0098\f\u0098\16\u0098\u075d\13"+
		"\u0098\3\u0099\3\u0099\3\u0099\5\u0099\u0762\n\u0099\3\u009a\3\u009a\3"+
		"\u009a\5\u009a\u0767\n\u009a\3\u009a\3\u009a\3\u009a\7\u009a\u076c\n\u009a"+
		"\f\u009a\16\u009a\u076f\13\u009a\3\u009a\5\u009a\u0772\n\u009a\3\u009a"+
		"\3\u009a\5\u009a\u0776\n\u009a\3\u009b\3\u009b\3\u009c\3\u009c\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0782\n\u009d\3\u009e"+
		"\5\u009e\u0785\n\u009e\3\u009e\5\u009e\u0788\n\u009e\3\u009e\5\u009e\u078b"+
		"\n\u009e\3\u009e\5\u009e\u078e\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\7\u009f\u0795\n\u009f\f\u009f\16\u009f\u0798\13\u009f\3\u00a0"+
		"\3\u00a0\3\u00a0\5\u00a0\u079d\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1"+
		"\u07ab\n\u00a1\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u07c0\n\u00a4\3\u00a5\3\u00a5\3\u00a5"+
		"\5\u00a5\u07c5\n\u00a5\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u07ca\n\u00a6\3"+
		"\u00a6\3\u00a6\3\u00a6\7\u00a6\u07cf\n\u00a6\f\u00a6\16\u00a6\u07d2\13"+
		"\u00a6\3\u00a6\5\u00a6\u07d5\n\u00a6\3\u00a6\5\u00a6\u07d8\n\u00a6\3\u00a6"+
		"\3\u00a6\5\u00a6\u07dc\n\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\7\u00a7\u07e5\n\u00a7\f\u00a7\16\u00a7\u07e8\13\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0802\n\u00a9"+
		"\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0812\n\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab"+
		"\u081d\n\u00ab\3\u00ab\3\u00ab\5\u00ab\u0821\n\u00ab\3\u00ac\3\u00ac\3"+
		"\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\7\u00ad\u082f\n\u00ad\f\u00ad\16\u00ad\u0832\13\u00ad\3\u00ad"+
		"\3\u00ad\5\u00ad\u0836\n\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u084c\n\u00b0"+
		"\3\u00b0\5\u00b0\u084f\n\u00b0\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\7\u00b1\u0857\n\u00b1\f\u00b1\16\u00b1\u085a\13\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\5\u00b1\u085f\n\u00b1\3\u00b2\3\u00b2\5\u00b2\u0863\n"+
		"\u00b2\3\u00b2\5\u00b2\u0866\n\u00b2\3\u00b3\3\u00b3\5\u00b3\u086a\n\u00b3"+
		"\3\u00b4\3\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\7\u00b5\u0873"+
		"\n\u00b5\f\u00b5\16\u00b5\u0876\13\u00b5\3\u00b5\5\u00b5\u0879\n\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\5\u00b6\u0897\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\5\u00b7\u089f\n\u00b7\3\u00b7\3\u00b7\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u08b4\n\u00b8\3\u00b9"+
		"\3\u00b9\5\u00b9\u08b8\n\u00b9\3\u00b9\6\u00b9\u08bb\n\u00b9\r\u00b9\16"+
		"\u00b9\u08bc\3\u00b9\5\u00b9\u08c0\n\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba"+
		"\3\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0"+
		"\3\u00c1\3\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\7\u00c2\u08df"+
		"\n\u00c2\f\u00c2\16\u00c2\u08e2\13\u00c2\3\u00c3\3\u00c3\3\u00c3\5\u00c3"+
		"\u08e7\n\u00c3\3\u00c3\5\u00c3\u08ea\n\u00c3\3\u00c4\3\u00c4\5\u00c4\u08ee"+
		"\n\u00c4\3\u00c4\5\u00c4\u08f1\n\u00c4\3\u00c4\5\u00c4\u08f4\n\u00c4\3"+
		"\u00c4\5\u00c4\u08f7\n\u00c4\3\u00c4\5\u00c4\u08fa\n\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\5\u00c4\u08ff\n\u00c4\3\u00c4\5\u00c4\u0902\n\u00c4\5\u00c4\u0904"+
		"\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u0942"+
		"\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0948\n\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u0950\n\u00c7\f\u00c7"+
		"\16\u00c7\u0953\13\u00c7\3\u00c7\3\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\5\u00c8\u095c\n\u00c8\3\u00c8\5\u00c8\u095f\n\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c9\3\u00c9\5\u00c9\u0965\n\u00c9\3\u00c9\3\u00c9\5\u00c9\u0969"+
		"\n\u00c9\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u096e\n\u00ca\3\u00cb\3\u00cb"+
		"\3\u00cb\7\u00cb\u0973\n\u00cb\f\u00cb\16\u00cb\u0976\13\u00cb\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\7\u00cc\u097c\n\u00cc\f\u00cc\16\u00cc\u097f"+
		"\13\u00cc\5\u00cc\u0981\n\u00cc\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00cf\3\u00cf\3\u00d0\3\u00d0\3\u00d1"+
		"\3\u00d1\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3\u00d4\3\u00d4\3\u00d4\5\u00d4"+
		"\u0999\n\u00d4\3\u00d4\3\u00d4\5\u00d4\u099d\n\u00d4\3\u00d4\3\u00d4\3"+
		"\u00d4\5\u00d4\u09a2\n\u00d4\3\u00d4\5\u00d4\u09a5\n\u00d4\3\u00d5\5\u00d5"+
		"\u09a8\n\u00d5\3\u00d5\5\u00d5\u09ab\n\u00d5\3\u00d6\5\u00d6\u09ae\n\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\7\u00d6\u09b4\n\u00d6\f\u00d6\16\u00d6"+
		"\u09b7\13\u00d6\3\u00d6\5\u00d6\u09ba\n\u00d6\3\u00d6\5\u00d6\u09bd\n"+
		"\u00d6\3\u00d7\5\u00d7\u09c0\n\u00d7\3\u00d7\5\u00d7\u09c3\n\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8"+
		"\u09ce\n\u00d8\f\u00d8\16\u00d8\u09d1\13\u00d8\3\u00d9\3\u00d9\3\u00d9"+
		"\5\u00d9\u09d6\n\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\7\u00da\u09dc\n"+
		"\u00da\f\u00da\16\u00da\u09df\13\u00da\3\u00da\3\u00da\3\u00db\3\u00db"+
		"\5\u00db\u09e5\n\u00db\3\u00db\5\u00db\u09e8\n\u00db\3\u00db\3\u00db\5"+
		"\u00db\u09ec\n\u00db\3\u00db\3\u00db\3\u00db\5\u00db\u09f1\n\u00db\3\u00dc"+
		"\3\u00dc\3\u00dd\5\u00dd\u09f6\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\7\u00dd\u09fc\n\u00dd\f\u00dd\16\u00dd\u09ff\13\u00dd\3\u00dd\5\u00dd"+
		"\u0a02\n\u00dd\3\u00dd\5\u00dd\u0a05\n\u00dd\3\u00de\5\u00de\u0a08\n\u00de"+
		"\3\u00de\5\u00de\u0a0b\n\u00de\3\u00de\3\u00de\3\u00df\5\u00df\u0a10\n"+
		"\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u0a17\n\u00df\3"+
		"\u00df\5\u00df\u0a1a\n\u00df\3\u00df\5\u00df\u0a1d\n\u00df\3\u00e0\5\u00e0"+
		"\u0a20\n\u00e0\3\u00e0\5\u00e0\u0a23\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3"+
		"\u00e1\3\u00e2\5\u00e2\u0a2a\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\7"+
		"\u00e2\u0a30\n\u00e2\f\u00e2\16\u00e2\u0a33\13\u00e2\3\u00e3\3\u00e3\3"+
		"\u00e3\3\u00e3\7\u00e3\u0a39\n\u00e3\f\u00e3\16\u00e3\u0a3c\13\u00e3\3"+
		"\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u0a42\n\u00e3\3\u00e4\3\u00e4\3"+
		"\u00e4\5\u00e4\u0a47\n\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6\3"+
		"\u00e6\3\u00e6\5\u00e6\u0a50\n\u00e6\3\u00e6\5\u00e6\u0a53\n\u00e6\3\u00e6"+
		"\5\u00e6\u0a56\n\u00e6\3\u00e6\5\u00e6\u0a59\n\u00e6\3\u00e7\5\u00e7\u0a5c"+
		"\n\u00e7\3\u00e7\5\u00e7\u0a5f\n\u00e7\3\u00e7\5\u00e7\u0a62\n\u00e7\3"+
		"\u00e8\3\u00e8\3\u00e8\5\u00e8\u0a67\n\u00e8\3\u00e8\5\u00e8\u0a6a\n\u00e8"+
		"\3\u00e8\5\u00e8\u0a6d\n\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u0a78\n\u00e9\3\u00ea\3\u00ea"+
		"\5\u00ea\u0a7c\n\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u0a81\n\u00ea\7"+
		"\u00ea\u0a83\n\u00ea\f\u00ea\16\u00ea\u0a86\13\u00ea\3\u00eb\5\u00eb\u0a89"+
		"\n\u00eb\3\u00eb\3\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\7\u00ec\u0a93\n\u00ec\f\u00ec\16\u00ec\u0a96\13\u00ec\5\u00ec\u0a98\n"+
		"\u00ec\3\u00ec\5\u00ec\u0a9b\n\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\7"+
		"\u00ed\u0aa1\n\u00ed\f\u00ed\16\u00ed\u0aa4\13\u00ed\3\u00ee\3\u00ee\3"+
		"\u00ee\3\u00ee\5\u00ee\u0aaa\n\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5"+
		"\u00ef\u0ab0\n\u00ef\3\u00ef\5\u00ef\u0ab3\n\u00ef\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0abf"+
		"\n\u00f0\3\u00f0\5\u00f0\u0ac2\n\u00f0\3\u00f0\5\u00f0\u0ac5\n\u00f0\3"+
		"\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u0acc\n\u00f1\3\u00f1\5"+
		"\u00f1\u0acf\n\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3"+
		"\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u0adb\n\u00f3\3\u00f4\3\u00f4\3"+
		"\u00f4\5\u00f4\u0ae0\n\u00f4\3\u00f4\5\u00f4\u0ae3\n\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\5\u00f4\u0ae8\n\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4"+
		"\u0aee\n\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u0af3\n\u00f4\3\u00f4\3"+
		"\u00f4\6\u00f4\u0af7\n\u00f4\r\u00f4\16\u00f4\u0af8\5\u00f4\u0afb\n\u00f4"+
		"\3\u00f4\3\u00f4\6\u00f4\u0aff\n\u00f4\r\u00f4\16\u00f4\u0b00\5\u00f4"+
		"\u0b03\n\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u0b09\n\u00f4\3"+
		"\u00f4\5\u00f4\u0b0c\n\u00f4\3\u00f4\5\u00f4\u0b0f\n\u00f4\3\u00f5\3\u00f5"+
		"\3\u00f5\5\u00f5\u0b14\n\u00f5\3\u00f5\5\u00f5\u0b17\n\u00f5\3\u00f5\3"+
		"\u00f5\3\u00f5\5\u00f5\u0b1c\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3"+
		"\u00f5\3\u00f5\5\u00f5\u0b24\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3"+
		"\u00f5\3\u00f5\5\u00f5\u0b2c\n\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5"+
		"\u00f5\u0b32\n\u00f5\3\u00f5\5\u00f5\u0b35\n\u00f5\3\u00f5\5\u00f5\u0b38"+
		"\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u0b3f\n\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u0b45\n\u00f6\5\u00f6\u0b47\n"+
		"\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u0b4e\n\u00f7\3"+
		"\u00f7\3\u00f7\3\u00f7\5\u00f7\u0b53\n\u00f7\3\u00f8\3\u00f8\3\u00f9\3"+
		"\u00f9\3\u00f9\3\u00f9\3\u00f9\7\u00f9\u0b5c\n\u00f9\f\u00f9\16\u00f9"+
		"\u0b5f\13\u00f9\3\u00fa\3\u00fa\5\u00fa\u0b63\n\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\7\u00fa\u0b68\n\u00fa\f\u00fa\16\u00fa\u0b6b\13\u00fa\3\u00fb"+
		"\3\u00fb\5\u00fb\u0b6f\n\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fc\3\u00fc"+
		"\3\u00fc\5\u00fc\u0b77\n\u00fc\3\u00fc\7\u00fc\u0b7a\n\u00fc\f\u00fc\16"+
		"\u00fc\u0b7d\13\u00fc\3\u00fd\5\u00fd\u0b80\n\u00fd\3\u00fd\3\u00fd\7"+
		"\u00fd\u0b84\n\u00fd\f\u00fd\16\u00fd\u0b87\13\u00fd\3\u00fd\3\u00fd\5"+
		"\u00fd\u0b8b\n\u00fd\3\u00fd\5\u00fd\u0b8e\n\u00fd\3\u00fd\5\u00fd\u0b91"+
		"\n\u00fd\3\u00fd\5\u00fd\u0b94\n\u00fd\3\u00fd\5\u00fd\u0b97\n\u00fd\3"+
		"\u00fd\5\u00fd\u0b9a\n\u00fd\3\u00fd\5\u00fd\u0b9d\n\u00fd\3\u00fd\5\u00fd"+
		"\u0ba0\n\u00fd\3\u00fd\5\u00fd\u0ba3\n\u00fd\3\u00fd\5\u00fd\u0ba6\n\u00fd"+
		"\3\u00fd\5\u00fd\u0ba9\n\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u0bb3\n\u00fe\3\u00ff\3\u00ff\3\u0100"+
		"\3\u0100\5\u0100\u0bb9\n\u0100\3\u0100\3\u0100\7\u0100\u0bbd\n\u0100\f"+
		"\u0100\16\u0100\u0bc0\13\u0100\3\u0101\3\u0101\5\u0101\u0bc4\n\u0101\3"+
		"\u0101\5\u0101\u0bc7\n\u0101\3\u0101\5\u0101\u0bca\n\u0101\3\u0102\3\u0102"+
		"\3\u0103\3\u0103\3\u0103\3\u0104\3\u0104\3\u0104\3\u0105\3\u0105\3\u0105"+
		"\7\u0105\u0bd7\n\u0105\f\u0105\16\u0105\u0bda\13\u0105\3\u0106\3\u0106"+
		"\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106\u0be2\n\u0106\3\u0107\3\u0107"+
		"\7\u0107\u0be6\n\u0107\f\u0107\16\u0107\u0be9\13\u0107\3\u0108\3\u0108"+
		"\5\u0108\u0bed\n\u0108\3\u0108\5\u0108\u0bf0\n\u0108\3\u0108\5\u0108\u0bf3"+
		"\n\u0108\3\u0108\5\u0108\u0bf6\n\u0108\3\u0108\3\u0108\5\u0108\u0bfa\n"+
		"\u0108\3\u0108\3\u0108\5\u0108\u0bfe\n\u0108\3\u0108\3\u0108\3\u0108\3"+
		"\u0108\5\u0108\u0c04\n\u0108\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\7"+
		"\u0109\u0c0b\n\u0109\f\u0109\16\u0109\u0c0e\13\u0109\3\u0109\3\u0109\3"+
		"\u010a\3\u010a\3\u010a\7\u010a\u0c15\n\u010a\f\u010a\16\u010a\u0c18\13"+
		"\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\5\u010b\u0c22\n\u010b\5\u010b\u0c24\n\u010b\3\u010b\3\u010b\3\u010b\3"+
		"\u010b\7\u010b\u0c2a\n\u010b\f\u010b\16\u010b\u0c2d\13\u010b\3\u010b\3"+
		"\u010b\3\u010c\5\u010c\u0c32\n\u010c\3\u010c\3\u010c\5\u010c\u0c36\n\u010c"+
		"\3\u010c\3\u010c\5\u010c\u0c3a\n\u010c\3\u010c\3\u010c\5\u010c\u0c3e\n"+
		"\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\5\u010c\u0c48\n\u010c\3\u010c\3\u010c\5\u010c\u0c4c\n\u010c\3\u010d\3"+
		"\u010d\3\u010d\3\u010d\5\u010d\u0c52\n\u010d\3\u010e\3\u010e\3\u010e\3"+
		"\u010f\3\u010f\3\u010f\3\u010f\3\u010f\7\u010f\u0c5c\n\u010f\f\u010f\16"+
		"\u010f\u0c5f\13\u010f\3\u010f\3\u010f\5\u010f\u0c63\n\u010f\3\u0110\3"+
		"\u0110\3\u0110\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u0c6c\n\u0111\3"+
		"\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u0c73\n\u0111\3\u0112\3"+
		"\u0112\5\u0112\u0c77\n\u0112\3\u0113\3\u0113\5\u0113\u0c7b\n\u0113\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\7\u0114\u0c81\n\u0114\f\u0114\16\u0114\u0c84"+
		"\13\u0114\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116\u0c92\n\u0116\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\5\u0117\u0c98\n\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\3\u0117\5\u0117\u0ca0\n\u0117\3\u0118\3\u0118\3\u0118\3\u0118"+
		"\7\u0118\u0ca6\n\u0118\f\u0118\16\u0118\u0ca9\13\u0118\3\u0118\3\u0118"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u0cb4"+
		"\n\u0118\3\u0118\3\u0118\6\u0118\u0cb8\n\u0118\r\u0118\16\u0118\u0cb9"+
		"\5\u0118\u0cbc\n\u0118\3\u0118\3\u0118\6\u0118\u0cc0\n\u0118\r\u0118\16"+
		"\u0118\u0cc1\5\u0118\u0cc4\n\u0118\5\u0118\u0cc6\n\u0118\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u0cce\n\u0119\3\u0119\2\6\u0120"+
		"\u0126\u012c\u012e\u011a\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&("+
		"*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084"+
		"\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c"+
		"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4"+
		"\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc"+
		"\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4"+
		"\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc"+
		"\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114"+
		"\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c"+
		"\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144"+
		"\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c"+
		"\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174"+
		"\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c"+
		"\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4"+
		"\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc"+
		"\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4"+
		"\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec"+
		"\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204"+
		"\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c"+
		"\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\28\4\2\u00c4"+
		"\u00c5\u00f4\u00f4\4\2\u00af\u00af\u025d\u025d\4\2\u008a\u008a\u00fd\u00fd"+
		"\4\2\u0136\u0137\u015a\u015a\4\2\u010f\u010f\u0134\u0134\4\2ee\u017e\u017e"+
		"\4\2\u00ae\u00ae\u025c\u025c\4\2\u01b9\u01b9\u029f\u029f\4\2\u011b\u011b"+
		"\u026d\u026d\6\2\u00ba\u00ba\u0147\u0147\u021c\u021c\u02a5\u02a5\4\2\u0170"+
		"\u0170\u01cd\u01cd\4\2\u00f6\u00f6\u0214\u0214\4\2\u02ae\u02ae\u02df\u02df"+
		"\4\2\u00ca\u00ca\u00db\u00db\4\2\u0136\u0136\u0159\u0159\4\2\u0097\u0097"+
		"\u0213\u0213\4\2;<\u0156\u0156\4\2/<>C\4\2\u00b1\u00b1\u02bc\u02bd\4\2"+
		"\u00f9\u00f9\u02c9\u02c9\u0093\2FHJNQQTTXXZ`bbfgikmnpqttvwyz}}\177\u0086"+
		"\u0088\u0088\u008a\u008b\u008d\u0095\u0097\u0098\u009a\u009e\u00a1\u00a1"+
		"\u00a6\u00a6\u00ac\u00ad\u00b0\u00b3\u00b8\u00b8\u00bd\u00bf\u00c1\u00c1"+
		"\u00c6\u00c6\u00c8\u00cc\u00d0\u00d0\u00d4\u00d6\u00db\u00db\u00dd\u00e7"+
		"\u00e9\u00eb\u00ed\u00ef\u00f2\u00f3\u00f5\u00f8\u00fa\u00fb\u00fd\u0101"+
		"\u0103\u0103\u0107\u0109\u010d\u010d\u0110\u0110\u0113\u0113\u0115\u0117"+
		"\u0119\u011b\u011d\u011d\u0121\u0123\u0125\u0125\u0127\u012b\u012f\u012f"+
		"\u0132\u0133\u0135\u0135\u0137\u0137\u0139\u0139\u013e\u0140\u014a\u014c"+
		"\u014f\u0150\u0152\u0153\u0156\u0156\u0158\u0158\u015b\u015b\u015e\u015f"+
		"\u0165\u0165\u0167\u0168\u016d\u016e\u0170\u0170\u0174\u0177\u017d\u017f"+
		"\u0181\u0194\u0196\u0199\u019c\u01a2\u01a7\u01aa\u01ac\u01ad\u01b0\u01b0"+
		"\u01b2\u01b2\u01b4\u01bd\u01bf\u01c9\u01cb\u01cc\u01d1\u01d2\u01d4\u01d4"+
		"\u01d6\u01d9\u01db\u01dd\u01e1\u01e1\u01e3\u01e3\u01e6\u01e6\u01e8\u01e8"+
		"\u01ed\u01f1\u01f3\u01f3\u01f5\u01f7\u01f9\u0203\u0205\u0207\u0209\u020a"+
		"\u020c\u0210\u0212\u0215\u021a\u021a\u021d\u021e\u0220\u0222\u0225\u0229"+
		"\u022b\u022c\u022e\u022f\u0231\u0231\u0233\u023a\u023c\u023d\u023f\u0242"+
		"\u0244\u0245\u0247\u024b\u024f\u0253\u0256\u0257\u0259\u025b\u025e\u0264"+
		"\u0266\u0266\u026a\u026d\u026f\u026f\u0271\u0271\u0273\u0276\u0278\u027d"+
		"\u0281\u0281\u0285\u0287\u0289\u0289\u028b\u028b\u028d\u0296\u0298\u0299"+
		"\u029b\u02a1\u02a4\u02ad\u02b0\u02b5\u02b7\u02b8\u02ba\u02bf\u02c3\u02c3"+
		"\u02c6\u02c6\u02c8\u02c8\u02ca\u02cf\u02d1\u02d4\u02d7\u02d7\u02da\u02da"+
		"\u02dc\u02dc\u02df\u02e1\u02e6\u02e7\u02ec\u02ec\u02ee\u02ef\u02f1\u02f5"+
		"\u02fb\u02fd\u02ff\u0302\u0304\u0304\7\2\u011b\u011b\u0170\u0170\u01c5"+
		"\u01c5\u01f9\u01fa\u026d\u026d\3\2\u030a\u030b\4\2KKaa\5\2\u00c2\u00c2"+
		"\u013d\u013d\u02db\u02db\4\2\u0109\u0109\u0202\u0202\5\2\4\5SS\u01e4\u01e4"+
		"\4\2\6\6\u01ca\u01ca\6\2\u00f9\u00f9\u01d0\u01d0\u02c9\u02c9\u02d7\u02d7"+
		"\4\2OOTT\3\2\30\35\3\2,-\4\2/\62^^\4\2\u0216\u0216\u0255\u0255\3\2\66"+
		"\67\5\2ll\u0163\u0163\u02c5\u02c5\4\2WW\u00c4\u00c4\5\2::\u00a7\u00a9"+
		"\u0171\u0172\f\2\u00b3\u00b7\u012b\u012e\u01aa\u01aa\u01ad\u01af\u01b5"+
		"\u01b5\u0212\u0212\u025f\u025f\u0265\u0265\u02f4\u02f4\u0304\u0305\4\2"+
		"\u0273\u0273\u02d9\u02d9\5\2\u00c0\u00c0\u0126\u0126\u017c\u017c\3\2\u02e7"+
		"\u02e8\4\2\u00c0\u00c0\u017c\u017c\6\2\u0101\u0101\u015f\u015f\u01c6\u01c6"+
		"\u0207\u0207\4\2\u0101\u0101\u01c6\u01c6\4\2\u0095\u0095\u017c\u017c\4"+
		"\2\u0131\u0131\u0232\u0232\4\2\u016c\u016c\u0255\u0255\4\2OO\u00cd\u00cd"+
		"\4\2\u0281\u0281\u028b\u028b\4\2OO\u00cd\u00ce\5\2\u010b\u010b\u0131\u0131"+
		"\u02de\u02de\4\2\u00a3\u00a3\u013a\u013a\4\2\u0166\u0166\u024d\u024d\2"+
		"\u0e06\2\u0232\3\2\2\2\4\u0235\3\2\2\2\6\u0238\3\2\2\2\b\u024b\3\2\2\2"+
		"\n\u0250\3\2\2\2\f\u025e\3\2\2\2\16\u0267\3\2\2\2\20\u0277\3\2\2\2\22"+
		"\u0283\3\2\2\2\24\u0288\3\2\2\2\26\u028a\3\2\2\2\30\u028d\3\2\2\2\32\u0290"+
		"\3\2\2\2\34\u0293\3\2\2\2\36\u0296\3\2\2\2 \u029b\3\2\2\2\"\u02a9\3\2"+
		"\2\2$\u02ab\3\2\2\2&\u02b4\3\2\2\2(\u02b8\3\2\2\2*\u02bc\3\2\2\2,\u02cf"+
		"\3\2\2\2.\u02d5\3\2\2\2\60\u02da\3\2\2\2\62\u02e2\3\2\2\2\64\u02e7\3\2"+
		"\2\2\66\u02ec\3\2\2\28\u02f1\3\2\2\2:\u02f6\3\2\2\2<\u02fb\3\2\2\2>\u0300"+
		"\3\2\2\2@\u0305\3\2\2\2B\u030b\3\2\2\2D\u031b\3\2\2\2F\u0323\3\2\2\2H"+
		"\u0328\3\2\2\2J\u032e\3\2\2\2L\u033e\3\2\2\2N\u0342\3\2\2\2P\u034b\3\2"+
		"\2\2R\u034e\3\2\2\2T\u0351\3\2\2\2V\u0356\3\2\2\2X\u035b\3\2\2\2Z\u0361"+
		"\3\2\2\2\\\u037a\3\2\2\2^\u037d\3\2\2\2`\u0394\3\2\2\2b\u0398\3\2\2\2"+
		"d\u03a0\3\2\2\2f\u03a8\3\2\2\2h\u03b0\3\2\2\2j\u03b8\3\2\2\2l\u03c8\3"+
		"\2\2\2n\u03d2\3\2\2\2p\u03dc\3\2\2\2r\u03fd\3\2\2\2t\u03ff\3\2\2\2v\u040a"+
		"\3\2\2\2x\u0414\3\2\2\2z\u041a\3\2\2\2|\u0424\3\2\2\2~\u0428\3\2\2\2\u0080"+
		"\u043f\3\2\2\2\u0082\u044b\3\2\2\2\u0084\u044d\3\2\2\2\u0086\u0452\3\2"+
		"\2\2\u0088\u0459\3\2\2\2\u008a\u0468\3\2\2\2\u008c\u048c\3\2\2\2\u008e"+
		"\u048e\3\2\2\2\u0090\u04ad\3\2\2\2\u0092\u04b4\3\2\2\2\u0094\u04c3\3\2"+
		"\2\2\u0096\u04c6\3\2\2\2\u0098\u04db\3\2\2\2\u009a\u04fe\3\2\2\2\u009c"+
		"\u0500\3\2\2\2\u009e\u0526\3\2\2\2\u00a0\u054f\3\2\2\2\u00a2\u0551\3\2"+
		"\2\2\u00a4\u055a\3\2\2\2\u00a6\u0566\3\2\2\2\u00a8\u0573\3\2\2\2\u00aa"+
		"\u0575\3\2\2\2\u00ac\u057c\3\2\2\2\u00ae\u057e\3\2\2\2\u00b0\u0580\3\2"+
		"\2\2\u00b2\u058a\3\2\2\2\u00b4\u058c\3\2\2\2\u00b6\u058e\3\2\2\2\u00b8"+
		"\u0590\3\2\2\2\u00ba\u0599\3\2\2\2\u00bc\u059c\3\2\2\2\u00be\u05a3\3\2"+
		"\2\2\u00c0\u05ae\3\2\2\2\u00c2\u05b1\3\2\2\2\u00c4\u05b8\3\2\2\2\u00c6"+
		"\u05be\3\2\2\2\u00c8\u05c0\3\2\2\2\u00ca\u05c2\3\2\2\2\u00cc\u05c4\3\2"+
		"\2\2\u00ce\u05c9\3\2\2\2\u00d0\u05cb\3\2\2\2\u00d2\u05d1\3\2\2\2\u00d4"+
		"\u05db\3\2\2\2\u00d6\u05dd\3\2\2\2\u00d8\u05df\3\2\2\2\u00da\u05e7\3\2"+
		"\2\2\u00dc\u05ef\3\2\2\2\u00de\u05f8\3\2\2\2\u00e0\u05ff\3\2\2\2\u00e2"+
		"\u0603\3\2\2\2\u00e4\u060a\3\2\2\2\u00e6\u0612\3\2\2\2\u00e8\u0616\3\2"+
		"\2\2\u00ea\u061a\3\2\2\2\u00ec\u0623\3\2\2\2\u00ee\u062c\3\2\2\2\u00f0"+
		"\u062e\3\2\2\2\u00f2\u0632\3\2\2\2\u00f4\u0634\3\2\2\2\u00f6\u0637\3\2"+
		"\2\2\u00f8\u0645\3\2\2\2\u00fa\u0652\3\2\2\2\u00fc\u0654\3\2\2\2\u00fe"+
		"\u0656\3\2\2\2\u0100\u0658\3\2\2\2\u0102\u065a\3\2\2\2\u0104\u065c\3\2"+
		"\2\2\u0106\u065e\3\2\2\2\u0108\u0660\3\2\2\2\u010a\u0666\3\2\2\2\u010c"+
		"\u0668\3\2\2\2\u010e\u066a\3\2\2\2\u0110\u0671\3\2\2\2\u0112\u0673\3\2"+
		"\2\2\u0114\u0675\3\2\2\2\u0116\u0677\3\2\2\2\u0118\u067b\3\2\2\2\u011a"+
		"\u067d\3\2\2\2\u011c\u067f\3\2\2\2\u011e\u0681\3\2\2\2\u0120\u0689\3\2"+
		"\2\2\u0122\u0697\3\2\2\2\u0124\u0699\3\2\2\2\u0126\u069b\3\2\2\2\u0128"+
		"\u06b5\3\2\2\2\u012a\u06ee\3\2\2\2\u012c\u06f0\3\2\2\2\u012e\u074e\3\2"+
		"\2\2\u0130\u0761\3\2\2\2\u0132\u0763\3\2\2\2\u0134\u0777\3\2\2\2\u0136"+
		"\u0779\3\2\2\2\u0138\u077b\3\2\2\2\u013a\u0784\3\2\2\2\u013c\u078f\3\2"+
		"\2\2\u013e\u0799\3\2\2\2\u0140\u07aa\3\2\2\2\u0142\u07ac\3\2\2\2\u0144"+
		"\u07ae\3\2\2\2\u0146\u07bf\3\2\2\2\u0148\u07c1\3\2\2\2\u014a\u07c6\3\2"+
		"\2\2\u014c\u07df\3\2\2\2\u014e\u07ec\3\2\2\2\u0150\u0801\3\2\2\2\u0152"+
		"\u0803\3\2\2\2\u0154\u0820\3\2\2\2\u0156\u0822\3\2\2\2\u0158\u0829\3\2"+
		"\2\2\u015a\u0839\3\2\2\2\u015c\u0841\3\2\2\2\u015e\u0846\3\2\2\2\u0160"+
		"\u0852\3\2\2\2\u0162\u0860\3\2\2\2\u0164\u0869\3\2\2\2\u0166\u086b\3\2"+
		"\2\2\u0168\u086d\3\2\2\2\u016a\u0896\3\2\2\2\u016c\u0898\3\2\2\2\u016e"+
		"\u08b3\3\2\2\2\u0170\u08b5\3\2\2\2\u0172\u08c3\3\2\2\2\u0174\u08c5\3\2"+
		"\2\2\u0176\u08c7\3\2\2\2\u0178\u08cc\3\2\2\2\u017a\u08cf\3\2\2\2\u017c"+
		"\u08d2\3\2\2\2\u017e\u08d5\3\2\2\2\u0180\u08d7\3\2\2\2\u0182\u08d9\3\2"+
		"\2\2\u0184\u08e6\3\2\2\2\u0186\u0903\3\2\2\2\u0188\u0941\3\2\2\2\u018a"+
		"\u0943\3\2\2\2\u018c\u094b\3\2\2\2\u018e\u095b\3\2\2\2\u0190\u0962\3\2"+
		"\2\2\u0192\u096a\3\2\2\2\u0194\u096f\3\2\2\2\u0196\u0977\3\2\2\2\u0198"+
		"\u0984\3\2\2\2\u019a\u0988\3\2\2\2\u019c\u098b\3\2\2\2\u019e\u098d\3\2"+
		"\2\2\u01a0\u098f\3\2\2\2\u01a2\u0991\3\2\2\2\u01a4\u0993\3\2\2\2\u01a6"+
		"\u0995\3\2\2\2\u01a8\u09a7\3\2\2\2\u01aa\u09ad\3\2\2\2\u01ac\u09bf\3\2"+
		"\2\2\u01ae\u09c6\3\2\2\2\u01b0\u09d2\3\2\2\2\u01b2\u09d7\3\2\2\2\u01b4"+
		"\u09e2\3\2\2\2\u01b6\u09f2\3\2\2\2\u01b8\u09f5\3\2\2\2\u01ba\u0a07\3\2"+
		"\2\2\u01bc\u0a0f\3\2\2\2\u01be\u0a1f\3\2\2\2\u01c0\u0a24\3\2\2\2\u01c2"+
		"\u0a29\3\2\2\2\u01c4\u0a41\3\2\2\2\u01c6\u0a46\3\2\2\2\u01c8\u0a48\3\2"+
		"\2\2\u01ca\u0a4b\3\2\2\2\u01cc\u0a5b\3\2\2\2\u01ce\u0a63\3\2\2\2\u01d0"+
		"\u0a77\3\2\2\2\u01d2\u0a79\3\2\2\2\u01d4\u0a88\3\2\2\2\u01d6\u0a8c\3\2"+
		"\2\2\u01d8\u0a9c\3\2\2\2\u01da\u0aa9\3\2\2\2\u01dc\u0aab\3\2\2\2\u01de"+
		"\u0ab4\3\2\2\2\u01e0\u0ac6\3\2\2\2\u01e2\u0ad0\3\2\2\2\u01e4\u0ad4\3\2"+
		"\2\2\u01e6\u0adc\3\2\2\2\u01e8\u0b10\3\2\2\2\u01ea\u0b39\3\2\2\2\u01ec"+
		"\u0b48\3\2\2\2\u01ee\u0b54\3\2\2\2\u01f0\u0b56\3\2\2\2\u01f2\u0b60\3\2"+
		"\2\2\u01f4\u0b6c\3\2\2\2\u01f6\u0b73\3\2\2\2\u01f8\u0b7f\3\2\2\2\u01fa"+
		"\u0bb2\3\2\2\2\u01fc\u0bb4\3\2\2\2\u01fe\u0bb8\3\2\2\2\u0200\u0bc9\3\2"+
		"\2\2\u0202\u0bcb\3\2\2\2\u0204\u0bcd\3\2\2\2\u0206\u0bd0\3\2\2\2\u0208"+
		"\u0bd3\3\2\2\2\u020a\u0be1\3\2\2\2\u020c\u0be3\3\2\2\2\u020e\u0c03\3\2"+
		"\2\2\u0210\u0c05\3\2\2\2\u0212\u0c11\3\2\2\2\u0214\u0c19\3\2\2\2\u0216"+
		"\u0c4b\3\2\2\2\u0218\u0c51\3\2\2\2\u021a\u0c53\3\2\2\2\u021c\u0c56\3\2"+
		"\2\2\u021e\u0c64\3\2\2\2\u0220\u0c67\3\2\2\2\u0222\u0c76\3\2\2\2\u0224"+
		"\u0c7a\3\2\2\2\u0226\u0c7c\3\2\2\2\u0228\u0c85\3\2\2\2\u022a\u0c91\3\2"+
		"\2\2\u022c\u0c9f\3\2\2\2\u022e\u0cc5\3\2\2\2\u0230\u0ccd\3\2\2\2\u0232"+
		"\u0233\7\u02de\2\2\u0233\u0234\5\u00d6l\2\u0234\3\3\2\2\2\u0235\u0236"+
		"\7\u0125\2\2\u0236\u0237\7\u030b\2\2\u0237\5\3\2\2\2\u0238\u0249\t\2\2"+
		"\2\u0239\u023c\5\u00dep\2\u023a\u023d\5\u00e0q\2\u023b\u023d\5\u019c\u00cf"+
		"\2\u023c\u023a\3\2\2\2\u023c\u023b\3\2\2\2\u023c\u023d\3\2\2\2\u023d\u024a"+
		"\3\2\2\2\u023e\u0240\5\u00b0Y\2\u023f\u023e\3\2\2\2\u023f\u0240\3\2\2"+
		"\2\u0240\u0245\3\2\2\2\u0241\u0246\5\u00b2Z\2\u0242\u0243\7\u010a\2\2"+
		"\u0243\u0244\7\u0097\2\2\u0244\u0246\5\u019e\u00d0\2\u0245\u0241\3\2\2"+
		"\2\u0245\u0242\3\2\2\2\u0246\u024a\3\2\2\2\u0247\u0248\7R\2\2\u0248\u024a"+
		"\5\u01d4\u00eb\2\u0249\u0239\3\2\2\2\u0249\u023f\3\2\2\2\u0249\u0247\3"+
		"\2\2\2\u024a\7\3\2\2\2\u024b\u024c\7\u0270\2\2\u024c\u024e\t\3\2\2\u024d"+
		"\u024f\5 \21\2\u024e\u024d\3\2\2\2\u024e\u024f\3\2\2\2\u024f\t\3\2\2\2"+
		"\u0250\u0252\7\u0270\2\2\u0251\u0253\7\u00f6\2\2\u0252\u0251\3\2\2\2\u0252"+
		"\u0253\3\2\2\2\u0253\u0255\3\2\2\2\u0254\u0256\7\u0110\2\2\u0255\u0254"+
		"\3\2\2\2\u0255\u0256\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u0259\7\u02b0\2"+
		"\2\u0258\u025a\5\26\f\2\u0259\u0258\3\2\2\2\u0259\u025a\3\2\2\2\u025a"+
		"\u025c\3\2\2\2\u025b\u025d\5 \21\2\u025c\u025b\3\2\2\2\u025c\u025d\3\2"+
		"\2\2\u025d\13\3\2\2\2\u025e\u025f\7\u0270\2\2\u025f\u0260\7\u02af\2\2"+
		"\u0260\u0262\7\u029f\2\2\u0261\u0263\5\26\f\2\u0262\u0261\3\2\2\2\u0262"+
		"\u0263\3\2\2\2\u0263\u0265\3\2\2\2\u0264\u0266\5 \21\2\u0265\u0264\3\2"+
		"\2\2\u0265\u0266\3\2\2\2\u0266\r\3\2\2\2\u0267\u0269\7\u0270\2\2\u0268"+
		"\u026a\7\u00f6\2\2\u0269\u0268\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u026c"+
		"\3\2\2\2\u026b\u026d\7\u0110\2\2\u026c\u026b\3\2\2\2\u026c\u026d\3\2\2"+
		"\2\u026d\u026e\3\2\2\2\u026e\u026f\t\4\2\2\u026f\u0271\5\30\r\2\u0270"+
		"\u0272\5\26\f\2\u0271\u0270\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u0275\3"+
		"\2\2\2\u0273\u0276\5\34\17\2\u0274\u0276\5\36\20\2\u0275\u0273\3\2\2\2"+
		"\u0275\u0274\3\2\2\2\u0275\u0276\3\2\2\2\u0276\17\3\2\2\2\u0277\u0279"+
		"\7\u0270\2\2\u0278\u027a\7\u00f6\2\2\u0279\u0278\3\2\2\2\u0279\u027a\3"+
		"\2\2\2\u027a\u027b\3\2\2\2\u027b\u027c\t\5\2\2\u027c\u027e\5\30\r\2\u027d"+
		"\u027f\5\26\f\2\u027e\u027d\3\2\2\2\u027e\u027f\3\2\2\2\u027f\u0281\3"+
		"\2\2\2\u0280\u0282\5\36\20\2\u0281\u0280\3\2\2\2\u0281\u0282\3\2\2\2\u0282"+
		"\21\3\2\2\2\u0283\u0284\7\u0270\2\2\u0284\u0285\7\u00a2\2\2\u0285\u0286"+
		"\7\u02af\2\2\u0286\u0287\5\u00dep\2\u0287\23\3\2\2\2\u0288\u0289\7\u0270"+
		"\2\2\u0289\25\3\2\2\2\u028a\u028b\t\6\2\2\u028b\u028c\5\u00d6l\2\u028c"+
		"\27\3\2\2\2\u028d\u028e\t\6\2\2\u028e\u028f\5\u00dep\2\u028f\31\3\2\2"+
		"\2\u0290\u0291\7\u0169\2\2\u0291\u0292\5\u00bc_\2\u0292\33\3\2\2\2\u0293"+
		"\u0294\7\u0169\2\2\u0294\u0295\5\u00bc_\2\u0295\35\3\2\2\2\u0296\u0297"+
		"\7\u02f7\2\2\u0297\u0298\5\u0120\u0091\2\u0298\37\3\2\2\2\u0299\u029c"+
		"\5\32\16\2\u029a\u029c\5\36\20\2\u029b\u0299\3\2\2\2\u029b\u029a\3\2\2"+
		"\2\u029c!\3\2\2\2\u029d\u02aa\7O\2\2\u029e\u029f\7i\2\2\u029f\u02aa\7"+
		"\u014c\2\2\u02a0\u02a1\7\u009e\2\2\u02a1\u02aa\7\u02ad\2\2\u02a2\u02aa"+
		"\7\u00a1\2\2\u02a3\u02aa\7\u0150\2\2\u02a4\u02aa\7\u01a7\2\2\u02a5\u02a6"+
		"\7\u01ef\2\2\u02a6\u02aa\7\u00fb\2\2\u02a7\u02aa\7\u027d\2\2\u02a8\u02aa"+
		"\7\u02ac\2\2\u02a9\u029d\3\2\2\2\u02a9\u029e\3\2\2\2\u02a9\u02a0\3\2\2"+
		"\2\u02a9\u02a2\3\2\2\2\u02a9\u02a3\3\2\2\2\u02a9\u02a4\3\2\2\2\u02a9\u02a5"+
		"\3\2\2\2\u02a9\u02a7\3\2\2\2\u02a9\u02a8\3\2\2\2\u02aa#\3\2\2\2\u02ab"+
		"\u02ac\7\u026e\2\2\u02ac\u02b1\5&\24\2\u02ad\u02ae\7%\2\2\u02ae\u02b0"+
		"\5&\24\2\u02af\u02ad\3\2\2\2\u02b0\u02b3\3\2\2\2\u02b1\u02af\3\2\2\2\u02b1"+
		"\u02b2\3\2\2\2\u02b2%\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b4\u02b5\5\u00d2"+
		"j\2\u02b5\u02b6\7\30\2\2\u02b6\u02b7\5\u0120\u0091\2\u02b7\'\3\2\2\2\u02b8"+
		"\u02b9\7\u0270\2\2\u02b9\u02ba\t\7\2\2\u02ba\u02bb\7\u0177\2\2\u02bb)"+
		"\3\2\2\2\u02bc\u02bd\7\u0270\2\2\u02bd\u02be\7f\2\2\u02be\u02c1\7\u00ea"+
		"\2\2\u02bf\u02c0\7\u0134\2\2\u02c0\u02c2\7\u00be\2\2\u02c1\u02bf\3\2\2"+
		"\2\u02c1\u02c2\3\2\2\2\u02c2\u02c5\3\2\2\2\u02c3\u02c4\7\u010f\2\2\u02c4"+
		"\u02c6\7\u030c\2\2\u02c5\u02c3\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02cd"+
		"\3\2\2\2\u02c7\u02ca\7\u016a\2\2\u02c8\u02c9\7\u030c\2\2\u02c9\u02cb\7"+
		"%\2\2\u02ca\u02c8\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc"+
		"\u02ce\7\u030c\2\2\u02cd\u02c7\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce+\3\2"+
		"\2\2\u02cf\u02d0\7\u0270\2\2\u02d0\u02d1\7|\2\2\u02d1\u02d3\7\u026e\2"+
		"\2\u02d2\u02d4\5 \21\2\u02d3\u02d2\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4-"+
		"\3\2\2\2\u02d5\u02d6\7\u0270\2\2\u02d6\u02d8\7\u0088\2\2\u02d7\u02d9\5"+
		" \21\2\u02d8\u02d7\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9/\3\2\2\2\u02da\u02db"+
		"\7\u0270\2\2\u02db\u02dc\7\u00a2\2\2\u02dc\u02de\t\b\2\2\u02dd\u02df\5"+
		"\u0198\u00cd\2\u02de\u02dd\3\2\2\2\u02de\u02df\3\2\2\2\u02df\u02e0\3\2"+
		"\2\2\u02e0\u02e1\5\u00d6l\2\u02e1\61\3\2\2\2\u02e2\u02e3\7\u0270\2\2\u02e3"+
		"\u02e4\7\u00a2\2\2\u02e4\u02e5\7\u00e9\2\2\u02e5\u02e6\5\u00e6t\2\u02e6"+
		"\63\3\2\2\2\u02e7\u02e8\7\u0270\2\2\u02e8\u02e9\7\u00a2\2\2\u02e9\u02ea"+
		"\7\u0112\2\2\u02ea\u02eb\5\u00ecw\2\u02eb\65\3\2\2\2\u02ec\u02ed\7\u0270"+
		"\2\2\u02ed\u02ee\7\u00a2\2\2\u02ee\u02ef\7\u020b\2\2\u02ef\u02f0\5\u00ec"+
		"w\2\u02f0\67\3\2\2\2\u02f1\u02f2\7\u0270\2\2\u02f2\u02f3\7\u00a2\2\2\u02f3"+
		"\u02f4\7\u02c7\2\2\u02f4\u02f5\5\u0114\u008b\2\u02f59\3\2\2\2\u02f6\u02f7"+
		"\7\u0270\2\2\u02f7\u02f8\7\u00a2\2\2\u02f8\u02f9\7\u02df\2\2\u02f9\u02fa"+
		"\5\u00e4s\2\u02fa;\3\2\2\2\u02fb\u02fc\7\u0270\2\2\u02fc\u02fd\7\u00a2"+
		"\2\2\u02fd\u02fe\7\u02ef\2\2\u02fe\u02ff\5\u00eex\2\u02ff=\3\2\2\2\u0300"+
		"\u0301\7\u0270\2\2\u0301\u0302\7\u00e1\2\2\u0302\u0303\5\u0112\u008a\2"+
		"\u0303\u0304\t\t\2\2\u0304?\3\2\2\2\u0305\u0307\7\u0270\2\2\u0306\u0308"+
		"\7\u02a1\2\2\u0307\u0306\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u0309\3\2\2"+
		"\2\u0309\u030a\7\u00e2\2\2\u030aA\3\2\2\2\u030b\u0310\7\u0270\2\2\u030c"+
		"\u030d\7\62\2\2\u030d\u030e\7\37\2\2\u030e\u030f\7\21\2\2\u030f\u0311"+
		"\7 \2\2\u0310\u030c\3\2\2\2\u0310\u0311\3\2\2\2\u0311\u0312\3\2\2\2\u0312"+
		"\u0319\7\u00e6\2\2\u0313\u0316\7\u016a\2\2\u0314\u0315\7\u030c\2\2\u0315"+
		"\u0317\7%\2\2\u0316\u0314\3\2\2\2\u0316\u0317\3\2\2\2\u0317\u0318\3\2"+
		"\2\2\u0318\u031a\7\u030c\2\2\u0319\u0313\3\2\2\2\u0319\u031a\3\2\2\2\u031a"+
		"C\3\2\2\2\u031b\u031c\7\u0270\2\2\u031c\u031e\7\u00ea\2\2\u031d\u031f"+
		"\5\26\f\2\u031e\u031d\3\2\2\2\u031e\u031f\3\2\2\2\u031f\u0321\3\2\2\2"+
		"\u0320\u0322\5 \21\2\u0321\u0320\3\2\2\2\u0321\u0322\3\2\2\2\u0322E\3"+
		"\2\2\2\u0323\u0324\7\u0270\2\2\u0324\u0325\7\u0112\2\2\u0325\u0326\7\u0086"+
		"\2\2\u0326\u0327\5\u00ecw\2\u0327G\3\2\2\2\u0328\u0329\7\u0270\2\2\u0329"+
		"\u032a\7\u0112\2\2\u032a\u032c\7\u029f\2\2\u032b\u032d\5 \21\2\u032c\u032b"+
		"\3\2\2\2\u032c\u032d\3\2\2\2\u032dI\3\2\2\2\u032e\u032f\7\u0270\2\2\u032f"+
		"\u033c\7\u011d\2\2\u0330\u0331\7\u010a\2\2\u0331\u033a\5\u0118\u008d\2"+
		"\u0332\u0333\7\u02e2\2\2\u0333\u0336\5\u0110\u0089\2\u0334\u0335\7%\2"+
		"\2\u0335\u0337\5\u0110\u0089\2\u0336\u0334\3\2\2\2\u0337\u0338\3\2\2\2"+
		"\u0338\u0336\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u033b\3\2\2\2\u033a\u0332"+
		"\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033d\3\2\2\2\u033c\u0330\3\2\2\2\u033c"+
		"\u033d\3\2\2\2\u033dK\3\2\2\2\u033e\u033f\7\u0270\2\2\u033f\u0340\7\u017e"+
		"\2\2\u0340\u0341\7\u029f\2\2\u0341M\3\2\2\2\u0342\u0343\7\u0270\2\2\u0343"+
		"\u0344\7\u01dd\2\2\u0344\u0346\7\u02b0\2\2\u0345\u0347\5\26\f\2\u0346"+
		"\u0345\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u0349\3\2\2\2\u0348\u034a\5 "+
		"\21\2\u0349\u0348\3\2\2\2\u0349\u034a\3\2\2\2\u034aO\3\2\2\2\u034b\u034c"+
		"\7\u0270\2\2\u034c\u034d\7\u01fd\2\2\u034dQ\3\2\2\2\u034e\u034f\7\u0270"+
		"\2\2\u034f\u0350\7\u0209\2\2\u0350S\3\2\2\2\u0351\u0352\7\u0270\2\2\u0352"+
		"\u0353\7\u020b\2\2\u0353\u0354\7\u0086\2\2\u0354\u0355\5\u00ecw\2\u0355"+
		"U\3\2\2\2\u0356\u0357\7\u0270\2\2\u0357\u0358\7\u020b\2\2\u0358\u0359"+
		"\7\u029f\2\2\u0359\u035a\5 \21\2\u035aW\3\2\2\2\u035b\u035d\7\u0270\2"+
		"\2\u035c\u035e\7\u0110\2\2\u035d\u035c\3\2\2\2\u035d\u035e\3\2\2\2\u035e"+
		"\u035f\3\2\2\2\u035f\u0360\7\u020d\2\2\u0360Y\3\2\2\2\u0361\u0362\7\u0270"+
		"\2\2\u0362\u036b\7\u020e\2\2\u0363\u0368\5\"\22\2\u0364\u0365\7%\2\2\u0365"+
		"\u0367\5\"\22\2\u0366\u0364\3\2\2\2\u0367\u036a\3\2\2\2\u0368\u0366\3"+
		"\2\2\2\u0368\u0369\3\2\2\2\u0369\u036c\3\2\2\2\u036a\u0368\3\2\2\2\u036b"+
		"\u0363\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u0370\3\2\2\2\u036d\u036e\7\u010a"+
		"\2\2\u036e\u036f\7\u0213\2\2\u036f\u0371\7\u030c\2\2\u0370\u036d\3\2\2"+
		"\2\u0370\u0371\3\2\2\2\u0371\u0378\3\2\2\2\u0372\u0373\7\u016a\2\2\u0373"+
		"\u0376\7\u030c\2\2\u0374\u0375\7\u01d7\2\2\u0375\u0377\7\u030c\2\2\u0376"+
		"\u0374\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u0379\3\2\2\2\u0378\u0372\3\2"+
		"\2\2\u0378\u0379\3\2\2\2\u0379[\3\2\2\2\u037a\u037b\7\u0270\2\2\u037b"+
		"\u037c\7\u020f\2\2\u037c]\3\2\2\2\u037d\u037e\7\u0270\2\2\u037e\u037f"+
		"\7\u0226\2\2\u037f\u0382\7\u00ea\2\2\u0380\u0381\7\u0134\2\2\u0381\u0383"+
		"\5\u010e\u0088\2\u0382\u0380\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0386\3"+
		"\2\2\2\u0384\u0385\7\u010f\2\2\u0385\u0387\7\u030c\2\2\u0386\u0384\3\2"+
		"\2\2\u0386\u0387\3\2\2\2\u0387\u038e\3\2\2\2\u0388\u038b\7\u016a\2\2\u0389"+
		"\u038a\7\u030c\2\2\u038a\u038c\7%\2\2\u038b\u0389\3\2\2\2\u038b\u038c"+
		"\3\2\2\2\u038c\u038d\3\2\2\2\u038d\u038f\7\u030c\2\2\u038e\u0388\3\2\2"+
		"\2\u038e\u038f\3\2\2\2\u038f\u0390\3\2\2\2\u0390\u0391\7\u010a\2\2\u0391"+
		"\u0392\7z\2\2\u0392\u0393\5\u010c\u0087\2\u0393_\3\2\2\2\u0394\u0395\7"+
		"\u0270\2\2\u0395\u0396\7\u0275\2\2\u0396\u0397\7\u0129\2\2\u0397a\3\2"+
		"\2\2\u0398\u0399\7\u0270\2\2\u0399\u039a\7\u0275\2\2\u039a\u039e\7\u029f"+
		"\2\2\u039b\u039c\7\u010a\2\2\u039c\u039d\7z\2\2\u039d\u039f\5\u010c\u0087"+
		"\2\u039e\u039b\3\2\2\2\u039e\u039f\3\2\2\2\u039fc\3\2\2\2\u03a0\u03a2"+
		"\7\u0270\2\2\u03a1\u03a3\t\n\2\2\u03a2\u03a1\3\2\2\2\u03a2\u03a3\3\2\2"+
		"\2\u03a3\u03a4\3\2\2\2\u03a4\u03a6\7\u029f\2\2\u03a5\u03a7\5 \21\2\u03a6"+
		"\u03a5\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7e\3\2\2\2\u03a8\u03a9\7\u0270"+
		"\2\2\u03a9\u03ab\7\u02c7\2\2\u03aa\u03ac\5\26\f\2\u03ab\u03aa\3\2\2\2"+
		"\u03ab\u03ac\3\2\2\2\u03ac\u03ae\3\2\2\2\u03ad\u03af\5 \21\2\u03ae\u03ad"+
		"\3\2\2\2\u03ae\u03af\3\2\2\2\u03afg\3\2\2\2\u03b0\u03b2\7\u0270\2\2\u03b1"+
		"\u03b3\t\n\2\2\u03b2\u03b1\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b4\3\2"+
		"\2\2\u03b4\u03b6\7\u02ec\2\2\u03b5\u03b7\5 \21\2\u03b6\u03b5\3\2\2\2\u03b6"+
		"\u03b7\3\2\2\2\u03b7i\3\2\2\2\u03b8\u03bd\7\u0270\2\2\u03b9\u03ba\7\62"+
		"\2\2\u03ba\u03bb\7\37\2\2\u03bb\u03bc\7\21\2\2\u03bc\u03be\7 \2\2\u03bd"+
		"\u03b9\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03c6\7\u02f3"+
		"\2\2\u03c0\u03c3\7\u016a\2\2\u03c1\u03c2\7\u030c\2\2\u03c2\u03c4\7%\2"+
		"\2\u03c3\u03c1\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c7"+
		"\7\u030c\2\2\u03c6\u03c0\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7k\3\2\2\2\u03c8"+
		"\u03cc\7\u026e\2\2\u03c9\u03ca\7|\2\2\u03ca\u03cd\7\u026e\2\2\u03cb\u03cd"+
		"\7}\2\2\u03cc\u03c9\3\2\2\2\u03cc\u03cb\3\2\2\2\u03cd\u03d0\3\2\2\2\u03ce"+
		"\u03d1\5\u00caf\2\u03cf\u03d1\7\u00bc\2\2\u03d0\u03ce\3\2\2\2\u03d0\u03cf"+
		"\3\2\2\2\u03d1m\3\2\2\2\u03d2\u03d3\7\u026e\2\2\u03d3\u03da\7\u01bc\2"+
		"\2\u03d4\u03d7\5\u00caf\2\u03d5\u03d6\7\u0087\2\2\u03d6\u03d8\5\u00cc"+
		"g\2\u03d7\u03d5\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03db\3\2\2\2\u03d9"+
		"\u03db\7\u00bc\2\2\u03da\u03d4\3\2\2\2\u03da\u03d9\3\2\2\2\u03dbo\3\2"+
		"\2\2\u03dc\u03dd\7\u0083\2\2\u03dd\u03de\5r:\2\u03deq\3\2\2\2\u03df\u03e0"+
		"\7\u0170\2\2\u03e0\u03e1\7\u00ad\2\2\u03e1\u03e3\7\u00c9\2\2\u03e2\u03e4"+
		"\7\30\2\2\u03e3\u03e2\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e5\3\2\2\2"+
		"\u03e5\u03e6\5\u010a\u0086\2\u03e6\u03e7\7+\2\2\u03e7\u03fe\3\2\2\2\u03e8"+
		"\u03e9\7\u0140\2\2\u03e9\u03ea\7\u010f\2\2\u03ea\u03eb\5\u0108\u0085\2"+
		"\u03eb\u03ec\7\u012f\2\2\u03ec\u03ed\7o\2\2\u03ed\u03f4\7\u030b\2\2\u03ee"+
		"\u03ef\7\u00ad\2\2\u03ef\u03f1\7\u00c9\2\2\u03f0\u03f2\7\30\2\2\u03f1"+
		"\u03f0\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03f5\5\u010a"+
		"\u0086\2\u03f4\u03ee\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03fb\3\2\2\2\u03f6"+
		"\u03f8\7\u023b\2\2\u03f7\u03f9\7\u01c7\2\2\u03f8\u03f7\3\2\2\2\u03f8\u03f9"+
		"\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fc\7\u0297\2\2\u03fb\u03f6\3\2\2"+
		"\2\u03fb\u03fc\3\2\2\2\u03fc\u03fe\3\2\2\2\u03fd\u03df\3\2\2\2\u03fd\u03e8"+
		"\3\2\2\2\u03fes\3\2\2\2\u03ff\u0401\7\u00a2\2\2\u0400\u0402\7M\2\2\u0401"+
		"\u0400\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u0404\7\u0112"+
		"\2\2\u0404\u0405\5\u00ecw\2\u0405\u0406\7\u0249\2\2\u0406\u0407\t\13\2"+
		"\2\u0407\u0408\7\u027b\2\2\u0408\u0409\5\u00fe\u0080\2\u0409u\3\2\2\2"+
		"\u040a\u040b\7\u013f\2\2\u040b\u040c\7\u0092\2\2\u040c\u0411\5\u0100\u0081"+
		"\2\u040d\u040e\7%\2\2\u040e\u0410\5\u0100\u0081\2\u040f\u040d\3\2\2\2"+
		"\u0410\u0413\3\2\2\2\u0411\u040f\3\2\2\2\u0411\u0412\3\2\2\2\u0412w\3"+
		"\2\2\2\u0413\u0411\3\2\2\2\u0414\u0415\7\u013f\2\2\u0415\u0416\7\u01fc"+
		"\2\2\u0416\u0417\5\u0102\u0082\2\u0417\u0418\7\u027b\2\2\u0418\u0419\5"+
		"\u00fe\u0080\2\u0419y\3\2\2\2\u041a\u041b\7\u02d4\2\2\u041b\u041c\7\u0092"+
		"\2\2\u041c\u0421\5\u0100\u0081\2\u041d\u041e\7%\2\2\u041e\u0420\5\u0100"+
		"\u0081\2\u041f\u041d\3\2\2\2\u0420\u0423\3\2\2\2\u0421\u041f\3\2\2\2\u0421"+
		"\u0422\3\2\2\2\u0422{\3\2\2\2\u0423\u0421\3\2\2\2\u0424\u0425\7\u02d4"+
		"\2\2\u0425\u0426\7\u01fc\2\2\u0426\u0427\5\u0102\u0082\2\u0427}\3\2\2"+
		"\2\u0428\u042a\7R\2\2\u0429\u042b\t\f\2\2\u042a\u0429\3\2\2\2\u042a\u042b"+
		"\3\2\2\2\u042b\u042c\3\2\2\2\u042c\u043d\7\u02af\2\2\u042d\u043e\5\u00f6"+
		"|\2\u042e\u042f\5\u00dep\2\u042f\u0430\7\u02db\2\2\u0430\u0431\7\u0127"+
		"\2\2\u0431\u0432\7\u01da\2\2\u0432\u0433\5\u00f8}\2\u0433\u0434\7\u02fa"+
		"\2\2\u0434\u0435\7\u030c\2\2\u0435\u0436\7n\2\2\u0436\u043e\3\2\2\2\u0437"+
		"\u0438\5\u00dep\2\u0438\u0439\7\u00d2\2\2\u0439\u043a\7\u0127\2\2\u043a"+
		"\u043b\7\u01da\2\2\u043b\u043c\5\u00f8}\2\u043c\u043e\3\2\2\2\u043d\u042d"+
		"\3\2\2\2\u043d\u042e\3\2\2\2\u043d\u0437\3\2\2\2\u043e\177\3\2\2\2\u043f"+
		"\u0440\7~\2\2\u0440\u0441\7\u02af\2\2\u0441\u0442\5\u00f6|\2\u0442\u0443"+
		"\5\u0082B\2\u0443\u0081\3\2\2\2\u0444\u0445\7\u010a\2\2\u0445\u044c\7"+
		"\u02dc\2\2\u0446\u044c\7\u0214\2\2\u0447\u044c\7\u00fa\2\2\u0448\u044c"+
		"\7\u01a2\2\2\u0449\u044c\7\u00f6\2\2\u044a\u044c\7x\2\2\u044b\u0444\3"+
		"\2\2\2\u044b\u0446\3\2\2\2\u044b\u0447\3\2\2\2\u044b\u0448\3\2\2\2\u044b"+
		"\u0449\3\2\2\2\u044b\u044a\3\2\2\2\u044c\u0083\3\2\2\2\u044d\u044e\7\177"+
		"\2\2\u044e\u044f\7\u02af\2\2\u044f\u0450\5\u00f6|\2\u0450\u0451\t\r\2"+
		"\2\u0451\u0085\3\2\2\2\u0452\u0454\7\u01de\2\2\u0453\u0455\t\f\2\2\u0454"+
		"\u0453\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u0457\7\u02af"+
		"\2\2\u0457\u0458\5\u00f6|\2\u0458\u0087\3\2\2\2\u0459\u045b\7\u022f\2"+
		"\2\u045a\u045c\t\f\2\2\u045b\u045a\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u045d"+
		"\3\2\2\2\u045d\u045e\7\u02af\2\2\u045e\u0460\5\u00f6|\2\u045f\u0461\7"+
		"\u0214\2\2\u0460\u045f\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0463\3\2\2\2"+
		"\u0462\u0464\7\u00f6\2\2\u0463\u0462\3\2\2\2\u0463\u0464\3\2\2\2\u0464"+
		"\u0466\3\2\2\2\u0465\u0467\7\u02e1\2\2\u0466\u0465\3\2\2\2\u0466\u0467"+
		"\3\2\2\2\u0467\u0089\3\2\2\2\u0468\u0469\7P\2\2\u0469\u046a\7\u023f\2"+
		"\2\u046a\u046b\7\u011e\2\2\u046b\u0478\5\u00fa~\2\u046c\u046e\7\u02ee"+
		"\2\2\u046d\u046f\7\30\2\2\u046e\u046d\3\2\2\2\u046e\u046f\3\2\2\2\u046f"+
		"\u0470\3\2\2\2\u0470\u0475\5\u008cG\2\u0471\u0472\7%\2\2\u0472\u0474\5"+
		"\u008cG\2\u0473\u0471\3\2\2\2\u0474\u0477\3\2\2\2\u0475\u0473\3\2\2\2"+
		"\u0475\u0476\3\2\2\2\u0476\u0479\3\2\2\2\u0477\u0475\3\2\2\2\u0478\u046c"+
		"\3\2\2\2\u0478\u0479\3\2\2\2\u0479\u047f\3\2\2\2\u047a\u047c\7\u02ba\2"+
		"\2\u047b\u047d\7\30\2\2\u047c\u047b\3\2\2\2\u047c\u047d\3\2\2\2\u047d"+
		"\u047e\3\2\2\2\u047e\u0480\7\u030c\2\2\u047f\u047a\3\2\2\2\u047f\u0480"+
		"\3\2\2\2\u0480\u0486\3\2\2\2\u0481\u0487\7\u00db\2\2\u0482\u0484\7\u00ca"+
		"\2\2\u0483\u0485\7\u010b\2\2\u0484\u0483\3\2\2\2\u0484\u0485\3\2\2\2\u0485"+
		"\u0487\3\2\2\2\u0486\u0481\3\2\2\2\u0486\u0482\3\2\2\2\u0486\u0487\3\2"+
		"\2\2\u0487\u008b\3\2\2\2\u0488\u048d\7\u030c\2\2\u0489\u048a\7\u030c\2"+
		"\2\u048a\u048b\7\20\2\2\u048b\u048d\7\u030c\2\2\u048c\u0488\3\2\2\2\u048c"+
		"\u0489\3\2\2\2\u048d\u008d\3\2\2\2\u048e\u048f\7\u00a2\2\2\u048f\u0490"+
		"\7\u023f\2\2\u0490\u0491\7\u011e\2\2\u0491\u0492\5\u00fa~\2\u0492\u0493"+
		"\7\u02cb\2\2\u0493\u0494\7\30\2\2\u0494\u04a1\t\16\2\2\u0495\u0497\7\u02ee"+
		"\2\2\u0496\u0498\7\30\2\2\u0497\u0496\3\2\2\2\u0497\u0498\3\2\2\2\u0498"+
		"\u0499\3\2\2\2\u0499\u049e\5\u008cG\2\u049a\u049b\7%\2\2\u049b\u049d\5"+
		"\u008cG\2\u049c\u049a\3\2\2\2\u049d\u04a0\3\2\2\2\u049e\u049c\3\2\2\2"+
		"\u049e\u049f\3\2\2\2\u049f\u04a2\3\2\2\2\u04a0\u049e\3\2\2\2\u04a1\u0495"+
		"\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2\u04a8\3\2\2\2\u04a3\u04a5\7\u02ba\2"+
		"\2\u04a4\u04a6\7\30\2\2\u04a5\u04a4\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6"+
		"\u04a7\3\2\2\2\u04a7\u04a9\7\u030c\2\2\u04a8\u04a3\3\2\2\2\u04a8\u04a9"+
		"\3\2\2\2\u04a9\u04ab\3\2\2\2\u04aa\u04ac\t\17\2\2\u04ab\u04aa\3\2\2\2"+
		"\u04ab\u04ac\3\2\2\2\u04ac\u008f\3\2\2\2\u04ad\u04ae\7\u00d2\2\2\u04ae"+
		"\u04af\7\u023f\2\2\u04af\u04b0\7\u011e\2\2\u04b0\u04b2\5\u00fa~\2\u04b1"+
		"\u04b3\7\u010b\2\2\u04b2\u04b1\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u0091"+
		"\3\2\2\2\u04b4\u04b5\7\u026e\2\2\u04b5\u04b6\7\u023f\2\2\u04b6\u04b7\7"+
		"\u011e\2\2\u04b7\u04c1\5\u00fa~\2\u04b8\u04b9\7\u010a\2\2\u04b9\u04be"+
		"\7\u030c\2\2\u04ba\u04bb\7%\2\2\u04bb\u04bd\7\u030c\2\2\u04bc\u04ba\3"+
		"\2\2\2\u04bd\u04c0\3\2\2\2\u04be\u04bc\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf"+
		"\u04c2\3\2\2\2\u04c0\u04be\3\2\2\2\u04c1\u04b8\3\2\2\2\u04c1\u04c2\3\2"+
		"\2\2\u04c2\u0093\3\2\2\2\u04c3\u04c4\7f\2\2\u04c4\u04c5\5\u00bc_\2\u04c5"+
		"\u0095\3\2\2\2\u04c6\u04c7\7q\2\2\u04c7\u04d6\7\u0136\2\2\u04c8\u04cd"+
		"\5\u0098M\2\u04c9\u04ca\7%\2\2\u04ca\u04cc\5\u0098M\2\u04cb\u04c9\3\2"+
		"\2\2\u04cc\u04cf\3\2\2\2\u04cd\u04cb\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce"+
		"\u04d7\3\2\2\2\u04cf\u04cd\3\2\2\2\u04d0\u04d1\5\u00dep\2\u04d1\u04d2"+
		"\7\u01f2\2\2\u04d2\u04d3\7\37\2\2\u04d3\u04d4\5\u009aN\2\u04d4\u04d5\7"+
		" \2\2\u04d5\u04d7\3\2\2\2\u04d6\u04c8\3\2\2\2\u04d6\u04d0\3\2\2\2\u04d7"+
		"\u04d8\3\2\2\2\u04d8\u04d9\7\u0134\2\2\u04d9\u04da\7\u030a\2\2\u04da\u0097"+
		"\3\2\2\2\u04db\u04e1\5\u00dep\2\u04dc\u04dd\7\u01f2\2\2\u04dd\u04de\7"+
		"\37\2\2\u04de\u04df\5\u009aN\2\u04df\u04e0\7 \2\2\u04e0\u04e2\3\2\2\2"+
		"\u04e1\u04dc\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2\u04ef\3\2\2\2\u04e3\u04e4"+
		"\t\20\2\2\u04e4\u04e5\7\37\2\2\u04e5\u04ea\5\u00e2r\2\u04e6\u04e7\7%\2"+
		"\2\u04e7\u04e9\5\u00e2r\2\u04e8\u04e6\3\2\2\2\u04e9\u04ec\3\2\2\2\u04ea"+
		"\u04e8\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb\u04ed\3\2\2\2\u04ec\u04ea\3\2"+
		"\2\2\u04ed\u04ee\7 \2\2\u04ee\u04f0\3\2\2\2\u04ef\u04e3\3\2\2\2\u04ef"+
		"\u04f0\3\2\2\2\u04f0\u04f3\3\2\2\2\u04f1\u04f2\7\u0131\2\2\u04f2\u04f4"+
		"\7\u0165\2\2\u04f3\u04f1\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u0099\3\2\2"+
		"\2\u04f5\u04fa\5\u011a\u008e\2\u04f6\u04f7\7%\2\2\u04f7\u04f9\5\u011a"+
		"\u008e\2\u04f8\u04f6\3\2\2\2\u04f9\u04fc\3\2\2\2\u04fa\u04f8\3\2\2\2\u04fa"+
		"\u04fb\3\2\2\2\u04fb\u04ff\3\2\2\2\u04fc\u04fa\3\2\2\2\u04fd\u04ff\7O"+
		"\2\2\u04fe\u04f5\3\2\2\2\u04fe\u04fd\3\2\2\2\u04ff\u009b\3\2\2\2\u0500"+
		"\u0502\7\u0107\2\2\u0501\u0503\t\f\2\2\u0502\u0501\3\2\2\2\u0502\u0503"+
		"\3\2\2\2\u0503\u050d\3\2\2\2\u0504\u0509\5\u009eP\2\u0505\u0506\7%\2\2"+
		"\u0506\u0508\5\u009eP\2\u0507\u0505\3\2\2\2\u0508\u050b\3\2\2\2\u0509"+
		"\u0507\3\2\2\2\u0509\u050a\3\2\2\2\u050a\u050e\3\2\2\2\u050b\u0509\3\2"+
		"\2\2\u050c\u050e\5\u00a0Q\2\u050d\u0504\3\2\2\2\u050d\u050c\3\2\2\2\u050e"+
		"\u009d\3\2\2\2\u050f\u0510\7e\2\2\u0510\u0527\7\u0177\2\2\u0511\u0512"+
		"\7\u00e1\2\2\u0512\u0527\7\u0177\2\2\u0513\u0514\7\u00e5\2\2\u0514\u0527"+
		"\7\u0177\2\2\u0515\u0516\7\u0113\2\2\u0516\u0527\7\u0177\2\2\u0517\u0527"+
		"\7\u012a\2\2\u0518\u0527\7\u0177\2\2\u0519\u0527\7\u0209\2\2\u051a\u0527"+
		"\7\u01df\2\2\u051b\u051c\7\u0225\2\2\u051c\u0520\7\u0177\2\2\u051d\u051e"+
		"\7\u010a\2\2\u051e\u051f\7z\2\2\u051f\u0521\5\u010c\u0087\2\u0520\u051d"+
		"\3\2\2\2\u0520\u0521\3\2\2\2\u0521\u0527\3\2\2\2\u0522\u0523\7\u0276\2"+
		"\2\u0523\u0527\7\u0177\2\2\u0524\u0527\7\u029f\2\2\u0525\u0527\7\u02e0"+
		"\2\2\u0526\u050f\3\2\2\2\u0526\u0511\3\2\2\2\u0526\u0513\3\2\2\2\u0526"+
		"\u0515\3\2\2\2\u0526\u0517\3\2\2\2\u0526\u0518\3\2\2\2\u0526\u0519\3\2"+
		"\2\2\u0526\u051a\3\2\2\2\u0526\u051b\3\2\2\2\u0526\u0522\3\2\2\2\u0526"+
		"\u0524\3\2\2\2\u0526\u0525\3\2\2\2\u0527\u009f\3\2\2\2\u0528\u0550\7\u02b0"+
		"\2\2\u0529\u052a\7\u02b0\2\2\u052a\u052f\5\u00dep\2\u052b\u052c\7%\2\2"+
		"\u052c\u052e\5\u00dep\2\u052d\u052b\3\2\2\2\u052e\u0531\3\2\2\2\u052f"+
		"\u052d\3\2\2\2\u052f\u0530\3\2\2\2\u0530\u0550\3\2\2\2\u0531\u052f\3\2"+
		"\2\2\u0532\u0533\7\u02b0\2\2\u0533\u0534\7\u02fa\2\2\u0534\u0535\7\u0218"+
		"\2\2\u0535\u0550\7\u0173\2\2\u0536\u0537\7\u02b0\2\2\u0537\u053c\5\u00de"+
		"p\2\u0538\u0539\7%\2\2\u0539\u053b\5\u00dep\2\u053a\u0538\3\2\2\2\u053b"+
		"\u053e\3\2\2\2\u053c\u053a\3\2\2\2\u053c\u053d\3\2\2\2\u053d\u053f\3\2"+
		"\2\2\u053e\u053c\3\2\2\2\u053f\u0540\7\u02fa\2\2\u0540\u0541\7\u0218\2"+
		"\2\u0541\u0542\7\u0173\2\2\u0542\u0550\3\2\2\2\u0543\u0544\7\u02b0\2\2"+
		"\u0544\u0549\5\u00dep\2\u0545\u0546\7%\2\2\u0546\u0548\5\u00dep\2\u0547"+
		"\u0545\3\2\2\2\u0548\u054b\3\2\2\2\u0549\u0547\3\2\2\2\u0549\u054a\3\2"+
		"\2\2\u054a\u054c\3\2\2\2\u054b\u0549\3\2\2\2\u054c\u054d\7\u010a\2\2\u054d"+
		"\u054e\7\u00f5\2\2\u054e\u0550\3\2\2\2\u054f\u0528\3\2\2\2\u054f\u0529"+
		"\3\2\2\2\u054f\u0532\3\2\2\2\u054f\u0536\3\2\2\2\u054f\u0543\3\2\2\2\u0550"+
		"\u00a1\3\2\2\2\u0551\u0553\7\u015c\2\2\u0552\u0554\t\21\2\2\u0553\u0552"+
		"\3\2\2\2\u0553\u0554\3\2\2\2\u0554\u0556\3\2\2\2\u0555\u0557\7\u030c\2"+
		"\2\u0556\u0555\3\2\2\2\u0557\u0558\3\2\2\2\u0558\u0556\3\2\2\2\u0558\u0559"+
		"\3\2\2\2\u0559\u00a3\3\2\2\2\u055a\u055b\7\u016f\2\2\u055b\u055c\7\u0136"+
		"\2\2\u055c\u055d\7\u0149\2\2\u055d\u055e\7q\2\2\u055e\u0563\5\u0098M\2"+
		"\u055f\u0560\7%\2\2\u0560\u0562\5\u0098M\2\u0561\u055f\3\2\2\2\u0562\u0565"+
		"\3\2\2\2\u0563\u0561\3\2\2\2\u0563\u0564\3\2\2\2\u0564\u00a5\3\2\2\2\u0565"+
		"\u0563\3\2\2\2\u0566\u0567\7\u023d\2\2\u0567\u056c\5\u00a8U\2\u0568\u0569"+
		"\7%\2\2\u0569\u056b\5\u00a8U\2\u056a\u0568\3\2\2\2\u056b\u056e\3\2\2\2"+
		"\u056c\u056a\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u00a7\3\2\2\2\u056e\u056c"+
		"\3\2\2\2\u056f\u0574\7\u017e\2\2\u0570\u0574\7\u0275\2\2\u0571\u0572\7"+
		"\u0213\2\2\u0572\u0574\7q\2\2\u0573\u056f\3\2\2\2\u0573\u0570\3\2\2\2"+
		"\u0573\u0571\3\2\2\2\u0574\u00a9\3\2\2\2\u0575\u0576\7\u023d\2\2\u0576"+
		"\u0578\7\u01f9\2\2\u0577\u0579\5\u019a\u00ce\2\u0578\u0577\3\2\2\2\u0578"+
		"\u0579\3\2\2\2\u0579\u057a\3\2\2\2\u057a\u057b\7\u030a\2\2\u057b\u00ab"+
		"\3\2\2\2\u057c\u057d\7\u0241\2\2\u057d\u00ad\3\2\2\2\u057e\u057f\7\u0271"+
		"\2\2\u057f\u00af\3\2\2\2\u0580\u0581\7\u010d\2\2\u0581\u0582\7\30\2\2"+
		"\u0582\u0583\5\u00b4[\2\u0583\u00b1\3\2\2\2\u0584\u058b\5\u01d4\u00eb"+
		"\2\u0585\u058b\5\u01ea\u00f6\2\u0586\u058b\5\u01ca\u00e6\2\u0587\u058b"+
		"\5\u01a6\u00d4\2\u0588\u058b\5\u01b4\u00db\2\u0589\u058b\5\u01bc\u00df"+
		"\2\u058a\u0584\3\2\2\2\u058a\u0585\3\2\2\2\u058a\u0586\3\2\2\2\u058a\u0587"+
		"\3\2\2\2\u058a\u0588\3\2\2\2\u058a\u0589\3\2\2\2\u058b\u00b3\3\2\2\2\u058c"+
		"\u058d\t\22\2\2\u058d\u00b5\3\2\2\2\u058e\u058f\7)\2\2\u058f\u00b7\3\2"+
		"\2\2\u0590\u0591\t\23\2\2\u0591\u00b9\3\2\2\2\u0592\u059a\5\u00bc_\2\u0593"+
		"\u059a\5\u00be`\2\u0594\u059a\5\u00c0a\2\u0595\u059a\5\u00c2b\2\u0596"+
		"\u059a\5\u00c4c\2\u0597\u059a\5\u00c6d\2\u0598\u059a\5\u00c8e\2\u0599"+
		"\u0592\3\2\2\2\u0599\u0593\3\2\2\2\u0599\u0594\3\2\2\2\u0599\u0595\3\2"+
		"\2\2\u0599\u0596\3\2\2\2\u0599\u0597\3\2\2\2\u0599\u0598\3\2\2\2\u059a"+
		"\u00bb\3\2\2\2\u059b\u059d\5\u00caf\2\u059c\u059b\3\2\2\2\u059c\u059d"+
		"\3\2\2\2\u059d\u059e\3\2\2\2\u059e\u05a0\7\u030b\2\2\u059f\u05a1\5\u0190"+
		"\u00c9\2\u05a0\u059f\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1\u00bd\3\2\2\2\u05a2"+
		"\u05a4\7\20\2\2\u05a3\u05a2\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4\u05a5\3"+
		"\2\2\2\u05a5\u05a6\7\u030c\2\2\u05a6\u00bf\3\2\2\2\u05a7\u05a8\t\24\2"+
		"\2\u05a8\u05af\7\u030b\2\2\u05a9\u05aa\7!\2\2\u05aa\u05ab\5\u00ceh\2\u05ab"+
		"\u05ac\7\u030b\2\2\u05ac\u05ad\7\"\2\2\u05ad\u05af\3\2\2\2\u05ae\u05a7"+
		"\3\2\2\2\u05ae\u05a9\3\2\2\2\u05af\u00c1\3\2\2\2\u05b0\u05b2\5\u00caf"+
		"\2\u05b1\u05b0\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05b3\3\2\2\2\u05b3\u05b5"+
		"\7\u030d\2\2\u05b4\u05b6\5\u0190\u00c9\2\u05b5\u05b4\3\2\2\2\u05b5\u05b6"+
		"\3\2\2\2\u05b6\u00c3\3\2\2\2\u05b7\u05b9\5\u00caf\2\u05b8\u05b7\3\2\2"+
		"\2\u05b8\u05b9\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05bc\7\u030e\2\2\u05bb"+
		"\u05bd\5\u0190\u00c9\2\u05bc\u05bb\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u00c5"+
		"\3\2\2\2\u05be\u05bf\t\25\2\2\u05bf\u00c7\3\2\2\2\u05c0\u05c1\7\u01d0"+
		"\2\2\u05c1\u00c9\3\2\2\2\u05c2\u05c3\7\u030a\2\2\u05c3\u00cb\3\2\2\2\u05c4"+
		"\u05c5\7\u030a\2\2\u05c5\u00cd\3\2\2\2\u05c6\u05ca\7\u030a\2\2\u05c7\u05ca"+
		"\5\u00d0i\2\u05c8\u05ca\5\u00b8]\2\u05c9\u05c6\3\2\2\2\u05c9\u05c7\3\2"+
		"\2\2\u05c9\u05c8\3\2\2\2\u05ca\u00cf\3\2\2\2\u05cb\u05cc\t\26\2\2\u05cc"+
		"\u00d1\3\2\2\2\u05cd\u05cf\7*\2\2\u05ce\u05cd\3\2\2\2\u05ce\u05cf\3\2"+
		"\2\2\u05cf\u05d0\3\2\2\2\u05d0\u05d2\7*\2\2\u05d1\u05ce\3\2\2\2\u05d1"+
		"\u05d2\3\2\2\2\u05d2\u05d4\3\2\2\2\u05d3\u05d5\5\u00d4k\2\u05d4\u05d3"+
		"\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5\u05d7\3\2\2\2\u05d6\u05d8\7\24\2\2"+
		"\u05d7\u05d6\3\2\2\2\u05d7\u05d8\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9\u05da"+
		"\5\u00ceh\2\u05da\u00d3\3\2\2\2\u05db\u05dc\t\27\2\2\u05dc\u00d5\3\2\2"+
		"\2\u05dd\u05de\5\u00ceh\2\u05de\u00d7\3\2\2\2\u05df\u05e4\5\u00d6l\2\u05e0"+
		"\u05e1\7%\2\2\u05e1\u05e3\5\u00d6l\2\u05e2\u05e0\3\2\2\2\u05e3\u05e6\3"+
		"\2\2\2\u05e4\u05e2\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5\u00d9\3\2\2\2\u05e6"+
		"\u05e4\3\2\2\2\u05e7\u05ec\5\u00dco\2\u05e8\u05e9\7%\2\2\u05e9\u05eb\5"+
		"\u00dco\2\u05ea\u05e8\3\2\2\2\u05eb\u05ee\3\2\2\2\u05ec\u05ea\3\2\2\2"+
		"\u05ec\u05ed\3\2\2\2\u05ed\u00db\3\2\2\2\u05ee\u05ec\3\2\2\2\u05ef\u05f0"+
		"\7\37\2\2\u05f0\u05f1\5\u00d6l\2\u05f1\u05f2\7%\2\2\u05f2\u05f3\5\u00d6"+
		"l\2\u05f3\u05f4\7 \2\2\u05f4\u00dd\3\2\2\2\u05f5\u05f6\5\u00f0y\2\u05f6"+
		"\u05f7\7\24\2\2\u05f7\u05f9\3\2\2\2\u05f8\u05f5\3\2\2\2\u05f8\u05f9\3"+
		"\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fb\5\u00f4{\2\u05fb\u00df\3\2\2\2"+
		"\u05fc\u05fd\5\u00f0y\2\u05fd\u05fe\7\24\2\2\u05fe\u0600\3\2\2\2\u05ff"+
		"\u05fc\3\2\2\2\u05ff\u0600\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0602\5\u00f4"+
		"{\2\u0602\u00e1\3\2\2\2\u0603\u0604\5\u00ceh\2\u0604\u00e3\3\2\2\2\u0605"+
		"\u0606\7\u030b\2\2\u0606\u0607\7*\2\2\u0607\u060b\7\u030b\2\2\u0608\u060b"+
		"\5\u00ceh\2\u0609\u060b\7\u030b\2\2\u060a\u0605\3\2\2\2\u060a\u0608\3"+
		"\2\2\2\u060a\u0609\3\2\2\2\u060b\u00e5\3\2\2\2\u060c\u060d\t\30\2\2\u060d"+
		"\u060e\7*\2\2\u060e\u060f\7\u030b\2\2\u060f\u0613\7\u030a\2\2\u0610\u0613"+
		"\5\u00ceh\2\u0611\u0613\7\u030b\2\2\u0612\u060c\3\2\2\2\u0612\u0610\3"+
		"\2\2\2\u0612\u0611\3\2\2\2\u0613\u00e7\3\2\2\2\u0614\u0617\5\u00ceh\2"+
		"\u0615\u0617\7\u030b\2\2\u0616\u0614\3\2\2\2\u0616\u0615\3\2\2\2\u0617"+
		"\u00e9\3\2\2\2\u0618\u061b\5\u00ceh\2\u0619\u061b\7\u030b\2\2\u061a\u0618"+
		"\3\2\2\2\u061a\u0619\3\2\2\2\u061b\u00eb\3\2\2\2\u061c\u0624\5\u00ceh"+
		"\2\u061d\u061e\5\u00f0y\2\u061e\u061f\7\24\2\2\u061f\u0621\3\2\2\2\u0620"+
		"\u061d\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u0622\3\2\2\2\u0622\u0624\5\u00ce"+
		"h\2\u0623\u061c\3\2\2\2\u0623\u0620\3\2\2\2\u0624\u00ed\3\2\2\2\u0625"+
		"\u062d\5\u00ceh\2\u0626\u0627\5\u00f0y\2\u0627\u0628\7\24\2\2\u0628\u062a"+
		"\3\2\2\2\u0629\u0626\3\2\2\2\u0629\u062a\3\2\2\2\u062a\u062b\3\2\2\2\u062b"+
		"\u062d\5\u00ceh\2\u062c\u0625\3\2\2\2\u062c\u0629\3\2\2\2\u062d\u00ef"+
		"\3\2\2\2\u062e\u062f\5\u00ceh\2\u062f\u00f1\3\2\2\2\u0630\u0633\5\u00ce"+
		"h\2\u0631\u0633\7\u030b\2\2\u0632\u0630\3\2\2\2\u0632\u0631\3\2\2\2\u0633"+
		"\u00f3\3\2\2\2\u0634\u0635\5\u00ceh\2\u0635\u00f5\3\2\2\2\u0636\u0638"+
		"\7\37\2\2\u0637\u0636\3\2\2\2\u0637\u0638\3\2\2\2\u0638\u0639\3\2\2\2"+
		"\u0639\u063e\5\u00dep\2\u063a\u063b\7%\2\2\u063b\u063d\5\u00dep\2\u063c"+
		"\u063a\3\2\2\2\u063d\u0640\3\2\2\2\u063e\u063c\3\2\2\2\u063e\u063f\3\2"+
		"\2\2\u063f\u0642\3\2\2\2\u0640\u063e\3\2\2\2\u0641\u0643\7 \2\2\u0642"+
		"\u0641\3\2\2\2\u0642\u0643\3\2\2\2\u0643\u00f7\3\2\2\2\u0644\u0646\7\37"+
		"\2\2\u0645\u0644\3\2\2\2\u0645\u0646\3\2\2\2\u0646\u0647\3\2\2\2\u0647"+
		"\u064c\5\u00e0q\2\u0648\u0649\7%\2\2\u0649\u064b\5\u00e0q\2\u064a\u0648"+
		"\3\2\2\2\u064b\u064e\3\2\2\2\u064c\u064a\3\2\2\2\u064c\u064d\3\2\2\2\u064d"+
		"\u0650\3\2\2\2\u064e\u064c\3\2\2\2\u064f\u0651\7 \2\2\u0650\u064f\3\2"+
		"\2\2\u0650\u0651\3\2\2\2\u0651\u00f9\3\2\2\2\u0652\u0653\7\u030a\2\2\u0653"+
		"\u00fb\3\2\2\2\u0654\u0655\5\u00ceh\2\u0655\u00fd\3\2\2\2\u0656\u0657"+
		"\7\u030b\2\2\u0657\u00ff\3\2\2\2\u0658\u0659\7\u030b\2\2\u0659\u0101\3"+
		"\2\2\2\u065a\u065b\7\u030a\2\2\u065b\u0103\3\2\2\2\u065c\u065d\7\u030b"+
		"\2\2\u065d\u0105\3\2\2\2\u065e\u065f\7\u030c\2\2\u065f\u0107\3\2\2\2\u0660"+
		"\u0661\5\u00e4s\2\u0661\u0662\7*\2\2\u0662\u0663\5\u0104\u0083\2\u0663"+
		"\u0664\7\16\2\2\u0664\u0665\5\u0106\u0084\2\u0665\u0109\3\2\2\2\u0666"+
		"\u0667\7\u030a\2\2\u0667\u010b\3\2\2\2\u0668\u0669\7\u030a\2\2\u0669\u010d"+
		"\3\2\2\2\u066a\u066b\5\u00ceh\2\u066b\u010f\3\2\2\2\u066c\u066d\t\30\2"+
		"\2\u066d\u066e\7*\2\2\u066e\u066f\7\u030b\2\2\u066f\u0672\7\u030a\2\2"+
		"\u0670\u0672\7\u030a\2\2\u0671\u066c\3\2\2\2\u0671\u0670\3\2\2\2\u0672"+
		"\u0111\3\2\2\2\u0673\u0674\7\u030a\2\2\u0674\u0113\3\2\2\2\u0675\u0676"+
		"\7\u030a\2\2\u0676\u0115\3\2\2\2\u0677\u0678\t\31\2\2\u0678\u0117\3\2"+
		"\2\2\u0679\u067c\5\u00e4s\2\u067a\u067c\5\u0110\u0089\2\u067b\u0679\3"+
		"\2\2\2\u067b\u067a\3\2\2\2\u067c\u0119\3\2\2\2\u067d\u067e\7\u030a\2\2"+
		"\u067e\u011b\3\2\2\2\u067f\u0680\t\32\2\2\u0680\u011d\3\2\2\2\u0681\u0682"+
		"\t\33\2\2\u0682\u0683\5\u0114\u008b\2\u0683\u011f\3\2\2\2\u0684\u0685"+
		"\b\u0091\1\2\u0685\u068a\5\u0126\u0094\2\u0686\u0687\5\u0124\u0093\2\u0687"+
		"\u0688\5\u0120\u0091\3\u0688\u068a\3\2\2\2\u0689\u0684\3\2\2\2\u0689\u0686"+
		"\3\2\2\2\u068a\u0694\3\2\2\2\u068b\u068c\f\5\2\2\u068c\u068d\5\u0122\u0092"+
		"\2\u068d\u068e\5\u0120\u0091\6\u068e\u0693\3\2\2\2\u068f\u0690\f\4\2\2"+
		"\u0690\u0691\7\u0303\2\2\u0691\u0693\5\u0120\u0091\5\u0692\u068b\3\2\2"+
		"\2\u0692\u068f\3\2\2\2\u0693\u0696\3\2\2\2\u0694\u0692\3\2\2\2\u0694\u0695"+
		"\3\2\2\2\u0695\u0121\3\2\2\2\u0696\u0694\3\2\2\2\u0697\u0698\t\34\2\2"+
		"\u0698\u0123\3\2\2\2\u0699\u069a\t\35\2\2\u069a\u0125\3\2\2\2\u069b\u069c"+
		"\b\u0094\1\2\u069c\u069d\5\u012a\u0096\2\u069d\u06b2\3\2\2\2\u069e\u069f"+
		"\f\7\2\2\u069f\u06a1\7\u0151\2\2\u06a0\u06a2\7\u01ca\2\2\u06a1\u06a0\3"+
		"\2\2\2\u06a1\u06a2\3\2\2\2\u06a2\u06a3\3\2\2\2\u06a3\u06b1\t\36\2\2\u06a4"+
		"\u06a5\f\6\2\2\u06a5\u06a6\7\26\2\2\u06a6\u06b1\5\u012a\u0096\2\u06a7"+
		"\u06a8\f\5\2\2\u06a8\u06a9\5\u0128\u0095\2\u06a9\u06aa\5\u012a\u0096\2"+
		"\u06aa\u06b1\3\2\2\2\u06ab\u06ac\f\4\2\2\u06ac\u06ad\5\u0128\u0095\2\u06ad"+
		"\u06ae\t\37\2\2\u06ae\u06af\5\u0180\u00c1\2\u06af\u06b1\3\2\2\2\u06b0"+
		"\u069e\3\2\2\2\u06b0\u06a4\3\2\2\2\u06b0\u06a7\3\2\2\2\u06b0\u06ab\3\2"+
		"\2\2\u06b1\u06b4\3\2\2\2\u06b2\u06b0\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b3"+
		"\u0127\3\2\2\2\u06b4\u06b2\3\2\2\2\u06b5\u06b6\t \2\2\u06b6\u0129\3\2"+
		"\2\2\u06b7\u06b9\5\u012c\u0097\2\u06b8\u06ba\7\u01ca\2\2\u06b9\u06b8\3"+
		"\2\2\2\u06b9\u06ba\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb\u06bc\7\u0134\2\2"+
		"\u06bc\u06bd\5\u0180\u00c1\2\u06bd\u06ef\3\2\2\2\u06be\u06c0\5\u012c\u0097"+
		"\2\u06bf\u06c1\7\u01ca\2\2\u06c0\u06bf\3\2\2\2\u06c0\u06c1\3\2\2\2\u06c1"+
		"\u06c2\3\2\2\2\u06c2\u06c3\7\u0134\2\2\u06c3\u06c4\7\37\2\2\u06c4\u06c9"+
		"\5\u0120\u0091\2\u06c5\u06c6\7%\2\2\u06c6\u06c8\5\u0120\u0091\2\u06c7"+
		"\u06c5\3\2\2\2\u06c8\u06cb\3\2\2\2\u06c9\u06c7\3\2\2\2\u06c9\u06ca\3\2"+
		"\2\2\u06ca\u06cc\3\2\2\2\u06cb\u06c9\3\2\2\2\u06cc\u06cd\7 \2\2\u06cd"+
		"\u06ef\3\2\2\2\u06ce\u06d0\5\u012c\u0097\2\u06cf\u06d1\7\u01ca\2\2\u06d0"+
		"\u06cf\3\2\2\2\u06d0\u06d1\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2\u06d3\7c"+
		"\2\2\u06d3\u06d4\5\u012c\u0097\2\u06d4\u06d5\7S\2\2\u06d5\u06d6\5\u012a"+
		"\u0096\2\u06d6\u06ef\3\2\2\2\u06d7\u06d8\5\u012c\u0097\2\u06d8\u06d9\7"+
		"\u027c\2\2\u06d9\u06da\7\u0169\2\2\u06da\u06db\5\u012c\u0097\2\u06db\u06ef"+
		"\3\2\2\2\u06dc\u06de\5\u012c\u0097\2\u06dd\u06df\7\u01ca\2\2\u06de\u06dd"+
		"\3\2\2\2\u06de\u06df\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0\u06e1\7\u0169\2"+
		"\2\u06e1\u06e4\5\u012e\u0098\2\u06e2\u06e3\7\u00e7\2\2\u06e3\u06e5\5\u012e"+
		"\u0098\2\u06e4\u06e2\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5\u06ef\3\2\2\2\u06e6"+
		"\u06e8\5\u012c\u0097\2\u06e7\u06e9\7\u01ca\2\2\u06e8\u06e7\3\2\2\2\u06e8"+
		"\u06e9\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\u06eb\7\u0224\2\2\u06eb\u06ec"+
		"\5\u012c\u0097\2\u06ec\u06ef\3\2\2\2\u06ed\u06ef\5\u012c\u0097\2\u06ee"+
		"\u06b7\3\2\2\2\u06ee\u06be\3\2\2\2\u06ee\u06ce\3\2\2\2\u06ee\u06d7\3\2"+
		"\2\2\u06ee\u06dc\3\2\2\2\u06ee\u06e6\3\2\2\2\u06ee\u06ed\3\2\2\2\u06ef"+
		"\u012b\3\2\2\2\u06f0\u06f1\b\u0097\1\2\u06f1\u06f2\5\u012e\u0098\2\u06f2"+
		"\u071f\3\2\2\2\u06f3\u06f4\f\21\2\2\u06f4\u06f5\7\b\2\2\u06f5\u071e\5"+
		"\u012c\u0097\22\u06f6\u06f7\f\20\2\2\u06f7\u06f8\7\t\2\2\u06f8\u071e\5"+
		"\u012c\u0097\21\u06f9\u06fa\f\17\2\2\u06fa\u06fb\7\n\2\2\u06fb\u071e\5"+
		"\u012c\u0097\20\u06fc\u06fd\f\16\2\2\u06fd\u06fe\7\13\2\2\u06fe\u071e"+
		"\5\u012c\u0097\17\u06ff\u0700\f\r\2\2\u0700\u0701\7\17\2\2\u0701\u071e"+
		"\5\u012c\u0097\16\u0702\u0703\f\f\2\2\u0703\u0704\7\20\2\2\u0704\u071e"+
		"\5\u012c\u0097\r\u0705\u0706\f\13\2\2\u0706\u0707\7\21\2\2\u0707\u071e"+
		"\5\u012c\u0097\f\u0708\u0709\f\n\2\2\u0709\u070a\7\22\2\2\u070a\u071e"+
		"\5\u012c\u0097\13\u070b\u070c\f\t\2\2\u070c\u070d\7\u00cf\2\2\u070d\u071e"+
		"\5\u012c\u0097\n\u070e\u070f\f\b\2\2\u070f\u0710\7\u01b1\2\2\u0710\u071e"+
		"\5\u012c\u0097\t\u0711\u0712\f\7\2\2\u0712\u0713\7\r\2\2\u0713\u071e\5"+
		"\u012c\u0097\b\u0714\u0715\f\6\2\2\u0715\u0716\7\f\2\2\u0716\u071e\5\u012c"+
		"\u0097\7\u0717\u0718\f\5\2\2\u0718\u0719\7\17\2\2\u0719\u071e\5\u017a"+
		"\u00be\2\u071a\u071b\f\4\2\2\u071b\u071c\7\20\2\2\u071c\u071e\5\u017a"+
		"\u00be\2\u071d\u06f3\3\2\2\2\u071d\u06f6\3\2\2\2\u071d\u06f9\3\2\2\2\u071d"+
		"\u06fc\3\2\2\2\u071d\u06ff\3\2\2\2\u071d\u0702\3\2\2\2\u071d\u0705\3\2"+
		"\2\2\u071d\u0708\3\2\2\2\u071d\u070b\3\2\2\2\u071d\u070e\3\2\2\2\u071d"+
		"\u0711\3\2\2\2\u071d\u0714\3\2\2\2\u071d\u0717\3\2\2\2\u071d\u071a\3\2"+
		"\2\2\u071e\u0721\3\2\2\2\u071f\u071d\3\2\2\2\u071f\u0720\3\2\2\2\u0720"+
		"\u012d\3\2\2\2\u0721\u071f\3\2\2\2\u0722\u0723\b\u0098\1\2\u0723\u074f"+
		"\5\u0130\u0099\2\u0724\u074f\5\u00b6\\\2\u0725\u074f\5\u00ba^\2\u0726"+
		"\u074f\5\u00e0q\2\u0727\u074f\5\u00d2j\2\u0728\u072e\7\17\2\2\u0729\u072e"+
		"\7\20\2\2\u072a\u072e\7\7\2\2\u072b\u072e\5\u0124\u0093\2\u072c\u072e"+
		"\7e\2\2\u072d\u0728\3\2\2\2\u072d\u0729\3\2\2\2\u072d\u072a\3\2\2\2\u072d"+
		"\u072b\3\2\2\2\u072d\u072c\3\2\2\2\u072e\u072f\3\2\2\2\u072f\u074f\5\u012e"+
		"\u0098\n\u0730\u0732\7\u0254\2\2\u0731\u0730\3\2\2\2\u0731\u0732\3\2\2"+
		"\2\u0732\u0733\3\2\2\2\u0733\u0734\7\37\2\2\u0734\u0739\5\u0120\u0091"+
		"\2\u0735\u0736\7%\2\2\u0736\u0738\5\u0120\u0091\2\u0737\u0735\3\2\2\2"+
		"\u0738\u073b\3\2\2\2\u0739\u0737\3\2\2\2\u0739\u073a\3\2\2\2\u073a\u073c"+
		"\3\2\2\2\u073b\u0739\3\2\2\2\u073c\u073d\7 \2\2\u073d\u074f\3\2\2\2\u073e"+
		"\u0740\7\u00f0\2\2\u073f\u073e\3\2\2\2\u073f\u0740\3\2\2\2\u0740\u0741"+
		"\3\2\2\2\u0741\u074f\5\u0180\u00c1\2\u0742\u0743\7!\2\2\u0743\u0744\5"+
		"\u00ceh\2\u0744\u0745\5\u0120\u0091\2\u0745\u0746\7\"\2\2\u0746\u074f"+
		"\3\2\2\2\u0747\u0748\5\u00ceh\2\u0748\u0749\t!\2\2\u0749\u074a\7\u030b"+
		"\2\2\u074a\u074f\3\2\2\2\u074b\u074f\5\u016c\u00b7\2\u074c\u074f\5\u0170"+
		"\u00b9\2\u074d\u074f\5\u017a\u00be\2\u074e\u0722\3\2\2\2\u074e\u0724\3"+
		"\2\2\2\u074e\u0725\3\2\2\2\u074e\u0726\3\2\2\2\u074e\u0727\3\2\2\2\u074e"+
		"\u072d\3\2\2\2\u074e\u0731\3\2\2\2\u074e\u073f\3\2\2\2\u074e\u0742\3\2"+
		"\2\2\u074e\u0747\3\2\2\2\u074e\u074b\3\2\2\2\u074e\u074c\3\2\2\2\u074e"+
		"\u074d\3\2\2\2\u074f\u075b\3\2\2\2\u0750\u0751\f\13\2\2\u0751\u0752\7"+
		"\5\2\2\u0752\u075a\5\u012e\u0098\f\u0753\u0754\f\r\2\2\u0754\u0757\7\u0087"+
		"\2\2\u0755\u0758\7\u030b\2\2\u0756\u0758\5\u00ceh\2\u0757\u0755\3\2\2"+
		"\2\u0757\u0756\3\2\2\2\u0758\u075a\3\2\2\2\u0759\u0750\3\2\2\2\u0759\u0753"+
		"\3\2\2\2\u075a\u075d\3\2\2\2\u075b\u0759\3\2\2\2\u075b\u075c\3\2\2\2\u075c"+
		"\u012f\3\2\2\2\u075d\u075b\3\2\2\2\u075e\u0762\5\u0132\u009a\2\u075f\u0762"+
		"\5\u0146\u00a4\2\u0760\u0762\5\u0164\u00b3\2\u0761\u075e\3\2\2\2\u0761"+
		"\u075f\3\2\2\2\u0761\u0760\3\2\2\2\u0762\u0131\3\2\2\2\u0763\u0764\5\u0134"+
		"\u009b\2\u0764\u0766\7\37\2\2\u0765\u0767\5\u0136\u009c\2\u0766\u0765"+
		"\3\2\2\2\u0766\u0767\3\2\2\2\u0767\u0771\3\2\2\2\u0768\u076d\5\u0120\u0091"+
		"\2\u0769\u076a\7%\2\2\u076a\u076c\5\u0120\u0091\2\u076b\u0769\3\2\2\2"+
		"\u076c\u076f\3\2\2\2\u076d\u076b\3\2\2\2\u076d\u076e\3\2\2\2\u076e\u0772"+
		"\3\2\2\2\u076f\u076d\3\2\2\2\u0770\u0772\7\21\2\2\u0771\u0768\3\2\2\2"+
		"\u0771\u0770\3\2\2\2\u0771\u0772\3\2\2\2\u0772\u0773\3\2\2\2\u0773\u0775"+
		"\7 \2\2\u0774\u0776\5\u0138\u009d\2\u0775\u0774\3\2\2\2\u0775\u0776\3"+
		"\2\2\2\u0776\u0133\3\2\2\2\u0777\u0778\t\"\2\2\u0778\u0135\3\2\2\2\u0779"+
		"\u077a\7\u00cd\2\2\u077a\u0137\3\2\2\2\u077b\u0781\7\u01ec\2\2\u077c\u077d"+
		"\7\37\2\2\u077d\u077e\5\u013a\u009e\2\u077e\u077f\7 \2\2\u077f\u0782\3"+
		"\2\2\2\u0780\u0782\5\u00ceh\2\u0781\u077c\3\2\2\2\u0781\u0780\3\2\2\2"+
		"\u0782\u0139\3\2\2\2\u0783\u0785\5\u00ceh\2\u0784\u0783\3\2\2\2\u0784"+
		"\u0785\3\2\2\2\u0785\u0787\3\2\2\2\u0786\u0788\5\u013c\u009f\2\u0787\u0786"+
		"\3\2\2\2\u0787\u0788\3\2\2\2\u0788\u078a\3\2\2\2\u0789\u078b\5\u0182\u00c2"+
		"\2\u078a\u0789\3\2\2\2\u078a\u078b\3\2\2\2\u078b\u078d\3\2\2\2\u078c\u078e"+
		"\5\u013e\u00a0\2\u078d\u078c\3\2\2\2\u078d\u078e\3\2\2\2\u078e\u013b\3"+
		"\2\2\2\u078f\u0790\7\u01f2\2\2\u0790\u0791\7o\2\2\u0791\u0796\5\u0120"+
		"\u0091\2\u0792\u0793\7%\2\2\u0793\u0795\5\u0120\u0091\2\u0794\u0792\3"+
		"\2\2\2\u0795\u0798\3\2\2\2\u0796\u0794\3\2\2\2\u0796\u0797\3\2\2\2\u0797"+
		"\u013d\3\2\2\2\u0798\u0796\3\2\2\2\u0799\u079c\t#\2\2\u079a\u079d\5\u0140"+
		"\u00a1\2\u079b\u079d\5\u0144\u00a3\2\u079c\u079a\3\2\2\2\u079c\u079b\3"+
		"\2\2\2\u079d\u013f\3\2\2\2\u079e\u079f\7\u00a6\2\2\u079f\u07ab\7\u0254"+
		"\2\2\u07a0\u07a1\7\u02cd\2\2\u07a1\u07ab\7\u0203\2\2\u07a2\u07a3\7\u02cd"+
		"\2\2\u07a3\u07ab\7\u0108\2\2\u07a4\u07a5\5\u0120\u0091\2\u07a5\u07a6\7"+
		"\u0203\2\2\u07a6\u07ab\3\2\2\2\u07a7\u07a8\5\u0120\u0091\2\u07a8\u07a9"+
		"\7\u0108\2\2\u07a9\u07ab\3\2\2\2\u07aa\u079e\3\2\2\2\u07aa\u07a0\3\2\2"+
		"\2\u07aa\u07a2\3\2\2\2\u07aa\u07a4\3\2\2\2\u07aa\u07a7\3\2\2\2\u07ab\u0141"+
		"\3\2\2\2\u07ac\u07ad\5\u0140\u00a1\2\u07ad\u0143\3\2\2\2\u07ae\u07af\7"+
		"c\2\2\u07af\u07b0\5\u0140\u00a1\2\u07b0\u07b1\7S\2\2\u07b1\u07b2\5\u0142"+
		"\u00a2\2\u07b2\u0145\3\2\2\2\u07b3\u07c0\5\u014a\u00a6\2\u07b4\u07c0\5"+
		"\u014c\u00a7\2\u07b5\u07c0\5\u014e\u00a8\2\u07b6\u07c0\5\u0150\u00a9\2"+
		"\u07b7\u07c0\5\u0152\u00aa\2\u07b8\u07c0\5\u0154\u00ab\2\u07b9\u07c0\5"+
		"\u0156\u00ac\2\u07ba\u07c0\5\u0158\u00ad\2\u07bb\u07c0\5\u015a\u00ae\2"+
		"\u07bc\u07c0\5\u015e\u00b0\2\u07bd\u07c0\5\u015c\u00af\2\u07be\u07c0\5"+
		"\u0148\u00a5\2\u07bf\u07b3\3\2\2\2\u07bf\u07b4\3\2\2\2\u07bf\u07b5\3\2"+
		"\2\2\u07bf\u07b6\3\2\2\2\u07bf\u07b7\3\2\2\2\u07bf\u07b8\3\2\2\2\u07bf"+
		"\u07b9\3\2\2\2\u07bf\u07ba\3\2\2\2\u07bf\u07bb\3\2\2\2\u07bf\u07bc\3\2"+
		"\2\2\u07bf\u07bd\3\2\2\2\u07bf\u07be\3\2\2\2\u07c0\u0147\3\2\2\2\u07c1"+
		"\u07c4\7\u00aa\2\2\u07c2\u07c3\7\37\2\2\u07c3\u07c5\7 \2\2\u07c4\u07c2"+
		"\3\2\2\2\u07c4\u07c5\3\2\2\2\u07c5\u0149\3\2\2\2\u07c6\u07c7\7\63\2\2"+
		"\u07c7\u07c9\7\37\2\2\u07c8\u07ca\5\u0136\u009c\2\u07c9\u07c8\3\2\2\2"+
		"\u07c9\u07ca\3\2\2\2\u07ca\u07d4\3\2\2\2\u07cb\u07d0\5\u0120\u0091\2\u07cc"+
		"\u07cd\7%\2\2\u07cd\u07cf\5\u0120\u0091\2\u07ce\u07cc\3\2\2\2\u07cf\u07d2"+
		"\3\2\2\2\u07d0\u07ce\3\2\2\2\u07d0\u07d1\3\2\2\2\u07d1\u07d5\3\2\2\2\u07d2"+
		"\u07d0\3\2\2\2\u07d3\u07d5\7\21\2\2\u07d4\u07cb\3\2\2\2\u07d4\u07d3\3"+
		"\2\2\2\u07d4\u07d5\3\2\2\2\u07d5\u07d7\3\2\2\2\u07d6\u07d8\5\u0182\u00c2"+
		"\2\u07d7\u07d6\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8\u07db\3\2\2\2\u07d9\u07da"+
		"\7\u0269\2\2\u07da\u07dc\5\u0120\u0091\2\u07db\u07d9\3\2\2\2\u07db\u07dc"+
		"\3\2\2\2\u07dc\u07dd\3\2\2\2\u07dd\u07de\7 \2\2\u07de\u014b\3\2\2\2\u07df"+
		"\u07e0\5\u00ceh\2\u07e0\u07e1\7\37\2\2\u07e1\u07e6\5\u0120\u0091\2\u07e2"+
		"\u07e3\7%\2\2\u07e3\u07e5\5\u0120\u0091\2\u07e4\u07e2\3\2\2\2\u07e5\u07e8"+
		"\3\2\2\2\u07e6\u07e4\3\2\2\2\u07e6\u07e7\3\2\2\2\u07e7\u07e9\3\2\2\2\u07e8"+
		"\u07e6\3\2\2\2\u07e9\u07ea\7 \2\2\u07ea\u07eb\5\u0138\u009d\2\u07eb\u014d"+
		"\3\2\2\2\u07ec\u07ed\7\64\2\2\u07ed\u07ee\7\37\2\2\u07ee\u07ef\5\u0120"+
		"\u0091\2\u07ef\u07f0\7V\2\2\u07f0\u07f1\5\u0186\u00c4\2\u07f1\u07f2\7"+
		" \2\2\u07f2\u014f\3\2\2\2\u07f3\u07f4\7\u00a0\2\2\u07f4\u07f5\7\37\2\2"+
		"\u07f5\u07f6\5\u0120\u0091\2\u07f6\u07f7\7%\2\2\u07f7\u07f8\5\u0186\u00c4"+
		"\2\u07f8\u07f9\7 \2\2\u07f9\u0802\3\2\2\2\u07fa\u07fb\7\u00a0\2\2\u07fb"+
		"\u07fc\7\37\2\2\u07fc\u07fd\5\u0120\u0091\2\u07fd\u07fe\7\u02e2\2\2\u07fe"+
		"\u07ff\5\u00ceh\2\u07ff\u0800\7 \2\2\u0800\u0802\3\2\2\2\u0801\u07f3\3"+
		"\2\2\2\u0801\u07fa\3\2\2\2\u0802\u0151\3\2\2\2\u0803\u0804\7\65\2\2\u0804"+
		"\u0805\7\37\2\2\u0805\u0806\5\u0120\u0091\2\u0806\u0807\7\u0134\2\2\u0807"+
		"\u0808\5\u0120\u0091\2\u0808\u0809\7 \2\2\u0809\u0153\3\2\2\2\u080a\u080b"+
		"\t$\2\2\u080b\u080c\7\37\2\2\u080c\u080d\5\u0120\u0091\2\u080d\u080e\7"+
		"\u010f\2\2\u080e\u0811\7\u030c\2\2\u080f\u0810\7\u010a\2\2\u0810\u0812"+
		"\7\u030c\2\2\u0811\u080f\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u0813\3\2\2"+
		"\2\u0813\u0814\7 \2\2\u0814\u0821\3\2\2\2\u0815\u0816\t$\2\2\u0816\u0817"+
		"\7\37\2\2\u0817\u0818\5\u0120\u0091\2\u0818\u0819\7%\2\2\u0819\u081c\7"+
		"\u030c\2\2\u081a\u081b\7%\2\2\u081b\u081d\7\u030c\2\2\u081c\u081a\3\2"+
		"\2\2\u081c\u081d\3\2\2\2\u081d\u081e\3\2\2\2\u081e\u081f\7 \2\2\u081f"+
		"\u0821\3\2\2\2\u0820\u080a\3\2\2\2\u0820\u0815\3\2\2\2\u0821\u0155\3\2"+
		"\2\2\u0822\u0823\78\2\2\u0823\u0824\7\37\2\2\u0824\u0825\5\u00ceh\2\u0825"+
		"\u0826\7\u010f\2\2\u0826\u0827\5\u0120\u0091\2\u0827\u0828\7 \2\2\u0828"+
		"\u0157\3\2\2\2\u0829\u082a\7{\2\2\u082a\u082b\7\37\2\2\u082b\u0830\5\u0120"+
		"\u0091\2\u082c\u082d\7%\2\2\u082d\u082f\5\u0120\u0091\2\u082e\u082c\3"+
		"\2\2\2\u082f\u0832\3\2\2\2\u0830\u082e\3\2\2\2\u0830\u0831\3\2\2\2\u0831"+
		"\u0835\3\2\2\2\u0832\u0830\3\2\2\2\u0833\u0834\7\u02e2\2\2\u0834\u0836"+
		"\5\u0192\u00ca\2\u0835\u0833\3\2\2\2\u0835\u0836\3\2\2\2\u0836\u0837\3"+
		"\2\2\2\u0837\u0838\7 \2\2\u0838\u0159\3\2\2\2\u0839\u083a\79\2\2\u083a"+
		"\u083b\7\37\2\2\u083b\u083c\t%\2\2\u083c\u083d\7\u030b\2\2\u083d\u083e"+
		"\7\u010f\2\2\u083e\u083f\7\u030b\2\2\u083f\u0840\7 \2\2\u0840\u015b\3"+
		"\2\2\2\u0841\u0842\7\u02e8\2\2\u0842\u0843\7\37\2\2\u0843\u0844\5\u00e0"+
		"q\2\u0844\u0845\7 \2\2\u0845\u015d\3\2\2\2\u0846\u0847\7\u02f5\2\2\u0847"+
		"\u0848\7\37\2\2\u0848\u084b\5\u0120\u0091\2\u0849\u084a\7V\2\2\u084a\u084c"+
		"\5\u0186\u00c4\2\u084b\u0849\3\2\2\2\u084b\u084c\3\2\2\2\u084c\u084e\3"+
		"\2\2\2\u084d\u084f\5\u0160\u00b1\2\u084e\u084d\3\2\2\2\u084e\u084f\3\2"+
		"\2\2\u084f\u0850\3\2\2\2\u0850\u0851\7 \2\2\u0851\u015f\3\2\2\2\u0852"+
		"\u085e\7\u0168\2\2\u0853\u0858\5\u0162\u00b2\2\u0854\u0855\7%\2\2\u0855"+
		"\u0857\5\u0162\u00b2\2\u0856\u0854\3\2\2\2\u0857\u085a\3\2\2\2\u0858\u0856"+
		"\3\2\2\2\u0858\u0859\3\2\2\2\u0859\u085f\3\2\2\2\u085a\u0858\3\2\2\2\u085b"+
		"\u085c\7\u030c\2\2\u085c\u085d\7\20\2\2\u085d\u085f\7\u030c\2\2\u085e"+
		"\u0853\3\2\2\2\u085e\u085b\3\2\2\2\u085f\u0161\3\2\2\2\u0860\u0862\7\u030c"+
		"\2\2\u0861\u0863\t&\2\2\u0862\u0861\3\2\2\2\u0862\u0863\3\2\2\2\u0863"+
		"\u0865\3\2\2\2\u0864\u0866\7\u024b\2\2\u0865\u0864\3\2\2\2\u0865\u0866"+
		"\3\2\2\2\u0866\u0163\3\2\2\2\u0867\u086a\5\u0168\u00b5\2\u0868\u086a\5"+
		"\u0166\u00b4\2\u0869\u0867\3\2\2\2\u0869\u0868\3\2\2\2\u086a\u0165\3\2"+
		"\2\2\u086b\u086c\t\'\2\2\u086c\u0167\3\2\2\2\u086d\u086e\5\u016a\u00b6"+
		"\2\u086e\u0878\7\37\2\2\u086f\u0874\5\u0120\u0091\2\u0870\u0871\7%\2\2"+
		"\u0871\u0873\5\u0120\u0091\2\u0872\u0870\3\2\2\2\u0873\u0876\3\2\2\2\u0874"+
		"\u0872\3\2\2\2\u0874\u0875\3\2\2\2\u0875\u0879\3\2\2\2\u0876\u0874\3\2"+
		"\2\2\u0877\u0879\7\21\2\2\u0878\u086f\3\2\2\2\u0878\u0877\3\2\2\2\u0878"+
		"\u0879\3\2\2\2\u0879\u087a\3\2\2\2\u087a\u087b\7 \2\2\u087b\u0169\3\2"+
		"\2\2\u087c\u0897\7\u0130\2\2\u087d\u0897\7\u0171\2\2\u087e\u0897\7\u0172"+
		"\2\2\u087f\u0897\7\u0232\2\2\u0880\u0897\7\u0148\2\2\u0881\u0897\7\u01b1"+
		"\2\2\u0882\u0897\7\u00ae\2\2\u0883\u0897\7\u0166\2\2\u0884\u0897\7\u024d"+
		"\2\2\u0885\u0897\7\u00b1\2\2\u0886\u0897\7\u00b3\2\2\u0887\u0897\7\u0115"+
		"\2\2\u0888\u0897\7\u0117\2\2\u0889\u0897\7\u016d\2\2\u088a\u0897\7\u01b6"+
		"\2\2\u088b\u0897\7\u01b7\2\2\u088c\u0897\7\u01b8\2\2\u088d\u0897\7\u01ff"+
		"\2\2\u088e\u0897\7\u0200\2\2\u088f\u0897\7\u02bc\2\2\u0890\u0897\7\u02bd"+
		"\2\2\u0891\u0897\7\u02be\2\2\u0892\u0897\7\u02bf\2\2\u0893\u0897\7\u00b1"+
		"\2\2\u0894\u0897\7\u00a9\2\2\u0895\u0897\5\u00ceh\2\u0896\u087c\3\2\2"+
		"\2\u0896\u087d\3\2\2\2\u0896\u087e\3\2\2\2\u0896\u087f\3\2\2\2\u0896\u0880"+
		"\3\2\2\2\u0896\u0881\3\2\2\2\u0896\u0882\3\2\2\2\u0896\u0883\3\2\2\2\u0896"+
		"\u0884\3\2\2\2\u0896\u0885\3\2\2\2\u0896\u0886\3\2\2\2\u0896\u0887\3\2"+
		"\2\2\u0896\u0888\3\2\2\2\u0896\u0889\3\2\2\2\u0896\u088a\3\2\2\2\u0896"+
		"\u088b\3\2\2\2\u0896\u088c\3\2\2\2\u0896\u088d\3\2\2\2\u0896\u088e\3\2"+
		"\2\2\u0896\u088f\3\2\2\2\u0896\u0890\3\2\2\2\u0896\u0891\3\2\2\2\u0896"+
		"\u0892\3\2\2\2\u0896\u0893\3\2\2\2\u0896\u0894\3\2\2\2\u0896\u0895\3\2"+
		"\2\2\u0897\u016b\3\2\2\2\u0898\u0899\7\u019a\2\2\u0899\u089a\5\u00f8}"+
		"\2\u089a\u089b\7L\2\2\u089b\u089c\7\37\2\2\u089c\u089e\5\u0120\u0091\2"+
		"\u089d\u089f\5\u016e\u00b8\2\u089e\u089d\3\2\2\2\u089e\u089f\3\2\2\2\u089f"+
		"\u08a0\3\2\2\2\u08a0\u08a1\7 \2\2\u08a1\u016d\3\2\2\2\u08a2\u08a3\7\u0134"+
		"\2\2\u08a3\u08a4\7\u01be\2\2\u08a4\u08a5\7\u015e\2\2\u08a5\u08b4\7\u01b2"+
		"\2\2\u08a6\u08a7\7\u0134\2\2\u08a7\u08a8\7\u01be\2\2\u08a8\u08a9\7\u015e"+
		"\2\2\u08a9\u08aa\7\u01b2\2\2\u08aa\u08ab\7\u02fa\2\2\u08ab\u08ac\7\u0213"+
		"\2\2\u08ac\u08b4\7\u00f2\2\2\u08ad\u08ae\7\u0134\2\2\u08ae\u08af\7k\2"+
		"\2\u08af\u08b4\7\u01b2\2\2\u08b0\u08b1\7\u02fa\2\2\u08b1\u08b2\7\u0213"+
		"\2\2\u08b2\u08b4\7\u00f2\2\2\u08b3\u08a2\3\2\2\2\u08b3\u08a6\3\2\2\2\u08b3"+
		"\u08ad\3\2\2\2\u08b3\u08b0\3\2\2\2\u08b4\u016f\3\2\2\2\u08b5\u08b7\7u"+
		"\2\2\u08b6\u08b8\5\u012e\u0098\2\u08b7\u08b6\3\2\2\2\u08b7\u08b8\3\2\2"+
		"\2\u08b8\u08ba\3\2\2\2\u08b9\u08bb\5\u0176\u00bc\2\u08ba\u08b9\3\2\2\2"+
		"\u08bb\u08bc\3\2\2\2\u08bc\u08ba\3\2\2\2\u08bc\u08bd\3\2\2\2\u08bd\u08bf"+
		"\3\2\2\2\u08be\u08c0\5\u0178\u00bd\2\u08bf\u08be\3\2\2\2\u08bf\u08c0\3"+
		"\2\2\2\u08c0\u08c1\3\2\2\2\u08c1\u08c2\7\u00de\2\2\u08c2\u0171\3\2\2\2"+
		"\u08c3\u08c4\5\u0120\u0091\2\u08c4\u0173\3\2\2\2\u08c5\u08c6\7\u030c\2"+
		"\2\u08c6\u0175\3\2\2\2\u08c7\u08c8\7\u02f6\2\2\u08c8\u08c9\5\u0120\u0091"+
		"\2\u08c9\u08ca\7\u02b9\2\2\u08ca\u08cb\5\u0120\u0091\2\u08cb\u0177\3\2"+
		"\2\2\u08cc\u08cd\7\u00d8\2\2\u08cd\u08ce\5\u0120\u0091\2\u08ce";
	private static final String _serializedATNSegment1 =
		"\u0179\3\2\2\2\u08cf\u08d0\7\u0148\2\2\u08d0\u08d1\5\u017c\u00bf\2\u08d1"+
		"\u017b\3\2\2\2\u08d2\u08d3\5\u0120\u0091\2\u08d3\u08d4\5\u017e\u00c0\2"+
		"\u08d4\u017d\3\2\2\2\u08d5\u08d6\t(\2\2\u08d6\u017f\3\2\2\2\u08d7\u08d8"+
		"\7\3\2\2\u08d8\u0181\3\2\2\2\u08d9\u08da\7\u01e5\2\2\u08da\u08db\7o\2"+
		"\2\u08db\u08e0\5\u0184\u00c3\2\u08dc\u08dd\7%\2\2\u08dd\u08df\5\u0184"+
		"\u00c3\2\u08de\u08dc\3\2\2\2\u08df\u08e2\3\2\2\2\u08e0\u08de\3\2\2\2\u08e0"+
		"\u08e1\3\2\2\2\u08e1\u0183\3\2\2\2\u08e2\u08e0\3\2\2\2\u08e3\u08e7\5\u00e0"+
		"q\2\u08e4\u08e7\5\u00be`\2\u08e5\u08e7\5\u0120\u0091\2\u08e6\u08e3\3\2"+
		"\2\2\u08e6\u08e4\3\2\2\2\u08e6\u08e5\3\2\2\2\u08e7\u08e9\3\2\2\2\u08e8"+
		"\u08ea\t&\2\2\u08e9\u08e8\3\2\2\2\u08e9\u08ea\3\2\2\2\u08ea\u0185\3\2"+
		"\2\2\u08eb\u08ed\5\u0188\u00c5\2\u08ec\u08ee\5\u018a\u00c6\2\u08ed\u08ec"+
		"\3\2\2\2\u08ed\u08ee\3\2\2\2\u08ee\u08f0\3\2\2\2\u08ef\u08f1\5\u018e\u00c8"+
		"\2\u08f0\u08ef\3\2\2\2\u08f0\u08f1\3\2\2\2\u08f1\u08f3\3\2\2\2\u08f2\u08f4"+
		"\5\u0190\u00c9\2\u08f3\u08f2\3\2\2\2\u08f3\u08f4\3\2\2\2\u08f4\u08f6\3"+
		"\2\2\2\u08f5\u08f7\t)\2\2\u08f6\u08f5\3\2\2\2\u08f6\u08f7\3\2\2\2\u08f7"+
		"\u08f9\3\2\2\2\u08f8\u08fa\7\u0306\2\2\u08f9\u08f8\3\2\2\2\u08f9\u08fa"+
		"\3\2\2\2\u08fa\u0904\3\2\2\2\u08fb\u08fc\5\u0188\u00c5\2\u08fc\u08fe\5"+
		"\u018c\u00c7\2\u08fd\u08ff\5\u018e\u00c8\2\u08fe\u08fd\3\2\2\2\u08fe\u08ff"+
		"\3\2\2\2\u08ff\u0901\3\2\2\2\u0900\u0902\5\u0190\u00c9\2\u0901\u0900\3"+
		"\2\2\2\u0901\u0902\3\2\2\2\u0902\u0904\3\2\2\2\u0903\u08eb\3\2\2\2\u0903"+
		"\u08fb\3\2\2\2\u0904\u0187\3\2\2\2\u0905\u0942\7\u0147\2\2\u0906\u0942"+
		"\7\u0141\2\2\u0907\u0942\7\u0277\2\2\u0908\u0942\7\u02c1\2\2\u0909\u0942"+
		"\7\u01a4\2\2\u090a\u0942\7d\2\2\u090b\u0942\7\u00ba\2\2\u090c\u0942\7"+
		"\u01d3\2\2\u090d\u0942\7\u0104\2\2\u090e\u0942\7\u00d1\2\2\u090f\u0942"+
		"\7g\2\2\u0910\u0942\7j\2\2\u0911\u0942\7k\2\2\u0912\u0942\7\u00b9\2\2"+
		"\u0913\u0942\7\u00b1\2\2\u0914\u0942\7\u00b2\2\2\u0915\u0942\7\u02bd\2"+
		"\2\u0916\u0942\7\u02bc\2\2\u0917\u0942\7\u0304\2\2\u0918\u0942\7{\2\2"+
		"\u0919\u0942\7\u02ea\2\2\u091a\u0942\7e\2\2\u091b\u0942\7\u02e9\2\2\u091c"+
		"\u0942\7\u02c0\2\2\u091d\u0942\7\u02c2\2\2\u091e\u0942\7h\2\2\u091f\u0942"+
		"\7\u02b7\2\2\u0920\u0942\7\u01a3\2\2\u0921\u0942\7\u01a5\2\2\u0922\u0942"+
		"\7\u0179\2\2\u0923\u0942\7\u017a\2\2\u0924\u0942\7\u00e4\2\2\u0925\u0942"+
		"\7\u026e\2\2\u0926\u0942\7\u0116\2\2\u0927\u0942\7\u01ff\2\2\u0928\u0942"+
		"\7\u016d\2\2\u0929\u0942\7\u0200\2\2\u092a\u0942\7\u01b7\2\2\u092b\u0942"+
		"\7\u01b6\2\2\u092c\u0942\7\u01b8\2\2\u092d\u0942\7\u0117\2\2\u092e\u0942"+
		"\7\u0156\2\2\u092f\u0942\7\u02d9\2\2\u0930\u0942\7\u0273\2\2\u0931\u0932"+
		"\7|\2\2\u0932\u0942\7\u02ed\2\2\u0933\u0942\7\u0103\2\2\u0934\u0942\7"+
		"\u0105\2\2\u0935\u0942\7\u0106\2\2\u0936\u0942\7\u0142\2\2\u0937\u0942"+
		"\7\u0143\2\2\u0938\u0942\7\u0144\2\2\u0939\u0942\7\u0145\2\2\u093a\u0942"+
		"\7\u0146\2\2\u093b\u093c\7\u0178\2\2\u093c\u0942\7\u02e9\2\2\u093d\u093e"+
		"\7\u0178\2\2\u093e\u0942\7\u02ea\2\2\u093f\u0942\7\u0178\2\2\u0940\u0942"+
		"\7\u01ab\2\2\u0941\u0905\3\2\2\2\u0941\u0906\3\2\2\2\u0941\u0907\3\2\2"+
		"\2\u0941\u0908\3\2\2\2\u0941\u0909\3\2\2\2\u0941\u090a\3\2\2\2\u0941\u090b"+
		"\3\2\2\2\u0941\u090c\3\2\2\2\u0941\u090d\3\2\2\2\u0941\u090e\3\2\2\2\u0941"+
		"\u090f\3\2\2\2\u0941\u0910\3\2\2\2\u0941\u0911\3\2\2\2\u0941\u0912\3\2"+
		"\2\2\u0941\u0913\3\2\2\2\u0941\u0914\3\2\2\2\u0941\u0915\3\2\2\2\u0941"+
		"\u0916\3\2\2\2\u0941\u0917\3\2\2\2\u0941\u0918\3\2\2\2\u0941\u0919\3\2"+
		"\2\2\u0941\u091a\3\2\2\2\u0941\u091b\3\2\2\2\u0941\u091c\3\2\2\2\u0941"+
		"\u091d\3\2\2\2\u0941\u091e\3\2\2\2\u0941\u091f\3\2\2\2\u0941\u0920\3\2"+
		"\2\2\u0941\u0921\3\2\2\2\u0941\u0922\3\2\2\2\u0941\u0923\3\2\2\2\u0941"+
		"\u0924\3\2\2\2\u0941\u0925\3\2\2\2\u0941\u0926\3\2\2\2\u0941\u0927\3\2"+
		"\2\2\u0941\u0928\3\2\2\2\u0941\u0929\3\2\2\2\u0941\u092a\3\2\2\2\u0941"+
		"\u092b\3\2\2\2\u0941\u092c\3\2\2\2\u0941\u092d\3\2\2\2\u0941\u092e\3\2"+
		"\2\2\u0941\u092f\3\2\2\2\u0941\u0930\3\2\2\2\u0941\u0931\3\2\2\2\u0941"+
		"\u0933\3\2\2\2\u0941\u0934\3\2\2\2\u0941\u0935\3\2\2\2\u0941\u0936\3\2"+
		"\2\2\u0941\u0937\3\2\2\2\u0941\u0938\3\2\2\2\u0941\u0939\3\2\2\2\u0941"+
		"\u093a\3\2\2\2\u0941\u093b\3\2\2\2\u0941\u093d\3\2\2\2\u0941\u093f\3\2"+
		"\2\2\u0941\u0940\3\2\2\2\u0942\u0189\3\2\2\2\u0943\u0944\7\37\2\2\u0944"+
		"\u0947\7\u030c\2\2\u0945\u0946\7%\2\2\u0946\u0948\7\u030c\2\2\u0947\u0945"+
		"\3\2\2\2\u0947\u0948\3\2\2\2\u0948\u0949\3\2\2\2\u0949\u094a\7 \2\2\u094a"+
		"\u018b\3\2\2\2\u094b\u094c\7\37\2\2\u094c\u0951\7\u030b\2\2\u094d\u094e"+
		"\7%\2\2\u094e\u0950\7\u030b\2\2\u094f\u094d\3\2\2\2\u0950\u0953\3\2\2"+
		"\2\u0951\u094f\3\2\2\2\u0951\u0952\3\2\2\2\u0952\u0954\3\2\2\2\u0953\u0951"+
		"\3\2\2\2\u0954\u0955\7 \2\2\u0955\u018d\3\2\2\2\u0956\u095c\7}\2\2\u0957"+
		"\u0958\7{\2\2\u0958\u095c\7\u026e\2\2\u0959\u095a\7|\2\2\u095a\u095c\7"+
		"\u026e\2\2\u095b\u0956\3\2\2\2\u095b\u0957\3\2\2\2\u095b\u0959\3\2\2\2"+
		"\u095c\u095e\3\2\2\2\u095d\u095f\7\30\2\2\u095e\u095d\3\2\2\2\u095e\u095f"+
		"\3\2\2\2\u095f\u0960\3\2\2\2\u0960\u0961\5\u0192\u00ca\2\u0961\u018f\3"+
		"\2\2\2\u0962\u0964\7\u0087\2\2\u0963\u0965\7\30\2\2\u0964\u0963\3\2\2"+
		"\2\u0964\u0965\3\2\2\2\u0965\u0968\3\2\2\2\u0966\u0969\7\u030b\2\2\u0967"+
		"\u0969\5\u0192\u00ca\2\u0968\u0966\3\2\2\2\u0968\u0967\3\2\2\2\u0969\u0191"+
		"\3\2\2\2\u096a\u096d\5\u00ceh\2\u096b\u096c\7\24\2\2\u096c\u096e\5\u00ce"+
		"h\2\u096d\u096b\3\2\2\2\u096d\u096e\3\2\2\2\u096e\u0193\3\2\2\2\u096f"+
		"\u0974\5\u0192\u00ca\2\u0970\u0971\7%\2\2\u0971\u0973\5\u0192\u00ca\2"+
		"\u0972\u0970\3\2\2\2\u0973\u0976\3\2\2\2\u0974\u0972\3\2\2\2\u0974\u0975"+
		"\3\2\2\2\u0975\u0195\3\2\2\2\u0976\u0974\3\2\2\2\u0977\u0980\7\37\2\2"+
		"\u0978\u097d\5\u00ceh\2\u0979\u097a\7%\2\2\u097a\u097c\5\u00ceh\2\u097b"+
		"\u0979\3\2\2\2\u097c\u097f\3\2\2\2\u097d\u097b\3\2\2\2\u097d\u097e\3\2"+
		"\2\2\u097e\u0981\3\2\2\2\u097f\u097d\3\2\2\2\u0980\u0978\3\2\2\2\u0980"+
		"\u0981\3\2\2\2\u0981\u0982\3\2\2\2\u0982\u0983\7 \2\2\u0983\u0197\3\2"+
		"\2\2\u0984\u0985\7\u0130\2\2\u0985\u0986\7\u01ca\2\2\u0986\u0987\7\u00f0"+
		"\2\2\u0987\u0199\3\2\2\2\u0988\u0989\7\u0130\2\2\u0989\u098a\7\u00f0\2"+
		"\2\u098a\u019b\3\2\2\2\u098b\u098c\7\u030b\2\2\u098c\u019d\3\2\2\2\u098d"+
		"\u098e\7\u030c\2\2\u098e\u019f\3\2\2\2\u098f\u0990\5\u00ceh\2\u0990\u01a1"+
		"\3\2\2\2\u0991\u0992\5\u00ceh\2\u0992\u01a3\3\2\2\2\u0993\u0994\5\u00ce"+
		"h\2\u0994\u01a5\3\2\2\2\u0995\u0996\7\u013d\2\2\u0996\u0998\5\u01a8\u00d5"+
		"\2\u0997\u0999\7\u0149\2\2\u0998\u0997\3\2\2\2\u0998\u0999\3\2\2\2\u0999"+
		"\u099a\3\2\2\2\u099a\u099c\5\u00dep\2\u099b\u099d\5\u0210\u0109\2\u099c"+
		"\u099b\3\2\2\2\u099c\u099d\3\2\2\2\u099d\u09a1\3\2\2\2\u099e\u09a2\5\u01aa"+
		"\u00d6\2\u099f\u09a2\5\u01c2\u00e2\2\u09a0\u09a2\5\u01ac\u00d7\2\u09a1"+
		"\u099e\3\2\2\2\u09a1\u099f\3\2\2\2\u09a1\u09a0\3\2\2\2\u09a2\u09a4\3\2"+
		"\2\2\u09a3\u09a5\5\u01ae\u00d8\2\u09a4\u09a3\3\2\2\2\u09a4\u09a5\3\2\2"+
		"\2\u09a5\u01a7\3\2\2\2\u09a6\u09a8\t*\2\2\u09a7\u09a6\3\2\2\2\u09a7\u09a8"+
		"\3\2\2\2\u09a8\u09aa\3\2\2\2\u09a9\u09ab\7\u0131\2\2\u09aa\u09a9\3\2\2"+
		"\2\u09aa\u09ab\3\2\2\2\u09ab\u01a9\3\2\2\2\u09ac\u09ae\5\u00f8}\2\u09ad"+
		"\u09ac\3\2\2\2\u09ad\u09ae\3\2\2\2\u09ae\u09af\3\2\2\2\u09af\u09b9\t+"+
		"\2\2\u09b0\u09b5\5\u01c4\u00e3\2\u09b1\u09b2\7%\2\2\u09b2\u09b4\5\u01c4"+
		"\u00e3\2\u09b3\u09b1\3\2\2\2\u09b4\u09b7\3\2\2\2\u09b5\u09b3\3\2\2\2\u09b5"+
		"\u09b6\3\2\2\2\u09b6\u09ba\3\2\2\2\u09b7\u09b5\3\2\2\2\u09b8\u09ba\5\u01f0"+
		"\u00f9\2\u09b9\u09b0\3\2\2\2\u09b9\u09b8\3\2\2\2\u09ba\u09bc\3\2\2\2\u09bb"+
		"\u09bd\5\u01b0\u00d9\2\u09bc\u09bb\3\2\2\2\u09bc\u09bd\3\2\2\2\u09bd\u01ab"+
		"\3\2\2\2\u09be\u09c0\5\u01b0\u00d9\2\u09bf\u09be\3\2\2\2\u09bf\u09c0\3"+
		"\2\2\2\u09c0\u09c2\3\2\2\2\u09c1\u09c3\5\u00f8}\2\u09c2\u09c1\3\2\2\2"+
		"\u09c2\u09c3\3\2\2\2\u09c3\u09c4\3\2\2\2\u09c4\u09c5\5\u01d4\u00eb\2\u09c5"+
		"\u01ad\3\2\2\2\u09c6\u09c7\7\u01da\2\2\u09c7\u09c8\7\u00d5\2\2\u09c8\u09c9"+
		"\7\u0159\2\2\u09c9\u09ca\7\u02db\2\2\u09ca\u09cf\5\u01c0\u00e1\2\u09cb"+
		"\u09cc\7%\2\2\u09cc\u09ce\5\u01c0\u00e1\2\u09cd\u09cb\3\2\2\2\u09ce\u09d1"+
		"\3\2\2\2\u09cf\u09cd\3\2\2\2\u09cf\u09d0\3\2\2\2\u09d0\u01af\3\2\2\2\u09d1"+
		"\u09cf\3\2\2\2\u09d2\u09d3\7V\2\2\u09d3\u09d5\5\u00f2z\2\u09d4\u09d6\5"+
		"\u01b2\u00da\2\u09d5\u09d4\3\2\2\2\u09d5\u09d6\3\2\2\2\u09d6\u01b1\3\2"+
		"\2\2\u09d7\u09d8\7\37\2\2\u09d8\u09dd\5\u00f2z\2\u09d9\u09da\7%\2\2\u09da"+
		"\u09dc\5\u00f2z\2\u09db\u09d9\3\2\2\2\u09dc\u09df\3\2\2\2\u09dd\u09db"+
		"\3\2\2\2\u09dd\u09de\3\2\2\2\u09de\u09e0\3\2\2\2\u09df\u09dd\3\2\2\2\u09e0"+
		"\u09e1\7 \2\2\u09e1\u01b3\3\2\2\2\u09e2\u09e4\7\u0232\2\2\u09e3\u09e5"+
		"\5\u01b6\u00dc\2\u09e4\u09e3\3\2\2\2\u09e4\u09e5\3\2\2\2\u09e5\u09e7\3"+
		"\2\2\2\u09e6\u09e8\7\u0149\2\2\u09e7\u09e6\3\2\2\2\u09e7\u09e8\3\2\2\2"+
		"\u09e8\u09e9\3\2\2\2\u09e9\u09eb\5\u00dep\2\u09ea\u09ec\5\u0210\u0109"+
		"\2\u09eb\u09ea\3\2\2\2\u09eb\u09ec\3\2\2\2\u09ec\u09f0\3\2\2\2\u09ed\u09f1"+
		"\5\u01b8\u00dd\2\u09ee\u09f1\5\u01c2\u00e2\2\u09ef\u09f1\5\u01ba\u00de"+
		"\2\u09f0\u09ed\3\2\2\2\u09f0\u09ee\3\2\2\2\u09f0\u09ef\3\2\2\2\u09f1\u01b5"+
		"\3\2\2\2\u09f2\u09f3\t,\2\2\u09f3\u01b7\3\2\2\2\u09f4\u09f6\5\u00f8}\2"+
		"\u09f5\u09f4\3\2\2\2\u09f5\u09f6\3\2\2\2\u09f6\u09f7\3\2\2\2\u09f7\u0a01"+
		"\t+\2\2\u09f8\u09fd\5\u01c4\u00e3\2\u09f9\u09fa\7%\2\2\u09fa\u09fc\5\u01c4"+
		"\u00e3\2\u09fb\u09f9\3\2\2\2\u09fc\u09ff\3\2\2\2\u09fd\u09fb\3\2\2\2\u09fd"+
		"\u09fe\3\2\2\2\u09fe\u0a02\3\2\2\2\u09ff\u09fd\3\2\2\2\u0a00\u0a02\5\u01f0"+
		"\u00f9\2\u0a01\u09f8\3\2\2\2\u0a01\u0a00\3\2\2\2\u0a02\u0a04\3\2\2\2\u0a03"+
		"\u0a05\5\u01b0\u00d9\2\u0a04\u0a03\3\2\2\2\u0a04\u0a05\3\2\2\2\u0a05\u01b9"+
		"\3\2\2\2\u0a06\u0a08\5\u01b0\u00d9\2\u0a07\u0a06\3\2\2\2\u0a07\u0a08\3"+
		"\2\2\2\u0a08\u0a0a\3\2\2\2\u0a09\u0a0b\5\u00f8}\2\u0a0a\u0a09\3\2\2\2"+
		"\u0a0a\u0a0b\3\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c\u0a0d\5\u01d4\u00eb\2\u0a0d"+
		"\u01bb\3\2\2\2\u0a0e\u0a10\5\u01f2\u00fa\2\u0a0f\u0a0e\3\2\2\2\u0a0f\u0a10"+
		"\3\2\2\2\u0a10\u0a11\3\2\2\2\u0a11\u0a12\7\u02db\2\2\u0a12\u0a13\5\u01be"+
		"\u00e0\2\u0a13\u0a14\5\u0208\u0105\2\u0a14\u0a16\5\u01c2\u00e2\2\u0a15"+
		"\u0a17\5\u021a\u010e\2\u0a16\u0a15\3\2\2\2\u0a16\u0a17\3\2\2\2\u0a17\u0a19"+
		"\3\2\2\2\u0a18\u0a1a\5\u0182\u00c2\2\u0a19\u0a18\3\2\2\2\u0a19\u0a1a\3"+
		"\2\2\2\u0a1a\u0a1c\3\2\2\2\u0a1b\u0a1d\5\u0220\u0111\2\u0a1c\u0a1b\3\2"+
		"\2\2\u0a1c\u0a1d\3\2\2\2\u0a1d\u01bd\3\2\2\2\u0a1e\u0a20\7\u017c\2\2\u0a1f"+
		"\u0a1e\3\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20\u0a22\3\2\2\2\u0a21\u0a23\7\u0131"+
		"\2\2\u0a22\u0a21\3\2\2\2\u0a22\u0a23\3\2\2\2\u0a23\u01bf\3\2\2\2\u0a24"+
		"\u0a25\5\u00e0q\2\u0a25\u0a26\7\30\2\2\u0a26\u0a27\5\u01c6\u00e4\2\u0a27"+
		"\u01c1\3\2\2\2\u0a28\u0a2a\5\u01b0\u00d9\2\u0a29\u0a28\3\2\2\2\u0a29\u0a2a"+
		"\3\2\2\2\u0a2a\u0a2b\3\2\2\2\u0a2b\u0a2c\7\u026e\2\2\u0a2c\u0a31\5\u01c0"+
		"\u00e1\2\u0a2d\u0a2e\7%\2\2\u0a2e\u0a30\5\u01c0\u00e1\2\u0a2f\u0a2d\3"+
		"\2\2\2\u0a30\u0a33\3\2\2\2\u0a31\u0a2f\3\2\2\2\u0a31\u0a32\3\2\2\2\u0a32"+
		"\u01c3\3\2\2\2\u0a33\u0a31\3\2\2\2\u0a34\u0a35\7\37\2\2\u0a35\u0a3a\5"+
		"\u01c6\u00e4\2\u0a36\u0a37\7%\2\2\u0a37\u0a39\5\u01c6\u00e4\2\u0a38\u0a36"+
		"\3\2\2\2\u0a39\u0a3c\3\2\2\2\u0a3a\u0a38\3\2\2\2\u0a3a\u0a3b\3\2\2\2\u0a3b"+
		"\u0a3d\3\2\2\2\u0a3c\u0a3a\3\2\2\2\u0a3d\u0a3e\7 \2\2\u0a3e\u0a42\3\2"+
		"\2\2\u0a3f\u0a40\7\37\2\2\u0a40\u0a42\7 \2\2\u0a41\u0a34\3\2\2\2\u0a41"+
		"\u0a3f\3\2\2\2\u0a42\u01c5\3\2\2\2\u0a43\u0a47\5\u0120\u0091\2\u0a44\u0a47"+
		"\7\u00bc\2\2\u0a45\u0a47\5\u01c8\u00e5\2\u0a46\u0a43\3\2\2\2\u0a46\u0a44"+
		"\3\2\2\2\u0a46\u0a45\3\2\2\2\u0a47\u01c7\3\2\2\2\u0a48\u0a49\7B\2\2\u0a49"+
		"\u0a4a\7\u030b\2\2\u0a4a\u01c9\3\2\2\2\u0a4b\u0a4c\7\u00c2\2\2\u0a4c\u0a4f"+
		"\5\u01cc\u00e7\2\u0a4d\u0a50\5\u01ce\u00e8\2\u0a4e\u0a50\5\u01d0\u00e9"+
		"\2\u0a4f\u0a4d\3\2\2\2\u0a4f\u0a4e\3\2\2\2\u0a50\u0a52\3\2\2\2\u0a51\u0a53"+
		"\5\u021a\u010e\2\u0a52\u0a51\3\2\2\2\u0a52\u0a53\3\2\2\2\u0a53\u0a55\3"+
		"\2\2\2\u0a54\u0a56\5\u0182\u00c2\2\u0a55\u0a54\3\2\2\2\u0a55\u0a56\3\2"+
		"\2\2\u0a56\u0a58\3\2\2\2\u0a57\u0a59\5\u0220\u0111\2\u0a58\u0a57\3\2\2"+
		"\2\u0a58\u0a59\3\2\2\2\u0a59\u01cb\3\2\2\2\u0a5a\u0a5c\7\u017c\2\2\u0a5b"+
		"\u0a5a\3\2\2\2\u0a5b\u0a5c\3\2\2\2\u0a5c\u0a5e\3\2\2\2\u0a5d\u0a5f\7\u0214"+
		"\2\2\u0a5e\u0a5d\3\2\2\2\u0a5e\u0a5f\3\2\2\2\u0a5f\u0a61\3\2\2\2\u0a60"+
		"\u0a62\7\u0131\2\2\u0a61\u0a60\3\2\2\2\u0a61\u0a62\3\2\2\2\u0a62\u01cd"+
		"\3\2\2\2\u0a63\u0a64\7\u010f\2\2\u0a64\u0a69\5\u00dep\2\u0a65\u0a67\7"+
		"V\2\2\u0a66\u0a65\3\2\2\2\u0a66\u0a67\3\2\2\2\u0a67\u0a68\3\2\2\2\u0a68"+
		"\u0a6a\5\u00f2z\2\u0a69\u0a66\3\2\2\2\u0a69\u0a6a\3\2\2\2\u0a6a\u0a6c"+
		"\3\2\2\2\u0a6b\u0a6d\5\u0210\u0109\2\u0a6c\u0a6b\3\2\2\2\u0a6c\u0a6d\3"+
		"\2\2\2\u0a6d\u01cf\3\2\2\2\u0a6e\u0a6f\5\u01d2\u00ea\2\u0a6f\u0a70\7\u010f"+
		"\2\2\u0a70\u0a71\5\u0208\u0105\2\u0a71\u0a78\3\2\2\2\u0a72\u0a73\7\u010f"+
		"\2\2\u0a73\u0a74\5\u01d2\u00ea\2\u0a74\u0a75\7\u02e2\2\2\u0a75\u0a76\5"+
		"\u0208\u0105\2\u0a76\u0a78\3\2\2\2\u0a77\u0a6e\3\2\2\2\u0a77\u0a72\3\2"+
		"\2\2\u0a78\u01d1\3\2\2\2\u0a79\u0a7b\5\u00dep\2\u0a7a\u0a7c\7\25\2\2\u0a7b"+
		"\u0a7a\3\2\2\2\u0a7b\u0a7c\3\2\2\2\u0a7c\u0a84\3\2\2\2\u0a7d\u0a7e\7%"+
		"\2\2\u0a7e\u0a80\5\u00dep\2\u0a7f\u0a81\7\25\2\2\u0a80\u0a7f\3\2\2\2\u0a80"+
		"\u0a81\3\2\2\2\u0a81\u0a83\3\2\2\2\u0a82\u0a7d\3\2\2\2\u0a83\u0a86\3\2"+
		"\2\2\u0a84\u0a82\3\2\2\2\u0a84\u0a85\3\2\2\2\u0a85\u01d3\3\2\2\2\u0a86"+
		"\u0a84\3\2\2\2\u0a87\u0a89\5\u01f2\u00fa\2\u0a88\u0a87\3\2\2\2\u0a88\u0a89"+
		"\3\2\2\2\u0a89\u0a8a\3\2\2\2\u0a8a\u0a8b\5\u01f6\u00fc\2\u0a8b\u01d5\3"+
		"\2\2\2\u0a8c\u0a8d\7r\2\2\u0a8d\u0a9a\5\u00ceh\2\u0a8e\u0a97\7\37\2\2"+
		"\u0a8f\u0a94\5\u0120\u0091\2\u0a90\u0a91\7%\2\2\u0a91\u0a93\5\u0120\u0091"+
		"\2\u0a92\u0a90\3\2\2\2\u0a93\u0a96\3\2\2\2\u0a94\u0a92\3\2\2\2\u0a94\u0a95"+
		"\3\2\2\2\u0a95\u0a98\3\2\2\2\u0a96\u0a94\3\2\2\2\u0a97\u0a8f\3\2\2\2\u0a97"+
		"\u0a98\3\2\2\2\u0a98\u0a99\3\2\2\2\u0a99\u0a9b\7 \2\2\u0a9a\u0a8e\3\2"+
		"\2\2\u0a9a\u0a9b\3\2\2\2\u0a9b\u01d7\3\2\2\2\u0a9c\u0a9d\7\u00d0\2\2\u0a9d"+
		"\u0aa2\5\u0120\u0091\2\u0a9e\u0a9f\7%\2\2\u0a9f\u0aa1\5\u0120\u0091\2"+
		"\u0aa0\u0a9e\3\2\2\2\u0aa1\u0aa4\3\2\2\2\u0aa2\u0aa0\3\2\2\2\u0aa2\u0aa3"+
		"\3\2\2\2\u0aa3\u01d9\3\2\2\2\u0aa4\u0aa2\3\2\2\2\u0aa5\u0aaa\5\u01dc\u00ef"+
		"\2\u0aa6\u0aaa\5\u01de\u00f0\2\u0aa7\u0aaa\5\u01e0\u00f1\2\u0aa8\u0aaa"+
		"\5\u01e2\u00f2\2\u0aa9\u0aa5\3\2\2\2\u0aa9\u0aa6\3\2\2\2\u0aa9\u0aa7\3"+
		"\2\2\2\u0aa9\u0aa8\3\2\2\2\u0aaa\u01db\3\2\2\2\u0aab\u0aac\7\u0122\2\2"+
		"\u0aac\u0aad\5\u00dep\2\u0aad\u0ab2\7\u01dd\2\2\u0aae\u0ab0\7V\2\2\u0aaf"+
		"\u0aae\3\2\2\2\u0aaf\u0ab0\3\2\2\2\u0ab0\u0ab1\3\2\2\2\u0ab1\u0ab3\5\u00ce"+
		"h\2\u0ab2\u0aaf\3\2\2\2\u0ab2\u0ab3\3\2\2\2\u0ab3\u01dd\3\2\2\2\u0ab4"+
		"\u0ab5\7\u0122\2\2\u0ab5\u0ab6\5\u00dep\2\u0ab6\u0ab7\7\u0218\2\2\u0ab7"+
		"\u0abe\5\u00e2r\2\u0ab8\u0ab9\5\u0128\u0095\2\u0ab9\u0aba\7\37\2\2\u0aba"+
		"\u0abb\5\u00ceh\2\u0abb\u0abc\7 \2\2\u0abc\u0abf\3\2\2\2\u0abd\u0abf\t"+
		"-\2\2\u0abe\u0ab8\3\2\2\2\u0abe\u0abd\3\2\2\2\u0abf\u0ac1\3\2\2\2\u0ac0"+
		"\u0ac2\5\u021a\u010e\2\u0ac1\u0ac0\3\2\2\2\u0ac1\u0ac2\3\2\2\2\u0ac2\u0ac4"+
		"\3\2\2\2\u0ac3\u0ac5\5\u0220\u0111\2\u0ac4\u0ac3\3\2\2\2\u0ac4\u0ac5\3"+
		"\2\2\2\u0ac5\u01df\3\2\2\2\u0ac6\u0ac7\7\u0122\2\2\u0ac7\u0ac8\5\u00de"+
		"p\2\u0ac8\u0ac9\7\u0218\2\2\u0ac9\u0acb\t.\2\2\u0aca\u0acc\5\u021a\u010e"+
		"\2\u0acb\u0aca\3\2\2\2\u0acb\u0acc\3\2\2\2\u0acc\u0ace\3\2\2\2\u0acd\u0acf"+
		"\5\u0220\u0111\2\u0ace\u0acd\3\2\2\2\u0ace\u0acf\3\2\2\2\u0acf\u01e1\3"+
		"\2\2\2\u0ad0\u0ad1\7\u0122\2\2\u0ad1\u0ad2\5\u00dep\2\u0ad2\u0ad3\7\u0084"+
		"\2\2\u0ad3\u01e3\3\2\2\2\u0ad4\u0ad5\7\u0133\2\2\u0ad5\u0ad6\7\u02af\2"+
		"\2\u0ad6\u0ad7\7\u010f\2\2\u0ad7\u0ada\7\u030b\2\2\u0ad8\u0ad9\7%\2\2"+
		"\u0ad9\u0adb\7\u030b\2\2\u0ada\u0ad8\3\2\2\2\u0ada\u0adb\3\2\2\2\u0adb"+
		"\u01e5\3\2\2\2\u0adc\u0add\7\u016f\2\2\u0add\u0adf\7\u00ad\2\2\u0ade\u0ae0"+
		"\t/\2\2\u0adf\u0ade\3\2\2\2\u0adf\u0ae0\3\2\2\2\u0ae0\u0ae2\3\2\2\2\u0ae1"+
		"\u0ae3\7\u0170\2\2\u0ae2\u0ae1\3\2\2\2\u0ae2\u0ae3\3\2\2\2\u0ae3\u0ae4"+
		"\3\2\2\2\u0ae4\u0ae5\7\u0138\2\2\u0ae5\u0ae7\7\u030b\2\2\u0ae6\u0ae8\t"+
		"\60\2\2\u0ae7\u0ae6\3\2\2\2\u0ae7\u0ae8\3\2\2\2\u0ae8\u0ae9\3\2\2\2\u0ae9"+
		"\u0aea\7\u0149\2\2\u0aea\u0aeb\7\u02af\2\2\u0aeb\u0aed\5\u00dep\2\u0aec"+
		"\u0aee\5\u0210\u0109\2\u0aed\u0aec\3\2\2\2\u0aed\u0aee\3\2\2\2\u0aee\u0af2"+
		"\3\2\2\2\u0aef\u0af0\7|\2\2\u0af0\u0af1\7\u026e\2\2\u0af1\u0af3\5\u00ce"+
		"h\2\u0af2\u0aef\3\2\2\2\u0af2\u0af3\3\2\2\2\u0af3\u0afa\3\2\2\2\u0af4"+
		"\u0af6\t\4\2\2\u0af5\u0af7\5\u022c\u0117\2\u0af6\u0af5\3\2\2\2\u0af7\u0af8"+
		"\3\2\2\2\u0af8\u0af6\3\2\2\2\u0af8\u0af9\3\2\2\2\u0af9\u0afb\3\2\2\2\u0afa"+
		"\u0af4\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb\u0b02\3\2\2\2\u0afc\u0afe\7\u016c"+
		"\2\2\u0afd\u0aff\5\u022a\u0116\2\u0afe\u0afd\3\2\2\2\u0aff\u0b00\3\2\2"+
		"\2\u0b00\u0afe\3\2\2\2\u0b00\u0b01\3\2\2\2\u0b01\u0b03\3\2\2\2\u0b02\u0afc"+
		"\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03\u0b08\3\2\2\2\u0b04\u0b05\7\u0131\2"+
		"\2\u0b05\u0b06\5\u00be`\2\u0b06\u0b07\t\61\2\2\u0b07\u0b09\3\2\2\2\u0b08"+
		"\u0b04\3\2\2\2\u0b08\u0b09\3\2\2\2\u0b09\u0b0b\3\2\2\2\u0b0a\u0b0c\5\u0196"+
		"\u00cc\2\u0b0b\u0b0a\3\2\2\2\u0b0b\u0b0c\3\2\2\2\u0b0c\u0b0e\3\2\2\2\u0b0d"+
		"\u0b0f\5\u01c2\u00e2\2\u0b0e\u0b0d\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u01e7"+
		"\3\2\2\2\u0b10\u0b11\7\u016f\2\2\u0b11\u0b13\7\u0302\2\2\u0b12\u0b14\t"+
		"/\2\2\u0b13\u0b12\3\2\2\2\u0b13\u0b14\3\2\2\2\u0b14\u0b16\3\2\2\2\u0b15"+
		"\u0b17\7\u0170\2\2\u0b16\u0b15\3\2\2\2\u0b16\u0b17\3\2\2\2\u0b17\u0b18"+
		"\3\2\2\2\u0b18\u0b19\7\u0138\2\2\u0b19\u0b1b\7\u030b\2\2\u0b1a\u0b1c\t"+
		"\60\2\2\u0b1b\u0b1a\3\2\2\2\u0b1b\u0b1c\3\2\2\2\u0b1c\u0b1d\3\2\2\2\u0b1d"+
		"\u0b1e\7\u0149\2\2\u0b1e\u0b1f\7\u02af\2\2\u0b1f\u0b23\5\u00dep\2\u0b20"+
		"\u0b21\7|\2\2\u0b21\u0b22\7\u026e\2\2\u0b22\u0b24\5\u00ceh\2\u0b23\u0b20"+
		"\3\2\2\2\u0b23\u0b24\3\2\2\2\u0b24\u0b2b\3\2\2\2\u0b25\u0b26\7\u0255\2"+
		"\2\u0b26\u0b27\7\u012f\2\2\u0b27\u0b28\7o\2\2\u0b28\u0b29\7\34\2\2\u0b29"+
		"\u0b2a\7\u030b\2\2\u0b2a\u0b2c\7\32\2\2\u0b2b\u0b25\3\2\2\2\u0b2b\u0b2c"+
		"\3\2\2\2\u0b2c\u0b31\3\2\2\2\u0b2d\u0b2e\7\u0131\2\2\u0b2e\u0b2f\5\u00be"+
		"`\2\u0b2f\u0b30\t\61\2\2\u0b30\u0b32\3\2\2\2\u0b31\u0b2d\3\2\2\2\u0b31"+
		"\u0b32\3\2\2\2\u0b32\u0b34\3\2\2\2\u0b33\u0b35\5\u0196\u00cc\2\u0b34\u0b33"+
		"\3\2\2\2\u0b34\u0b35\3\2\2\2\u0b35\u0b37\3\2\2\2\u0b36\u0b38\5\u01c2\u00e2"+
		"\2\u0b37\u0b36\3\2\2\2\u0b37\u0b38\3\2\2\2\u0b38\u01e9\3\2\2\2\u0b39\u0b3a"+
		"\7\u02af\2\2\u0b3a\u0b3e\5\u00dep\2\u0b3b\u0b3c\7\u01e5\2\2\u0b3c\u0b3d"+
		"\7o\2\2\u0b3d\u0b3f\5\u00e0q\2\u0b3e\u0b3b\3\2\2\2\u0b3e\u0b3f\3\2\2\2"+
		"\u0b3f\u0b46\3\2\2\2\u0b40\u0b41\7\u016a\2\2\u0b41\u0b44\7\u030c\2\2\u0b42"+
		"\u0b43\7\u01d7\2\2\u0b43\u0b45\7\u030c\2\2\u0b44\u0b42\3\2\2\2\u0b44\u0b45"+
		"\3\2\2\2\u0b45\u0b47\3\2\2\2\u0b46\u0b40\3\2\2\2\u0b46\u0b47\3\2\2\2\u0b47"+
		"\u01eb\3\2\2\2\u0b48\u0b49\7\u02e8\2\2\u0b49\u0b4d\5\u01f0\u00f9\2\u0b4a"+
		"\u0b4b\7\u01e5\2\2\u0b4b\u0b4c\7o\2\2\u0b4c\u0b4e\5\u01ee\u00f8\2\u0b4d"+
		"\u0b4a\3\2\2\2\u0b4d\u0b4e\3\2\2\2\u0b4e\u0b52\3\2\2\2\u0b4f\u0b50\7\u016a"+
		"\2\2\u0b50\u0b51\7o\2\2\u0b51\u0b53\7\u030c\2\2\u0b52\u0b4f\3\2\2\2\u0b52"+
		"\u0b53\3\2\2\2\u0b53\u01ed\3\2\2\2\u0b54\u0b55\7\u030b\2\2\u0b55\u01ef"+
		"\3\2\2\2\u0b56\u0b57\7\u0254\2\2\u0b57\u0b5d\5\u01c4\u00e3\2\u0b58\u0b59"+
		"\7%\2\2\u0b59\u0b5a\7\u0254\2\2\u0b5a\u0b5c\5\u01c4\u00e3\2\u0b5b\u0b58"+
		"\3\2\2\2\u0b5c\u0b5f\3\2\2\2\u0b5d\u0b5b\3\2\2\2\u0b5d\u0b5e\3\2\2\2\u0b5e"+
		"\u01f1\3\2\2\2\u0b5f\u0b5d\3\2\2\2\u0b60\u0b62\7\u02fa\2\2\u0b61\u0b63"+
		"\7\u021f\2\2\u0b62\u0b61\3\2\2\2\u0b62\u0b63\3\2\2\2\u0b63\u0b64\3\2\2"+
		"\2\u0b64\u0b69\5\u01f4\u00fb\2\u0b65\u0b66\7%\2\2\u0b66\u0b68\5\u01f4"+
		"\u00fb\2\u0b67\u0b65\3\2\2\2\u0b68\u0b6b\3\2\2\2\u0b69\u0b67\3\2\2\2\u0b69"+
		"\u0b6a\3\2\2\2\u0b6a\u01f3\3\2\2\2\u0b6b\u0b69\3\2\2\2\u0b6c\u0b6e\5\u0192"+
		"\u00ca\2\u0b6d\u0b6f\5\u00f8}\2\u0b6e\u0b6d\3\2\2\2\u0b6e\u0b6f\3\2\2"+
		"\2\u0b6f\u0b70\3\2\2\2\u0b70\u0b71\7V\2\2\u0b71\u0b72\5\u0180\u00c1\2"+
		"\u0b72\u01f5\3\2\2\2\u0b73\u0b7b\5\u01f8\u00fd\2\u0b74\u0b76\7\u02d5\2"+
		"\2\u0b75\u0b77\t\62\2\2\u0b76\u0b75\3\2\2\2\u0b76\u0b77\3\2\2\2\u0b77"+
		"\u0b78\3\2\2\2\u0b78\u0b7a\5\u01f8\u00fd\2\u0b79\u0b74\3\2\2\2\u0b7a\u0b7d"+
		"\3\2\2\2\u0b7b\u0b79\3\2\2\2\u0b7b\u0b7c\3\2\2\2\u0b7c\u01f7\3\2\2\2\u0b7d"+
		"\u0b7b\3\2\2\2\u0b7e\u0b80\7\37\2\2\u0b7f\u0b7e\3\2\2\2\u0b7f\u0b80\3"+
		"\2\2\2\u0b80\u0b81\3\2\2\2\u0b81\u0b85\7\u0267\2\2\u0b82\u0b84\5\u01fa"+
		"\u00fe\2\u0b83\u0b82\3\2\2\2\u0b84\u0b87\3\2\2\2\u0b85\u0b83\3\2\2\2\u0b85"+
		"\u0b86\3\2\2\2\u0b86\u0b88\3\2\2\2\u0b87\u0b85\3\2\2\2\u0b88\u0b8a\5\u01fe"+
		"\u0100\2\u0b89\u0b8b\5\u022e\u0118\2\u0b8a\u0b89\3\2\2\2\u0b8a\u0b8b\3"+
		"\2\2\2\u0b8b\u0b8d\3\2\2\2\u0b8c\u0b8e\5\u0206\u0104\2\u0b8d\u0b8c\3\2"+
		"\2\2\u0b8d\u0b8e\3\2\2\2\u0b8e\u0b90\3\2\2\2\u0b8f\u0b91\5\u021a\u010e"+
		"\2\u0b90\u0b8f\3\2\2\2\u0b90\u0b91\3\2\2\2\u0b91\u0b93\3\2\2\2\u0b92\u0b94"+
		"\5\u021c\u010f\2\u0b93\u0b92\3\2\2\2\u0b93\u0b94\3\2\2\2\u0b94\u0b96\3"+
		"\2\2\2\u0b95\u0b97\5\u021e\u0110\2\u0b96\u0b95\3\2\2\2\u0b96\u0b97\3\2"+
		"\2\2\u0b97\u0b99\3\2\2\2\u0b98\u0b9a\5\u0226\u0114\2\u0b99\u0b98\3\2\2"+
		"\2\u0b99\u0b9a\3\2\2\2\u0b9a\u0b9c\3\2\2\2\u0b9b\u0b9d\5\u0182\u00c2\2"+
		"\u0b9c\u0b9b\3\2\2\2\u0b9c\u0b9d\3\2\2\2\u0b9d\u0b9f\3\2\2\2\u0b9e\u0ba0"+
		"\5\u0220\u0111\2\u0b9f\u0b9e\3\2\2\2\u0b9f\u0ba0\3\2\2\2\u0ba0\u0ba2\3"+
		"\2\2\2\u0ba1\u0ba3\5\u022e\u0118\2\u0ba2\u0ba1\3\2\2\2\u0ba2\u0ba3\3\2"+
		"\2\2\u0ba3\u0ba5\3\2\2\2\u0ba4\u0ba6\5\u0230\u0119\2\u0ba5\u0ba4\3\2\2"+
		"\2\u0ba5\u0ba6\3\2\2\2\u0ba6\u0ba8\3\2\2\2\u0ba7\u0ba9\7 \2\2\u0ba8\u0ba7"+
		"\3\2\2\2\u0ba8\u0ba9\3\2\2\2\u0ba9\u01f9\3\2\2\2\u0baa\u0bb3\5\u01fc\u00ff"+
		"\2\u0bab\u0bb3\7\u0126\2\2\u0bac\u0bb3\7\u02a3\2\2\u0bad\u0bb3\7\u028c"+
		"\2\2\u0bae\u0bb3\7\u0288\2\2\u0baf\u0bb3\7\u0289\2\2\u0bb0\u0bb3\t\63"+
		"\2\2\u0bb1\u0bb3\7\u028a\2\2\u0bb2\u0baa\3\2\2\2\u0bb2\u0bab\3\2\2\2\u0bb2"+
		"\u0bac\3\2\2\2\u0bb2\u0bad\3\2\2\2\u0bb2\u0bae\3\2\2\2\u0bb2\u0baf\3\2"+
		"\2\2\u0bb2\u0bb0\3\2\2\2\u0bb2\u0bb1\3\2\2\2\u0bb3\u01fb\3\2\2\2\u0bb4"+
		"\u0bb5\t\64\2\2\u0bb5\u01fd\3\2\2\2\u0bb6\u0bb9\5\u0202\u0102\2\u0bb7"+
		"\u0bb9\5\u0200\u0101\2\u0bb8\u0bb6\3\2\2\2\u0bb8\u0bb7\3\2\2\2\u0bb9\u0bbe"+
		"\3\2\2\2\u0bba\u0bbb\7%\2\2\u0bbb\u0bbd\5\u0200\u0101\2\u0bbc\u0bba\3"+
		"\2\2\2\u0bbd\u0bc0\3\2\2\2\u0bbe\u0bbc\3\2\2\2\u0bbe\u0bbf\3\2\2\2\u0bbf"+
		"\u01ff\3\2\2\2\u0bc0\u0bbe\3\2\2\2\u0bc1\u0bc6\5\u0120\u0091\2\u0bc2\u0bc4"+
		"\7V\2\2\u0bc3\u0bc2\3\2\2\2\u0bc3\u0bc4\3\2\2\2\u0bc4\u0bc5\3\2\2\2\u0bc5"+
		"\u0bc7\5\u00f2z\2\u0bc6\u0bc3\3\2\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7\u0bca"+
		"\3\2\2\2\u0bc8\u0bca\5\u0204\u0103\2\u0bc9\u0bc1\3\2\2\2\u0bc9\u0bc8\3"+
		"\2\2\2\u0bca\u0201\3\2\2\2\u0bcb\u0bcc\7\21\2\2\u0bcc\u0203\3\2\2\2\u0bcd"+
		"\u0bce\5\u00ceh\2\u0bce\u0bcf\7\25\2\2\u0bcf\u0205\3\2\2\2\u0bd0\u0bd1"+
		"\7\u010f\2\2\u0bd1\u0bd2\5\u0208\u0105\2\u0bd2\u0207\3\2\2\2\u0bd3\u0bd8"+
		"\5\u020a\u0106\2\u0bd4\u0bd5\7%\2\2\u0bd5\u0bd7\5\u020a\u0106\2\u0bd6"+
		"\u0bd4\3\2\2\2\u0bd7\u0bda\3\2\2\2\u0bd8\u0bd6\3\2\2\2\u0bd8\u0bd9\3\2"+
		"\2\2\u0bd9\u0209\3\2\2\2\u0bda\u0bd8\3\2\2\2\u0bdb\u0be2\5\u020c\u0107"+
		"\2\u0bdc\u0bdd\7!\2\2\u0bdd\u0bde\7\u01d8\2\2\u0bde\u0bdf\5\u020c\u0107"+
		"\2\u0bdf\u0be0\7\"\2\2\u0be0\u0be2\3\2\2\2\u0be1\u0bdb\3\2\2\2\u0be1\u0bdc"+
		"\3\2\2\2\u0be2\u020b\3\2\2\2\u0be3\u0be7\5\u020e\u0108\2\u0be4\u0be6\5"+
		"\u0216\u010c\2\u0be5\u0be4\3\2\2\2\u0be6\u0be9\3\2\2\2\u0be7\u0be5\3\2"+
		"\2\2\u0be7\u0be8\3\2\2\2\u0be8\u020d\3\2\2\2\u0be9\u0be7\3\2\2\2\u0bea"+
		"\u0bec\5\u00dep\2\u0beb\u0bed\5\u0210\u0109\2\u0bec\u0beb\3\2\2\2\u0bec"+
		"\u0bed\3\2\2\2\u0bed\u0bf2\3\2\2\2\u0bee\u0bf0\7V\2\2\u0bef\u0bee\3\2"+
		"\2\2\u0bef\u0bf0\3\2\2\2\u0bf0\u0bf1\3\2\2\2\u0bf1\u0bf3\5\u00f2z\2\u0bf2"+
		"\u0bef\3\2\2\2\u0bf2\u0bf3\3\2\2\2\u0bf3\u0bf5\3\2\2\2\u0bf4\u0bf6\5\u0212"+
		"\u010a\2\u0bf5\u0bf4\3\2\2\2\u0bf5\u0bf6\3\2\2\2\u0bf6\u0c04\3\2\2\2\u0bf7"+
		"\u0bf9\5\u0180\u00c1\2\u0bf8\u0bfa\7V\2\2\u0bf9\u0bf8\3\2\2\2\u0bf9\u0bfa"+
		"\3\2\2\2\u0bfa\u0bfb\3\2\2\2\u0bfb\u0bfd\5\u00f2z\2\u0bfc\u0bfe\5\u00f8"+
		"}\2\u0bfd\u0bfc\3\2\2\2\u0bfd\u0bfe\3\2\2\2\u0bfe\u0c04\3\2\2\2\u0bff"+
		"\u0c00\7\37\2\2\u0c00\u0c01\5\u0208\u0105\2\u0c01\u0c02\7 \2\2\u0c02\u0c04"+
		"\3\2\2\2\u0c03\u0bea\3\2\2\2\u0c03\u0bf7\3\2\2\2\u0c03\u0bff\3\2\2\2\u0c04"+
		"\u020f\3\2\2\2\u0c05\u0c06\7\u01f2\2\2\u0c06\u0c07\7\37\2\2\u0c07\u0c0c"+
		"\5\u00ceh\2\u0c08\u0c09\7%\2\2\u0c09\u0c0b\5\u00ceh\2\u0c0a\u0c08\3\2"+
		"\2\2\u0c0b\u0c0e\3\2\2\2\u0c0c\u0c0a\3\2\2\2\u0c0c\u0c0d\3\2\2\2\u0c0d"+
		"\u0c0f\3\2\2\2\u0c0e\u0c0c\3\2\2\2\u0c0f\u0c10\7 \2\2\u0c10\u0211\3\2"+
		"\2\2\u0c11\u0c16\5\u0214\u010b\2\u0c12\u0c13\7%\2\2\u0c13\u0c15\5\u0214"+
		"\u010b\2\u0c14\u0c12\3\2\2\2\u0c15\u0c18\3\2\2\2\u0c16\u0c14\3\2\2\2\u0c16"+
		"\u0c17\3\2\2\2\u0c17\u0213\3\2\2\2\u0c18\u0c16\3\2\2\2\u0c19\u0c1a\t\65"+
		"\2\2\u0c1a\u0c23\t\20\2\2\u0c1b\u0c21\7\u010a\2\2\u0c1c\u0c22\7\u0155"+
		"\2\2\u0c1d\u0c1e\7\u01e5\2\2\u0c1e\u0c22\7o\2\2\u0c1f\u0c20\7\u011e\2"+
		"\2\u0c20\u0c22\7o\2\2\u0c21\u0c1c\3\2\2\2\u0c21\u0c1d\3\2\2\2\u0c21\u0c1f"+
		"\3\2\2\2\u0c22\u0c24\3\2\2\2\u0c23\u0c1b\3\2\2\2\u0c23\u0c24\3\2\2\2\u0c24"+
		"\u0c25\3\2\2\2\u0c25\u0c26\7\37\2\2\u0c26\u0c2b\5\u00e2r\2\u0c27\u0c28"+
		"\7%\2\2\u0c28\u0c2a\5\u00e2r\2\u0c29\u0c27\3\2\2\2\u0c2a\u0c2d\3\2\2\2"+
		"\u0c2b\u0c29\3\2\2\2\u0c2b\u0c2c\3\2\2\2\u0c2c\u0c2e\3\2\2\2\u0c2d\u0c2b"+
		"\3\2\2\2\u0c2e\u0c2f\7 \2\2\u0c2f\u0215\3\2\2\2\u0c30\u0c32\t\66\2\2\u0c31"+
		"\u0c30\3\2\2\2\u0c31\u0c32\3\2\2\2\u0c32\u0c33\3\2\2\2\u0c33\u0c36\7\u0155"+
		"\2\2\u0c34\u0c36\7\u02a3\2\2\u0c35\u0c31\3\2\2\2\u0c35\u0c34\3\2\2\2\u0c36"+
		"\u0c37\3\2\2\2\u0c37\u0c39\5\u020e\u0108\2\u0c38\u0c3a\5\u0218\u010d\2"+
		"\u0c39\u0c38\3\2\2\2\u0c39\u0c3a\3\2\2\2\u0c3a\u0c4c\3\2\2\2\u0c3b\u0c3d"+
		"\t\67\2\2\u0c3c\u0c3e\7\u01ea\2\2\u0c3d\u0c3c\3\2\2\2\u0c3d\u0c3e\3\2"+
		"\2\2\u0c3e\u0c3f\3\2\2\2\u0c3f\u0c40\7\u0155\2\2\u0c40\u0c41\5\u020e\u0108"+
		"\2\u0c41\u0c42\5\u0218\u010d\2\u0c42\u0c4c\3\2\2\2\u0c43\u0c47\7\u01be"+
		"\2\2\u0c44\u0c48\7\u013a\2\2\u0c45\u0c46\t\67\2\2\u0c46\u0c48\7\u01ea"+
		"\2\2\u0c47\u0c44\3\2\2\2\u0c47\u0c45\3\2\2\2\u0c47\u0c48\3\2\2\2\u0c48"+
		"\u0c49\3\2\2\2\u0c49\u0c4a\7\u0155\2\2\u0c4a\u0c4c\5\u020e\u0108\2\u0c4b"+
		"\u0c35\3\2\2\2\u0c4b\u0c3b\3\2\2\2\u0c4b\u0c43\3\2\2\2\u0c4c\u0217\3\2"+
		"\2\2\u0c4d\u0c4e\7\u01da\2\2\u0c4e\u0c52\5\u0120\u0091\2\u0c4f\u0c50\7"+
		"\u02e2\2\2\u0c50\u0c52\5\u00f8}\2\u0c51\u0c4d\3\2\2\2\u0c51\u0c4f\3\2"+
		"\2\2\u0c52\u0219\3\2\2\2\u0c53\u0c54\7\u02f7\2\2\u0c54\u0c55\5\u0120\u0091"+
		"\2\u0c55\u021b\3\2\2\2\u0c56\u0c57\7\u011e\2\2\u0c57\u0c58\7o\2\2\u0c58"+
		"\u0c5d\5\u0184\u00c3\2\u0c59\u0c5a\7%\2\2\u0c5a\u0c5c\5\u0184\u00c3\2"+
		"\u0c5b\u0c59\3\2\2\2\u0c5c\u0c5f\3\2\2\2\u0c5d\u0c5b\3\2\2\2\u0c5d\u0c5e"+
		"\3\2\2\2\u0c5e\u0c62\3\2\2\2\u0c5f\u0c5d\3\2\2\2\u0c60\u0c61\7\u02fa\2"+
		"\2\u0c61\u0c63\7\u0251\2\2\u0c62\u0c60\3\2\2\2\u0c62\u0c63\3\2\2\2\u0c63"+
		"\u021d\3\2\2\2\u0c64\u0c65\7\u0124\2\2\u0c65\u0c66\5\u0120\u0091\2\u0c66"+
		"\u021f\3\2\2\2\u0c67\u0c72\7\u016a\2\2\u0c68\u0c69\5\u0224\u0113\2\u0c69"+
		"\u0c6a\7%\2\2\u0c6a\u0c6c\3\2\2\2\u0c6b\u0c68\3\2\2\2\u0c6b\u0c6c\3\2"+
		"\2\2\u0c6c\u0c6d\3\2\2\2\u0c6d\u0c73\5\u0222\u0112\2\u0c6e\u0c6f\5\u0222"+
		"\u0112\2\u0c6f\u0c70\7\u01d7\2\2\u0c70\u0c71\5\u0224\u0113\2\u0c71\u0c73"+
		"\3\2\2\2\u0c72\u0c6b\3\2\2\2\u0c72\u0c6e\3\2\2\2\u0c73\u0221\3\2\2\2\u0c74"+
		"\u0c77\5\u00be`\2\u0c75\u0c77\5\u00b6\\\2\u0c76\u0c74\3\2\2\2\u0c76\u0c75"+
		"\3\2\2\2\u0c77\u0223\3\2\2\2\u0c78\u0c7b\5\u00be`\2\u0c79\u0c7b\5\u00b6"+
		"\\\2\u0c7a\u0c78\3\2\2\2\u0c7a\u0c79\3\2\2\2\u0c7b\u0225\3\2\2\2\u0c7c"+
		"\u0c7d\7\u02f9\2\2\u0c7d\u0c82\5\u0228\u0115\2\u0c7e\u0c7f\7%\2\2\u0c7f"+
		"\u0c81\5\u0228\u0115\2\u0c80\u0c7e\3\2\2\2\u0c81\u0c84\3\2\2\2\u0c82\u0c80"+
		"\3\2\2\2\u0c82\u0c83\3\2\2\2\u0c83\u0227\3\2\2\2\u0c84\u0c82\3\2\2\2\u0c85"+
		"\u0c86\5\u0192\u00ca\2\u0c86\u0c87\7V\2\2\u0c87\u0c88\7\37\2\2\u0c88\u0c89"+
		"\5\u013a\u009e\2\u0c89\u0c8a\7 \2\2\u0c8a\u0229\3\2\2\2\u0c8b\u0c8c\7"+
		"\u029a\2\2\u0c8c\u0c8d\7o\2\2\u0c8d\u0c92\7\u030b\2\2\u0c8e\u0c8f\7\u02b6"+
		"\2\2\u0c8f\u0c90\7o\2\2\u0c90\u0c92\7\u030b\2\2\u0c91\u0c8b\3\2\2\2\u0c91"+
		"\u0c8e\3\2\2\2\u0c92\u022b\3\2\2\2\u0c93\u0c94\7\u02b6\2\2\u0c94\u0c95"+
		"\7o\2\2\u0c95\u0ca0\7\u030b\2\2\u0c96\u0c98\7\u01e2\2\2\u0c97\u0c96\3"+
		"\2\2\2\u0c97\u0c98\3\2\2\2\u0c98\u0c99\3\2\2\2\u0c99\u0c9a\7\u00dc\2\2"+
		"\u0c9a\u0c9b\7o\2\2\u0c9b\u0ca0\7\u030b\2\2\u0c9c\u0c9d\7\u00e8\2\2\u0c9d"+
		"\u0c9e\7o\2\2\u0c9e\u0ca0\7\u030b\2\2\u0c9f\u0c93\3\2\2\2\u0c9f\u0c97"+
		"\3\2\2\2\u0c9f\u0c9c\3\2\2\2\u0ca0\u022d\3\2\2\2\u0ca1\u0ca2\7\u0149\2"+
		"\2\u0ca2\u0ca7\5\u00d2j\2\u0ca3\u0ca4\7%\2\2\u0ca4\u0ca6\5\u00d2j\2\u0ca5"+
		"\u0ca3\3\2\2\2\u0ca6\u0ca9\3\2\2\2\u0ca7\u0ca5\3\2\2\2\u0ca7\u0ca8\3\2"+
		"\2\2\u0ca8\u0cc6\3\2\2\2\u0ca9\u0ca7\3\2\2\2\u0caa\u0cab\7\u0149\2\2\u0cab"+
		"\u0cac\7\u00d4\2\2\u0cac\u0cc6\7\u030b\2\2\u0cad\u0cae\7\u0149\2\2\u0cae"+
		"\u0caf\7\u01eb\2\2\u0caf\u0cb3\7\u030b\2\2\u0cb0\u0cb1\7|\2\2\u0cb1\u0cb2"+
		"\7\u026e\2\2\u0cb2\u0cb4\7\u030a\2\2\u0cb3\u0cb0\3\2\2\2\u0cb3\u0cb4\3"+
		"\2\2\2\u0cb4\u0cbb\3\2\2\2\u0cb5\u0cb7\t\4\2\2\u0cb6\u0cb8\5\u022c\u0117"+
		"\2\u0cb7\u0cb6\3\2\2\2\u0cb8\u0cb9\3\2\2\2\u0cb9\u0cb7\3\2\2\2\u0cb9\u0cba"+
		"\3\2\2\2\u0cba\u0cbc\3\2\2\2\u0cbb\u0cb5\3\2\2\2\u0cbb\u0cbc\3\2\2\2\u0cbc"+
		"\u0cc3\3\2\2\2\u0cbd\u0cbf\7\u016c\2\2\u0cbe\u0cc0\5\u022a\u0116\2\u0cbf"+
		"\u0cbe\3\2\2\2\u0cc0\u0cc1\3\2\2\2\u0cc1\u0cbf\3\2\2\2\u0cc1\u0cc2\3\2"+
		"\2\2\u0cc2\u0cc4\3\2\2\2\u0cc3\u0cbd\3\2\2\2\u0cc3\u0cc4\3\2\2\2\u0cc4"+
		"\u0cc6\3\2\2\2\u0cc5\u0ca1\3\2\2\2\u0cc5\u0caa\3\2\2\2\u0cc5\u0cad\3\2"+
		"\2\2\u0cc6\u022f\3\2\2\2\u0cc7\u0cc8\7\u010a\2\2\u0cc8\u0cce\7\u02db\2"+
		"\2\u0cc9\u0cca\7\u0173\2\2\u0cca\u0ccb\7\u0134\2\2\u0ccb\u0ccc\7\u026f"+
		"\2\2\u0ccc\u0cce\7\u01b2\2\2\u0ccd\u0cc7\3\2\2\2\u0ccd\u0cc9\3\2\2\2\u0cce"+
		"\u0231\3\2\2\2\u0191\u023c\u023f\u0245\u0249\u024e\u0252\u0255\u0259\u025c"+
		"\u0262\u0265\u0269\u026c\u0271\u0275\u0279\u027e\u0281\u029b\u02a9\u02b1"+
		"\u02c1\u02c5\u02ca\u02cd\u02d3\u02d8\u02de\u0307\u0310\u0316\u0319\u031e"+
		"\u0321\u032c\u0338\u033a\u033c\u0346\u0349\u035d\u0368\u036b\u0370\u0376"+
		"\u0378\u0382\u0386\u038b\u038e\u039e\u03a2\u03a6\u03ab\u03ae\u03b2\u03b6"+
		"\u03bd\u03c3\u03c6\u03cc\u03d0\u03d7\u03da\u03e3\u03f1\u03f4\u03f8\u03fb"+
		"\u03fd\u0401\u0411\u0421\u042a\u043d\u044b\u0454\u045b\u0460\u0463\u0466"+
		"\u046e\u0475\u0478\u047c\u047f\u0484\u0486\u048c\u0497\u049e\u04a1\u04a5"+
		"\u04a8\u04ab\u04b2\u04be\u04c1\u04cd\u04d6\u04e1\u04ea\u04ef\u04f3\u04fa"+
		"\u04fe\u0502\u0509\u050d\u0520\u0526\u052f\u053c\u0549\u054f\u0553\u0558"+
		"\u0563\u056c\u0573\u0578\u058a\u0599\u059c\u05a0\u05a3\u05ae\u05b1\u05b5"+
		"\u05b8\u05bc\u05c9\u05ce\u05d1\u05d4\u05d7\u05e4\u05ec\u05f8\u05ff\u060a"+
		"\u0612\u0616\u061a\u0620\u0623\u0629\u062c\u0632\u0637\u063e\u0642\u0645"+
		"\u064c\u0650\u0671\u067b\u0689\u0692\u0694\u06a1\u06b0\u06b2\u06b9\u06c0"+
		"\u06c9\u06d0\u06de\u06e4\u06e8\u06ee\u071d\u071f\u072d\u0731\u0739\u073f"+
		"\u074e\u0757\u0759\u075b\u0761\u0766\u076d\u0771\u0775\u0781\u0784\u0787"+
		"\u078a\u078d\u0796\u079c\u07aa\u07bf\u07c4\u07c9\u07d0\u07d4\u07d7\u07db"+
		"\u07e6\u0801\u0811\u081c\u0820\u0830\u0835\u084b\u084e\u0858\u085e\u0862"+
		"\u0865\u0869\u0874\u0878\u0896\u089e\u08b3\u08b7\u08bc\u08bf\u08e0\u08e6"+
		"\u08e9\u08ed\u08f0\u08f3\u08f6\u08f9\u08fe\u0901\u0903\u0941\u0947\u0951"+
		"\u095b\u095e\u0964\u0968\u096d\u0974\u097d\u0980\u0998\u099c\u09a1\u09a4"+
		"\u09a7\u09aa\u09ad\u09b5\u09b9\u09bc\u09bf\u09c2\u09cf\u09d5\u09dd\u09e4"+
		"\u09e7\u09eb\u09f0\u09f5\u09fd\u0a01\u0a04\u0a07\u0a0a\u0a0f\u0a16\u0a19"+
		"\u0a1c\u0a1f\u0a22\u0a29\u0a31\u0a3a\u0a41\u0a46\u0a4f\u0a52\u0a55\u0a58"+
		"\u0a5b\u0a5e\u0a61\u0a66\u0a69\u0a6c\u0a77\u0a7b\u0a80\u0a84\u0a88\u0a94"+
		"\u0a97\u0a9a\u0aa2\u0aa9\u0aaf\u0ab2\u0abe\u0ac1\u0ac4\u0acb\u0ace\u0ada"+
		"\u0adf\u0ae2\u0ae7\u0aed\u0af2\u0af8\u0afa\u0b00\u0b02\u0b08\u0b0b\u0b0e"+
		"\u0b13\u0b16\u0b1b\u0b23\u0b2b\u0b31\u0b34\u0b37\u0b3e\u0b44\u0b46\u0b4d"+
		"\u0b52\u0b5d\u0b62\u0b69\u0b6e\u0b76\u0b7b\u0b7f\u0b85\u0b8a\u0b8d\u0b90"+
		"\u0b93\u0b96\u0b99\u0b9c\u0b9f\u0ba2\u0ba5\u0ba8\u0bb2\u0bb8\u0bbe\u0bc3"+
		"\u0bc6\u0bc9\u0bd8\u0be1\u0be7\u0bec\u0bef\u0bf2\u0bf5\u0bf9\u0bfd\u0c03"+
		"\u0c0c\u0c16\u0c21\u0c23\u0c2b\u0c31\u0c35\u0c39\u0c3d\u0c47\u0c4b\u0c51"+
		"\u0c5d\u0c62\u0c6b\u0c72\u0c76\u0c7a\u0c82\u0c91\u0c97\u0c9f\u0ca7\u0cb3"+
		"\u0cb9\u0cbb\u0cc1\u0cc3\u0cc5\u0ccd";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}