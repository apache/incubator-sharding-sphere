// Generated from /home/guimy/github/shardingsphere/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/antlr4/imports/postgresql/DMLStatement.g4 by ANTLR 4.9.1
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DMLStatementParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, AND_=4, OR_=5, NOT_=6, TILDE_=7, VERTICAL_BAR_=8, 
		AMPERSAND_=9, SIGNED_LEFT_SHIFT_=10, SIGNED_RIGHT_SHIFT_=11, CARET_=12, 
		MOD_=13, COLON_=14, PLUS_=15, MINUS_=16, ASTERISK_=17, SLASH_=18, BACKSLASH_=19, 
		DOT_=20, DOT_ASTERISK_=21, SAFE_EQ_=22, DEQ_=23, EQ_=24, CQ_=25, NEQ_=26, 
		GT_=27, GTE_=28, LT_=29, LTE_=30, POUND_=31, LP_=32, RP_=33, LBE_=34, 
		RBE_=35, LBT_=36, RBT_=37, COMMA_=38, DQ_=39, SQ_=40, BQ_=41, QUESTION_=42, 
		AT_=43, SEMI_=44, TILDE_TILDE_=45, NOT_TILDE_TILDE_=46, TYPE_CAST_=47, 
		WS=48, SELECT=49, INSERT=50, UPDATE=51, DELETE=52, CREATE=53, ALTER=54, 
		DROP=55, TRUNCATE=56, SCHEMA=57, GRANT=58, REVOKE=59, ADD=60, SET=61, 
		TABLE=62, COLUMN=63, INDEX=64, CONSTRAINT=65, PRIMARY=66, UNIQUE=67, FOREIGN=68, 
		KEY=69, POSITION=70, PRECISION=71, FUNCTION=72, TRIGGER=73, PROCEDURE=74, 
		VIEW=75, INTO=76, VALUES=77, WITH=78, UNION=79, DISTINCT=80, CASE=81, 
		WHEN=82, CAST=83, TRIM=84, SUBSTRING=85, FROM=86, NATURAL=87, JOIN=88, 
		FULL=89, INNER=90, OUTER=91, LEFT=92, RIGHT=93, CROSS=94, USING=95, WHERE=96, 
		AS=97, ON=98, IF=99, ELSE=100, THEN=101, FOR=102, TO=103, AND=104, OR=105, 
		IS=106, NOT=107, NULL=108, TRUE=109, FALSE=110, EXISTS=111, BETWEEN=112, 
		IN=113, ALL=114, ANY=115, LIKE=116, ORDER=117, GROUP=118, BY=119, ASC=120, 
		DESC=121, HAVING=122, LIMIT=123, OFFSET=124, BEGIN=125, COMMIT=126, ROLLBACK=127, 
		SAVEPOINT=128, BOOLEAN=129, DOUBLE=130, CHAR=131, CHARACTER=132, ARRAY=133, 
		INTERVAL=134, DATE=135, TIME=136, TIMESTAMP=137, LOCALTIME=138, LOCALTIMESTAMP=139, 
		YEAR=140, QUARTER=141, MONTH=142, WEEK=143, DAY=144, HOUR=145, MINUTE=146, 
		SECOND=147, MICROSECOND=148, DEFAULT=149, CURRENT=150, ENABLE=151, DISABLE=152, 
		CALL=153, INSTANCE=154, PRESERVE=155, DO=156, DEFINER=157, CURRENT_USER=158, 
		SQL=159, CASCADED=160, LOCAL=161, CLOSE=162, OPEN=163, NEXT=164, NAME=165, 
		COLLATION=166, NAMES=167, INTEGER=168, REAL=169, DECIMAL=170, TYPE=171, 
		SMALLINT=172, BIGINT=173, NUMERIC=174, TEXT=175, REPEATABLE=176, CURRENT_DATE=177, 
		CURRENT_TIME=178, CURRENT_TIMESTAMP=179, NULLIF=180, VARYING=181, NATIONAL=182, 
		NCHAR=183, VALUE=184, BOTH=185, LEADING=186, TRAILING=187, COALESCE=188, 
		INTERSECT=189, EXCEPT=190, TIES=191, FETCH=192, CUBE=193, GROUPING=194, 
		SETS=195, WINDOW=196, OTHERS=197, OVERLAPS=198, SOME=199, AT=200, DEC=201, 
		END=202, FOR_GENERATOR=203, ADMIN=204, BINARY=205, ESCAPE=206, EXCLUDE=207, 
		MOD=208, PARTITION=209, ROW=210, UNKNOWN=211, ALWAYS=212, CASCADE=213, 
		CHECK=214, GENERATED=215, ISOLATION=216, LEVEL=217, NO=218, OPTION=219, 
		PRIVILEGES=220, READ=221, REFERENCES=222, ROLE=223, ROWS=224, START=225, 
		TRANSACTION=226, USER=227, ACTION=228, CACHE=229, CHARACTERISTICS=230, 
		CLUSTER=231, COLLATE=232, COMMENTS=233, CONCURRENTLY=234, CONNECT=235, 
		CONSTRAINTS=236, CYCLE=237, DATA=238, DATABASE=239, DEFAULTS=240, DEFERRABLE=241, 
		DEFERRED=242, DEPENDS=243, DOMAIN=244, EXCLUDING=245, EXECUTE=246, EXTENDED=247, 
		EXTENSION=248, EXTERNAL=249, EXTRACT=250, FILTER=251, FIRST=252, FOLLOWING=253, 
		FORCE=254, GLOBAL=255, IDENTITY=256, IMMEDIATE=257, INCLUDING=258, INCREMENT=259, 
		INDEXES=260, INHERIT=261, INHERITS=262, INITIALLY=263, INCLUDE=264, LANGUAGE=265, 
		LARGE=266, LAST=267, LOGGED=268, MAIN=269, MATCH=270, MAXVALUE=271, MINVALUE=272, 
		NOTHING=273, NULLS=274, OBJECT=275, OIDS=276, ONLY=277, OVER=278, OWNED=279, 
		OWNER=280, PARTIAL=281, PLAIN=282, PRECEDING=283, RANGE=284, RENAME=285, 
		REPLICA=286, RESET=287, RESTART=288, RESTRICT=289, ROUTINE=290, RULE=291, 
		SECURITY=292, SEQUENCE=293, SESSION=294, SESSION_USER=295, SHOW=296, SIMPLE=297, 
		STATISTICS=298, STORAGE=299, TABLESPACE=300, TEMP=301, TEMPORARY=302, 
		UNBOUNDED=303, UNLOGGED=304, USAGE=305, VALID=306, VALIDATE=307, WITHIN=308, 
		WITHOUT=309, ZONE=310, OF=311, UESCAPE=312, GROUPS=313, RECURSIVE=314, 
		INT=315, INT2=316, INT4=317, INT8=318, FLOAT=319, FLOAT4=320, FLOAT8=321, 
		SMALLSERIAL=322, SERIAL=323, BIGSERIAL=324, MONEY=325, VARCHAR=326, BYTEA=327, 
		ENUM=328, POINT=329, LINE=330, LSEG=331, BOX=332, PATH=333, POLYGON=334, 
		CIRCLE=335, CIDR=336, INET=337, MACADDR=338, MACADDR8=339, BIT=340, VARBIT=341, 
		TSVECTOR=342, TSQUERY=343, XML=344, JSON=345, INT4RANGE=346, INT8RANGE=347, 
		NUMRANGE=348, TSRANGE=349, TSTZRANGE=350, DATERANGE=351, TABLESAMPLE=352, 
		ORDINALITY=353, CURRENT_ROLE=354, CURRENT_CATALOG=355, CURRENT_SCHEMA=356, 
		NORMALIZE=357, OVERLAY=358, XMLCONCAT=359, XMLELEMENT=360, XMLEXISTS=361, 
		XMLFOREST=362, XMLPARSE=363, XMLPI=364, XMLROOT=365, XMLSERIALIZE=366, 
		TREAT=367, SETOF=368, NFC=369, NFD=370, NFKC=371, NFKD=372, XMLATTRIBUTES=373, 
		REF=374, PASSING=375, VERSION=376, YES=377, STANDALONE=378, GREATEST=379, 
		LEAST=380, MATERIALIZED=381, OPERATOR=382, SHARE=383, ROLLUP=384, ILIKE=385, 
		SIMILAR=386, ISNULL=387, NOTNULL=388, SYMMETRIC=389, DOCUMENT=390, NORMALIZED=391, 
		ASYMMETRIC=392, VARIADIC=393, NOWAIT=394, LOCKED=395, XMLTABLE=396, COLUMNS=397, 
		CONTENT=398, STRIP=399, WHITESPACE=400, XMLNAMESPACES=401, PLACING=402, 
		RETURNING=403, LATERAL=404, NONE=405, ANALYSE=406, ANALYZE=407, CONFLICT=408, 
		OVERRIDING=409, SYSTEM=410, ABORT=411, ABSOLUTE=412, ACCESS=413, AFTER=414, 
		AGGREGATE=415, ALSO=416, ATTACH=417, ATTRIBUTE=418, BACKWARD=419, BEFORE=420, 
		ASSERTION=421, ASSIGNMENT=422, CONTINUE=423, CONVERSION=424, COPY=425, 
		COST=426, CSV=427, CALLED=428, CATALOG=429, CHAIN=430, CHECKPOINT=431, 
		CLASS=432, CONFIGURATION=433, COMMENT=434, DETACH=435, DICTIONARY=436, 
		EXPRESSION=437, INSENSITIVE=438, DISCARD=439, OFF=440, INSTEAD=441, EXPLAIN=442, 
		INPUT=443, INLINE=444, PARALLEL=445, LEAKPROOF=446, COMMITTED=447, ENCODING=448, 
		IMPLICIT=449, DELIMITER=450, CURSOR=451, EACH=452, EVENT=453, DEALLOCATE=454, 
		CONNECTION=455, DECLARE=456, FAMILY=457, FORWARD=458, EXCLUSIVE=459, FUNCTIONS=460, 
		LOCATION=461, LABEL=462, DELIMITERS=463, HANDLER=464, HEADER=465, IMMUTABLE=466, 
		GRANTED=467, HOLD=468, MAPPING=469, OLD=470, METHOD=471, LOAD=472, LISTEN=473, 
		MODE=474, MOVE=475, PROCEDURAL=476, PARSER=477, PROCEDURES=478, ENCRYPTED=479, 
		PUBLICATION=480, PROGRAM=481, REFERENCING=482, PLANS=483, REINDEX=484, 
		PRIOR=485, PASSWORD=486, RELATIVE=487, QUOTE=488, ROUTINES=489, REPLACE=490, 
		SNAPSHOT=491, REFRESH=492, PREPARE=493, OPTIONS=494, IMPORT=495, INVOKER=496, 
		NEW=497, PREPARED=498, SCROLL=499, SEQUENCES=500, SYSID=501, REASSIGN=502, 
		SERVER=503, SUBSCRIPTION=504, SEARCH=505, SCHEMAS=506, RECHECK=507, POLICY=508, 
		NOTIFY=509, LOCK=510, RELEASE=511, SERIALIZABLE=512, RETURNS=513, STATEMENT=514, 
		STDIN=515, STDOUT=516, TABLES=517, SUPPORT=518, STABLE=519, TEMPLATE=520, 
		UNENCRYPTED=521, VIEWS=522, UNCOMMITTED=523, TRANSFORM=524, UNLISTEN=525, 
		TRUSTED=526, VALIDATOR=527, UNTIL=528, VACUUM=529, VOLATILE=530, STORED=531, 
		WRITE=532, STRICT=533, TYPES=534, WRAPPER=535, WORK=536, FREEZE=537, AUTHORIZATION=538, 
		VERBOSE=539, PARAM=540, OUT=541, INOUT=542, IDENTIFIER_=543, STRING_=544, 
		NUMBER_=545, HEX_DIGIT_=546, BIT_NUM_=547;
	public static final int
		RULE_insert = 0, RULE_insertTarget = 1, RULE_insertRest = 2, RULE_overrideKind = 3, 
		RULE_insertColumnList = 4, RULE_insertColumnItem = 5, RULE_optOnConflict = 6, 
		RULE_optConfExpr = 7, RULE_update = 8, RULE_setClauseList = 9, RULE_setClause = 10, 
		RULE_setTarget = 11, RULE_setTargetList = 12, RULE_returningClause = 13, 
		RULE_delete = 14, RULE_relationExprOptAlias = 15, RULE_usingClause = 16, 
		RULE_select = 17, RULE_selectWithParens = 18, RULE_selectNoParens = 19, 
		RULE_selectClauseN = 20, RULE_simpleSelect = 21, RULE_withClause = 22, 
		RULE_intoClause = 23, RULE_optTempTableName = 24, RULE_cteList = 25, RULE_commonTableExpr = 26, 
		RULE_optMaterialized = 27, RULE_optNameList = 28, RULE_preparableStmt = 29, 
		RULE_forLockingClause = 30, RULE_forLockingItems = 31, RULE_forLockingItem = 32, 
		RULE_nowaitOrSkip = 33, RULE_forLockingStrength = 34, RULE_lockedRelsList = 35, 
		RULE_qualifiedNameList = 36, RULE_qualifiedName = 37, RULE_selectLimit = 38, 
		RULE_valuesClause = 39, RULE_limitClause = 40, RULE_offsetClause = 41, 
		RULE_selectLimitValue = 42, RULE_selectOffsetValue = 43, RULE_selectFetchFirstValue = 44, 
		RULE_rowOrRows = 45, RULE_firstOrNext = 46, RULE_targetList = 47, RULE_targetEl = 48, 
		RULE_groupClause = 49, RULE_groupByList = 50, RULE_groupByItem = 51, RULE_emptyGroupingSet = 52, 
		RULE_rollupClause = 53, RULE_cubeClause = 54, RULE_groupingSetsClause = 55, 
		RULE_windowClause = 56, RULE_windowDefinitionList = 57, RULE_windowDefinition = 58, 
		RULE_windowSpecification = 59, RULE_existingWindowName = 60, RULE_partitionClause = 61, 
		RULE_frameClause = 62, RULE_frameExtent = 63, RULE_frameBound = 64, RULE_optWindowExclusionClause = 65, 
		RULE_alias = 66, RULE_fromClause = 67, RULE_fromList = 68, RULE_tableReference = 69, 
		RULE_joinedTable = 70, RULE_joinType = 71, RULE_joinOuter = 72, RULE_joinQual = 73, 
		RULE_relationExpr = 74, RULE_whereClause = 75, RULE_whereOrCurrentClause = 76, 
		RULE_havingClause = 77, RULE_doStatement = 78, RULE_dostmtOptList = 79, 
		RULE_dostmtOptItem = 80, RULE_lock = 81, RULE_lockType = 82, RULE_checkpoint = 83, 
		RULE_copy = 84, RULE_copyOptions = 85, RULE_copyGenericOptList = 86, RULE_copyGenericOptElem = 87, 
		RULE_copyGenericOptArg = 88, RULE_copyGenericOptArgList = 89, RULE_copyGenericOptArgListItem = 90, 
		RULE_copyOptList = 91, RULE_copyOptItem = 92, RULE_copyDelimiter = 93, 
		RULE_deallocate = 94, RULE_fetch = 95, RULE_fetchArgs = 96, RULE_parameterMarker = 97, 
		RULE_reservedKeyword = 98, RULE_numberLiterals = 99, RULE_literalsType = 100, 
		RULE_identifier = 101, RULE_unicodeEscapes = 102, RULE_uescape = 103, 
		RULE_unreservedWord = 104, RULE_typeFuncNameKeyword = 105, RULE_schemaName = 106, 
		RULE_tableName = 107, RULE_columnName = 108, RULE_owner = 109, RULE_name = 110, 
		RULE_tableNames = 111, RULE_columnNames = 112, RULE_collationName = 113, 
		RULE_indexName = 114, RULE_primaryKey = 115, RULE_logicalOperator = 116, 
		RULE_comparisonOperator = 117, RULE_cursorName = 118, RULE_aExpr = 119, 
		RULE_bExpr = 120, RULE_cExpr = 121, RULE_indirection = 122, RULE_optIndirection = 123, 
		RULE_indirectionEl = 124, RULE_sliceBound = 125, RULE_inExpr = 126, RULE_caseExpr = 127, 
		RULE_whenClauseList = 128, RULE_whenClause = 129, RULE_caseDefault = 130, 
		RULE_caseArg = 131, RULE_columnref = 132, RULE_qualOp = 133, RULE_subqueryOp = 134, 
		RULE_allOp = 135, RULE_op = 136, RULE_mathOperator = 137, RULE_qualAllOp = 138, 
		RULE_ascDesc = 139, RULE_anyOperator = 140, RULE_windowExclusionClause = 141, 
		RULE_row = 142, RULE_explicitRow = 143, RULE_implicitRow = 144, RULE_subType = 145, 
		RULE_arrayExpr = 146, RULE_arrayExprList = 147, RULE_funcArgList = 148, 
		RULE_paramName = 149, RULE_funcArgExpr = 150, RULE_typeList = 151, RULE_funcApplication = 152, 
		RULE_funcName = 153, RULE_aexprConst = 154, RULE_colId = 155, RULE_typeFunctionName = 156, 
		RULE_functionTable = 157, RULE_xmlTable = 158, RULE_xmlTableColumnList = 159, 
		RULE_xmlTableColumnEl = 160, RULE_xmlTableColumnOptionList = 161, RULE_xmlTableColumnOptionEl = 162, 
		RULE_xmlNamespaceList = 163, RULE_xmlNamespaceEl = 164, RULE_funcExpr = 165, 
		RULE_withinGroupClause = 166, RULE_filterClause = 167, RULE_functionExprWindowless = 168, 
		RULE_ordinality = 169, RULE_functionExprCommonSubexpr = 170, RULE_typeName = 171, 
		RULE_simpleTypeName = 172, RULE_exprList = 173, RULE_extractList = 174, 
		RULE_extractArg = 175, RULE_genericType = 176, RULE_typeModifiers = 177, 
		RULE_numeric = 178, RULE_constDatetime = 179, RULE_timezone = 180, RULE_character = 181, 
		RULE_characterWithLength = 182, RULE_characterWithoutLength = 183, RULE_characterClause = 184, 
		RULE_optFloat = 185, RULE_attrs = 186, RULE_attrName = 187, RULE_colLable = 188, 
		RULE_bit = 189, RULE_bitWithLength = 190, RULE_bitWithoutLength = 191, 
		RULE_constInterval = 192, RULE_optInterval = 193, RULE_optArrayBounds = 194, 
		RULE_intervalSecond = 195, RULE_unicodeNormalForm = 196, RULE_trimList = 197, 
		RULE_overlayList = 198, RULE_overlayPlacing = 199, RULE_substrFrom = 200, 
		RULE_substrFor = 201, RULE_positionList = 202, RULE_substrList = 203, 
		RULE_xmlAttributes = 204, RULE_xmlAttributeList = 205, RULE_xmlAttributeEl = 206, 
		RULE_xmlExistsArgument = 207, RULE_xmlPassingMech = 208, RULE_documentOrContent = 209, 
		RULE_xmlWhitespaceOption = 210, RULE_xmlRootVersion = 211, RULE_xmlRootStandalone = 212, 
		RULE_rowsFromItem = 213, RULE_rowsFromList = 214, RULE_columnDefList = 215, 
		RULE_tableFuncElementList = 216, RULE_tableFuncElement = 217, RULE_collateClause = 218, 
		RULE_anyName = 219, RULE_aliasClause = 220, RULE_nameList = 221, RULE_funcAliasClause = 222, 
		RULE_tablesampleClause = 223, RULE_repeatableClause = 224, RULE_allOrDistinct = 225, 
		RULE_sortClause = 226, RULE_sortbyList = 227, RULE_sortby = 228, RULE_nullsOrder = 229, 
		RULE_distinctClause = 230, RULE_distinct = 231, RULE_overClause = 232, 
		RULE_windowName = 233, RULE_indexParams = 234, RULE_indexElemOptions = 235, 
		RULE_indexElem = 236, RULE_collate = 237, RULE_optClass = 238, RULE_reloptions = 239, 
		RULE_reloptionList = 240, RULE_reloptionElem = 241, RULE_defArg = 242, 
		RULE_funcType = 243, RULE_dataType = 244, RULE_dataTypeName = 245, RULE_dataTypeLength = 246, 
		RULE_characterSet = 247, RULE_ignoredIdentifier = 248, RULE_ignoredIdentifiers = 249, 
		RULE_signedIconst = 250, RULE_booleanOrString = 251, RULE_nonReservedWord = 252, 
		RULE_colNameKeyword = 253, RULE_databaseName = 254, RULE_roleSpec = 255, 
		RULE_varName = 256, RULE_varList = 257, RULE_varValue = 258, RULE_zoneValue = 259, 
		RULE_numericOnly = 260, RULE_isoLevel = 261, RULE_columnDef = 262, RULE_colQualList = 263, 
		RULE_colConstraint = 264, RULE_constraintAttr = 265, RULE_colConstraintElem = 266, 
		RULE_parenthesizedSeqOptList = 267, RULE_seqOptList = 268, RULE_seqOptElem = 269, 
		RULE_optColumnList = 270, RULE_columnElem = 271, RULE_columnList = 272, 
		RULE_generatedWhen = 273, RULE_noInherit = 274, RULE_consTableSpace = 275, 
		RULE_definition = 276, RULE_defList = 277, RULE_defElem = 278, RULE_colLabel = 279, 
		RULE_keyActions = 280, RULE_keyDelete = 281, RULE_keyUpdate = 282, RULE_keyAction = 283, 
		RULE_keyMatch = 284, RULE_createGenericOptions = 285, RULE_genericOptionList = 286, 
		RULE_genericOptionElem = 287, RULE_genericOptionArg = 288, RULE_genericOptionName = 289, 
		RULE_replicaIdentity = 290, RULE_operArgtypes = 291, RULE_funcArg = 292, 
		RULE_argClass = 293, RULE_funcArgsList = 294, RULE_nonReservedWordOrSconst = 295, 
		RULE_fileName = 296, RULE_roleList = 297, RULE_setResetClause = 298, RULE_setRest = 299, 
		RULE_transactionModeList = 300, RULE_transactionModeItem = 301, RULE_setRestMore = 302, 
		RULE_encoding = 303, RULE_genericSet = 304, RULE_variableResetStmt = 305, 
		RULE_resetRest = 306, RULE_genericReset = 307, RULE_relationExprList = 308, 
		RULE_commonFuncOptItem = 309, RULE_functionSetResetClause = 310, RULE_rowSecurityCmd = 311, 
		RULE_event = 312, RULE_typeNameList = 313;
	private static String[] makeRuleNames() {
		return new String[] {
			"insert", "insertTarget", "insertRest", "overrideKind", "insertColumnList", 
			"insertColumnItem", "optOnConflict", "optConfExpr", "update", "setClauseList", 
			"setClause", "setTarget", "setTargetList", "returningClause", "delete", 
			"relationExprOptAlias", "usingClause", "select", "selectWithParens", 
			"selectNoParens", "selectClauseN", "simpleSelect", "withClause", "intoClause", 
			"optTempTableName", "cteList", "commonTableExpr", "optMaterialized", 
			"optNameList", "preparableStmt", "forLockingClause", "forLockingItems", 
			"forLockingItem", "nowaitOrSkip", "forLockingStrength", "lockedRelsList", 
			"qualifiedNameList", "qualifiedName", "selectLimit", "valuesClause", 
			"limitClause", "offsetClause", "selectLimitValue", "selectOffsetValue", 
			"selectFetchFirstValue", "rowOrRows", "firstOrNext", "targetList", "targetEl", 
			"groupClause", "groupByList", "groupByItem", "emptyGroupingSet", "rollupClause", 
			"cubeClause", "groupingSetsClause", "windowClause", "windowDefinitionList", 
			"windowDefinition", "windowSpecification", "existingWindowName", "partitionClause", 
			"frameClause", "frameExtent", "frameBound", "optWindowExclusionClause", 
			"alias", "fromClause", "fromList", "tableReference", "joinedTable", "joinType", 
			"joinOuter", "joinQual", "relationExpr", "whereClause", "whereOrCurrentClause", 
			"havingClause", "doStatement", "dostmtOptList", "dostmtOptItem", "lock", 
			"lockType", "checkpoint", "copy", "copyOptions", "copyGenericOptList", 
			"copyGenericOptElem", "copyGenericOptArg", "copyGenericOptArgList", "copyGenericOptArgListItem", 
			"copyOptList", "copyOptItem", "copyDelimiter", "deallocate", "fetch", 
			"fetchArgs", "parameterMarker", "reservedKeyword", "numberLiterals", 
			"literalsType", "identifier", "unicodeEscapes", "uescape", "unreservedWord", 
			"typeFuncNameKeyword", "schemaName", "tableName", "columnName", "owner", 
			"name", "tableNames", "columnNames", "collationName", "indexName", "primaryKey", 
			"logicalOperator", "comparisonOperator", "cursorName", "aExpr", "bExpr", 
			"cExpr", "indirection", "optIndirection", "indirectionEl", "sliceBound", 
			"inExpr", "caseExpr", "whenClauseList", "whenClause", "caseDefault", 
			"caseArg", "columnref", "qualOp", "subqueryOp", "allOp", "op", "mathOperator", 
			"qualAllOp", "ascDesc", "anyOperator", "windowExclusionClause", "row", 
			"explicitRow", "implicitRow", "subType", "arrayExpr", "arrayExprList", 
			"funcArgList", "paramName", "funcArgExpr", "typeList", "funcApplication", 
			"funcName", "aexprConst", "colId", "typeFunctionName", "functionTable", 
			"xmlTable", "xmlTableColumnList", "xmlTableColumnEl", "xmlTableColumnOptionList", 
			"xmlTableColumnOptionEl", "xmlNamespaceList", "xmlNamespaceEl", "funcExpr", 
			"withinGroupClause", "filterClause", "functionExprWindowless", "ordinality", 
			"functionExprCommonSubexpr", "typeName", "simpleTypeName", "exprList", 
			"extractList", "extractArg", "genericType", "typeModifiers", "numeric", 
			"constDatetime", "timezone", "character", "characterWithLength", "characterWithoutLength", 
			"characterClause", "optFloat", "attrs", "attrName", "colLable", "bit", 
			"bitWithLength", "bitWithoutLength", "constInterval", "optInterval", 
			"optArrayBounds", "intervalSecond", "unicodeNormalForm", "trimList", 
			"overlayList", "overlayPlacing", "substrFrom", "substrFor", "positionList", 
			"substrList", "xmlAttributes", "xmlAttributeList", "xmlAttributeEl", 
			"xmlExistsArgument", "xmlPassingMech", "documentOrContent", "xmlWhitespaceOption", 
			"xmlRootVersion", "xmlRootStandalone", "rowsFromItem", "rowsFromList", 
			"columnDefList", "tableFuncElementList", "tableFuncElement", "collateClause", 
			"anyName", "aliasClause", "nameList", "funcAliasClause", "tablesampleClause", 
			"repeatableClause", "allOrDistinct", "sortClause", "sortbyList", "sortby", 
			"nullsOrder", "distinctClause", "distinct", "overClause", "windowName", 
			"indexParams", "indexElemOptions", "indexElem", "collate", "optClass", 
			"reloptions", "reloptionList", "reloptionElem", "defArg", "funcType", 
			"dataType", "dataTypeName", "dataTypeLength", "characterSet", "ignoredIdentifier", 
			"ignoredIdentifiers", "signedIconst", "booleanOrString", "nonReservedWord", 
			"colNameKeyword", "databaseName", "roleSpec", "varName", "varList", "varValue", 
			"zoneValue", "numericOnly", "isoLevel", "columnDef", "colQualList", "colConstraint", 
			"constraintAttr", "colConstraintElem", "parenthesizedSeqOptList", "seqOptList", 
			"seqOptElem", "optColumnList", "columnElem", "columnList", "generatedWhen", 
			"noInherit", "consTableSpace", "definition", "defList", "defElem", "colLabel", 
			"keyActions", "keyDelete", "keyUpdate", "keyAction", "keyMatch", "createGenericOptions", 
			"genericOptionList", "genericOptionElem", "genericOptionArg", "genericOptionName", 
			"replicaIdentity", "operArgtypes", "funcArg", "argClass", "funcArgsList", 
			"nonReservedWordOrSconst", "fileName", "roleList", "setResetClause", 
			"setRest", "transactionModeList", "transactionModeItem", "setRestMore", 
			"encoding", "genericSet", "variableResetStmt", "resetRest", "genericReset", 
			"relationExprList", "commonFuncOptItem", "functionSetResetClause", "rowSecurityCmd", 
			"event", "typeNameList"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'skip'", "'U'", "'u'", "'&&'", "'||'", "'!'", "'~'", "'|'", "'&'", 
			"'<<'", "'>>'", "'^'", "'%'", "':'", "'+'", "'-'", "'*'", "'/'", "'\\'", 
			"'.'", "'.*'", "'<=>'", "'=='", "'='", "':='", null, "'>'", "'>='", "'<'", 
			"'<='", "'#'", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "'\"'", 
			"'''", "'`'", "'?'", "'@'", "';'", "'~~'", "'!~~'", "'::'", null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, "'DO NOT MATCH ANY THING, JUST FOR GENERATOR'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, "AND_", "OR_", "NOT_", "TILDE_", "VERTICAL_BAR_", 
			"AMPERSAND_", "SIGNED_LEFT_SHIFT_", "SIGNED_RIGHT_SHIFT_", "CARET_", 
			"MOD_", "COLON_", "PLUS_", "MINUS_", "ASTERISK_", "SLASH_", "BACKSLASH_", 
			"DOT_", "DOT_ASTERISK_", "SAFE_EQ_", "DEQ_", "EQ_", "CQ_", "NEQ_", "GT_", 
			"GTE_", "LT_", "LTE_", "POUND_", "LP_", "RP_", "LBE_", "RBE_", "LBT_", 
			"RBT_", "COMMA_", "DQ_", "SQ_", "BQ_", "QUESTION_", "AT_", "SEMI_", "TILDE_TILDE_", 
			"NOT_TILDE_TILDE_", "TYPE_CAST_", "WS", "SELECT", "INSERT", "UPDATE", 
			"DELETE", "CREATE", "ALTER", "DROP", "TRUNCATE", "SCHEMA", "GRANT", "REVOKE", 
			"ADD", "SET", "TABLE", "COLUMN", "INDEX", "CONSTRAINT", "PRIMARY", "UNIQUE", 
			"FOREIGN", "KEY", "POSITION", "PRECISION", "FUNCTION", "TRIGGER", "PROCEDURE", 
			"VIEW", "INTO", "VALUES", "WITH", "UNION", "DISTINCT", "CASE", "WHEN", 
			"CAST", "TRIM", "SUBSTRING", "FROM", "NATURAL", "JOIN", "FULL", "INNER", 
			"OUTER", "LEFT", "RIGHT", "CROSS", "USING", "WHERE", "AS", "ON", "IF", 
			"ELSE", "THEN", "FOR", "TO", "AND", "OR", "IS", "NOT", "NULL", "TRUE", 
			"FALSE", "EXISTS", "BETWEEN", "IN", "ALL", "ANY", "LIKE", "ORDER", "GROUP", 
			"BY", "ASC", "DESC", "HAVING", "LIMIT", "OFFSET", "BEGIN", "COMMIT", 
			"ROLLBACK", "SAVEPOINT", "BOOLEAN", "DOUBLE", "CHAR", "CHARACTER", "ARRAY", 
			"INTERVAL", "DATE", "TIME", "TIMESTAMP", "LOCALTIME", "LOCALTIMESTAMP", 
			"YEAR", "QUARTER", "MONTH", "WEEK", "DAY", "HOUR", "MINUTE", "SECOND", 
			"MICROSECOND", "DEFAULT", "CURRENT", "ENABLE", "DISABLE", "CALL", "INSTANCE", 
			"PRESERVE", "DO", "DEFINER", "CURRENT_USER", "SQL", "CASCADED", "LOCAL", 
			"CLOSE", "OPEN", "NEXT", "NAME", "COLLATION", "NAMES", "INTEGER", "REAL", 
			"DECIMAL", "TYPE", "SMALLINT", "BIGINT", "NUMERIC", "TEXT", "REPEATABLE", 
			"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "NULLIF", "VARYING", 
			"NATIONAL", "NCHAR", "VALUE", "BOTH", "LEADING", "TRAILING", "COALESCE", 
			"INTERSECT", "EXCEPT", "TIES", "FETCH", "CUBE", "GROUPING", "SETS", "WINDOW", 
			"OTHERS", "OVERLAPS", "SOME", "AT", "DEC", "END", "FOR_GENERATOR", "ADMIN", 
			"BINARY", "ESCAPE", "EXCLUDE", "MOD", "PARTITION", "ROW", "UNKNOWN", 
			"ALWAYS", "CASCADE", "CHECK", "GENERATED", "ISOLATION", "LEVEL", "NO", 
			"OPTION", "PRIVILEGES", "READ", "REFERENCES", "ROLE", "ROWS", "START", 
			"TRANSACTION", "USER", "ACTION", "CACHE", "CHARACTERISTICS", "CLUSTER", 
			"COLLATE", "COMMENTS", "CONCURRENTLY", "CONNECT", "CONSTRAINTS", "CYCLE", 
			"DATA", "DATABASE", "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEPENDS", 
			"DOMAIN", "EXCLUDING", "EXECUTE", "EXTENDED", "EXTENSION", "EXTERNAL", 
			"EXTRACT", "FILTER", "FIRST", "FOLLOWING", "FORCE", "GLOBAL", "IDENTITY", 
			"IMMEDIATE", "INCLUDING", "INCREMENT", "INDEXES", "INHERIT", "INHERITS", 
			"INITIALLY", "INCLUDE", "LANGUAGE", "LARGE", "LAST", "LOGGED", "MAIN", 
			"MATCH", "MAXVALUE", "MINVALUE", "NOTHING", "NULLS", "OBJECT", "OIDS", 
			"ONLY", "OVER", "OWNED", "OWNER", "PARTIAL", "PLAIN", "PRECEDING", "RANGE", 
			"RENAME", "REPLICA", "RESET", "RESTART", "RESTRICT", "ROUTINE", "RULE", 
			"SECURITY", "SEQUENCE", "SESSION", "SESSION_USER", "SHOW", "SIMPLE", 
			"STATISTICS", "STORAGE", "TABLESPACE", "TEMP", "TEMPORARY", "UNBOUNDED", 
			"UNLOGGED", "USAGE", "VALID", "VALIDATE", "WITHIN", "WITHOUT", "ZONE", 
			"OF", "UESCAPE", "GROUPS", "RECURSIVE", "INT", "INT2", "INT4", "INT8", 
			"FLOAT", "FLOAT4", "FLOAT8", "SMALLSERIAL", "SERIAL", "BIGSERIAL", "MONEY", 
			"VARCHAR", "BYTEA", "ENUM", "POINT", "LINE", "LSEG", "BOX", "PATH", "POLYGON", 
			"CIRCLE", "CIDR", "INET", "MACADDR", "MACADDR8", "BIT", "VARBIT", "TSVECTOR", 
			"TSQUERY", "XML", "JSON", "INT4RANGE", "INT8RANGE", "NUMRANGE", "TSRANGE", 
			"TSTZRANGE", "DATERANGE", "TABLESAMPLE", "ORDINALITY", "CURRENT_ROLE", 
			"CURRENT_CATALOG", "CURRENT_SCHEMA", "NORMALIZE", "OVERLAY", "XMLCONCAT", 
			"XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT", 
			"XMLSERIALIZE", "TREAT", "SETOF", "NFC", "NFD", "NFKC", "NFKD", "XMLATTRIBUTES", 
			"REF", "PASSING", "VERSION", "YES", "STANDALONE", "GREATEST", "LEAST", 
			"MATERIALIZED", "OPERATOR", "SHARE", "ROLLUP", "ILIKE", "SIMILAR", "ISNULL", 
			"NOTNULL", "SYMMETRIC", "DOCUMENT", "NORMALIZED", "ASYMMETRIC", "VARIADIC", 
			"NOWAIT", "LOCKED", "XMLTABLE", "COLUMNS", "CONTENT", "STRIP", "WHITESPACE", 
			"XMLNAMESPACES", "PLACING", "RETURNING", "LATERAL", "NONE", "ANALYSE", 
			"ANALYZE", "CONFLICT", "OVERRIDING", "SYSTEM", "ABORT", "ABSOLUTE", "ACCESS", 
			"AFTER", "AGGREGATE", "ALSO", "ATTACH", "ATTRIBUTE", "BACKWARD", "BEFORE", 
			"ASSERTION", "ASSIGNMENT", "CONTINUE", "CONVERSION", "COPY", "COST", 
			"CSV", "CALLED", "CATALOG", "CHAIN", "CHECKPOINT", "CLASS", "CONFIGURATION", 
			"COMMENT", "DETACH", "DICTIONARY", "EXPRESSION", "INSENSITIVE", "DISCARD", 
			"OFF", "INSTEAD", "EXPLAIN", "INPUT", "INLINE", "PARALLEL", "LEAKPROOF", 
			"COMMITTED", "ENCODING", "IMPLICIT", "DELIMITER", "CURSOR", "EACH", "EVENT", 
			"DEALLOCATE", "CONNECTION", "DECLARE", "FAMILY", "FORWARD", "EXCLUSIVE", 
			"FUNCTIONS", "LOCATION", "LABEL", "DELIMITERS", "HANDLER", "HEADER", 
			"IMMUTABLE", "GRANTED", "HOLD", "MAPPING", "OLD", "METHOD", "LOAD", "LISTEN", 
			"MODE", "MOVE", "PROCEDURAL", "PARSER", "PROCEDURES", "ENCRYPTED", "PUBLICATION", 
			"PROGRAM", "REFERENCING", "PLANS", "REINDEX", "PRIOR", "PASSWORD", "RELATIVE", 
			"QUOTE", "ROUTINES", "REPLACE", "SNAPSHOT", "REFRESH", "PREPARE", "OPTIONS", 
			"IMPORT", "INVOKER", "NEW", "PREPARED", "SCROLL", "SEQUENCES", "SYSID", 
			"REASSIGN", "SERVER", "SUBSCRIPTION", "SEARCH", "SCHEMAS", "RECHECK", 
			"POLICY", "NOTIFY", "LOCK", "RELEASE", "SERIALIZABLE", "RETURNS", "STATEMENT", 
			"STDIN", "STDOUT", "TABLES", "SUPPORT", "STABLE", "TEMPLATE", "UNENCRYPTED", 
			"VIEWS", "UNCOMMITTED", "TRANSFORM", "UNLISTEN", "TRUSTED", "VALIDATOR", 
			"UNTIL", "VACUUM", "VOLATILE", "STORED", "WRITE", "STRICT", "TYPES", 
			"WRAPPER", "WORK", "FREEZE", "AUTHORIZATION", "VERBOSE", "PARAM", "OUT", 
			"INOUT", "IDENTIFIER_", "STRING_", "NUMBER_", "HEX_DIGIT_", "BIT_NUM_"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "DMLStatement.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public DMLStatementParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class InsertContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DMLStatementParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(DMLStatementParser.INTO, 0); }
		public InsertTargetContext insertTarget() {
			return getRuleContext(InsertTargetContext.class,0);
		}
		public InsertRestContext insertRest() {
			return getRuleContext(InsertRestContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public OptOnConflictContext optOnConflict() {
			return getRuleContext(OptOnConflictContext.class,0);
		}
		public ReturningClauseContext returningClause() {
			return getRuleContext(ReturningClauseContext.class,0);
		}
		public InsertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterInsert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitInsert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitInsert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertContext insert() throws RecognitionException {
		InsertContext _localctx = new InsertContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(629);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(628);
				withClause();
				}
			}

			setState(631);
			match(INSERT);
			setState(632);
			match(INTO);
			setState(633);
			insertTarget();
			setState(634);
			insertRest();
			setState(636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(635);
				optOnConflict();
				}
			}

			setState(639);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(638);
				returningClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertTargetContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DMLStatementParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public InsertTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterInsertTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitInsertTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitInsertTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertTargetContext insertTarget() throws RecognitionException {
		InsertTargetContext _localctx = new InsertTargetContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_insertTarget);
		try {
			setState(646);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(641);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(642);
				qualifiedName();
				setState(643);
				match(AS);
				setState(644);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertRestContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode OVERRIDING() { return getToken(DMLStatementParser.OVERRIDING, 0); }
		public OverrideKindContext overrideKind() {
			return getRuleContext(OverrideKindContext.class,0);
		}
		public TerminalNode VALUE() { return getToken(DMLStatementParser.VALUE, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public InsertColumnListContext insertColumnList() {
			return getRuleContext(InsertColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public TerminalNode DEFAULT() { return getToken(DMLStatementParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(DMLStatementParser.VALUES, 0); }
		public InsertRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertRest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterInsertRest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitInsertRest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitInsertRest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertRestContext insertRest() throws RecognitionException {
		InsertRestContext _localctx = new InsertRestContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_insertRest);
		try {
			setState(669);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(648);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(649);
				match(OVERRIDING);
				setState(650);
				overrideKind();
				setState(651);
				match(VALUE);
				setState(652);
				select();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(654);
				match(LP_);
				setState(655);
				insertColumnList(0);
				setState(656);
				match(RP_);
				setState(657);
				select();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(659);
				match(LP_);
				setState(660);
				insertColumnList(0);
				setState(661);
				match(RP_);
				setState(662);
				match(OVERRIDING);
				setState(663);
				overrideKind();
				setState(664);
				match(VALUE);
				setState(665);
				select();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(667);
				match(DEFAULT);
				setState(668);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverrideKindContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(DMLStatementParser.USER, 0); }
		public TerminalNode SYSTEM() { return getToken(DMLStatementParser.SYSTEM, 0); }
		public OverrideKindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overrideKind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOverrideKind(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOverrideKind(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOverrideKind(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverrideKindContext overrideKind() throws RecognitionException {
		OverrideKindContext _localctx = new OverrideKindContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_overrideKind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(671);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==SYSTEM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertColumnListContext extends ParserRuleContext {
		public InsertColumnItemContext insertColumnItem() {
			return getRuleContext(InsertColumnItemContext.class,0);
		}
		public InsertColumnListContext insertColumnList() {
			return getRuleContext(InsertColumnListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public InsertColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterInsertColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitInsertColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitInsertColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertColumnListContext insertColumnList() throws RecognitionException {
		return insertColumnList(0);
	}

	private InsertColumnListContext insertColumnList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		InsertColumnListContext _localctx = new InsertColumnListContext(_ctx, _parentState);
		InsertColumnListContext _prevctx = _localctx;
		int _startState = 8;
		enterRecursionRule(_localctx, 8, RULE_insertColumnList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(674);
			insertColumnItem();
			}
			_ctx.stop = _input.LT(-1);
			setState(681);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InsertColumnListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_insertColumnList);
					setState(676);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(677);
					match(COMMA_);
					setState(678);
					insertColumnItem();
					}
					} 
				}
				setState(683);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class InsertColumnItemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public InsertColumnItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertColumnItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterInsertColumnItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitInsertColumnItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitInsertColumnItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertColumnItemContext insertColumnItem() throws RecognitionException {
		InsertColumnItemContext _localctx = new InsertColumnItemContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_insertColumnItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(684);
			colId();
			setState(685);
			optIndirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptOnConflictContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DMLStatementParser.ON, 0); }
		public TerminalNode CONFLICT() { return getToken(DMLStatementParser.CONFLICT, 0); }
		public OptConfExprContext optConfExpr() {
			return getRuleContext(OptConfExprContext.class,0);
		}
		public TerminalNode DO() { return getToken(DMLStatementParser.DO, 0); }
		public TerminalNode UPDATE() { return getToken(DMLStatementParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(DMLStatementParser.SET, 0); }
		public SetClauseListContext setClauseList() {
			return getRuleContext(SetClauseListContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode NOTHING() { return getToken(DMLStatementParser.NOTHING, 0); }
		public OptOnConflictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optOnConflict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOptOnConflict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOptOnConflict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOptOnConflict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptOnConflictContext optOnConflict() throws RecognitionException {
		OptOnConflictContext _localctx = new OptOnConflictContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_optOnConflict);
		int _la;
		try {
			setState(703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(687);
				match(ON);
				setState(688);
				match(CONFLICT);
				setState(689);
				optConfExpr();
				setState(690);
				match(DO);
				setState(691);
				match(UPDATE);
				setState(692);
				match(SET);
				setState(693);
				setClauseList(0);
				setState(695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(694);
					whereClause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(697);
				match(ON);
				setState(698);
				match(CONFLICT);
				setState(699);
				optConfExpr();
				setState(700);
				match(DO);
				setState(701);
				match(NOTHING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptConfExprContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public IndexParamsContext indexParams() {
			return getRuleContext(IndexParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode ON() { return getToken(DMLStatementParser.ON, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DMLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptConfExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optConfExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOptConfExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOptConfExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOptConfExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptConfExprContext optConfExpr() throws RecognitionException {
		OptConfExprContext _localctx = new OptConfExprContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_optConfExpr);
		int _la;
		try {
			setState(715);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(705);
				match(LP_);
				setState(706);
				indexParams();
				setState(707);
				match(RP_);
				setState(709);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(708);
					whereClause();
					}
				}

				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(711);
				match(ON);
				setState(712);
				match(CONSTRAINT);
				setState(713);
				name();
				}
				break;
			case DO:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DMLStatementParser.UPDATE, 0); }
		public RelationExprOptAliasContext relationExprOptAlias() {
			return getRuleContext(RelationExprOptAliasContext.class,0);
		}
		public TerminalNode SET() { return getToken(DMLStatementParser.SET, 0); }
		public SetClauseListContext setClauseList() {
			return getRuleContext(SetClauseListContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereOrCurrentClauseContext whereOrCurrentClause() {
			return getRuleContext(WhereOrCurrentClauseContext.class,0);
		}
		public ReturningClauseContext returningClause() {
			return getRuleContext(ReturningClauseContext.class,0);
		}
		public UpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateContext update() throws RecognitionException {
		UpdateContext _localctx = new UpdateContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_update);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(717);
				withClause();
				}
			}

			setState(720);
			match(UPDATE);
			setState(721);
			relationExprOptAlias();
			setState(722);
			match(SET);
			setState(723);
			setClauseList(0);
			setState(725);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(724);
				fromClause();
				}
			}

			setState(728);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(727);
				whereOrCurrentClause();
				}
			}

			setState(731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(730);
				returningClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetClauseListContext extends ParserRuleContext {
		public SetClauseContext setClause() {
			return getRuleContext(SetClauseContext.class,0);
		}
		public SetClauseListContext setClauseList() {
			return getRuleContext(SetClauseListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public SetClauseListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setClauseList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSetClauseList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSetClauseList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSetClauseList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetClauseListContext setClauseList() throws RecognitionException {
		return setClauseList(0);
	}

	private SetClauseListContext setClauseList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SetClauseListContext _localctx = new SetClauseListContext(_ctx, _parentState);
		SetClauseListContext _prevctx = _localctx;
		int _startState = 18;
		enterRecursionRule(_localctx, 18, RULE_setClauseList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(734);
			setClause();
			}
			_ctx.stop = _input.LT(-1);
			setState(741);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,14,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SetClauseListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_setClauseList);
					setState(736);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(737);
					match(COMMA_);
					setState(738);
					setClause();
					}
					} 
				}
				setState(743);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,14,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SetClauseContext extends ParserRuleContext {
		public SetTargetContext setTarget() {
			return getRuleContext(SetTargetContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DMLStatementParser.EQ_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public SetTargetListContext setTargetList() {
			return getRuleContext(SetTargetListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public SetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetClauseContext setClause() throws RecognitionException {
		SetClauseContext _localctx = new SetClauseContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_setClause);
		try {
			setState(754);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(744);
				setTarget();
				setState(745);
				match(EQ_);
				setState(746);
				aExpr(0);
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 2);
				{
				setState(748);
				match(LP_);
				setState(749);
				setTargetList(0);
				setState(750);
				match(RP_);
				setState(751);
				match(EQ_);
				setState(752);
				aExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTargetContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public SetTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSetTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSetTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSetTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTargetContext setTarget() throws RecognitionException {
		SetTargetContext _localctx = new SetTargetContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_setTarget);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(756);
			colId();
			setState(757);
			optIndirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTargetListContext extends ParserRuleContext {
		public SetTargetContext setTarget() {
			return getRuleContext(SetTargetContext.class,0);
		}
		public SetTargetListContext setTargetList() {
			return getRuleContext(SetTargetListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public SetTargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTargetList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSetTargetList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSetTargetList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSetTargetList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTargetListContext setTargetList() throws RecognitionException {
		return setTargetList(0);
	}

	private SetTargetListContext setTargetList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SetTargetListContext _localctx = new SetTargetListContext(_ctx, _parentState);
		SetTargetListContext _prevctx = _localctx;
		int _startState = 24;
		enterRecursionRule(_localctx, 24, RULE_setTargetList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(760);
			setTarget();
			}
			_ctx.stop = _input.LT(-1);
			setState(767);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SetTargetListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_setTargetList);
					setState(762);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(763);
					match(COMMA_);
					setState(764);
					setTarget();
					}
					} 
				}
				setState(769);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ReturningClauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(DMLStatementParser.RETURNING, 0); }
		public TargetListContext targetList() {
			return getRuleContext(TargetListContext.class,0);
		}
		public ReturningClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returningClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterReturningClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitReturningClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitReturningClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturningClauseContext returningClause() throws RecognitionException {
		ReturningClauseContext _localctx = new ReturningClauseContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_returningClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(770);
			match(RETURNING);
			setState(771);
			targetList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DMLStatementParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(DMLStatementParser.FROM, 0); }
		public RelationExprOptAliasContext relationExprOptAlias() {
			return getRuleContext(RelationExprOptAliasContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public UsingClauseContext usingClause() {
			return getRuleContext(UsingClauseContext.class,0);
		}
		public WhereOrCurrentClauseContext whereOrCurrentClause() {
			return getRuleContext(WhereOrCurrentClauseContext.class,0);
		}
		public ReturningClauseContext returningClause() {
			return getRuleContext(ReturningClauseContext.class,0);
		}
		public DeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteContext delete() throws RecognitionException {
		DeleteContext _localctx = new DeleteContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_delete);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(774);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(773);
				withClause();
				}
			}

			setState(776);
			match(DELETE);
			setState(777);
			match(FROM);
			setState(778);
			relationExprOptAlias();
			setState(780);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(779);
				usingClause();
				}
			}

			setState(783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(782);
				whereOrCurrentClause();
				}
			}

			setState(786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(785);
				returningClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationExprOptAliasContext extends ParserRuleContext {
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(DMLStatementParser.AS, 0); }
		public RelationExprOptAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExprOptAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterRelationExprOptAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitRelationExprOptAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitRelationExprOptAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExprOptAliasContext relationExprOptAlias() throws RecognitionException {
		RelationExprOptAliasContext _localctx = new RelationExprOptAliasContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_relationExprOptAlias);
		try {
			setState(796);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(788);
				relationExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(789);
				relationExpr();
				setState(790);
				colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(792);
				relationExpr();
				setState(793);
				match(AS);
				setState(794);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DMLStatementParser.USING, 0); }
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public UsingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterUsingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitUsingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitUsingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingClauseContext usingClause() throws RecognitionException {
		UsingClauseContext _localctx = new UsingClauseContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_usingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(798);
			match(USING);
			setState(799);
			fromList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectContext extends ParserRuleContext {
		public SelectNoParensContext selectNoParens() {
			return getRuleContext(SelectNoParensContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public SelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectContext select() throws RecognitionException {
		SelectContext _localctx = new SelectContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_select);
		try {
			setState(803);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(801);
				selectNoParens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(802);
				selectWithParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectWithParensContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public SelectNoParensContext selectNoParens() {
			return getRuleContext(SelectNoParensContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public SelectWithParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectWithParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSelectWithParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSelectWithParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSelectWithParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectWithParensContext selectWithParens() throws RecognitionException {
		SelectWithParensContext _localctx = new SelectWithParensContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_selectWithParens);
		try {
			setState(813);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(805);
				match(LP_);
				setState(806);
				selectNoParens();
				setState(807);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(809);
				match(LP_);
				setState(810);
				selectWithParens();
				setState(811);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectNoParensContext extends ParserRuleContext {
		public SelectClauseNContext selectClauseN() {
			return getRuleContext(SelectClauseNContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public ForLockingClauseContext forLockingClause() {
			return getRuleContext(ForLockingClauseContext.class,0);
		}
		public SelectLimitContext selectLimit() {
			return getRuleContext(SelectLimitContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public SelectNoParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectNoParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSelectNoParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSelectNoParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSelectNoParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectNoParensContext selectNoParens() throws RecognitionException {
		SelectNoParensContext _localctx = new SelectNoParensContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_selectNoParens);
		int _la;
		try {
			setState(860);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(815);
				selectClauseN(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(816);
				selectClauseN(0);
				setState(817);
				sortClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(819);
				selectClauseN(0);
				setState(821);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(820);
					sortClause();
					}
				}

				setState(823);
				forLockingClause();
				setState(825);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT || _la==OFFSET || _la==FETCH) {
					{
					setState(824);
					selectLimit();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(827);
				selectClauseN(0);
				setState(829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(828);
					sortClause();
					}
				}

				setState(831);
				selectLimit();
				setState(833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(832);
					forLockingClause();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(835);
				withClause();
				setState(836);
				selectClauseN(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(838);
				withClause();
				setState(839);
				selectClauseN(0);
				setState(840);
				sortClause();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(842);
				withClause();
				setState(843);
				selectClauseN(0);
				setState(845);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(844);
					sortClause();
					}
				}

				setState(847);
				forLockingClause();
				setState(849);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT || _la==OFFSET || _la==FETCH) {
					{
					setState(848);
					selectLimit();
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(851);
				withClause();
				setState(852);
				selectClauseN(0);
				setState(854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(853);
					sortClause();
					}
				}

				setState(856);
				selectLimit();
				setState(858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(857);
					forLockingClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectClauseNContext extends ParserRuleContext {
		public SimpleSelectContext simpleSelect() {
			return getRuleContext(SimpleSelectContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public List<SelectClauseNContext> selectClauseN() {
			return getRuleContexts(SelectClauseNContext.class);
		}
		public SelectClauseNContext selectClauseN(int i) {
			return getRuleContext(SelectClauseNContext.class,i);
		}
		public TerminalNode UNION() { return getToken(DMLStatementParser.UNION, 0); }
		public AllOrDistinctContext allOrDistinct() {
			return getRuleContext(AllOrDistinctContext.class,0);
		}
		public TerminalNode INTERSECT() { return getToken(DMLStatementParser.INTERSECT, 0); }
		public TerminalNode EXCEPT() { return getToken(DMLStatementParser.EXCEPT, 0); }
		public SelectClauseNContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClauseN; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSelectClauseN(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSelectClauseN(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSelectClauseN(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseNContext selectClauseN() throws RecognitionException {
		return selectClauseN(0);
	}

	private SelectClauseNContext selectClauseN(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SelectClauseNContext _localctx = new SelectClauseNContext(_ctx, _parentState);
		SelectClauseNContext _prevctx = _localctx;
		int _startState = 40;
		enterRecursionRule(_localctx, 40, RULE_selectClauseN, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(865);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case TABLE:
			case VALUES:
				{
				setState(863);
				simpleSelect();
				}
				break;
			case LP_:
				{
				setState(864);
				selectWithParens();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(887);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,38,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(885);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
					case 1:
						{
						_localctx = new SelectClauseNContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_selectClauseN);
						setState(867);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(868);
						match(UNION);
						setState(870);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==DISTINCT || _la==ALL) {
							{
							setState(869);
							allOrDistinct();
							}
						}

						setState(872);
						selectClauseN(4);
						}
						break;
					case 2:
						{
						_localctx = new SelectClauseNContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_selectClauseN);
						setState(873);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(874);
						match(INTERSECT);
						setState(876);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==DISTINCT || _la==ALL) {
							{
							setState(875);
							allOrDistinct();
							}
						}

						setState(878);
						selectClauseN(3);
						}
						break;
					case 3:
						{
						_localctx = new SelectClauseNContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_selectClauseN);
						setState(879);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(880);
						match(EXCEPT);
						setState(882);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==DISTINCT || _la==ALL) {
							{
							setState(881);
							allOrDistinct();
							}
						}

						setState(884);
						selectClauseN(2);
						}
						break;
					}
					} 
				}
				setState(889);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,38,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SimpleSelectContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(DMLStatementParser.SELECT, 0); }
		public TerminalNode ALL() { return getToken(DMLStatementParser.ALL, 0); }
		public TargetListContext targetList() {
			return getRuleContext(TargetListContext.class,0);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupClauseContext groupClause() {
			return getRuleContext(GroupClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public DistinctClauseContext distinctClause() {
			return getRuleContext(DistinctClauseContext.class,0);
		}
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DMLStatementParser.TABLE, 0); }
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public SimpleSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleSelectContext simpleSelect() throws RecognitionException {
		SimpleSelectContext _localctx = new SimpleSelectContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_simpleSelect);
		try {
			setState(939);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(890);
				match(SELECT);
				setState(892);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					setState(891);
					match(ALL);
					}
					break;
				}
				setState(895);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
				case 1:
					{
					setState(894);
					targetList(0);
					}
					break;
				}
				setState(898);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					setState(897);
					intoClause();
					}
					break;
				}
				setState(901);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					setState(900);
					fromClause();
					}
					break;
				}
				setState(904);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
				case 1:
					{
					setState(903);
					whereClause();
					}
					break;
				}
				setState(907);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
				case 1:
					{
					setState(906);
					groupClause();
					}
					break;
				}
				setState(910);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					setState(909);
					havingClause();
					}
					break;
				}
				setState(913);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
				case 1:
					{
					setState(912);
					windowClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(915);
				match(SELECT);
				setState(916);
				distinctClause();
				setState(917);
				targetList(0);
				setState(919);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					setState(918);
					intoClause();
					}
					break;
				}
				setState(922);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(921);
					fromClause();
					}
					break;
				}
				setState(925);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					setState(924);
					whereClause();
					}
					break;
				}
				setState(928);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
				case 1:
					{
					setState(927);
					groupClause();
					}
					break;
				}
				setState(931);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					setState(930);
					havingClause();
					}
					break;
				}
				setState(934);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
				case 1:
					{
					setState(933);
					windowClause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(936);
				valuesClause(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(937);
				match(TABLE);
				setState(938);
				relationExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DMLStatementParser.WITH, 0); }
		public CteListContext cteList() {
			return getRuleContext(CteListContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(DMLStatementParser.RECURSIVE, 0); }
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitWithClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_withClause);
		try {
			setState(946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(941);
				match(WITH);
				setState(942);
				cteList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(943);
				match(WITH);
				setState(944);
				match(RECURSIVE);
				setState(945);
				cteList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(DMLStatementParser.INTO, 0); }
		public OptTempTableNameContext optTempTableName() {
			return getRuleContext(OptTempTableNameContext.class,0);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterIntoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitIntoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntoClauseContext intoClause() throws RecognitionException {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_intoClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(948);
			match(INTO);
			setState(949);
			optTempTableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTempTableNameContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(DMLStatementParser.TEMPORARY, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DMLStatementParser.TABLE, 0); }
		public TerminalNode TEMP() { return getToken(DMLStatementParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(DMLStatementParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(DMLStatementParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(DMLStatementParser.UNLOGGED, 0); }
		public OptTempTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTempTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOptTempTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOptTempTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOptTempTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTempTableNameContext optTempTableName() throws RecognitionException {
		OptTempTableNameContext _localctx = new OptTempTableNameContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_optTempTableName);
		int _la;
		try {
			setState(995);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(951);
				match(TEMPORARY);
				setState(953);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(952);
					match(TABLE);
					}
				}

				setState(955);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(956);
				match(TEMP);
				setState(958);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(957);
					match(TABLE);
					}
				}

				setState(960);
				qualifiedName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(961);
				match(LOCAL);
				setState(962);
				match(TEMPORARY);
				setState(964);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(963);
					match(TABLE);
					}
				}

				setState(966);
				qualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(967);
				match(LOCAL);
				setState(968);
				match(TEMP);
				setState(970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(969);
					match(TABLE);
					}
				}

				setState(972);
				qualifiedName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(973);
				match(GLOBAL);
				setState(974);
				match(TEMPORARY);
				setState(976);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(975);
					match(TABLE);
					}
				}

				setState(978);
				qualifiedName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(979);
				match(GLOBAL);
				setState(980);
				match(TEMP);
				setState(982);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(981);
					match(TABLE);
					}
				}

				setState(984);
				qualifiedName();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(985);
				match(UNLOGGED);
				setState(987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(986);
					match(TABLE);
					}
				}

				setState(989);
				qualifiedName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(991);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(990);
					match(TABLE);
					}
				}

				setState(993);
				qualifiedName();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(994);
				qualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteListContext extends ParserRuleContext {
		public CommonTableExprContext commonTableExpr() {
			return getRuleContext(CommonTableExprContext.class,0);
		}
		public CteListContext cteList() {
			return getRuleContext(CteListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public CteListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCteList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCteList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCteList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteListContext cteList() throws RecognitionException {
		return cteList(0);
	}

	private CteListContext cteList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		CteListContext _localctx = new CteListContext(_ctx, _parentState);
		CteListContext _prevctx = _localctx;
		int _startState = 50;
		enterRecursionRule(_localctx, 50, RULE_cteList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(998);
			commonTableExpr();
			}
			_ctx.stop = _input.LT(-1);
			setState(1005);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,64,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CteListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_cteList);
					setState(1000);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1001);
					match(COMMA_);
					setState(1002);
					commonTableExpr();
					}
					} 
				}
				setState(1007);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,64,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CommonTableExprContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptNameListContext optNameList() {
			return getRuleContext(OptNameListContext.class,0);
		}
		public TerminalNode AS() { return getToken(DMLStatementParser.AS, 0); }
		public OptMaterializedContext optMaterialized() {
			return getRuleContext(OptMaterializedContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public CommonTableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCommonTableExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCommonTableExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCommonTableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExprContext commonTableExpr() throws RecognitionException {
		CommonTableExprContext _localctx = new CommonTableExprContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_commonTableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1008);
			name();
			setState(1009);
			optNameList();
			setState(1010);
			match(AS);
			setState(1011);
			optMaterialized();
			setState(1012);
			match(LP_);
			setState(1013);
			preparableStmt();
			setState(1014);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptMaterializedContext extends ParserRuleContext {
		public TerminalNode MATERIALIZED() { return getToken(DMLStatementParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(DMLStatementParser.NOT, 0); }
		public OptMaterializedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optMaterialized; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOptMaterialized(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOptMaterialized(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOptMaterialized(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptMaterializedContext optMaterialized() throws RecognitionException {
		OptMaterializedContext _localctx = new OptMaterializedContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_optMaterialized);
		try {
			setState(1020);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATERIALIZED:
				enterOuterAlt(_localctx, 1);
				{
				setState(1016);
				match(MATERIALIZED);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1017);
				match(NOT);
				setState(1018);
				match(MATERIALIZED);
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptNameListContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public OptNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOptNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOptNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOptNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptNameListContext optNameList() throws RecognitionException {
		OptNameListContext _localctx = new OptNameListContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_optNameList);
		try {
			setState(1027);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1022);
				match(LP_);
				setState(1023);
				nameList(0);
				setState(1024);
				match(RP_);
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparableStmtContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public PreparableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparableStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterPreparableStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitPreparableStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitPreparableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparableStmtContext preparableStmt() throws RecognitionException {
		PreparableStmtContext _localctx = new PreparableStmtContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_preparableStmt);
		try {
			setState(1033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1029);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1030);
				insert();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1031);
				update();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1032);
				delete();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForLockingClauseContext extends ParserRuleContext {
		public ForLockingItemsContext forLockingItems() {
			return getRuleContext(ForLockingItemsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DMLStatementParser.FOR, 0); }
		public TerminalNode READ() { return getToken(DMLStatementParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(DMLStatementParser.ONLY, 0); }
		public ForLockingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterForLockingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitForLockingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitForLockingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingClauseContext forLockingClause() throws RecognitionException {
		ForLockingClauseContext _localctx = new ForLockingClauseContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_forLockingClause);
		try {
			setState(1039);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1035);
				forLockingItems(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1036);
				match(FOR);
				setState(1037);
				match(READ);
				setState(1038);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForLockingItemsContext extends ParserRuleContext {
		public ForLockingItemContext forLockingItem() {
			return getRuleContext(ForLockingItemContext.class,0);
		}
		public ForLockingItemsContext forLockingItems() {
			return getRuleContext(ForLockingItemsContext.class,0);
		}
		public ForLockingItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingItems; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterForLockingItems(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitForLockingItems(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitForLockingItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingItemsContext forLockingItems() throws RecognitionException {
		return forLockingItems(0);
	}

	private ForLockingItemsContext forLockingItems(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ForLockingItemsContext _localctx = new ForLockingItemsContext(_ctx, _parentState);
		ForLockingItemsContext _prevctx = _localctx;
		int _startState = 62;
		enterRecursionRule(_localctx, 62, RULE_forLockingItems, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1042);
			forLockingItem();
			}
			_ctx.stop = _input.LT(-1);
			setState(1048);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,69,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ForLockingItemsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_forLockingItems);
					setState(1044);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1045);
					forLockingItem();
					}
					} 
				}
				setState(1050);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,69,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ForLockingItemContext extends ParserRuleContext {
		public ForLockingStrengthContext forLockingStrength() {
			return getRuleContext(ForLockingStrengthContext.class,0);
		}
		public LockedRelsListContext lockedRelsList() {
			return getRuleContext(LockedRelsListContext.class,0);
		}
		public NowaitOrSkipContext nowaitOrSkip() {
			return getRuleContext(NowaitOrSkipContext.class,0);
		}
		public ForLockingItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterForLockingItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitForLockingItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitForLockingItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingItemContext forLockingItem() throws RecognitionException {
		ForLockingItemContext _localctx = new ForLockingItemContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_forLockingItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1051);
			forLockingStrength();
			setState(1053);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				setState(1052);
				lockedRelsList();
				}
				break;
			}
			setState(1056);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				setState(1055);
				nowaitOrSkip();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NowaitOrSkipContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(DMLStatementParser.NOWAIT, 0); }
		public TerminalNode LOCKED() { return getToken(DMLStatementParser.LOCKED, 0); }
		public NowaitOrSkipContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nowaitOrSkip; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterNowaitOrSkip(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitNowaitOrSkip(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitNowaitOrSkip(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NowaitOrSkipContext nowaitOrSkip() throws RecognitionException {
		NowaitOrSkipContext _localctx = new NowaitOrSkipContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_nowaitOrSkip);
		try {
			setState(1061);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOWAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1058);
				match(NOWAIT);
				}
				break;
			case T__0:
				enterOuterAlt(_localctx, 2);
				{
				setState(1059);
				match(T__0);
				setState(1060);
				match(LOCKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForLockingStrengthContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DMLStatementParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(DMLStatementParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(DMLStatementParser.NO, 0); }
		public TerminalNode KEY() { return getToken(DMLStatementParser.KEY, 0); }
		public TerminalNode SHARE() { return getToken(DMLStatementParser.SHARE, 0); }
		public ForLockingStrengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingStrength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterForLockingStrength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitForLockingStrength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitForLockingStrength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingStrengthContext forLockingStrength() throws RecognitionException {
		ForLockingStrengthContext _localctx = new ForLockingStrengthContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_forLockingStrength);
		try {
			setState(1074);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1063);
				match(FOR);
				setState(1064);
				match(UPDATE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1065);
				match(FOR);
				setState(1066);
				match(NO);
				setState(1067);
				match(KEY);
				setState(1068);
				match(UPDATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1069);
				match(FOR);
				setState(1070);
				match(SHARE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1071);
				match(FOR);
				setState(1072);
				match(KEY);
				setState(1073);
				match(SHARE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockedRelsListContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(DMLStatementParser.OF, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public LockedRelsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockedRelsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterLockedRelsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitLockedRelsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitLockedRelsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockedRelsListContext lockedRelsList() throws RecognitionException {
		LockedRelsListContext _localctx = new LockedRelsListContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_lockedRelsList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1076);
			match(OF);
			setState(1077);
			qualifiedNameList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedNameListContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterQualifiedNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitQualifiedNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitQualifiedNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedNameListContext qualifiedNameList() throws RecognitionException {
		return qualifiedNameList(0);
	}

	private QualifiedNameListContext qualifiedNameList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		QualifiedNameListContext _localctx = new QualifiedNameListContext(_ctx, _parentState);
		QualifiedNameListContext _prevctx = _localctx;
		int _startState = 72;
		enterRecursionRule(_localctx, 72, RULE_qualifiedNameList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1080);
			qualifiedName();
			}
			_ctx.stop = _input.LT(-1);
			setState(1087);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_qualifiedNameList);
					setState(1082);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1083);
					match(COMMA_);
					setState(1084);
					qualifiedName();
					}
					} 
				}
				setState(1089);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,74,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class QualifiedNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterQualifiedName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitQualifiedName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitQualifiedName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedNameContext qualifiedName() throws RecognitionException {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_qualifiedName);
		try {
			setState(1094);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1090);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1091);
				colId();
				setState(1092);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLimitContext extends ParserRuleContext {
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public SelectLimitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLimit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSelectLimit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSelectLimit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSelectLimit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLimitContext selectLimit() throws RecognitionException {
		SelectLimitContext _localctx = new SelectLimitContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_selectLimit);
		try {
			setState(1104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1096);
				limitClause();
				setState(1097);
				offsetClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1099);
				offsetClause();
				setState(1100);
				limitClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1102);
				limitClause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1103);
				offsetClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesClauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(DMLStatementParser.VALUES, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public ValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterValuesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitValuesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitValuesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesClauseContext valuesClause() throws RecognitionException {
		return valuesClause(0);
	}

	private ValuesClauseContext valuesClause(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ValuesClauseContext _localctx = new ValuesClauseContext(_ctx, _parentState);
		ValuesClauseContext _prevctx = _localctx;
		int _startState = 78;
		enterRecursionRule(_localctx, 78, RULE_valuesClause, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1107);
			match(VALUES);
			setState(1108);
			match(LP_);
			setState(1109);
			exprList(0);
			setState(1110);
			match(RP_);
			}
			_ctx.stop = _input.LT(-1);
			setState(1120);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ValuesClauseContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_valuesClause);
					setState(1112);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1113);
					match(COMMA_);
					setState(1114);
					match(LP_);
					setState(1115);
					exprList(0);
					setState(1116);
					match(RP_);
					}
					} 
				}
				setState(1122);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,77,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(DMLStatementParser.LIMIT, 0); }
		public SelectLimitValueContext selectLimitValue() {
			return getRuleContext(SelectLimitValueContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public SelectOffsetValueContext selectOffsetValue() {
			return getRuleContext(SelectOffsetValueContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(DMLStatementParser.FETCH, 0); }
		public FirstOrNextContext firstOrNext() {
			return getRuleContext(FirstOrNextContext.class,0);
		}
		public SelectFetchFirstValueContext selectFetchFirstValue() {
			return getRuleContext(SelectFetchFirstValueContext.class,0);
		}
		public RowOrRowsContext rowOrRows() {
			return getRuleContext(RowOrRowsContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(DMLStatementParser.ONLY, 0); }
		public TerminalNode WITH() { return getToken(DMLStatementParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(DMLStatementParser.TIES, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_limitClause);
		try {
			setState(1154);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1123);
				match(LIMIT);
				setState(1124);
				selectLimitValue();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1125);
				match(LIMIT);
				setState(1126);
				selectLimitValue();
				setState(1127);
				match(COMMA_);
				setState(1128);
				selectOffsetValue();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1130);
				match(FETCH);
				setState(1131);
				firstOrNext();
				setState(1132);
				selectFetchFirstValue();
				setState(1133);
				rowOrRows();
				setState(1134);
				match(ONLY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1136);
				match(FETCH);
				setState(1137);
				firstOrNext();
				setState(1138);
				selectFetchFirstValue();
				setState(1139);
				rowOrRows();
				setState(1140);
				match(WITH);
				setState(1141);
				match(TIES);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1143);
				match(FETCH);
				setState(1144);
				firstOrNext();
				setState(1145);
				rowOrRows();
				setState(1146);
				match(ONLY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1148);
				match(FETCH);
				setState(1149);
				firstOrNext();
				setState(1150);
				rowOrRows();
				setState(1151);
				match(WITH);
				setState(1152);
				match(TIES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OffsetClauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(DMLStatementParser.OFFSET, 0); }
		public SelectOffsetValueContext selectOffsetValue() {
			return getRuleContext(SelectOffsetValueContext.class,0);
		}
		public SelectFetchFirstValueContext selectFetchFirstValue() {
			return getRuleContext(SelectFetchFirstValueContext.class,0);
		}
		public RowOrRowsContext rowOrRows() {
			return getRuleContext(RowOrRowsContext.class,0);
		}
		public OffsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offsetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOffsetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOffsetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOffsetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OffsetClauseContext offsetClause() throws RecognitionException {
		OffsetClauseContext _localctx = new OffsetClauseContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_offsetClause);
		try {
			setState(1162);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1156);
				match(OFFSET);
				setState(1157);
				selectOffsetValue();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1158);
				match(OFFSET);
				setState(1159);
				selectFetchFirstValue();
				setState(1160);
				rowOrRows();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLimitValueContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DMLStatementParser.ALL, 0); }
		public SelectLimitValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLimitValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSelectLimitValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSelectLimitValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSelectLimitValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLimitValueContext selectLimitValue() throws RecognitionException {
		SelectLimitValueContext _localctx = new SelectLimitValueContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_selectLimitValue);
		try {
			setState(1166);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case CARET_:
			case MOD_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case LP_:
			case QUESTION_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case UNIQUE:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1164);
				aExpr(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1165);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectOffsetValueContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SelectOffsetValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectOffsetValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSelectOffsetValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSelectOffsetValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSelectOffsetValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectOffsetValueContext selectOffsetValue() throws RecognitionException {
		SelectOffsetValueContext _localctx = new SelectOffsetValueContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_selectOffsetValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1168);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFetchFirstValueContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public TerminalNode PLUS_() { return getToken(DMLStatementParser.PLUS_, 0); }
		public TerminalNode NUMBER_() { return getToken(DMLStatementParser.NUMBER_, 0); }
		public TerminalNode MINUS_() { return getToken(DMLStatementParser.MINUS_, 0); }
		public SelectFetchFirstValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFetchFirstValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSelectFetchFirstValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSelectFetchFirstValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSelectFetchFirstValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFetchFirstValueContext selectFetchFirstValue() throws RecognitionException {
		SelectFetchFirstValueContext _localctx = new SelectFetchFirstValueContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_selectFetchFirstValue);
		try {
			setState(1175);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case LP_:
			case QUESTION_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1170);
				cExpr();
				}
				break;
			case PLUS_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1171);
				match(PLUS_);
				setState(1172);
				match(NUMBER_);
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 3);
				{
				setState(1173);
				match(MINUS_);
				setState(1174);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowOrRowsContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(DMLStatementParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(DMLStatementParser.ROWS, 0); }
		public RowOrRowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowOrRows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterRowOrRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitRowOrRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitRowOrRows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowOrRowsContext rowOrRows() throws RecognitionException {
		RowOrRowsContext _localctx = new RowOrRowsContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_rowOrRows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1177);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FirstOrNextContext extends ParserRuleContext {
		public TerminalNode FIRST() { return getToken(DMLStatementParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(DMLStatementParser.NEXT, 0); }
		public FirstOrNextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_firstOrNext; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFirstOrNext(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFirstOrNext(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFirstOrNext(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FirstOrNextContext firstOrNext() throws RecognitionException {
		FirstOrNextContext _localctx = new FirstOrNextContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_firstOrNext);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1179);
			_la = _input.LA(1);
			if ( !(_la==NEXT || _la==FIRST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TargetListContext extends ParserRuleContext {
		public TargetElContext targetEl() {
			return getRuleContext(TargetElContext.class,0);
		}
		public TargetListContext targetList() {
			return getRuleContext(TargetListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public TargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTargetList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTargetList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTargetList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetListContext targetList() throws RecognitionException {
		return targetList(0);
	}

	private TargetListContext targetList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TargetListContext _localctx = new TargetListContext(_ctx, _parentState);
		TargetListContext _prevctx = _localctx;
		int _startState = 94;
		enterRecursionRule(_localctx, 94, RULE_targetList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1182);
			targetEl();
			}
			_ctx.stop = _input.LT(-1);
			setState(1189);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,82,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TargetListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_targetList);
					setState(1184);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1185);
					match(COMMA_);
					setState(1186);
					targetEl();
					}
					} 
				}
				setState(1191);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,82,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TargetElContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode DOT_ASTERISK_() { return getToken(DMLStatementParser.DOT_ASTERISK_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(DMLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DMLStatementParser.ASTERISK_, 0); }
		public TargetElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTargetEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTargetEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTargetEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetElContext targetEl() throws RecognitionException {
		TargetElContext _localctx = new TargetElContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_targetEl);
		try {
			setState(1204);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1192);
				colId();
				setState(1193);
				match(DOT_ASTERISK_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1195);
				aExpr(0);
				setState(1196);
				match(AS);
				setState(1197);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1199);
				aExpr(0);
				setState(1200);
				identifier();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1202);
				aExpr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1203);
				match(ASTERISK_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(DMLStatementParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(DMLStatementParser.BY, 0); }
		public GroupByListContext groupByList() {
			return getRuleContext(GroupByListContext.class,0);
		}
		public GroupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterGroupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitGroupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitGroupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupClauseContext groupClause() throws RecognitionException {
		GroupClauseContext _localctx = new GroupClauseContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_groupClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1206);
			match(GROUP);
			setState(1207);
			match(BY);
			setState(1208);
			groupByList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByListContext extends ParserRuleContext {
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public GroupByListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterGroupByList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitGroupByList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitGroupByList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByListContext groupByList() throws RecognitionException {
		GroupByListContext _localctx = new GroupByListContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_groupByList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1210);
			groupByItem();
			setState(1215);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,84,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1211);
					match(COMMA_);
					setState(1212);
					groupByItem();
					}
					} 
				}
				setState(1217);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,84,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public EmptyGroupingSetContext emptyGroupingSet() {
			return getRuleContext(EmptyGroupingSetContext.class,0);
		}
		public CubeClauseContext cubeClause() {
			return getRuleContext(CubeClauseContext.class,0);
		}
		public RollupClauseContext rollupClause() {
			return getRuleContext(RollupClauseContext.class,0);
		}
		public GroupingSetsClauseContext groupingSetsClause() {
			return getRuleContext(GroupingSetsClauseContext.class,0);
		}
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitGroupByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_groupByItem);
		try {
			setState(1223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1218);
				aExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1219);
				emptyGroupingSet();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1220);
				cubeClause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1221);
				rollupClause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1222);
				groupingSetsClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyGroupingSetContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public EmptyGroupingSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyGroupingSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterEmptyGroupingSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitEmptyGroupingSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitEmptyGroupingSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyGroupingSetContext emptyGroupingSet() throws RecognitionException {
		EmptyGroupingSetContext _localctx = new EmptyGroupingSetContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_emptyGroupingSet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1225);
			match(LP_);
			setState(1226);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollupClauseContext extends ParserRuleContext {
		public TerminalNode ROLLUP() { return getToken(DMLStatementParser.ROLLUP, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public RollupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterRollupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitRollupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitRollupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollupClauseContext rollupClause() throws RecognitionException {
		RollupClauseContext _localctx = new RollupClauseContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_rollupClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1228);
			match(ROLLUP);
			setState(1229);
			match(LP_);
			setState(1230);
			exprList(0);
			setState(1231);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CubeClauseContext extends ParserRuleContext {
		public TerminalNode CUBE() { return getToken(DMLStatementParser.CUBE, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public CubeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cubeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCubeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCubeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCubeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CubeClauseContext cubeClause() throws RecognitionException {
		CubeClauseContext _localctx = new CubeClauseContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_cubeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1233);
			match(CUBE);
			setState(1234);
			match(LP_);
			setState(1235);
			exprList(0);
			setState(1236);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetsClauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(DMLStatementParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(DMLStatementParser.SETS, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public GroupByListContext groupByList() {
			return getRuleContext(GroupByListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public GroupingSetsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSetsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterGroupingSetsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitGroupingSetsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitGroupingSetsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetsClauseContext groupingSetsClause() throws RecognitionException {
		GroupingSetsClauseContext _localctx = new GroupingSetsClauseContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_groupingSetsClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1238);
			match(GROUPING);
			setState(1239);
			match(SETS);
			setState(1240);
			match(LP_);
			setState(1241);
			groupByList();
			setState(1242);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(DMLStatementParser.WINDOW, 0); }
		public WindowDefinitionListContext windowDefinitionList() {
			return getRuleContext(WindowDefinitionListContext.class,0);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterWindowClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitWindowClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_windowClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1244);
			match(WINDOW);
			setState(1245);
			windowDefinitionList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowDefinitionListContext extends ParserRuleContext {
		public WindowDefinitionContext windowDefinition() {
			return getRuleContext(WindowDefinitionContext.class,0);
		}
		public WindowDefinitionListContext windowDefinitionList() {
			return getRuleContext(WindowDefinitionListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public WindowDefinitionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowDefinitionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterWindowDefinitionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitWindowDefinitionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitWindowDefinitionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowDefinitionListContext windowDefinitionList() throws RecognitionException {
		return windowDefinitionList(0);
	}

	private WindowDefinitionListContext windowDefinitionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		WindowDefinitionListContext _localctx = new WindowDefinitionListContext(_ctx, _parentState);
		WindowDefinitionListContext _prevctx = _localctx;
		int _startState = 114;
		enterRecursionRule(_localctx, 114, RULE_windowDefinitionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1248);
			windowDefinition();
			}
			_ctx.stop = _input.LT(-1);
			setState(1255);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,86,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new WindowDefinitionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_windowDefinitionList);
					setState(1250);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1251);
					match(COMMA_);
					setState(1252);
					windowDefinition();
					}
					} 
				}
				setState(1257);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,86,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class WindowDefinitionContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(DMLStatementParser.AS, 0); }
		public WindowSpecificationContext windowSpecification() {
			return getRuleContext(WindowSpecificationContext.class,0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterWindowDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitWindowDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitWindowDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowDefinitionContext windowDefinition() throws RecognitionException {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_windowDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1258);
			colId();
			setState(1259);
			match(AS);
			setState(1260);
			windowSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecificationContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public ExistingWindowNameContext existingWindowName() {
			return getRuleContext(ExistingWindowNameContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public FrameClauseContext frameClause() {
			return getRuleContext(FrameClauseContext.class,0);
		}
		public WindowSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterWindowSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitWindowSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitWindowSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecificationContext windowSpecification() throws RecognitionException {
		WindowSpecificationContext _localctx = new WindowSpecificationContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_windowSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1262);
			match(LP_);
			setState(1264);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				setState(1263);
				existingWindowName();
				}
				break;
			}
			setState(1267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1266);
				partitionClause();
				}
			}

			setState(1270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(1269);
				sortClause();
				}
			}

			setState(1273);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS || _la==RANGE || _la==GROUPS) {
				{
				setState(1272);
				frameClause();
				}
			}

			setState(1275);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistingWindowNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ExistingWindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existingWindowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterExistingWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitExistingWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitExistingWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistingWindowNameContext existingWindowName() throws RecognitionException {
		ExistingWindowNameContext _localctx = new ExistingWindowNameContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_existingWindowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1277);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DMLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DMLStatementParser.BY, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_partitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1279);
			match(PARTITION);
			setState(1280);
			match(BY);
			setState(1281);
			exprList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameClauseContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(DMLStatementParser.RANGE, 0); }
		public FrameExtentContext frameExtent() {
			return getRuleContext(FrameExtentContext.class,0);
		}
		public OptWindowExclusionClauseContext optWindowExclusionClause() {
			return getRuleContext(OptWindowExclusionClauseContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(DMLStatementParser.ROWS, 0); }
		public TerminalNode GROUPS() { return getToken(DMLStatementParser.GROUPS, 0); }
		public FrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFrameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFrameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameClauseContext frameClause() throws RecognitionException {
		FrameClauseContext _localctx = new FrameClauseContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_frameClause);
		try {
			setState(1295);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RANGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1283);
				match(RANGE);
				setState(1284);
				frameExtent();
				setState(1285);
				optWindowExclusionClause();
				}
				break;
			case ROWS:
				enterOuterAlt(_localctx, 2);
				{
				setState(1287);
				match(ROWS);
				setState(1288);
				frameExtent();
				setState(1289);
				optWindowExclusionClause();
				}
				break;
			case GROUPS:
				enterOuterAlt(_localctx, 3);
				{
				setState(1291);
				match(GROUPS);
				setState(1292);
				frameExtent();
				setState(1293);
				optWindowExclusionClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameExtentContext extends ParserRuleContext {
		public List<FrameBoundContext> frameBound() {
			return getRuleContexts(FrameBoundContext.class);
		}
		public FrameBoundContext frameBound(int i) {
			return getRuleContext(FrameBoundContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(DMLStatementParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DMLStatementParser.AND, 0); }
		public FrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameExtent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFrameExtent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFrameExtent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameExtentContext frameExtent() throws RecognitionException {
		FrameExtentContext _localctx = new FrameExtentContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_frameExtent);
		try {
			setState(1303);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case CARET_:
			case MOD_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case LP_:
			case QUESTION_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case UNIQUE:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1297);
				frameBound();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(1298);
				match(BETWEEN);
				setState(1299);
				frameBound();
				setState(1300);
				match(AND);
				setState(1301);
				frameBound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBoundContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(DMLStatementParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(DMLStatementParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(DMLStatementParser.FOLLOWING, 0); }
		public TerminalNode CURRENT() { return getToken(DMLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DMLStatementParser.ROW, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public FrameBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFrameBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFrameBound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFrameBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBoundContext frameBound() throws RecognitionException {
		FrameBoundContext _localctx = new FrameBoundContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_frameBound);
		try {
			setState(1317);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1305);
				match(UNBOUNDED);
				setState(1306);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1307);
				match(UNBOUNDED);
				setState(1308);
				match(FOLLOWING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1309);
				match(CURRENT);
				setState(1310);
				match(ROW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1311);
				aExpr(0);
				setState(1312);
				match(PRECEDING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1314);
				aExpr(0);
				setState(1315);
				match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptWindowExclusionClauseContext extends ParserRuleContext {
		public TerminalNode EXCLUDE() { return getToken(DMLStatementParser.EXCLUDE, 0); }
		public TerminalNode CURRENT() { return getToken(DMLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DMLStatementParser.ROW, 0); }
		public TerminalNode GROUP() { return getToken(DMLStatementParser.GROUP, 0); }
		public TerminalNode TIES() { return getToken(DMLStatementParser.TIES, 0); }
		public TerminalNode NO() { return getToken(DMLStatementParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(DMLStatementParser.OTHERS, 0); }
		public OptWindowExclusionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optWindowExclusionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOptWindowExclusionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOptWindowExclusionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOptWindowExclusionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptWindowExclusionClauseContext optWindowExclusionClause() throws RecognitionException {
		OptWindowExclusionClauseContext _localctx = new OptWindowExclusionClauseContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_optWindowExclusionClause);
		try {
			setState(1330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1319);
				match(EXCLUDE);
				setState(1320);
				match(CURRENT);
				setState(1321);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1322);
				match(EXCLUDE);
				setState(1323);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1324);
				match(EXCLUDE);
				setState(1325);
				match(TIES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1326);
				match(EXCLUDE);
				setState(1327);
				match(NO);
				setState(1328);
				match(OTHERS);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(DMLStatementParser.STRING_, 0); }
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alias);
		try {
			setState(1334);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1332);
				identifier();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1333);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(DMLStatementParser.FROM, 0); }
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1336);
			match(FROM);
			setState(1337);
			fromList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromListContext extends ParserRuleContext {
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public FromListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFromList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFromList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFromList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromListContext fromList() throws RecognitionException {
		return fromList(0);
	}

	private FromListContext fromList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		FromListContext _localctx = new FromListContext(_ctx, _parentState);
		FromListContext _prevctx = _localctx;
		int _startState = 136;
		enterRecursionRule(_localctx, 136, RULE_fromList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1340);
			tableReference(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(1347);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,96,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FromListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_fromList);
					setState(1342);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1343);
					match(COMMA_);
					setState(1344);
					tableReference(0);
					}
					} 
				}
				setState(1349);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,96,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableReferenceContext extends ParserRuleContext {
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public AliasClauseContext aliasClause() {
			return getRuleContext(AliasClauseContext.class,0);
		}
		public TablesampleClauseContext tablesampleClause() {
			return getRuleContext(TablesampleClauseContext.class,0);
		}
		public FunctionTableContext functionTable() {
			return getRuleContext(FunctionTableContext.class,0);
		}
		public FuncAliasClauseContext funcAliasClause() {
			return getRuleContext(FuncAliasClauseContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(DMLStatementParser.LATERAL, 0); }
		public XmlTableContext xmlTable() {
			return getRuleContext(XmlTableContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public JoinedTableContext joinedTable() {
			return getRuleContext(JoinedTableContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		return tableReference(0);
	}

	private TableReferenceContext tableReference(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, _parentState);
		TableReferenceContext _prevctx = _localctx;
		int _startState = 138;
		enterRecursionRule(_localctx, 138, RULE_tableReference, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1395);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				setState(1351);
				relationExpr();
				setState(1353);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
				case 1:
					{
					setState(1352);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(1355);
				relationExpr();
				setState(1357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INDEX - 64)) | (1L << (KEY - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (AS - 64)) | (1L << (IF - 64)) | (1L << (BY - 64)) | (1L << (BEGIN - 64)) | (1L << (COMMIT - 64)) | (1L << (ROLLBACK - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (SAVEPOINT - 128)) | (1L << (DOUBLE - 128)) | (1L << (YEAR - 128)) | (1L << (MONTH - 128)) | (1L << (DAY - 128)) | (1L << (HOUR - 128)) | (1L << (MINUTE - 128)) | (1L << (SECOND - 128)) | (1L << (CURRENT - 128)) | (1L << (ENABLE - 128)) | (1L << (DISABLE - 128)) | (1L << (CALL - 128)) | (1L << (PRESERVE - 128)) | (1L << (DEFINER - 128)) | (1L << (SQL - 128)) | (1L << (CASCADED - 128)) | (1L << (LOCAL - 128)) | (1L << (CLOSE - 128)) | (1L << (NEXT - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (TYPE - 128)) | (1L << (TEXT - 128)) | (1L << (REPEATABLE - 128)) | (1L << (VARYING - 128)) | (1L << (VALUE - 128)) | (1L << (TIES - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (CUBE - 193)) | (1L << (SETS - 193)) | (1L << (OTHERS - 193)) | (1L << (AT - 193)) | (1L << (ADMIN - 193)) | (1L << (ESCAPE - 193)) | (1L << (EXCLUDE - 193)) | (1L << (PARTITION - 193)) | (1L << (UNKNOWN - 193)) | (1L << (ALWAYS - 193)) | (1L << (CASCADE - 193)) | (1L << (GENERATED - 193)) | (1L << (ISOLATION - 193)) | (1L << (LEVEL - 193)) | (1L << (NO - 193)) | (1L << (OPTION - 193)) | (1L << (PRIVILEGES - 193)) | (1L << (READ - 193)) | (1L << (ROLE - 193)) | (1L << (ROWS - 193)) | (1L << (START - 193)) | (1L << (TRANSACTION - 193)) | (1L << (ACTION - 193)) | (1L << (CACHE - 193)) | (1L << (CHARACTERISTICS - 193)) | (1L << (CLUSTER - 193)) | (1L << (COMMENTS - 193)) | (1L << (CONSTRAINTS - 193)) | (1L << (CYCLE - 193)) | (1L << (DATA - 193)) | (1L << (DATABASE - 193)) | (1L << (DEFAULTS - 193)) | (1L << (DEFERRED - 193)) | (1L << (DEPENDS - 193)) | (1L << (DOMAIN - 193)) | (1L << (EXCLUDING - 193)) | (1L << (EXECUTE - 193)) | (1L << (EXTENSION - 193)) | (1L << (EXTERNAL - 193)) | (1L << (FILTER - 193)) | (1L << (FIRST - 193)) | (1L << (FOLLOWING - 193)) | (1L << (FORCE - 193)) | (1L << (GLOBAL - 193)) | (1L << (IDENTITY - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (IMMEDIATE - 257)) | (1L << (INCLUDING - 257)) | (1L << (INCREMENT - 257)) | (1L << (INDEXES - 257)) | (1L << (INHERIT - 257)) | (1L << (INHERITS - 257)) | (1L << (INCLUDE - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LARGE - 257)) | (1L << (LAST - 257)) | (1L << (LOGGED - 257)) | (1L << (MATCH - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MINVALUE - 257)) | (1L << (NOTHING - 257)) | (1L << (NULLS - 257)) | (1L << (OBJECT - 257)) | (1L << (OIDS - 257)) | (1L << (OVER - 257)) | (1L << (OWNED - 257)) | (1L << (OWNER - 257)) | (1L << (PARTIAL - 257)) | (1L << (PRECEDING - 257)) | (1L << (RANGE - 257)) | (1L << (RENAME - 257)) | (1L << (REPLICA - 257)) | (1L << (RESET - 257)) | (1L << (RESTART - 257)) | (1L << (RESTRICT - 257)) | (1L << (ROUTINE - 257)) | (1L << (RULE - 257)) | (1L << (SECURITY - 257)) | (1L << (SEQUENCE - 257)) | (1L << (SESSION - 257)) | (1L << (SHOW - 257)) | (1L << (SIMPLE - 257)) | (1L << (STATISTICS - 257)) | (1L << (STORAGE - 257)) | (1L << (TABLESPACE - 257)) | (1L << (TEMP - 257)) | (1L << (TEMPORARY - 257)) | (1L << (UNBOUNDED - 257)) | (1L << (UNLOGGED - 257)) | (1L << (VALID - 257)) | (1L << (VALIDATE - 257)) | (1L << (WITHIN - 257)) | (1L << (WITHOUT - 257)) | (1L << (ZONE - 257)) | (1L << (OF - 257)) | (1L << (UESCAPE - 257)) | (1L << (GROUPS - 257)) | (1L << (RECURSIVE - 257)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (ENUM - 328)) | (1L << (XML - 328)) | (1L << (ORDINALITY - 328)) | (1L << (NFC - 328)) | (1L << (NFD - 328)) | (1L << (NFKC - 328)) | (1L << (NFKD - 328)) | (1L << (REF - 328)) | (1L << (PASSING - 328)) | (1L << (VERSION - 328)) | (1L << (YES - 328)) | (1L << (STANDALONE - 328)) | (1L << (MATERIALIZED - 328)) | (1L << (OPERATOR - 328)) | (1L << (SHARE - 328)) | (1L << (ROLLUP - 328)) | (1L << (DOCUMENT - 328)) | (1L << (NORMALIZED - 328)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (NOWAIT - 394)) | (1L << (LOCKED - 394)) | (1L << (COLUMNS - 394)) | (1L << (CONTENT - 394)) | (1L << (STRIP - 394)) | (1L << (WHITESPACE - 394)) | (1L << (CONFLICT - 394)) | (1L << (OVERRIDING - 394)) | (1L << (SYSTEM - 394)) | (1L << (ABORT - 394)) | (1L << (ABSOLUTE - 394)) | (1L << (ACCESS - 394)) | (1L << (AFTER - 394)) | (1L << (AGGREGATE - 394)) | (1L << (ALSO - 394)) | (1L << (ATTACH - 394)) | (1L << (ATTRIBUTE - 394)) | (1L << (BACKWARD - 394)) | (1L << (BEFORE - 394)) | (1L << (ASSERTION - 394)) | (1L << (ASSIGNMENT - 394)) | (1L << (CONTINUE - 394)) | (1L << (CONVERSION - 394)) | (1L << (COPY - 394)) | (1L << (COST - 394)) | (1L << (CSV - 394)) | (1L << (CALLED - 394)) | (1L << (CATALOG - 394)) | (1L << (CHAIN - 394)) | (1L << (CHECKPOINT - 394)) | (1L << (CLASS - 394)) | (1L << (CONFIGURATION - 394)) | (1L << (COMMENT - 394)) | (1L << (DETACH - 394)) | (1L << (DICTIONARY - 394)) | (1L << (EXPRESSION - 394)) | (1L << (INSENSITIVE - 394)) | (1L << (DISCARD - 394)) | (1L << (OFF - 394)) | (1L << (INSTEAD - 394)) | (1L << (EXPLAIN - 394)) | (1L << (INPUT - 394)) | (1L << (INLINE - 394)) | (1L << (PARALLEL - 394)) | (1L << (LEAKPROOF - 394)) | (1L << (COMMITTED - 394)) | (1L << (ENCODING - 394)) | (1L << (IMPLICIT - 394)) | (1L << (DELIMITER - 394)) | (1L << (CURSOR - 394)) | (1L << (EACH - 394)) | (1L << (EVENT - 394)) | (1L << (DEALLOCATE - 394)) | (1L << (CONNECTION - 394)) | (1L << (DECLARE - 394)) | (1L << (FAMILY - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (FORWARD - 458)) | (1L << (EXCLUSIVE - 458)) | (1L << (FUNCTIONS - 458)) | (1L << (LOCATION - 458)) | (1L << (LABEL - 458)) | (1L << (DELIMITERS - 458)) | (1L << (HANDLER - 458)) | (1L << (HEADER - 458)) | (1L << (IMMUTABLE - 458)) | (1L << (GRANTED - 458)) | (1L << (HOLD - 458)) | (1L << (MAPPING - 458)) | (1L << (OLD - 458)) | (1L << (METHOD - 458)) | (1L << (LOAD - 458)) | (1L << (LISTEN - 458)) | (1L << (MODE - 458)) | (1L << (MOVE - 458)) | (1L << (PROCEDURAL - 458)) | (1L << (PARSER - 458)) | (1L << (PROCEDURES - 458)) | (1L << (ENCRYPTED - 458)) | (1L << (PUBLICATION - 458)) | (1L << (PROGRAM - 458)) | (1L << (REFERENCING - 458)) | (1L << (PLANS - 458)) | (1L << (REINDEX - 458)) | (1L << (PRIOR - 458)) | (1L << (PASSWORD - 458)) | (1L << (RELATIVE - 458)) | (1L << (QUOTE - 458)) | (1L << (ROUTINES - 458)) | (1L << (REPLACE - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (REFRESH - 458)) | (1L << (PREPARE - 458)) | (1L << (OPTIONS - 458)) | (1L << (IMPORT - 458)) | (1L << (INVOKER - 458)) | (1L << (NEW - 458)) | (1L << (PREPARED - 458)) | (1L << (SCROLL - 458)) | (1L << (SEQUENCES - 458)) | (1L << (SYSID - 458)) | (1L << (REASSIGN - 458)) | (1L << (SERVER - 458)) | (1L << (SUBSCRIPTION - 458)) | (1L << (SEARCH - 458)) | (1L << (SCHEMAS - 458)) | (1L << (RECHECK - 458)) | (1L << (POLICY - 458)) | (1L << (NOTIFY - 458)) | (1L << (LOCK - 458)) | (1L << (RELEASE - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (RETURNS - 458)) | (1L << (STATEMENT - 458)) | (1L << (STDIN - 458)) | (1L << (STDOUT - 458)) | (1L << (TABLES - 458)) | (1L << (SUPPORT - 458)) | (1L << (STABLE - 458)) | (1L << (TEMPLATE - 458)) | (1L << (UNENCRYPTED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (VIEWS - 522)) | (1L << (UNCOMMITTED - 522)) | (1L << (TRANSFORM - 522)) | (1L << (UNLISTEN - 522)) | (1L << (TRUSTED - 522)) | (1L << (VALIDATOR - 522)) | (1L << (UNTIL - 522)) | (1L << (VACUUM - 522)) | (1L << (VOLATILE - 522)) | (1L << (STORED - 522)) | (1L << (WRITE - 522)) | (1L << (STRICT - 522)) | (1L << (TYPES - 522)) | (1L << (WRAPPER - 522)) | (1L << (WORK - 522)) | (1L << (IDENTIFIER_ - 522)))) != 0)) {
					{
					setState(1356);
					aliasClause();
					}
				}

				setState(1359);
				tablesampleClause();
				}
				break;
			case 3:
				{
				setState(1361);
				functionTable();
				setState(1363);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
				case 1:
					{
					setState(1362);
					funcAliasClause();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(1365);
				match(LATERAL);
				setState(1366);
				functionTable();
				setState(1368);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
				case 1:
					{
					setState(1367);
					funcAliasClause();
					}
					break;
				}
				}
				break;
			case 5:
				{
				setState(1370);
				xmlTable();
				setState(1372);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
				case 1:
					{
					setState(1371);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 6:
				{
				setState(1374);
				match(LATERAL);
				setState(1375);
				xmlTable();
				setState(1377);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
				case 1:
					{
					setState(1376);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 7:
				{
				setState(1379);
				selectWithParens();
				setState(1381);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
				case 1:
					{
					setState(1380);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 8:
				{
				setState(1383);
				match(LATERAL);
				setState(1384);
				selectWithParens();
				setState(1386);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
				case 1:
					{
					setState(1385);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 9:
				{
				setState(1388);
				match(LP_);
				setState(1389);
				tableReference(0);
				setState(1390);
				joinedTable();
				setState(1391);
				match(RP_);
				setState(1393);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
				case 1:
					{
					setState(1392);
					aliasClause();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(1401);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,107,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableReferenceContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableReference);
					setState(1397);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1398);
					joinedTable();
					}
					} 
				}
				setState(1403);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,107,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class JoinedTableContext extends ParserRuleContext {
		public TerminalNode CROSS() { return getToken(DMLStatementParser.CROSS, 0); }
		public TerminalNode JOIN() { return getToken(DMLStatementParser.JOIN, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public JoinTypeContext joinType() {
			return getRuleContext(JoinTypeContext.class,0);
		}
		public JoinQualContext joinQual() {
			return getRuleContext(JoinQualContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(DMLStatementParser.NATURAL, 0); }
		public JoinedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterJoinedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitJoinedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitJoinedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinedTableContext joinedTable() throws RecognitionException {
		JoinedTableContext _localctx = new JoinedTableContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_joinedTable);
		try {
			setState(1424);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1404);
				match(CROSS);
				setState(1405);
				match(JOIN);
				setState(1406);
				tableReference(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1407);
				joinType();
				setState(1408);
				match(JOIN);
				setState(1409);
				tableReference(0);
				setState(1410);
				joinQual();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1412);
				match(JOIN);
				setState(1413);
				tableReference(0);
				setState(1414);
				joinQual();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1416);
				match(NATURAL);
				setState(1417);
				joinType();
				setState(1418);
				match(JOIN);
				setState(1419);
				tableReference(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1421);
				match(NATURAL);
				setState(1422);
				match(JOIN);
				setState(1423);
				tableReference(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinTypeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(DMLStatementParser.FULL, 0); }
		public JoinOuterContext joinOuter() {
			return getRuleContext(JoinOuterContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(DMLStatementParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(DMLStatementParser.RIGHT, 0); }
		public TerminalNode INNER() { return getToken(DMLStatementParser.INNER, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinTypeContext joinType() throws RecognitionException {
		JoinTypeContext _localctx = new JoinTypeContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_joinType);
		int _la;
		try {
			setState(1439);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1426);
				match(FULL);
				setState(1428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(1427);
					joinOuter();
					}
				}

				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1430);
				match(LEFT);
				setState(1432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(1431);
					joinOuter();
					}
				}

				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1434);
				match(RIGHT);
				setState(1436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(1435);
					joinOuter();
					}
				}

				}
				break;
			case INNER:
				enterOuterAlt(_localctx, 4);
				{
				setState(1438);
				match(INNER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinOuterContext extends ParserRuleContext {
		public TerminalNode OUTER() { return getToken(DMLStatementParser.OUTER, 0); }
		public JoinOuterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinOuter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterJoinOuter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitJoinOuter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitJoinOuter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinOuterContext joinOuter() throws RecognitionException {
		JoinOuterContext _localctx = new JoinOuterContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_joinOuter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1441);
			match(OUTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinQualContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DMLStatementParser.USING, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public TerminalNode ON() { return getToken(DMLStatementParser.ON, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public JoinQualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinQual; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterJoinQual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitJoinQual(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitJoinQual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinQualContext joinQual() throws RecognitionException {
		JoinQualContext _localctx = new JoinQualContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_joinQual);
		try {
			setState(1450);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1443);
				match(USING);
				setState(1444);
				match(LP_);
				setState(1445);
				nameList(0);
				setState(1446);
				match(RP_);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(1448);
				match(ON);
				setState(1449);
				aExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationExprContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DMLStatementParser.ASTERISK_, 0); }
		public TerminalNode ONLY() { return getToken(DMLStatementParser.ONLY, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public RelationExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterRelationExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitRelationExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitRelationExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExprContext relationExpr() throws RecognitionException {
		RelationExprContext _localctx = new RelationExprContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_relationExpr);
		try {
			setState(1463);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1452);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1453);
				qualifiedName();
				setState(1454);
				match(ASTERISK_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1456);
				match(ONLY);
				setState(1457);
				qualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1458);
				match(ONLY);
				setState(1459);
				match(LP_);
				setState(1460);
				qualifiedName();
				setState(1461);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(DMLStatementParser.WHERE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1465);
			match(WHERE);
			setState(1466);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereOrCurrentClauseContext extends ParserRuleContext {
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DMLStatementParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(DMLStatementParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(DMLStatementParser.OF, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public WhereOrCurrentClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereOrCurrentClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterWhereOrCurrentClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitWhereOrCurrentClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitWhereOrCurrentClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereOrCurrentClauseContext whereOrCurrentClause() throws RecognitionException {
		WhereOrCurrentClauseContext _localctx = new WhereOrCurrentClauseContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_whereOrCurrentClause);
		try {
			setState(1473);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1468);
				whereClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1469);
				match(WHERE);
				setState(1470);
				match(CURRENT);
				setState(1471);
				match(OF);
				setState(1472);
				cursorName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(DMLStatementParser.HAVING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1475);
			match(HAVING);
			setState(1476);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(DMLStatementParser.DO, 0); }
		public DostmtOptListContext dostmtOptList() {
			return getRuleContext(DostmtOptListContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitDoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1478);
			match(DO);
			setState(1479);
			dostmtOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DostmtOptListContext extends ParserRuleContext {
		public List<DostmtOptItemContext> dostmtOptItem() {
			return getRuleContexts(DostmtOptItemContext.class);
		}
		public DostmtOptItemContext dostmtOptItem(int i) {
			return getRuleContext(DostmtOptItemContext.class,i);
		}
		public DostmtOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmtOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterDostmtOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitDostmtOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitDostmtOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DostmtOptListContext dostmtOptList() throws RecognitionException {
		DostmtOptListContext _localctx = new DostmtOptListContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_dostmtOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1482); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1481);
				dostmtOptItem();
				}
				}
				setState(1484); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==LANGUAGE || _la==STRING_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DostmtOptItemContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DMLStatementParser.STRING_, 0); }
		public TerminalNode LANGUAGE() { return getToken(DMLStatementParser.LANGUAGE, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public DostmtOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmtOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterDostmtOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitDostmtOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitDostmtOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DostmtOptItemContext dostmtOptItem() throws RecognitionException {
		DostmtOptItemContext _localctx = new DostmtOptItemContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_dostmtOptItem);
		try {
			setState(1489);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1486);
				match(STRING_);
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1487);
				match(LANGUAGE);
				setState(1488);
				nonReservedWordOrSconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(DMLStatementParser.LOCK, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DMLStatementParser.TABLE, 0); }
		public TerminalNode IN() { return getToken(DMLStatementParser.IN, 0); }
		public LockTypeContext lockType() {
			return getRuleContext(LockTypeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(DMLStatementParser.MODE, 0); }
		public TerminalNode NOWAIT() { return getToken(DMLStatementParser.NOWAIT, 0); }
		public LockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterLock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitLock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitLock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockContext lock() throws RecognitionException {
		LockContext _localctx = new LockContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_lock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1491);
			match(LOCK);
			setState(1493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(1492);
				match(TABLE);
				}
			}

			setState(1495);
			relationExprList();
			setState(1500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(1496);
				match(IN);
				setState(1497);
				lockType();
				setState(1498);
				match(MODE);
				}
			}

			setState(1503);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT) {
				{
				setState(1502);
				match(NOWAIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTypeContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(DMLStatementParser.ACCESS, 0); }
		public TerminalNode SHARE() { return getToken(DMLStatementParser.SHARE, 0); }
		public TerminalNode ROW() { return getToken(DMLStatementParser.ROW, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DMLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(DMLStatementParser.UPDATE, 0); }
		public LockTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterLockType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitLockType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitLockType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTypeContext lockType() throws RecognitionException {
		LockTypeContext _localctx = new LockTypeContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_lockType);
		try {
			setState(1521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1505);
				match(ACCESS);
				setState(1506);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1507);
				match(ROW);
				setState(1508);
				match(SHARE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1509);
				match(ROW);
				setState(1510);
				match(EXCLUSIVE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1511);
				match(SHARE);
				setState(1512);
				match(UPDATE);
				setState(1513);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1514);
				match(SHARE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1515);
				match(SHARE);
				setState(1516);
				match(ROW);
				setState(1517);
				match(EXCLUSIVE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1518);
				match(EXCLUSIVE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1519);
				match(ACCESS);
				setState(1520);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckpointContext extends ParserRuleContext {
		public TerminalNode CHECKPOINT() { return getToken(DMLStatementParser.CHECKPOINT, 0); }
		public CheckpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkpoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCheckpoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCheckpoint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCheckpoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckpointContext checkpoint() throws RecognitionException {
		CheckpointContext _localctx = new CheckpointContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_checkpoint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1523);
			match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(DMLStatementParser.COPY, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public CopyOptionsContext copyOptions() {
			return getRuleContext(CopyOptionsContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DMLStatementParser.FROM, 0); }
		public TerminalNode TO() { return getToken(DMLStatementParser.TO, 0); }
		public TerminalNode STRING_() { return getToken(DMLStatementParser.STRING_, 0); }
		public TerminalNode STDIN() { return getToken(DMLStatementParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(DMLStatementParser.STDOUT, 0); }
		public TerminalNode BINARY() { return getToken(DMLStatementParser.BINARY, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public TerminalNode PROGRAM() { return getToken(DMLStatementParser.PROGRAM, 0); }
		public CopyDelimiterContext copyDelimiter() {
			return getRuleContext(CopyDelimiterContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DMLStatementParser.WITH, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public CopyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCopy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCopy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCopy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyContext copy() throws RecognitionException {
		CopyContext _localctx = new CopyContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_copy);
		int _la;
		try {
			setState(1565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1525);
				match(COPY);
				setState(1527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(1526);
					match(BINARY);
					}
				}

				setState(1529);
				qualifiedName();
				setState(1534);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(1530);
					match(LP_);
					setState(1531);
					columnList();
					setState(1532);
					match(RP_);
					}
				}

				setState(1536);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==TO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROGRAM) {
					{
					setState(1537);
					match(PROGRAM);
					}
				}

				setState(1540);
				_la = _input.LA(1);
				if ( !(((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (STDIN - 515)) | (1L << (STDOUT - 515)) | (1L << (STRING_ - 515)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1542);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING || _la==DELIMITERS) {
					{
					setState(1541);
					copyDelimiter();
					}
				}

				setState(1545);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1544);
					match(WITH);
					}
				}

				setState(1547);
				copyOptions();
				setState(1549);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(1548);
					whereClause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1551);
				match(COPY);
				setState(1552);
				match(LP_);
				setState(1553);
				preparableStmt();
				setState(1554);
				match(RP_);
				setState(1555);
				match(TO);
				setState(1557);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROGRAM) {
					{
					setState(1556);
					match(PROGRAM);
					}
				}

				setState(1559);
				_la = _input.LA(1);
				if ( !(((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (STDIN - 515)) | (1L << (STDOUT - 515)) | (1L << (STRING_ - 515)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1561);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1560);
					match(WITH);
					}
				}

				setState(1563);
				copyOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptionsContext extends ParserRuleContext {
		public CopyOptListContext copyOptList() {
			return getRuleContext(CopyOptListContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public CopyGenericOptListContext copyGenericOptList() {
			return getRuleContext(CopyGenericOptListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public CopyOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCopyOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCopyOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCopyOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptionsContext copyOptions() throws RecognitionException {
		CopyOptionsContext _localctx = new CopyOptionsContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_copyOptions);
		try {
			setState(1572);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case WHERE:
			case NULL:
			case BINARY:
			case ESCAPE:
			case FORCE:
			case CSV:
			case ENCODING:
			case DELIMITER:
			case HEADER:
			case QUOTE:
			case FREEZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1567);
				copyOptList();
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1568);
				match(LP_);
				setState(1569);
				copyGenericOptList();
				setState(1570);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptListContext extends ParserRuleContext {
		public List<CopyGenericOptElemContext> copyGenericOptElem() {
			return getRuleContexts(CopyGenericOptElemContext.class);
		}
		public CopyGenericOptElemContext copyGenericOptElem(int i) {
			return getRuleContext(CopyGenericOptElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public CopyGenericOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCopyGenericOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCopyGenericOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCopyGenericOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptListContext copyGenericOptList() throws RecognitionException {
		CopyGenericOptListContext _localctx = new CopyGenericOptListContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_copyGenericOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1574);
			copyGenericOptElem();
			setState(1579);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1575);
				match(COMMA_);
				setState(1576);
				copyGenericOptElem();
				}
				}
				setState(1581);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptElemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public CopyGenericOptArgContext copyGenericOptArg() {
			return getRuleContext(CopyGenericOptArgContext.class,0);
		}
		public CopyGenericOptElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCopyGenericOptElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCopyGenericOptElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCopyGenericOptElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptElemContext copyGenericOptElem() throws RecognitionException {
		CopyGenericOptElemContext _localctx = new CopyGenericOptElemContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_copyGenericOptElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1582);
			colLabel();
			setState(1583);
			copyGenericOptArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptArgContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DMLStatementParser.ASTERISK_, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public CopyGenericOptArgListContext copyGenericOptArgList() {
			return getRuleContext(CopyGenericOptArgListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public CopyGenericOptArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCopyGenericOptArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCopyGenericOptArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCopyGenericOptArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptArgContext copyGenericOptArg() throws RecognitionException {
		CopyGenericOptArgContext _localctx = new CopyGenericOptArgContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_copyGenericOptArg);
		try {
			setState(1592);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1585);
				booleanOrString();
				}
				break;
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1586);
				numericOnly();
				}
				break;
			case ASTERISK_:
				enterOuterAlt(_localctx, 3);
				{
				setState(1587);
				match(ASTERISK_);
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 4);
				{
				setState(1588);
				match(LP_);
				setState(1589);
				copyGenericOptArgList();
				setState(1590);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptArgListContext extends ParserRuleContext {
		public List<CopyGenericOptArgListItemContext> copyGenericOptArgListItem() {
			return getRuleContexts(CopyGenericOptArgListItemContext.class);
		}
		public CopyGenericOptArgListItemContext copyGenericOptArgListItem(int i) {
			return getRuleContext(CopyGenericOptArgListItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public CopyGenericOptArgListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptArgList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCopyGenericOptArgList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCopyGenericOptArgList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCopyGenericOptArgList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptArgListContext copyGenericOptArgList() throws RecognitionException {
		CopyGenericOptArgListContext _localctx = new CopyGenericOptArgListContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_copyGenericOptArgList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1594);
			copyGenericOptArgListItem();
			setState(1599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1595);
				match(COMMA_);
				setState(1596);
				copyGenericOptArgListItem();
				}
				}
				setState(1601);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptArgListItemContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public CopyGenericOptArgListItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptArgListItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCopyGenericOptArgListItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCopyGenericOptArgListItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCopyGenericOptArgListItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptArgListItemContext copyGenericOptArgListItem() throws RecognitionException {
		CopyGenericOptArgListItemContext _localctx = new CopyGenericOptArgListItemContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_copyGenericOptArgListItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1602);
			booleanOrString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptListContext extends ParserRuleContext {
		public List<CopyOptItemContext> copyOptItem() {
			return getRuleContexts(CopyOptItemContext.class);
		}
		public CopyOptItemContext copyOptItem(int i) {
			return getRuleContext(CopyOptItemContext.class,i);
		}
		public CopyOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCopyOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCopyOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCopyOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptListContext copyOptList() throws RecognitionException {
		CopyOptListContext _localctx = new CopyOptListContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_copyOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NULL || ((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (BINARY - 205)) | (1L << (ESCAPE - 205)) | (1L << (FORCE - 205)))) != 0) || ((((_la - 427)) & ~0x3f) == 0 && ((1L << (_la - 427)) & ((1L << (CSV - 427)) | (1L << (ENCODING - 427)) | (1L << (DELIMITER - 427)) | (1L << (HEADER - 427)) | (1L << (QUOTE - 427)))) != 0) || _la==FREEZE) {
				{
				{
				setState(1604);
				copyOptItem();
				}
				}
				setState(1609);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptItemContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(DMLStatementParser.BINARY, 0); }
		public TerminalNode FREEZE() { return getToken(DMLStatementParser.FREEZE, 0); }
		public TerminalNode DELIMITER() { return getToken(DMLStatementParser.DELIMITER, 0); }
		public TerminalNode STRING_() { return getToken(DMLStatementParser.STRING_, 0); }
		public TerminalNode AS() { return getToken(DMLStatementParser.AS, 0); }
		public TerminalNode NULL() { return getToken(DMLStatementParser.NULL, 0); }
		public TerminalNode CSV() { return getToken(DMLStatementParser.CSV, 0); }
		public TerminalNode HEADER() { return getToken(DMLStatementParser.HEADER, 0); }
		public TerminalNode QUOTE() { return getToken(DMLStatementParser.QUOTE, 0); }
		public TerminalNode ESCAPE() { return getToken(DMLStatementParser.ESCAPE, 0); }
		public TerminalNode FORCE() { return getToken(DMLStatementParser.FORCE, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DMLStatementParser.ASTERISK_, 0); }
		public TerminalNode NOT() { return getToken(DMLStatementParser.NOT, 0); }
		public TerminalNode ENCODING() { return getToken(DMLStatementParser.ENCODING, 0); }
		public CopyOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCopyOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCopyOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCopyOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptItemContext copyOptItem() throws RecognitionException {
		CopyOptItemContext _localctx = new CopyOptItemContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_copyOptItem);
		int _la;
		try {
			setState(1649);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1610);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1611);
				match(FREEZE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1612);
				match(DELIMITER);
				setState(1614);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1613);
					match(AS);
					}
				}

				setState(1616);
				match(STRING_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1617);
				match(NULL);
				setState(1619);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1618);
					match(AS);
					}
				}

				setState(1621);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1622);
				match(CSV);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1623);
				match(HEADER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1624);
				match(QUOTE);
				setState(1626);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1625);
					match(AS);
					}
				}

				setState(1628);
				match(STRING_);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1629);
				match(ESCAPE);
				setState(1631);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1630);
					match(AS);
					}
				}

				setState(1633);
				match(STRING_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1634);
				match(FORCE);
				setState(1635);
				match(QUOTE);
				setState(1636);
				columnList();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1637);
				match(FORCE);
				setState(1638);
				match(QUOTE);
				setState(1639);
				match(ASTERISK_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1640);
				match(FORCE);
				setState(1641);
				match(NOT);
				setState(1642);
				match(NULL);
				setState(1643);
				columnList();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1644);
				match(FORCE);
				setState(1645);
				match(NULL);
				setState(1646);
				columnList();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1647);
				match(ENCODING);
				setState(1648);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyDelimiterContext extends ParserRuleContext {
		public TerminalNode DELIMITERS() { return getToken(DMLStatementParser.DELIMITERS, 0); }
		public TerminalNode STRING_() { return getToken(DMLStatementParser.STRING_, 0); }
		public TerminalNode USING() { return getToken(DMLStatementParser.USING, 0); }
		public CopyDelimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyDelimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCopyDelimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCopyDelimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCopyDelimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyDelimiterContext copyDelimiter() throws RecognitionException {
		CopyDelimiterContext _localctx = new CopyDelimiterContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_copyDelimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1652);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1651);
				match(USING);
				}
			}

			setState(1654);
			match(DELIMITERS);
			setState(1655);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocateContext extends ParserRuleContext {
		public TerminalNode DEALLOCATE() { return getToken(DMLStatementParser.DEALLOCATE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DMLStatementParser.ALL, 0); }
		public TerminalNode PREPARE() { return getToken(DMLStatementParser.PREPARE, 0); }
		public DeallocateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterDeallocate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitDeallocate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitDeallocate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocateContext deallocate() throws RecognitionException {
		DeallocateContext _localctx = new DeallocateContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_deallocate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1657);
			match(DEALLOCATE);
			setState(1659);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
			case 1:
				{
				setState(1658);
				match(PREPARE);
				}
				break;
			}
			setState(1663);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(1661);
				name();
				}
				break;
			case ALL:
				{
				setState(1662);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(DMLStatementParser.FETCH, 0); }
		public FetchArgsContext fetchArgs() {
			return getRuleContext(FetchArgsContext.class,0);
		}
		public FetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFetch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFetch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFetch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchContext fetch() throws RecognitionException {
		FetchContext _localctx = new FetchContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_fetch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1665);
			match(FETCH);
			setState(1666);
			fetchArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchArgsContext extends ParserRuleContext {
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DMLStatementParser.FROM, 0); }
		public TerminalNode IN() { return getToken(DMLStatementParser.IN, 0); }
		public TerminalNode NEXT() { return getToken(DMLStatementParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(DMLStatementParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(DMLStatementParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(DMLStatementParser.LAST, 0); }
		public TerminalNode ABSOLUTE() { return getToken(DMLStatementParser.ABSOLUTE, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode RELATIVE() { return getToken(DMLStatementParser.RELATIVE, 0); }
		public TerminalNode ALL() { return getToken(DMLStatementParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(DMLStatementParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(DMLStatementParser.BACKWARD, 0); }
		public FetchArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFetchArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFetchArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFetchArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchArgsContext fetchArgs() throws RecognitionException {
		FetchArgsContext _localctx = new FetchArgsContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_fetchArgs);
		int _la;
		try {
			setState(1752);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1668);
				cursorName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1669);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1670);
				cursorName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1671);
				match(NEXT);
				setState(1673);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1672);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1675);
				cursorName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1676);
				match(PRIOR);
				setState(1678);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1677);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1680);
				cursorName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1681);
				match(FIRST);
				setState(1683);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1682);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1685);
				cursorName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1686);
				match(LAST);
				setState(1688);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1687);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1690);
				cursorName();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1691);
				match(ABSOLUTE);
				setState(1692);
				signedIconst();
				setState(1694);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1693);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1696);
				cursorName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1698);
				match(RELATIVE);
				setState(1699);
				signedIconst();
				setState(1701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1700);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1703);
				cursorName();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1705);
				signedIconst();
				setState(1707);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1706);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1709);
				cursorName();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1711);
				match(ALL);
				setState(1713);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1712);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1715);
				cursorName();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1716);
				match(FORWARD);
				setState(1718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1717);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1720);
				cursorName();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1721);
				match(FORWARD);
				setState(1722);
				signedIconst();
				setState(1724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1723);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1726);
				cursorName();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1728);
				match(FORWARD);
				setState(1729);
				match(ALL);
				setState(1731);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1730);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1733);
				cursorName();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1734);
				match(BACKWARD);
				setState(1736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1735);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1738);
				cursorName();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1739);
				match(BACKWARD);
				setState(1740);
				signedIconst();
				setState(1742);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1741);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1744);
				cursorName();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1746);
				match(BACKWARD);
				setState(1747);
				match(ALL);
				setState(1749);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1748);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1751);
				cursorName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterMarkerContext extends ParserRuleContext {
		public TerminalNode QUESTION_() { return getToken(DMLStatementParser.QUESTION_, 0); }
		public LiteralsTypeContext literalsType() {
			return getRuleContext(LiteralsTypeContext.class,0);
		}
		public ParameterMarkerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterMarker; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterParameterMarker(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitParameterMarker(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitParameterMarker(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterMarkerContext parameterMarker() throws RecognitionException {
		ParameterMarkerContext _localctx = new ParameterMarkerContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_parameterMarker);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1754);
			match(QUESTION_);
			setState(1756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				setState(1755);
				literalsType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReservedKeywordContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(DMLStatementParser.ALL, 0); }
		public TerminalNode ANALYSE() { return getToken(DMLStatementParser.ANALYSE, 0); }
		public TerminalNode ANALYZE() { return getToken(DMLStatementParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(DMLStatementParser.AND, 0); }
		public TerminalNode ANY() { return getToken(DMLStatementParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(DMLStatementParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(DMLStatementParser.AS, 0); }
		public TerminalNode ASC() { return getToken(DMLStatementParser.ASC, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(DMLStatementParser.ASYMMETRIC, 0); }
		public TerminalNode BOTH() { return getToken(DMLStatementParser.BOTH, 0); }
		public TerminalNode CASE() { return getToken(DMLStatementParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(DMLStatementParser.CAST, 0); }
		public TerminalNode CHECK() { return getToken(DMLStatementParser.CHECK, 0); }
		public TerminalNode COLLATE() { return getToken(DMLStatementParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(DMLStatementParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DMLStatementParser.CONSTRAINT, 0); }
		public TerminalNode CREATE() { return getToken(DMLStatementParser.CREATE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(DMLStatementParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(DMLStatementParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(DMLStatementParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(DMLStatementParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DMLStatementParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(DMLStatementParser.CURRENT_USER, 0); }
		public TerminalNode DEFAULT() { return getToken(DMLStatementParser.DEFAULT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(DMLStatementParser.DEFERRABLE, 0); }
		public TerminalNode DESC() { return getToken(DMLStatementParser.DESC, 0); }
		public TerminalNode DISTINCT() { return getToken(DMLStatementParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(DMLStatementParser.DO, 0); }
		public TerminalNode ELSE() { return getToken(DMLStatementParser.ELSE, 0); }
		public TerminalNode END() { return getToken(DMLStatementParser.END, 0); }
		public TerminalNode EXCEPT() { return getToken(DMLStatementParser.EXCEPT, 0); }
		public TerminalNode FALSE() { return getToken(DMLStatementParser.FALSE, 0); }
		public TerminalNode FETCH() { return getToken(DMLStatementParser.FETCH, 0); }
		public TerminalNode FOR() { return getToken(DMLStatementParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(DMLStatementParser.FOREIGN, 0); }
		public TerminalNode FROM() { return getToken(DMLStatementParser.FROM, 0); }
		public TerminalNode GRANT() { return getToken(DMLStatementParser.GRANT, 0); }
		public TerminalNode GROUP() { return getToken(DMLStatementParser.GROUP, 0); }
		public TerminalNode HAVING() { return getToken(DMLStatementParser.HAVING, 0); }
		public TerminalNode IN() { return getToken(DMLStatementParser.IN, 0); }
		public TerminalNode INITIALLY() { return getToken(DMLStatementParser.INITIALLY, 0); }
		public TerminalNode INTERSECT() { return getToken(DMLStatementParser.INTERSECT, 0); }
		public TerminalNode INTO() { return getToken(DMLStatementParser.INTO, 0); }
		public TerminalNode LATERAL() { return getToken(DMLStatementParser.LATERAL, 0); }
		public TerminalNode LEADING() { return getToken(DMLStatementParser.LEADING, 0); }
		public TerminalNode LIMIT() { return getToken(DMLStatementParser.LIMIT, 0); }
		public TerminalNode LOCALTIME() { return getToken(DMLStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(DMLStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode NOT() { return getToken(DMLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DMLStatementParser.NULL, 0); }
		public TerminalNode OFFSET() { return getToken(DMLStatementParser.OFFSET, 0); }
		public TerminalNode ON() { return getToken(DMLStatementParser.ON, 0); }
		public TerminalNode ONLY() { return getToken(DMLStatementParser.ONLY, 0); }
		public TerminalNode OR() { return getToken(DMLStatementParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(DMLStatementParser.ORDER, 0); }
		public TerminalNode PLACING() { return getToken(DMLStatementParser.PLACING, 0); }
		public TerminalNode PRIMARY() { return getToken(DMLStatementParser.PRIMARY, 0); }
		public TerminalNode REFERENCES() { return getToken(DMLStatementParser.REFERENCES, 0); }
		public TerminalNode RETURNING() { return getToken(DMLStatementParser.RETURNING, 0); }
		public TerminalNode SELECT() { return getToken(DMLStatementParser.SELECT, 0); }
		public TerminalNode SESSION_USER() { return getToken(DMLStatementParser.SESSION_USER, 0); }
		public TerminalNode SOME() { return getToken(DMLStatementParser.SOME, 0); }
		public TerminalNode SYMMETRIC() { return getToken(DMLStatementParser.SYMMETRIC, 0); }
		public TerminalNode TABLE() { return getToken(DMLStatementParser.TABLE, 0); }
		public TerminalNode THEN() { return getToken(DMLStatementParser.THEN, 0); }
		public TerminalNode TO() { return getToken(DMLStatementParser.TO, 0); }
		public TerminalNode TRAILING() { return getToken(DMLStatementParser.TRAILING, 0); }
		public TerminalNode TRUE() { return getToken(DMLStatementParser.TRUE, 0); }
		public TerminalNode UNION() { return getToken(DMLStatementParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(DMLStatementParser.UNIQUE, 0); }
		public TerminalNode USER() { return getToken(DMLStatementParser.USER, 0); }
		public TerminalNode USING() { return getToken(DMLStatementParser.USING, 0); }
		public TerminalNode VARIADIC() { return getToken(DMLStatementParser.VARIADIC, 0); }
		public TerminalNode WHEN() { return getToken(DMLStatementParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(DMLStatementParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(DMLStatementParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(DMLStatementParser.WITH, 0); }
		public ReservedKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reservedKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterReservedKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitReservedKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitReservedKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReservedKeywordContext reservedKeyword() throws RecognitionException {
		ReservedKeywordContext _localctx = new ReservedKeywordContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_reservedKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1758);
			_la = _input.LA(1);
			if ( !(((((_la - 49)) & ~0x3f) == 0 && ((1L << (_la - 49)) & ((1L << (SELECT - 49)) | (1L << (CREATE - 49)) | (1L << (GRANT - 49)) | (1L << (TABLE - 49)) | (1L << (COLUMN - 49)) | (1L << (CONSTRAINT - 49)) | (1L << (PRIMARY - 49)) | (1L << (UNIQUE - 49)) | (1L << (FOREIGN - 49)) | (1L << (INTO - 49)) | (1L << (WITH - 49)) | (1L << (UNION - 49)) | (1L << (DISTINCT - 49)) | (1L << (CASE - 49)) | (1L << (WHEN - 49)) | (1L << (CAST - 49)) | (1L << (FROM - 49)) | (1L << (USING - 49)) | (1L << (WHERE - 49)) | (1L << (AS - 49)) | (1L << (ON - 49)) | (1L << (ELSE - 49)) | (1L << (THEN - 49)) | (1L << (FOR - 49)) | (1L << (TO - 49)) | (1L << (AND - 49)) | (1L << (OR - 49)) | (1L << (NOT - 49)) | (1L << (NULL - 49)) | (1L << (TRUE - 49)) | (1L << (FALSE - 49)))) != 0) || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (IN - 113)) | (1L << (ALL - 113)) | (1L << (ANY - 113)) | (1L << (ORDER - 113)) | (1L << (GROUP - 113)) | (1L << (ASC - 113)) | (1L << (DESC - 113)) | (1L << (HAVING - 113)) | (1L << (LIMIT - 113)) | (1L << (OFFSET - 113)) | (1L << (ARRAY - 113)) | (1L << (LOCALTIME - 113)) | (1L << (LOCALTIMESTAMP - 113)) | (1L << (DEFAULT - 113)) | (1L << (DO - 113)) | (1L << (CURRENT_USER - 113)))) != 0) || ((((_la - 177)) & ~0x3f) == 0 && ((1L << (_la - 177)) & ((1L << (CURRENT_DATE - 177)) | (1L << (CURRENT_TIME - 177)) | (1L << (CURRENT_TIMESTAMP - 177)) | (1L << (BOTH - 177)) | (1L << (LEADING - 177)) | (1L << (TRAILING - 177)) | (1L << (INTERSECT - 177)) | (1L << (EXCEPT - 177)) | (1L << (FETCH - 177)) | (1L << (WINDOW - 177)) | (1L << (SOME - 177)) | (1L << (END - 177)) | (1L << (CHECK - 177)) | (1L << (REFERENCES - 177)) | (1L << (USER - 177)) | (1L << (COLLATE - 177)))) != 0) || ((((_la - 241)) & ~0x3f) == 0 && ((1L << (_la - 241)) & ((1L << (DEFERRABLE - 241)) | (1L << (INITIALLY - 241)) | (1L << (ONLY - 241)) | (1L << (SESSION_USER - 241)))) != 0) || ((((_la - 354)) & ~0x3f) == 0 && ((1L << (_la - 354)) & ((1L << (CURRENT_ROLE - 354)) | (1L << (CURRENT_CATALOG - 354)) | (1L << (SYMMETRIC - 354)) | (1L << (ASYMMETRIC - 354)) | (1L << (VARIADIC - 354)) | (1L << (PLACING - 354)) | (1L << (RETURNING - 354)) | (1L << (LATERAL - 354)) | (1L << (ANALYSE - 354)) | (1L << (ANALYZE - 354)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumberLiteralsContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DMLStatementParser.NUMBER_, 0); }
		public TerminalNode MINUS_() { return getToken(DMLStatementParser.MINUS_, 0); }
		public LiteralsTypeContext literalsType() {
			return getRuleContext(LiteralsTypeContext.class,0);
		}
		public NumberLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterNumberLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitNumberLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitNumberLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberLiteralsContext numberLiterals() throws RecognitionException {
		NumberLiteralsContext _localctx = new NumberLiteralsContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_numberLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS_) {
				{
				setState(1760);
				match(MINUS_);
				}
			}

			setState(1763);
			match(NUMBER_);
			setState(1765);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE_CAST_) {
				{
				setState(1764);
				literalsType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralsTypeContext extends ParserRuleContext {
		public TerminalNode TYPE_CAST_() { return getToken(DMLStatementParser.TYPE_CAST_, 0); }
		public TerminalNode IDENTIFIER_() { return getToken(DMLStatementParser.IDENTIFIER_, 0); }
		public LiteralsTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literalsType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterLiteralsType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitLiteralsType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitLiteralsType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralsTypeContext literalsType() throws RecognitionException {
		LiteralsTypeContext _localctx = new LiteralsTypeContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_literalsType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1767);
			match(TYPE_CAST_);
			setState(1768);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DMLStatementParser.IDENTIFIER_, 0); }
		public UnicodeEscapesContext unicodeEscapes() {
			return getRuleContext(UnicodeEscapesContext.class,0);
		}
		public UescapeContext uescape() {
			return getRuleContext(UescapeContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_identifier);
		int _la;
		try {
			setState(1778);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1771);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__1 || _la==T__2) {
					{
					setState(1770);
					unicodeEscapes();
					}
				}

				setState(1773);
				match(IDENTIFIER_);
				setState(1775);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
				case 1:
					{
					setState(1774);
					uescape();
					}
					break;
				}
				}
				break;
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
				enterOuterAlt(_localctx, 2);
				{
				setState(1777);
				unreservedWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnicodeEscapesContext extends ParserRuleContext {
		public TerminalNode AMPERSAND_() { return getToken(DMLStatementParser.AMPERSAND_, 0); }
		public UnicodeEscapesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicodeEscapes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterUnicodeEscapes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitUnicodeEscapes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitUnicodeEscapes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnicodeEscapesContext unicodeEscapes() throws RecognitionException {
		UnicodeEscapesContext _localctx = new UnicodeEscapesContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_unicodeEscapes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1780);
			_la = _input.LA(1);
			if ( !(_la==T__1 || _la==T__2) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1781);
			match(AMPERSAND_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UescapeContext extends ParserRuleContext {
		public TerminalNode UESCAPE() { return getToken(DMLStatementParser.UESCAPE, 0); }
		public TerminalNode STRING_() { return getToken(DMLStatementParser.STRING_, 0); }
		public UescapeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uescape; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterUescape(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitUescape(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitUescape(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UescapeContext uescape() throws RecognitionException {
		UescapeContext _localctx = new UescapeContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_uescape);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1783);
			match(UESCAPE);
			setState(1784);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnreservedWordContext extends ParserRuleContext {
		public TerminalNode ABORT() { return getToken(DMLStatementParser.ABORT, 0); }
		public TerminalNode ABSOLUTE() { return getToken(DMLStatementParser.ABSOLUTE, 0); }
		public TerminalNode ACCESS() { return getToken(DMLStatementParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(DMLStatementParser.ACTION, 0); }
		public TerminalNode ADD() { return getToken(DMLStatementParser.ADD, 0); }
		public TerminalNode ADMIN() { return getToken(DMLStatementParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(DMLStatementParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(DMLStatementParser.AGGREGATE, 0); }
		public TerminalNode ALSO() { return getToken(DMLStatementParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(DMLStatementParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(DMLStatementParser.ALWAYS, 0); }
		public TerminalNode ASSERTION() { return getToken(DMLStatementParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(DMLStatementParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(DMLStatementParser.AT, 0); }
		public TerminalNode ATTACH() { return getToken(DMLStatementParser.ATTACH, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(DMLStatementParser.ATTRIBUTE, 0); }
		public TerminalNode BACKWARD() { return getToken(DMLStatementParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(DMLStatementParser.BEFORE, 0); }
		public TerminalNode BEGIN() { return getToken(DMLStatementParser.BEGIN, 0); }
		public TerminalNode BY() { return getToken(DMLStatementParser.BY, 0); }
		public TerminalNode CACHE() { return getToken(DMLStatementParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(DMLStatementParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(DMLStatementParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(DMLStatementParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(DMLStatementParser.CASCADED, 0); }
		public TerminalNode CATALOG() { return getToken(DMLStatementParser.CATALOG, 0); }
		public TerminalNode CHAIN() { return getToken(DMLStatementParser.CHAIN, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(DMLStatementParser.CHARACTERISTICS, 0); }
		public TerminalNode CHECKPOINT() { return getToken(DMLStatementParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(DMLStatementParser.CLASS, 0); }
		public TerminalNode CLOSE() { return getToken(DMLStatementParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(DMLStatementParser.CLUSTER, 0); }
		public TerminalNode COLUMNS() { return getToken(DMLStatementParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(DMLStatementParser.COMMENT, 0); }
		public TerminalNode COMMENTS() { return getToken(DMLStatementParser.COMMENTS, 0); }
		public TerminalNode COMMIT() { return getToken(DMLStatementParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(DMLStatementParser.COMMITTED, 0); }
		public TerminalNode CONFIGURATION() { return getToken(DMLStatementParser.CONFIGURATION, 0); }
		public TerminalNode CONFLICT() { return getToken(DMLStatementParser.CONFLICT, 0); }
		public TerminalNode CONNECTION() { return getToken(DMLStatementParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(DMLStatementParser.CONSTRAINTS, 0); }
		public TerminalNode CONTENT() { return getToken(DMLStatementParser.CONTENT, 0); }
		public TerminalNode CONTINUE() { return getToken(DMLStatementParser.CONTINUE, 0); }
		public TerminalNode CONVERSION() { return getToken(DMLStatementParser.CONVERSION, 0); }
		public TerminalNode COPY() { return getToken(DMLStatementParser.COPY, 0); }
		public TerminalNode COST() { return getToken(DMLStatementParser.COST, 0); }
		public TerminalNode CSV() { return getToken(DMLStatementParser.CSV, 0); }
		public TerminalNode CUBE() { return getToken(DMLStatementParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(DMLStatementParser.CURRENT, 0); }
		public TerminalNode CURSOR() { return getToken(DMLStatementParser.CURSOR, 0); }
		public TerminalNode CYCLE() { return getToken(DMLStatementParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(DMLStatementParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(DMLStatementParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(DMLStatementParser.DAY, 0); }
		public TerminalNode DEALLOCATE() { return getToken(DMLStatementParser.DEALLOCATE, 0); }
		public TerminalNode DECLARE() { return getToken(DMLStatementParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(DMLStatementParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(DMLStatementParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(DMLStatementParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(DMLStatementParser.DELETE, 0); }
		public TerminalNode DELIMITER() { return getToken(DMLStatementParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(DMLStatementParser.DELIMITERS, 0); }
		public TerminalNode DEPENDS() { return getToken(DMLStatementParser.DEPENDS, 0); }
		public TerminalNode DETACH() { return getToken(DMLStatementParser.DETACH, 0); }
		public TerminalNode DICTIONARY() { return getToken(DMLStatementParser.DICTIONARY, 0); }
		public TerminalNode DISABLE() { return getToken(DMLStatementParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(DMLStatementParser.DISCARD, 0); }
		public TerminalNode DOCUMENT() { return getToken(DMLStatementParser.DOCUMENT, 0); }
		public TerminalNode DOMAIN() { return getToken(DMLStatementParser.DOMAIN, 0); }
		public TerminalNode DOUBLE() { return getToken(DMLStatementParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(DMLStatementParser.DROP, 0); }
		public TerminalNode EACH() { return getToken(DMLStatementParser.EACH, 0); }
		public TerminalNode ENABLE() { return getToken(DMLStatementParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(DMLStatementParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(DMLStatementParser.ENCRYPTED, 0); }
		public TerminalNode ENUM() { return getToken(DMLStatementParser.ENUM, 0); }
		public TerminalNode ESCAPE() { return getToken(DMLStatementParser.ESCAPE, 0); }
		public TerminalNode EVENT() { return getToken(DMLStatementParser.EVENT, 0); }
		public TerminalNode EXCLUDE() { return getToken(DMLStatementParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(DMLStatementParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DMLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTE() { return getToken(DMLStatementParser.EXECUTE, 0); }
		public TerminalNode EXPLAIN() { return getToken(DMLStatementParser.EXPLAIN, 0); }
		public TerminalNode EXPRESSION() { return getToken(DMLStatementParser.EXPRESSION, 0); }
		public TerminalNode EXTENSION() { return getToken(DMLStatementParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(DMLStatementParser.EXTERNAL, 0); }
		public TerminalNode FAMILY() { return getToken(DMLStatementParser.FAMILY, 0); }
		public TerminalNode FILTER() { return getToken(DMLStatementParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(DMLStatementParser.FIRST, 0); }
		public TerminalNode FOLLOWING() { return getToken(DMLStatementParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(DMLStatementParser.FORCE, 0); }
		public TerminalNode FORWARD() { return getToken(DMLStatementParser.FORWARD, 0); }
		public TerminalNode FUNCTION() { return getToken(DMLStatementParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(DMLStatementParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(DMLStatementParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(DMLStatementParser.GLOBAL, 0); }
		public TerminalNode GRANTED() { return getToken(DMLStatementParser.GRANTED, 0); }
		public TerminalNode GROUPS() { return getToken(DMLStatementParser.GROUPS, 0); }
		public TerminalNode HANDLER() { return getToken(DMLStatementParser.HANDLER, 0); }
		public TerminalNode HEADER() { return getToken(DMLStatementParser.HEADER, 0); }
		public TerminalNode HOLD() { return getToken(DMLStatementParser.HOLD, 0); }
		public TerminalNode HOUR() { return getToken(DMLStatementParser.HOUR, 0); }
		public TerminalNode IDENTITY() { return getToken(DMLStatementParser.IDENTITY, 0); }
		public TerminalNode IF() { return getToken(DMLStatementParser.IF, 0); }
		public TerminalNode IMMEDIATE() { return getToken(DMLStatementParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(DMLStatementParser.IMMUTABLE, 0); }
		public TerminalNode IMPLICIT() { return getToken(DMLStatementParser.IMPLICIT, 0); }
		public TerminalNode IMPORT() { return getToken(DMLStatementParser.IMPORT, 0); }
		public TerminalNode INCLUDE() { return getToken(DMLStatementParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(DMLStatementParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(DMLStatementParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(DMLStatementParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(DMLStatementParser.INDEXES, 0); }
		public TerminalNode INHERIT() { return getToken(DMLStatementParser.INHERIT, 0); }
		public TerminalNode INHERITS() { return getToken(DMLStatementParser.INHERITS, 0); }
		public TerminalNode INLINE() { return getToken(DMLStatementParser.INLINE, 0); }
		public TerminalNode INPUT() { return getToken(DMLStatementParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(DMLStatementParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(DMLStatementParser.INSERT, 0); }
		public TerminalNode INSTEAD() { return getToken(DMLStatementParser.INSTEAD, 0); }
		public TerminalNode INVOKER() { return getToken(DMLStatementParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(DMLStatementParser.ISOLATION, 0); }
		public TerminalNode KEY() { return getToken(DMLStatementParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(DMLStatementParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(DMLStatementParser.LANGUAGE, 0); }
		public TerminalNode LARGE() { return getToken(DMLStatementParser.LARGE, 0); }
		public TerminalNode LAST() { return getToken(DMLStatementParser.LAST, 0); }
		public TerminalNode LEAKPROOF() { return getToken(DMLStatementParser.LEAKPROOF, 0); }
		public TerminalNode LEVEL() { return getToken(DMLStatementParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(DMLStatementParser.LISTEN, 0); }
		public TerminalNode LOAD() { return getToken(DMLStatementParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(DMLStatementParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(DMLStatementParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(DMLStatementParser.LOCK, 0); }
		public TerminalNode LOCKED() { return getToken(DMLStatementParser.LOCKED, 0); }
		public TerminalNode LOGGED() { return getToken(DMLStatementParser.LOGGED, 0); }
		public TerminalNode MAPPING() { return getToken(DMLStatementParser.MAPPING, 0); }
		public TerminalNode MATCH() { return getToken(DMLStatementParser.MATCH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DMLStatementParser.MATERIALIZED, 0); }
		public TerminalNode MAXVALUE() { return getToken(DMLStatementParser.MAXVALUE, 0); }
		public TerminalNode METHOD() { return getToken(DMLStatementParser.METHOD, 0); }
		public TerminalNode MINUTE() { return getToken(DMLStatementParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(DMLStatementParser.MINVALUE, 0); }
		public TerminalNode MODE() { return getToken(DMLStatementParser.MODE, 0); }
		public TerminalNode MONTH() { return getToken(DMLStatementParser.MONTH, 0); }
		public TerminalNode MOVE() { return getToken(DMLStatementParser.MOVE, 0); }
		public TerminalNode NAME() { return getToken(DMLStatementParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(DMLStatementParser.NAMES, 0); }
		public TerminalNode NEW() { return getToken(DMLStatementParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(DMLStatementParser.NEXT, 0); }
		public TerminalNode NFC() { return getToken(DMLStatementParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(DMLStatementParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(DMLStatementParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(DMLStatementParser.NFKD, 0); }
		public TerminalNode NO() { return getToken(DMLStatementParser.NO, 0); }
		public TerminalNode NORMALIZED() { return getToken(DMLStatementParser.NORMALIZED, 0); }
		public TerminalNode NOTHING() { return getToken(DMLStatementParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(DMLStatementParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(DMLStatementParser.NOWAIT, 0); }
		public TerminalNode NULLS() { return getToken(DMLStatementParser.NULLS, 0); }
		public TerminalNode OBJECT() { return getToken(DMLStatementParser.OBJECT, 0); }
		public TerminalNode OF() { return getToken(DMLStatementParser.OF, 0); }
		public TerminalNode OFF() { return getToken(DMLStatementParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(DMLStatementParser.OIDS, 0); }
		public TerminalNode OLD() { return getToken(DMLStatementParser.OLD, 0); }
		public TerminalNode OPERATOR() { return getToken(DMLStatementParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(DMLStatementParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(DMLStatementParser.OPTIONS, 0); }
		public TerminalNode ORDINALITY() { return getToken(DMLStatementParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(DMLStatementParser.OTHERS, 0); }
		public TerminalNode OVER() { return getToken(DMLStatementParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(DMLStatementParser.OVERRIDING, 0); }
		public TerminalNode OWNED() { return getToken(DMLStatementParser.OWNED, 0); }
		public TerminalNode OWNER() { return getToken(DMLStatementParser.OWNER, 0); }
		public TerminalNode PARALLEL() { return getToken(DMLStatementParser.PARALLEL, 0); }
		public TerminalNode PARSER() { return getToken(DMLStatementParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(DMLStatementParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(DMLStatementParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(DMLStatementParser.PASSING, 0); }
		public TerminalNode PASSWORD() { return getToken(DMLStatementParser.PASSWORD, 0); }
		public TerminalNode PLANS() { return getToken(DMLStatementParser.PLANS, 0); }
		public TerminalNode POLICY() { return getToken(DMLStatementParser.POLICY, 0); }
		public TerminalNode PRECEDING() { return getToken(DMLStatementParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(DMLStatementParser.PREPARE, 0); }
		public TerminalNode PREPARED() { return getToken(DMLStatementParser.PREPARED, 0); }
		public TerminalNode PRESERVE() { return getToken(DMLStatementParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(DMLStatementParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DMLStatementParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(DMLStatementParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(DMLStatementParser.PROCEDURE, 0); }
		public TerminalNode PROCEDURES() { return getToken(DMLStatementParser.PROCEDURES, 0); }
		public TerminalNode PROGRAM() { return getToken(DMLStatementParser.PROGRAM, 0); }
		public TerminalNode PUBLICATION() { return getToken(DMLStatementParser.PUBLICATION, 0); }
		public TerminalNode QUOTE() { return getToken(DMLStatementParser.QUOTE, 0); }
		public TerminalNode RANGE() { return getToken(DMLStatementParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(DMLStatementParser.READ, 0); }
		public TerminalNode REASSIGN() { return getToken(DMLStatementParser.REASSIGN, 0); }
		public TerminalNode RECHECK() { return getToken(DMLStatementParser.RECHECK, 0); }
		public TerminalNode RECURSIVE() { return getToken(DMLStatementParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(DMLStatementParser.REF, 0); }
		public TerminalNode REFERENCING() { return getToken(DMLStatementParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(DMLStatementParser.REFRESH, 0); }
		public TerminalNode REINDEX() { return getToken(DMLStatementParser.REINDEX, 0); }
		public TerminalNode RELATIVE() { return getToken(DMLStatementParser.RELATIVE, 0); }
		public TerminalNode RELEASE() { return getToken(DMLStatementParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(DMLStatementParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(DMLStatementParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(DMLStatementParser.REPLACE, 0); }
		public TerminalNode REPLICA() { return getToken(DMLStatementParser.REPLICA, 0); }
		public TerminalNode RESET() { return getToken(DMLStatementParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(DMLStatementParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(DMLStatementParser.RESTRICT, 0); }
		public TerminalNode RETURNS() { return getToken(DMLStatementParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(DMLStatementParser.REVOKE, 0); }
		public TerminalNode ROLE() { return getToken(DMLStatementParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(DMLStatementParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(DMLStatementParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(DMLStatementParser.ROUTINE, 0); }
		public TerminalNode ROUTINES() { return getToken(DMLStatementParser.ROUTINES, 0); }
		public TerminalNode ROWS() { return getToken(DMLStatementParser.ROWS, 0); }
		public TerminalNode RULE() { return getToken(DMLStatementParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(DMLStatementParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(DMLStatementParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(DMLStatementParser.SCHEMAS, 0); }
		public TerminalNode SCROLL() { return getToken(DMLStatementParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(DMLStatementParser.SEARCH, 0); }
		public TerminalNode SECOND() { return getToken(DMLStatementParser.SECOND, 0); }
		public TerminalNode SECURITY() { return getToken(DMLStatementParser.SECURITY, 0); }
		public TerminalNode SEQUENCE() { return getToken(DMLStatementParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(DMLStatementParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(DMLStatementParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(DMLStatementParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(DMLStatementParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(DMLStatementParser.SET, 0); }
		public TerminalNode SETS() { return getToken(DMLStatementParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(DMLStatementParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(DMLStatementParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(DMLStatementParser.SIMPLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(DMLStatementParser.SNAPSHOT, 0); }
		public TerminalNode SQL() { return getToken(DMLStatementParser.SQL, 0); }
		public TerminalNode STABLE() { return getToken(DMLStatementParser.STABLE, 0); }
		public TerminalNode STANDALONE() { return getToken(DMLStatementParser.STANDALONE, 0); }
		public TerminalNode START() { return getToken(DMLStatementParser.START, 0); }
		public TerminalNode STATEMENT() { return getToken(DMLStatementParser.STATEMENT, 0); }
		public TerminalNode STATISTICS() { return getToken(DMLStatementParser.STATISTICS, 0); }
		public TerminalNode STDIN() { return getToken(DMLStatementParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(DMLStatementParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(DMLStatementParser.STORAGE, 0); }
		public TerminalNode STORED() { return getToken(DMLStatementParser.STORED, 0); }
		public TerminalNode STRICT() { return getToken(DMLStatementParser.STRICT, 0); }
		public TerminalNode STRIP() { return getToken(DMLStatementParser.STRIP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(DMLStatementParser.SUBSCRIPTION, 0); }
		public TerminalNode SUPPORT() { return getToken(DMLStatementParser.SUPPORT, 0); }
		public TerminalNode SYSID() { return getToken(DMLStatementParser.SYSID, 0); }
		public TerminalNode SYSTEM() { return getToken(DMLStatementParser.SYSTEM, 0); }
		public TerminalNode TABLES() { return getToken(DMLStatementParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(DMLStatementParser.TABLESPACE, 0); }
		public TerminalNode TEMP() { return getToken(DMLStatementParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(DMLStatementParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(DMLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEXT() { return getToken(DMLStatementParser.TEXT, 0); }
		public TerminalNode TIES() { return getToken(DMLStatementParser.TIES, 0); }
		public TerminalNode TRANSACTION() { return getToken(DMLStatementParser.TRANSACTION, 0); }
		public TerminalNode TRANSFORM() { return getToken(DMLStatementParser.TRANSFORM, 0); }
		public TerminalNode TRIGGER() { return getToken(DMLStatementParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(DMLStatementParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(DMLStatementParser.TRUSTED, 0); }
		public TerminalNode TYPE() { return getToken(DMLStatementParser.TYPE, 0); }
		public TerminalNode TYPES() { return getToken(DMLStatementParser.TYPES, 0); }
		public TerminalNode UESCAPE() { return getToken(DMLStatementParser.UESCAPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(DMLStatementParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(DMLStatementParser.UNCOMMITTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(DMLStatementParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(DMLStatementParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(DMLStatementParser.UNLISTEN, 0); }
		public TerminalNode UNLOGGED() { return getToken(DMLStatementParser.UNLOGGED, 0); }
		public TerminalNode UNTIL() { return getToken(DMLStatementParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(DMLStatementParser.UPDATE, 0); }
		public TerminalNode VACUUM() { return getToken(DMLStatementParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(DMLStatementParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(DMLStatementParser.VALIDATE, 0); }
		public TerminalNode VALIDATOR() { return getToken(DMLStatementParser.VALIDATOR, 0); }
		public TerminalNode VALUE() { return getToken(DMLStatementParser.VALUE, 0); }
		public TerminalNode VARYING() { return getToken(DMLStatementParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(DMLStatementParser.VERSION, 0); }
		public TerminalNode VIEW() { return getToken(DMLStatementParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(DMLStatementParser.VIEWS, 0); }
		public TerminalNode VOLATILE() { return getToken(DMLStatementParser.VOLATILE, 0); }
		public TerminalNode WHITESPACE() { return getToken(DMLStatementParser.WHITESPACE, 0); }
		public TerminalNode WITHIN() { return getToken(DMLStatementParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(DMLStatementParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(DMLStatementParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(DMLStatementParser.WRAPPER, 0); }
		public TerminalNode WRITE() { return getToken(DMLStatementParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(DMLStatementParser.XML, 0); }
		public TerminalNode YEAR() { return getToken(DMLStatementParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(DMLStatementParser.YES, 0); }
		public TerminalNode ZONE() { return getToken(DMLStatementParser.ZONE, 0); }
		public UnreservedWordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreservedWord; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterUnreservedWord(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitUnreservedWord(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitUnreservedWord(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnreservedWordContext unreservedWord() throws RecognitionException {
		UnreservedWordContext _localctx = new UnreservedWordContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_unreservedWord);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1786);
			_la = _input.LA(1);
			if ( !(((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (INSERT - 50)) | (1L << (UPDATE - 50)) | (1L << (DELETE - 50)) | (1L << (ALTER - 50)) | (1L << (DROP - 50)) | (1L << (TRUNCATE - 50)) | (1L << (SCHEMA - 50)) | (1L << (REVOKE - 50)) | (1L << (ADD - 50)) | (1L << (SET - 50)) | (1L << (INDEX - 50)) | (1L << (KEY - 50)) | (1L << (FUNCTION - 50)) | (1L << (TRIGGER - 50)) | (1L << (PROCEDURE - 50)) | (1L << (VIEW - 50)) | (1L << (IF - 50)))) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (BY - 119)) | (1L << (BEGIN - 119)) | (1L << (COMMIT - 119)) | (1L << (ROLLBACK - 119)) | (1L << (SAVEPOINT - 119)) | (1L << (DOUBLE - 119)) | (1L << (YEAR - 119)) | (1L << (MONTH - 119)) | (1L << (DAY - 119)) | (1L << (HOUR - 119)) | (1L << (MINUTE - 119)) | (1L << (SECOND - 119)) | (1L << (CURRENT - 119)) | (1L << (ENABLE - 119)) | (1L << (DISABLE - 119)) | (1L << (CALL - 119)) | (1L << (PRESERVE - 119)) | (1L << (DEFINER - 119)) | (1L << (SQL - 119)) | (1L << (CASCADED - 119)) | (1L << (LOCAL - 119)) | (1L << (CLOSE - 119)) | (1L << (NEXT - 119)) | (1L << (NAME - 119)) | (1L << (NAMES - 119)) | (1L << (TYPE - 119)) | (1L << (TEXT - 119)) | (1L << (REPEATABLE - 119)) | (1L << (VARYING - 119)))) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & ((1L << (VALUE - 184)) | (1L << (TIES - 184)) | (1L << (CUBE - 184)) | (1L << (SETS - 184)) | (1L << (OTHERS - 184)) | (1L << (AT - 184)) | (1L << (ADMIN - 184)) | (1L << (ESCAPE - 184)) | (1L << (EXCLUDE - 184)) | (1L << (PARTITION - 184)) | (1L << (UNKNOWN - 184)) | (1L << (ALWAYS - 184)) | (1L << (CASCADE - 184)) | (1L << (GENERATED - 184)) | (1L << (ISOLATION - 184)) | (1L << (LEVEL - 184)) | (1L << (NO - 184)) | (1L << (OPTION - 184)) | (1L << (PRIVILEGES - 184)) | (1L << (READ - 184)) | (1L << (ROLE - 184)) | (1L << (ROWS - 184)) | (1L << (START - 184)) | (1L << (TRANSACTION - 184)) | (1L << (ACTION - 184)) | (1L << (CACHE - 184)) | (1L << (CHARACTERISTICS - 184)) | (1L << (CLUSTER - 184)) | (1L << (COMMENTS - 184)) | (1L << (CONSTRAINTS - 184)) | (1L << (CYCLE - 184)) | (1L << (DATA - 184)) | (1L << (DATABASE - 184)) | (1L << (DEFAULTS - 184)) | (1L << (DEFERRED - 184)) | (1L << (DEPENDS - 184)) | (1L << (DOMAIN - 184)) | (1L << (EXCLUDING - 184)) | (1L << (EXECUTE - 184)))) != 0) || ((((_la - 248)) & ~0x3f) == 0 && ((1L << (_la - 248)) & ((1L << (EXTENSION - 248)) | (1L << (EXTERNAL - 248)) | (1L << (FILTER - 248)) | (1L << (FIRST - 248)) | (1L << (FOLLOWING - 248)) | (1L << (FORCE - 248)) | (1L << (GLOBAL - 248)) | (1L << (IDENTITY - 248)) | (1L << (IMMEDIATE - 248)) | (1L << (INCLUDING - 248)) | (1L << (INCREMENT - 248)) | (1L << (INDEXES - 248)) | (1L << (INHERIT - 248)) | (1L << (INHERITS - 248)) | (1L << (INCLUDE - 248)) | (1L << (LANGUAGE - 248)) | (1L << (LARGE - 248)) | (1L << (LAST - 248)) | (1L << (LOGGED - 248)) | (1L << (MATCH - 248)) | (1L << (MAXVALUE - 248)) | (1L << (MINVALUE - 248)) | (1L << (NOTHING - 248)) | (1L << (NULLS - 248)) | (1L << (OBJECT - 248)) | (1L << (OIDS - 248)) | (1L << (OVER - 248)) | (1L << (OWNED - 248)) | (1L << (OWNER - 248)) | (1L << (PARTIAL - 248)) | (1L << (PRECEDING - 248)) | (1L << (RANGE - 248)) | (1L << (RENAME - 248)) | (1L << (REPLICA - 248)) | (1L << (RESET - 248)) | (1L << (RESTART - 248)) | (1L << (RESTRICT - 248)) | (1L << (ROUTINE - 248)) | (1L << (RULE - 248)) | (1L << (SECURITY - 248)) | (1L << (SEQUENCE - 248)) | (1L << (SESSION - 248)) | (1L << (SHOW - 248)) | (1L << (SIMPLE - 248)) | (1L << (STATISTICS - 248)) | (1L << (STORAGE - 248)) | (1L << (TABLESPACE - 248)) | (1L << (TEMP - 248)) | (1L << (TEMPORARY - 248)) | (1L << (UNBOUNDED - 248)) | (1L << (UNLOGGED - 248)) | (1L << (VALID - 248)) | (1L << (VALIDATE - 248)) | (1L << (WITHIN - 248)) | (1L << (WITHOUT - 248)) | (1L << (ZONE - 248)) | (1L << (OF - 248)))) != 0) || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & ((1L << (UESCAPE - 312)) | (1L << (GROUPS - 312)) | (1L << (RECURSIVE - 312)) | (1L << (ENUM - 312)) | (1L << (XML - 312)) | (1L << (ORDINALITY - 312)) | (1L << (NFC - 312)) | (1L << (NFD - 312)) | (1L << (NFKC - 312)) | (1L << (NFKD - 312)) | (1L << (REF - 312)) | (1L << (PASSING - 312)))) != 0) || ((((_la - 376)) & ~0x3f) == 0 && ((1L << (_la - 376)) & ((1L << (VERSION - 376)) | (1L << (YES - 376)) | (1L << (STANDALONE - 376)) | (1L << (MATERIALIZED - 376)) | (1L << (OPERATOR - 376)) | (1L << (SHARE - 376)) | (1L << (ROLLUP - 376)) | (1L << (DOCUMENT - 376)) | (1L << (NORMALIZED - 376)) | (1L << (NOWAIT - 376)) | (1L << (LOCKED - 376)) | (1L << (COLUMNS - 376)) | (1L << (CONTENT - 376)) | (1L << (STRIP - 376)) | (1L << (WHITESPACE - 376)) | (1L << (CONFLICT - 376)) | (1L << (OVERRIDING - 376)) | (1L << (SYSTEM - 376)) | (1L << (ABORT - 376)) | (1L << (ABSOLUTE - 376)) | (1L << (ACCESS - 376)) | (1L << (AFTER - 376)) | (1L << (AGGREGATE - 376)) | (1L << (ALSO - 376)) | (1L << (ATTACH - 376)) | (1L << (ATTRIBUTE - 376)) | (1L << (BACKWARD - 376)) | (1L << (BEFORE - 376)) | (1L << (ASSERTION - 376)) | (1L << (ASSIGNMENT - 376)) | (1L << (CONTINUE - 376)) | (1L << (CONVERSION - 376)) | (1L << (COPY - 376)) | (1L << (COST - 376)) | (1L << (CSV - 376)) | (1L << (CALLED - 376)) | (1L << (CATALOG - 376)) | (1L << (CHAIN - 376)) | (1L << (CHECKPOINT - 376)) | (1L << (CLASS - 376)) | (1L << (CONFIGURATION - 376)) | (1L << (COMMENT - 376)) | (1L << (DETACH - 376)) | (1L << (DICTIONARY - 376)) | (1L << (EXPRESSION - 376)) | (1L << (INSENSITIVE - 376)) | (1L << (DISCARD - 376)))) != 0) || ((((_la - 440)) & ~0x3f) == 0 && ((1L << (_la - 440)) & ((1L << (OFF - 440)) | (1L << (INSTEAD - 440)) | (1L << (EXPLAIN - 440)) | (1L << (INPUT - 440)) | (1L << (INLINE - 440)) | (1L << (PARALLEL - 440)) | (1L << (LEAKPROOF - 440)) | (1L << (COMMITTED - 440)) | (1L << (ENCODING - 440)) | (1L << (IMPLICIT - 440)) | (1L << (DELIMITER - 440)) | (1L << (CURSOR - 440)) | (1L << (EACH - 440)) | (1L << (EVENT - 440)) | (1L << (DEALLOCATE - 440)) | (1L << (CONNECTION - 440)) | (1L << (DECLARE - 440)) | (1L << (FAMILY - 440)) | (1L << (FORWARD - 440)) | (1L << (EXCLUSIVE - 440)) | (1L << (FUNCTIONS - 440)) | (1L << (LOCATION - 440)) | (1L << (LABEL - 440)) | (1L << (DELIMITERS - 440)) | (1L << (HANDLER - 440)) | (1L << (HEADER - 440)) | (1L << (IMMUTABLE - 440)) | (1L << (GRANTED - 440)) | (1L << (HOLD - 440)) | (1L << (MAPPING - 440)) | (1L << (OLD - 440)) | (1L << (METHOD - 440)) | (1L << (LOAD - 440)) | (1L << (LISTEN - 440)) | (1L << (MODE - 440)) | (1L << (MOVE - 440)) | (1L << (PROCEDURAL - 440)) | (1L << (PARSER - 440)) | (1L << (PROCEDURES - 440)) | (1L << (ENCRYPTED - 440)) | (1L << (PUBLICATION - 440)) | (1L << (PROGRAM - 440)) | (1L << (REFERENCING - 440)) | (1L << (PLANS - 440)) | (1L << (REINDEX - 440)) | (1L << (PRIOR - 440)) | (1L << (PASSWORD - 440)) | (1L << (RELATIVE - 440)) | (1L << (QUOTE - 440)) | (1L << (ROUTINES - 440)) | (1L << (REPLACE - 440)) | (1L << (SNAPSHOT - 440)) | (1L << (REFRESH - 440)) | (1L << (PREPARE - 440)) | (1L << (OPTIONS - 440)) | (1L << (IMPORT - 440)) | (1L << (INVOKER - 440)) | (1L << (NEW - 440)) | (1L << (PREPARED - 440)) | (1L << (SCROLL - 440)) | (1L << (SEQUENCES - 440)) | (1L << (SYSID - 440)) | (1L << (REASSIGN - 440)) | (1L << (SERVER - 440)))) != 0) || ((((_la - 504)) & ~0x3f) == 0 && ((1L << (_la - 504)) & ((1L << (SUBSCRIPTION - 504)) | (1L << (SEARCH - 504)) | (1L << (SCHEMAS - 504)) | (1L << (RECHECK - 504)) | (1L << (POLICY - 504)) | (1L << (NOTIFY - 504)) | (1L << (LOCK - 504)) | (1L << (RELEASE - 504)) | (1L << (SERIALIZABLE - 504)) | (1L << (RETURNS - 504)) | (1L << (STATEMENT - 504)) | (1L << (STDIN - 504)) | (1L << (STDOUT - 504)) | (1L << (TABLES - 504)) | (1L << (SUPPORT - 504)) | (1L << (STABLE - 504)) | (1L << (TEMPLATE - 504)) | (1L << (UNENCRYPTED - 504)) | (1L << (VIEWS - 504)) | (1L << (UNCOMMITTED - 504)) | (1L << (TRANSFORM - 504)) | (1L << (UNLISTEN - 504)) | (1L << (TRUSTED - 504)) | (1L << (VALIDATOR - 504)) | (1L << (UNTIL - 504)) | (1L << (VACUUM - 504)) | (1L << (VOLATILE - 504)) | (1L << (STORED - 504)) | (1L << (WRITE - 504)) | (1L << (STRICT - 504)) | (1L << (TYPES - 504)) | (1L << (WRAPPER - 504)) | (1L << (WORK - 504)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeFuncNameKeywordContext extends ParserRuleContext {
		public TerminalNode AUTHORIZATION() { return getToken(DMLStatementParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(DMLStatementParser.BINARY, 0); }
		public TerminalNode COLLATION() { return getToken(DMLStatementParser.COLLATION, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(DMLStatementParser.CONCURRENTLY, 0); }
		public TerminalNode CROSS() { return getToken(DMLStatementParser.CROSS, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(DMLStatementParser.CURRENT_SCHEMA, 0); }
		public TerminalNode FREEZE() { return getToken(DMLStatementParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(DMLStatementParser.FULL, 0); }
		public TerminalNode ILIKE() { return getToken(DMLStatementParser.ILIKE, 0); }
		public TerminalNode INNER() { return getToken(DMLStatementParser.INNER, 0); }
		public TerminalNode IS() { return getToken(DMLStatementParser.IS, 0); }
		public TerminalNode ISNULL() { return getToken(DMLStatementParser.ISNULL, 0); }
		public TerminalNode JOIN() { return getToken(DMLStatementParser.JOIN, 0); }
		public TerminalNode LEFT() { return getToken(DMLStatementParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(DMLStatementParser.LIKE, 0); }
		public TerminalNode NATURAL() { return getToken(DMLStatementParser.NATURAL, 0); }
		public TerminalNode NOTNULL() { return getToken(DMLStatementParser.NOTNULL, 0); }
		public TerminalNode OUTER() { return getToken(DMLStatementParser.OUTER, 0); }
		public TerminalNode OVERLAPS() { return getToken(DMLStatementParser.OVERLAPS, 0); }
		public TerminalNode RIGHT() { return getToken(DMLStatementParser.RIGHT, 0); }
		public TerminalNode SIMILAR() { return getToken(DMLStatementParser.SIMILAR, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(DMLStatementParser.TABLESAMPLE, 0); }
		public TerminalNode VERBOSE() { return getToken(DMLStatementParser.VERBOSE, 0); }
		public TypeFuncNameKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeFuncNameKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTypeFuncNameKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTypeFuncNameKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTypeFuncNameKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeFuncNameKeywordContext typeFuncNameKeyword() throws RecognitionException {
		TypeFuncNameKeywordContext _localctx = new TypeFuncNameKeywordContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_typeFuncNameKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1788);
			_la = _input.LA(1);
			if ( !(((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (NATURAL - 87)) | (1L << (JOIN - 87)) | (1L << (FULL - 87)) | (1L << (INNER - 87)) | (1L << (OUTER - 87)) | (1L << (LEFT - 87)) | (1L << (RIGHT - 87)) | (1L << (CROSS - 87)) | (1L << (IS - 87)) | (1L << (LIKE - 87)))) != 0) || ((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & ((1L << (COLLATION - 166)) | (1L << (OVERLAPS - 166)) | (1L << (BINARY - 166)))) != 0) || _la==CONCURRENTLY || ((((_la - 352)) & ~0x3f) == 0 && ((1L << (_la - 352)) & ((1L << (TABLESAMPLE - 352)) | (1L << (CURRENT_SCHEMA - 352)) | (1L << (ILIKE - 352)) | (1L << (SIMILAR - 352)) | (1L << (ISNULL - 352)) | (1L << (NOTNULL - 352)))) != 0) || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (FREEZE - 537)) | (1L << (AUTHORIZATION - 537)) | (1L << (VERBOSE - 537)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1790);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DMLStatementParser.DOT_, 0); }
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1795);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
			case 1:
				{
				setState(1792);
				owner();
				setState(1793);
				match(DOT_);
				}
				break;
			}
			setState(1797);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DMLStatementParser.DOT_, 0); }
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_columnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1802);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				setState(1799);
				owner();
				setState(1800);
				match(DOT_);
				}
				break;
			}
			setState(1804);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOwner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerContext owner() throws RecognitionException {
		OwnerContext _localctx = new OwnerContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_owner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1806);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1808);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNamesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public TableNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTableNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTableNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTableNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNamesContext tableNames() throws RecognitionException {
		TableNamesContext _localctx = new TableNamesContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_tableNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1811);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(1810);
				match(LP_);
				}
			}

			setState(1813);
			tableName();
			setState(1818);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1814);
				match(COMMA_);
				setState(1815);
				tableName();
				}
				}
				setState(1820);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RP_) {
				{
				setState(1821);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNamesContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public ColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNamesContext columnNames() throws RecognitionException {
		ColumnNamesContext _localctx = new ColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_columnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1824);
			match(LP_);
			setState(1825);
			columnName();
			setState(1830);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1826);
				match(COMMA_);
				setState(1827);
				columnName();
				}
				}
				setState(1832);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1833);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DMLStatementParser.STRING_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_collationName);
		try {
			setState(1837);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(1835);
				match(STRING_);
				}
				break;
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1836);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterIndexName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitIndexName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitIndexName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1839);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrimaryKeyContext extends ParserRuleContext {
		public TerminalNode KEY() { return getToken(DMLStatementParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(DMLStatementParser.PRIMARY, 0); }
		public PrimaryKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryKeyContext primaryKey() throws RecognitionException {
		PrimaryKeyContext _localctx = new PrimaryKeyContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_primaryKey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1842);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIMARY) {
				{
				setState(1841);
				match(PRIMARY);
				}
			}

			setState(1844);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(DMLStatementParser.OR, 0); }
		public TerminalNode OR_() { return getToken(DMLStatementParser.OR_, 0); }
		public TerminalNode AND() { return getToken(DMLStatementParser.AND, 0); }
		public TerminalNode AND_() { return getToken(DMLStatementParser.AND_, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_logicalOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1846);
			_la = _input.LA(1);
			if ( !(_la==AND_ || _la==OR_ || _la==AND || _la==OR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ_() { return getToken(DMLStatementParser.EQ_, 0); }
		public TerminalNode GTE_() { return getToken(DMLStatementParser.GTE_, 0); }
		public TerminalNode GT_() { return getToken(DMLStatementParser.GT_, 0); }
		public TerminalNode LTE_() { return getToken(DMLStatementParser.LTE_, 0); }
		public TerminalNode LT_() { return getToken(DMLStatementParser.LT_, 0); }
		public TerminalNode NEQ_() { return getToken(DMLStatementParser.NEQ_, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1848);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CursorNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCursorName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCursorName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCursorName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorNameContext cursorName() throws RecognitionException {
		CursorNameContext _localctx = new CursorNameContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_cursorName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1850);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AExprContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public TerminalNode PLUS_() { return getToken(DMLStatementParser.PLUS_, 0); }
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public TerminalNode MINUS_() { return getToken(DMLStatementParser.MINUS_, 0); }
		public QualOpContext qualOp() {
			return getRuleContext(QualOpContext.class,0);
		}
		public TerminalNode NOT() { return getToken(DMLStatementParser.NOT, 0); }
		public List<RowContext> row() {
			return getRuleContexts(RowContext.class);
		}
		public RowContext row(int i) {
			return getRuleContext(RowContext.class,i);
		}
		public TerminalNode OVERLAPS() { return getToken(DMLStatementParser.OVERLAPS, 0); }
		public TerminalNode UNIQUE() { return getToken(DMLStatementParser.UNIQUE, 0); }
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DMLStatementParser.DEFAULT, 0); }
		public TerminalNode AT() { return getToken(DMLStatementParser.AT, 0); }
		public TerminalNode TIME() { return getToken(DMLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(DMLStatementParser.ZONE, 0); }
		public TerminalNode ASTERISK_() { return getToken(DMLStatementParser.ASTERISK_, 0); }
		public TerminalNode SLASH_() { return getToken(DMLStatementParser.SLASH_, 0); }
		public TerminalNode MOD_() { return getToken(DMLStatementParser.MOD_, 0); }
		public TerminalNode CARET_() { return getToken(DMLStatementParser.CARET_, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(DMLStatementParser.LIKE, 0); }
		public TerminalNode ESCAPE() { return getToken(DMLStatementParser.ESCAPE, 0); }
		public TerminalNode ILIKE() { return getToken(DMLStatementParser.ILIKE, 0); }
		public TerminalNode SIMILAR() { return getToken(DMLStatementParser.SIMILAR, 0); }
		public TerminalNode TO() { return getToken(DMLStatementParser.TO, 0); }
		public TerminalNode IS() { return getToken(DMLStatementParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(DMLStatementParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(DMLStatementParser.FROM, 0); }
		public TerminalNode BETWEEN() { return getToken(DMLStatementParser.BETWEEN, 0); }
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode AND() { return getToken(DMLStatementParser.AND, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(DMLStatementParser.ASYMMETRIC, 0); }
		public TerminalNode SYMMETRIC() { return getToken(DMLStatementParser.SYMMETRIC, 0); }
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public TerminalNode TYPE_CAST_() { return getToken(DMLStatementParser.TYPE_CAST_, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(DMLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DMLStatementParser.NULL, 0); }
		public TerminalNode ISNULL() { return getToken(DMLStatementParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(DMLStatementParser.NOTNULL, 0); }
		public TerminalNode TRUE() { return getToken(DMLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(DMLStatementParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(DMLStatementParser.UNKNOWN, 0); }
		public TerminalNode OF() { return getToken(DMLStatementParser.OF, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public TerminalNode IN() { return getToken(DMLStatementParser.IN, 0); }
		public InExprContext inExpr() {
			return getRuleContext(InExprContext.class,0);
		}
		public SubqueryOpContext subqueryOp() {
			return getRuleContext(SubqueryOpContext.class,0);
		}
		public SubTypeContext subType() {
			return getRuleContext(SubTypeContext.class,0);
		}
		public TerminalNode DOCUMENT() { return getToken(DMLStatementParser.DOCUMENT, 0); }
		public TerminalNode NORMALIZED() { return getToken(DMLStatementParser.NORMALIZED, 0); }
		public UnicodeNormalFormContext unicodeNormalForm() {
			return getRuleContext(UnicodeNormalFormContext.class,0);
		}
		public AExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterAExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitAExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitAExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AExprContext aExpr() throws RecognitionException {
		return aExpr(0);
	}

	private AExprContext aExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AExprContext _localctx = new AExprContext(_ctx, _parentState);
		AExprContext _prevctx = _localctx;
		int _startState = 238;
		enterRecursionRule(_localctx, 238, RULE_aExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1870);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				{
				setState(1853);
				cExpr();
				}
				break;
			case 2:
				{
				setState(1854);
				match(PLUS_);
				setState(1855);
				aExpr(57);
				}
				break;
			case 3:
				{
				setState(1856);
				match(MINUS_);
				setState(1857);
				aExpr(56);
				}
				break;
			case 4:
				{
				setState(1858);
				qualOp();
				setState(1859);
				aExpr(47);
				}
				break;
			case 5:
				{
				setState(1861);
				match(NOT);
				setState(1862);
				aExpr(45);
				}
				break;
			case 6:
				{
				setState(1863);
				row();
				setState(1864);
				match(OVERLAPS);
				setState(1865);
				row();
				}
				break;
			case 7:
				{
				setState(1867);
				match(UNIQUE);
				setState(1868);
				selectWithParens();
				}
				break;
			case 8:
				{
				setState(1869);
				match(DEFAULT);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2117);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,177,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2115);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
					case 1:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1872);
						if (!(precpred(_ctx, 58))) throw new FailedPredicateException(this, "precpred(_ctx, 58)");
						setState(1873);
						match(AT);
						setState(1874);
						match(TIME);
						setState(1875);
						match(ZONE);
						setState(1876);
						aExpr(59);
						}
						break;
					case 2:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1877);
						if (!(precpred(_ctx, 55))) throw new FailedPredicateException(this, "precpred(_ctx, 55)");
						setState(1878);
						match(PLUS_);
						setState(1879);
						aExpr(56);
						}
						break;
					case 3:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1880);
						if (!(precpred(_ctx, 54))) throw new FailedPredicateException(this, "precpred(_ctx, 54)");
						setState(1881);
						match(MINUS_);
						setState(1882);
						aExpr(55);
						}
						break;
					case 4:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1883);
						if (!(precpred(_ctx, 53))) throw new FailedPredicateException(this, "precpred(_ctx, 53)");
						setState(1884);
						match(ASTERISK_);
						setState(1885);
						aExpr(54);
						}
						break;
					case 5:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1886);
						if (!(precpred(_ctx, 52))) throw new FailedPredicateException(this, "precpred(_ctx, 52)");
						setState(1887);
						match(SLASH_);
						setState(1888);
						aExpr(53);
						}
						break;
					case 6:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1889);
						if (!(precpred(_ctx, 51))) throw new FailedPredicateException(this, "precpred(_ctx, 51)");
						setState(1890);
						match(MOD_);
						setState(1891);
						aExpr(52);
						}
						break;
					case 7:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1892);
						if (!(precpred(_ctx, 50))) throw new FailedPredicateException(this, "precpred(_ctx, 50)");
						setState(1893);
						match(CARET_);
						setState(1894);
						aExpr(51);
						}
						break;
					case 8:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1895);
						if (!(precpred(_ctx, 49))) throw new FailedPredicateException(this, "precpred(_ctx, 49)");
						setState(1896);
						comparisonOperator();
						setState(1897);
						aExpr(50);
						}
						break;
					case 9:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1899);
						if (!(precpred(_ctx, 48))) throw new FailedPredicateException(this, "precpred(_ctx, 48)");
						setState(1900);
						qualOp();
						setState(1901);
						aExpr(49);
						}
						break;
					case 10:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1903);
						if (!(precpred(_ctx, 44))) throw new FailedPredicateException(this, "precpred(_ctx, 44)");
						setState(1904);
						match(LIKE);
						setState(1905);
						aExpr(45);
						}
						break;
					case 11:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1906);
						if (!(precpred(_ctx, 43))) throw new FailedPredicateException(this, "precpred(_ctx, 43)");
						setState(1907);
						match(LIKE);
						setState(1908);
						aExpr(0);
						setState(1909);
						match(ESCAPE);
						setState(1910);
						aExpr(44);
						}
						break;
					case 12:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1912);
						if (!(precpred(_ctx, 42))) throw new FailedPredicateException(this, "precpred(_ctx, 42)");
						setState(1913);
						match(NOT);
						setState(1914);
						match(LIKE);
						setState(1915);
						aExpr(43);
						}
						break;
					case 13:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1916);
						if (!(precpred(_ctx, 41))) throw new FailedPredicateException(this, "precpred(_ctx, 41)");
						setState(1917);
						match(NOT);
						setState(1918);
						match(LIKE);
						setState(1919);
						aExpr(0);
						setState(1920);
						match(ESCAPE);
						setState(1921);
						aExpr(42);
						}
						break;
					case 14:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1923);
						if (!(precpred(_ctx, 40))) throw new FailedPredicateException(this, "precpred(_ctx, 40)");
						setState(1924);
						match(ILIKE);
						setState(1925);
						aExpr(41);
						}
						break;
					case 15:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1926);
						if (!(precpred(_ctx, 39))) throw new FailedPredicateException(this, "precpred(_ctx, 39)");
						setState(1927);
						match(ILIKE);
						setState(1928);
						aExpr(0);
						setState(1929);
						match(ESCAPE);
						setState(1930);
						aExpr(40);
						}
						break;
					case 16:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1932);
						if (!(precpred(_ctx, 38))) throw new FailedPredicateException(this, "precpred(_ctx, 38)");
						setState(1933);
						match(NOT);
						setState(1934);
						match(ILIKE);
						setState(1935);
						aExpr(39);
						}
						break;
					case 17:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1936);
						if (!(precpred(_ctx, 37))) throw new FailedPredicateException(this, "precpred(_ctx, 37)");
						setState(1937);
						match(NOT);
						setState(1938);
						match(ILIKE);
						setState(1939);
						aExpr(0);
						setState(1940);
						match(ESCAPE);
						setState(1941);
						aExpr(38);
						}
						break;
					case 18:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1943);
						if (!(precpred(_ctx, 36))) throw new FailedPredicateException(this, "precpred(_ctx, 36)");
						setState(1944);
						match(SIMILAR);
						setState(1945);
						match(TO);
						setState(1946);
						aExpr(37);
						}
						break;
					case 19:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1947);
						if (!(precpred(_ctx, 35))) throw new FailedPredicateException(this, "precpred(_ctx, 35)");
						setState(1948);
						match(SIMILAR);
						setState(1949);
						match(TO);
						setState(1950);
						aExpr(0);
						setState(1951);
						match(ESCAPE);
						setState(1952);
						aExpr(36);
						}
						break;
					case 20:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1954);
						if (!(precpred(_ctx, 34))) throw new FailedPredicateException(this, "precpred(_ctx, 34)");
						setState(1955);
						match(NOT);
						setState(1956);
						match(SIMILAR);
						setState(1957);
						match(TO);
						setState(1958);
						aExpr(35);
						}
						break;
					case 21:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1959);
						if (!(precpred(_ctx, 33))) throw new FailedPredicateException(this, "precpred(_ctx, 33)");
						setState(1960);
						match(NOT);
						setState(1961);
						match(SIMILAR);
						setState(1962);
						match(TO);
						setState(1963);
						aExpr(0);
						setState(1964);
						match(ESCAPE);
						setState(1965);
						aExpr(34);
						}
						break;
					case 22:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1967);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(1968);
						match(IS);
						setState(1969);
						match(DISTINCT);
						setState(1970);
						match(FROM);
						setState(1971);
						aExpr(22);
						}
						break;
					case 23:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1972);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(1973);
						match(IS);
						setState(1974);
						match(NOT);
						setState(1975);
						match(DISTINCT);
						setState(1976);
						match(FROM);
						setState(1977);
						aExpr(21);
						}
						break;
					case 24:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1978);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(1979);
						match(BETWEEN);
						setState(1981);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ASYMMETRIC) {
							{
							setState(1980);
							match(ASYMMETRIC);
							}
						}

						setState(1983);
						bExpr(0);
						setState(1984);
						match(AND);
						setState(1985);
						aExpr(18);
						}
						break;
					case 25:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1987);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(1988);
						match(NOT);
						setState(1989);
						match(BETWEEN);
						setState(1991);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ASYMMETRIC) {
							{
							setState(1990);
							match(ASYMMETRIC);
							}
						}

						setState(1993);
						bExpr(0);
						setState(1994);
						match(AND);
						setState(1995);
						aExpr(17);
						}
						break;
					case 26:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(1997);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(1998);
						match(BETWEEN);
						setState(1999);
						match(SYMMETRIC);
						setState(2000);
						bExpr(0);
						setState(2001);
						match(AND);
						setState(2002);
						aExpr(16);
						}
						break;
					case 27:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2004);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(2005);
						match(NOT);
						setState(2006);
						match(BETWEEN);
						setState(2007);
						match(SYMMETRIC);
						setState(2008);
						bExpr(0);
						setState(2009);
						match(AND);
						setState(2010);
						aExpr(15);
						}
						break;
					case 28:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2012);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2013);
						logicalOperator();
						setState(2014);
						aExpr(3);
						}
						break;
					case 29:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2016);
						if (!(precpred(_ctx, 60))) throw new FailedPredicateException(this, "precpred(_ctx, 60)");
						setState(2017);
						match(TYPE_CAST_);
						setState(2018);
						typeName();
						}
						break;
					case 30:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2019);
						if (!(precpred(_ctx, 59))) throw new FailedPredicateException(this, "precpred(_ctx, 59)");
						setState(2020);
						match(COLLATE);
						setState(2021);
						anyName();
						}
						break;
					case 31:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2022);
						if (!(precpred(_ctx, 46))) throw new FailedPredicateException(this, "precpred(_ctx, 46)");
						setState(2023);
						qualOp();
						}
						break;
					case 32:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2024);
						if (!(precpred(_ctx, 32))) throw new FailedPredicateException(this, "precpred(_ctx, 32)");
						setState(2025);
						match(IS);
						setState(2026);
						match(NULL);
						}
						break;
					case 33:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2027);
						if (!(precpred(_ctx, 31))) throw new FailedPredicateException(this, "precpred(_ctx, 31)");
						setState(2028);
						match(ISNULL);
						}
						break;
					case 34:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2029);
						if (!(precpred(_ctx, 30))) throw new FailedPredicateException(this, "precpred(_ctx, 30)");
						setState(2030);
						match(IS);
						setState(2031);
						match(NOT);
						setState(2032);
						match(NULL);
						}
						break;
					case 35:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2033);
						if (!(precpred(_ctx, 29))) throw new FailedPredicateException(this, "precpred(_ctx, 29)");
						setState(2034);
						match(NOTNULL);
						}
						break;
					case 36:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2035);
						if (!(precpred(_ctx, 27))) throw new FailedPredicateException(this, "precpred(_ctx, 27)");
						setState(2036);
						match(IS);
						setState(2037);
						match(TRUE);
						}
						break;
					case 37:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2038);
						if (!(precpred(_ctx, 26))) throw new FailedPredicateException(this, "precpred(_ctx, 26)");
						setState(2039);
						match(IS);
						setState(2040);
						match(NOT);
						setState(2041);
						match(TRUE);
						}
						break;
					case 38:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2042);
						if (!(precpred(_ctx, 25))) throw new FailedPredicateException(this, "precpred(_ctx, 25)");
						setState(2043);
						match(IS);
						setState(2044);
						match(FALSE);
						}
						break;
					case 39:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2045);
						if (!(precpred(_ctx, 24))) throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						setState(2046);
						match(IS);
						setState(2047);
						match(NOT);
						setState(2048);
						match(FALSE);
						}
						break;
					case 40:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2049);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(2050);
						match(IS);
						setState(2051);
						match(UNKNOWN);
						}
						break;
					case 41:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2052);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(2053);
						match(IS);
						setState(2054);
						match(NOT);
						setState(2055);
						match(UNKNOWN);
						}
						break;
					case 42:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2056);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(2057);
						match(IS);
						setState(2058);
						match(OF);
						setState(2059);
						match(LP_);
						setState(2060);
						typeList();
						setState(2061);
						match(RP_);
						}
						break;
					case 43:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2063);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(2064);
						match(IS);
						setState(2065);
						match(NOT);
						setState(2066);
						match(OF);
						setState(2067);
						match(LP_);
						setState(2068);
						typeList();
						setState(2069);
						match(RP_);
						}
						break;
					case 44:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2071);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(2072);
						match(IN);
						setState(2073);
						inExpr();
						}
						break;
					case 45:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2074);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(2075);
						match(NOT);
						setState(2076);
						match(IN);
						setState(2077);
						inExpr();
						}
						break;
					case 46:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2078);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(2079);
						subqueryOp();
						setState(2080);
						subType();
						setState(2081);
						selectWithParens();
						}
						break;
					case 47:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2083);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(2084);
						subqueryOp();
						setState(2085);
						subType();
						setState(2086);
						match(LP_);
						setState(2087);
						aExpr(0);
						setState(2088);
						match(RP_);
						}
						break;
					case 48:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2090);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(2091);
						match(IS);
						setState(2092);
						match(DOCUMENT);
						}
						break;
					case 49:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2093);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(2094);
						match(IS);
						setState(2095);
						match(NOT);
						setState(2096);
						match(DOCUMENT);
						}
						break;
					case 50:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2097);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(2098);
						match(IS);
						setState(2099);
						match(NORMALIZED);
						}
						break;
					case 51:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2100);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(2101);
						match(IS);
						setState(2102);
						unicodeNormalForm();
						setState(2103);
						match(NORMALIZED);
						}
						break;
					case 52:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2105);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(2106);
						match(IS);
						setState(2107);
						match(NOT);
						setState(2108);
						match(NORMALIZED);
						}
						break;
					case 53:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(2109);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(2110);
						match(IS);
						setState(2111);
						match(NOT);
						setState(2112);
						unicodeNormalForm();
						setState(2113);
						match(NORMALIZED);
						}
						break;
					}
					} 
				}
				setState(2119);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,177,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class BExprContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public TerminalNode PLUS_() { return getToken(DMLStatementParser.PLUS_, 0); }
		public List<BExprContext> bExpr() {
			return getRuleContexts(BExprContext.class);
		}
		public BExprContext bExpr(int i) {
			return getRuleContext(BExprContext.class,i);
		}
		public TerminalNode MINUS_() { return getToken(DMLStatementParser.MINUS_, 0); }
		public QualOpContext qualOp() {
			return getRuleContext(QualOpContext.class,0);
		}
		public TerminalNode IS() { return getToken(DMLStatementParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(DMLStatementParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(DMLStatementParser.FROM, 0); }
		public TerminalNode NOT() { return getToken(DMLStatementParser.NOT, 0); }
		public TerminalNode TYPE_CAST_() { return getToken(DMLStatementParser.TYPE_CAST_, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode OF() { return getToken(DMLStatementParser.OF, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public TerminalNode DOCUMENT() { return getToken(DMLStatementParser.DOCUMENT, 0); }
		public BExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterBExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitBExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitBExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BExprContext bExpr() throws RecognitionException {
		return bExpr(0);
	}

	private BExprContext bExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BExprContext _localctx = new BExprContext(_ctx, _parentState);
		BExprContext _prevctx = _localctx;
		int _startState = 240;
		enterRecursionRule(_localctx, 240, RULE_bExpr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
			case 1:
				{
				setState(2121);
				cExpr();
				}
				break;
			case 2:
				{
				setState(2122);
				match(PLUS_);
				setState(2123);
				bExpr(11);
				}
				break;
			case 3:
				{
				setState(2124);
				match(MINUS_);
				setState(2125);
				bExpr(10);
				}
				break;
			case 4:
				{
				setState(2126);
				qualOp();
				setState(2127);
				bExpr(8);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(2175);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,180,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(2173);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
					case 1:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(2131);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(2132);
						qualOp();
						setState(2133);
						bExpr(10);
						}
						break;
					case 2:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(2135);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(2136);
						match(IS);
						setState(2137);
						match(DISTINCT);
						setState(2138);
						match(FROM);
						setState(2139);
						bExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(2140);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(2141);
						match(IS);
						setState(2142);
						match(NOT);
						setState(2143);
						match(DISTINCT);
						setState(2144);
						match(FROM);
						setState(2145);
						bExpr(6);
						}
						break;
					case 4:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(2146);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(2147);
						match(TYPE_CAST_);
						setState(2148);
						typeName();
						}
						break;
					case 5:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(2149);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(2150);
						qualOp();
						}
						break;
					case 6:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(2151);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(2152);
						match(IS);
						setState(2153);
						match(OF);
						setState(2154);
						match(LP_);
						setState(2155);
						typeList();
						setState(2156);
						match(RP_);
						}
						break;
					case 7:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(2158);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(2159);
						match(IS);
						setState(2160);
						match(NOT);
						setState(2161);
						match(OF);
						setState(2162);
						match(LP_);
						setState(2163);
						typeList();
						setState(2164);
						match(RP_);
						}
						break;
					case 8:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(2166);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(2167);
						match(IS);
						setState(2168);
						match(DOCUMENT);
						}
						break;
					case 9:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(2169);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(2170);
						match(IS);
						setState(2171);
						match(NOT);
						setState(2172);
						match(DOCUMENT);
						}
						break;
					}
					} 
				}
				setState(2177);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,180,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CExprContext extends ParserRuleContext {
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public ColumnrefContext columnref() {
			return getRuleContext(ColumnrefContext.class,0);
		}
		public AexprConstContext aexprConst() {
			return getRuleContext(AexprConstContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(DMLStatementParser.PARAM, 0); }
		public IndirectionElContext indirectionEl() {
			return getRuleContext(IndirectionElContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public CaseExprContext caseExpr() {
			return getRuleContext(CaseExprContext.class,0);
		}
		public FuncExprContext funcExpr() {
			return getRuleContext(FuncExprContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(DMLStatementParser.EXISTS, 0); }
		public TerminalNode ARRAY() { return getToken(DMLStatementParser.ARRAY, 0); }
		public ArrayExprContext arrayExpr() {
			return getRuleContext(ArrayExprContext.class,0);
		}
		public ExplicitRowContext explicitRow() {
			return getRuleContext(ExplicitRowContext.class,0);
		}
		public ImplicitRowContext implicitRow() {
			return getRuleContext(ImplicitRowContext.class,0);
		}
		public TerminalNode GROUPING() { return getToken(DMLStatementParser.GROUPING, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public CExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CExprContext cExpr() throws RecognitionException {
		CExprContext _localctx = new CExprContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_cExpr);
		try {
			setState(2209);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2178);
				parameterMarker();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2179);
				columnref();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2180);
				aexprConst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2181);
				match(PARAM);
				setState(2183);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
				case 1:
					{
					setState(2182);
					indirectionEl();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2185);
				match(LP_);
				setState(2186);
				aExpr(0);
				setState(2187);
				match(RP_);
				setState(2188);
				optIndirection(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2190);
				caseExpr();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2191);
				funcExpr();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2192);
				selectWithParens();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2193);
				selectWithParens();
				setState(2194);
				indirection(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2196);
				match(EXISTS);
				setState(2197);
				selectWithParens();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2198);
				match(ARRAY);
				setState(2199);
				selectWithParens();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2200);
				match(ARRAY);
				setState(2201);
				arrayExpr();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2202);
				explicitRow();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2203);
				implicitRow();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2204);
				match(GROUPING);
				setState(2205);
				match(LP_);
				setState(2206);
				exprList(0);
				setState(2207);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectionContext extends ParserRuleContext {
		public IndirectionElContext indirectionEl() {
			return getRuleContext(IndirectionElContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterIndirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitIndirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionContext indirection() throws RecognitionException {
		return indirection(0);
	}

	private IndirectionContext indirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		IndirectionContext _localctx = new IndirectionContext(_ctx, _parentState);
		IndirectionContext _prevctx = _localctx;
		int _startState = 244;
		enterRecursionRule(_localctx, 244, RULE_indirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2212);
			indirectionEl();
			}
			_ctx.stop = _input.LT(-1);
			setState(2218);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,183,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IndirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_indirection);
					setState(2214);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2215);
					indirectionEl();
					}
					} 
				}
				setState(2220);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,183,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class OptIndirectionContext extends ParserRuleContext {
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public IndirectionElContext indirectionEl() {
			return getRuleContext(IndirectionElContext.class,0);
		}
		public OptIndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optIndirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOptIndirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOptIndirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOptIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptIndirectionContext optIndirection() throws RecognitionException {
		return optIndirection(0);
	}

	private OptIndirectionContext optIndirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptIndirectionContext _localctx = new OptIndirectionContext(_ctx, _parentState);
		OptIndirectionContext _prevctx = _localctx;
		int _startState = 246;
		enterRecursionRule(_localctx, 246, RULE_optIndirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(2226);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,184,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptIndirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_optIndirection);
					setState(2222);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(2223);
					indirectionEl();
					}
					} 
				}
				setState(2228);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,184,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class IndirectionElContext extends ParserRuleContext {
		public TerminalNode DOT_() { return getToken(DMLStatementParser.DOT_, 0); }
		public AttrNameContext attrName() {
			return getRuleContext(AttrNameContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DMLStatementParser.ASTERISK_, 0); }
		public TerminalNode LBT_() { return getToken(DMLStatementParser.LBT_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RBT_() { return getToken(DMLStatementParser.RBT_, 0); }
		public TerminalNode COLON_() { return getToken(DMLStatementParser.COLON_, 0); }
		public List<SliceBoundContext> sliceBound() {
			return getRuleContexts(SliceBoundContext.class);
		}
		public SliceBoundContext sliceBound(int i) {
			return getRuleContext(SliceBoundContext.class,i);
		}
		public IndirectionElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirectionEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterIndirectionEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitIndirectionEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitIndirectionEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionElContext indirectionEl() throws RecognitionException {
		IndirectionElContext _localctx = new IndirectionElContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_indirectionEl);
		int _la;
		try {
			setState(2246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2229);
				match(DOT_);
				setState(2230);
				attrName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2231);
				match(DOT_);
				setState(2232);
				match(ASTERISK_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2233);
				match(LBT_);
				setState(2234);
				aExpr(0);
				setState(2235);
				match(RBT_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2237);
				match(LBT_);
				setState(2239);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << CARET_) | (1L << MOD_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_) | (1L << LP_) | (1L << QUESTION_) | (1L << TILDE_TILDE_) | (1L << NOT_TILDE_TILDE_) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INDEX - 64)) | (1L << (UNIQUE - 64)) | (1L << (KEY - 64)) | (1L << (POSITION - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (TRIM - 64)) | (1L << (SUBSTRING - 64)) | (1L << (NATURAL - 64)) | (1L << (JOIN - 64)) | (1L << (FULL - 64)) | (1L << (INNER - 64)) | (1L << (OUTER - 64)) | (1L << (LEFT - 64)) | (1L << (RIGHT - 64)) | (1L << (CROSS - 64)) | (1L << (IF - 64)) | (1L << (IS - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (TRUE - 64)) | (1L << (FALSE - 64)) | (1L << (EXISTS - 64)) | (1L << (LIKE - 64)) | (1L << (BY - 64)) | (1L << (BEGIN - 64)) | (1L << (COMMIT - 64)) | (1L << (ROLLBACK - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (SAVEPOINT - 128)) | (1L << (DOUBLE - 128)) | (1L << (ARRAY - 128)) | (1L << (LOCALTIME - 128)) | (1L << (LOCALTIMESTAMP - 128)) | (1L << (YEAR - 128)) | (1L << (MONTH - 128)) | (1L << (DAY - 128)) | (1L << (HOUR - 128)) | (1L << (MINUTE - 128)) | (1L << (SECOND - 128)) | (1L << (DEFAULT - 128)) | (1L << (CURRENT - 128)) | (1L << (ENABLE - 128)) | (1L << (DISABLE - 128)) | (1L << (CALL - 128)) | (1L << (PRESERVE - 128)) | (1L << (DEFINER - 128)) | (1L << (CURRENT_USER - 128)) | (1L << (SQL - 128)) | (1L << (CASCADED - 128)) | (1L << (LOCAL - 128)) | (1L << (CLOSE - 128)) | (1L << (NEXT - 128)) | (1L << (NAME - 128)) | (1L << (COLLATION - 128)) | (1L << (NAMES - 128)) | (1L << (TYPE - 128)) | (1L << (TEXT - 128)) | (1L << (REPEATABLE - 128)) | (1L << (CURRENT_DATE - 128)) | (1L << (CURRENT_TIME - 128)) | (1L << (CURRENT_TIMESTAMP - 128)) | (1L << (NULLIF - 128)) | (1L << (VARYING - 128)) | (1L << (VALUE - 128)) | (1L << (COALESCE - 128)) | (1L << (TIES - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (CUBE - 193)) | (1L << (GROUPING - 193)) | (1L << (SETS - 193)) | (1L << (OTHERS - 193)) | (1L << (OVERLAPS - 193)) | (1L << (AT - 193)) | (1L << (ADMIN - 193)) | (1L << (BINARY - 193)) | (1L << (ESCAPE - 193)) | (1L << (EXCLUDE - 193)) | (1L << (PARTITION - 193)) | (1L << (ROW - 193)) | (1L << (UNKNOWN - 193)) | (1L << (ALWAYS - 193)) | (1L << (CASCADE - 193)) | (1L << (GENERATED - 193)) | (1L << (ISOLATION - 193)) | (1L << (LEVEL - 193)) | (1L << (NO - 193)) | (1L << (OPTION - 193)) | (1L << (PRIVILEGES - 193)) | (1L << (READ - 193)) | (1L << (ROLE - 193)) | (1L << (ROWS - 193)) | (1L << (START - 193)) | (1L << (TRANSACTION - 193)) | (1L << (USER - 193)) | (1L << (ACTION - 193)) | (1L << (CACHE - 193)) | (1L << (CHARACTERISTICS - 193)) | (1L << (CLUSTER - 193)) | (1L << (COMMENTS - 193)) | (1L << (CONCURRENTLY - 193)) | (1L << (CONSTRAINTS - 193)) | (1L << (CYCLE - 193)) | (1L << (DATA - 193)) | (1L << (DATABASE - 193)) | (1L << (DEFAULTS - 193)) | (1L << (DEFERRED - 193)) | (1L << (DEPENDS - 193)) | (1L << (DOMAIN - 193)) | (1L << (EXCLUDING - 193)) | (1L << (EXECUTE - 193)) | (1L << (EXTENSION - 193)) | (1L << (EXTERNAL - 193)) | (1L << (EXTRACT - 193)) | (1L << (FILTER - 193)) | (1L << (FIRST - 193)) | (1L << (FOLLOWING - 193)) | (1L << (FORCE - 193)) | (1L << (GLOBAL - 193)) | (1L << (IDENTITY - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (IMMEDIATE - 257)) | (1L << (INCLUDING - 257)) | (1L << (INCREMENT - 257)) | (1L << (INDEXES - 257)) | (1L << (INHERIT - 257)) | (1L << (INHERITS - 257)) | (1L << (INCLUDE - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LARGE - 257)) | (1L << (LAST - 257)) | (1L << (LOGGED - 257)) | (1L << (MATCH - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MINVALUE - 257)) | (1L << (NOTHING - 257)) | (1L << (NULLS - 257)) | (1L << (OBJECT - 257)) | (1L << (OIDS - 257)) | (1L << (OVER - 257)) | (1L << (OWNED - 257)) | (1L << (OWNER - 257)) | (1L << (PARTIAL - 257)) | (1L << (PRECEDING - 257)) | (1L << (RANGE - 257)) | (1L << (RENAME - 257)) | (1L << (REPLICA - 257)) | (1L << (RESET - 257)) | (1L << (RESTART - 257)) | (1L << (RESTRICT - 257)) | (1L << (ROUTINE - 257)) | (1L << (RULE - 257)) | (1L << (SECURITY - 257)) | (1L << (SEQUENCE - 257)) | (1L << (SESSION - 257)) | (1L << (SESSION_USER - 257)) | (1L << (SHOW - 257)) | (1L << (SIMPLE - 257)) | (1L << (STATISTICS - 257)) | (1L << (STORAGE - 257)) | (1L << (TABLESPACE - 257)) | (1L << (TEMP - 257)) | (1L << (TEMPORARY - 257)) | (1L << (UNBOUNDED - 257)) | (1L << (UNLOGGED - 257)) | (1L << (VALID - 257)) | (1L << (VALIDATE - 257)) | (1L << (WITHIN - 257)) | (1L << (WITHOUT - 257)) | (1L << (ZONE - 257)) | (1L << (OF - 257)) | (1L << (UESCAPE - 257)) | (1L << (GROUPS - 257)) | (1L << (RECURSIVE - 257)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (ENUM - 328)) | (1L << (XML - 328)) | (1L << (TABLESAMPLE - 328)) | (1L << (ORDINALITY - 328)) | (1L << (CURRENT_ROLE - 328)) | (1L << (CURRENT_CATALOG - 328)) | (1L << (CURRENT_SCHEMA - 328)) | (1L << (NORMALIZE - 328)) | (1L << (OVERLAY - 328)) | (1L << (XMLCONCAT - 328)) | (1L << (XMLELEMENT - 328)) | (1L << (XMLEXISTS - 328)) | (1L << (XMLFOREST - 328)) | (1L << (XMLPARSE - 328)) | (1L << (XMLPI - 328)) | (1L << (XMLROOT - 328)) | (1L << (XMLSERIALIZE - 328)) | (1L << (TREAT - 328)) | (1L << (NFC - 328)) | (1L << (NFD - 328)) | (1L << (NFKC - 328)) | (1L << (NFKD - 328)) | (1L << (REF - 328)) | (1L << (PASSING - 328)) | (1L << (VERSION - 328)) | (1L << (YES - 328)) | (1L << (STANDALONE - 328)) | (1L << (GREATEST - 328)) | (1L << (LEAST - 328)) | (1L << (MATERIALIZED - 328)) | (1L << (OPERATOR - 328)) | (1L << (SHARE - 328)) | (1L << (ROLLUP - 328)) | (1L << (ILIKE - 328)) | (1L << (SIMILAR - 328)) | (1L << (ISNULL - 328)) | (1L << (NOTNULL - 328)) | (1L << (DOCUMENT - 328)) | (1L << (NORMALIZED - 328)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (NOWAIT - 394)) | (1L << (LOCKED - 394)) | (1L << (COLUMNS - 394)) | (1L << (CONTENT - 394)) | (1L << (STRIP - 394)) | (1L << (WHITESPACE - 394)) | (1L << (CONFLICT - 394)) | (1L << (OVERRIDING - 394)) | (1L << (SYSTEM - 394)) | (1L << (ABORT - 394)) | (1L << (ABSOLUTE - 394)) | (1L << (ACCESS - 394)) | (1L << (AFTER - 394)) | (1L << (AGGREGATE - 394)) | (1L << (ALSO - 394)) | (1L << (ATTACH - 394)) | (1L << (ATTRIBUTE - 394)) | (1L << (BACKWARD - 394)) | (1L << (BEFORE - 394)) | (1L << (ASSERTION - 394)) | (1L << (ASSIGNMENT - 394)) | (1L << (CONTINUE - 394)) | (1L << (CONVERSION - 394)) | (1L << (COPY - 394)) | (1L << (COST - 394)) | (1L << (CSV - 394)) | (1L << (CALLED - 394)) | (1L << (CATALOG - 394)) | (1L << (CHAIN - 394)) | (1L << (CHECKPOINT - 394)) | (1L << (CLASS - 394)) | (1L << (CONFIGURATION - 394)) | (1L << (COMMENT - 394)) | (1L << (DETACH - 394)) | (1L << (DICTIONARY - 394)) | (1L << (EXPRESSION - 394)) | (1L << (INSENSITIVE - 394)) | (1L << (DISCARD - 394)) | (1L << (OFF - 394)) | (1L << (INSTEAD - 394)) | (1L << (EXPLAIN - 394)) | (1L << (INPUT - 394)) | (1L << (INLINE - 394)) | (1L << (PARALLEL - 394)) | (1L << (LEAKPROOF - 394)) | (1L << (COMMITTED - 394)) | (1L << (ENCODING - 394)) | (1L << (IMPLICIT - 394)) | (1L << (DELIMITER - 394)) | (1L << (CURSOR - 394)) | (1L << (EACH - 394)) | (1L << (EVENT - 394)) | (1L << (DEALLOCATE - 394)) | (1L << (CONNECTION - 394)) | (1L << (DECLARE - 394)) | (1L << (FAMILY - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (FORWARD - 458)) | (1L << (EXCLUSIVE - 458)) | (1L << (FUNCTIONS - 458)) | (1L << (LOCATION - 458)) | (1L << (LABEL - 458)) | (1L << (DELIMITERS - 458)) | (1L << (HANDLER - 458)) | (1L << (HEADER - 458)) | (1L << (IMMUTABLE - 458)) | (1L << (GRANTED - 458)) | (1L << (HOLD - 458)) | (1L << (MAPPING - 458)) | (1L << (OLD - 458)) | (1L << (METHOD - 458)) | (1L << (LOAD - 458)) | (1L << (LISTEN - 458)) | (1L << (MODE - 458)) | (1L << (MOVE - 458)) | (1L << (PROCEDURAL - 458)) | (1L << (PARSER - 458)) | (1L << (PROCEDURES - 458)) | (1L << (ENCRYPTED - 458)) | (1L << (PUBLICATION - 458)) | (1L << (PROGRAM - 458)) | (1L << (REFERENCING - 458)) | (1L << (PLANS - 458)) | (1L << (REINDEX - 458)) | (1L << (PRIOR - 458)) | (1L << (PASSWORD - 458)) | (1L << (RELATIVE - 458)) | (1L << (QUOTE - 458)) | (1L << (ROUTINES - 458)) | (1L << (REPLACE - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (REFRESH - 458)) | (1L << (PREPARE - 458)) | (1L << (OPTIONS - 458)) | (1L << (IMPORT - 458)) | (1L << (INVOKER - 458)) | (1L << (NEW - 458)) | (1L << (PREPARED - 458)) | (1L << (SCROLL - 458)) | (1L << (SEQUENCES - 458)) | (1L << (SYSID - 458)) | (1L << (REASSIGN - 458)) | (1L << (SERVER - 458)) | (1L << (SUBSCRIPTION - 458)) | (1L << (SEARCH - 458)) | (1L << (SCHEMAS - 458)) | (1L << (RECHECK - 458)) | (1L << (POLICY - 458)) | (1L << (NOTIFY - 458)) | (1L << (LOCK - 458)) | (1L << (RELEASE - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (RETURNS - 458)) | (1L << (STATEMENT - 458)) | (1L << (STDIN - 458)) | (1L << (STDOUT - 458)) | (1L << (TABLES - 458)) | (1L << (SUPPORT - 458)) | (1L << (STABLE - 458)) | (1L << (TEMPLATE - 458)) | (1L << (UNENCRYPTED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (VIEWS - 522)) | (1L << (UNCOMMITTED - 522)) | (1L << (TRANSFORM - 522)) | (1L << (UNLISTEN - 522)) | (1L << (TRUSTED - 522)) | (1L << (VALIDATOR - 522)) | (1L << (UNTIL - 522)) | (1L << (VACUUM - 522)) | (1L << (VOLATILE - 522)) | (1L << (STORED - 522)) | (1L << (WRITE - 522)) | (1L << (STRICT - 522)) | (1L << (TYPES - 522)) | (1L << (WRAPPER - 522)) | (1L << (WORK - 522)) | (1L << (FREEZE - 522)) | (1L << (AUTHORIZATION - 522)) | (1L << (VERBOSE - 522)) | (1L << (PARAM - 522)) | (1L << (IDENTIFIER_ - 522)) | (1L << (STRING_ - 522)) | (1L << (NUMBER_ - 522)))) != 0)) {
					{
					setState(2238);
					sliceBound();
					}
				}

				setState(2241);
				match(COLON_);
				setState(2243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << CARET_) | (1L << MOD_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_) | (1L << LP_) | (1L << QUESTION_) | (1L << TILDE_TILDE_) | (1L << NOT_TILDE_TILDE_) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INDEX - 64)) | (1L << (UNIQUE - 64)) | (1L << (KEY - 64)) | (1L << (POSITION - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (TRIM - 64)) | (1L << (SUBSTRING - 64)) | (1L << (NATURAL - 64)) | (1L << (JOIN - 64)) | (1L << (FULL - 64)) | (1L << (INNER - 64)) | (1L << (OUTER - 64)) | (1L << (LEFT - 64)) | (1L << (RIGHT - 64)) | (1L << (CROSS - 64)) | (1L << (IF - 64)) | (1L << (IS - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (TRUE - 64)) | (1L << (FALSE - 64)) | (1L << (EXISTS - 64)) | (1L << (LIKE - 64)) | (1L << (BY - 64)) | (1L << (BEGIN - 64)) | (1L << (COMMIT - 64)) | (1L << (ROLLBACK - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (SAVEPOINT - 128)) | (1L << (DOUBLE - 128)) | (1L << (ARRAY - 128)) | (1L << (LOCALTIME - 128)) | (1L << (LOCALTIMESTAMP - 128)) | (1L << (YEAR - 128)) | (1L << (MONTH - 128)) | (1L << (DAY - 128)) | (1L << (HOUR - 128)) | (1L << (MINUTE - 128)) | (1L << (SECOND - 128)) | (1L << (DEFAULT - 128)) | (1L << (CURRENT - 128)) | (1L << (ENABLE - 128)) | (1L << (DISABLE - 128)) | (1L << (CALL - 128)) | (1L << (PRESERVE - 128)) | (1L << (DEFINER - 128)) | (1L << (CURRENT_USER - 128)) | (1L << (SQL - 128)) | (1L << (CASCADED - 128)) | (1L << (LOCAL - 128)) | (1L << (CLOSE - 128)) | (1L << (NEXT - 128)) | (1L << (NAME - 128)) | (1L << (COLLATION - 128)) | (1L << (NAMES - 128)) | (1L << (TYPE - 128)) | (1L << (TEXT - 128)) | (1L << (REPEATABLE - 128)) | (1L << (CURRENT_DATE - 128)) | (1L << (CURRENT_TIME - 128)) | (1L << (CURRENT_TIMESTAMP - 128)) | (1L << (NULLIF - 128)) | (1L << (VARYING - 128)) | (1L << (VALUE - 128)) | (1L << (COALESCE - 128)) | (1L << (TIES - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (CUBE - 193)) | (1L << (GROUPING - 193)) | (1L << (SETS - 193)) | (1L << (OTHERS - 193)) | (1L << (OVERLAPS - 193)) | (1L << (AT - 193)) | (1L << (ADMIN - 193)) | (1L << (BINARY - 193)) | (1L << (ESCAPE - 193)) | (1L << (EXCLUDE - 193)) | (1L << (PARTITION - 193)) | (1L << (ROW - 193)) | (1L << (UNKNOWN - 193)) | (1L << (ALWAYS - 193)) | (1L << (CASCADE - 193)) | (1L << (GENERATED - 193)) | (1L << (ISOLATION - 193)) | (1L << (LEVEL - 193)) | (1L << (NO - 193)) | (1L << (OPTION - 193)) | (1L << (PRIVILEGES - 193)) | (1L << (READ - 193)) | (1L << (ROLE - 193)) | (1L << (ROWS - 193)) | (1L << (START - 193)) | (1L << (TRANSACTION - 193)) | (1L << (USER - 193)) | (1L << (ACTION - 193)) | (1L << (CACHE - 193)) | (1L << (CHARACTERISTICS - 193)) | (1L << (CLUSTER - 193)) | (1L << (COMMENTS - 193)) | (1L << (CONCURRENTLY - 193)) | (1L << (CONSTRAINTS - 193)) | (1L << (CYCLE - 193)) | (1L << (DATA - 193)) | (1L << (DATABASE - 193)) | (1L << (DEFAULTS - 193)) | (1L << (DEFERRED - 193)) | (1L << (DEPENDS - 193)) | (1L << (DOMAIN - 193)) | (1L << (EXCLUDING - 193)) | (1L << (EXECUTE - 193)) | (1L << (EXTENSION - 193)) | (1L << (EXTERNAL - 193)) | (1L << (EXTRACT - 193)) | (1L << (FILTER - 193)) | (1L << (FIRST - 193)) | (1L << (FOLLOWING - 193)) | (1L << (FORCE - 193)) | (1L << (GLOBAL - 193)) | (1L << (IDENTITY - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (IMMEDIATE - 257)) | (1L << (INCLUDING - 257)) | (1L << (INCREMENT - 257)) | (1L << (INDEXES - 257)) | (1L << (INHERIT - 257)) | (1L << (INHERITS - 257)) | (1L << (INCLUDE - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LARGE - 257)) | (1L << (LAST - 257)) | (1L << (LOGGED - 257)) | (1L << (MATCH - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MINVALUE - 257)) | (1L << (NOTHING - 257)) | (1L << (NULLS - 257)) | (1L << (OBJECT - 257)) | (1L << (OIDS - 257)) | (1L << (OVER - 257)) | (1L << (OWNED - 257)) | (1L << (OWNER - 257)) | (1L << (PARTIAL - 257)) | (1L << (PRECEDING - 257)) | (1L << (RANGE - 257)) | (1L << (RENAME - 257)) | (1L << (REPLICA - 257)) | (1L << (RESET - 257)) | (1L << (RESTART - 257)) | (1L << (RESTRICT - 257)) | (1L << (ROUTINE - 257)) | (1L << (RULE - 257)) | (1L << (SECURITY - 257)) | (1L << (SEQUENCE - 257)) | (1L << (SESSION - 257)) | (1L << (SESSION_USER - 257)) | (1L << (SHOW - 257)) | (1L << (SIMPLE - 257)) | (1L << (STATISTICS - 257)) | (1L << (STORAGE - 257)) | (1L << (TABLESPACE - 257)) | (1L << (TEMP - 257)) | (1L << (TEMPORARY - 257)) | (1L << (UNBOUNDED - 257)) | (1L << (UNLOGGED - 257)) | (1L << (VALID - 257)) | (1L << (VALIDATE - 257)) | (1L << (WITHIN - 257)) | (1L << (WITHOUT - 257)) | (1L << (ZONE - 257)) | (1L << (OF - 257)) | (1L << (UESCAPE - 257)) | (1L << (GROUPS - 257)) | (1L << (RECURSIVE - 257)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (ENUM - 328)) | (1L << (XML - 328)) | (1L << (TABLESAMPLE - 328)) | (1L << (ORDINALITY - 328)) | (1L << (CURRENT_ROLE - 328)) | (1L << (CURRENT_CATALOG - 328)) | (1L << (CURRENT_SCHEMA - 328)) | (1L << (NORMALIZE - 328)) | (1L << (OVERLAY - 328)) | (1L << (XMLCONCAT - 328)) | (1L << (XMLELEMENT - 328)) | (1L << (XMLEXISTS - 328)) | (1L << (XMLFOREST - 328)) | (1L << (XMLPARSE - 328)) | (1L << (XMLPI - 328)) | (1L << (XMLROOT - 328)) | (1L << (XMLSERIALIZE - 328)) | (1L << (TREAT - 328)) | (1L << (NFC - 328)) | (1L << (NFD - 328)) | (1L << (NFKC - 328)) | (1L << (NFKD - 328)) | (1L << (REF - 328)) | (1L << (PASSING - 328)) | (1L << (VERSION - 328)) | (1L << (YES - 328)) | (1L << (STANDALONE - 328)) | (1L << (GREATEST - 328)) | (1L << (LEAST - 328)) | (1L << (MATERIALIZED - 328)) | (1L << (OPERATOR - 328)) | (1L << (SHARE - 328)) | (1L << (ROLLUP - 328)) | (1L << (ILIKE - 328)) | (1L << (SIMILAR - 328)) | (1L << (ISNULL - 328)) | (1L << (NOTNULL - 328)) | (1L << (DOCUMENT - 328)) | (1L << (NORMALIZED - 328)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (NOWAIT - 394)) | (1L << (LOCKED - 394)) | (1L << (COLUMNS - 394)) | (1L << (CONTENT - 394)) | (1L << (STRIP - 394)) | (1L << (WHITESPACE - 394)) | (1L << (CONFLICT - 394)) | (1L << (OVERRIDING - 394)) | (1L << (SYSTEM - 394)) | (1L << (ABORT - 394)) | (1L << (ABSOLUTE - 394)) | (1L << (ACCESS - 394)) | (1L << (AFTER - 394)) | (1L << (AGGREGATE - 394)) | (1L << (ALSO - 394)) | (1L << (ATTACH - 394)) | (1L << (ATTRIBUTE - 394)) | (1L << (BACKWARD - 394)) | (1L << (BEFORE - 394)) | (1L << (ASSERTION - 394)) | (1L << (ASSIGNMENT - 394)) | (1L << (CONTINUE - 394)) | (1L << (CONVERSION - 394)) | (1L << (COPY - 394)) | (1L << (COST - 394)) | (1L << (CSV - 394)) | (1L << (CALLED - 394)) | (1L << (CATALOG - 394)) | (1L << (CHAIN - 394)) | (1L << (CHECKPOINT - 394)) | (1L << (CLASS - 394)) | (1L << (CONFIGURATION - 394)) | (1L << (COMMENT - 394)) | (1L << (DETACH - 394)) | (1L << (DICTIONARY - 394)) | (1L << (EXPRESSION - 394)) | (1L << (INSENSITIVE - 394)) | (1L << (DISCARD - 394)) | (1L << (OFF - 394)) | (1L << (INSTEAD - 394)) | (1L << (EXPLAIN - 394)) | (1L << (INPUT - 394)) | (1L << (INLINE - 394)) | (1L << (PARALLEL - 394)) | (1L << (LEAKPROOF - 394)) | (1L << (COMMITTED - 394)) | (1L << (ENCODING - 394)) | (1L << (IMPLICIT - 394)) | (1L << (DELIMITER - 394)) | (1L << (CURSOR - 394)) | (1L << (EACH - 394)) | (1L << (EVENT - 394)) | (1L << (DEALLOCATE - 394)) | (1L << (CONNECTION - 394)) | (1L << (DECLARE - 394)) | (1L << (FAMILY - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (FORWARD - 458)) | (1L << (EXCLUSIVE - 458)) | (1L << (FUNCTIONS - 458)) | (1L << (LOCATION - 458)) | (1L << (LABEL - 458)) | (1L << (DELIMITERS - 458)) | (1L << (HANDLER - 458)) | (1L << (HEADER - 458)) | (1L << (IMMUTABLE - 458)) | (1L << (GRANTED - 458)) | (1L << (HOLD - 458)) | (1L << (MAPPING - 458)) | (1L << (OLD - 458)) | (1L << (METHOD - 458)) | (1L << (LOAD - 458)) | (1L << (LISTEN - 458)) | (1L << (MODE - 458)) | (1L << (MOVE - 458)) | (1L << (PROCEDURAL - 458)) | (1L << (PARSER - 458)) | (1L << (PROCEDURES - 458)) | (1L << (ENCRYPTED - 458)) | (1L << (PUBLICATION - 458)) | (1L << (PROGRAM - 458)) | (1L << (REFERENCING - 458)) | (1L << (PLANS - 458)) | (1L << (REINDEX - 458)) | (1L << (PRIOR - 458)) | (1L << (PASSWORD - 458)) | (1L << (RELATIVE - 458)) | (1L << (QUOTE - 458)) | (1L << (ROUTINES - 458)) | (1L << (REPLACE - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (REFRESH - 458)) | (1L << (PREPARE - 458)) | (1L << (OPTIONS - 458)) | (1L << (IMPORT - 458)) | (1L << (INVOKER - 458)) | (1L << (NEW - 458)) | (1L << (PREPARED - 458)) | (1L << (SCROLL - 458)) | (1L << (SEQUENCES - 458)) | (1L << (SYSID - 458)) | (1L << (REASSIGN - 458)) | (1L << (SERVER - 458)) | (1L << (SUBSCRIPTION - 458)) | (1L << (SEARCH - 458)) | (1L << (SCHEMAS - 458)) | (1L << (RECHECK - 458)) | (1L << (POLICY - 458)) | (1L << (NOTIFY - 458)) | (1L << (LOCK - 458)) | (1L << (RELEASE - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (RETURNS - 458)) | (1L << (STATEMENT - 458)) | (1L << (STDIN - 458)) | (1L << (STDOUT - 458)) | (1L << (TABLES - 458)) | (1L << (SUPPORT - 458)) | (1L << (STABLE - 458)) | (1L << (TEMPLATE - 458)) | (1L << (UNENCRYPTED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (VIEWS - 522)) | (1L << (UNCOMMITTED - 522)) | (1L << (TRANSFORM - 522)) | (1L << (UNLISTEN - 522)) | (1L << (TRUSTED - 522)) | (1L << (VALIDATOR - 522)) | (1L << (UNTIL - 522)) | (1L << (VACUUM - 522)) | (1L << (VOLATILE - 522)) | (1L << (STORED - 522)) | (1L << (WRITE - 522)) | (1L << (STRICT - 522)) | (1L << (TYPES - 522)) | (1L << (WRAPPER - 522)) | (1L << (WORK - 522)) | (1L << (FREEZE - 522)) | (1L << (AUTHORIZATION - 522)) | (1L << (VERBOSE - 522)) | (1L << (PARAM - 522)) | (1L << (IDENTIFIER_ - 522)) | (1L << (STRING_ - 522)) | (1L << (NUMBER_ - 522)))) != 0)) {
					{
					setState(2242);
					sliceBound();
					}
				}

				setState(2245);
				match(RBT_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SliceBoundContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SliceBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sliceBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSliceBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSliceBound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSliceBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SliceBoundContext sliceBound() throws RecognitionException {
		SliceBoundContext _localctx = new SliceBoundContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_sliceBound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2248);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InExprContext extends ParserRuleContext {
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public InExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterInExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitInExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitInExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InExprContext inExpr() throws RecognitionException {
		InExprContext _localctx = new InExprContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_inExpr);
		try {
			setState(2255);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2250);
				selectWithParens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2251);
				match(LP_);
				setState(2252);
				exprList(0);
				setState(2253);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(DMLStatementParser.CASE, 0); }
		public WhenClauseListContext whenClauseList() {
			return getRuleContext(WhenClauseListContext.class,0);
		}
		public TerminalNode END() { return getToken(DMLStatementParser.END, 0); }
		public CaseArgContext caseArg() {
			return getRuleContext(CaseArgContext.class,0);
		}
		public CaseDefaultContext caseDefault() {
			return getRuleContext(CaseDefaultContext.class,0);
		}
		public CaseExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCaseExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCaseExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCaseExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExprContext caseExpr() throws RecognitionException {
		CaseExprContext _localctx = new CaseExprContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_caseExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2257);
			match(CASE);
			setState(2259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << CARET_) | (1L << MOD_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_) | (1L << LP_) | (1L << QUESTION_) | (1L << TILDE_TILDE_) | (1L << NOT_TILDE_TILDE_) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INDEX - 64)) | (1L << (UNIQUE - 64)) | (1L << (KEY - 64)) | (1L << (POSITION - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (TRIM - 64)) | (1L << (SUBSTRING - 64)) | (1L << (NATURAL - 64)) | (1L << (JOIN - 64)) | (1L << (FULL - 64)) | (1L << (INNER - 64)) | (1L << (OUTER - 64)) | (1L << (LEFT - 64)) | (1L << (RIGHT - 64)) | (1L << (CROSS - 64)) | (1L << (IF - 64)) | (1L << (IS - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (TRUE - 64)) | (1L << (FALSE - 64)) | (1L << (EXISTS - 64)) | (1L << (LIKE - 64)) | (1L << (BY - 64)) | (1L << (BEGIN - 64)) | (1L << (COMMIT - 64)) | (1L << (ROLLBACK - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (SAVEPOINT - 128)) | (1L << (DOUBLE - 128)) | (1L << (ARRAY - 128)) | (1L << (LOCALTIME - 128)) | (1L << (LOCALTIMESTAMP - 128)) | (1L << (YEAR - 128)) | (1L << (MONTH - 128)) | (1L << (DAY - 128)) | (1L << (HOUR - 128)) | (1L << (MINUTE - 128)) | (1L << (SECOND - 128)) | (1L << (DEFAULT - 128)) | (1L << (CURRENT - 128)) | (1L << (ENABLE - 128)) | (1L << (DISABLE - 128)) | (1L << (CALL - 128)) | (1L << (PRESERVE - 128)) | (1L << (DEFINER - 128)) | (1L << (CURRENT_USER - 128)) | (1L << (SQL - 128)) | (1L << (CASCADED - 128)) | (1L << (LOCAL - 128)) | (1L << (CLOSE - 128)) | (1L << (NEXT - 128)) | (1L << (NAME - 128)) | (1L << (COLLATION - 128)) | (1L << (NAMES - 128)) | (1L << (TYPE - 128)) | (1L << (TEXT - 128)) | (1L << (REPEATABLE - 128)) | (1L << (CURRENT_DATE - 128)) | (1L << (CURRENT_TIME - 128)) | (1L << (CURRENT_TIMESTAMP - 128)) | (1L << (NULLIF - 128)) | (1L << (VARYING - 128)) | (1L << (VALUE - 128)) | (1L << (COALESCE - 128)) | (1L << (TIES - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (CUBE - 193)) | (1L << (GROUPING - 193)) | (1L << (SETS - 193)) | (1L << (OTHERS - 193)) | (1L << (OVERLAPS - 193)) | (1L << (AT - 193)) | (1L << (ADMIN - 193)) | (1L << (BINARY - 193)) | (1L << (ESCAPE - 193)) | (1L << (EXCLUDE - 193)) | (1L << (PARTITION - 193)) | (1L << (ROW - 193)) | (1L << (UNKNOWN - 193)) | (1L << (ALWAYS - 193)) | (1L << (CASCADE - 193)) | (1L << (GENERATED - 193)) | (1L << (ISOLATION - 193)) | (1L << (LEVEL - 193)) | (1L << (NO - 193)) | (1L << (OPTION - 193)) | (1L << (PRIVILEGES - 193)) | (1L << (READ - 193)) | (1L << (ROLE - 193)) | (1L << (ROWS - 193)) | (1L << (START - 193)) | (1L << (TRANSACTION - 193)) | (1L << (USER - 193)) | (1L << (ACTION - 193)) | (1L << (CACHE - 193)) | (1L << (CHARACTERISTICS - 193)) | (1L << (CLUSTER - 193)) | (1L << (COMMENTS - 193)) | (1L << (CONCURRENTLY - 193)) | (1L << (CONSTRAINTS - 193)) | (1L << (CYCLE - 193)) | (1L << (DATA - 193)) | (1L << (DATABASE - 193)) | (1L << (DEFAULTS - 193)) | (1L << (DEFERRED - 193)) | (1L << (DEPENDS - 193)) | (1L << (DOMAIN - 193)) | (1L << (EXCLUDING - 193)) | (1L << (EXECUTE - 193)) | (1L << (EXTENSION - 193)) | (1L << (EXTERNAL - 193)) | (1L << (EXTRACT - 193)) | (1L << (FILTER - 193)) | (1L << (FIRST - 193)) | (1L << (FOLLOWING - 193)) | (1L << (FORCE - 193)) | (1L << (GLOBAL - 193)) | (1L << (IDENTITY - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (IMMEDIATE - 257)) | (1L << (INCLUDING - 257)) | (1L << (INCREMENT - 257)) | (1L << (INDEXES - 257)) | (1L << (INHERIT - 257)) | (1L << (INHERITS - 257)) | (1L << (INCLUDE - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LARGE - 257)) | (1L << (LAST - 257)) | (1L << (LOGGED - 257)) | (1L << (MATCH - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MINVALUE - 257)) | (1L << (NOTHING - 257)) | (1L << (NULLS - 257)) | (1L << (OBJECT - 257)) | (1L << (OIDS - 257)) | (1L << (OVER - 257)) | (1L << (OWNED - 257)) | (1L << (OWNER - 257)) | (1L << (PARTIAL - 257)) | (1L << (PRECEDING - 257)) | (1L << (RANGE - 257)) | (1L << (RENAME - 257)) | (1L << (REPLICA - 257)) | (1L << (RESET - 257)) | (1L << (RESTART - 257)) | (1L << (RESTRICT - 257)) | (1L << (ROUTINE - 257)) | (1L << (RULE - 257)) | (1L << (SECURITY - 257)) | (1L << (SEQUENCE - 257)) | (1L << (SESSION - 257)) | (1L << (SESSION_USER - 257)) | (1L << (SHOW - 257)) | (1L << (SIMPLE - 257)) | (1L << (STATISTICS - 257)) | (1L << (STORAGE - 257)) | (1L << (TABLESPACE - 257)) | (1L << (TEMP - 257)) | (1L << (TEMPORARY - 257)) | (1L << (UNBOUNDED - 257)) | (1L << (UNLOGGED - 257)) | (1L << (VALID - 257)) | (1L << (VALIDATE - 257)) | (1L << (WITHIN - 257)) | (1L << (WITHOUT - 257)) | (1L << (ZONE - 257)) | (1L << (OF - 257)) | (1L << (UESCAPE - 257)) | (1L << (GROUPS - 257)) | (1L << (RECURSIVE - 257)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (ENUM - 328)) | (1L << (XML - 328)) | (1L << (TABLESAMPLE - 328)) | (1L << (ORDINALITY - 328)) | (1L << (CURRENT_ROLE - 328)) | (1L << (CURRENT_CATALOG - 328)) | (1L << (CURRENT_SCHEMA - 328)) | (1L << (NORMALIZE - 328)) | (1L << (OVERLAY - 328)) | (1L << (XMLCONCAT - 328)) | (1L << (XMLELEMENT - 328)) | (1L << (XMLEXISTS - 328)) | (1L << (XMLFOREST - 328)) | (1L << (XMLPARSE - 328)) | (1L << (XMLPI - 328)) | (1L << (XMLROOT - 328)) | (1L << (XMLSERIALIZE - 328)) | (1L << (TREAT - 328)) | (1L << (NFC - 328)) | (1L << (NFD - 328)) | (1L << (NFKC - 328)) | (1L << (NFKD - 328)) | (1L << (REF - 328)) | (1L << (PASSING - 328)) | (1L << (VERSION - 328)) | (1L << (YES - 328)) | (1L << (STANDALONE - 328)) | (1L << (GREATEST - 328)) | (1L << (LEAST - 328)) | (1L << (MATERIALIZED - 328)) | (1L << (OPERATOR - 328)) | (1L << (SHARE - 328)) | (1L << (ROLLUP - 328)) | (1L << (ILIKE - 328)) | (1L << (SIMILAR - 328)) | (1L << (ISNULL - 328)) | (1L << (NOTNULL - 328)) | (1L << (DOCUMENT - 328)) | (1L << (NORMALIZED - 328)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (NOWAIT - 394)) | (1L << (LOCKED - 394)) | (1L << (COLUMNS - 394)) | (1L << (CONTENT - 394)) | (1L << (STRIP - 394)) | (1L << (WHITESPACE - 394)) | (1L << (CONFLICT - 394)) | (1L << (OVERRIDING - 394)) | (1L << (SYSTEM - 394)) | (1L << (ABORT - 394)) | (1L << (ABSOLUTE - 394)) | (1L << (ACCESS - 394)) | (1L << (AFTER - 394)) | (1L << (AGGREGATE - 394)) | (1L << (ALSO - 394)) | (1L << (ATTACH - 394)) | (1L << (ATTRIBUTE - 394)) | (1L << (BACKWARD - 394)) | (1L << (BEFORE - 394)) | (1L << (ASSERTION - 394)) | (1L << (ASSIGNMENT - 394)) | (1L << (CONTINUE - 394)) | (1L << (CONVERSION - 394)) | (1L << (COPY - 394)) | (1L << (COST - 394)) | (1L << (CSV - 394)) | (1L << (CALLED - 394)) | (1L << (CATALOG - 394)) | (1L << (CHAIN - 394)) | (1L << (CHECKPOINT - 394)) | (1L << (CLASS - 394)) | (1L << (CONFIGURATION - 394)) | (1L << (COMMENT - 394)) | (1L << (DETACH - 394)) | (1L << (DICTIONARY - 394)) | (1L << (EXPRESSION - 394)) | (1L << (INSENSITIVE - 394)) | (1L << (DISCARD - 394)) | (1L << (OFF - 394)) | (1L << (INSTEAD - 394)) | (1L << (EXPLAIN - 394)) | (1L << (INPUT - 394)) | (1L << (INLINE - 394)) | (1L << (PARALLEL - 394)) | (1L << (LEAKPROOF - 394)) | (1L << (COMMITTED - 394)) | (1L << (ENCODING - 394)) | (1L << (IMPLICIT - 394)) | (1L << (DELIMITER - 394)) | (1L << (CURSOR - 394)) | (1L << (EACH - 394)) | (1L << (EVENT - 394)) | (1L << (DEALLOCATE - 394)) | (1L << (CONNECTION - 394)) | (1L << (DECLARE - 394)) | (1L << (FAMILY - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (FORWARD - 458)) | (1L << (EXCLUSIVE - 458)) | (1L << (FUNCTIONS - 458)) | (1L << (LOCATION - 458)) | (1L << (LABEL - 458)) | (1L << (DELIMITERS - 458)) | (1L << (HANDLER - 458)) | (1L << (HEADER - 458)) | (1L << (IMMUTABLE - 458)) | (1L << (GRANTED - 458)) | (1L << (HOLD - 458)) | (1L << (MAPPING - 458)) | (1L << (OLD - 458)) | (1L << (METHOD - 458)) | (1L << (LOAD - 458)) | (1L << (LISTEN - 458)) | (1L << (MODE - 458)) | (1L << (MOVE - 458)) | (1L << (PROCEDURAL - 458)) | (1L << (PARSER - 458)) | (1L << (PROCEDURES - 458)) | (1L << (ENCRYPTED - 458)) | (1L << (PUBLICATION - 458)) | (1L << (PROGRAM - 458)) | (1L << (REFERENCING - 458)) | (1L << (PLANS - 458)) | (1L << (REINDEX - 458)) | (1L << (PRIOR - 458)) | (1L << (PASSWORD - 458)) | (1L << (RELATIVE - 458)) | (1L << (QUOTE - 458)) | (1L << (ROUTINES - 458)) | (1L << (REPLACE - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (REFRESH - 458)) | (1L << (PREPARE - 458)) | (1L << (OPTIONS - 458)) | (1L << (IMPORT - 458)) | (1L << (INVOKER - 458)) | (1L << (NEW - 458)) | (1L << (PREPARED - 458)) | (1L << (SCROLL - 458)) | (1L << (SEQUENCES - 458)) | (1L << (SYSID - 458)) | (1L << (REASSIGN - 458)) | (1L << (SERVER - 458)) | (1L << (SUBSCRIPTION - 458)) | (1L << (SEARCH - 458)) | (1L << (SCHEMAS - 458)) | (1L << (RECHECK - 458)) | (1L << (POLICY - 458)) | (1L << (NOTIFY - 458)) | (1L << (LOCK - 458)) | (1L << (RELEASE - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (RETURNS - 458)) | (1L << (STATEMENT - 458)) | (1L << (STDIN - 458)) | (1L << (STDOUT - 458)) | (1L << (TABLES - 458)) | (1L << (SUPPORT - 458)) | (1L << (STABLE - 458)) | (1L << (TEMPLATE - 458)) | (1L << (UNENCRYPTED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (VIEWS - 522)) | (1L << (UNCOMMITTED - 522)) | (1L << (TRANSFORM - 522)) | (1L << (UNLISTEN - 522)) | (1L << (TRUSTED - 522)) | (1L << (VALIDATOR - 522)) | (1L << (UNTIL - 522)) | (1L << (VACUUM - 522)) | (1L << (VOLATILE - 522)) | (1L << (STORED - 522)) | (1L << (WRITE - 522)) | (1L << (STRICT - 522)) | (1L << (TYPES - 522)) | (1L << (WRAPPER - 522)) | (1L << (WORK - 522)) | (1L << (FREEZE - 522)) | (1L << (AUTHORIZATION - 522)) | (1L << (VERBOSE - 522)) | (1L << (PARAM - 522)) | (1L << (IDENTIFIER_ - 522)) | (1L << (STRING_ - 522)) | (1L << (NUMBER_ - 522)))) != 0)) {
				{
				setState(2258);
				caseArg();
				}
			}

			setState(2261);
			whenClauseList();
			setState(2263);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2262);
				caseDefault();
				}
			}

			setState(2265);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenClauseListContext extends ParserRuleContext {
		public List<WhenClauseContext> whenClause() {
			return getRuleContexts(WhenClauseContext.class);
		}
		public WhenClauseContext whenClause(int i) {
			return getRuleContext(WhenClauseContext.class,i);
		}
		public WhenClauseListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenClauseList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterWhenClauseList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitWhenClauseList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitWhenClauseList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenClauseListContext whenClauseList() throws RecognitionException {
		WhenClauseListContext _localctx = new WhenClauseListContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_whenClauseList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2268); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2267);
				whenClause();
				}
				}
				setState(2270); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenClauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(DMLStatementParser.WHEN, 0); }
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(DMLStatementParser.THEN, 0); }
		public WhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenClauseContext whenClause() throws RecognitionException {
		WhenClauseContext _localctx = new WhenClauseContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_whenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2272);
			match(WHEN);
			setState(2273);
			aExpr(0);
			setState(2274);
			match(THEN);
			setState(2275);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseDefaultContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(DMLStatementParser.ELSE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public CaseDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCaseDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCaseDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCaseDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseDefaultContext caseDefault() throws RecognitionException {
		CaseDefaultContext _localctx = new CaseDefaultContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_caseDefault);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2277);
			match(ELSE);
			setState(2278);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseArgContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public CaseArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCaseArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCaseArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCaseArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseArgContext caseArg() throws RecognitionException {
		CaseArgContext _localctx = new CaseArgContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_caseArg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2280);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnrefContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterColumnref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitColumnref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitColumnref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnrefContext columnref() throws RecognitionException {
		ColumnrefContext _localctx = new ColumnrefContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_columnref);
		try {
			setState(2286);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2282);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2283);
				colId();
				setState(2284);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualOpContext extends ParserRuleContext {
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public TerminalNode TILDE_TILDE_() { return getToken(DMLStatementParser.TILDE_TILDE_, 0); }
		public TerminalNode NOT_TILDE_TILDE_() { return getToken(DMLStatementParser.NOT_TILDE_TILDE_, 0); }
		public TerminalNode OPERATOR() { return getToken(DMLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public QualOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterQualOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitQualOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitQualOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualOpContext qualOp() throws RecognitionException {
		QualOpContext _localctx = new QualOpContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_qualOp);
		try {
			setState(2296);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CARET_:
			case MOD_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2288);
				mathOperator();
				}
				break;
			case TILDE_TILDE_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2289);
				match(TILDE_TILDE_);
				}
				break;
			case NOT_TILDE_TILDE_:
				enterOuterAlt(_localctx, 3);
				{
				setState(2290);
				match(NOT_TILDE_TILDE_);
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 4);
				{
				setState(2291);
				match(OPERATOR);
				setState(2292);
				match(LP_);
				setState(2293);
				anyOperator();
				setState(2294);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryOpContext extends ParserRuleContext {
		public AllOpContext allOp() {
			return getRuleContext(AllOpContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(DMLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public TerminalNode LIKE() { return getToken(DMLStatementParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(DMLStatementParser.NOT, 0); }
		public TerminalNode ILIKE() { return getToken(DMLStatementParser.ILIKE, 0); }
		public SubqueryOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subqueryOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSubqueryOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSubqueryOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSubqueryOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryOpContext subqueryOp() throws RecognitionException {
		SubqueryOpContext _localctx = new SubqueryOpContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_subqueryOp);
		try {
			setState(2310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2298);
				allOp();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2299);
				match(OPERATOR);
				setState(2300);
				match(LP_);
				setState(2301);
				anyOperator();
				setState(2302);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2304);
				match(LIKE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2305);
				match(NOT);
				setState(2306);
				match(LIKE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2307);
				match(ILIKE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2308);
				match(NOT);
				setState(2309);
				match(ILIKE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllOpContext extends ParserRuleContext {
		public OpContext op() {
			return getRuleContext(OpContext.class,0);
		}
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public AllOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterAllOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitAllOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitAllOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllOpContext allOp() throws RecognitionException {
		AllOpContext _localctx = new AllOpContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_allOp);
		try {
			setState(2314);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2312);
				op();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2313);
				mathOperator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpContext extends ParserRuleContext {
		public List<TerminalNode> AND_() { return getTokens(DMLStatementParser.AND_); }
		public TerminalNode AND_(int i) {
			return getToken(DMLStatementParser.AND_, i);
		}
		public List<TerminalNode> OR_() { return getTokens(DMLStatementParser.OR_); }
		public TerminalNode OR_(int i) {
			return getToken(DMLStatementParser.OR_, i);
		}
		public List<TerminalNode> NOT_() { return getTokens(DMLStatementParser.NOT_); }
		public TerminalNode NOT_(int i) {
			return getToken(DMLStatementParser.NOT_, i);
		}
		public List<TerminalNode> TILDE_() { return getTokens(DMLStatementParser.TILDE_); }
		public TerminalNode TILDE_(int i) {
			return getToken(DMLStatementParser.TILDE_, i);
		}
		public List<TerminalNode> VERTICAL_BAR_() { return getTokens(DMLStatementParser.VERTICAL_BAR_); }
		public TerminalNode VERTICAL_BAR_(int i) {
			return getToken(DMLStatementParser.VERTICAL_BAR_, i);
		}
		public List<TerminalNode> AMPERSAND_() { return getTokens(DMLStatementParser.AMPERSAND_); }
		public TerminalNode AMPERSAND_(int i) {
			return getToken(DMLStatementParser.AMPERSAND_, i);
		}
		public List<TerminalNode> SIGNED_LEFT_SHIFT_() { return getTokens(DMLStatementParser.SIGNED_LEFT_SHIFT_); }
		public TerminalNode SIGNED_LEFT_SHIFT_(int i) {
			return getToken(DMLStatementParser.SIGNED_LEFT_SHIFT_, i);
		}
		public List<TerminalNode> SIGNED_RIGHT_SHIFT_() { return getTokens(DMLStatementParser.SIGNED_RIGHT_SHIFT_); }
		public TerminalNode SIGNED_RIGHT_SHIFT_(int i) {
			return getToken(DMLStatementParser.SIGNED_RIGHT_SHIFT_, i);
		}
		public List<TerminalNode> CARET_() { return getTokens(DMLStatementParser.CARET_); }
		public TerminalNode CARET_(int i) {
			return getToken(DMLStatementParser.CARET_, i);
		}
		public List<TerminalNode> MOD_() { return getTokens(DMLStatementParser.MOD_); }
		public TerminalNode MOD_(int i) {
			return getToken(DMLStatementParser.MOD_, i);
		}
		public List<TerminalNode> COLON_() { return getTokens(DMLStatementParser.COLON_); }
		public TerminalNode COLON_(int i) {
			return getToken(DMLStatementParser.COLON_, i);
		}
		public List<TerminalNode> PLUS_() { return getTokens(DMLStatementParser.PLUS_); }
		public TerminalNode PLUS_(int i) {
			return getToken(DMLStatementParser.PLUS_, i);
		}
		public List<TerminalNode> MINUS_() { return getTokens(DMLStatementParser.MINUS_); }
		public TerminalNode MINUS_(int i) {
			return getToken(DMLStatementParser.MINUS_, i);
		}
		public List<TerminalNode> ASTERISK_() { return getTokens(DMLStatementParser.ASTERISK_); }
		public TerminalNode ASTERISK_(int i) {
			return getToken(DMLStatementParser.ASTERISK_, i);
		}
		public List<TerminalNode> SLASH_() { return getTokens(DMLStatementParser.SLASH_); }
		public TerminalNode SLASH_(int i) {
			return getToken(DMLStatementParser.SLASH_, i);
		}
		public List<TerminalNode> BACKSLASH_() { return getTokens(DMLStatementParser.BACKSLASH_); }
		public TerminalNode BACKSLASH_(int i) {
			return getToken(DMLStatementParser.BACKSLASH_, i);
		}
		public List<TerminalNode> DOT_() { return getTokens(DMLStatementParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(DMLStatementParser.DOT_, i);
		}
		public List<TerminalNode> DOT_ASTERISK_() { return getTokens(DMLStatementParser.DOT_ASTERISK_); }
		public TerminalNode DOT_ASTERISK_(int i) {
			return getToken(DMLStatementParser.DOT_ASTERISK_, i);
		}
		public List<TerminalNode> SAFE_EQ_() { return getTokens(DMLStatementParser.SAFE_EQ_); }
		public TerminalNode SAFE_EQ_(int i) {
			return getToken(DMLStatementParser.SAFE_EQ_, i);
		}
		public List<TerminalNode> DEQ_() { return getTokens(DMLStatementParser.DEQ_); }
		public TerminalNode DEQ_(int i) {
			return getToken(DMLStatementParser.DEQ_, i);
		}
		public List<TerminalNode> EQ_() { return getTokens(DMLStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(DMLStatementParser.EQ_, i);
		}
		public List<TerminalNode> CQ_() { return getTokens(DMLStatementParser.CQ_); }
		public TerminalNode CQ_(int i) {
			return getToken(DMLStatementParser.CQ_, i);
		}
		public List<TerminalNode> NEQ_() { return getTokens(DMLStatementParser.NEQ_); }
		public TerminalNode NEQ_(int i) {
			return getToken(DMLStatementParser.NEQ_, i);
		}
		public List<TerminalNode> GT_() { return getTokens(DMLStatementParser.GT_); }
		public TerminalNode GT_(int i) {
			return getToken(DMLStatementParser.GT_, i);
		}
		public List<TerminalNode> GTE_() { return getTokens(DMLStatementParser.GTE_); }
		public TerminalNode GTE_(int i) {
			return getToken(DMLStatementParser.GTE_, i);
		}
		public List<TerminalNode> LT_() { return getTokens(DMLStatementParser.LT_); }
		public TerminalNode LT_(int i) {
			return getToken(DMLStatementParser.LT_, i);
		}
		public List<TerminalNode> LTE_() { return getTokens(DMLStatementParser.LTE_); }
		public TerminalNode LTE_(int i) {
			return getToken(DMLStatementParser.LTE_, i);
		}
		public List<TerminalNode> POUND_() { return getTokens(DMLStatementParser.POUND_); }
		public TerminalNode POUND_(int i) {
			return getToken(DMLStatementParser.POUND_, i);
		}
		public List<TerminalNode> LP_() { return getTokens(DMLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(DMLStatementParser.LP_, i);
		}
		public List<TerminalNode> RP_() { return getTokens(DMLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(DMLStatementParser.RP_, i);
		}
		public List<TerminalNode> LBE_() { return getTokens(DMLStatementParser.LBE_); }
		public TerminalNode LBE_(int i) {
			return getToken(DMLStatementParser.LBE_, i);
		}
		public List<TerminalNode> RBE_() { return getTokens(DMLStatementParser.RBE_); }
		public TerminalNode RBE_(int i) {
			return getToken(DMLStatementParser.RBE_, i);
		}
		public List<TerminalNode> LBT_() { return getTokens(DMLStatementParser.LBT_); }
		public TerminalNode LBT_(int i) {
			return getToken(DMLStatementParser.LBT_, i);
		}
		public List<TerminalNode> RBT_() { return getTokens(DMLStatementParser.RBT_); }
		public TerminalNode RBT_(int i) {
			return getToken(DMLStatementParser.RBT_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public List<TerminalNode> DQ_() { return getTokens(DMLStatementParser.DQ_); }
		public TerminalNode DQ_(int i) {
			return getToken(DMLStatementParser.DQ_, i);
		}
		public List<TerminalNode> SQ_() { return getTokens(DMLStatementParser.SQ_); }
		public TerminalNode SQ_(int i) {
			return getToken(DMLStatementParser.SQ_, i);
		}
		public List<TerminalNode> BQ_() { return getTokens(DMLStatementParser.BQ_); }
		public TerminalNode BQ_(int i) {
			return getToken(DMLStatementParser.BQ_, i);
		}
		public List<TerminalNode> QUESTION_() { return getTokens(DMLStatementParser.QUESTION_); }
		public TerminalNode QUESTION_(int i) {
			return getToken(DMLStatementParser.QUESTION_, i);
		}
		public List<TerminalNode> AT_() { return getTokens(DMLStatementParser.AT_); }
		public TerminalNode AT_(int i) {
			return getToken(DMLStatementParser.AT_, i);
		}
		public List<TerminalNode> SEMI_() { return getTokens(DMLStatementParser.SEMI_); }
		public TerminalNode SEMI_(int i) {
			return getToken(DMLStatementParser.SEMI_, i);
		}
		public List<TerminalNode> TILDE_TILDE_() { return getTokens(DMLStatementParser.TILDE_TILDE_); }
		public TerminalNode TILDE_TILDE_(int i) {
			return getToken(DMLStatementParser.TILDE_TILDE_, i);
		}
		public List<TerminalNode> NOT_TILDE_TILDE_() { return getTokens(DMLStatementParser.NOT_TILDE_TILDE_); }
		public TerminalNode NOT_TILDE_TILDE_(int i) {
			return getToken(DMLStatementParser.NOT_TILDE_TILDE_, i);
		}
		public List<TerminalNode> TYPE_CAST_() { return getTokens(DMLStatementParser.TYPE_CAST_); }
		public TerminalNode TYPE_CAST_(int i) {
			return getToken(DMLStatementParser.TYPE_CAST_, i);
		}
		public OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpContext op() throws RecognitionException {
		OpContext _localctx = new OpContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_op);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2317); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2316);
					_la = _input.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND_) | (1L << OR_) | (1L << NOT_) | (1L << TILDE_) | (1L << VERTICAL_BAR_) | (1L << AMPERSAND_) | (1L << SIGNED_LEFT_SHIFT_) | (1L << SIGNED_RIGHT_SHIFT_) | (1L << CARET_) | (1L << MOD_) | (1L << COLON_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << BACKSLASH_) | (1L << DOT_) | (1L << DOT_ASTERISK_) | (1L << SAFE_EQ_) | (1L << DEQ_) | (1L << EQ_) | (1L << CQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_) | (1L << POUND_) | (1L << LP_) | (1L << RP_) | (1L << LBE_) | (1L << RBE_) | (1L << LBT_) | (1L << RBT_) | (1L << COMMA_) | (1L << DQ_) | (1L << SQ_) | (1L << BQ_) | (1L << QUESTION_) | (1L << AT_) | (1L << SEMI_) | (1L << TILDE_TILDE_) | (1L << NOT_TILDE_TILDE_) | (1L << TYPE_CAST_))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2319); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,196,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode PLUS_() { return getToken(DMLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(DMLStatementParser.MINUS_, 0); }
		public TerminalNode ASTERISK_() { return getToken(DMLStatementParser.ASTERISK_, 0); }
		public TerminalNode SLASH_() { return getToken(DMLStatementParser.SLASH_, 0); }
		public TerminalNode MOD_() { return getToken(DMLStatementParser.MOD_, 0); }
		public TerminalNode CARET_() { return getToken(DMLStatementParser.CARET_, 0); }
		public TerminalNode LT_() { return getToken(DMLStatementParser.LT_, 0); }
		public TerminalNode GT_() { return getToken(DMLStatementParser.GT_, 0); }
		public TerminalNode EQ_() { return getToken(DMLStatementParser.EQ_, 0); }
		public TerminalNode LTE_() { return getToken(DMLStatementParser.LTE_, 0); }
		public TerminalNode GTE_() { return getToken(DMLStatementParser.GTE_, 0); }
		public TerminalNode NEQ_() { return getToken(DMLStatementParser.NEQ_, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2321);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CARET_) | (1L << MOD_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualAllOpContext extends ParserRuleContext {
		public AllOpContext allOp() {
			return getRuleContext(AllOpContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(DMLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public QualAllOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualAllOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterQualAllOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitQualAllOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitQualAllOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualAllOpContext qualAllOp() throws RecognitionException {
		QualAllOpContext _localctx = new QualAllOpContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_qualAllOp);
		try {
			setState(2329);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND_:
			case OR_:
			case NOT_:
			case TILDE_:
			case VERTICAL_BAR_:
			case AMPERSAND_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case CARET_:
			case MOD_:
			case COLON_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case BACKSLASH_:
			case DOT_:
			case DOT_ASTERISK_:
			case SAFE_EQ_:
			case DEQ_:
			case EQ_:
			case CQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case POUND_:
			case LP_:
			case RP_:
			case LBE_:
			case RBE_:
			case LBT_:
			case RBT_:
			case COMMA_:
			case DQ_:
			case SQ_:
			case BQ_:
			case QUESTION_:
			case AT_:
			case SEMI_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case TYPE_CAST_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2323);
				allOp();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(2324);
				match(OPERATOR);
				setState(2325);
				match(LP_);
				setState(2326);
				anyOperator();
				setState(2327);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AscDescContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(DMLStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DMLStatementParser.DESC, 0); }
		public AscDescContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ascDesc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterAscDesc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitAscDesc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitAscDesc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AscDescContext ascDesc() throws RecognitionException {
		AscDescContext _localctx = new AscDescContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_ascDesc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2331);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnyOperatorContext extends ParserRuleContext {
		public AllOpContext allOp() {
			return getRuleContext(AllOpContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DMLStatementParser.DOT_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public AnyOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterAnyOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitAnyOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitAnyOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnyOperatorContext anyOperator() throws RecognitionException {
		AnyOperatorContext _localctx = new AnyOperatorContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_anyOperator);
		try {
			setState(2338);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND_:
			case OR_:
			case NOT_:
			case TILDE_:
			case VERTICAL_BAR_:
			case AMPERSAND_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case CARET_:
			case MOD_:
			case COLON_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case BACKSLASH_:
			case DOT_:
			case DOT_ASTERISK_:
			case SAFE_EQ_:
			case DEQ_:
			case EQ_:
			case CQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case POUND_:
			case LP_:
			case RP_:
			case LBE_:
			case RBE_:
			case LBT_:
			case RBT_:
			case COMMA_:
			case DQ_:
			case SQ_:
			case BQ_:
			case QUESTION_:
			case AT_:
			case SEMI_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case TYPE_CAST_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2333);
				allOp();
				}
				break;
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(2334);
				colId();
				setState(2335);
				match(DOT_);
				setState(2336);
				anyOperator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowExclusionClauseContext extends ParserRuleContext {
		public TerminalNode EXCLUDE() { return getToken(DMLStatementParser.EXCLUDE, 0); }
		public TerminalNode CURRENT() { return getToken(DMLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DMLStatementParser.ROW, 0); }
		public TerminalNode GROUP() { return getToken(DMLStatementParser.GROUP, 0); }
		public TerminalNode TIES() { return getToken(DMLStatementParser.TIES, 0); }
		public TerminalNode NO() { return getToken(DMLStatementParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(DMLStatementParser.OTHERS, 0); }
		public WindowExclusionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowExclusionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterWindowExclusionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitWindowExclusionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitWindowExclusionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowExclusionClauseContext windowExclusionClause() throws RecognitionException {
		WindowExclusionClauseContext _localctx = new WindowExclusionClauseContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_windowExclusionClause);
		try {
			setState(2350);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2340);
				match(EXCLUDE);
				setState(2341);
				match(CURRENT);
				setState(2342);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2343);
				match(EXCLUDE);
				setState(2344);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2345);
				match(EXCLUDE);
				setState(2346);
				match(TIES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2347);
				match(EXCLUDE);
				setState(2348);
				match(NO);
				setState(2349);
				match(OTHERS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(DMLStatementParser.ROW, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public RowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowContext row() throws RecognitionException {
		RowContext _localctx = new RowContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_row);
		try {
			setState(2366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2352);
				match(ROW);
				setState(2353);
				match(LP_);
				setState(2354);
				exprList(0);
				setState(2355);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2357);
				match(ROW);
				setState(2358);
				match(LP_);
				setState(2359);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2360);
				match(LP_);
				setState(2361);
				exprList(0);
				setState(2362);
				match(COMMA_);
				setState(2363);
				aExpr(0);
				setState(2364);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplicitRowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(DMLStatementParser.ROW, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public ExplicitRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicitRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterExplicitRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitExplicitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitExplicitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplicitRowContext explicitRow() throws RecognitionException {
		ExplicitRowContext _localctx = new ExplicitRowContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_explicitRow);
		try {
			setState(2376);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2368);
				match(ROW);
				setState(2369);
				match(LP_);
				setState(2370);
				exprList(0);
				setState(2371);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2373);
				match(ROW);
				setState(2374);
				match(LP_);
				setState(2375);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImplicitRowContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public ImplicitRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicitRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterImplicitRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitImplicitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitImplicitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImplicitRowContext implicitRow() throws RecognitionException {
		ImplicitRowContext _localctx = new ImplicitRowContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_implicitRow);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2378);
			match(LP_);
			setState(2379);
			exprList(0);
			setState(2380);
			match(COMMA_);
			setState(2381);
			aExpr(0);
			setState(2382);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubTypeContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(DMLStatementParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(DMLStatementParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(DMLStatementParser.ALL, 0); }
		public SubTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSubType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSubType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSubType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubTypeContext subType() throws RecognitionException {
		SubTypeContext _localctx = new SubTypeContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_subType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2384);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExprContext extends ParserRuleContext {
		public TerminalNode LBT_() { return getToken(DMLStatementParser.LBT_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RBT_() { return getToken(DMLStatementParser.RBT_, 0); }
		public ArrayExprListContext arrayExprList() {
			return getRuleContext(ArrayExprListContext.class,0);
		}
		public ArrayExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterArrayExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitArrayExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitArrayExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExprContext arrayExpr() throws RecognitionException {
		ArrayExprContext _localctx = new ArrayExprContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_arrayExpr);
		try {
			setState(2396);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,202,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2386);
				match(LBT_);
				setState(2387);
				exprList(0);
				setState(2388);
				match(RBT_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2390);
				match(LBT_);
				setState(2391);
				arrayExprList();
				setState(2392);
				match(RBT_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2394);
				match(LBT_);
				setState(2395);
				match(RBT_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExprListContext extends ParserRuleContext {
		public List<ArrayExprContext> arrayExpr() {
			return getRuleContexts(ArrayExprContext.class);
		}
		public ArrayExprContext arrayExpr(int i) {
			return getRuleContext(ArrayExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public ArrayExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterArrayExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitArrayExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitArrayExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExprListContext arrayExprList() throws RecognitionException {
		ArrayExprListContext _localctx = new ArrayExprListContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_arrayExprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2398);
			arrayExpr();
			setState(2403);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2399);
				match(COMMA_);
				setState(2400);
				arrayExpr();
				}
				}
				setState(2405);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgListContext extends ParserRuleContext {
		public List<FuncArgExprContext> funcArgExpr() {
			return getRuleContexts(FuncArgExprContext.class);
		}
		public FuncArgExprContext funcArgExpr(int i) {
			return getRuleContext(FuncArgExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public FuncArgListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFuncArgList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFuncArgList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFuncArgList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgListContext funcArgList() throws RecognitionException {
		FuncArgListContext _localctx = new FuncArgListContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_funcArgList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2406);
			funcArgExpr();
			setState(2411);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,204,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2407);
					match(COMMA_);
					setState(2408);
					funcArgExpr();
					}
					} 
				}
				setState(2413);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,204,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParamNameContext extends ParserRuleContext {
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public ParamNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paramName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterParamName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitParamName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitParamName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParamNameContext paramName() throws RecognitionException {
		ParamNameContext _localctx = new ParamNameContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_paramName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2414);
			typeFunctionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgExprContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public ParamNameContext paramName() {
			return getRuleContext(ParamNameContext.class,0);
		}
		public TerminalNode CQ_() { return getToken(DMLStatementParser.CQ_, 0); }
		public TerminalNode GTE_() { return getToken(DMLStatementParser.GTE_, 0); }
		public FuncArgExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFuncArgExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFuncArgExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFuncArgExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgExprContext funcArgExpr() throws RecognitionException {
		FuncArgExprContext _localctx = new FuncArgExprContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_funcArgExpr);
		try {
			setState(2425);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2416);
				aExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2417);
				paramName();
				setState(2418);
				match(CQ_);
				setState(2419);
				aExpr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2421);
				paramName();
				setState(2422);
				match(GTE_);
				setState(2423);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeListContext extends ParserRuleContext {
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeListContext typeList() throws RecognitionException {
		TypeListContext _localctx = new TypeListContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_typeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2427);
			typeName();
			setState(2432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2428);
				match(COMMA_);
				setState(2429);
				typeName();
				}
				}
				setState(2434);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncApplicationContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public FuncArgListContext funcArgList() {
			return getRuleContext(FuncArgListContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public TerminalNode VARIADIC() { return getToken(DMLStatementParser.VARIADIC, 0); }
		public FuncArgExprContext funcArgExpr() {
			return getRuleContext(FuncArgExprContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public TerminalNode ALL() { return getToken(DMLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(DMLStatementParser.DISTINCT, 0); }
		public TerminalNode ASTERISK_() { return getToken(DMLStatementParser.ASTERISK_, 0); }
		public FuncApplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcApplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFuncApplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFuncApplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFuncApplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncApplicationContext funcApplication() throws RecognitionException {
		FuncApplicationContext _localctx = new FuncApplicationContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_funcApplication);
		int _la;
		try {
			setState(2490);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2435);
				funcName();
				setState(2436);
				match(LP_);
				setState(2437);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2439);
				funcName();
				setState(2440);
				match(LP_);
				setState(2441);
				funcArgList();
				setState(2443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2442);
					sortClause();
					}
				}

				setState(2445);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2447);
				funcName();
				setState(2448);
				match(LP_);
				setState(2449);
				match(VARIADIC);
				setState(2450);
				funcArgExpr();
				setState(2452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2451);
					sortClause();
					}
				}

				setState(2454);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2456);
				funcName();
				setState(2457);
				match(LP_);
				setState(2458);
				funcArgList();
				setState(2459);
				match(COMMA_);
				setState(2460);
				match(VARIADIC);
				setState(2461);
				funcArgExpr();
				setState(2463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2462);
					sortClause();
					}
				}

				setState(2465);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2467);
				funcName();
				setState(2468);
				match(LP_);
				setState(2469);
				match(ALL);
				setState(2470);
				funcArgList();
				setState(2472);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2471);
					sortClause();
					}
				}

				setState(2474);
				match(RP_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2476);
				funcName();
				setState(2477);
				match(LP_);
				setState(2478);
				match(DISTINCT);
				setState(2479);
				funcArgList();
				setState(2481);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2480);
					sortClause();
					}
				}

				setState(2483);
				match(RP_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2485);
				funcName();
				setState(2486);
				match(LP_);
				setState(2487);
				match(ASTERISK_);
				setState(2488);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncNameContext extends ParserRuleContext {
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public FuncNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFuncName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFuncName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFuncName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncNameContext funcName() throws RecognitionException {
		FuncNameContext _localctx = new FuncNameContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_funcName);
		try {
			setState(2496);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2492);
				typeFunctionName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2493);
				colId();
				setState(2494);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AexprConstContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DMLStatementParser.NUMBER_, 0); }
		public TerminalNode STRING_() { return getToken(DMLStatementParser.STRING_, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public FuncArgListContext funcArgList() {
			return getRuleContext(FuncArgListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public TerminalNode TRUE() { return getToken(DMLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(DMLStatementParser.FALSE, 0); }
		public TerminalNode NULL() { return getToken(DMLStatementParser.NULL, 0); }
		public AexprConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aexprConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterAexprConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitAexprConst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitAexprConst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AexprConstContext aexprConst() throws RecognitionException {
		AexprConstContext _localctx = new AexprConstContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_aexprConst);
		int _la;
		try {
			setState(2515);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2498);
				match(NUMBER_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2499);
				match(STRING_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2500);
				funcName();
				setState(2501);
				match(STRING_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2503);
				funcName();
				setState(2504);
				match(LP_);
				setState(2505);
				funcArgList();
				setState(2507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2506);
					sortClause();
					}
				}

				setState(2509);
				match(RP_);
				setState(2510);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2512);
				match(TRUE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2513);
				match(FALSE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2514);
				match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColIdContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterColId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitColId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitColId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColIdContext colId() throws RecognitionException {
		ColIdContext _localctx = new ColIdContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_colId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2517);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeFunctionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public TypeFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTypeFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTypeFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTypeFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeFunctionNameContext typeFunctionName() throws RecognitionException {
		TypeFunctionNameContext _localctx = new TypeFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_typeFunctionName);
		try {
			setState(2522);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2519);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2520);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2521);
				typeFuncNameKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionTableContext extends ParserRuleContext {
		public FunctionExprWindowlessContext functionExprWindowless() {
			return getRuleContext(FunctionExprWindowlessContext.class,0);
		}
		public OrdinalityContext ordinality() {
			return getRuleContext(OrdinalityContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(DMLStatementParser.ROWS, 0); }
		public TerminalNode FROM() { return getToken(DMLStatementParser.FROM, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public RowsFromListContext rowsFromList() {
			return getRuleContext(RowsFromListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public FunctionTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFunctionTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFunctionTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFunctionTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionTableContext functionTable() throws RecognitionException {
		FunctionTableContext _localctx = new FunctionTableContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_functionTable);
		try {
			setState(2536);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2524);
				functionExprWindowless();
				setState(2526);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
				case 1:
					{
					setState(2525);
					ordinality();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2528);
				match(ROWS);
				setState(2529);
				match(FROM);
				setState(2530);
				match(LP_);
				setState(2531);
				rowsFromList();
				setState(2532);
				match(RP_);
				setState(2534);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
				case 1:
					{
					setState(2533);
					ordinality();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableContext extends ParserRuleContext {
		public TerminalNode XMLTABLE() { return getToken(DMLStatementParser.XMLTABLE, 0); }
		public List<TerminalNode> LP_() { return getTokens(DMLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(DMLStatementParser.LP_, i);
		}
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public XmlExistsArgumentContext xmlExistsArgument() {
			return getRuleContext(XmlExistsArgumentContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(DMLStatementParser.COLUMNS, 0); }
		public XmlTableColumnListContext xmlTableColumnList() {
			return getRuleContext(XmlTableColumnListContext.class,0);
		}
		public List<TerminalNode> RP_() { return getTokens(DMLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(DMLStatementParser.RP_, i);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(DMLStatementParser.XMLNAMESPACES, 0); }
		public XmlNamespaceListContext xmlNamespaceList() {
			return getRuleContext(XmlNamespaceListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public XmlTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterXmlTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitXmlTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitXmlTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableContext xmlTable() throws RecognitionException {
		XmlTableContext _localctx = new XmlTableContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_xmlTable);
		try {
			setState(2559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2538);
				match(XMLTABLE);
				setState(2539);
				match(LP_);
				setState(2540);
				cExpr();
				setState(2541);
				xmlExistsArgument();
				setState(2542);
				match(COLUMNS);
				setState(2543);
				xmlTableColumnList();
				setState(2544);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2546);
				match(XMLTABLE);
				setState(2547);
				match(LP_);
				setState(2548);
				match(XMLNAMESPACES);
				setState(2549);
				match(LP_);
				setState(2550);
				xmlNamespaceList();
				setState(2551);
				match(RP_);
				setState(2552);
				match(COMMA_);
				setState(2553);
				cExpr();
				setState(2554);
				xmlExistsArgument();
				setState(2555);
				match(COLUMNS);
				setState(2556);
				xmlTableColumnList();
				setState(2557);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableColumnListContext extends ParserRuleContext {
		public List<XmlTableColumnElContext> xmlTableColumnEl() {
			return getRuleContexts(XmlTableColumnElContext.class);
		}
		public XmlTableColumnElContext xmlTableColumnEl(int i) {
			return getRuleContext(XmlTableColumnElContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public XmlTableColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterXmlTableColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitXmlTableColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitXmlTableColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnListContext xmlTableColumnList() throws RecognitionException {
		XmlTableColumnListContext _localctx = new XmlTableColumnListContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_xmlTableColumnList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2561);
			xmlTableColumnEl();
			setState(2566);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2562);
				match(COMMA_);
				setState(2563);
				xmlTableColumnEl();
				}
				}
				setState(2568);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableColumnElContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public XmlTableColumnOptionListContext xmlTableColumnOptionList() {
			return getRuleContext(XmlTableColumnOptionListContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DMLStatementParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(DMLStatementParser.ORDINALITY, 0); }
		public XmlTableColumnElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterXmlTableColumnEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitXmlTableColumnEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitXmlTableColumnEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnElContext xmlTableColumnEl() throws RecognitionException {
		XmlTableColumnElContext _localctx = new XmlTableColumnElContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_xmlTableColumnEl);
		try {
			setState(2580);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2569);
				colId();
				setState(2570);
				typeName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2572);
				colId();
				setState(2573);
				typeName();
				setState(2574);
				xmlTableColumnOptionList(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2576);
				colId();
				setState(2577);
				match(FOR);
				setState(2578);
				match(ORDINALITY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableColumnOptionListContext extends ParserRuleContext {
		public XmlTableColumnOptionElContext xmlTableColumnOptionEl() {
			return getRuleContext(XmlTableColumnOptionElContext.class,0);
		}
		public XmlTableColumnOptionListContext xmlTableColumnOptionList() {
			return getRuleContext(XmlTableColumnOptionListContext.class,0);
		}
		public XmlTableColumnOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterXmlTableColumnOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitXmlTableColumnOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitXmlTableColumnOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnOptionListContext xmlTableColumnOptionList() throws RecognitionException {
		return xmlTableColumnOptionList(0);
	}

	private XmlTableColumnOptionListContext xmlTableColumnOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		XmlTableColumnOptionListContext _localctx = new XmlTableColumnOptionListContext(_ctx, _parentState);
		XmlTableColumnOptionListContext _prevctx = _localctx;
		int _startState = 322;
		enterRecursionRule(_localctx, 322, RULE_xmlTableColumnOptionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2583);
			xmlTableColumnOptionEl();
			}
			_ctx.stop = _input.LT(-1);
			setState(2589);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new XmlTableColumnOptionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_xmlTableColumnOptionList);
					setState(2585);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2586);
					xmlTableColumnOptionEl();
					}
					} 
				}
				setState(2591);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,223,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class XmlTableColumnOptionElContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DMLStatementParser.DEFAULT, 0); }
		public TerminalNode NOT() { return getToken(DMLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DMLStatementParser.NULL, 0); }
		public XmlTableColumnOptionElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnOptionEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterXmlTableColumnOptionEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitXmlTableColumnOptionEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitXmlTableColumnOptionEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnOptionElContext xmlTableColumnOptionEl() throws RecognitionException {
		XmlTableColumnOptionElContext _localctx = new XmlTableColumnOptionElContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_xmlTableColumnOptionEl);
		try {
			setState(2600);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2592);
				identifier();
				setState(2593);
				bExpr(0);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2595);
				match(DEFAULT);
				setState(2596);
				bExpr(0);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2597);
				match(NOT);
				setState(2598);
				match(NULL);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 4);
				{
				setState(2599);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlNamespaceListContext extends ParserRuleContext {
		public List<XmlNamespaceElContext> xmlNamespaceEl() {
			return getRuleContexts(XmlNamespaceElContext.class);
		}
		public XmlNamespaceElContext xmlNamespaceEl(int i) {
			return getRuleContext(XmlNamespaceElContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public XmlNamespaceListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlNamespaceList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterXmlNamespaceList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitXmlNamespaceList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitXmlNamespaceList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlNamespaceListContext xmlNamespaceList() throws RecognitionException {
		XmlNamespaceListContext _localctx = new XmlNamespaceListContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_xmlNamespaceList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2602);
			xmlNamespaceEl();
			setState(2607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2603);
				match(COMMA_);
				setState(2604);
				xmlNamespaceEl();
				}
				}
				setState(2609);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlNamespaceElContext extends ParserRuleContext {
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(DMLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DMLStatementParser.DEFAULT, 0); }
		public XmlNamespaceElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlNamespaceEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterXmlNamespaceEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitXmlNamespaceEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitXmlNamespaceEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlNamespaceElContext xmlNamespaceEl() throws RecognitionException {
		XmlNamespaceElContext _localctx = new XmlNamespaceElContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_xmlNamespaceEl);
		try {
			setState(2616);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case CARET_:
			case MOD_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case LP_:
			case QUESTION_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(2610);
				bExpr(0);
				setState(2611);
				match(AS);
				setState(2612);
				identifier();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2614);
				match(DEFAULT);
				setState(2615);
				bExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncExprContext extends ParserRuleContext {
		public FuncApplicationContext funcApplication() {
			return getRuleContext(FuncApplicationContext.class,0);
		}
		public WithinGroupClauseContext withinGroupClause() {
			return getRuleContext(WithinGroupClauseContext.class,0);
		}
		public FilterClauseContext filterClause() {
			return getRuleContext(FilterClauseContext.class,0);
		}
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public FunctionExprCommonSubexprContext functionExprCommonSubexpr() {
			return getRuleContext(FunctionExprCommonSubexprContext.class,0);
		}
		public FuncExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFuncExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFuncExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFuncExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncExprContext funcExpr() throws RecognitionException {
		FuncExprContext _localctx = new FuncExprContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_funcExpr);
		try {
			setState(2629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2618);
				funcApplication();
				setState(2620);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
				case 1:
					{
					setState(2619);
					withinGroupClause();
					}
					break;
				}
				setState(2623);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
				case 1:
					{
					setState(2622);
					filterClause();
					}
					break;
				}
				setState(2626);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
				case 1:
					{
					setState(2625);
					overClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2628);
				functionExprCommonSubexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithinGroupClauseContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(DMLStatementParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(DMLStatementParser.GROUP, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public WithinGroupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withinGroupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterWithinGroupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitWithinGroupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitWithinGroupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithinGroupClauseContext withinGroupClause() throws RecognitionException {
		WithinGroupClauseContext _localctx = new WithinGroupClauseContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_withinGroupClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2631);
			match(WITHIN);
			setState(2632);
			match(GROUP);
			setState(2633);
			match(LP_);
			setState(2634);
			sortClause();
			setState(2635);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterClauseContext extends ParserRuleContext {
		public TerminalNode FILTER() { return getToken(DMLStatementParser.FILTER, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public TerminalNode WHERE() { return getToken(DMLStatementParser.WHERE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public FilterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFilterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFilterClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFilterClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterClauseContext filterClause() throws RecognitionException {
		FilterClauseContext _localctx = new FilterClauseContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_filterClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2637);
			match(FILTER);
			setState(2638);
			match(LP_);
			setState(2639);
			match(WHERE);
			setState(2640);
			aExpr(0);
			setState(2641);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionExprWindowlessContext extends ParserRuleContext {
		public FuncApplicationContext funcApplication() {
			return getRuleContext(FuncApplicationContext.class,0);
		}
		public FunctionExprCommonSubexprContext functionExprCommonSubexpr() {
			return getRuleContext(FunctionExprCommonSubexprContext.class,0);
		}
		public FunctionExprWindowlessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionExprWindowless; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFunctionExprWindowless(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFunctionExprWindowless(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFunctionExprWindowless(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionExprWindowlessContext functionExprWindowless() throws RecognitionException {
		FunctionExprWindowlessContext _localctx = new FunctionExprWindowlessContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_functionExprWindowless);
		try {
			setState(2645);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2643);
				funcApplication();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2644);
				functionExprCommonSubexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrdinalityContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DMLStatementParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(DMLStatementParser.ORDINALITY, 0); }
		public OrdinalityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordinality; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOrdinality(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOrdinality(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOrdinality(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrdinalityContext ordinality() throws RecognitionException {
		OrdinalityContext _localctx = new OrdinalityContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_ordinality);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2647);
			match(WITH);
			setState(2648);
			match(ORDINALITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionExprCommonSubexprContext extends ParserRuleContext {
		public TerminalNode COLLATION() { return getToken(DMLStatementParser.COLLATION, 0); }
		public TerminalNode FOR() { return getToken(DMLStatementParser.FOR, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(DMLStatementParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(DMLStatementParser.CURRENT_TIME, 0); }
		public TerminalNode NUMBER_() { return getToken(DMLStatementParser.NUMBER_, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DMLStatementParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(DMLStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(DMLStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(DMLStatementParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(DMLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(DMLStatementParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(DMLStatementParser.USER, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(DMLStatementParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(DMLStatementParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CAST() { return getToken(DMLStatementParser.CAST, 0); }
		public TerminalNode AS() { return getToken(DMLStatementParser.AS, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode EXTRACT() { return getToken(DMLStatementParser.EXTRACT, 0); }
		public ExtractListContext extractList() {
			return getRuleContext(ExtractListContext.class,0);
		}
		public TerminalNode NORMALIZE() { return getToken(DMLStatementParser.NORMALIZE, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public UnicodeNormalFormContext unicodeNormalForm() {
			return getRuleContext(UnicodeNormalFormContext.class,0);
		}
		public TerminalNode OVERLAY() { return getToken(DMLStatementParser.OVERLAY, 0); }
		public OverlayListContext overlayList() {
			return getRuleContext(OverlayListContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(DMLStatementParser.POSITION, 0); }
		public PositionListContext positionList() {
			return getRuleContext(PositionListContext.class,0);
		}
		public TerminalNode SUBSTRING() { return getToken(DMLStatementParser.SUBSTRING, 0); }
		public SubstrListContext substrList() {
			return getRuleContext(SubstrListContext.class,0);
		}
		public TerminalNode TREAT() { return getToken(DMLStatementParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(DMLStatementParser.TRIM, 0); }
		public TerminalNode BOTH() { return getToken(DMLStatementParser.BOTH, 0); }
		public TrimListContext trimList() {
			return getRuleContext(TrimListContext.class,0);
		}
		public TerminalNode LEADING() { return getToken(DMLStatementParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(DMLStatementParser.TRAILING, 0); }
		public TerminalNode NULLIF() { return getToken(DMLStatementParser.NULLIF, 0); }
		public TerminalNode COALESCE() { return getToken(DMLStatementParser.COALESCE, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode GREATEST() { return getToken(DMLStatementParser.GREATEST, 0); }
		public TerminalNode LEAST() { return getToken(DMLStatementParser.LEAST, 0); }
		public TerminalNode XMLCONCAT() { return getToken(DMLStatementParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(DMLStatementParser.XMLELEMENT, 0); }
		public TerminalNode NAME() { return getToken(DMLStatementParser.NAME, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public XmlAttributesContext xmlAttributes() {
			return getRuleContext(XmlAttributesContext.class,0);
		}
		public TerminalNode XMLEXISTS() { return getToken(DMLStatementParser.XMLEXISTS, 0); }
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public XmlExistsArgumentContext xmlExistsArgument() {
			return getRuleContext(XmlExistsArgumentContext.class,0);
		}
		public TerminalNode XMLFOREST() { return getToken(DMLStatementParser.XMLFOREST, 0); }
		public XmlAttributeListContext xmlAttributeList() {
			return getRuleContext(XmlAttributeListContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(DMLStatementParser.XMLPARSE, 0); }
		public DocumentOrContentContext documentOrContent() {
			return getRuleContext(DocumentOrContentContext.class,0);
		}
		public XmlWhitespaceOptionContext xmlWhitespaceOption() {
			return getRuleContext(XmlWhitespaceOptionContext.class,0);
		}
		public TerminalNode XMLPI() { return getToken(DMLStatementParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(DMLStatementParser.XMLROOT, 0); }
		public XmlRootVersionContext xmlRootVersion() {
			return getRuleContext(XmlRootVersionContext.class,0);
		}
		public XmlRootStandaloneContext xmlRootStandalone() {
			return getRuleContext(XmlRootStandaloneContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(DMLStatementParser.XMLSERIALIZE, 0); }
		public SimpleTypeNameContext simpleTypeName() {
			return getRuleContext(SimpleTypeNameContext.class,0);
		}
		public FunctionExprCommonSubexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionExprCommonSubexpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFunctionExprCommonSubexpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFunctionExprCommonSubexpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFunctionExprCommonSubexpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionExprCommonSubexprContext functionExprCommonSubexpr() throws RecognitionException {
		FunctionExprCommonSubexprContext _localctx = new FunctionExprCommonSubexprContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_functionExprCommonSubexpr);
		int _la;
		try {
			setState(2862);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2650);
				match(COLLATION);
				setState(2651);
				match(FOR);
				setState(2652);
				match(LP_);
				setState(2653);
				aExpr(0);
				setState(2654);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2656);
				match(CURRENT_DATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2657);
				match(CURRENT_TIME);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2658);
				match(CURRENT_TIME);
				setState(2659);
				match(LP_);
				setState(2660);
				match(NUMBER_);
				setState(2661);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2662);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2663);
				match(CURRENT_TIMESTAMP);
				setState(2664);
				match(LP_);
				setState(2665);
				match(NUMBER_);
				setState(2666);
				match(RP_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2667);
				match(LOCALTIME);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2668);
				match(LOCALTIME);
				setState(2669);
				match(LP_);
				setState(2670);
				match(NUMBER_);
				setState(2671);
				match(RP_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2672);
				match(LOCALTIMESTAMP);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2673);
				match(LOCALTIMESTAMP);
				setState(2674);
				match(LP_);
				setState(2675);
				match(NUMBER_);
				setState(2676);
				match(RP_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2677);
				match(CURRENT_ROLE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2678);
				match(CURRENT_USER);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2679);
				match(SESSION_USER);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2680);
				match(USER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2681);
				match(CURRENT_CATALOG);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2682);
				match(CURRENT_SCHEMA);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2683);
				match(CAST);
				setState(2684);
				match(LP_);
				setState(2685);
				aExpr(0);
				setState(2686);
				match(AS);
				setState(2687);
				typeName();
				setState(2688);
				match(RP_);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2690);
				match(EXTRACT);
				setState(2691);
				match(LP_);
				setState(2693);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INDEX - 64)) | (1L << (KEY - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (IF - 64)) | (1L << (BY - 64)) | (1L << (BEGIN - 64)) | (1L << (COMMIT - 64)) | (1L << (ROLLBACK - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (SAVEPOINT - 128)) | (1L << (DOUBLE - 128)) | (1L << (YEAR - 128)) | (1L << (MONTH - 128)) | (1L << (DAY - 128)) | (1L << (HOUR - 128)) | (1L << (MINUTE - 128)) | (1L << (SECOND - 128)) | (1L << (CURRENT - 128)) | (1L << (ENABLE - 128)) | (1L << (DISABLE - 128)) | (1L << (CALL - 128)) | (1L << (PRESERVE - 128)) | (1L << (DEFINER - 128)) | (1L << (SQL - 128)) | (1L << (CASCADED - 128)) | (1L << (LOCAL - 128)) | (1L << (CLOSE - 128)) | (1L << (NEXT - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (TYPE - 128)) | (1L << (TEXT - 128)) | (1L << (REPEATABLE - 128)) | (1L << (VARYING - 128)) | (1L << (VALUE - 128)) | (1L << (TIES - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (CUBE - 193)) | (1L << (SETS - 193)) | (1L << (OTHERS - 193)) | (1L << (AT - 193)) | (1L << (ADMIN - 193)) | (1L << (ESCAPE - 193)) | (1L << (EXCLUDE - 193)) | (1L << (PARTITION - 193)) | (1L << (UNKNOWN - 193)) | (1L << (ALWAYS - 193)) | (1L << (CASCADE - 193)) | (1L << (GENERATED - 193)) | (1L << (ISOLATION - 193)) | (1L << (LEVEL - 193)) | (1L << (NO - 193)) | (1L << (OPTION - 193)) | (1L << (PRIVILEGES - 193)) | (1L << (READ - 193)) | (1L << (ROLE - 193)) | (1L << (ROWS - 193)) | (1L << (START - 193)) | (1L << (TRANSACTION - 193)) | (1L << (ACTION - 193)) | (1L << (CACHE - 193)) | (1L << (CHARACTERISTICS - 193)) | (1L << (CLUSTER - 193)) | (1L << (COMMENTS - 193)) | (1L << (CONSTRAINTS - 193)) | (1L << (CYCLE - 193)) | (1L << (DATA - 193)) | (1L << (DATABASE - 193)) | (1L << (DEFAULTS - 193)) | (1L << (DEFERRED - 193)) | (1L << (DEPENDS - 193)) | (1L << (DOMAIN - 193)) | (1L << (EXCLUDING - 193)) | (1L << (EXECUTE - 193)) | (1L << (EXTENSION - 193)) | (1L << (EXTERNAL - 193)) | (1L << (FILTER - 193)) | (1L << (FIRST - 193)) | (1L << (FOLLOWING - 193)) | (1L << (FORCE - 193)) | (1L << (GLOBAL - 193)) | (1L << (IDENTITY - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (IMMEDIATE - 257)) | (1L << (INCLUDING - 257)) | (1L << (INCREMENT - 257)) | (1L << (INDEXES - 257)) | (1L << (INHERIT - 257)) | (1L << (INHERITS - 257)) | (1L << (INCLUDE - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LARGE - 257)) | (1L << (LAST - 257)) | (1L << (LOGGED - 257)) | (1L << (MATCH - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MINVALUE - 257)) | (1L << (NOTHING - 257)) | (1L << (NULLS - 257)) | (1L << (OBJECT - 257)) | (1L << (OIDS - 257)) | (1L << (OVER - 257)) | (1L << (OWNED - 257)) | (1L << (OWNER - 257)) | (1L << (PARTIAL - 257)) | (1L << (PRECEDING - 257)) | (1L << (RANGE - 257)) | (1L << (RENAME - 257)) | (1L << (REPLICA - 257)) | (1L << (RESET - 257)) | (1L << (RESTART - 257)) | (1L << (RESTRICT - 257)) | (1L << (ROUTINE - 257)) | (1L << (RULE - 257)) | (1L << (SECURITY - 257)) | (1L << (SEQUENCE - 257)) | (1L << (SESSION - 257)) | (1L << (SHOW - 257)) | (1L << (SIMPLE - 257)) | (1L << (STATISTICS - 257)) | (1L << (STORAGE - 257)) | (1L << (TABLESPACE - 257)) | (1L << (TEMP - 257)) | (1L << (TEMPORARY - 257)) | (1L << (UNBOUNDED - 257)) | (1L << (UNLOGGED - 257)) | (1L << (VALID - 257)) | (1L << (VALIDATE - 257)) | (1L << (WITHIN - 257)) | (1L << (WITHOUT - 257)) | (1L << (ZONE - 257)) | (1L << (OF - 257)) | (1L << (UESCAPE - 257)) | (1L << (GROUPS - 257)) | (1L << (RECURSIVE - 257)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (ENUM - 328)) | (1L << (XML - 328)) | (1L << (ORDINALITY - 328)) | (1L << (NFC - 328)) | (1L << (NFD - 328)) | (1L << (NFKC - 328)) | (1L << (NFKD - 328)) | (1L << (REF - 328)) | (1L << (PASSING - 328)) | (1L << (VERSION - 328)) | (1L << (YES - 328)) | (1L << (STANDALONE - 328)) | (1L << (MATERIALIZED - 328)) | (1L << (OPERATOR - 328)) | (1L << (SHARE - 328)) | (1L << (ROLLUP - 328)) | (1L << (DOCUMENT - 328)) | (1L << (NORMALIZED - 328)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (NOWAIT - 394)) | (1L << (LOCKED - 394)) | (1L << (COLUMNS - 394)) | (1L << (CONTENT - 394)) | (1L << (STRIP - 394)) | (1L << (WHITESPACE - 394)) | (1L << (CONFLICT - 394)) | (1L << (OVERRIDING - 394)) | (1L << (SYSTEM - 394)) | (1L << (ABORT - 394)) | (1L << (ABSOLUTE - 394)) | (1L << (ACCESS - 394)) | (1L << (AFTER - 394)) | (1L << (AGGREGATE - 394)) | (1L << (ALSO - 394)) | (1L << (ATTACH - 394)) | (1L << (ATTRIBUTE - 394)) | (1L << (BACKWARD - 394)) | (1L << (BEFORE - 394)) | (1L << (ASSERTION - 394)) | (1L << (ASSIGNMENT - 394)) | (1L << (CONTINUE - 394)) | (1L << (CONVERSION - 394)) | (1L << (COPY - 394)) | (1L << (COST - 394)) | (1L << (CSV - 394)) | (1L << (CALLED - 394)) | (1L << (CATALOG - 394)) | (1L << (CHAIN - 394)) | (1L << (CHECKPOINT - 394)) | (1L << (CLASS - 394)) | (1L << (CONFIGURATION - 394)) | (1L << (COMMENT - 394)) | (1L << (DETACH - 394)) | (1L << (DICTIONARY - 394)) | (1L << (EXPRESSION - 394)) | (1L << (INSENSITIVE - 394)) | (1L << (DISCARD - 394)) | (1L << (OFF - 394)) | (1L << (INSTEAD - 394)) | (1L << (EXPLAIN - 394)) | (1L << (INPUT - 394)) | (1L << (INLINE - 394)) | (1L << (PARALLEL - 394)) | (1L << (LEAKPROOF - 394)) | (1L << (COMMITTED - 394)) | (1L << (ENCODING - 394)) | (1L << (IMPLICIT - 394)) | (1L << (DELIMITER - 394)) | (1L << (CURSOR - 394)) | (1L << (EACH - 394)) | (1L << (EVENT - 394)) | (1L << (DEALLOCATE - 394)) | (1L << (CONNECTION - 394)) | (1L << (DECLARE - 394)) | (1L << (FAMILY - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (FORWARD - 458)) | (1L << (EXCLUSIVE - 458)) | (1L << (FUNCTIONS - 458)) | (1L << (LOCATION - 458)) | (1L << (LABEL - 458)) | (1L << (DELIMITERS - 458)) | (1L << (HANDLER - 458)) | (1L << (HEADER - 458)) | (1L << (IMMUTABLE - 458)) | (1L << (GRANTED - 458)) | (1L << (HOLD - 458)) | (1L << (MAPPING - 458)) | (1L << (OLD - 458)) | (1L << (METHOD - 458)) | (1L << (LOAD - 458)) | (1L << (LISTEN - 458)) | (1L << (MODE - 458)) | (1L << (MOVE - 458)) | (1L << (PROCEDURAL - 458)) | (1L << (PARSER - 458)) | (1L << (PROCEDURES - 458)) | (1L << (ENCRYPTED - 458)) | (1L << (PUBLICATION - 458)) | (1L << (PROGRAM - 458)) | (1L << (REFERENCING - 458)) | (1L << (PLANS - 458)) | (1L << (REINDEX - 458)) | (1L << (PRIOR - 458)) | (1L << (PASSWORD - 458)) | (1L << (RELATIVE - 458)) | (1L << (QUOTE - 458)) | (1L << (ROUTINES - 458)) | (1L << (REPLACE - 458)) | (1L << (SNAPSHOT - 458)) | (1L << (REFRESH - 458)) | (1L << (PREPARE - 458)) | (1L << (OPTIONS - 458)) | (1L << (IMPORT - 458)) | (1L << (INVOKER - 458)) | (1L << (NEW - 458)) | (1L << (PREPARED - 458)) | (1L << (SCROLL - 458)) | (1L << (SEQUENCES - 458)) | (1L << (SYSID - 458)) | (1L << (REASSIGN - 458)) | (1L << (SERVER - 458)) | (1L << (SUBSCRIPTION - 458)) | (1L << (SEARCH - 458)) | (1L << (SCHEMAS - 458)) | (1L << (RECHECK - 458)) | (1L << (POLICY - 458)) | (1L << (NOTIFY - 458)) | (1L << (LOCK - 458)) | (1L << (RELEASE - 458)) | (1L << (SERIALIZABLE - 458)) | (1L << (RETURNS - 458)) | (1L << (STATEMENT - 458)) | (1L << (STDIN - 458)) | (1L << (STDOUT - 458)) | (1L << (TABLES - 458)) | (1L << (SUPPORT - 458)) | (1L << (STABLE - 458)) | (1L << (TEMPLATE - 458)) | (1L << (UNENCRYPTED - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (VIEWS - 522)) | (1L << (UNCOMMITTED - 522)) | (1L << (TRANSFORM - 522)) | (1L << (UNLISTEN - 522)) | (1L << (TRUSTED - 522)) | (1L << (VALIDATOR - 522)) | (1L << (UNTIL - 522)) | (1L << (VACUUM - 522)) | (1L << (VOLATILE - 522)) | (1L << (STORED - 522)) | (1L << (WRITE - 522)) | (1L << (STRICT - 522)) | (1L << (TYPES - 522)) | (1L << (WRAPPER - 522)) | (1L << (WORK - 522)) | (1L << (IDENTIFIER_ - 522)))) != 0)) {
					{
					setState(2692);
					extractList();
					}
				}

				setState(2695);
				match(RP_);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2696);
				match(NORMALIZE);
				setState(2697);
				match(LP_);
				setState(2698);
				aExpr(0);
				setState(2699);
				match(RP_);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2701);
				match(NORMALIZE);
				setState(2702);
				match(LP_);
				setState(2703);
				aExpr(0);
				setState(2704);
				match(COMMA_);
				setState(2705);
				unicodeNormalForm();
				setState(2706);
				match(RP_);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2708);
				match(OVERLAY);
				setState(2709);
				match(LP_);
				setState(2710);
				overlayList();
				setState(2711);
				match(RP_);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2713);
				match(POSITION);
				setState(2714);
				match(LP_);
				setState(2715);
				positionList();
				setState(2716);
				match(RP_);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2718);
				match(SUBSTRING);
				setState(2719);
				match(LP_);
				setState(2720);
				substrList();
				setState(2721);
				match(RP_);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2723);
				match(TREAT);
				setState(2724);
				match(LP_);
				setState(2725);
				aExpr(0);
				setState(2726);
				match(AS);
				setState(2727);
				typeName();
				setState(2728);
				match(RP_);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2730);
				match(TRIM);
				setState(2731);
				match(LP_);
				setState(2732);
				match(BOTH);
				setState(2733);
				trimList();
				setState(2734);
				match(RP_);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2736);
				match(TRIM);
				setState(2737);
				match(LP_);
				setState(2738);
				match(LEADING);
				setState(2739);
				trimList();
				setState(2740);
				match(RP_);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2742);
				match(TRIM);
				setState(2743);
				match(LP_);
				setState(2744);
				match(TRAILING);
				setState(2745);
				trimList();
				setState(2746);
				match(RP_);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(2748);
				match(TRIM);
				setState(2749);
				match(LP_);
				setState(2750);
				trimList();
				setState(2751);
				match(RP_);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(2753);
				match(NULLIF);
				setState(2754);
				match(LP_);
				setState(2755);
				aExpr(0);
				setState(2756);
				match(COMMA_);
				setState(2757);
				aExpr(0);
				setState(2758);
				match(RP_);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(2760);
				match(COALESCE);
				setState(2761);
				match(LP_);
				setState(2762);
				exprList(0);
				setState(2763);
				match(RP_);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(2765);
				match(GREATEST);
				setState(2766);
				match(LP_);
				setState(2767);
				exprList(0);
				setState(2768);
				match(RP_);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(2770);
				match(LEAST);
				setState(2771);
				match(LP_);
				setState(2772);
				exprList(0);
				setState(2773);
				match(RP_);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(2775);
				match(XMLCONCAT);
				setState(2776);
				match(LP_);
				setState(2777);
				exprList(0);
				setState(2778);
				match(RP_);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(2780);
				match(XMLELEMENT);
				setState(2781);
				match(LP_);
				setState(2782);
				match(NAME);
				setState(2783);
				identifier();
				setState(2784);
				match(RP_);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(2786);
				match(XMLELEMENT);
				setState(2787);
				match(LP_);
				setState(2788);
				match(NAME);
				setState(2789);
				identifier();
				setState(2790);
				match(COMMA_);
				setState(2791);
				xmlAttributes();
				setState(2792);
				match(RP_);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(2794);
				match(XMLELEMENT);
				setState(2795);
				match(LP_);
				setState(2796);
				match(NAME);
				setState(2797);
				identifier();
				setState(2798);
				match(COMMA_);
				setState(2799);
				exprList(0);
				setState(2800);
				match(RP_);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(2802);
				match(XMLELEMENT);
				setState(2803);
				match(LP_);
				setState(2804);
				match(NAME);
				setState(2805);
				identifier();
				setState(2806);
				match(COMMA_);
				setState(2807);
				xmlAttributes();
				setState(2808);
				match(COMMA_);
				setState(2809);
				exprList(0);
				setState(2810);
				match(RP_);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(2812);
				match(XMLEXISTS);
				setState(2813);
				match(LP_);
				setState(2814);
				cExpr();
				setState(2815);
				xmlExistsArgument();
				setState(2816);
				match(RP_);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(2818);
				match(XMLFOREST);
				setState(2819);
				match(LP_);
				setState(2820);
				xmlAttributeList();
				setState(2821);
				match(RP_);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(2823);
				match(XMLPARSE);
				setState(2824);
				match(LP_);
				setState(2825);
				documentOrContent();
				setState(2826);
				aExpr(0);
				setState(2827);
				xmlWhitespaceOption();
				setState(2828);
				match(RP_);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(2830);
				match(XMLPI);
				setState(2831);
				match(LP_);
				setState(2832);
				match(NAME);
				setState(2833);
				identifier();
				setState(2834);
				match(RP_);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(2836);
				match(XMLPI);
				setState(2837);
				match(LP_);
				setState(2838);
				match(NAME);
				setState(2839);
				identifier();
				setState(2840);
				match(COMMA_);
				setState(2841);
				aExpr(0);
				setState(2842);
				match(RP_);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(2844);
				match(XMLROOT);
				setState(2845);
				match(LP_);
				setState(2846);
				aExpr(0);
				setState(2847);
				match(COMMA_);
				setState(2848);
				xmlRootVersion();
				setState(2850);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(2849);
					xmlRootStandalone();
					}
				}

				setState(2852);
				match(RP_);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(2854);
				match(XMLSERIALIZE);
				setState(2855);
				match(LP_);
				setState(2856);
				documentOrContent();
				setState(2857);
				aExpr(0);
				setState(2858);
				match(AS);
				setState(2859);
				simpleTypeName();
				setState(2860);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeNameContext extends ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return getRuleContext(SimpleTypeNameContext.class,0);
		}
		public OptArrayBoundsContext optArrayBounds() {
			return getRuleContext(OptArrayBoundsContext.class,0);
		}
		public TerminalNode SETOF() { return getToken(DMLStatementParser.SETOF, 0); }
		public TerminalNode ARRAY() { return getToken(DMLStatementParser.ARRAY, 0); }
		public TerminalNode LBT_() { return getToken(DMLStatementParser.LBT_, 0); }
		public TerminalNode NUMBER_() { return getToken(DMLStatementParser.NUMBER_, 0); }
		public TerminalNode RBT_() { return getToken(DMLStatementParser.RBT_, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeNameContext typeName() throws RecognitionException {
		TypeNameContext _localctx = new TypeNameContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_typeName);
		try {
			setState(2891);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2864);
				simpleTypeName();
				setState(2865);
				optArrayBounds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2867);
				match(SETOF);
				setState(2868);
				simpleTypeName();
				setState(2869);
				optArrayBounds(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2871);
				simpleTypeName();
				setState(2872);
				match(ARRAY);
				setState(2873);
				match(LBT_);
				setState(2874);
				match(NUMBER_);
				setState(2875);
				match(RBT_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2877);
				match(SETOF);
				setState(2878);
				simpleTypeName();
				setState(2879);
				match(ARRAY);
				setState(2880);
				match(LBT_);
				setState(2881);
				match(NUMBER_);
				setState(2882);
				match(RBT_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2884);
				simpleTypeName();
				setState(2885);
				match(ARRAY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2887);
				match(SETOF);
				setState(2888);
				simpleTypeName();
				setState(2889);
				match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleTypeNameContext extends ParserRuleContext {
		public GenericTypeContext genericType() {
			return getRuleContext(GenericTypeContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public OptIntervalContext optInterval() {
			return getRuleContext(OptIntervalContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DMLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSimpleTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSimpleTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSimpleTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleTypeNameContext simpleTypeName() throws RecognitionException {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_simpleTypeName);
		try {
			setState(2906);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2893);
				genericType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2894);
				numeric();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2895);
				bit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2896);
				character();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2897);
				constDatetime();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2898);
				constInterval();
				setState(2899);
				optInterval();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2901);
				constInterval();
				setState(2902);
				match(LP_);
				setState(2903);
				match(NUMBER_);
				setState(2904);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public ExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprListContext exprList() throws RecognitionException {
		return exprList(0);
	}

	private ExprListContext exprList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprListContext _localctx = new ExprListContext(_ctx, _parentState);
		ExprListContext _prevctx = _localctx;
		int _startState = 346;
		enterRecursionRule(_localctx, 346, RULE_exprList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(2909);
			aExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(2916);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,237,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_exprList);
					setState(2911);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(2912);
					match(COMMA_);
					setState(2913);
					aExpr(0);
					}
					} 
				}
				setState(2918);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,237,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExtractListContext extends ParserRuleContext {
		public ExtractArgContext extractArg() {
			return getRuleContext(ExtractArgContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DMLStatementParser.FROM, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public ExtractListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterExtractList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitExtractList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitExtractList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtractListContext extractList() throws RecognitionException {
		ExtractListContext _localctx = new ExtractListContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_extractList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2919);
			extractArg();
			setState(2920);
			match(FROM);
			setState(2921);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtractArgContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(DMLStatementParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(DMLStatementParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(DMLStatementParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(DMLStatementParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(DMLStatementParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(DMLStatementParser.SECOND, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExtractArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterExtractArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitExtractArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitExtractArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtractArgContext extractArg() throws RecognitionException {
		ExtractArgContext _localctx = new ExtractArgContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_extractArg);
		try {
			setState(2930);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2923);
				match(YEAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2924);
				match(MONTH);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2925);
				match(DAY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2926);
				match(HOUR);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2927);
				match(MINUTE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2928);
				match(SECOND);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2929);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericTypeContext extends ParserRuleContext {
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public TypeModifiersContext typeModifiers() {
			return getRuleContext(TypeModifiersContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterGenericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitGenericType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitGenericType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericTypeContext genericType() throws RecognitionException {
		GenericTypeContext _localctx = new GenericTypeContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_genericType);
		try {
			setState(2941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2932);
				typeFunctionName();
				setState(2934);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,239,_ctx) ) {
				case 1:
					{
					setState(2933);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2936);
				typeFunctionName();
				setState(2937);
				attrs(0);
				setState(2939);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
				case 1:
					{
					setState(2938);
					typeModifiers();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeModifiersContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public TypeModifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeModifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTypeModifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTypeModifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTypeModifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeModifiersContext typeModifiers() throws RecognitionException {
		TypeModifiersContext _localctx = new TypeModifiersContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_typeModifiers);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2943);
			match(LP_);
			setState(2944);
			exprList(0);
			setState(2945);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode INT() { return getToken(DMLStatementParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(DMLStatementParser.INTEGER, 0); }
		public TerminalNode SMALLINT() { return getToken(DMLStatementParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(DMLStatementParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DMLStatementParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(DMLStatementParser.FLOAT, 0); }
		public OptFloatContext optFloat() {
			return getRuleContext(OptFloatContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(DMLStatementParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(DMLStatementParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(DMLStatementParser.DECIMAL, 0); }
		public TypeModifiersContext typeModifiers() {
			return getRuleContext(TypeModifiersContext.class,0);
		}
		public TerminalNode DEC() { return getToken(DMLStatementParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DMLStatementParser.NUMERIC, 0); }
		public TerminalNode BOOLEAN() { return getToken(DMLStatementParser.BOOLEAN, 0); }
		public TerminalNode FLOAT8() { return getToken(DMLStatementParser.FLOAT8, 0); }
		public TerminalNode FLOAT4() { return getToken(DMLStatementParser.FLOAT4, 0); }
		public TerminalNode INT2() { return getToken(DMLStatementParser.INT2, 0); }
		public TerminalNode INT4() { return getToken(DMLStatementParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(DMLStatementParser.INT8, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_numeric);
		try {
			setState(2974);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2947);
				match(INT);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2948);
				match(INTEGER);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2949);
				match(SMALLINT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(2950);
				match(BIGINT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(2951);
				match(REAL);
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2952);
				match(FLOAT);
				setState(2953);
				optFloat();
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2954);
				match(DOUBLE);
				setState(2955);
				match(PRECISION);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 8);
				{
				setState(2956);
				match(DECIMAL);
				setState(2958);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
				case 1:
					{
					setState(2957);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 9);
				{
				setState(2960);
				match(DEC);
				setState(2962);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
				case 1:
					{
					setState(2961);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 10);
				{
				setState(2964);
				match(NUMERIC);
				setState(2966);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
				case 1:
					{
					setState(2965);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 11);
				{
				setState(2968);
				match(BOOLEAN);
				}
				break;
			case FLOAT8:
				enterOuterAlt(_localctx, 12);
				{
				setState(2969);
				match(FLOAT8);
				}
				break;
			case FLOAT4:
				enterOuterAlt(_localctx, 13);
				{
				setState(2970);
				match(FLOAT4);
				}
				break;
			case INT2:
				enterOuterAlt(_localctx, 14);
				{
				setState(2971);
				match(INT2);
				}
				break;
			case INT4:
				enterOuterAlt(_localctx, 15);
				{
				setState(2972);
				match(INT4);
				}
				break;
			case INT8:
				enterOuterAlt(_localctx, 16);
				{
				setState(2973);
				match(INT8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstDatetimeContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(DMLStatementParser.TIMESTAMP, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DMLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public TimezoneContext timezone() {
			return getRuleContext(TimezoneContext.class,0);
		}
		public TerminalNode TIME() { return getToken(DMLStatementParser.TIME, 0); }
		public TerminalNode DATE() { return getToken(DMLStatementParser.DATE, 0); }
		public ConstDatetimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constDatetime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterConstDatetime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitConstDatetime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitConstDatetime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstDatetimeContext constDatetime() throws RecognitionException {
		ConstDatetimeContext _localctx = new ConstDatetimeContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_constDatetime);
		try {
			setState(2999);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2976);
				match(TIMESTAMP);
				setState(2977);
				match(LP_);
				setState(2978);
				match(NUMBER_);
				setState(2979);
				match(RP_);
				setState(2981);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					setState(2980);
					timezone();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2983);
				match(TIMESTAMP);
				setState(2985);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					setState(2984);
					timezone();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2987);
				match(TIME);
				setState(2988);
				match(LP_);
				setState(2989);
				match(NUMBER_);
				setState(2990);
				match(RP_);
				setState(2992);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					setState(2991);
					timezone();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2994);
				match(TIME);
				setState(2996);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					setState(2995);
					timezone();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2998);
				match(DATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimezoneContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DMLStatementParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(DMLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(DMLStatementParser.ZONE, 0); }
		public TerminalNode WITHOUT() { return getToken(DMLStatementParser.WITHOUT, 0); }
		public TimezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timezone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTimezone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTimezone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTimezone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimezoneContext timezone() throws RecognitionException {
		TimezoneContext _localctx = new TimezoneContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_timezone);
		try {
			setState(3007);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(3001);
				match(WITH);
				setState(3002);
				match(TIME);
				setState(3003);
				match(ZONE);
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3004);
				match(WITHOUT);
				setState(3005);
				match(TIME);
				setState(3006);
				match(ZONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterContext extends ParserRuleContext {
		public CharacterWithLengthContext characterWithLength() {
			return getRuleContext(CharacterWithLengthContext.class,0);
		}
		public CharacterWithoutLengthContext characterWithoutLength() {
			return getRuleContext(CharacterWithoutLengthContext.class,0);
		}
		public CharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterContext character() throws RecognitionException {
		CharacterContext _localctx = new CharacterContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_character);
		try {
			setState(3011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3009);
				characterWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3010);
				characterWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithLengthContext extends ParserRuleContext {
		public CharacterClauseContext characterClause() {
			return getRuleContext(CharacterClauseContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DMLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public CharacterWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCharacterWithLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCharacterWithLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCharacterWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithLengthContext characterWithLength() throws RecognitionException {
		CharacterWithLengthContext _localctx = new CharacterWithLengthContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_characterWithLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3013);
			characterClause();
			setState(3014);
			match(LP_);
			setState(3015);
			match(NUMBER_);
			setState(3016);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithoutLengthContext extends ParserRuleContext {
		public CharacterClauseContext characterClause() {
			return getRuleContext(CharacterClauseContext.class,0);
		}
		public CharacterWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithoutLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCharacterWithoutLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCharacterWithoutLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCharacterWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithoutLengthContext characterWithoutLength() throws RecognitionException {
		CharacterWithoutLengthContext _localctx = new CharacterWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_characterWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3018);
			characterClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterClauseContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(DMLStatementParser.CHARACTER, 0); }
		public TerminalNode VARYING() { return getToken(DMLStatementParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(DMLStatementParser.CHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(DMLStatementParser.VARCHAR, 0); }
		public TerminalNode NATIONAL() { return getToken(DMLStatementParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(DMLStatementParser.NCHAR, 0); }
		public CharacterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCharacterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCharacterClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCharacterClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterClauseContext characterClause() throws RecognitionException {
		CharacterClauseContext _localctx = new CharacterClauseContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_characterClause);
		try {
			setState(3043);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3020);
				match(CHARACTER);
				setState(3022);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					setState(3021);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3024);
				match(CHAR);
				setState(3026);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					setState(3025);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3028);
				match(VARCHAR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3029);
				match(NATIONAL);
				setState(3030);
				match(CHARACTER);
				setState(3032);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
				case 1:
					{
					setState(3031);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3034);
				match(NATIONAL);
				setState(3035);
				match(CHAR);
				setState(3037);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
				case 1:
					{
					setState(3036);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3039);
				match(NCHAR);
				setState(3041);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					setState(3040);
					match(VARYING);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptFloatContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DMLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public OptFloatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optFloat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOptFloat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOptFloat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOptFloat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptFloatContext optFloat() throws RecognitionException {
		OptFloatContext _localctx = new OptFloatContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_optFloat);
		try {
			setState(3049);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3045);
				match(LP_);
				setState(3046);
				match(NUMBER_);
				setState(3047);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttrsContext extends ParserRuleContext {
		public TerminalNode DOT_() { return getToken(DMLStatementParser.DOT_, 0); }
		public AttrNameContext attrName() {
			return getRuleContext(AttrNameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterAttrs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitAttrs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitAttrs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrsContext attrs() throws RecognitionException {
		return attrs(0);
	}

	private AttrsContext attrs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AttrsContext _localctx = new AttrsContext(_ctx, _parentState);
		AttrsContext _prevctx = _localctx;
		int _startState = 372;
		enterRecursionRule(_localctx, 372, RULE_attrs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3052);
			match(DOT_);
			setState(3053);
			attrName();
			}
			_ctx.stop = _input.LT(-1);
			setState(3060);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,260,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttrsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_attrs);
					setState(3055);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3056);
					match(DOT_);
					setState(3057);
					attrName();
					}
					} 
				}
				setState(3062);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,260,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AttrNameContext extends ParserRuleContext {
		public ColLableContext colLable() {
			return getRuleContext(ColLableContext.class,0);
		}
		public AttrNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterAttrName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitAttrName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitAttrName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrNameContext attrName() throws RecognitionException {
		AttrNameContext _localctx = new AttrNameContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_attrName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3063);
			colLable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColLableContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public ColLableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colLable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterColLable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitColLable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitColLable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColLableContext colLable() throws RecognitionException {
		ColLableContext _localctx = new ColLableContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_colLable);
		try {
			setState(3069);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3065);
				identifier();
				}
				break;
			case POSITION:
			case PRECISION:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case EXISTS:
			case BETWEEN:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case NULLIF:
			case NATIONAL:
			case NCHAR:
			case COALESCE:
			case GROUPING:
			case DEC:
			case ROW:
			case EXTRACT:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BIT:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case XMLATTRIBUTES:
			case GREATEST:
			case LEAST:
			case XMLTABLE:
			case XMLNAMESPACES:
			case NONE:
			case OUT:
			case INOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3066);
				colNameKeyword();
				}
				break;
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IS:
			case LIKE:
			case COLLATION:
			case OVERLAPS:
			case BINARY:
			case CONCURRENTLY:
			case TABLESAMPLE:
			case CURRENT_SCHEMA:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3067);
				typeFuncNameKeyword();
				}
				break;
			case SELECT:
			case CREATE:
			case GRANT:
			case TABLE:
			case COLUMN:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case FOREIGN:
			case INTO:
			case WITH:
			case UNION:
			case DISTINCT:
			case CASE:
			case WHEN:
			case CAST:
			case FROM:
			case USING:
			case WHERE:
			case AS:
			case ON:
			case ELSE:
			case THEN:
			case FOR:
			case TO:
			case AND:
			case OR:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case IN:
			case ALL:
			case ANY:
			case ORDER:
			case GROUP:
			case ASC:
			case DESC:
			case HAVING:
			case LIMIT:
			case OFFSET:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case DEFAULT:
			case DO:
			case CURRENT_USER:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case BOTH:
			case LEADING:
			case TRAILING:
			case INTERSECT:
			case EXCEPT:
			case FETCH:
			case WINDOW:
			case SOME:
			case END:
			case CHECK:
			case REFERENCES:
			case USER:
			case COLLATE:
			case DEFERRABLE:
			case INITIALLY:
			case ONLY:
			case SESSION_USER:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case SYMMETRIC:
			case ASYMMETRIC:
			case VARIADIC:
			case PLACING:
			case RETURNING:
			case LATERAL:
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3068);
				reservedKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitContext extends ParserRuleContext {
		public BitWithLengthContext bitWithLength() {
			return getRuleContext(BitWithLengthContext.class,0);
		}
		public BitWithoutLengthContext bitWithoutLength() {
			return getRuleContext(BitWithoutLengthContext.class,0);
		}
		public BitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterBit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitBit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitBit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitContext bit() throws RecognitionException {
		BitContext _localctx = new BitContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_bit);
		try {
			setState(3073);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3071);
				bitWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3072);
				bitWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitWithLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(DMLStatementParser.BIT, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public TerminalNode VARYING() { return getToken(DMLStatementParser.VARYING, 0); }
		public BitWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterBitWithLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitBitWithLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitBitWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithLengthContext bitWithLength() throws RecognitionException {
		BitWithLengthContext _localctx = new BitWithLengthContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_bitWithLength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3075);
			match(BIT);
			setState(3077);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VARYING) {
				{
				setState(3076);
				match(VARYING);
				}
			}

			setState(3079);
			match(LP_);
			setState(3080);
			exprList(0);
			setState(3081);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitWithoutLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(DMLStatementParser.BIT, 0); }
		public TerminalNode VARYING() { return getToken(DMLStatementParser.VARYING, 0); }
		public BitWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithoutLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterBitWithoutLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitBitWithoutLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitBitWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithoutLengthContext bitWithoutLength() throws RecognitionException {
		BitWithoutLengthContext _localctx = new BitWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_bitWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3083);
			match(BIT);
			setState(3085);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				{
				setState(3084);
				match(VARYING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstIntervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(DMLStatementParser.INTERVAL, 0); }
		public ConstIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterConstInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitConstInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitConstInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstIntervalContext constInterval() throws RecognitionException {
		ConstIntervalContext _localctx = new ConstIntervalContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_constInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3087);
			match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptIntervalContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(DMLStatementParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(DMLStatementParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(DMLStatementParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(DMLStatementParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(DMLStatementParser.MINUTE, 0); }
		public IntervalSecondContext intervalSecond() {
			return getRuleContext(IntervalSecondContext.class,0);
		}
		public TerminalNode TO() { return getToken(DMLStatementParser.TO, 0); }
		public OptIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOptInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOptInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOptInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptIntervalContext optInterval() throws RecognitionException {
		OptIntervalContext _localctx = new OptIntervalContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_optInterval);
		try {
			setState(3117);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3089);
				match(YEAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3090);
				match(MONTH);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3091);
				match(DAY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3092);
				match(HOUR);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3093);
				match(MINUTE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3094);
				intervalSecond();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3095);
				match(YEAR);
				setState(3096);
				match(TO);
				setState(3097);
				match(MONTH);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3098);
				match(DAY);
				setState(3099);
				match(TO);
				setState(3100);
				match(HOUR);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3101);
				match(DAY);
				setState(3102);
				match(TO);
				setState(3103);
				match(MINUTE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3104);
				match(DAY);
				setState(3105);
				match(TO);
				setState(3106);
				intervalSecond();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3107);
				match(HOUR);
				setState(3108);
				match(TO);
				setState(3109);
				match(MINUTE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3110);
				match(HOUR);
				setState(3111);
				match(TO);
				setState(3112);
				intervalSecond();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3113);
				match(MINUTE);
				setState(3114);
				match(TO);
				setState(3115);
				intervalSecond();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptArrayBoundsContext extends ParserRuleContext {
		public OptArrayBoundsContext optArrayBounds() {
			return getRuleContext(OptArrayBoundsContext.class,0);
		}
		public TerminalNode LBT_() { return getToken(DMLStatementParser.LBT_, 0); }
		public TerminalNode RBT_() { return getToken(DMLStatementParser.RBT_, 0); }
		public TerminalNode NUMBER_() { return getToken(DMLStatementParser.NUMBER_, 0); }
		public OptArrayBoundsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optArrayBounds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOptArrayBounds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOptArrayBounds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOptArrayBounds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptArrayBoundsContext optArrayBounds() throws RecognitionException {
		return optArrayBounds(0);
	}

	private OptArrayBoundsContext optArrayBounds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptArrayBoundsContext _localctx = new OptArrayBoundsContext(_ctx, _parentState);
		OptArrayBoundsContext _prevctx = _localctx;
		int _startState = 388;
		enterRecursionRule(_localctx, 388, RULE_optArrayBounds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(3129);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,267,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3127);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
					case 1:
						{
						_localctx = new OptArrayBoundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_optArrayBounds);
						setState(3120);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3121);
						match(LBT_);
						setState(3122);
						match(RBT_);
						}
						break;
					case 2:
						{
						_localctx = new OptArrayBoundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_optArrayBounds);
						setState(3123);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3124);
						match(LBT_);
						setState(3125);
						match(NUMBER_);
						setState(3126);
						match(RBT_);
						}
						break;
					}
					} 
				}
				setState(3131);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,267,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class IntervalSecondContext extends ParserRuleContext {
		public TerminalNode SECOND() { return getToken(DMLStatementParser.SECOND, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DMLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public IntervalSecondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalSecond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterIntervalSecond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitIntervalSecond(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitIntervalSecond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalSecondContext intervalSecond() throws RecognitionException {
		IntervalSecondContext _localctx = new IntervalSecondContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_intervalSecond);
		try {
			setState(3137);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3132);
				match(SECOND);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3133);
				match(SECOND);
				setState(3134);
				match(LP_);
				setState(3135);
				match(NUMBER_);
				setState(3136);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnicodeNormalFormContext extends ParserRuleContext {
		public TerminalNode NFC() { return getToken(DMLStatementParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(DMLStatementParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(DMLStatementParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(DMLStatementParser.NFKD, 0); }
		public UnicodeNormalFormContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicodeNormalForm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterUnicodeNormalForm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitUnicodeNormalForm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitUnicodeNormalForm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnicodeNormalFormContext unicodeNormalForm() throws RecognitionException {
		UnicodeNormalFormContext _localctx = new UnicodeNormalFormContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_unicodeNormalForm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3139);
			_la = _input.LA(1);
			if ( !(((((_la - 369)) & ~0x3f) == 0 && ((1L << (_la - 369)) & ((1L << (NFC - 369)) | (1L << (NFD - 369)) | (1L << (NFKC - 369)) | (1L << (NFKD - 369)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrimListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DMLStatementParser.FROM, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TrimListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTrimList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTrimList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTrimList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrimListContext trimList() throws RecognitionException {
		TrimListContext _localctx = new TrimListContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_trimList);
		try {
			setState(3148);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3141);
				aExpr(0);
				setState(3142);
				match(FROM);
				setState(3143);
				exprList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3145);
				match(FROM);
				setState(3146);
				exprList(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3147);
				exprList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverlayListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public OverlayPlacingContext overlayPlacing() {
			return getRuleContext(OverlayPlacingContext.class,0);
		}
		public SubstrFromContext substrFrom() {
			return getRuleContext(SubstrFromContext.class,0);
		}
		public SubstrForContext substrFor() {
			return getRuleContext(SubstrForContext.class,0);
		}
		public OverlayListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlayList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOverlayList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOverlayList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOverlayList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverlayListContext overlayList() throws RecognitionException {
		OverlayListContext _localctx = new OverlayListContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_overlayList);
		try {
			setState(3159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3150);
				aExpr(0);
				setState(3151);
				overlayPlacing();
				setState(3152);
				substrFrom();
				setState(3153);
				substrFor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3155);
				aExpr(0);
				setState(3156);
				overlayPlacing();
				setState(3157);
				substrFrom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverlayPlacingContext extends ParserRuleContext {
		public TerminalNode PLACING() { return getToken(DMLStatementParser.PLACING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public OverlayPlacingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlayPlacing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOverlayPlacing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOverlayPlacing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOverlayPlacing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverlayPlacingContext overlayPlacing() throws RecognitionException {
		OverlayPlacingContext _localctx = new OverlayPlacingContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_overlayPlacing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3161);
			match(PLACING);
			setState(3162);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstrFromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(DMLStatementParser.FROM, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SubstrFromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substrFrom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSubstrFrom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSubstrFrom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSubstrFrom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstrFromContext substrFrom() throws RecognitionException {
		SubstrFromContext _localctx = new SubstrFromContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_substrFrom);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3164);
			match(FROM);
			setState(3165);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstrForContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DMLStatementParser.FOR, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SubstrForContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substrFor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSubstrFor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSubstrFor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSubstrFor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstrForContext substrFor() throws RecognitionException {
		SubstrForContext _localctx = new SubstrForContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_substrFor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3167);
			match(FOR);
			setState(3168);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PositionListContext extends ParserRuleContext {
		public List<BExprContext> bExpr() {
			return getRuleContexts(BExprContext.class);
		}
		public BExprContext bExpr(int i) {
			return getRuleContext(BExprContext.class,i);
		}
		public TerminalNode IN() { return getToken(DMLStatementParser.IN, 0); }
		public PositionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterPositionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitPositionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitPositionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionListContext positionList() throws RecognitionException {
		PositionListContext _localctx = new PositionListContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_positionList);
		try {
			setState(3175);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case CARET_:
			case MOD_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case LP_:
			case QUESTION_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3170);
				bExpr(0);
				setState(3171);
				match(IN);
				setState(3172);
				bExpr(0);
				}
				break;
			case RP_:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstrListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SubstrFromContext substrFrom() {
			return getRuleContext(SubstrFromContext.class,0);
		}
		public SubstrForContext substrFor() {
			return getRuleContext(SubstrForContext.class,0);
		}
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public SubstrListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substrList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSubstrList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSubstrList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSubstrList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstrListContext substrList() throws RecognitionException {
		SubstrListContext _localctx = new SubstrListContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_substrList);
		try {
			setState(3193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3177);
				aExpr(0);
				setState(3178);
				substrFrom();
				setState(3179);
				substrFor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3181);
				aExpr(0);
				setState(3182);
				substrFor();
				setState(3183);
				substrFrom();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3185);
				aExpr(0);
				setState(3186);
				substrFrom();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3188);
				aExpr(0);
				setState(3189);
				substrFor();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3191);
				exprList(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlAttributesContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(DMLStatementParser.XMLATTRIBUTES, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public XmlAttributeListContext xmlAttributeList() {
			return getRuleContext(XmlAttributeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public XmlAttributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlAttributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterXmlAttributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitXmlAttributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitXmlAttributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlAttributesContext xmlAttributes() throws RecognitionException {
		XmlAttributesContext _localctx = new XmlAttributesContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_xmlAttributes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3195);
			match(XMLATTRIBUTES);
			setState(3196);
			match(LP_);
			setState(3197);
			xmlAttributeList();
			setState(3198);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlAttributeListContext extends ParserRuleContext {
		public List<XmlAttributeElContext> xmlAttributeEl() {
			return getRuleContexts(XmlAttributeElContext.class);
		}
		public XmlAttributeElContext xmlAttributeEl(int i) {
			return getRuleContext(XmlAttributeElContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public XmlAttributeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlAttributeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterXmlAttributeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitXmlAttributeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitXmlAttributeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlAttributeListContext xmlAttributeList() throws RecognitionException {
		XmlAttributeListContext _localctx = new XmlAttributeListContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_xmlAttributeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3200);
			xmlAttributeEl();
			setState(3205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3201);
				match(COMMA_);
				setState(3202);
				xmlAttributeEl();
				}
				}
				setState(3207);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlAttributeElContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(DMLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public XmlAttributeElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlAttributeEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterXmlAttributeEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitXmlAttributeEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitXmlAttributeEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlAttributeElContext xmlAttributeEl() throws RecognitionException {
		XmlAttributeElContext _localctx = new XmlAttributeElContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_xmlAttributeEl);
		try {
			setState(3213);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3208);
				aExpr(0);
				setState(3209);
				match(AS);
				setState(3210);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3212);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlExistsArgumentContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(DMLStatementParser.PASSING, 0); }
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public List<XmlPassingMechContext> xmlPassingMech() {
			return getRuleContexts(XmlPassingMechContext.class);
		}
		public XmlPassingMechContext xmlPassingMech(int i) {
			return getRuleContext(XmlPassingMechContext.class,i);
		}
		public XmlExistsArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlExistsArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterXmlExistsArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitXmlExistsArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitXmlExistsArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlExistsArgumentContext xmlExistsArgument() throws RecognitionException {
		XmlExistsArgumentContext _localctx = new XmlExistsArgumentContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_xmlExistsArgument);
		try {
			setState(3230);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3215);
				match(PASSING);
				setState(3216);
				cExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3217);
				match(PASSING);
				setState(3218);
				cExpr();
				setState(3219);
				xmlPassingMech();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3221);
				match(PASSING);
				setState(3222);
				xmlPassingMech();
				setState(3223);
				cExpr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3225);
				match(PASSING);
				setState(3226);
				xmlPassingMech();
				setState(3227);
				cExpr();
				setState(3228);
				xmlPassingMech();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlPassingMechContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(DMLStatementParser.BY, 0); }
		public TerminalNode REF() { return getToken(DMLStatementParser.REF, 0); }
		public TerminalNode VALUE() { return getToken(DMLStatementParser.VALUE, 0); }
		public XmlPassingMechContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlPassingMech; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterXmlPassingMech(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitXmlPassingMech(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitXmlPassingMech(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlPassingMechContext xmlPassingMech() throws RecognitionException {
		XmlPassingMechContext _localctx = new XmlPassingMechContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_xmlPassingMech);
		try {
			setState(3236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3232);
				match(BY);
				setState(3233);
				match(REF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3234);
				match(BY);
				setState(3235);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DocumentOrContentContext extends ParserRuleContext {
		public TerminalNode DOCUMENT() { return getToken(DMLStatementParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(DMLStatementParser.CONTENT, 0); }
		public DocumentOrContentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_documentOrContent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterDocumentOrContent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitDocumentOrContent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitDocumentOrContent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DocumentOrContentContext documentOrContent() throws RecognitionException {
		DocumentOrContentContext _localctx = new DocumentOrContentContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_documentOrContent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3238);
			_la = _input.LA(1);
			if ( !(_la==DOCUMENT || _la==CONTENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlWhitespaceOptionContext extends ParserRuleContext {
		public TerminalNode PRESERVE() { return getToken(DMLStatementParser.PRESERVE, 0); }
		public TerminalNode WHITESPACE() { return getToken(DMLStatementParser.WHITESPACE, 0); }
		public TerminalNode STRIP() { return getToken(DMLStatementParser.STRIP, 0); }
		public XmlWhitespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlWhitespaceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterXmlWhitespaceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitXmlWhitespaceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitXmlWhitespaceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlWhitespaceOptionContext xmlWhitespaceOption() throws RecognitionException {
		XmlWhitespaceOptionContext _localctx = new XmlWhitespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_xmlWhitespaceOption);
		try {
			setState(3245);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRESERVE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3240);
				match(PRESERVE);
				setState(3241);
				match(WHITESPACE);
				}
				break;
			case STRIP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3242);
				match(STRIP);
				setState(3243);
				match(WHITESPACE);
				}
				break;
			case RP_:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlRootVersionContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(DMLStatementParser.VERSION, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode NO() { return getToken(DMLStatementParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(DMLStatementParser.VALUE, 0); }
		public XmlRootVersionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlRootVersion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterXmlRootVersion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitXmlRootVersion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitXmlRootVersion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlRootVersionContext xmlRootVersion() throws RecognitionException {
		XmlRootVersionContext _localctx = new XmlRootVersionContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_xmlRootVersion);
		try {
			setState(3252);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3247);
				match(VERSION);
				setState(3248);
				aExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3249);
				match(VERSION);
				setState(3250);
				match(NO);
				setState(3251);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlRootStandaloneContext extends ParserRuleContext {
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public TerminalNode STANDALONE() { return getToken(DMLStatementParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(DMLStatementParser.YES, 0); }
		public TerminalNode NO() { return getToken(DMLStatementParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(DMLStatementParser.VALUE, 0); }
		public XmlRootStandaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlRootStandalone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterXmlRootStandalone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitXmlRootStandalone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitXmlRootStandalone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlRootStandaloneContext xmlRootStandalone() throws RecognitionException {
		XmlRootStandaloneContext _localctx = new XmlRootStandaloneContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_xmlRootStandalone);
		try {
			setState(3264);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3254);
				match(COMMA_);
				setState(3255);
				match(STANDALONE);
				setState(3256);
				match(YES);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3257);
				match(COMMA_);
				setState(3258);
				match(STANDALONE);
				setState(3259);
				match(NO);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3260);
				match(COMMA_);
				setState(3261);
				match(STANDALONE);
				setState(3262);
				match(NO);
				setState(3263);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsFromItemContext extends ParserRuleContext {
		public FunctionExprWindowlessContext functionExprWindowless() {
			return getRuleContext(FunctionExprWindowlessContext.class,0);
		}
		public ColumnDefListContext columnDefList() {
			return getRuleContext(ColumnDefListContext.class,0);
		}
		public RowsFromItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsFromItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterRowsFromItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitRowsFromItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitRowsFromItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsFromItemContext rowsFromItem() throws RecognitionException {
		RowsFromItemContext _localctx = new RowsFromItemContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_rowsFromItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3266);
			functionExprWindowless();
			setState(3267);
			columnDefList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsFromListContext extends ParserRuleContext {
		public List<RowsFromItemContext> rowsFromItem() {
			return getRuleContexts(RowsFromItemContext.class);
		}
		public RowsFromItemContext rowsFromItem(int i) {
			return getRuleContext(RowsFromItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public RowsFromListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsFromList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterRowsFromList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitRowsFromList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitRowsFromList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsFromListContext rowsFromList() throws RecognitionException {
		RowsFromListContext _localctx = new RowsFromListContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_rowsFromList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3269);
			rowsFromItem();
			setState(3274);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3270);
				match(COMMA_);
				setState(3271);
				rowsFromItem();
				}
				}
				setState(3276);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefListContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DMLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public ColumnDefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterColumnDefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitColumnDefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitColumnDefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefListContext columnDefList() throws RecognitionException {
		ColumnDefListContext _localctx = new ColumnDefListContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_columnDefList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3277);
			match(AS);
			setState(3278);
			match(LP_);
			setState(3279);
			tableFuncElementList();
			setState(3280);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncElementListContext extends ParserRuleContext {
		public List<TableFuncElementContext> tableFuncElement() {
			return getRuleContexts(TableFuncElementContext.class);
		}
		public TableFuncElementContext tableFuncElement(int i) {
			return getRuleContext(TableFuncElementContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public TableFuncElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTableFuncElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTableFuncElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTableFuncElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementListContext tableFuncElementList() throws RecognitionException {
		TableFuncElementListContext _localctx = new TableFuncElementListContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_tableFuncElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3282);
			tableFuncElement();
			setState(3287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3283);
				match(COMMA_);
				setState(3284);
				tableFuncElement();
				}
				}
				setState(3289);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncElementContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public TableFuncElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTableFuncElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTableFuncElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTableFuncElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementContext tableFuncElement() throws RecognitionException {
		TableFuncElementContext _localctx = new TableFuncElementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_tableFuncElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3290);
			colId();
			setState(3291);
			typeName();
			setState(3293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(3292);
				collateClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateClauseContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(DMLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DMLStatementParser.EQ_, 0); }
		public CollateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collateClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCollateClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCollateClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCollateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateClauseContext collateClause() throws RecognitionException {
		CollateClauseContext _localctx = new CollateClauseContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_collateClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3295);
			match(COLLATE);
			setState(3297);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(3296);
				match(EQ_);
				}
			}

			setState(3299);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnyNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public AnyNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterAnyName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitAnyName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitAnyName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnyNameContext anyName() throws RecognitionException {
		AnyNameContext _localctx = new AnyNameContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_anyName);
		try {
			setState(3305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3301);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3302);
				colId();
				setState(3303);
				attrs(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DMLStatementParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public AliasClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterAliasClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitAliasClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitAliasClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasClauseContext aliasClause() throws RecognitionException {
		AliasClauseContext _localctx = new AliasClauseContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_aliasClause);
		try {
			setState(3321);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3307);
				match(AS);
				setState(3308);
				colId();
				setState(3309);
				match(LP_);
				setState(3310);
				nameList(0);
				setState(3311);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3313);
				match(AS);
				setState(3314);
				colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3315);
				colId();
				setState(3316);
				match(LP_);
				setState(3317);
				nameList(0);
				setState(3318);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3320);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameListContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public NameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameListContext nameList() throws RecognitionException {
		return nameList(0);
	}

	private NameListContext nameList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		NameListContext _localctx = new NameListContext(_ctx, _parentState);
		NameListContext _prevctx = _localctx;
		int _startState = 442;
		enterRecursionRule(_localctx, 442, RULE_nameList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3324);
			name();
			}
			_ctx.stop = _input.LT(-1);
			setState(3331);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,286,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NameListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_nameList);
					setState(3326);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3327);
					match(COMMA_);
					setState(3328);
					name();
					}
					} 
				}
				setState(3333);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,286,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class FuncAliasClauseContext extends ParserRuleContext {
		public AliasClauseContext aliasClause() {
			return getRuleContext(AliasClauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(DMLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public FuncAliasClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcAliasClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFuncAliasClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFuncAliasClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFuncAliasClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncAliasClauseContext funcAliasClause() throws RecognitionException {
		FuncAliasClauseContext _localctx = new FuncAliasClauseContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_funcAliasClause);
		try {
			setState(3351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3334);
				aliasClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3335);
				match(AS);
				setState(3336);
				match(LP_);
				setState(3337);
				tableFuncElementList();
				setState(3338);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3340);
				match(AS);
				setState(3341);
				colId();
				setState(3342);
				match(LP_);
				setState(3343);
				tableFuncElementList();
				setState(3344);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3346);
				colId();
				setState(3347);
				match(LP_);
				setState(3348);
				tableFuncElementList();
				setState(3349);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesampleClauseContext extends ParserRuleContext {
		public TerminalNode TABLESAMPLE() { return getToken(DMLStatementParser.TABLESAMPLE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public RepeatableClauseContext repeatableClause() {
			return getRuleContext(RepeatableClauseContext.class,0);
		}
		public TablesampleClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablesampleClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTablesampleClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTablesampleClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTablesampleClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesampleClauseContext tablesampleClause() throws RecognitionException {
		TablesampleClauseContext _localctx = new TablesampleClauseContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_tablesampleClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3353);
			match(TABLESAMPLE);
			setState(3354);
			funcName();
			setState(3355);
			match(LP_);
			setState(3356);
			exprList(0);
			setState(3357);
			match(RP_);
			setState(3359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				setState(3358);
				repeatableClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatableClauseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(DMLStatementParser.REPEATABLE, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public RepeatableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterRepeatableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitRepeatableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitRepeatableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatableClauseContext repeatableClause() throws RecognitionException {
		RepeatableClauseContext _localctx = new RepeatableClauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_repeatableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3361);
			match(REPEATABLE);
			setState(3362);
			match(LP_);
			setState(3363);
			aExpr(0);
			setState(3364);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllOrDistinctContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(DMLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(DMLStatementParser.DISTINCT, 0); }
		public AllOrDistinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOrDistinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterAllOrDistinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitAllOrDistinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitAllOrDistinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllOrDistinctContext allOrDistinct() throws RecognitionException {
		AllOrDistinctContext _localctx = new AllOrDistinctContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_allOrDistinct);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3366);
			_la = _input.LA(1);
			if ( !(_la==DISTINCT || _la==ALL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(DMLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DMLStatementParser.BY, 0); }
		public SortbyListContext sortbyList() {
			return getRuleContext(SortbyListContext.class,0);
		}
		public SortClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSortClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSortClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSortClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortClauseContext sortClause() throws RecognitionException {
		SortClauseContext _localctx = new SortClauseContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_sortClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3368);
			match(ORDER);
			setState(3369);
			match(BY);
			setState(3370);
			sortbyList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortbyListContext extends ParserRuleContext {
		public List<SortbyContext> sortby() {
			return getRuleContexts(SortbyContext.class);
		}
		public SortbyContext sortby(int i) {
			return getRuleContext(SortbyContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public SortbyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortbyList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSortbyList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSortbyList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSortbyList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyListContext sortbyList() throws RecognitionException {
		SortbyListContext _localctx = new SortbyListContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_sortbyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3372);
			sortby();
			setState(3377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3373);
				match(COMMA_);
				setState(3374);
				sortby();
				}
				}
				setState(3379);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortbyContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode USING() { return getToken(DMLStatementParser.USING, 0); }
		public QualAllOpContext qualAllOp() {
			return getRuleContext(QualAllOpContext.class,0);
		}
		public NullsOrderContext nullsOrder() {
			return getRuleContext(NullsOrderContext.class,0);
		}
		public AscDescContext ascDesc() {
			return getRuleContext(AscDescContext.class,0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSortby(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSortby(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSortby(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyContext sortby() throws RecognitionException {
		SortbyContext _localctx = new SortbyContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_sortby);
		int _la;
		try {
			setState(3393);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3380);
				aExpr(0);
				setState(3381);
				match(USING);
				setState(3382);
				qualAllOp();
				setState(3384);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(3383);
					nullsOrder();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3386);
				aExpr(0);
				setState(3388);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(3387);
					ascDesc();
					}
				}

				setState(3391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(3390);
					nullsOrder();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullsOrderContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(DMLStatementParser.NULLS, 0); }
		public TerminalNode FIRST() { return getToken(DMLStatementParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(DMLStatementParser.LAST, 0); }
		public NullsOrderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullsOrder; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterNullsOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitNullsOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitNullsOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullsOrderContext nullsOrder() throws RecognitionException {
		NullsOrderContext _localctx = new NullsOrderContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_nullsOrder);
		try {
			setState(3399);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3395);
				match(NULLS);
				setState(3396);
				match(FIRST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3397);
				match(NULLS);
				setState(3398);
				match(LAST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctClauseContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(DMLStatementParser.DISTINCT, 0); }
		public TerminalNode ON() { return getToken(DMLStatementParser.ON, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public DistinctClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterDistinctClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitDistinctClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitDistinctClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctClauseContext distinctClause() throws RecognitionException {
		DistinctClauseContext _localctx = new DistinctClauseContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_distinctClause);
		try {
			setState(3408);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3401);
				match(DISTINCT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3402);
				match(DISTINCT);
				setState(3403);
				match(ON);
				setState(3404);
				match(LP_);
				setState(3405);
				exprList(0);
				setState(3406);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(DMLStatementParser.DISTINCT, 0); }
		public DistinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterDistinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitDistinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitDistinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctContext distinct() throws RecognitionException {
		DistinctContext _localctx = new DistinctContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_distinct);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3410);
			match(DISTINCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(DMLStatementParser.OVER, 0); }
		public WindowSpecificationContext windowSpecification() {
			return getRuleContext(WindowSpecificationContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOverClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOverClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOverClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_overClause);
		try {
			setState(3416);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3412);
				match(OVER);
				setState(3413);
				windowSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3414);
				match(OVER);
				setState(3415);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3418);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexParamsContext extends ParserRuleContext {
		public List<IndexElemContext> indexElem() {
			return getRuleContexts(IndexElemContext.class);
		}
		public IndexElemContext indexElem(int i) {
			return getRuleContext(IndexElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public IndexParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexParams; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterIndexParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitIndexParams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitIndexParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexParamsContext indexParams() throws RecognitionException {
		IndexParamsContext _localctx = new IndexParamsContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_indexParams);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3420);
			indexElem();
			setState(3425);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3421);
				match(COMMA_);
				setState(3422);
				indexElem();
				}
				}
				setState(3427);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexElemOptionsContext extends ParserRuleContext {
		public OptClassContext optClass() {
			return getRuleContext(OptClassContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public AscDescContext ascDesc() {
			return getRuleContext(AscDescContext.class,0);
		}
		public NullsOrderContext nullsOrder() {
			return getRuleContext(NullsOrderContext.class,0);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public IndexElemOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexElemOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterIndexElemOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitIndexElemOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitIndexElemOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexElemOptionsContext indexElemOptions() throws RecognitionException {
		IndexElemOptionsContext _localctx = new IndexElemOptionsContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_indexElemOptions);
		int _la;
		try {
			setState(3449);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(3428);
					collate();
					}
				}

				setState(3431);
				optClass();
				setState(3433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(3432);
					ascDesc();
					}
				}

				setState(3436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(3435);
					nullsOrder();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3439);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(3438);
					collate();
					}
				}

				setState(3441);
				anyName();
				setState(3442);
				reloptions();
				setState(3444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(3443);
					ascDesc();
					}
				}

				setState(3447);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(3446);
					nullsOrder();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndexElemOptionsContext indexElemOptions() {
			return getRuleContext(IndexElemOptionsContext.class,0);
		}
		public FunctionExprWindowlessContext functionExprWindowless() {
			return getRuleContext(FunctionExprWindowlessContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public IndexElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterIndexElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitIndexElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitIndexElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexElemContext indexElem() throws RecognitionException {
		IndexElemContext _localctx = new IndexElemContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_indexElem);
		try {
			setState(3462);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3451);
				colId();
				setState(3452);
				indexElemOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3454);
				functionExprWindowless();
				setState(3455);
				indexElemOptions();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3457);
				match(LP_);
				setState(3458);
				aExpr(0);
				setState(3459);
				match(RP_);
				setState(3460);
				indexElemOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(DMLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public CollateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCollate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateContext collate() throws RecognitionException {
		CollateContext _localctx = new CollateContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_collate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3464);
			match(COLLATE);
			setState(3465);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptClassContext extends ParserRuleContext {
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public OptClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOptClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOptClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOptClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptClassContext optClass() throws RecognitionException {
		OptClassContext _localctx = new OptClassContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_optClass);
		try {
			setState(3469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3467);
				anyName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public ReloptionListContext reloptionList() {
			return getRuleContext(ReloptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public ReloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterReloptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitReloptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitReloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionsContext reloptions() throws RecognitionException {
		ReloptionsContext _localctx = new ReloptionsContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_reloptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3471);
			match(LP_);
			setState(3472);
			reloptionList();
			setState(3473);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionListContext extends ParserRuleContext {
		public List<ReloptionElemContext> reloptionElem() {
			return getRuleContexts(ReloptionElemContext.class);
		}
		public ReloptionElemContext reloptionElem(int i) {
			return getRuleContext(ReloptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public ReloptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterReloptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitReloptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitReloptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionListContext reloptionList() throws RecognitionException {
		ReloptionListContext _localctx = new ReloptionListContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_reloptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3475);
			reloptionElem();
			setState(3480);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3476);
				match(COMMA_);
				setState(3477);
				reloptionElem();
				}
				}
				setState(3482);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionElemContext extends ParserRuleContext {
		public List<AliasContext> alias() {
			return getRuleContexts(AliasContext.class);
		}
		public AliasContext alias(int i) {
			return getRuleContext(AliasContext.class,i);
		}
		public TerminalNode EQ_() { return getToken(DMLStatementParser.EQ_, 0); }
		public DefArgContext defArg() {
			return getRuleContext(DefArgContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DMLStatementParser.DOT_, 0); }
		public ReloptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptionElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterReloptionElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitReloptionElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitReloptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionElemContext reloptionElem() throws RecognitionException {
		ReloptionElemContext _localctx = new ReloptionElemContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_reloptionElem);
		try {
			setState(3498);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3483);
				alias();
				setState(3484);
				match(EQ_);
				setState(3485);
				defArg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3487);
				alias();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3488);
				alias();
				setState(3489);
				match(DOT_);
				setState(3490);
				alias();
				setState(3491);
				match(EQ_);
				setState(3492);
				defArg();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3494);
				alias();
				setState(3495);
				match(DOT_);
				setState(3496);
				alias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefArgContext extends ParserRuleContext {
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public QualAllOpContext qualAllOp() {
			return getRuleContext(QualAllOpContext.class,0);
		}
		public TerminalNode NUMBER_() { return getToken(DMLStatementParser.NUMBER_, 0); }
		public TerminalNode STRING_() { return getToken(DMLStatementParser.STRING_, 0); }
		public TerminalNode NONE() { return getToken(DMLStatementParser.NONE, 0); }
		public DefArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterDefArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitDefArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitDefArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefArgContext defArg() throws RecognitionException {
		DefArgContext _localctx = new DefArgContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_defArg);
		try {
			setState(3506);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3500);
				funcType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3501);
				reservedKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3502);
				qualAllOp();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3503);
				match(NUMBER_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3504);
				match(STRING_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3505);
				match(NONE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncTypeContext extends ParserRuleContext {
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public TerminalNode MOD_() { return getToken(DMLStatementParser.MOD_, 0); }
		public TerminalNode TYPE() { return getToken(DMLStatementParser.TYPE, 0); }
		public TerminalNode SETOF() { return getToken(DMLStatementParser.SETOF, 0); }
		public FuncTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFuncType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFuncType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFuncType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncTypeContext funcType() throws RecognitionException {
		FuncTypeContext _localctx = new FuncTypeContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_funcType);
		try {
			setState(3520);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3508);
				typeName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3509);
				typeFunctionName();
				setState(3510);
				attrs(0);
				setState(3511);
				match(MOD_);
				setState(3512);
				match(TYPE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3514);
				match(SETOF);
				setState(3515);
				typeFunctionName();
				setState(3516);
				attrs(0);
				setState(3517);
				match(MOD_);
				setState(3518);
				match(TYPE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeNameContext dataTypeName() {
			return getRuleContext(DataTypeNameContext.class,0);
		}
		public DataTypeLengthContext dataTypeLength() {
			return getRuleContext(DataTypeLengthContext.class,0);
		}
		public CharacterSetContext characterSet() {
			return getRuleContext(CharacterSetContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public List<TerminalNode> STRING_() { return getTokens(DMLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DMLStatementParser.STRING_, i);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_dataType);
		int _la;
		try {
			setState(3549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3522);
				dataTypeName();
				setState(3524);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(3523);
					dataTypeLength();
					}
				}

				setState(3527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR || _la==CHARACTER) {
					{
					setState(3526);
					characterSet();
					}
				}

				setState(3530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(3529);
					collateClause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3532);
				dataTypeName();
				setState(3533);
				match(LP_);
				setState(3534);
				match(STRING_);
				setState(3539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(3535);
					match(COMMA_);
					setState(3536);
					match(STRING_);
					}
					}
					setState(3541);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3542);
				match(RP_);
				setState(3544);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR || _la==CHARACTER) {
					{
					setState(3543);
					characterSet();
					}
				}

				setState(3547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(3546);
					collateClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeNameContext extends ParserRuleContext {
		public TerminalNode INT() { return getToken(DMLStatementParser.INT, 0); }
		public TerminalNode INT2() { return getToken(DMLStatementParser.INT2, 0); }
		public TerminalNode INT4() { return getToken(DMLStatementParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(DMLStatementParser.INT8, 0); }
		public TerminalNode SMALLINT() { return getToken(DMLStatementParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DMLStatementParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(DMLStatementParser.BIGINT, 0); }
		public TerminalNode DECIMAL() { return getToken(DMLStatementParser.DECIMAL, 0); }
		public TerminalNode NUMERIC() { return getToken(DMLStatementParser.NUMERIC, 0); }
		public TerminalNode REAL() { return getToken(DMLStatementParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(DMLStatementParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(DMLStatementParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(DMLStatementParser.FLOAT8, 0); }
		public TerminalNode DOUBLE() { return getToken(DMLStatementParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(DMLStatementParser.PRECISION, 0); }
		public TerminalNode SMALLSERIAL() { return getToken(DMLStatementParser.SMALLSERIAL, 0); }
		public TerminalNode SERIAL() { return getToken(DMLStatementParser.SERIAL, 0); }
		public TerminalNode BIGSERIAL() { return getToken(DMLStatementParser.BIGSERIAL, 0); }
		public TerminalNode MONEY() { return getToken(DMLStatementParser.MONEY, 0); }
		public TerminalNode VARCHAR() { return getToken(DMLStatementParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(DMLStatementParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DMLStatementParser.CHAR, 0); }
		public TerminalNode TEXT() { return getToken(DMLStatementParser.TEXT, 0); }
		public TerminalNode NAME() { return getToken(DMLStatementParser.NAME, 0); }
		public TerminalNode BYTEA() { return getToken(DMLStatementParser.BYTEA, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DMLStatementParser.TIMESTAMP, 0); }
		public TerminalNode DATE() { return getToken(DMLStatementParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DMLStatementParser.TIME, 0); }
		public TerminalNode INTERVAL() { return getToken(DMLStatementParser.INTERVAL, 0); }
		public TerminalNode BOOLEAN() { return getToken(DMLStatementParser.BOOLEAN, 0); }
		public TerminalNode ENUM() { return getToken(DMLStatementParser.ENUM, 0); }
		public TerminalNode POINT() { return getToken(DMLStatementParser.POINT, 0); }
		public TerminalNode LINE() { return getToken(DMLStatementParser.LINE, 0); }
		public TerminalNode LSEG() { return getToken(DMLStatementParser.LSEG, 0); }
		public TerminalNode BOX() { return getToken(DMLStatementParser.BOX, 0); }
		public TerminalNode PATH() { return getToken(DMLStatementParser.PATH, 0); }
		public TerminalNode POLYGON() { return getToken(DMLStatementParser.POLYGON, 0); }
		public TerminalNode CIRCLE() { return getToken(DMLStatementParser.CIRCLE, 0); }
		public TerminalNode CIDR() { return getToken(DMLStatementParser.CIDR, 0); }
		public TerminalNode INET() { return getToken(DMLStatementParser.INET, 0); }
		public TerminalNode MACADDR() { return getToken(DMLStatementParser.MACADDR, 0); }
		public TerminalNode MACADDR8() { return getToken(DMLStatementParser.MACADDR8, 0); }
		public TerminalNode BIT() { return getToken(DMLStatementParser.BIT, 0); }
		public TerminalNode VARBIT() { return getToken(DMLStatementParser.VARBIT, 0); }
		public TerminalNode TSVECTOR() { return getToken(DMLStatementParser.TSVECTOR, 0); }
		public TerminalNode TSQUERY() { return getToken(DMLStatementParser.TSQUERY, 0); }
		public TerminalNode XML() { return getToken(DMLStatementParser.XML, 0); }
		public TerminalNode JSON() { return getToken(DMLStatementParser.JSON, 0); }
		public TerminalNode INT4RANGE() { return getToken(DMLStatementParser.INT4RANGE, 0); }
		public TerminalNode INT8RANGE() { return getToken(DMLStatementParser.INT8RANGE, 0); }
		public TerminalNode NUMRANGE() { return getToken(DMLStatementParser.NUMRANGE, 0); }
		public TerminalNode TSRANGE() { return getToken(DMLStatementParser.TSRANGE, 0); }
		public TerminalNode TSTZRANGE() { return getToken(DMLStatementParser.TSTZRANGE, 0); }
		public TerminalNode DATERANGE() { return getToken(DMLStatementParser.DATERANGE, 0); }
		public TerminalNode ARRAY() { return getToken(DMLStatementParser.ARRAY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public DataTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterDataTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitDataTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitDataTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeNameContext dataTypeName() throws RecognitionException {
		DataTypeNameContext _localctx = new DataTypeNameContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_dataTypeName);
		try {
			setState(3609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3551);
				match(INT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3552);
				match(INT2);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3553);
				match(INT4);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3554);
				match(INT8);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3555);
				match(SMALLINT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3556);
				match(INTEGER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3557);
				match(BIGINT);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3558);
				match(DECIMAL);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3559);
				match(NUMERIC);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3560);
				match(REAL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3561);
				match(FLOAT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3562);
				match(FLOAT4);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3563);
				match(FLOAT8);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3564);
				match(DOUBLE);
				setState(3565);
				match(PRECISION);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3566);
				match(SMALLSERIAL);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3567);
				match(SERIAL);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3568);
				match(BIGSERIAL);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3569);
				match(MONEY);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(3570);
				match(VARCHAR);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(3571);
				match(CHARACTER);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(3572);
				match(CHAR);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(3573);
				match(TEXT);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(3574);
				match(NAME);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(3575);
				match(BYTEA);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(3576);
				match(TIMESTAMP);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(3577);
				match(DATE);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(3578);
				match(TIME);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(3579);
				match(INTERVAL);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(3580);
				match(BOOLEAN);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(3581);
				match(ENUM);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(3582);
				match(POINT);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(3583);
				match(LINE);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(3584);
				match(LSEG);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(3585);
				match(BOX);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(3586);
				match(PATH);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(3587);
				match(POLYGON);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(3588);
				match(CIRCLE);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(3589);
				match(CIDR);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(3590);
				match(INET);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(3591);
				match(MACADDR);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(3592);
				match(MACADDR8);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(3593);
				match(BIT);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(3594);
				match(VARBIT);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(3595);
				match(TSVECTOR);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(3596);
				match(TSQUERY);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(3597);
				match(XML);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(3598);
				match(JSON);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(3599);
				match(INT4RANGE);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(3600);
				match(INT8RANGE);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(3601);
				match(NUMRANGE);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(3602);
				match(TSRANGE);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(3603);
				match(TSTZRANGE);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(3604);
				match(DATERANGE);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(3605);
				match(ARRAY);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(3606);
				identifier();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(3607);
				constDatetime();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(3608);
				typeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeLengthContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(DMLStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(DMLStatementParser.NUMBER_, i);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public DataTypeLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterDataTypeLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitDataTypeLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitDataTypeLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeLengthContext dataTypeLength() throws RecognitionException {
		DataTypeLengthContext _localctx = new DataTypeLengthContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_dataTypeLength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3611);
			match(LP_);
			setState(3612);
			match(NUMBER_);
			setState(3615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(3613);
				match(COMMA_);
				setState(3614);
				match(NUMBER_);
				}
			}

			setState(3617);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterSetContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DMLStatementParser.SET, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(DMLStatementParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DMLStatementParser.CHAR, 0); }
		public TerminalNode EQ_() { return getToken(DMLStatementParser.EQ_, 0); }
		public CharacterSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCharacterSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCharacterSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCharacterSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterSetContext characterSet() throws RecognitionException {
		CharacterSetContext _localctx = new CharacterSetContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_characterSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3619);
			_la = _input.LA(1);
			if ( !(_la==CHAR || _la==CHARACTER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3620);
			match(SET);
			setState(3622);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(3621);
				match(EQ_);
				}
			}

			setState(3624);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IgnoredIdentifierContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT_() { return getToken(DMLStatementParser.DOT_, 0); }
		public IgnoredIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterIgnoredIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitIgnoredIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitIgnoredIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredIdentifierContext ignoredIdentifier() throws RecognitionException {
		IgnoredIdentifierContext _localctx = new IgnoredIdentifierContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_ignoredIdentifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3626);
			identifier();
			setState(3629);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT_) {
				{
				setState(3627);
				match(DOT_);
				setState(3628);
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IgnoredIdentifiersContext extends ParserRuleContext {
		public List<IgnoredIdentifierContext> ignoredIdentifier() {
			return getRuleContexts(IgnoredIdentifierContext.class);
		}
		public IgnoredIdentifierContext ignoredIdentifier(int i) {
			return getRuleContext(IgnoredIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public IgnoredIdentifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredIdentifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterIgnoredIdentifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitIgnoredIdentifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitIgnoredIdentifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredIdentifiersContext ignoredIdentifiers() throws RecognitionException {
		IgnoredIdentifiersContext _localctx = new IgnoredIdentifiersContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_ignoredIdentifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3631);
			ignoredIdentifier();
			setState(3636);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3632);
				match(COMMA_);
				setState(3633);
				ignoredIdentifier();
				}
				}
				setState(3638);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignedIconstContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DMLStatementParser.NUMBER_, 0); }
		public TerminalNode PLUS_() { return getToken(DMLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(DMLStatementParser.MINUS_, 0); }
		public SignedIconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedIconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSignedIconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSignedIconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSignedIconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignedIconstContext signedIconst() throws RecognitionException {
		SignedIconstContext _localctx = new SignedIconstContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_signedIconst);
		try {
			setState(3644);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3639);
				match(NUMBER_);
				}
				break;
			case PLUS_:
				enterOuterAlt(_localctx, 2);
				{
				setState(3640);
				match(PLUS_);
				setState(3641);
				match(NUMBER_);
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 3);
				{
				setState(3642);
				match(MINUS_);
				setState(3643);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanOrStringContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(DMLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(DMLStatementParser.FALSE, 0); }
		public TerminalNode ON() { return getToken(DMLStatementParser.ON, 0); }
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(DMLStatementParser.STRING_, 0); }
		public BooleanOrStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanOrString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterBooleanOrString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitBooleanOrString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitBooleanOrString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanOrStringContext booleanOrString() throws RecognitionException {
		BooleanOrStringContext _localctx = new BooleanOrStringContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_booleanOrString);
		try {
			setState(3651);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3646);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3647);
				match(FALSE);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(3648);
				match(ON);
				}
				break;
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 4);
				{
				setState(3649);
				nonReservedWord();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 5);
				{
				setState(3650);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonReservedWordContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public NonReservedWordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReservedWord; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterNonReservedWord(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitNonReservedWord(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitNonReservedWord(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedWordContext nonReservedWord() throws RecognitionException {
		NonReservedWordContext _localctx = new NonReservedWordContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_nonReservedWord);
		try {
			setState(3657);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3653);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3654);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3655);
				colNameKeyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3656);
				typeFuncNameKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColNameKeywordContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(DMLStatementParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(DMLStatementParser.BIGINT, 0); }
		public TerminalNode BIT() { return getToken(DMLStatementParser.BIT, 0); }
		public TerminalNode BOOLEAN() { return getToken(DMLStatementParser.BOOLEAN, 0); }
		public TerminalNode CHAR() { return getToken(DMLStatementParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(DMLStatementParser.CHARACTER, 0); }
		public TerminalNode COALESCE() { return getToken(DMLStatementParser.COALESCE, 0); }
		public TerminalNode DEC() { return getToken(DMLStatementParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(DMLStatementParser.DECIMAL, 0); }
		public TerminalNode EXISTS() { return getToken(DMLStatementParser.EXISTS, 0); }
		public TerminalNode EXTRACT() { return getToken(DMLStatementParser.EXTRACT, 0); }
		public TerminalNode FLOAT() { return getToken(DMLStatementParser.FLOAT, 0); }
		public TerminalNode GREATEST() { return getToken(DMLStatementParser.GREATEST, 0); }
		public TerminalNode GROUPING() { return getToken(DMLStatementParser.GROUPING, 0); }
		public TerminalNode INOUT() { return getToken(DMLStatementParser.INOUT, 0); }
		public TerminalNode INT() { return getToken(DMLStatementParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(DMLStatementParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(DMLStatementParser.INTERVAL, 0); }
		public TerminalNode LEAST() { return getToken(DMLStatementParser.LEAST, 0); }
		public TerminalNode NATIONAL() { return getToken(DMLStatementParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(DMLStatementParser.NCHAR, 0); }
		public TerminalNode NONE() { return getToken(DMLStatementParser.NONE, 0); }
		public TerminalNode NULLIF() { return getToken(DMLStatementParser.NULLIF, 0); }
		public TerminalNode NUMERIC() { return getToken(DMLStatementParser.NUMERIC, 0); }
		public TerminalNode OUT() { return getToken(DMLStatementParser.OUT, 0); }
		public TerminalNode OVERLAY() { return getToken(DMLStatementParser.OVERLAY, 0); }
		public TerminalNode POSITION() { return getToken(DMLStatementParser.POSITION, 0); }
		public TerminalNode PRECISION() { return getToken(DMLStatementParser.PRECISION, 0); }
		public TerminalNode REAL() { return getToken(DMLStatementParser.REAL, 0); }
		public TerminalNode ROW() { return getToken(DMLStatementParser.ROW, 0); }
		public TerminalNode SETOF() { return getToken(DMLStatementParser.SETOF, 0); }
		public TerminalNode SMALLINT() { return getToken(DMLStatementParser.SMALLINT, 0); }
		public TerminalNode SUBSTRING() { return getToken(DMLStatementParser.SUBSTRING, 0); }
		public TerminalNode TIME() { return getToken(DMLStatementParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DMLStatementParser.TIMESTAMP, 0); }
		public TerminalNode TREAT() { return getToken(DMLStatementParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(DMLStatementParser.TRIM, 0); }
		public TerminalNode VALUES() { return getToken(DMLStatementParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(DMLStatementParser.VARCHAR, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(DMLStatementParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCONCAT() { return getToken(DMLStatementParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(DMLStatementParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(DMLStatementParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(DMLStatementParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(DMLStatementParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(DMLStatementParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(DMLStatementParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(DMLStatementParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(DMLStatementParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(DMLStatementParser.XMLTABLE, 0); }
		public ColNameKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colNameKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterColNameKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitColNameKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitColNameKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColNameKeywordContext colNameKeyword() throws RecognitionException {
		ColNameKeywordContext _localctx = new ColNameKeywordContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_colNameKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3659);
			_la = _input.LA(1);
			if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (POSITION - 70)) | (1L << (PRECISION - 70)) | (1L << (VALUES - 70)) | (1L << (TRIM - 70)) | (1L << (SUBSTRING - 70)) | (1L << (EXISTS - 70)) | (1L << (BETWEEN - 70)) | (1L << (BOOLEAN - 70)) | (1L << (CHAR - 70)) | (1L << (CHARACTER - 70)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (INTERVAL - 134)) | (1L << (TIME - 134)) | (1L << (TIMESTAMP - 134)) | (1L << (INTEGER - 134)) | (1L << (REAL - 134)) | (1L << (DECIMAL - 134)) | (1L << (SMALLINT - 134)) | (1L << (BIGINT - 134)) | (1L << (NUMERIC - 134)) | (1L << (NULLIF - 134)) | (1L << (NATIONAL - 134)) | (1L << (NCHAR - 134)) | (1L << (COALESCE - 134)) | (1L << (GROUPING - 134)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (DEC - 201)) | (1L << (ROW - 201)) | (1L << (EXTRACT - 201)))) != 0) || ((((_la - 315)) & ~0x3f) == 0 && ((1L << (_la - 315)) & ((1L << (INT - 315)) | (1L << (FLOAT - 315)) | (1L << (VARCHAR - 315)) | (1L << (BIT - 315)) | (1L << (OVERLAY - 315)) | (1L << (XMLCONCAT - 315)) | (1L << (XMLELEMENT - 315)) | (1L << (XMLEXISTS - 315)) | (1L << (XMLFOREST - 315)) | (1L << (XMLPARSE - 315)) | (1L << (XMLPI - 315)) | (1L << (XMLROOT - 315)) | (1L << (XMLSERIALIZE - 315)) | (1L << (TREAT - 315)) | (1L << (SETOF - 315)) | (1L << (XMLATTRIBUTES - 315)))) != 0) || ((((_la - 379)) & ~0x3f) == 0 && ((1L << (_la - 379)) & ((1L << (GREATEST - 379)) | (1L << (LEAST - 379)) | (1L << (XMLTABLE - 379)) | (1L << (XMLNAMESPACES - 379)) | (1L << (NONE - 379)))) != 0) || _la==OUT || _la==INOUT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatabaseNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public DatabaseNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterDatabaseName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitDatabaseName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitDatabaseName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseNameContext databaseName() throws RecognitionException {
		DatabaseNameContext _localctx = new DatabaseNameContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_databaseName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3661);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleSpecContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(DMLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(DMLStatementParser.SESSION_USER, 0); }
		public RoleSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterRoleSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitRoleSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitRoleSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleSpecContext roleSpec() throws RecognitionException {
		RoleSpecContext _localctx = new RoleSpecContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_roleSpec);
		try {
			setState(3667);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3663);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3664);
				nonReservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3665);
				match(CURRENT_USER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3666);
				match(SESSION_USER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DMLStatementParser.DOT_, 0); }
		public VarNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterVarName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitVarName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitVarName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarNameContext varName() throws RecognitionException {
		return varName(0);
	}

	private VarNameContext varName(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		VarNameContext _localctx = new VarNameContext(_ctx, _parentState);
		VarNameContext _prevctx = _localctx;
		int _startState = 512;
		enterRecursionRule(_localctx, 512, RULE_varName, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(3670);
			colId();
			}
			_ctx.stop = _input.LT(-1);
			setState(3677);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,327,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new VarNameContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_varName);
					setState(3672);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(3673);
					match(DOT_);
					setState(3674);
					colId();
					}
					} 
				}
				setState(3679);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,327,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class VarListContext extends ParserRuleContext {
		public List<VarValueContext> varValue() {
			return getRuleContexts(VarValueContext.class);
		}
		public VarValueContext varValue(int i) {
			return getRuleContext(VarValueContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public VarListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterVarList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitVarList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitVarList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarListContext varList() throws RecognitionException {
		VarListContext _localctx = new VarListContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_varList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3680);
			varValue();
			setState(3685);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3681);
				match(COMMA_);
				setState(3682);
				varValue();
				}
				}
				setState(3687);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarValueContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public VarValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterVarValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitVarValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitVarValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarValueContext varValue() throws RecognitionException {
		VarValueContext _localctx = new VarValueContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_varValue);
		try {
			setState(3690);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3688);
				booleanOrString();
				}
				break;
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(3689);
				numericOnly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ZoneValueContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DMLStatementParser.STRING_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode INTERVAL() { return getToken(DMLStatementParser.INTERVAL, 0); }
		public OptIntervalContext optInterval() {
			return getRuleContext(OptIntervalContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DMLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DMLStatementParser.DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(DMLStatementParser.LOCAL, 0); }
		public ZoneValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zoneValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterZoneValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitZoneValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitZoneValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ZoneValueContext zoneValue() throws RecognitionException {
		ZoneValueContext _localctx = new ZoneValueContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_zoneValue);
		try {
			setState(3705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3692);
				match(STRING_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3693);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3694);
				match(INTERVAL);
				setState(3695);
				match(STRING_);
				setState(3696);
				optInterval();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3697);
				match(INTERVAL);
				setState(3698);
				match(LP_);
				setState(3699);
				match(NUMBER_);
				setState(3700);
				match(RP_);
				setState(3701);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3702);
				numericOnly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3703);
				match(DEFAULT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3704);
				match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericOnlyContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DMLStatementParser.NUMBER_, 0); }
		public TerminalNode PLUS_() { return getToken(DMLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(DMLStatementParser.MINUS_, 0); }
		public NumericOnlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericOnly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterNumericOnly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitNumericOnly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitNumericOnly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericOnlyContext numericOnly() throws RecognitionException {
		NumericOnlyContext _localctx = new NumericOnlyContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_numericOnly);
		try {
			setState(3712);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3707);
				match(NUMBER_);
				}
				break;
			case PLUS_:
				enterOuterAlt(_localctx, 2);
				{
				setState(3708);
				match(PLUS_);
				setState(3709);
				match(NUMBER_);
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 3);
				{
				setState(3710);
				match(MINUS_);
				setState(3711);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsoLevelContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(DMLStatementParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(DMLStatementParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(DMLStatementParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(DMLStatementParser.REPEATABLE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(DMLStatementParser.SERIALIZABLE, 0); }
		public IsoLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isoLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterIsoLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitIsoLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitIsoLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsoLevelContext isoLevel() throws RecognitionException {
		IsoLevelContext _localctx = new IsoLevelContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_isoLevel);
		try {
			setState(3721);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3714);
				match(READ);
				setState(3715);
				match(UNCOMMITTED);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3716);
				match(READ);
				setState(3717);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3718);
				match(REPEATABLE);
				setState(3719);
				match(READ);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3720);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterColumnDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitColumnDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefContext columnDef() throws RecognitionException {
		ColumnDefContext _localctx = new ColumnDefContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_columnDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3723);
			colId();
			setState(3724);
			typeName();
			setState(3726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(3725);
				createGenericOptions();
				}
			}

			setState(3728);
			colQualList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColQualListContext extends ParserRuleContext {
		public List<ColConstraintContext> colConstraint() {
			return getRuleContexts(ColConstraintContext.class);
		}
		public ColConstraintContext colConstraint(int i) {
			return getRuleContext(ColConstraintContext.class,i);
		}
		public ColQualListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colQualList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterColQualList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitColQualList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitColQualList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColQualListContext colQualList() throws RecognitionException {
		ColQualListContext _localctx = new ColQualListContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_colQualList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONSTRAINT - 65)) | (1L << (PRIMARY - 65)) | (1L << (UNIQUE - 65)) | (1L << (NOT - 65)) | (1L << (NULL - 65)))) != 0) || _la==DEFAULT || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (CHECK - 214)) | (1L << (GENERATED - 214)) | (1L << (REFERENCES - 214)) | (1L << (COLLATE - 214)) | (1L << (DEFERRABLE - 214)) | (1L << (INITIALLY - 214)))) != 0)) {
				{
				{
				setState(3730);
				colConstraint();
				}
				}
				setState(3735);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColConstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(DMLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ColConstraintElemContext colConstraintElem() {
			return getRuleContext(ColConstraintElemContext.class,0);
		}
		public ConstraintAttrContext constraintAttr() {
			return getRuleContext(ConstraintAttrContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(DMLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public ColConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterColConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitColConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitColConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintContext colConstraint() throws RecognitionException {
		ColConstraintContext _localctx = new ColConstraintContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_colConstraint);
		try {
			setState(3744);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3736);
				match(CONSTRAINT);
				setState(3737);
				name();
				setState(3738);
				colConstraintElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3740);
				colConstraintElem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3741);
				constraintAttr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3742);
				match(COLLATE);
				setState(3743);
				anyName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttrContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(DMLStatementParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(DMLStatementParser.NOT, 0); }
		public TerminalNode INITIALLY() { return getToken(DMLStatementParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(DMLStatementParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(DMLStatementParser.IMMEDIATE, 0); }
		public ConstraintAttrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterConstraintAttr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitConstraintAttr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitConstraintAttr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttrContext constraintAttr() throws RecognitionException {
		ConstraintAttrContext _localctx = new ConstraintAttrContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_constraintAttr);
		try {
			setState(3753);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3746);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3747);
				match(NOT);
				setState(3748);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3749);
				match(INITIALLY);
				setState(3750);
				match(DEFERRED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3751);
				match(INITIALLY);
				setState(3752);
				match(IMMEDIATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColConstraintElemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(DMLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DMLStatementParser.NULL, 0); }
		public TerminalNode UNIQUE() { return getToken(DMLStatementParser.UNIQUE, 0); }
		public ConsTableSpaceContext consTableSpace() {
			return getRuleContext(ConsTableSpaceContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DMLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(DMLStatementParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(DMLStatementParser.KEY, 0); }
		public TerminalNode CHECK() { return getToken(DMLStatementParser.CHECK, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public NoInheritContext noInherit() {
			return getRuleContext(NoInheritContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DMLStatementParser.DEFAULT, 0); }
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(DMLStatementParser.GENERATED, 0); }
		public GeneratedWhenContext generatedWhen() {
			return getRuleContext(GeneratedWhenContext.class,0);
		}
		public TerminalNode AS() { return getToken(DMLStatementParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(DMLStatementParser.IDENTITY, 0); }
		public ParenthesizedSeqOptListContext parenthesizedSeqOptList() {
			return getRuleContext(ParenthesizedSeqOptListContext.class,0);
		}
		public TerminalNode STORED() { return getToken(DMLStatementParser.STORED, 0); }
		public TerminalNode REFERENCES() { return getToken(DMLStatementParser.REFERENCES, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public OptColumnListContext optColumnList() {
			return getRuleContext(OptColumnListContext.class,0);
		}
		public KeyMatchContext keyMatch() {
			return getRuleContext(KeyMatchContext.class,0);
		}
		public KeyActionsContext keyActions() {
			return getRuleContext(KeyActionsContext.class,0);
		}
		public ColConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraintElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterColConstraintElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitColConstraintElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitColConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintElemContext colConstraintElem() throws RecognitionException {
		ColConstraintElemContext _localctx = new ColConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_colConstraintElem);
		int _la;
		try {
			setState(3806);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3755);
				match(NOT);
				setState(3756);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3757);
				match(NULL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3758);
				match(UNIQUE);
				setState(3761);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3759);
					match(WITH);
					setState(3760);
					definition();
					}
				}

				setState(3763);
				consTableSpace();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3764);
				match(PRIMARY);
				setState(3765);
				match(KEY);
				setState(3768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3766);
					match(WITH);
					setState(3767);
					definition();
					}
				}

				setState(3770);
				consTableSpace();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3771);
				match(CHECK);
				setState(3772);
				match(LP_);
				setState(3773);
				aExpr(0);
				setState(3774);
				match(RP_);
				setState(3776);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3775);
					noInherit();
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3778);
				match(DEFAULT);
				setState(3779);
				bExpr(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3780);
				match(GENERATED);
				setState(3781);
				generatedWhen();
				setState(3782);
				match(AS);
				setState(3783);
				match(IDENTITY);
				setState(3785);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(3784);
					parenthesizedSeqOptList();
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3787);
				match(GENERATED);
				setState(3788);
				generatedWhen();
				setState(3789);
				match(AS);
				setState(3790);
				match(LP_);
				setState(3791);
				aExpr(0);
				setState(3792);
				match(RP_);
				setState(3793);
				match(STORED);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3795);
				match(REFERENCES);
				setState(3796);
				qualifiedName();
				setState(3798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(3797);
					optColumnList();
					}
				}

				setState(3801);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATCH) {
					{
					setState(3800);
					keyMatch();
					}
				}

				setState(3804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(3803);
					keyActions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParenthesizedSeqOptListContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public ParenthesizedSeqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesizedSeqOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterParenthesizedSeqOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitParenthesizedSeqOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitParenthesizedSeqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParenthesizedSeqOptListContext parenthesizedSeqOptList() throws RecognitionException {
		ParenthesizedSeqOptListContext _localctx = new ParenthesizedSeqOptListContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_parenthesizedSeqOptList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3808);
			match(LP_);
			setState(3809);
			seqOptList();
			setState(3810);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqOptListContext extends ParserRuleContext {
		public List<SeqOptElemContext> seqOptElem() {
			return getRuleContexts(SeqOptElemContext.class);
		}
		public SeqOptElemContext seqOptElem(int i) {
			return getRuleContext(SeqOptElemContext.class,i);
		}
		public SeqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSeqOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSeqOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSeqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptListContext seqOptList() throws RecognitionException {
		SeqOptListContext _localctx = new SeqOptListContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_seqOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3813); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3812);
				seqOptElem();
				}
				}
				setState(3815); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AS || ((((_la - 218)) & ~0x3f) == 0 && ((1L << (_la - 218)) & ((1L << (NO - 218)) | (1L << (START - 218)) | (1L << (CACHE - 218)) | (1L << (CYCLE - 218)) | (1L << (INCREMENT - 218)) | (1L << (MAXVALUE - 218)) | (1L << (MINVALUE - 218)) | (1L << (OWNED - 218)))) != 0) || _la==RESTART || _la==SEQUENCE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqOptElemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DMLStatementParser.AS, 0); }
		public SimpleTypeNameContext simpleTypeName() {
			return getRuleContext(SimpleTypeNameContext.class,0);
		}
		public TerminalNode CACHE() { return getToken(DMLStatementParser.CACHE, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode CYCLE() { return getToken(DMLStatementParser.CYCLE, 0); }
		public TerminalNode NO() { return getToken(DMLStatementParser.NO, 0); }
		public TerminalNode INCREMENT() { return getToken(DMLStatementParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(DMLStatementParser.BY, 0); }
		public TerminalNode MAXVALUE() { return getToken(DMLStatementParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(DMLStatementParser.MINVALUE, 0); }
		public TerminalNode OWNED() { return getToken(DMLStatementParser.OWNED, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(DMLStatementParser.SEQUENCE, 0); }
		public TerminalNode NAME() { return getToken(DMLStatementParser.NAME, 0); }
		public TerminalNode START() { return getToken(DMLStatementParser.START, 0); }
		public TerminalNode WITH() { return getToken(DMLStatementParser.WITH, 0); }
		public TerminalNode RESTART() { return getToken(DMLStatementParser.RESTART, 0); }
		public SeqOptElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSeqOptElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSeqOptElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSeqOptElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptElemContext seqOptElem() throws RecognitionException {
		SeqOptElemContext _localctx = new SeqOptElemContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_seqOptElem);
		int _la;
		try {
			setState(3854);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3817);
				match(AS);
				setState(3818);
				simpleTypeName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3819);
				match(CACHE);
				setState(3820);
				numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3821);
				match(CYCLE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3822);
				match(NO);
				setState(3823);
				match(CYCLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3824);
				match(INCREMENT);
				setState(3826);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(3825);
					match(BY);
					}
				}

				setState(3828);
				numericOnly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3829);
				match(MAXVALUE);
				setState(3830);
				numericOnly();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3831);
				match(MINVALUE);
				setState(3832);
				numericOnly();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3833);
				match(NO);
				setState(3834);
				match(MAXVALUE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3835);
				match(NO);
				setState(3836);
				match(MINVALUE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3837);
				match(OWNED);
				setState(3838);
				match(BY);
				setState(3839);
				anyName();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3840);
				match(SEQUENCE);
				setState(3841);
				match(NAME);
				setState(3842);
				anyName();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3843);
				match(START);
				setState(3845);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3844);
					match(WITH);
					}
				}

				setState(3847);
				numericOnly();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3848);
				match(RESTART);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3849);
				match(RESTART);
				setState(3851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3850);
					match(WITH);
					}
				}

				setState(3853);
				numericOnly();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptColumnListContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public OptColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOptColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOptColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOptColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptColumnListContext optColumnList() throws RecognitionException {
		OptColumnListContext _localctx = new OptColumnListContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_optColumnList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3856);
			match(LP_);
			setState(3857);
			columnList();
			setState(3858);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterColumnElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitColumnElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitColumnElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnElemContext columnElem() throws RecognitionException {
		ColumnElemContext _localctx = new ColumnElemContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_columnElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3860);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnListContext extends ParserRuleContext {
		public List<ColumnElemContext> columnElem() {
			return getRuleContexts(ColumnElemContext.class);
		}
		public ColumnElemContext columnElem(int i) {
			return getRuleContext(ColumnElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public ColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnListContext columnList() throws RecognitionException {
		ColumnListContext _localctx = new ColumnListContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_columnList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3862);
			columnElem();
			setState(3867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3863);
				match(COMMA_);
				setState(3864);
				columnElem();
				}
				}
				setState(3869);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GeneratedWhenContext extends ParserRuleContext {
		public TerminalNode ALWAYS() { return getToken(DMLStatementParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(DMLStatementParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(DMLStatementParser.DEFAULT, 0); }
		public GeneratedWhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generatedWhen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterGeneratedWhen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitGeneratedWhen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitGeneratedWhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeneratedWhenContext generatedWhen() throws RecognitionException {
		GeneratedWhenContext _localctx = new GeneratedWhenContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_generatedWhen);
		try {
			setState(3873);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALWAYS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3870);
				match(ALWAYS);
				}
				break;
			case BY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3871);
				match(BY);
				setState(3872);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NoInheritContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DMLStatementParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(DMLStatementParser.INHERIT, 0); }
		public NoInheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_noInherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterNoInherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitNoInherit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitNoInherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NoInheritContext noInherit() throws RecognitionException {
		NoInheritContext _localctx = new NoInheritContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_noInherit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3875);
			match(NO);
			setState(3876);
			match(INHERIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConsTableSpaceContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DMLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(DMLStatementParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(DMLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConsTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_consTableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterConsTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitConsTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitConsTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConsTableSpaceContext consTableSpace() throws RecognitionException {
		ConsTableSpaceContext _localctx = new ConsTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_consTableSpace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3878);
			match(USING);
			setState(3879);
			match(INDEX);
			setState(3880);
			match(TABLESPACE);
			setState(3881);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinitionContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public DefListContext defList() {
			return getRuleContext(DefListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinitionContext definition() throws RecognitionException {
		DefinitionContext _localctx = new DefinitionContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3883);
			match(LP_);
			setState(3884);
			defList();
			setState(3885);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefListContext extends ParserRuleContext {
		public List<DefElemContext> defElem() {
			return getRuleContexts(DefElemContext.class);
		}
		public DefElemContext defElem(int i) {
			return getRuleContext(DefElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public DefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterDefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitDefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitDefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefListContext defList() throws RecognitionException {
		DefListContext _localctx = new DefListContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_defList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3887);
			defElem();
			setState(3892);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3888);
				match(COMMA_);
				setState(3889);
				defElem();
				}
				}
				setState(3894);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefElemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DMLStatementParser.EQ_, 0); }
		public DefArgContext defArg() {
			return getRuleContext(DefArgContext.class,0);
		}
		public DefElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterDefElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitDefElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitDefElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefElemContext defElem() throws RecognitionException {
		DefElemContext _localctx = new DefElemContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_defElem);
		try {
			setState(3900);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(3895);
				colLabel();
				setState(3896);
				match(EQ_);
				setState(3897);
				defArg();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3899);
				colLabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColLabelContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public ColLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterColLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitColLabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitColLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColLabelContext colLabel() throws RecognitionException {
		ColLabelContext _localctx = new ColLabelContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_colLabel);
		try {
			setState(3907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3902);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3903);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3904);
				colNameKeyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3905);
				typeFuncNameKeyword();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3906);
				reservedKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyActionsContext extends ParserRuleContext {
		public KeyUpdateContext keyUpdate() {
			return getRuleContext(KeyUpdateContext.class,0);
		}
		public KeyDeleteContext keyDelete() {
			return getRuleContext(KeyDeleteContext.class,0);
		}
		public KeyActionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyActions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterKeyActions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitKeyActions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitKeyActions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyActionsContext keyActions() throws RecognitionException {
		KeyActionsContext _localctx = new KeyActionsContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_keyActions);
		try {
			setState(3917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3909);
				keyUpdate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3910);
				keyDelete();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3911);
				keyUpdate();
				setState(3912);
				keyDelete();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3914);
				keyDelete();
				setState(3915);
				keyUpdate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyDeleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DMLStatementParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(DMLStatementParser.DELETE, 0); }
		public KeyActionContext keyAction() {
			return getRuleContext(KeyActionContext.class,0);
		}
		public KeyDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyDelete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterKeyDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitKeyDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitKeyDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyDeleteContext keyDelete() throws RecognitionException {
		KeyDeleteContext _localctx = new KeyDeleteContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_keyDelete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3919);
			match(ON);
			setState(3920);
			match(DELETE);
			setState(3921);
			keyAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyUpdateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DMLStatementParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(DMLStatementParser.UPDATE, 0); }
		public KeyActionContext keyAction() {
			return getRuleContext(KeyActionContext.class,0);
		}
		public KeyUpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyUpdate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterKeyUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitKeyUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitKeyUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyUpdateContext keyUpdate() throws RecognitionException {
		KeyUpdateContext _localctx = new KeyUpdateContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_keyUpdate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3923);
			match(ON);
			setState(3924);
			match(UPDATE);
			setState(3925);
			keyAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyActionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DMLStatementParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(DMLStatementParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(DMLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(DMLStatementParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(DMLStatementParser.SET, 0); }
		public TerminalNode NULL() { return getToken(DMLStatementParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(DMLStatementParser.DEFAULT, 0); }
		public KeyActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterKeyAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitKeyAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitKeyAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyActionContext keyAction() throws RecognitionException {
		KeyActionContext _localctx = new KeyActionContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_keyAction);
		try {
			setState(3935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3927);
				match(NO);
				setState(3928);
				match(ACTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3929);
				match(RESTRICT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3930);
				match(CASCADE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3931);
				match(SET);
				setState(3932);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3933);
				match(SET);
				setState(3934);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyMatchContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(DMLStatementParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(DMLStatementParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(DMLStatementParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(DMLStatementParser.SIMPLE, 0); }
		public KeyMatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyMatch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterKeyMatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitKeyMatch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitKeyMatch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyMatchContext keyMatch() throws RecognitionException {
		KeyMatchContext _localctx = new KeyMatchContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_keyMatch);
		try {
			setState(3943);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3937);
				match(MATCH);
				setState(3938);
				match(FULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3939);
				match(MATCH);
				setState(3940);
				match(PARTIAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3941);
				match(MATCH);
				setState(3942);
				match(SIMPLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateGenericOptionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(DMLStatementParser.OPTIONS, 0); }
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public GenericOptionListContext genericOptionList() {
			return getRuleContext(GenericOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public CreateGenericOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGenericOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCreateGenericOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCreateGenericOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCreateGenericOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateGenericOptionsContext createGenericOptions() throws RecognitionException {
		CreateGenericOptionsContext _localctx = new CreateGenericOptionsContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_createGenericOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3945);
			match(OPTIONS);
			setState(3946);
			match(LP_);
			setState(3947);
			genericOptionList();
			setState(3948);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericOptionListContext extends ParserRuleContext {
		public List<GenericOptionElemContext> genericOptionElem() {
			return getRuleContexts(GenericOptionElemContext.class);
		}
		public GenericOptionElemContext genericOptionElem(int i) {
			return getRuleContext(GenericOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public GenericOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterGenericOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitGenericOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitGenericOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionListContext genericOptionList() throws RecognitionException {
		GenericOptionListContext _localctx = new GenericOptionListContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_genericOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3950);
			genericOptionElem();
			setState(3955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3951);
				match(COMMA_);
				setState(3952);
				genericOptionElem();
				}
				}
				setState(3957);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericOptionElemContext extends ParserRuleContext {
		public GenericOptionNameContext genericOptionName() {
			return getRuleContext(GenericOptionNameContext.class,0);
		}
		public GenericOptionArgContext genericOptionArg() {
			return getRuleContext(GenericOptionArgContext.class,0);
		}
		public GenericOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterGenericOptionElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitGenericOptionElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitGenericOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionElemContext genericOptionElem() throws RecognitionException {
		GenericOptionElemContext _localctx = new GenericOptionElemContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_genericOptionElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3958);
			genericOptionName();
			setState(3959);
			genericOptionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericOptionArgContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DMLStatementParser.STRING_, 0); }
		public GenericOptionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterGenericOptionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitGenericOptionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitGenericOptionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionArgContext genericOptionArg() throws RecognitionException {
		GenericOptionArgContext _localctx = new GenericOptionArgContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_genericOptionArg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3961);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericOptionNameContext extends ParserRuleContext {
		public ColLableContext colLable() {
			return getRuleContext(ColLableContext.class,0);
		}
		public GenericOptionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterGenericOptionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitGenericOptionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitGenericOptionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionNameContext genericOptionName() throws RecognitionException {
		GenericOptionNameContext _localctx = new GenericOptionNameContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_genericOptionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3963);
			colLable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicaIdentityContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(DMLStatementParser.NOTHING, 0); }
		public TerminalNode FULL() { return getToken(DMLStatementParser.FULL, 0); }
		public TerminalNode DEFAULT() { return getToken(DMLStatementParser.DEFAULT, 0); }
		public TerminalNode USING() { return getToken(DMLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(DMLStatementParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ReplicaIdentityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicaIdentity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterReplicaIdentity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitReplicaIdentity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitReplicaIdentity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicaIdentityContext replicaIdentity() throws RecognitionException {
		ReplicaIdentityContext _localctx = new ReplicaIdentityContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_replicaIdentity);
		try {
			setState(3971);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOTHING:
				enterOuterAlt(_localctx, 1);
				{
				setState(3965);
				match(NOTHING);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3966);
				match(FULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3967);
				match(DEFAULT);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 4);
				{
				setState(3968);
				match(USING);
				setState(3969);
				match(INDEX);
				setState(3970);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperArgtypesContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DMLStatementParser.LP_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DMLStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(DMLStatementParser.COMMA_, 0); }
		public TerminalNode NONE() { return getToken(DMLStatementParser.NONE, 0); }
		public OperArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operArgtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterOperArgtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitOperArgtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitOperArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperArgtypesContext operArgtypes() throws RecognitionException {
		OperArgtypesContext _localctx = new OperArgtypesContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_operArgtypes);
		try {
			setState(3995);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3973);
				match(LP_);
				setState(3974);
				typeName();
				setState(3975);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3977);
				match(LP_);
				setState(3978);
				typeName();
				setState(3979);
				match(COMMA_);
				setState(3980);
				typeName();
				setState(3981);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3983);
				match(LP_);
				setState(3984);
				match(NONE);
				setState(3985);
				match(COMMA_);
				setState(3986);
				typeName();
				setState(3987);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3989);
				match(LP_);
				setState(3990);
				typeName();
				setState(3991);
				match(COMMA_);
				setState(3992);
				match(NONE);
				setState(3993);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgContext extends ParserRuleContext {
		public ArgClassContext argClass() {
			return getRuleContext(ArgClassContext.class,0);
		}
		public ParamNameContext paramName() {
			return getRuleContext(ParamNameContext.class,0);
		}
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public FuncArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFuncArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFuncArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFuncArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgContext funcArg() throws RecognitionException {
		FuncArgContext _localctx = new FuncArgContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_funcArg);
		try {
			setState(4012);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3997);
				argClass();
				setState(3998);
				paramName();
				setState(3999);
				funcType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4001);
				paramName();
				setState(4002);
				argClass();
				setState(4003);
				funcType();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4005);
				paramName();
				setState(4006);
				funcType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4008);
				argClass();
				setState(4009);
				funcType();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4011);
				funcType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgClassContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(DMLStatementParser.IN, 0); }
		public TerminalNode OUT() { return getToken(DMLStatementParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(DMLStatementParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(DMLStatementParser.VARIADIC, 0); }
		public ArgClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterArgClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitArgClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitArgClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgClassContext argClass() throws RecognitionException {
		ArgClassContext _localctx = new ArgClassContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_argClass);
		try {
			setState(4020);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4014);
				match(IN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4015);
				match(OUT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4016);
				match(INOUT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4017);
				match(IN);
				setState(4018);
				match(OUT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4019);
				match(VARIADIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgsListContext extends ParserRuleContext {
		public List<FuncArgContext> funcArg() {
			return getRuleContexts(FuncArgContext.class);
		}
		public FuncArgContext funcArg(int i) {
			return getRuleContext(FuncArgContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public FuncArgsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFuncArgsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFuncArgsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFuncArgsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsListContext funcArgsList() throws RecognitionException {
		FuncArgsListContext _localctx = new FuncArgsListContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_funcArgsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4022);
			funcArg();
			setState(4027);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4023);
				match(COMMA_);
				setState(4024);
				funcArg();
				}
				}
				setState(4029);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonReservedWordOrSconstContext extends ParserRuleContext {
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(DMLStatementParser.STRING_, 0); }
		public NonReservedWordOrSconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReservedWordOrSconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterNonReservedWordOrSconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitNonReservedWordOrSconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitNonReservedWordOrSconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedWordOrSconstContext nonReservedWordOrSconst() throws RecognitionException {
		NonReservedWordOrSconstContext _localctx = new NonReservedWordOrSconstContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_nonReservedWordOrSconst);
		try {
			setState(4032);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4030);
				nonReservedWord();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4031);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DMLStatementParser.STRING_, 0); }
		public FileNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFileName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFileName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFileName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileNameContext fileName() throws RecognitionException {
		FileNameContext _localctx = new FileNameContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_fileName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4034);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleListContext extends ParserRuleContext {
		public List<RoleSpecContext> roleSpec() {
			return getRuleContexts(RoleSpecContext.class);
		}
		public RoleSpecContext roleSpec(int i) {
			return getRuleContext(RoleSpecContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public RoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterRoleList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitRoleList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleListContext roleList() throws RecognitionException {
		RoleListContext _localctx = new RoleListContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_roleList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4036);
			roleSpec();
			setState(4041);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4037);
				match(COMMA_);
				setState(4038);
				roleSpec();
				}
				}
				setState(4043);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DMLStatementParser.SET, 0); }
		public SetRestContext setRest() {
			return getRuleContext(SetRestContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public SetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSetResetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSetResetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetResetClauseContext setResetClause() throws RecognitionException {
		SetResetClauseContext _localctx = new SetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_setResetClause);
		try {
			setState(4047);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(4044);
				match(SET);
				setState(4045);
				setRest();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(4046);
				variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRestContext extends ParserRuleContext {
		public TerminalNode TRANSACTION() { return getToken(DMLStatementParser.TRANSACTION, 0); }
		public TransactionModeListContext transactionModeList() {
			return getRuleContext(TransactionModeListContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(DMLStatementParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(DMLStatementParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(DMLStatementParser.AS, 0); }
		public SetRestMoreContext setRestMore() {
			return getRuleContext(SetRestMoreContext.class,0);
		}
		public SetRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSetRest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSetRest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSetRest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRestContext setRest() throws RecognitionException {
		SetRestContext _localctx = new SetRestContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_setRest);
		try {
			setState(4057);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4049);
				match(TRANSACTION);
				setState(4050);
				transactionModeList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4051);
				match(SESSION);
				setState(4052);
				match(CHARACTERISTICS);
				setState(4053);
				match(AS);
				setState(4054);
				match(TRANSACTION);
				setState(4055);
				transactionModeList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4056);
				setRestMore();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeListContext extends ParserRuleContext {
		public List<TransactionModeItemContext> transactionModeItem() {
			return getRuleContexts(TransactionModeItemContext.class);
		}
		public TransactionModeItemContext transactionModeItem(int i) {
			return getRuleContext(TransactionModeItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public TransactionModeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionModeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTransactionModeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTransactionModeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTransactionModeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeListContext transactionModeList() throws RecognitionException {
		TransactionModeListContext _localctx = new TransactionModeListContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_transactionModeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4059);
			transactionModeItem();
			setState(4066);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_ || _la==NOT || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (ISOLATION - 216)) | (1L << (READ - 216)) | (1L << (DEFERRABLE - 216)))) != 0)) {
				{
				{
				setState(4061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(4060);
					match(COMMA_);
					}
				}

				setState(4063);
				transactionModeItem();
				}
				}
				setState(4068);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeItemContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(DMLStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(DMLStatementParser.LEVEL, 0); }
		public IsoLevelContext isoLevel() {
			return getRuleContext(IsoLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(DMLStatementParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(DMLStatementParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(DMLStatementParser.WRITE, 0); }
		public TerminalNode DEFERRABLE() { return getToken(DMLStatementParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(DMLStatementParser.NOT, 0); }
		public TransactionModeItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionModeItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTransactionModeItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTransactionModeItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTransactionModeItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeItemContext transactionModeItem() throws RecognitionException {
		TransactionModeItemContext _localctx = new TransactionModeItemContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_transactionModeItem);
		try {
			setState(4079);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4069);
				match(ISOLATION);
				setState(4070);
				match(LEVEL);
				setState(4071);
				isoLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4072);
				match(READ);
				setState(4073);
				match(ONLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4074);
				match(READ);
				setState(4075);
				match(WRITE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4076);
				match(DEFERRABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4077);
				match(NOT);
				setState(4078);
				match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRestMoreContext extends ParserRuleContext {
		public GenericSetContext genericSet() {
			return getRuleContext(GenericSetContext.class,0);
		}
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DMLStatementParser.FROM, 0); }
		public TerminalNode CURRENT() { return getToken(DMLStatementParser.CURRENT, 0); }
		public TerminalNode TIME() { return getToken(DMLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(DMLStatementParser.ZONE, 0); }
		public ZoneValueContext zoneValue() {
			return getRuleContext(ZoneValueContext.class,0);
		}
		public TerminalNode CATALOG() { return getToken(DMLStatementParser.CATALOG, 0); }
		public TerminalNode STRING_() { return getToken(DMLStatementParser.STRING_, 0); }
		public TerminalNode SCHEMA() { return getToken(DMLStatementParser.SCHEMA, 0); }
		public TerminalNode NAMES() { return getToken(DMLStatementParser.NAMES, 0); }
		public EncodingContext encoding() {
			return getRuleContext(EncodingContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(DMLStatementParser.ROLE, 0); }
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(DMLStatementParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(DMLStatementParser.AUTHORIZATION, 0); }
		public TerminalNode DEFAULT() { return getToken(DMLStatementParser.DEFAULT, 0); }
		public TerminalNode XML() { return getToken(DMLStatementParser.XML, 0); }
		public TerminalNode OPTION() { return getToken(DMLStatementParser.OPTION, 0); }
		public DocumentOrContentContext documentOrContent() {
			return getRuleContext(DocumentOrContentContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(DMLStatementParser.TRANSACTION, 0); }
		public TerminalNode SNAPSHOT() { return getToken(DMLStatementParser.SNAPSHOT, 0); }
		public SetRestMoreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRestMore; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterSetRestMore(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitSetRestMore(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitSetRestMore(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRestMoreContext setRestMore() throws RecognitionException {
		SetRestMoreContext _localctx = new SetRestMoreContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_setRestMore);
		int _la;
		try {
			setState(4113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4081);
				genericSet();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4082);
				varName(0);
				setState(4083);
				match(FROM);
				setState(4084);
				match(CURRENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4086);
				match(TIME);
				setState(4087);
				match(ZONE);
				setState(4088);
				zoneValue();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4089);
				match(CATALOG);
				setState(4090);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4091);
				match(SCHEMA);
				setState(4092);
				match(STRING_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4093);
				match(NAMES);
				setState(4095);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==STRING_) {
					{
					setState(4094);
					encoding();
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4097);
				match(ROLE);
				setState(4098);
				nonReservedWord();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4099);
				match(STRING_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4100);
				match(SESSION);
				setState(4101);
				match(AUTHORIZATION);
				setState(4102);
				nonReservedWord();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4103);
				match(STRING_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4104);
				match(SESSION);
				setState(4105);
				match(AUTHORIZATION);
				setState(4106);
				match(DEFAULT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4107);
				match(XML);
				setState(4108);
				match(OPTION);
				setState(4109);
				documentOrContent();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4110);
				match(TRANSACTION);
				setState(4111);
				match(SNAPSHOT);
				setState(4112);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EncodingContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DMLStatementParser.STRING_, 0); }
		public TerminalNode DEFAULT() { return getToken(DMLStatementParser.DEFAULT, 0); }
		public EncodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encoding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterEncoding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitEncoding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitEncoding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EncodingContext encoding() throws RecognitionException {
		EncodingContext _localctx = new EncodingContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_encoding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4115);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericSetContext extends ParserRuleContext {
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DMLStatementParser.EQ_, 0); }
		public TerminalNode TO() { return getToken(DMLStatementParser.TO, 0); }
		public VarListContext varList() {
			return getRuleContext(VarListContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DMLStatementParser.DEFAULT, 0); }
		public GenericSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterGenericSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitGenericSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitGenericSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericSetContext genericSet() throws RecognitionException {
		GenericSetContext _localctx = new GenericSetContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_genericSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4117);
			varName(0);
			setState(4118);
			_la = _input.LA(1);
			if ( !(_la==EQ_ || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4121);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case PLUS_:
			case MINUS_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				{
				setState(4119);
				varList();
				}
				break;
			case DEFAULT:
				{
				setState(4120);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableResetStmtContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(DMLStatementParser.RESET, 0); }
		public ResetRestContext resetRest() {
			return getRuleContext(ResetRestContext.class,0);
		}
		public VariableResetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableResetStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterVariableResetStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitVariableResetStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitVariableResetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableResetStmtContext variableResetStmt() throws RecognitionException {
		VariableResetStmtContext _localctx = new VariableResetStmtContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_variableResetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4123);
			match(RESET);
			setState(4124);
			resetRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetRestContext extends ParserRuleContext {
		public GenericResetContext genericReset() {
			return getRuleContext(GenericResetContext.class,0);
		}
		public TerminalNode TIME() { return getToken(DMLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(DMLStatementParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(DMLStatementParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(DMLStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(DMLStatementParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(DMLStatementParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(DMLStatementParser.AUTHORIZATION, 0); }
		public ResetRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetRest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterResetRest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitResetRest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitResetRest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetRestContext resetRest() throws RecognitionException {
		ResetRestContext _localctx = new ResetRestContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_resetRest);
		try {
			setState(4134);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4126);
				genericReset();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4127);
				match(TIME);
				setState(4128);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4129);
				match(TRANSACTION);
				setState(4130);
				match(ISOLATION);
				setState(4131);
				match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4132);
				match(SESSION);
				setState(4133);
				match(AUTHORIZATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericResetContext extends ParserRuleContext {
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DMLStatementParser.ALL, 0); }
		public GenericResetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericReset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterGenericReset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitGenericReset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitGenericReset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericResetContext genericReset() throws RecognitionException {
		GenericResetContext _localctx = new GenericResetContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_genericReset);
		try {
			setState(4138);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__1:
			case T__2:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4136);
				varName(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(4137);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationExprListContext extends ParserRuleContext {
		public List<RelationExprContext> relationExpr() {
			return getRuleContexts(RelationExprContext.class);
		}
		public RelationExprContext relationExpr(int i) {
			return getRuleContext(RelationExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public RelationExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterRelationExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitRelationExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitRelationExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExprListContext relationExprList() throws RecognitionException {
		RelationExprListContext _localctx = new RelationExprListContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_relationExprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4140);
			relationExpr();
			setState(4145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4141);
				match(COMMA_);
				setState(4142);
				relationExpr();
				}
				}
				setState(4147);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonFuncOptItemContext extends ParserRuleContext {
		public TerminalNode CALLED() { return getToken(DMLStatementParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(DMLStatementParser.ON, 0); }
		public List<TerminalNode> NULL() { return getTokens(DMLStatementParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DMLStatementParser.NULL, i);
		}
		public TerminalNode INPUT() { return getToken(DMLStatementParser.INPUT, 0); }
		public TerminalNode RETURNS() { return getToken(DMLStatementParser.RETURNS, 0); }
		public TerminalNode STRICT() { return getToken(DMLStatementParser.STRICT, 0); }
		public TerminalNode IMMUTABLE() { return getToken(DMLStatementParser.IMMUTABLE, 0); }
		public TerminalNode STABLE() { return getToken(DMLStatementParser.STABLE, 0); }
		public TerminalNode VOLATILE() { return getToken(DMLStatementParser.VOLATILE, 0); }
		public TerminalNode EXTERNAL() { return getToken(DMLStatementParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(DMLStatementParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(DMLStatementParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(DMLStatementParser.INVOKER, 0); }
		public TerminalNode LEAKPROOF() { return getToken(DMLStatementParser.LEAKPROOF, 0); }
		public TerminalNode NOT() { return getToken(DMLStatementParser.NOT, 0); }
		public TerminalNode COST() { return getToken(DMLStatementParser.COST, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(DMLStatementParser.ROWS, 0); }
		public TerminalNode SUPPORT() { return getToken(DMLStatementParser.SUPPORT, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public FunctionSetResetClauseContext functionSetResetClause() {
			return getRuleContext(FunctionSetResetClauseContext.class,0);
		}
		public TerminalNode PARALLEL() { return getToken(DMLStatementParser.PARALLEL, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public CommonFuncOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonFuncOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterCommonFuncOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitCommonFuncOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitCommonFuncOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonFuncOptItemContext commonFuncOptItem() throws RecognitionException {
		CommonFuncOptItemContext _localctx = new CommonFuncOptItemContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_commonFuncOptItem);
		try {
			setState(4183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4148);
				match(CALLED);
				setState(4149);
				match(ON);
				setState(4150);
				match(NULL);
				setState(4151);
				match(INPUT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4152);
				match(RETURNS);
				setState(4153);
				match(NULL);
				setState(4154);
				match(ON);
				setState(4155);
				match(NULL);
				setState(4156);
				match(INPUT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4157);
				match(STRICT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4158);
				match(IMMUTABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4159);
				match(STABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4160);
				match(VOLATILE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4161);
				match(EXTERNAL);
				setState(4162);
				match(SECURITY);
				setState(4163);
				match(DEFINER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4164);
				match(EXTERNAL);
				setState(4165);
				match(SECURITY);
				setState(4166);
				match(INVOKER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4167);
				match(SECURITY);
				setState(4168);
				match(DEFINER);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4169);
				match(SECURITY);
				setState(4170);
				match(INVOKER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4171);
				match(LEAKPROOF);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4172);
				match(NOT);
				setState(4173);
				match(LEAKPROOF);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4174);
				match(COST);
				setState(4175);
				numericOnly();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4176);
				match(ROWS);
				setState(4177);
				numericOnly();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4178);
				match(SUPPORT);
				setState(4179);
				anyName();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4180);
				functionSetResetClause();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4181);
				match(PARALLEL);
				setState(4182);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionSetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DMLStatementParser.SET, 0); }
		public SetRestMoreContext setRestMore() {
			return getRuleContext(SetRestMoreContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public FunctionSetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionSetResetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterFunctionSetResetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitFunctionSetResetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitFunctionSetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionSetResetClauseContext functionSetResetClause() throws RecognitionException {
		FunctionSetResetClauseContext _localctx = new FunctionSetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_functionSetResetClause);
		try {
			setState(4188);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(4185);
				match(SET);
				setState(4186);
				setRestMore();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(4187);
				variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowSecurityCmdContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(DMLStatementParser.ALL, 0); }
		public TerminalNode SELECT() { return getToken(DMLStatementParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(DMLStatementParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(DMLStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(DMLStatementParser.DELETE, 0); }
		public RowSecurityCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowSecurityCmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterRowSecurityCmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitRowSecurityCmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitRowSecurityCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowSecurityCmdContext rowSecurityCmd() throws RecognitionException {
		RowSecurityCmdContext _localctx = new RowSecurityCmdContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_rowSecurityCmd);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4190);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SELECT) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE))) != 0) || _la==ALL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(DMLStatementParser.SELECT, 0); }
		public TerminalNode UPDATE() { return getToken(DMLStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(DMLStatementParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(DMLStatementParser.INSERT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventContext event() throws RecognitionException {
		EventContext _localctx = new EventContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4192);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SELECT) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeNameListContext extends ParserRuleContext {
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DMLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DMLStatementParser.COMMA_, i);
		}
		public TypeNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).enterTypeNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DMLStatementListener ) ((DMLStatementListener)listener).exitTypeNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DMLStatementVisitor ) return ((DMLStatementVisitor<? extends T>)visitor).visitTypeNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeNameListContext typeNameList() throws RecognitionException {
		TypeNameListContext _localctx = new TypeNameListContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_typeNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4194);
			typeName();
			setState(4199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4195);
				match(COMMA_);
				setState(4196);
				typeName();
				}
				}
				setState(4201);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4:
			return insertColumnList_sempred((InsertColumnListContext)_localctx, predIndex);
		case 9:
			return setClauseList_sempred((SetClauseListContext)_localctx, predIndex);
		case 12:
			return setTargetList_sempred((SetTargetListContext)_localctx, predIndex);
		case 20:
			return selectClauseN_sempred((SelectClauseNContext)_localctx, predIndex);
		case 25:
			return cteList_sempred((CteListContext)_localctx, predIndex);
		case 31:
			return forLockingItems_sempred((ForLockingItemsContext)_localctx, predIndex);
		case 36:
			return qualifiedNameList_sempred((QualifiedNameListContext)_localctx, predIndex);
		case 39:
			return valuesClause_sempred((ValuesClauseContext)_localctx, predIndex);
		case 47:
			return targetList_sempred((TargetListContext)_localctx, predIndex);
		case 57:
			return windowDefinitionList_sempred((WindowDefinitionListContext)_localctx, predIndex);
		case 68:
			return fromList_sempred((FromListContext)_localctx, predIndex);
		case 69:
			return tableReference_sempred((TableReferenceContext)_localctx, predIndex);
		case 119:
			return aExpr_sempred((AExprContext)_localctx, predIndex);
		case 120:
			return bExpr_sempred((BExprContext)_localctx, predIndex);
		case 122:
			return indirection_sempred((IndirectionContext)_localctx, predIndex);
		case 123:
			return optIndirection_sempred((OptIndirectionContext)_localctx, predIndex);
		case 161:
			return xmlTableColumnOptionList_sempred((XmlTableColumnOptionListContext)_localctx, predIndex);
		case 173:
			return exprList_sempred((ExprListContext)_localctx, predIndex);
		case 186:
			return attrs_sempred((AttrsContext)_localctx, predIndex);
		case 194:
			return optArrayBounds_sempred((OptArrayBoundsContext)_localctx, predIndex);
		case 221:
			return nameList_sempred((NameListContext)_localctx, predIndex);
		case 256:
			return varName_sempred((VarNameContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean insertColumnList_sempred(InsertColumnListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean setClauseList_sempred(SetClauseListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean setTargetList_sempred(SetTargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean selectClauseN_sempred(SelectClauseNContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 3);
		case 4:
			return precpred(_ctx, 2);
		case 5:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean cteList_sempred(CteListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean forLockingItems_sempred(ForLockingItemsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean qualifiedNameList_sempred(QualifiedNameListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean valuesClause_sempred(ValuesClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean targetList_sempred(TargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean windowDefinitionList_sempred(WindowDefinitionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean fromList_sempred(FromListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean tableReference_sempred(TableReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean aExpr_sempred(AExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14:
			return precpred(_ctx, 58);
		case 15:
			return precpred(_ctx, 55);
		case 16:
			return precpred(_ctx, 54);
		case 17:
			return precpred(_ctx, 53);
		case 18:
			return precpred(_ctx, 52);
		case 19:
			return precpred(_ctx, 51);
		case 20:
			return precpred(_ctx, 50);
		case 21:
			return precpred(_ctx, 49);
		case 22:
			return precpred(_ctx, 48);
		case 23:
			return precpred(_ctx, 44);
		case 24:
			return precpred(_ctx, 43);
		case 25:
			return precpred(_ctx, 42);
		case 26:
			return precpred(_ctx, 41);
		case 27:
			return precpred(_ctx, 40);
		case 28:
			return precpred(_ctx, 39);
		case 29:
			return precpred(_ctx, 38);
		case 30:
			return precpred(_ctx, 37);
		case 31:
			return precpred(_ctx, 36);
		case 32:
			return precpred(_ctx, 35);
		case 33:
			return precpred(_ctx, 34);
		case 34:
			return precpred(_ctx, 33);
		case 35:
			return precpred(_ctx, 21);
		case 36:
			return precpred(_ctx, 20);
		case 37:
			return precpred(_ctx, 17);
		case 38:
			return precpred(_ctx, 16);
		case 39:
			return precpred(_ctx, 15);
		case 40:
			return precpred(_ctx, 14);
		case 41:
			return precpred(_ctx, 2);
		case 42:
			return precpred(_ctx, 60);
		case 43:
			return precpred(_ctx, 59);
		case 44:
			return precpred(_ctx, 46);
		case 45:
			return precpred(_ctx, 32);
		case 46:
			return precpred(_ctx, 31);
		case 47:
			return precpred(_ctx, 30);
		case 48:
			return precpred(_ctx, 29);
		case 49:
			return precpred(_ctx, 27);
		case 50:
			return precpred(_ctx, 26);
		case 51:
			return precpred(_ctx, 25);
		case 52:
			return precpred(_ctx, 24);
		case 53:
			return precpred(_ctx, 23);
		case 54:
			return precpred(_ctx, 22);
		case 55:
			return precpred(_ctx, 19);
		case 56:
			return precpred(_ctx, 18);
		case 57:
			return precpred(_ctx, 13);
		case 58:
			return precpred(_ctx, 12);
		case 59:
			return precpred(_ctx, 11);
		case 60:
			return precpred(_ctx, 10);
		case 61:
			return precpred(_ctx, 8);
		case 62:
			return precpred(_ctx, 7);
		case 63:
			return precpred(_ctx, 6);
		case 64:
			return precpred(_ctx, 5);
		case 65:
			return precpred(_ctx, 4);
		case 66:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean bExpr_sempred(BExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67:
			return precpred(_ctx, 9);
		case 68:
			return precpred(_ctx, 6);
		case 69:
			return precpred(_ctx, 5);
		case 70:
			return precpred(_ctx, 12);
		case 71:
			return precpred(_ctx, 7);
		case 72:
			return precpred(_ctx, 4);
		case 73:
			return precpred(_ctx, 3);
		case 74:
			return precpred(_ctx, 2);
		case 75:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean indirection_sempred(IndirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 76:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean optIndirection_sempred(OptIndirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 77:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean xmlTableColumnOptionList_sempred(XmlTableColumnOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean exprList_sempred(ExprListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean attrs_sempred(AttrsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 80:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean optArrayBounds_sempred(OptArrayBoundsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81:
			return precpred(_ctx, 3);
		case 82:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean nameList_sempred(NameListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 83:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean varName_sempred(VarNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 84:
			return precpred(_ctx, 1);
		}
		return true;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0225\u106d\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\3\2\5\2\u0278\n\2\3\2\3\2\3\2"+
		"\3\2\3\2\5\2\u027f\n\2\3\2\5\2\u0282\n\2\3\3\3\3\3\3\3\3\3\3\5\3\u0289"+
		"\n\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\5\4\u02a0\n\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\7\6\u02aa"+
		"\n\6\f\6\16\6\u02ad\13\6\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5"+
		"\b\u02ba\n\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u02c2\n\b\3\t\3\t\3\t\3\t\5\t"+
		"\u02c8\n\t\3\t\3\t\3\t\3\t\5\t\u02ce\n\t\3\n\5\n\u02d1\n\n\3\n\3\n\3\n"+
		"\3\n\3\n\5\n\u02d8\n\n\3\n\5\n\u02db\n\n\3\n\5\n\u02de\n\n\3\13\3\13\3"+
		"\13\3\13\3\13\3\13\7\13\u02e6\n\13\f\13\16\13\u02e9\13\13\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u02f5\n\f\3\r\3\r\3\r\3\16\3\16\3\16"+
		"\3\16\3\16\3\16\7\16\u0300\n\16\f\16\16\16\u0303\13\16\3\17\3\17\3\17"+
		"\3\20\5\20\u0309\n\20\3\20\3\20\3\20\3\20\5\20\u030f\n\20\3\20\5\20\u0312"+
		"\n\20\3\20\5\20\u0315\n\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21"+
		"\u031f\n\21\3\22\3\22\3\22\3\23\3\23\5\23\u0326\n\23\3\24\3\24\3\24\3"+
		"\24\3\24\3\24\3\24\3\24\5\24\u0330\n\24\3\25\3\25\3\25\3\25\3\25\3\25"+
		"\5\25\u0338\n\25\3\25\3\25\5\25\u033c\n\25\3\25\3\25\5\25\u0340\n\25\3"+
		"\25\3\25\5\25\u0344\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25"+
		"\3\25\5\25\u0350\n\25\3\25\3\25\5\25\u0354\n\25\3\25\3\25\3\25\5\25\u0359"+
		"\n\25\3\25\3\25\5\25\u035d\n\25\5\25\u035f\n\25\3\26\3\26\3\26\5\26\u0364"+
		"\n\26\3\26\3\26\3\26\5\26\u0369\n\26\3\26\3\26\3\26\3\26\5\26\u036f\n"+
		"\26\3\26\3\26\3\26\3\26\5\26\u0375\n\26\3\26\7\26\u0378\n\26\f\26\16\26"+
		"\u037b\13\26\3\27\3\27\5\27\u037f\n\27\3\27\5\27\u0382\n\27\3\27\5\27"+
		"\u0385\n\27\3\27\5\27\u0388\n\27\3\27\5\27\u038b\n\27\3\27\5\27\u038e"+
		"\n\27\3\27\5\27\u0391\n\27\3\27\5\27\u0394\n\27\3\27\3\27\3\27\3\27\5"+
		"\27\u039a\n\27\3\27\5\27\u039d\n\27\3\27\5\27\u03a0\n\27\3\27\5\27\u03a3"+
		"\n\27\3\27\5\27\u03a6\n\27\3\27\5\27\u03a9\n\27\3\27\3\27\3\27\5\27\u03ae"+
		"\n\27\3\30\3\30\3\30\3\30\3\30\5\30\u03b5\n\30\3\31\3\31\3\31\3\32\3\32"+
		"\5\32\u03bc\n\32\3\32\3\32\3\32\5\32\u03c1\n\32\3\32\3\32\3\32\3\32\5"+
		"\32\u03c7\n\32\3\32\3\32\3\32\3\32\5\32\u03cd\n\32\3\32\3\32\3\32\3\32"+
		"\5\32\u03d3\n\32\3\32\3\32\3\32\3\32\5\32\u03d9\n\32\3\32\3\32\3\32\5"+
		"\32\u03de\n\32\3\32\3\32\5\32\u03e2\n\32\3\32\3\32\5\32\u03e6\n\32\3\33"+
		"\3\33\3\33\3\33\3\33\3\33\7\33\u03ee\n\33\f\33\16\33\u03f1\13\33\3\34"+
		"\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\5\35\u03ff\n\35"+
		"\3\36\3\36\3\36\3\36\3\36\5\36\u0406\n\36\3\37\3\37\3\37\3\37\5\37\u040c"+
		"\n\37\3 \3 \3 \3 \5 \u0412\n \3!\3!\3!\3!\3!\7!\u0419\n!\f!\16!\u041c"+
		"\13!\3\"\3\"\5\"\u0420\n\"\3\"\5\"\u0423\n\"\3#\3#\3#\5#\u0428\n#\3$\3"+
		"$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u0435\n$\3%\3%\3%\3&\3&\3&\3&\3&\3&\7"+
		"&\u0440\n&\f&\16&\u0443\13&\3\'\3\'\3\'\3\'\5\'\u0449\n\'\3(\3(\3(\3("+
		"\3(\3(\3(\3(\5(\u0453\n(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\7)\u0461"+
		"\n)\f)\16)\u0464\13)\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3"+
		"*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0485\n*\3+\3+\3+\3+\3"+
		"+\3+\5+\u048d\n+\3,\3,\5,\u0491\n,\3-\3-\3.\3.\3.\3.\3.\5.\u049a\n.\3"+
		"/\3/\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\61\7\61\u04a6\n\61\f\61\16\61"+
		"\u04a9\13\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3"+
		"\62\5\62\u04b7\n\62\3\63\3\63\3\63\3\63\3\64\3\64\3\64\7\64\u04c0\n\64"+
		"\f\64\16\64\u04c3\13\64\3\65\3\65\3\65\3\65\3\65\5\65\u04ca\n\65\3\66"+
		"\3\66\3\66\3\67\3\67\3\67\3\67\3\67\38\38\38\38\38\39\39\39\39\39\39\3"+
		":\3:\3:\3;\3;\3;\3;\3;\3;\7;\u04e8\n;\f;\16;\u04eb\13;\3<\3<\3<\3<\3="+
		"\3=\5=\u04f3\n=\3=\5=\u04f6\n=\3=\5=\u04f9\n=\3=\5=\u04fc\n=\3=\3=\3>"+
		"\3>\3?\3?\3?\3?\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u0512\n@\3A\3A"+
		"\3A\3A\3A\3A\5A\u051a\nA\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u0528"+
		"\nB\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\5C\u0535\nC\3D\3D\5D\u0539\nD\3E"+
		"\3E\3E\3F\3F\3F\3F\3F\3F\7F\u0544\nF\fF\16F\u0547\13F\3G\3G\3G\5G\u054c"+
		"\nG\3G\3G\5G\u0550\nG\3G\3G\3G\3G\5G\u0556\nG\3G\3G\3G\5G\u055b\nG\3G"+
		"\3G\5G\u055f\nG\3G\3G\3G\5G\u0564\nG\3G\3G\5G\u0568\nG\3G\3G\3G\5G\u056d"+
		"\nG\3G\3G\3G\3G\3G\5G\u0574\nG\5G\u0576\nG\3G\3G\7G\u057a\nG\fG\16G\u057d"+
		"\13G\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\5H\u0593"+
		"\nH\3I\3I\5I\u0597\nI\3I\3I\5I\u059b\nI\3I\3I\5I\u059f\nI\3I\5I\u05a2"+
		"\nI\3J\3J\3K\3K\3K\3K\3K\3K\3K\5K\u05ad\nK\3L\3L\3L\3L\3L\3L\3L\3L\3L"+
		"\3L\3L\5L\u05ba\nL\3M\3M\3M\3N\3N\3N\3N\3N\5N\u05c4\nN\3O\3O\3O\3P\3P"+
		"\3P\3Q\6Q\u05cd\nQ\rQ\16Q\u05ce\3R\3R\3R\5R\u05d4\nR\3S\3S\5S\u05d8\n"+
		"S\3S\3S\3S\3S\3S\5S\u05df\nS\3S\5S\u05e2\nS\3T\3T\3T\3T\3T\3T\3T\3T\3"+
		"T\3T\3T\3T\3T\3T\3T\3T\5T\u05f4\nT\3U\3U\3V\3V\5V\u05fa\nV\3V\3V\3V\3"+
		"V\3V\5V\u0601\nV\3V\3V\5V\u0605\nV\3V\3V\5V\u0609\nV\3V\5V\u060c\nV\3"+
		"V\3V\5V\u0610\nV\3V\3V\3V\3V\3V\3V\5V\u0618\nV\3V\3V\5V\u061c\nV\3V\3"+
		"V\5V\u0620\nV\3W\3W\3W\3W\3W\5W\u0627\nW\3X\3X\3X\7X\u062c\nX\fX\16X\u062f"+
		"\13X\3Y\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u063b\nZ\3[\3[\3[\7[\u0640\n[\f"+
		"[\16[\u0643\13[\3\\\3\\\3]\7]\u0648\n]\f]\16]\u064b\13]\3^\3^\3^\3^\5"+
		"^\u0651\n^\3^\3^\3^\5^\u0656\n^\3^\3^\3^\3^\3^\5^\u065d\n^\3^\3^\3^\5"+
		"^\u0662\n^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\3^\5^\u0674\n"+
		"^\3_\5_\u0677\n_\3_\3_\3_\3`\3`\5`\u067e\n`\3`\3`\5`\u0682\n`\3a\3a\3"+
		"a\3b\3b\3b\3b\3b\5b\u068c\nb\3b\3b\3b\5b\u0691\nb\3b\3b\3b\5b\u0696\n"+
		"b\3b\3b\3b\5b\u069b\nb\3b\3b\3b\3b\5b\u06a1\nb\3b\3b\3b\3b\3b\5b\u06a8"+
		"\nb\3b\3b\3b\3b\5b\u06ae\nb\3b\3b\3b\3b\5b\u06b4\nb\3b\3b\3b\5b\u06b9"+
		"\nb\3b\3b\3b\3b\5b\u06bf\nb\3b\3b\3b\3b\3b\5b\u06c6\nb\3b\3b\3b\5b\u06cb"+
		"\nb\3b\3b\3b\3b\5b\u06d1\nb\3b\3b\3b\3b\3b\5b\u06d8\nb\3b\5b\u06db\nb"+
		"\3c\3c\5c\u06df\nc\3d\3d\3e\5e\u06e4\ne\3e\3e\5e\u06e8\ne\3f\3f\3f\3g"+
		"\5g\u06ee\ng\3g\3g\5g\u06f2\ng\3g\5g\u06f5\ng\3h\3h\3h\3i\3i\3i\3j\3j"+
		"\3k\3k\3l\3l\3m\3m\3m\5m\u0706\nm\3m\3m\3n\3n\3n\5n\u070d\nn\3n\3n\3o"+
		"\3o\3p\3p\3q\5q\u0716\nq\3q\3q\3q\7q\u071b\nq\fq\16q\u071e\13q\3q\5q\u0721"+
		"\nq\3r\3r\3r\3r\7r\u0727\nr\fr\16r\u072a\13r\3r\3r\3s\3s\5s\u0730\ns\3"+
		"t\3t\3u\5u\u0735\nu\3u\3u\3v\3v\3w\3w\3x\3x\3y\3y\3y\3y\3y\3y\3y\3y\3"+
		"y\3y\3y\3y\3y\3y\3y\3y\3y\3y\5y\u0751\ny\3y\3y\3y\3y\3y\3y\3y\3y\3y\3"+
		"y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3"+
		"y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3"+
		"y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3"+
		"y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3"+
		"y\3y\3y\3y\3y\3y\3y\3y\5y\u07c0\ny\3y\3y\3y\3y\3y\3y\3y\3y\5y\u07ca\n"+
		"y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3"+
		"y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3"+
		"y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3"+
		"y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3"+
		"y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3"+
		"y\3y\3y\3y\3y\3y\3y\3y\7y\u0846\ny\fy\16y\u0849\13y\3z\3z\3z\3z\3z\3z"+
		"\3z\3z\3z\5z\u0854\nz\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z"+
		"\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z\3z"+
		"\3z\3z\3z\7z\u0880\nz\fz\16z\u0883\13z\3{\3{\3{\3{\3{\5{\u088a\n{\3{\3"+
		"{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\5"+
		"{\u08a4\n{\3|\3|\3|\3|\3|\7|\u08ab\n|\f|\16|\u08ae\13|\3}\3}\3}\7}\u08b3"+
		"\n}\f}\16}\u08b6\13}\3~\3~\3~\3~\3~\3~\3~\3~\3~\3~\5~\u08c2\n~\3~\3~\5"+
		"~\u08c6\n~\3~\5~\u08c9\n~\3\177\3\177\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\5\u0080\u08d2\n\u0080\3\u0081\3\u0081\5\u0081\u08d6\n\u0081\3"+
		"\u0081\3\u0081\5\u0081\u08da\n\u0081\3\u0081\3\u0081\3\u0082\6\u0082\u08df"+
		"\n\u0082\r\u0082\16\u0082\u08e0\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\3\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086"+
		"\5\u0086\u08f1\n\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\5\u0087\u08fb\n\u0087\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088"+
		"\u0909\n\u0088\3\u0089\3\u0089\5\u0089\u090d\n\u0089\3\u008a\6\u008a\u0910"+
		"\n\u008a\r\u008a\16\u008a\u0911\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c"+
		"\3\u008c\3\u008c\3\u008c\5\u008c\u091c\n\u008c\3\u008d\3\u008d\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0925\n\u008e\3\u008f\3\u008f"+
		"\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f"+
		"\u0931\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0941"+
		"\n\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\5\u0091\u094b\n\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\5\u0094\u095f\n\u0094\3\u0095\3\u0095\3\u0095"+
		"\7\u0095\u0964\n\u0095\f\u0095\16\u0095\u0967\13\u0095\3\u0096\3\u0096"+
		"\3\u0096\7\u0096\u096c\n\u0096\f\u0096\16\u0096\u096f\13\u0096\3\u0097"+
		"\3\u0097\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\5\u0098\u097c\n\u0098\3\u0099\3\u0099\3\u0099\7\u0099\u0981\n"+
		"\u0099\f\u0099\16\u0099\u0984\13\u0099\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u098e\n\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0997\n\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a"+
		"\u09a2\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\5\u009a\u09ab\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\5\u009a\u09b4\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\5\u009a\u09bd\n\u009a\3\u009b\3\u009b\3\u009b\3\u009b"+
		"\5\u009b\u09c3\n\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\5\u009c\u09ce\n\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\5\u009c\u09d6\n\u009c\3\u009d\3\u009d\3\u009e"+
		"\3\u009e\3\u009e\5\u009e\u09dd\n\u009e\3\u009f\3\u009f\5\u009f\u09e1\n"+
		"\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u09e9\n"+
		"\u009f\5\u009f\u09eb\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3"+
		"\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0a02"+
		"\n\u00a0\3\u00a1\3\u00a1\3\u00a1\7\u00a1\u0a07\n\u00a1\f\u00a1\16\u00a1"+
		"\u0a0a\13\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0a17\n\u00a2\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\7\u00a3\u0a1e\n\u00a3\f\u00a3\16\u00a3\u0a21"+
		"\13\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\5\u00a4\u0a2b\n\u00a4\3\u00a5\3\u00a5\3\u00a5\7\u00a5\u0a30\n\u00a5\f"+
		"\u00a5\16\u00a5\u0a33\13\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\5\u00a6\u0a3b\n\u00a6\3\u00a7\3\u00a7\5\u00a7\u0a3f\n\u00a7\3"+
		"\u00a7\5\u00a7\u0a42\n\u00a7\3\u00a7\5\u00a7\u0a45\n\u00a7\3\u00a7\5\u00a7"+
		"\u0a48\n\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa\5\u00aa\u0a58"+
		"\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\5\u00ac\u0a88\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0b25"+
		"\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\5\u00ac\u0b31\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0b4e\n\u00ad\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0b5d\n\u00ae\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\7\u00af\u0b65\n\u00af\f\u00af\16\u00af\u0b68"+
		"\13\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0b75\n\u00b1\3\u00b2\3\u00b2\5\u00b2"+
		"\u0b79\n\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0b7e\n\u00b2\5\u00b2\u0b80"+
		"\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0b91"+
		"\n\u00b4\3\u00b4\3\u00b4\5\u00b4\u0b95\n\u00b4\3\u00b4\3\u00b4\5\u00b4"+
		"\u0b99\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4"+
		"\u0ba1\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0ba8\n"+
		"\u00b5\3\u00b5\3\u00b5\5\u00b5\u0bac\n\u00b5\3\u00b5\3\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b5\5\u00b5\u0bb3\n\u00b5\3\u00b5\3\u00b5\5\u00b5\u0bb7\n\u00b5"+
		"\3\u00b5\5\u00b5\u0bba\n\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\5\u00b6\u0bc2\n\u00b6\3\u00b7\3\u00b7\5\u00b7\u0bc6\n\u00b7\3"+
		"\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00ba\3\u00ba"+
		"\5\u00ba\u0bd1\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u0bd5\n\u00ba\3\u00ba\3"+
		"\u00ba\3\u00ba\3\u00ba\5\u00ba\u0bdb\n\u00ba\3\u00ba\3\u00ba\3\u00ba\5"+
		"\u00ba\u0be0\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u0be4\n\u00ba\5\u00ba\u0be6"+
		"\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u0bec\n\u00bb\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u0bf5\n\u00bc"+
		"\f\u00bc\16\u00bc\u0bf8\13\u00bc\3\u00bd\3\u00bd\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\5\u00be\u0c00\n\u00be\3\u00bf\3\u00bf\5\u00bf\u0c04\n\u00bf\3"+
		"\u00c0\3\u00c0\5\u00c0\u0c08\n\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3"+
		"\u00c1\3\u00c1\5\u00c1\u0c10\n\u00c1\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3"+
		"\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3"+
		"\u0c30\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\7\u00c4\u0c3a\n\u00c4\f\u00c4\16\u00c4\u0c3d\13\u00c4\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u0c44\n\u00c5\3\u00c6\3\u00c6"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0c4f"+
		"\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\5\u00c8\u0c5a\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\5\u00cc\u0c6a\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\5\u00cd\u0c7c\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00cf\3\u00cf\3\u00cf\7\u00cf\u0c86\n\u00cf\f\u00cf\16\u00cf\u0c89"+
		"\13\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0c90\n\u00d0"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u0ca1\n\u00d1"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u0ca7\n\u00d2\3\u00d3\3\u00d3"+
		"\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0cb0\n\u00d4\3\u00d5"+
		"\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u0cb7\n\u00d5\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6"+
		"\u0cc3\n\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d8\7\u00d8"+
		"\u0ccb\n\u00d8\f\u00d8\16\u00d8\u0cce\13\u00d8\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00da\3\u00da\3\u00da\7\u00da\u0cd8\n\u00da\f\u00da"+
		"\16\u00da\u0cdb\13\u00da\3\u00db\3\u00db\3\u00db\5\u00db\u0ce0\n\u00db"+
		"\3\u00dc\3\u00dc\5\u00dc\u0ce4\n\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\5\u00dd\u0cec\n\u00dd\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\5\u00de\u0cfc\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\7\u00df\u0d04\n\u00df\f\u00df\16\u00df\u0d07\13\u00df\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0d1a"+
		"\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u0d22"+
		"\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e3\3\u00e3\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e5\3\u00e5\3\u00e5\7\u00e5\u0d32\n\u00e5"+
		"\f\u00e5\16\u00e5\u0d35\13\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6"+
		"\u0d3b\n\u00e6\3\u00e6\3\u00e6\5\u00e6\u0d3f\n\u00e6\3\u00e6\5\u00e6\u0d42"+
		"\n\u00e6\5\u00e6\u0d44\n\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7"+
		"\u0d4a\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\5\u00e8\u0d53\n\u00e8\3\u00e9\3\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\5\u00ea\u0d5b\n\u00ea\3\u00eb\3\u00eb\3\u00ec\3\u00ec\3\u00ec\7\u00ec"+
		"\u0d62\n\u00ec\f\u00ec\16\u00ec\u0d65\13\u00ec\3\u00ed\5\u00ed\u0d68\n"+
		"\u00ed\3\u00ed\3\u00ed\5\u00ed\u0d6c\n\u00ed\3\u00ed\5\u00ed\u0d6f\n\u00ed"+
		"\3\u00ed\5\u00ed\u0d72\n\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u0d77\n"+
		"\u00ed\3\u00ed\5\u00ed\u0d7a\n\u00ed\5\u00ed\u0d7c\n\u00ed\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee"+
		"\5\u00ee\u0d89\n\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0\5\u00f0"+
		"\u0d90\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3\u00f2\3\u00f2\3\u00f2"+
		"\7\u00f2\u0d99\n\u00f2\f\u00f2\16\u00f2\u0d9c\13\u00f2\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u0dad\n\u00f3\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u0db5\n\u00f4\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\5\u00f5\u0dc3\n\u00f5\3\u00f6\3\u00f6\5\u00f6\u0dc7\n\u00f6\3"+
		"\u00f6\5\u00f6\u0dca\n\u00f6\3\u00f6\5\u00f6\u0dcd\n\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\3\u00f6\7\u00f6\u0dd4\n\u00f6\f\u00f6\16\u00f6\u0dd7"+
		"\13\u00f6\3\u00f6\3\u00f6\5\u00f6\u0ddb\n\u00f6\3\u00f6\5\u00f6\u0dde"+
		"\n\u00f6\5\u00f6\u0de0\n\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7"+
		"\u0e1c\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u0e22\n\u00f8\3"+
		"\u00f8\3\u00f8\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u0e29\n\u00f9\3\u00f9\3"+
		"\u00f9\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u0e30\n\u00fa\3\u00fb\3\u00fb\3"+
		"\u00fb\7\u00fb\u0e35\n\u00fb\f\u00fb\16\u00fb\u0e38\13\u00fb\3\u00fc\3"+
		"\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u0e3f\n\u00fc\3\u00fd\3\u00fd\3"+
		"\u00fd\3\u00fd\3\u00fd\5\u00fd\u0e46\n\u00fd\3\u00fe\3\u00fe\3\u00fe\3"+
		"\u00fe\5\u00fe\u0e4c\n\u00fe\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0101\3"+
		"\u0101\3\u0101\3\u0101\5\u0101\u0e56\n\u0101\3\u0102\3\u0102\3\u0102\3"+
		"\u0102\3\u0102\3\u0102\7\u0102\u0e5e\n\u0102\f\u0102\16\u0102\u0e61\13"+
		"\u0102\3\u0103\3\u0103\3\u0103\7\u0103\u0e66\n\u0103\f\u0103\16\u0103"+
		"\u0e69\13\u0103\3\u0104\3\u0104\5\u0104\u0e6d\n\u0104\3\u0105\3\u0105"+
		"\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105"+
		"\3\u0105\3\u0105\5\u0105\u0e7c\n\u0105\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\3\u0106\5\u0106\u0e83\n\u0106\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\3\u0107\5\u0107\u0e8c\n\u0107\3\u0108\3\u0108\3\u0108\5\u0108"+
		"\u0e91\n\u0108\3\u0108\3\u0108\3\u0109\7\u0109\u0e96\n\u0109\f\u0109\16"+
		"\u0109\u0e99\13\u0109\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\5\u010a\u0ea3\n\u010a\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\5\u010b\u0eac\n\u010b\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\5\u010c\u0eb4\n\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\5\u010c\u0ebb\n\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\5\u010c\u0ec3\n\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\5\u010c\u0ecc\n\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\5\u010c"+
		"\u0ed9\n\u010c\3\u010c\5\u010c\u0edc\n\u010c\3\u010c\5\u010c\u0edf\n\u010c"+
		"\5\u010c\u0ee1\n\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010e\6\u010e"+
		"\u0ee8\n\u010e\r\u010e\16\u010e\u0ee9\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u0ef5\n\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u0f08"+
		"\n\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u0f0e\n\u010f\3\u010f"+
		"\5\u010f\u0f11\n\u010f\3\u0110\3\u0110\3\u0110\3\u0110\3\u0111\3\u0111"+
		"\3\u0112\3\u0112\3\u0112\7\u0112\u0f1c\n\u0112\f\u0112\16\u0112\u0f1f"+
		"\13\u0112\3\u0113\3\u0113\3\u0113\5\u0113\u0f24\n\u0113\3\u0114\3\u0114"+
		"\3\u0114\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0117\3\u0117\3\u0117\7\u0117\u0f35\n\u0117\f\u0117\16\u0117"+
		"\u0f38\13\u0117\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u0f3f"+
		"\n\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u0f46\n\u0119"+
		"\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\5\u011a"+
		"\u0f50\n\u011a\3\u011b\3\u011b\3\u011b\3\u011b\3\u011c\3\u011c\3\u011c"+
		"\3\u011c\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\5\u011d\u0f62\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\5\u011e\u0f6a\n\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u0120"+
		"\3\u0120\3\u0120\7\u0120\u0f74\n\u0120\f\u0120\16\u0120\u0f77\13\u0120"+
		"\3\u0121\3\u0121\3\u0121\3\u0122\3\u0122\3\u0123\3\u0123\3\u0124\3\u0124"+
		"\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u0f86\n\u0124\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\5\u0125\u0f9e\n\u0125\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\5\u0126\u0faf\n\u0126\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\5\u0127\u0fb7\n\u0127\3\u0128\3\u0128\3\u0128\7\u0128"+
		"\u0fbc\n\u0128\f\u0128\16\u0128\u0fbf\13\u0128\3\u0129\3\u0129\5\u0129"+
		"\u0fc3\n\u0129\3\u012a\3\u012a\3\u012b\3\u012b\3\u012b\7\u012b\u0fca\n"+
		"\u012b\f\u012b\16\u012b\u0fcd\13\u012b\3\u012c\3\u012c\3\u012c\5\u012c"+
		"\u0fd2\n\u012c\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\5\u012d\u0fdc\n\u012d\3\u012e\3\u012e\5\u012e\u0fe0\n\u012e\3"+
		"\u012e\7\u012e\u0fe3\n\u012e\f\u012e\16\u012e\u0fe6\13\u012e\3\u012f\3"+
		"\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\5\u012f\u0ff2\n\u012f\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\5\u0130"+
		"\u1002\n\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\5\u0130\u1014\n\u0130\3\u0131\3\u0131\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\5\u0132\u101c\n\u0132\3\u0133\3\u0133\3\u0133\3\u0134\3\u0134\3\u0134"+
		"\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1029\n\u0134\3\u0135"+
		"\3\u0135\5\u0135\u102d\n\u0135\3\u0136\3\u0136\3\u0136\7\u0136\u1032\n"+
		"\u0136\f\u0136\16\u0136\u1035\13\u0136\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137"+
		"\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137\u105a\n\u0137\3\u0138\3\u0138"+
		"\3\u0138\5\u0138\u105f\n\u0138\3\u0139\3\u0139\3\u013a\3\u013a\3\u013b"+
		"\3\u013b\3\u013b\7\u013b\u1068\n\u013b\f\u013b\16\u013b\u106b\13\u013b"+
		"\3\u013b\2\30\n\24\32*\64@JP`t\u008a\u008c\u00f0\u00f2\u00f6\u00f8\u0144"+
		"\u015c\u0176\u0186\u01bc\u0202\u013c\2\4\6\b\n\f\16\20\22\24\26\30\32"+
		"\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080"+
		"\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098"+
		"\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0"+
		"\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8"+
		"\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0"+
		"\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8"+
		"\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110"+
		"\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128"+
		"\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140"+
		"\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158"+
		"\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170"+
		"\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188"+
		"\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0"+
		"\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8"+
		"\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0"+
		"\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8"+
		"\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200"+
		"\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218"+
		"\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230"+
		"\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248"+
		"\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260"+
		"\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\2\33\4\2"+
		"\u00e5\u00e5\u019c\u019c\4\2\u00d4\u00d4\u00e2\u00e2\4\2\u00a6\u00a6\u00fe"+
		"\u00fe\4\2XXii\4\2\u0205\u0206\u0222\u0222\4\2XXss)\2\63\63\67\67<<@A"+
		"CFNNPUXXadfkmpsuwxz~\u0087\u0087\u008c\u008d\u0097\u0097\u009e\u009e\u00a0"+
		"\u00a0\u00b3\u00b5\u00bb\u00bd\u00bf\u00c0\u00c2\u00c2\u00c6\u00c6\u00c9"+
		"\u00c9\u00cc\u00cc\u00d8\u00d8\u00e0\u00e0\u00e5\u00e5\u00ea\u00ea\u00f3"+
		"\u00f3\u0109\u0109\u0117\u0117\u0129\u0129\u0164\u0165\u0187\u0187\u018a"+
		"\u018b\u0194\u0196\u0198\u0199\3\2\4\5:\2\64\668;=?BBGGJMeeyy\177\u0082"+
		"\u0084\u0084\u008e\u008e\u0090\u0090\u0092\u0095\u0098\u009b\u009d\u009d"+
		"\u009f\u009f\u00a1\u00a4\u00a6\u00a7\u00a9\u00a9\u00ad\u00ad\u00b1\u00b2"+
		"\u00b7\u00b7\u00ba\u00ba\u00c1\u00c1\u00c3\u00c3\u00c5\u00c5\u00c7\u00c7"+
		"\u00ca\u00ca\u00ce\u00ce\u00d0\u00d1\u00d3\u00d3\u00d5\u00d7\u00d9\u00df"+
		"\u00e1\u00e4\u00e6\u00e9\u00eb\u00eb\u00ee\u00f2\u00f4\u00f8\u00fa\u00fb"+
		"\u00fd\u0108\u010a\u010e\u0110\u0116\u0118\u011b\u011d\u0128\u012a\u0132"+
		"\u0134\u013c\u014a\u014a\u015a\u015a\u0163\u0163\u0173\u0176\u0178\u017c"+
		"\u017f\u0182\u0188\u0189\u018c\u018d\u018f\u0192\u019a\u021a\r\2Y`llv"+
		"v\u00a8\u00a8\u00c8\u00c8\u00cf\u00cf\u00ec\u00ec\u0162\u0162\u0166\u0166"+
		"\u0183\u0186\u021b\u021d\4\2\6\7jk\4\2\32\32\34 \3\2\6\61\6\2\16\17\21"+
		"\24\32\32\34 \3\2z{\4\2tu\u00c9\u00c9\3\2\u0173\u0176\4\2\u0188\u0188"+
		"\u0190\u0190\4\2RRtt\3\2\u0085\u0086\36\2HIOOVWqr\u0083\u0083\u0085\u0086"+
		"\u0088\u0088\u008a\u008b\u00aa\u00ac\u00ae\u00b0\u00b6\u00b6\u00b8\u00b9"+
		"\u00be\u00be\u00c4\u00c4\u00cb\u00cb\u00d4\u00d4\u00fc\u00fc\u013d\u013d"+
		"\u0141\u0141\u0148\u0148\u0156\u0156\u0168\u0172\u0177\u0177\u017d\u017e"+
		"\u018e\u018e\u0193\u0193\u0197\u0197\u021f\u0220\4\2\u0097\u0097\u0222"+
		"\u0222\4\2\32\32ii\4\2\63\66tt\3\2\63\66\2\u1276\2\u0277\3\2\2\2\4\u0288"+
		"\3\2\2\2\6\u029f\3\2\2\2\b\u02a1\3\2\2\2\n\u02a3\3\2\2\2\f\u02ae\3\2\2"+
		"\2\16\u02c1\3\2\2\2\20\u02cd\3\2\2\2\22\u02d0\3\2\2\2\24\u02df\3\2\2\2"+
		"\26\u02f4\3\2\2\2\30\u02f6\3\2\2\2\32\u02f9\3\2\2\2\34\u0304\3\2\2\2\36"+
		"\u0308\3\2\2\2 \u031e\3\2\2\2\"\u0320\3\2\2\2$\u0325\3\2\2\2&\u032f\3"+
		"\2\2\2(\u035e\3\2\2\2*\u0363\3\2\2\2,\u03ad\3\2\2\2.\u03b4\3\2\2\2\60"+
		"\u03b6\3\2\2\2\62\u03e5\3\2\2\2\64\u03e7\3\2\2\2\66\u03f2\3\2\2\28\u03fe"+
		"\3\2\2\2:\u0405\3\2\2\2<\u040b\3\2\2\2>\u0411\3\2\2\2@\u0413\3\2\2\2B"+
		"\u041d\3\2\2\2D\u0427\3\2\2\2F\u0434\3\2\2\2H\u0436\3\2\2\2J\u0439\3\2"+
		"\2\2L\u0448\3\2\2\2N\u0452\3\2\2\2P\u0454\3\2\2\2R\u0484\3\2\2\2T\u048c"+
		"\3\2\2\2V\u0490\3\2\2\2X\u0492\3\2\2\2Z\u0499\3\2\2\2\\\u049b\3\2\2\2"+
		"^\u049d\3\2\2\2`\u049f\3\2\2\2b\u04b6\3\2\2\2d\u04b8\3\2\2\2f\u04bc\3"+
		"\2\2\2h\u04c9\3\2\2\2j\u04cb\3\2\2\2l\u04ce\3\2\2\2n\u04d3\3\2\2\2p\u04d8"+
		"\3\2\2\2r\u04de\3\2\2\2t\u04e1\3\2\2\2v\u04ec\3\2\2\2x\u04f0\3\2\2\2z"+
		"\u04ff\3\2\2\2|\u0501\3\2\2\2~\u0511\3\2\2\2\u0080\u0519\3\2\2\2\u0082"+
		"\u0527\3\2\2\2\u0084\u0534\3\2\2\2\u0086\u0538\3\2\2\2\u0088\u053a\3\2"+
		"\2\2\u008a\u053d\3\2\2\2\u008c\u0575\3\2\2\2\u008e\u0592\3\2\2\2\u0090"+
		"\u05a1\3\2\2\2\u0092\u05a3\3\2\2\2\u0094\u05ac\3\2\2\2\u0096\u05b9\3\2"+
		"\2\2\u0098\u05bb\3\2\2\2\u009a\u05c3\3\2\2\2\u009c\u05c5\3\2\2\2\u009e"+
		"\u05c8\3\2\2\2\u00a0\u05cc\3\2\2\2\u00a2\u05d3\3\2\2\2\u00a4\u05d5\3\2"+
		"\2\2\u00a6\u05f3\3\2\2\2\u00a8\u05f5\3\2\2\2\u00aa\u061f\3\2\2\2\u00ac"+
		"\u0626\3\2\2\2\u00ae\u0628\3\2\2\2\u00b0\u0630\3\2\2\2\u00b2\u063a\3\2"+
		"\2\2\u00b4\u063c\3\2\2\2\u00b6\u0644\3\2\2\2\u00b8\u0649\3\2\2\2\u00ba"+
		"\u0673\3\2\2\2\u00bc\u0676\3\2\2\2\u00be\u067b\3\2\2\2\u00c0\u0683\3\2"+
		"\2\2\u00c2\u06da\3\2\2\2\u00c4\u06dc\3\2\2\2\u00c6\u06e0\3\2\2\2\u00c8"+
		"\u06e3\3\2\2\2\u00ca\u06e9\3\2\2\2\u00cc\u06f4\3\2\2\2\u00ce\u06f6\3\2"+
		"\2\2\u00d0\u06f9\3\2\2\2\u00d2\u06fc\3\2\2\2\u00d4\u06fe\3\2\2\2\u00d6"+
		"\u0700\3\2\2\2\u00d8\u0705\3\2\2\2\u00da\u070c\3\2\2\2\u00dc\u0710\3\2"+
		"\2\2\u00de\u0712\3\2\2\2\u00e0\u0715\3\2\2\2\u00e2\u0722\3\2\2\2\u00e4"+
		"\u072f\3\2\2\2\u00e6\u0731\3\2\2\2\u00e8\u0734\3\2\2\2\u00ea\u0738\3\2"+
		"\2\2\u00ec\u073a\3\2\2\2\u00ee\u073c\3\2\2\2\u00f0\u0750\3\2\2\2\u00f2"+
		"\u0853\3\2\2\2\u00f4\u08a3\3\2\2\2\u00f6\u08a5\3\2\2\2\u00f8\u08af\3\2"+
		"\2\2\u00fa\u08c8\3\2\2\2\u00fc\u08ca\3\2\2\2\u00fe\u08d1\3\2\2\2\u0100"+
		"\u08d3\3\2\2\2\u0102\u08de\3\2\2\2\u0104\u08e2\3\2\2\2\u0106\u08e7\3\2"+
		"\2\2\u0108\u08ea\3\2\2\2\u010a\u08f0\3\2\2\2\u010c\u08fa\3\2\2\2\u010e"+
		"\u0908\3\2\2\2\u0110\u090c\3\2\2\2\u0112\u090f\3\2\2\2\u0114\u0913\3\2"+
		"\2\2\u0116\u091b\3\2\2\2\u0118\u091d\3\2\2\2\u011a\u0924\3\2\2\2\u011c"+
		"\u0930\3\2\2\2\u011e\u0940\3\2\2\2\u0120\u094a\3\2\2\2\u0122\u094c\3\2"+
		"\2\2\u0124\u0952\3\2\2\2\u0126\u095e\3\2\2\2\u0128\u0960\3\2\2\2\u012a"+
		"\u0968\3\2\2\2\u012c\u0970\3\2\2\2\u012e\u097b\3\2\2\2\u0130\u097d\3\2"+
		"\2\2\u0132\u09bc\3\2\2\2\u0134\u09c2\3\2\2\2\u0136\u09d5\3\2\2\2\u0138"+
		"\u09d7\3\2\2\2\u013a\u09dc\3\2\2\2\u013c\u09ea\3\2\2\2\u013e\u0a01\3\2"+
		"\2\2\u0140\u0a03\3\2\2\2\u0142\u0a16\3\2\2\2\u0144\u0a18\3\2\2\2\u0146"+
		"\u0a2a\3\2\2\2\u0148\u0a2c\3\2\2\2\u014a\u0a3a\3\2\2\2\u014c\u0a47\3\2"+
		"\2\2\u014e\u0a49\3\2\2\2\u0150\u0a4f\3\2\2\2\u0152\u0a57\3\2\2\2\u0154"+
		"\u0a59\3\2\2\2\u0156\u0b30\3\2\2\2\u0158\u0b4d\3\2\2\2\u015a\u0b5c\3\2"+
		"\2\2\u015c\u0b5e\3\2\2\2\u015e\u0b69\3\2\2\2\u0160\u0b74\3\2\2\2\u0162"+
		"\u0b7f\3\2\2\2\u0164\u0b81\3\2\2\2\u0166\u0ba0\3\2\2\2\u0168\u0bb9\3\2"+
		"\2\2\u016a\u0bc1\3\2\2\2\u016c\u0bc5\3\2\2\2\u016e\u0bc7\3\2\2\2\u0170"+
		"\u0bcc\3\2\2\2\u0172\u0be5\3\2\2\2\u0174\u0beb\3\2\2\2\u0176\u0bed\3\2"+
		"\2\2\u0178\u0bf9\3\2\2\2\u017a\u0bff\3\2\2\2\u017c\u0c03\3\2\2\2\u017e"+
		"\u0c05\3\2\2\2\u0180\u0c0d\3\2\2\2\u0182\u0c11\3\2\2\2\u0184\u0c2f\3\2"+
		"\2\2\u0186\u0c31\3\2\2\2\u0188\u0c43\3\2\2\2\u018a\u0c45\3\2\2\2\u018c"+
		"\u0c4e\3\2\2\2\u018e\u0c59\3\2\2\2\u0190\u0c5b\3\2\2\2\u0192\u0c5e\3\2"+
		"\2\2\u0194\u0c61\3\2\2\2\u0196\u0c69\3\2\2\2\u0198\u0c7b\3\2\2\2\u019a"+
		"\u0c7d\3\2\2\2\u019c\u0c82\3\2\2\2\u019e\u0c8f\3\2\2\2\u01a0\u0ca0\3\2"+
		"\2\2\u01a2\u0ca6\3\2\2\2\u01a4\u0ca8\3\2\2\2\u01a6\u0caf\3\2\2\2\u01a8"+
		"\u0cb6\3\2\2\2\u01aa\u0cc2\3\2\2\2\u01ac\u0cc4\3\2\2\2\u01ae\u0cc7\3\2"+
		"\2\2\u01b0\u0ccf\3\2\2\2\u01b2\u0cd4\3\2\2\2\u01b4\u0cdc\3\2\2\2\u01b6"+
		"\u0ce1\3\2\2\2\u01b8\u0ceb\3\2\2\2\u01ba\u0cfb\3\2\2\2\u01bc\u0cfd\3\2"+
		"\2\2\u01be\u0d19\3\2\2\2\u01c0\u0d1b\3\2\2\2\u01c2\u0d23\3\2\2\2\u01c4"+
		"\u0d28\3\2\2\2\u01c6\u0d2a\3\2\2\2\u01c8\u0d2e\3\2\2\2\u01ca\u0d43\3\2"+
		"\2\2\u01cc\u0d49\3\2\2\2\u01ce\u0d52\3\2\2\2\u01d0\u0d54\3\2\2\2\u01d2"+
		"\u0d5a\3\2\2\2\u01d4\u0d5c\3\2\2\2\u01d6\u0d5e\3\2\2\2\u01d8\u0d7b\3\2"+
		"\2\2\u01da\u0d88\3\2\2\2\u01dc\u0d8a\3\2\2\2\u01de\u0d8f\3\2\2\2\u01e0"+
		"\u0d91\3\2\2\2\u01e2\u0d95\3\2\2\2\u01e4\u0dac\3\2\2\2\u01e6\u0db4\3\2"+
		"\2\2\u01e8\u0dc2\3\2\2\2\u01ea\u0ddf\3\2\2\2\u01ec\u0e1b\3\2\2\2\u01ee"+
		"\u0e1d\3\2\2\2\u01f0\u0e25\3\2\2\2\u01f2\u0e2c\3\2\2\2\u01f4\u0e31\3\2"+
		"\2\2\u01f6\u0e3e\3\2\2\2\u01f8\u0e45\3\2\2\2\u01fa\u0e4b\3\2\2\2\u01fc"+
		"\u0e4d\3\2\2\2\u01fe\u0e4f\3\2\2\2\u0200\u0e55\3\2\2\2\u0202\u0e57\3\2"+
		"\2\2\u0204\u0e62\3\2\2\2\u0206\u0e6c\3\2\2\2\u0208\u0e7b\3\2\2\2\u020a"+
		"\u0e82\3\2\2\2\u020c\u0e8b\3\2\2\2\u020e\u0e8d\3\2\2\2\u0210\u0e97\3\2"+
		"\2\2\u0212\u0ea2\3\2\2\2\u0214\u0eab\3\2\2\2\u0216\u0ee0\3\2\2\2\u0218"+
		"\u0ee2\3\2\2\2\u021a\u0ee7\3\2\2\2\u021c\u0f10\3\2\2\2\u021e\u0f12\3\2"+
		"\2\2\u0220\u0f16\3\2\2\2\u0222\u0f18\3\2\2\2\u0224\u0f23\3\2\2\2\u0226"+
		"\u0f25\3\2\2\2\u0228\u0f28\3\2\2\2\u022a\u0f2d\3\2\2\2\u022c\u0f31\3\2"+
		"\2\2\u022e\u0f3e\3\2\2\2\u0230\u0f45\3\2\2\2\u0232\u0f4f\3\2\2\2\u0234"+
		"\u0f51\3\2\2\2\u0236\u0f55\3\2\2\2\u0238\u0f61\3\2\2\2\u023a\u0f69\3\2"+
		"\2\2\u023c\u0f6b\3\2\2\2\u023e\u0f70\3\2\2\2\u0240\u0f78\3\2\2\2\u0242"+
		"\u0f7b\3\2\2\2\u0244\u0f7d\3\2\2\2\u0246\u0f85\3\2\2\2\u0248\u0f9d\3\2"+
		"\2\2\u024a\u0fae\3\2\2\2\u024c\u0fb6\3\2\2\2\u024e\u0fb8\3\2\2\2\u0250"+
		"\u0fc2\3\2\2\2\u0252\u0fc4\3\2\2\2\u0254\u0fc6\3\2\2\2\u0256\u0fd1\3\2"+
		"\2\2\u0258\u0fdb\3\2\2\2\u025a\u0fdd\3\2\2\2\u025c\u0ff1\3\2\2\2\u025e"+
		"\u1013\3\2\2\2\u0260\u1015\3\2\2\2\u0262\u1017\3\2\2\2\u0264\u101d\3\2"+
		"\2\2\u0266\u1028\3\2\2\2\u0268\u102c\3\2\2\2\u026a\u102e\3\2\2\2\u026c"+
		"\u1059\3\2\2\2\u026e\u105e\3\2\2\2\u0270\u1060\3\2\2\2\u0272\u1062\3\2"+
		"\2\2\u0274\u1064\3\2\2\2\u0276\u0278\5.\30\2\u0277\u0276\3\2\2\2\u0277"+
		"\u0278\3\2\2\2\u0278\u0279\3\2\2\2\u0279\u027a\7\64\2\2\u027a\u027b\7"+
		"N\2\2\u027b\u027c\5\4\3\2\u027c\u027e\5\6\4\2\u027d\u027f\5\16\b\2\u027e"+
		"\u027d\3\2\2\2\u027e\u027f\3\2\2\2\u027f\u0281\3\2\2\2\u0280\u0282\5\34"+
		"\17\2\u0281\u0280\3\2\2\2\u0281\u0282\3\2\2\2\u0282\3\3\2\2\2\u0283\u0289"+
		"\5L\'\2\u0284\u0285\5L\'\2\u0285\u0286\7c\2\2\u0286\u0287\5\u0138\u009d"+
		"\2\u0287\u0289\3\2\2\2\u0288\u0283\3\2\2\2\u0288\u0284\3\2\2\2\u0289\5"+
		"\3\2\2\2\u028a\u02a0\5$\23\2\u028b\u028c\7\u019b\2\2\u028c\u028d\5\b\5"+
		"\2\u028d\u028e\7\u00ba\2\2\u028e\u028f\5$\23\2\u028f\u02a0\3\2\2\2\u0290"+
		"\u0291\7\"\2\2\u0291\u0292\5\n\6\2\u0292\u0293\7#\2\2\u0293\u0294\5$\23"+
		"\2\u0294\u02a0\3\2\2\2\u0295\u0296\7\"\2\2\u0296\u0297\5\n\6\2\u0297\u0298"+
		"\7#\2\2\u0298\u0299\7\u019b\2\2\u0299\u029a\5\b\5\2\u029a\u029b\7\u00ba"+
		"\2\2\u029b\u029c\5$\23\2\u029c\u02a0\3\2\2\2\u029d\u029e\7\u0097\2\2\u029e"+
		"\u02a0\7O\2\2\u029f\u028a\3\2\2\2\u029f\u028b\3\2\2\2\u029f\u0290\3\2"+
		"\2\2\u029f\u0295\3\2\2\2\u029f\u029d\3\2\2\2\u02a0\7\3\2\2\2\u02a1\u02a2"+
		"\t\2\2\2\u02a2\t\3\2\2\2\u02a3\u02a4\b\6\1\2\u02a4\u02a5\5\f\7\2\u02a5"+
		"\u02ab\3\2\2\2\u02a6\u02a7\f\3\2\2\u02a7\u02a8\7(\2\2\u02a8\u02aa\5\f"+
		"\7\2\u02a9\u02a6\3\2\2\2\u02aa\u02ad\3\2\2\2\u02ab\u02a9\3\2\2\2\u02ab"+
		"\u02ac\3\2\2\2\u02ac\13\3\2\2\2\u02ad\u02ab\3\2\2\2\u02ae\u02af\5\u0138"+
		"\u009d\2\u02af\u02b0\5\u00f8}\2\u02b0\r\3\2\2\2\u02b1\u02b2\7d\2\2\u02b2"+
		"\u02b3\7\u019a\2\2\u02b3\u02b4\5\20\t\2\u02b4\u02b5\7\u009e\2\2\u02b5"+
		"\u02b6\7\65\2\2\u02b6\u02b7\7?\2\2\u02b7\u02b9\5\24\13\2\u02b8\u02ba\5"+
		"\u0098M\2\u02b9\u02b8\3\2\2\2\u02b9\u02ba\3\2\2\2\u02ba\u02c2\3\2\2\2"+
		"\u02bb\u02bc\7d\2\2\u02bc\u02bd\7\u019a\2\2\u02bd\u02be\5\20\t\2\u02be"+
		"\u02bf\7\u009e\2\2\u02bf\u02c0\7\u0113\2\2\u02c0\u02c2\3\2\2\2\u02c1\u02b1"+
		"\3\2\2\2\u02c1\u02bb\3\2\2\2\u02c2\17\3\2\2\2\u02c3\u02c4\7\"\2\2\u02c4"+
		"\u02c5\5\u01d6\u00ec\2\u02c5\u02c7\7#\2\2\u02c6\u02c8\5\u0098M\2\u02c7"+
		"\u02c6\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02ce\3\2\2\2\u02c9\u02ca\7d"+
		"\2\2\u02ca\u02cb\7C\2\2\u02cb\u02ce\5\u00dep\2\u02cc\u02ce\3\2\2\2\u02cd"+
		"\u02c3\3\2\2\2\u02cd\u02c9\3\2\2\2\u02cd\u02cc\3\2\2\2\u02ce\21\3\2\2"+
		"\2\u02cf\u02d1\5.\30\2\u02d0\u02cf\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02d2"+
		"\3\2\2\2\u02d2\u02d3\7\65\2\2\u02d3\u02d4\5 \21\2\u02d4\u02d5\7?\2\2\u02d5"+
		"\u02d7\5\24\13\2\u02d6\u02d8\5\u0088E\2\u02d7\u02d6\3\2\2\2\u02d7\u02d8"+
		"\3\2\2\2\u02d8\u02da\3\2\2\2\u02d9\u02db\5\u009aN\2\u02da\u02d9\3\2\2"+
		"\2\u02da\u02db\3\2\2\2\u02db\u02dd\3\2\2\2\u02dc\u02de\5\34\17\2\u02dd"+
		"\u02dc\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\23\3\2\2\2\u02df\u02e0\b\13\1"+
		"\2\u02e0\u02e1\5\26\f\2\u02e1\u02e7\3\2\2\2\u02e2\u02e3\f\3\2\2\u02e3"+
		"\u02e4\7(\2\2\u02e4\u02e6\5\26\f\2\u02e5\u02e2\3\2\2\2\u02e6\u02e9\3\2"+
		"\2\2\u02e7\u02e5\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\25\3\2\2\2\u02e9\u02e7"+
		"\3\2\2\2\u02ea\u02eb\5\30\r\2\u02eb\u02ec\7\32\2\2\u02ec\u02ed\5\u00f0"+
		"y\2\u02ed\u02f5\3\2\2\2\u02ee\u02ef\7\"\2\2\u02ef\u02f0\5\32\16\2\u02f0"+
		"\u02f1\7#\2\2\u02f1\u02f2\7\32\2\2\u02f2\u02f3\5\u00f0y\2\u02f3\u02f5"+
		"\3\2\2\2\u02f4\u02ea\3\2\2\2\u02f4\u02ee\3\2\2\2\u02f5\27\3\2\2\2\u02f6"+
		"\u02f7\5\u0138\u009d\2\u02f7\u02f8\5\u00f8}\2\u02f8\31\3\2\2\2\u02f9\u02fa"+
		"\b\16\1\2\u02fa\u02fb\5\30\r\2\u02fb\u0301\3\2\2\2\u02fc\u02fd\f\3\2\2"+
		"\u02fd\u02fe\7(\2\2\u02fe\u0300\5\30\r\2\u02ff\u02fc\3\2\2\2\u0300\u0303"+
		"\3\2\2\2\u0301\u02ff\3\2\2\2\u0301\u0302\3\2\2\2\u0302\33\3\2\2\2\u0303"+
		"\u0301\3\2\2\2\u0304\u0305\7\u0195\2\2\u0305\u0306\5`\61\2\u0306\35\3"+
		"\2\2\2\u0307\u0309\5.\30\2\u0308\u0307\3\2\2\2\u0308\u0309\3\2\2\2\u0309"+
		"\u030a\3\2\2\2\u030a\u030b\7\66\2\2\u030b\u030c\7X\2\2\u030c\u030e\5 "+
		"\21\2\u030d\u030f\5\"\22\2\u030e\u030d\3\2\2\2\u030e\u030f\3\2\2\2\u030f"+
		"\u0311\3\2\2\2\u0310\u0312\5\u009aN\2\u0311\u0310\3\2\2\2\u0311\u0312"+
		"\3\2\2\2\u0312\u0314\3\2\2\2\u0313\u0315\5\34\17\2\u0314\u0313\3\2\2\2"+
		"\u0314\u0315\3\2\2\2\u0315\37\3\2\2\2\u0316\u031f\5\u0096L\2\u0317\u0318"+
		"\5\u0096L\2\u0318\u0319\5\u0138\u009d\2\u0319\u031f\3\2\2\2\u031a\u031b"+
		"\5\u0096L\2\u031b\u031c\7c\2\2\u031c\u031d\5\u0138\u009d\2\u031d\u031f"+
		"\3\2\2\2\u031e\u0316\3\2\2\2\u031e\u0317\3\2\2\2\u031e\u031a\3\2\2\2\u031f"+
		"!\3\2\2\2\u0320\u0321\7a\2\2\u0321\u0322\5\u008aF\2\u0322#\3\2\2\2\u0323"+
		"\u0326\5(\25\2\u0324\u0326\5&\24\2\u0325\u0323\3\2\2\2\u0325\u0324\3\2"+
		"\2\2\u0326%\3\2\2\2\u0327\u0328\7\"\2\2\u0328\u0329\5(\25\2\u0329\u032a"+
		"\7#\2\2\u032a\u0330\3\2\2\2\u032b\u032c\7\"\2\2\u032c\u032d\5&\24\2\u032d"+
		"\u032e\7#\2\2\u032e\u0330\3\2\2\2\u032f\u0327\3\2\2\2\u032f\u032b\3\2"+
		"\2\2\u0330\'\3\2\2\2\u0331\u035f\5*\26\2\u0332\u0333\5*\26\2\u0333\u0334"+
		"\5\u01c6\u00e4\2\u0334\u035f\3\2\2\2\u0335\u0337\5*\26\2\u0336\u0338\5"+
		"\u01c6\u00e4\2\u0337\u0336\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u0339\3\2"+
		"\2\2\u0339\u033b\5> \2\u033a\u033c\5N(\2\u033b\u033a\3\2\2\2\u033b\u033c"+
		"\3\2\2\2\u033c\u035f\3\2\2\2\u033d\u033f\5*\26\2\u033e\u0340\5\u01c6\u00e4"+
		"\2\u033f\u033e\3\2\2\2\u033f\u0340\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0343"+
		"\5N(\2\u0342\u0344\5> \2\u0343\u0342\3\2\2\2\u0343\u0344\3\2\2\2\u0344"+
		"\u035f\3\2\2\2\u0345\u0346\5.\30\2\u0346\u0347\5*\26\2\u0347\u035f\3\2"+
		"\2\2\u0348\u0349\5.\30\2\u0349\u034a\5*\26\2\u034a\u034b\5\u01c6\u00e4"+
		"\2\u034b\u035f\3\2\2\2\u034c\u034d\5.\30\2\u034d\u034f\5*\26\2\u034e\u0350"+
		"\5\u01c6\u00e4\2\u034f\u034e\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0351\3"+
		"\2\2\2\u0351\u0353\5> \2\u0352\u0354\5N(\2\u0353\u0352\3\2\2\2\u0353\u0354"+
		"\3\2\2\2\u0354\u035f\3\2\2\2\u0355\u0356\5.\30\2\u0356\u0358\5*\26\2\u0357"+
		"\u0359\5\u01c6\u00e4\2\u0358\u0357\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035a"+
		"\3\2\2\2\u035a\u035c\5N(\2\u035b\u035d\5> \2\u035c\u035b\3\2\2\2\u035c"+
		"\u035d\3\2\2\2\u035d\u035f\3\2\2\2\u035e\u0331\3\2\2\2\u035e\u0332\3\2"+
		"\2\2\u035e\u0335\3\2\2\2\u035e\u033d\3\2\2\2\u035e\u0345\3\2\2\2\u035e"+
		"\u0348\3\2\2\2\u035e\u034c\3\2\2\2\u035e\u0355\3\2\2\2\u035f)\3\2\2\2"+
		"\u0360\u0361\b\26\1\2\u0361\u0364\5,\27\2\u0362\u0364\5&\24\2\u0363\u0360"+
		"\3\2\2\2\u0363\u0362\3\2\2\2\u0364\u0379\3\2\2\2\u0365\u0366\f\5\2\2\u0366"+
		"\u0368\7Q\2\2\u0367\u0369\5\u01c4\u00e3\2\u0368\u0367\3\2\2\2\u0368\u0369"+
		"\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u0378\5*\26\6\u036b\u036c\f\4\2\2\u036c"+
		"\u036e\7\u00bf\2\2\u036d\u036f\5\u01c4\u00e3\2\u036e\u036d\3\2\2\2\u036e"+
		"\u036f\3\2\2\2\u036f\u0370\3\2\2\2\u0370\u0378\5*\26\5\u0371\u0372\f\3"+
		"\2\2\u0372\u0374\7\u00c0\2\2\u0373\u0375\5\u01c4\u00e3\2\u0374\u0373\3"+
		"\2\2\2\u0374\u0375\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u0378\5*\26\4\u0377"+
		"\u0365\3\2\2\2\u0377\u036b\3\2\2\2\u0377\u0371\3\2\2\2\u0378\u037b\3\2"+
		"\2\2\u0379\u0377\3\2\2\2\u0379\u037a\3\2\2\2\u037a+\3\2\2\2\u037b\u0379"+
		"\3\2\2\2\u037c\u037e\7\63\2\2\u037d\u037f\7t\2\2\u037e\u037d\3\2\2\2\u037e"+
		"\u037f\3\2\2\2\u037f\u0381\3\2\2\2\u0380\u0382\5`\61\2\u0381\u0380\3\2"+
		"\2\2\u0381\u0382\3\2\2\2\u0382\u0384\3\2\2\2\u0383\u0385\5\60\31\2\u0384"+
		"\u0383\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0387\3\2\2\2\u0386\u0388\5\u0088"+
		"E\2\u0387\u0386\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u038a\3\2\2\2\u0389"+
		"\u038b\5\u0098M\2\u038a\u0389\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038d"+
		"\3\2\2\2\u038c\u038e\5d\63\2\u038d\u038c\3\2\2\2\u038d\u038e\3\2\2\2\u038e"+
		"\u0390\3\2\2\2\u038f\u0391\5\u009cO\2\u0390\u038f\3\2\2\2\u0390\u0391"+
		"\3\2\2\2\u0391\u0393\3\2\2\2\u0392\u0394\5r:\2\u0393\u0392\3\2\2\2\u0393"+
		"\u0394\3\2\2\2\u0394\u03ae\3\2\2\2\u0395\u0396\7\63\2\2\u0396\u0397\5"+
		"\u01ce\u00e8\2\u0397\u0399\5`\61\2\u0398\u039a\5\60\31\2\u0399\u0398\3"+
		"\2\2\2\u0399\u039a\3\2\2\2\u039a\u039c\3\2\2\2\u039b\u039d\5\u0088E\2"+
		"\u039c\u039b\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u039f\3\2\2\2\u039e\u03a0"+
		"\5\u0098M\2\u039f\u039e\3\2\2\2\u039f\u03a0\3\2\2\2\u03a0\u03a2\3\2\2"+
		"\2\u03a1\u03a3\5d\63\2\u03a2\u03a1\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a5"+
		"\3\2\2\2\u03a4\u03a6\5\u009cO\2\u03a5\u03a4\3\2\2\2\u03a5\u03a6\3\2\2"+
		"\2\u03a6\u03a8\3\2\2\2\u03a7\u03a9\5r:\2\u03a8\u03a7\3\2\2\2\u03a8\u03a9"+
		"\3\2\2\2\u03a9\u03ae\3\2\2\2\u03aa\u03ae\5P)\2\u03ab\u03ac\7@\2\2\u03ac"+
		"\u03ae\5\u0096L\2\u03ad\u037c\3\2\2\2\u03ad\u0395\3\2\2\2\u03ad\u03aa"+
		"\3\2\2\2\u03ad\u03ab\3\2\2\2\u03ae-\3\2\2\2\u03af\u03b0\7P\2\2\u03b0\u03b5"+
		"\5\64\33\2\u03b1\u03b2\7P\2\2\u03b2\u03b3\7\u013c\2\2\u03b3\u03b5\5\64"+
		"\33\2\u03b4\u03af\3\2\2\2\u03b4\u03b1\3\2\2\2\u03b5/\3\2\2\2\u03b6\u03b7"+
		"\7N\2\2\u03b7\u03b8\5\62\32\2\u03b8\61\3\2\2\2\u03b9\u03bb\7\u0130\2\2"+
		"\u03ba\u03bc\7@\2\2\u03bb\u03ba\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03bd"+
		"\3\2\2\2\u03bd\u03e6\5L\'\2\u03be\u03c0\7\u012f\2\2\u03bf\u03c1\7@\2\2"+
		"\u03c0\u03bf\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03e6"+
		"\5L\'\2\u03c3\u03c4\7\u00a3\2\2\u03c4\u03c6\7\u0130\2\2\u03c5\u03c7\7"+
		"@\2\2\u03c6\u03c5\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c8\3\2\2\2\u03c8"+
		"\u03e6\5L\'\2\u03c9\u03ca\7\u00a3\2\2\u03ca\u03cc\7\u012f\2\2\u03cb\u03cd"+
		"\7@\2\2\u03cc\u03cb\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce"+
		"\u03e6\5L\'\2\u03cf\u03d0\7\u0101\2\2\u03d0\u03d2\7\u0130\2\2\u03d1\u03d3"+
		"\7@\2\2\u03d2\u03d1\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4"+
		"\u03e6\5L\'\2\u03d5\u03d6\7\u0101\2\2\u03d6\u03d8\7\u012f\2\2\u03d7\u03d9"+
		"\7@\2\2\u03d8\u03d7\3\2\2\2\u03d8\u03d9\3\2\2\2\u03d9\u03da\3\2\2\2\u03da"+
		"\u03e6\5L\'\2\u03db\u03dd\7\u0132\2\2\u03dc\u03de\7@\2\2\u03dd\u03dc\3"+
		"\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e6\5L\'\2\u03e0"+
		"\u03e2\7@\2\2\u03e1\u03e0\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2\u03e3\3\2"+
		"\2\2\u03e3\u03e6\5L\'\2\u03e4\u03e6\5L\'\2\u03e5\u03b9\3\2\2\2\u03e5\u03be"+
		"\3\2\2\2\u03e5\u03c3\3\2\2\2\u03e5\u03c9\3\2\2\2\u03e5\u03cf\3\2\2\2\u03e5"+
		"\u03d5\3\2\2\2\u03e5\u03db\3\2\2\2\u03e5\u03e1\3\2\2\2\u03e5\u03e4\3\2"+
		"\2\2\u03e6\63\3\2\2\2\u03e7\u03e8\b\33\1\2\u03e8\u03e9\5\66\34\2\u03e9"+
		"\u03ef\3\2\2\2\u03ea\u03eb\f\3\2\2\u03eb\u03ec\7(\2\2\u03ec\u03ee\5\66"+
		"\34\2\u03ed\u03ea\3\2\2\2\u03ee\u03f1\3\2\2\2\u03ef\u03ed\3\2\2\2\u03ef"+
		"\u03f0\3\2\2\2\u03f0\65\3\2\2\2\u03f1\u03ef\3\2\2\2\u03f2\u03f3\5\u00de"+
		"p\2\u03f3\u03f4\5:\36\2\u03f4\u03f5\7c\2\2\u03f5\u03f6\58\35\2\u03f6\u03f7"+
		"\7\"\2\2\u03f7\u03f8\5<\37\2\u03f8\u03f9\7#\2\2\u03f9\67\3\2\2\2\u03fa"+
		"\u03ff\7\u017f\2\2\u03fb\u03fc\7m\2\2\u03fc\u03ff\7\u017f\2\2\u03fd\u03ff"+
		"\3\2\2\2\u03fe\u03fa\3\2\2\2\u03fe\u03fb\3\2\2\2\u03fe\u03fd\3\2\2\2\u03ff"+
		"9\3\2\2\2\u0400\u0401\7\"\2\2\u0401\u0402\5\u01bc\u00df\2\u0402\u0403"+
		"\7#\2\2\u0403\u0406\3\2\2\2\u0404\u0406\3\2\2\2\u0405\u0400\3\2\2\2\u0405"+
		"\u0404\3\2\2\2\u0406;\3\2\2\2\u0407\u040c\5$\23\2\u0408\u040c\5\2\2\2"+
		"\u0409\u040c\5\22\n\2\u040a\u040c\5\36\20\2\u040b\u0407\3\2\2\2\u040b"+
		"\u0408\3\2\2\2\u040b\u0409\3\2\2\2\u040b\u040a\3\2\2\2\u040c=\3\2\2\2"+
		"\u040d\u0412\5@!\2\u040e\u040f\7h\2\2\u040f\u0410\7\u00df\2\2\u0410\u0412"+
		"\7\u0117\2\2\u0411\u040d\3\2\2\2\u0411\u040e\3\2\2\2\u0412?\3\2\2\2\u0413"+
		"\u0414\b!\1\2\u0414\u0415\5B\"\2\u0415\u041a\3\2\2\2\u0416\u0417\f\3\2"+
		"\2\u0417\u0419\5B\"\2\u0418\u0416\3\2\2\2\u0419\u041c\3\2\2\2\u041a\u0418"+
		"\3\2\2\2\u041a\u041b\3\2\2\2\u041bA\3\2\2\2\u041c\u041a\3\2\2\2\u041d"+
		"\u041f\5F$\2\u041e\u0420\5H%\2\u041f\u041e\3\2\2\2\u041f\u0420\3\2\2\2"+
		"\u0420\u0422\3\2\2\2\u0421\u0423\5D#\2\u0422\u0421\3\2\2\2\u0422\u0423"+
		"\3\2\2\2\u0423C\3\2\2\2\u0424\u0428\7\u018c\2\2\u0425\u0426\7\3\2\2\u0426"+
		"\u0428\7\u018d\2\2\u0427\u0424\3\2\2\2\u0427\u0425\3\2\2\2\u0428E\3\2"+
		"\2\2\u0429\u042a\7h\2\2\u042a\u0435\7\65\2\2\u042b\u042c\7h\2\2\u042c"+
		"\u042d\7\u00dc\2\2\u042d\u042e\7G\2\2\u042e\u0435\7\65\2\2\u042f\u0430"+
		"\7h\2\2\u0430\u0435\7\u0181\2\2\u0431\u0432\7h\2\2\u0432\u0433\7G\2\2"+
		"\u0433\u0435\7\u0181\2\2\u0434\u0429\3\2\2\2\u0434\u042b\3\2\2\2\u0434"+
		"\u042f\3\2\2\2\u0434\u0431\3\2\2\2\u0435G\3\2\2\2\u0436\u0437\7\u0139"+
		"\2\2\u0437\u0438\5J&\2\u0438I\3\2\2\2\u0439\u043a\b&\1\2\u043a\u043b\5"+
		"L\'\2\u043b\u0441\3\2\2\2\u043c\u043d\f\3\2\2\u043d\u043e\7(\2\2\u043e"+
		"\u0440\5L\'\2\u043f\u043c\3\2\2\2\u0440\u0443\3\2\2\2\u0441\u043f\3\2"+
		"\2\2\u0441\u0442\3\2\2\2\u0442K\3\2\2\2\u0443\u0441\3\2\2\2\u0444\u0449"+
		"\5\u0138\u009d\2\u0445\u0446\5\u0138\u009d\2\u0446\u0447\5\u00f6|\2\u0447"+
		"\u0449\3\2\2\2\u0448\u0444\3\2\2\2\u0448\u0445\3\2\2\2\u0449M\3\2\2\2"+
		"\u044a\u044b\5R*\2\u044b\u044c\5T+\2\u044c\u0453\3\2\2\2\u044d\u044e\5"+
		"T+\2\u044e\u044f\5R*\2\u044f\u0453\3\2\2\2\u0450\u0453\5R*\2\u0451\u0453"+
		"\5T+\2\u0452\u044a\3\2\2\2\u0452\u044d\3\2\2\2\u0452\u0450\3\2\2\2\u0452"+
		"\u0451\3\2\2\2\u0453O\3\2\2\2\u0454\u0455\b)\1\2\u0455\u0456\7O\2\2\u0456"+
		"\u0457\7\"\2\2\u0457\u0458\5\u015c\u00af\2\u0458\u0459\7#\2\2\u0459\u0462"+
		"\3\2\2\2\u045a\u045b\f\3\2\2\u045b\u045c\7(\2\2\u045c\u045d\7\"\2\2\u045d"+
		"\u045e\5\u015c\u00af\2\u045e\u045f\7#\2\2\u045f\u0461\3\2\2\2\u0460\u045a"+
		"\3\2\2\2\u0461\u0464\3\2\2\2\u0462\u0460\3\2\2\2\u0462\u0463\3\2\2\2\u0463"+
		"Q\3\2\2\2\u0464\u0462\3\2\2\2\u0465\u0466\7}\2\2\u0466\u0485\5V,\2\u0467"+
		"\u0468\7}\2\2\u0468\u0469\5V,\2\u0469\u046a\7(\2\2\u046a\u046b\5X-\2\u046b"+
		"\u0485\3\2\2\2\u046c\u046d\7\u00c2\2\2\u046d\u046e\5^\60\2\u046e\u046f"+
		"\5Z.\2\u046f\u0470\5\\/\2\u0470\u0471\7\u0117\2\2\u0471\u0485\3\2\2\2"+
		"\u0472\u0473\7\u00c2\2\2\u0473\u0474\5^\60\2\u0474\u0475\5Z.\2\u0475\u0476"+
		"\5\\/\2\u0476\u0477\7P\2\2\u0477\u0478\7\u00c1\2\2\u0478\u0485\3\2\2\2"+
		"\u0479\u047a\7\u00c2\2\2\u047a\u047b\5^\60\2\u047b\u047c\5\\/\2\u047c"+
		"\u047d\7\u0117\2\2\u047d\u0485\3\2\2\2\u047e\u047f\7\u00c2\2\2\u047f\u0480"+
		"\5^\60\2\u0480\u0481\5\\/\2\u0481\u0482\7P\2\2\u0482\u0483\7\u00c1\2\2"+
		"\u0483\u0485\3\2\2\2\u0484\u0465\3\2\2\2\u0484\u0467\3\2\2\2\u0484\u046c"+
		"\3\2\2\2\u0484\u0472\3\2\2\2\u0484\u0479\3\2\2\2\u0484\u047e\3\2\2\2\u0485"+
		"S\3\2\2\2\u0486\u0487\7~\2\2\u0487\u048d\5X-\2\u0488\u0489\7~\2\2\u0489"+
		"\u048a\5Z.\2\u048a\u048b\5\\/\2\u048b\u048d\3\2\2\2\u048c\u0486\3\2\2"+
		"\2\u048c\u0488\3\2\2\2\u048dU\3\2\2\2\u048e\u0491\5\u00f0y\2\u048f\u0491"+
		"\7t\2\2\u0490\u048e\3\2\2\2\u0490\u048f\3\2\2\2\u0491W\3\2\2\2\u0492\u0493"+
		"\5\u00f0y\2\u0493Y\3\2\2\2\u0494\u049a\5\u00f4{\2\u0495\u0496\7\21\2\2"+
		"\u0496\u049a\7\u0223\2\2\u0497\u0498\7\22\2\2\u0498\u049a\7\u0223\2\2"+
		"\u0499\u0494\3\2\2\2\u0499\u0495\3\2\2\2\u0499\u0497\3\2\2\2\u049a[\3"+
		"\2\2\2\u049b\u049c\t\3\2\2\u049c]\3\2\2\2\u049d\u049e\t\4\2\2\u049e_\3"+
		"\2\2\2\u049f\u04a0\b\61\1\2\u04a0\u04a1\5b\62\2\u04a1\u04a7\3\2\2\2\u04a2"+
		"\u04a3\f\3\2\2\u04a3\u04a4\7(\2\2\u04a4\u04a6\5b\62\2\u04a5\u04a2\3\2"+
		"\2\2\u04a6\u04a9\3\2\2\2\u04a7\u04a5\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8"+
		"a\3\2\2\2\u04a9\u04a7\3\2\2\2\u04aa\u04ab\5\u0138\u009d\2\u04ab\u04ac"+
		"\7\27\2\2\u04ac\u04b7\3\2\2\2\u04ad\u04ae\5\u00f0y\2\u04ae\u04af\7c\2"+
		"\2\u04af\u04b0\5\u00ccg\2\u04b0\u04b7\3\2\2\2\u04b1\u04b2\5\u00f0y\2\u04b2"+
		"\u04b3\5\u00ccg\2\u04b3\u04b7\3\2\2\2\u04b4\u04b7\5\u00f0y\2\u04b5\u04b7"+
		"\7\23\2\2\u04b6\u04aa\3\2\2\2\u04b6\u04ad\3\2\2\2\u04b6\u04b1\3\2\2\2"+
		"\u04b6\u04b4\3\2\2\2\u04b6\u04b5\3\2\2\2\u04b7c\3\2\2\2\u04b8\u04b9\7"+
		"x\2\2\u04b9\u04ba\7y\2\2\u04ba\u04bb\5f\64\2\u04bbe\3\2\2\2\u04bc\u04c1"+
		"\5h\65\2\u04bd\u04be\7(\2\2\u04be\u04c0\5h\65\2\u04bf\u04bd\3\2\2\2\u04c0"+
		"\u04c3\3\2\2\2\u04c1\u04bf\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2g\3\2\2\2"+
		"\u04c3\u04c1\3\2\2\2\u04c4\u04ca\5\u00f0y\2\u04c5\u04ca\5j\66\2\u04c6"+
		"\u04ca\5n8\2\u04c7\u04ca\5l\67\2\u04c8\u04ca\5p9\2\u04c9\u04c4\3\2\2\2"+
		"\u04c9\u04c5\3\2\2\2\u04c9\u04c6\3\2\2\2\u04c9\u04c7\3\2\2\2\u04c9\u04c8"+
		"\3\2\2\2\u04cai\3\2\2\2\u04cb\u04cc\7\"\2\2\u04cc\u04cd\7#\2\2\u04cdk"+
		"\3\2\2\2\u04ce\u04cf\7\u0182\2\2\u04cf\u04d0\7\"\2\2\u04d0\u04d1\5\u015c"+
		"\u00af\2\u04d1\u04d2\7#\2\2\u04d2m\3\2\2\2\u04d3\u04d4\7\u00c3\2\2\u04d4"+
		"\u04d5\7\"\2\2\u04d5\u04d6\5\u015c\u00af\2\u04d6\u04d7\7#\2\2\u04d7o\3"+
		"\2\2\2\u04d8\u04d9\7\u00c4\2\2\u04d9\u04da\7\u00c5\2\2\u04da\u04db\7\""+
		"\2\2\u04db\u04dc\5f\64\2\u04dc\u04dd\7#\2\2\u04ddq\3\2\2\2\u04de\u04df"+
		"\7\u00c6\2\2\u04df\u04e0\5t;\2\u04e0s\3\2\2\2\u04e1\u04e2\b;\1\2\u04e2"+
		"\u04e3\5v<\2\u04e3\u04e9\3\2\2\2\u04e4\u04e5\f\3\2\2\u04e5\u04e6\7(\2"+
		"\2\u04e6\u04e8\5v<\2\u04e7\u04e4\3\2\2\2\u04e8\u04eb\3\2\2\2\u04e9\u04e7"+
		"\3\2\2\2\u04e9\u04ea\3\2\2\2\u04eau\3\2\2\2\u04eb\u04e9\3\2\2\2\u04ec"+
		"\u04ed\5\u0138\u009d\2\u04ed\u04ee\7c\2\2\u04ee\u04ef\5x=\2\u04efw\3\2"+
		"\2\2\u04f0\u04f2\7\"\2\2\u04f1\u04f3\5z>\2\u04f2\u04f1\3\2\2\2\u04f2\u04f3"+
		"\3\2\2\2\u04f3\u04f5\3\2\2\2\u04f4\u04f6\5|?\2\u04f5\u04f4\3\2\2\2\u04f5"+
		"\u04f6\3\2\2\2\u04f6\u04f8\3\2\2\2\u04f7\u04f9\5\u01c6\u00e4\2\u04f8\u04f7"+
		"\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9\u04fb\3\2\2\2\u04fa\u04fc\5~@\2\u04fb"+
		"\u04fa\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\u04fd\3\2\2\2\u04fd\u04fe\7#"+
		"\2\2\u04fey\3\2\2\2\u04ff\u0500\5\u0138\u009d\2\u0500{\3\2\2\2\u0501\u0502"+
		"\7\u00d3\2\2\u0502\u0503\7y\2\2\u0503\u0504\5\u015c\u00af\2\u0504}\3\2"+
		"\2\2\u0505\u0506\7\u011e\2\2\u0506\u0507\5\u0080A\2\u0507\u0508\5\u0084"+
		"C\2\u0508\u0512\3\2\2\2\u0509\u050a\7\u00e2\2\2\u050a\u050b\5\u0080A\2"+
		"\u050b\u050c\5\u0084C\2\u050c\u0512\3\2\2\2\u050d\u050e\7\u013b\2\2\u050e"+
		"\u050f\5\u0080A\2\u050f\u0510\5\u0084C\2\u0510\u0512\3\2\2\2\u0511\u0505"+
		"\3\2\2\2\u0511\u0509\3\2\2\2\u0511\u050d\3\2\2\2\u0512\177\3\2\2\2\u0513"+
		"\u051a\5\u0082B\2\u0514\u0515\7r\2\2\u0515\u0516\5\u0082B\2\u0516\u0517"+
		"\7j\2\2\u0517\u0518\5\u0082B\2\u0518\u051a\3\2\2\2\u0519\u0513\3\2\2\2"+
		"\u0519\u0514\3\2\2\2\u051a\u0081\3\2\2\2\u051b\u051c\7\u0131\2\2\u051c"+
		"\u0528\7\u011d\2\2\u051d\u051e\7\u0131\2\2\u051e\u0528\7\u00ff\2\2\u051f"+
		"\u0520\7\u0098\2\2\u0520\u0528\7\u00d4\2\2\u0521\u0522\5\u00f0y\2\u0522"+
		"\u0523\7\u011d\2\2\u0523\u0528\3\2\2\2\u0524\u0525\5\u00f0y\2\u0525\u0526"+
		"\7\u00ff\2\2\u0526\u0528\3\2\2\2\u0527\u051b\3\2\2\2\u0527\u051d\3\2\2"+
		"\2\u0527\u051f\3\2\2\2\u0527\u0521\3\2\2\2\u0527\u0524\3\2\2\2\u0528\u0083"+
		"\3\2\2\2\u0529\u052a\7\u00d1\2\2\u052a\u052b\7\u0098\2\2\u052b\u0535\7"+
		"\u00d4\2\2\u052c\u052d\7\u00d1\2\2\u052d\u0535\7x\2\2\u052e\u052f\7\u00d1"+
		"\2\2\u052f\u0535\7\u00c1\2\2\u0530\u0531\7\u00d1\2\2\u0531\u0532\7\u00dc"+
		"\2\2\u0532\u0535\7\u00c7\2\2\u0533\u0535\3\2\2\2\u0534\u0529\3\2\2\2\u0534"+
		"\u052c\3\2\2\2\u0534\u052e\3\2\2\2\u0534\u0530\3\2\2\2\u0534\u0533\3\2"+
		"\2\2\u0535\u0085\3\2\2\2\u0536\u0539\5\u00ccg\2\u0537\u0539\7\u0222\2"+
		"\2\u0538\u0536\3\2\2\2\u0538\u0537\3\2\2\2\u0539\u0087\3\2\2\2\u053a\u053b"+
		"\7X\2\2\u053b\u053c\5\u008aF\2\u053c\u0089\3\2\2\2\u053d\u053e\bF\1\2"+
		"\u053e\u053f\5\u008cG\2\u053f\u0545\3\2\2\2\u0540\u0541\f\3\2\2\u0541"+
		"\u0542\7(\2\2\u0542\u0544\5\u008cG\2\u0543\u0540\3\2\2\2\u0544\u0547\3"+
		"\2\2\2\u0545\u0543\3\2\2\2\u0545\u0546\3\2\2\2\u0546\u008b\3\2\2\2\u0547"+
		"\u0545\3\2\2\2\u0548\u0549\bG\1\2\u0549\u054b\5\u0096L\2\u054a\u054c\5"+
		"\u01ba\u00de\2\u054b\u054a\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u0576\3\2"+
		"\2\2\u054d\u054f\5\u0096L\2\u054e\u0550\5\u01ba\u00de\2\u054f\u054e\3"+
		"\2\2\2\u054f\u0550\3\2\2\2\u0550\u0551\3\2\2\2\u0551\u0552\5\u01c0\u00e1"+
		"\2\u0552\u0576\3\2\2\2\u0553\u0555\5\u013c\u009f\2\u0554\u0556\5\u01be"+
		"\u00e0\2\u0555\u0554\3\2\2\2\u0555\u0556\3\2\2\2\u0556\u0576\3\2\2\2\u0557"+
		"\u0558\7\u0196\2\2\u0558\u055a\5\u013c\u009f\2\u0559\u055b\5\u01be\u00e0"+
		"\2\u055a\u0559\3\2\2\2\u055a\u055b\3\2\2\2\u055b\u0576\3\2\2\2\u055c\u055e"+
		"\5\u013e\u00a0\2\u055d\u055f\5\u01ba\u00de\2\u055e\u055d\3\2\2\2\u055e"+
		"\u055f\3\2\2\2\u055f\u0576\3\2\2\2\u0560\u0561\7\u0196\2\2\u0561\u0563"+
		"\5\u013e\u00a0\2\u0562\u0564\5\u01ba\u00de\2\u0563\u0562\3\2\2\2\u0563"+
		"\u0564\3\2\2\2\u0564\u0576\3\2\2\2\u0565\u0567\5&\24\2\u0566\u0568\5\u01ba"+
		"\u00de\2\u0567\u0566\3\2\2\2\u0567\u0568\3\2\2\2\u0568\u0576\3\2\2\2\u0569"+
		"\u056a\7\u0196\2\2\u056a\u056c\5&\24\2\u056b\u056d\5\u01ba\u00de\2\u056c"+
		"\u056b\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u0576\3\2\2\2\u056e\u056f\7\""+
		"\2\2\u056f\u0570\5\u008cG\2\u0570\u0571\5\u008eH\2\u0571\u0573\7#\2\2"+
		"\u0572\u0574\5\u01ba\u00de\2\u0573\u0572\3\2\2\2\u0573\u0574\3\2\2\2\u0574"+
		"\u0576\3\2\2\2\u0575\u0548\3\2\2\2\u0575\u054d\3\2\2\2\u0575\u0553\3\2"+
		"\2\2\u0575\u0557\3\2\2\2\u0575\u055c\3\2\2\2\u0575\u0560\3\2\2\2\u0575"+
		"\u0565\3\2\2\2\u0575\u0569\3\2\2\2\u0575\u056e\3\2\2\2\u0576\u057b\3\2"+
		"\2\2\u0577\u0578\f\4\2\2\u0578\u057a\5\u008eH\2\u0579\u0577\3\2\2\2\u057a"+
		"\u057d\3\2\2\2\u057b\u0579\3\2\2\2\u057b\u057c\3\2\2\2\u057c\u008d\3\2"+
		"\2\2\u057d\u057b\3\2\2\2\u057e\u057f\7`\2\2\u057f\u0580\7Z\2\2\u0580\u0593"+
		"\5\u008cG\2\u0581\u0582\5\u0090I\2\u0582\u0583\7Z\2\2\u0583\u0584\5\u008c"+
		"G\2\u0584\u0585\5\u0094K\2\u0585\u0593\3\2\2\2\u0586\u0587\7Z\2\2\u0587"+
		"\u0588\5\u008cG\2\u0588\u0589\5\u0094K\2\u0589\u0593\3\2\2\2\u058a\u058b"+
		"\7Y\2\2\u058b\u058c\5\u0090I\2\u058c\u058d\7Z\2\2\u058d\u058e\5\u008c"+
		"G\2\u058e\u0593\3\2\2\2\u058f\u0590\7Y\2\2\u0590\u0591\7Z\2\2\u0591\u0593"+
		"\5\u008cG\2\u0592\u057e\3\2\2\2\u0592\u0581\3\2\2\2\u0592\u0586\3\2\2"+
		"\2\u0592\u058a\3\2\2\2\u0592\u058f\3\2\2\2\u0593\u008f\3\2\2\2\u0594\u0596"+
		"\7[\2\2\u0595\u0597\5\u0092J\2\u0596\u0595\3\2\2\2\u0596\u0597\3\2\2\2"+
		"\u0597\u05a2\3\2\2\2\u0598\u059a\7^\2\2\u0599\u059b\5\u0092J\2\u059a\u0599"+
		"\3\2\2\2\u059a\u059b\3\2\2\2\u059b\u05a2\3\2\2\2\u059c\u059e\7_\2\2\u059d"+
		"\u059f\5\u0092J\2\u059e\u059d\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a2"+
		"\3\2\2\2\u05a0\u05a2\7\\\2\2\u05a1\u0594\3\2\2\2\u05a1\u0598\3\2\2\2\u05a1"+
		"\u059c\3\2\2\2\u05a1\u05a0\3\2\2\2\u05a2\u0091\3\2\2\2\u05a3\u05a4\7]"+
		"\2\2\u05a4\u0093\3\2\2\2\u05a5\u05a6\7a\2\2\u05a6\u05a7\7\"\2\2\u05a7"+
		"\u05a8\5\u01bc\u00df\2\u05a8\u05a9\7#\2\2\u05a9\u05ad\3\2\2\2\u05aa\u05ab"+
		"\7d\2\2\u05ab\u05ad\5\u00f0y\2\u05ac\u05a5\3\2\2\2\u05ac\u05aa\3\2\2\2"+
		"\u05ad\u0095\3\2\2\2\u05ae\u05ba\5L\'\2\u05af\u05b0\5L\'\2\u05b0\u05b1"+
		"\7\23\2\2\u05b1\u05ba\3\2\2\2\u05b2\u05b3\7\u0117\2\2\u05b3\u05ba\5L\'"+
		"\2\u05b4\u05b5\7\u0117\2\2\u05b5\u05b6\7\"\2\2\u05b6\u05b7\5L\'\2\u05b7"+
		"\u05b8\7#\2\2\u05b8\u05ba\3\2\2\2\u05b9\u05ae\3\2\2\2\u05b9\u05af\3\2"+
		"\2\2\u05b9\u05b2\3\2\2\2\u05b9\u05b4\3\2\2\2\u05ba\u0097\3\2\2\2\u05bb"+
		"\u05bc\7b\2\2\u05bc\u05bd\5\u00f0y\2\u05bd\u0099\3\2\2\2\u05be\u05c4\5"+
		"\u0098M\2\u05bf\u05c0\7b\2\2\u05c0\u05c1\7\u0098\2\2\u05c1\u05c2\7\u0139"+
		"\2\2\u05c2\u05c4\5\u00eex\2\u05c3\u05be\3\2\2\2\u05c3\u05bf\3\2\2\2\u05c4"+
		"\u009b\3\2\2\2\u05c5\u05c6\7|\2\2\u05c6\u05c7\5\u00f0y\2\u05c7\u009d\3"+
		"\2\2\2\u05c8\u05c9\7\u009e\2\2\u05c9\u05ca\5\u00a0Q\2\u05ca\u009f\3\2"+
		"\2\2\u05cb\u05cd\5\u00a2R\2\u05cc\u05cb\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce"+
		"\u05cc\3\2\2\2\u05ce\u05cf\3\2\2\2\u05cf\u00a1\3\2\2\2\u05d0\u05d4\7\u0222"+
		"\2\2\u05d1\u05d2\7\u010b\2\2\u05d2\u05d4\5\u0250\u0129\2\u05d3\u05d0\3"+
		"\2\2\2\u05d3\u05d1\3\2\2\2\u05d4\u00a3\3\2\2\2\u05d5\u05d7\7\u0200\2\2"+
		"\u05d6\u05d8\7@\2\2\u05d7\u05d6\3\2\2\2\u05d7\u05d8\3\2\2\2\u05d8\u05d9"+
		"\3\2\2\2\u05d9\u05de\5\u026a\u0136\2\u05da\u05db\7s\2\2\u05db\u05dc\5"+
		"\u00a6T\2\u05dc\u05dd\7\u01dc\2\2\u05dd\u05df\3\2\2\2\u05de\u05da\3\2"+
		"\2\2\u05de\u05df\3\2\2\2\u05df\u05e1\3\2\2\2\u05e0\u05e2\7\u018c\2\2\u05e1"+
		"\u05e0\3\2\2\2\u05e1\u05e2\3\2\2\2\u05e2\u00a5\3\2\2\2\u05e3\u05e4\7\u019f"+
		"\2\2\u05e4\u05f4\7\u0181\2\2\u05e5\u05e6\7\u00d4\2\2\u05e6\u05f4\7\u0181"+
		"\2\2\u05e7\u05e8\7\u00d4\2\2\u05e8\u05f4\7\u01cd\2\2\u05e9\u05ea\7\u0181"+
		"\2\2\u05ea\u05eb\7\65\2\2\u05eb\u05f4\7\u01cd\2\2\u05ec\u05f4\7\u0181"+
		"\2\2\u05ed\u05ee\7\u0181\2\2\u05ee\u05ef\7\u00d4\2\2\u05ef\u05f4\7\u01cd"+
		"\2\2\u05f0\u05f4\7\u01cd\2\2\u05f1\u05f2\7\u019f\2\2\u05f2\u05f4\7\u01cd"+
		"\2\2\u05f3\u05e3\3\2\2\2\u05f3\u05e5\3\2\2\2\u05f3\u05e7\3\2\2\2\u05f3"+
		"\u05e9\3\2\2\2\u05f3\u05ec\3\2\2\2\u05f3\u05ed\3\2\2\2\u05f3\u05f0\3\2"+
		"\2\2\u05f3\u05f1\3\2\2\2\u05f4\u00a7\3\2\2\2\u05f5\u05f6\7\u01b1\2\2\u05f6"+
		"\u00a9\3\2\2\2\u05f7\u05f9\7\u01ab\2\2\u05f8\u05fa\7\u00cf\2\2\u05f9\u05f8"+
		"\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u0600\5L\'\2\u05fc"+
		"\u05fd\7\"\2\2\u05fd\u05fe\5\u0222\u0112\2\u05fe\u05ff\7#\2\2\u05ff\u0601"+
		"\3\2\2\2\u0600\u05fc\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0602\3\2\2\2\u0602"+
		"\u0604\t\5\2\2\u0603\u0605\7\u01e3\2\2\u0604\u0603\3\2\2\2\u0604\u0605"+
		"\3\2\2\2\u0605\u0606\3\2\2\2\u0606\u0608\t\6\2\2\u0607\u0609\5\u00bc_"+
		"\2\u0608\u0607\3\2\2\2\u0608\u0609\3\2\2\2\u0609\u060b\3\2\2\2\u060a\u060c"+
		"\7P\2\2\u060b\u060a\3\2\2\2\u060b\u060c\3\2\2\2\u060c\u060d\3\2\2\2\u060d"+
		"\u060f\5\u00acW\2\u060e\u0610\5\u0098M\2\u060f\u060e\3\2\2\2\u060f\u0610"+
		"\3\2\2\2\u0610\u0620\3\2\2\2\u0611\u0612\7\u01ab\2\2\u0612\u0613\7\"\2"+
		"\2\u0613\u0614\5<\37\2\u0614\u0615\7#\2\2\u0615\u0617\7i\2\2\u0616\u0618"+
		"\7\u01e3\2\2\u0617\u0616\3\2\2\2\u0617\u0618\3\2\2\2\u0618\u0619\3\2\2"+
		"\2\u0619\u061b\t\6\2\2\u061a\u061c\7P\2\2\u061b\u061a\3\2\2\2\u061b\u061c"+
		"\3\2\2\2\u061c\u061d\3\2\2\2\u061d\u061e\5\u00acW\2\u061e\u0620\3\2\2"+
		"\2\u061f\u05f7\3\2\2\2\u061f\u0611\3\2\2\2\u0620\u00ab\3\2\2\2\u0621\u0627"+
		"\5\u00b8]\2\u0622\u0623\7\"\2\2\u0623\u0624\5\u00aeX\2\u0624\u0625\7#"+
		"\2\2\u0625\u0627\3\2\2\2\u0626\u0621\3\2\2\2\u0626\u0622\3\2\2\2\u0627"+
		"\u00ad\3\2\2\2\u0628\u062d\5\u00b0Y\2\u0629\u062a\7(\2\2\u062a\u062c\5"+
		"\u00b0Y\2\u062b\u0629\3\2\2\2\u062c\u062f\3\2\2\2\u062d\u062b\3\2\2\2"+
		"\u062d\u062e\3\2\2\2\u062e\u00af\3\2\2\2\u062f\u062d\3\2\2\2\u0630\u0631"+
		"\5\u0230\u0119\2\u0631\u0632\5\u00b2Z\2\u0632\u00b1\3\2\2\2\u0633\u063b"+
		"\5\u01f8\u00fd\2\u0634\u063b\5\u020a\u0106\2\u0635\u063b\7\23\2\2\u0636"+
		"\u0637\7\"\2\2\u0637\u0638\5\u00b4[\2\u0638\u0639\7#\2\2\u0639\u063b\3"+
		"\2\2\2\u063a\u0633\3\2\2\2\u063a\u0634\3\2\2\2\u063a\u0635\3\2\2\2\u063a"+
		"\u0636\3\2\2\2\u063b\u00b3\3\2\2\2\u063c\u0641\5\u00b6\\\2\u063d\u063e"+
		"\7(\2\2\u063e\u0640\5\u00b6\\\2\u063f\u063d\3\2\2\2\u0640\u0643\3\2\2"+
		"\2\u0641\u063f\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u00b5\3\2\2\2\u0643\u0641"+
		"\3\2\2\2\u0644\u0645\5\u01f8\u00fd\2\u0645\u00b7\3\2\2\2\u0646\u0648\5"+
		"\u00ba^\2\u0647\u0646\3\2\2\2\u0648\u064b\3\2\2\2\u0649\u0647\3\2\2\2"+
		"\u0649\u064a\3\2\2\2\u064a\u00b9\3\2\2\2\u064b\u0649\3\2\2\2\u064c\u0674"+
		"\7\u00cf\2\2\u064d\u0674\7\u021b\2\2\u064e\u0650\7\u01c4\2\2\u064f\u0651"+
		"\7c\2\2\u0650\u064f\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u0652\3\2\2\2\u0652"+
		"\u0674\7\u0222\2\2\u0653\u0655\7n\2\2\u0654\u0656\7c\2\2\u0655\u0654\3"+
		"\2\2\2\u0655\u0656\3\2\2\2\u0656\u0657\3\2\2\2\u0657\u0674\7\u0222\2\2"+
		"\u0658\u0674\7\u01ad\2\2\u0659\u0674\7\u01d3\2\2\u065a\u065c\7\u01ea\2"+
		"\2\u065b\u065d\7c\2\2\u065c\u065b\3\2\2\2\u065c\u065d\3\2\2\2\u065d\u065e"+
		"\3\2\2\2\u065e\u0674\7\u0222\2\2\u065f\u0661\7\u00d0\2\2\u0660\u0662\7"+
		"c\2\2\u0661\u0660\3\2\2\2\u0661\u0662\3\2\2\2\u0662\u0663\3\2\2\2\u0663"+
		"\u0674\7\u0222\2\2\u0664\u0665\7\u0100\2\2\u0665\u0666\7\u01ea\2\2\u0666"+
		"\u0674\5\u0222\u0112\2\u0667\u0668\7\u0100\2\2\u0668\u0669\7\u01ea\2\2"+
		"\u0669\u0674\7\23\2\2\u066a\u066b\7\u0100\2\2\u066b\u066c\7m\2\2\u066c"+
		"\u066d\7n\2\2\u066d\u0674\5\u0222\u0112\2\u066e\u066f\7\u0100\2\2\u066f"+
		"\u0670\7n\2\2\u0670\u0674\5\u0222\u0112\2\u0671\u0672\7\u01c2\2\2\u0672"+
		"\u0674\7\u0222\2\2\u0673\u064c\3\2\2\2\u0673\u064d\3\2\2\2\u0673\u064e"+
		"\3\2\2\2\u0673\u0653\3\2\2\2\u0673\u0658\3\2\2\2\u0673\u0659\3\2\2\2\u0673"+
		"\u065a\3\2\2\2\u0673\u065f\3\2\2\2\u0673\u0664\3\2\2\2\u0673\u0667\3\2"+
		"\2\2\u0673\u066a\3\2\2\2\u0673\u066e\3\2\2\2\u0673\u0671\3\2\2\2\u0674"+
		"\u00bb\3\2\2\2\u0675\u0677\7a\2\2\u0676\u0675\3\2\2\2\u0676\u0677\3\2"+
		"\2\2\u0677\u0678\3\2\2\2\u0678\u0679\7\u01d1\2\2\u0679\u067a\7\u0222\2"+
		"\2\u067a\u00bd\3\2\2\2\u067b\u067d\7\u01c8\2\2\u067c\u067e\7\u01ef\2\2"+
		"\u067d\u067c\3\2\2\2\u067d\u067e\3\2\2\2\u067e\u0681\3\2\2\2\u067f\u0682"+
		"\5\u00dep\2\u0680\u0682\7t\2\2\u0681\u067f\3\2\2\2\u0681\u0680\3\2\2\2"+
		"\u0682\u00bf\3\2\2\2\u0683\u0684\7\u00c2\2\2\u0684\u0685\5\u00c2b\2\u0685"+
		"\u00c1\3\2\2\2\u0686\u06db\5\u00eex\2\u0687\u0688\t\7\2\2\u0688\u06db"+
		"\5\u00eex\2\u0689\u068b\7\u00a6\2\2\u068a\u068c\t\7\2\2\u068b\u068a\3"+
		"\2\2\2\u068b\u068c\3\2\2\2\u068c\u068d\3\2\2\2\u068d\u06db\5\u00eex\2"+
		"\u068e\u0690\7\u01e7\2\2\u068f\u0691\t\7\2\2\u0690\u068f\3\2\2\2\u0690"+
		"\u0691\3\2\2\2\u0691\u0692\3\2\2\2\u0692\u06db\5\u00eex\2\u0693\u0695"+
		"\7\u00fe\2\2\u0694\u0696\t\7\2\2\u0695\u0694\3\2\2\2\u0695\u0696\3\2\2"+
		"\2\u0696\u0697\3\2\2\2\u0697\u06db\5\u00eex\2\u0698\u069a\7\u010d\2\2"+
		"\u0699\u069b\t\7\2\2\u069a\u0699\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u069c"+
		"\3\2\2\2\u069c\u06db\5\u00eex\2\u069d\u069e\7\u019e\2\2\u069e\u06a0\5"+
		"\u01f6\u00fc\2\u069f\u06a1\t\7\2\2\u06a0\u069f\3\2\2\2\u06a0\u06a1\3\2"+
		"\2\2\u06a1\u06a2\3\2\2\2\u06a2\u06a3\5\u00eex\2\u06a3\u06db\3\2\2\2\u06a4"+
		"\u06a5\7\u01e9\2\2\u06a5\u06a7\5\u01f6\u00fc\2\u06a6\u06a8\t\7\2\2\u06a7"+
		"\u06a6\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8\u06a9\3\2\2\2\u06a9\u06aa\5\u00ee"+
		"x\2\u06aa\u06db\3\2\2\2\u06ab\u06ad\5\u01f6\u00fc\2\u06ac\u06ae\t\7\2"+
		"\2\u06ad\u06ac\3\2\2\2\u06ad\u06ae\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06b0"+
		"\5\u00eex\2\u06b0\u06db\3\2\2\2\u06b1\u06b3\7t\2\2\u06b2\u06b4\t\7\2\2"+
		"\u06b3\u06b2\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b5\3\2\2\2\u06b5\u06db"+
		"\5\u00eex\2\u06b6\u06b8\7\u01cc\2\2\u06b7\u06b9\t\7\2\2\u06b8\u06b7\3"+
		"\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06ba\3\2\2\2\u06ba\u06db\5\u00eex\2"+
		"\u06bb\u06bc\7\u01cc\2\2\u06bc\u06be\5\u01f6\u00fc\2\u06bd\u06bf\t\7\2"+
		"\2\u06be\u06bd\3\2\2\2\u06be\u06bf\3\2\2\2\u06bf\u06c0\3\2\2\2\u06c0\u06c1"+
		"\5\u00eex\2\u06c1\u06db\3\2\2\2\u06c2\u06c3\7\u01cc\2\2\u06c3\u06c5\7"+
		"t\2\2\u06c4\u06c6\t\7\2\2\u06c5\u06c4\3\2\2\2\u06c5\u06c6\3\2\2\2\u06c6"+
		"\u06c7\3\2\2\2\u06c7\u06db\5\u00eex\2\u06c8\u06ca\7\u01a5\2\2\u06c9\u06cb"+
		"\t\7\2\2\u06ca\u06c9\3\2\2\2\u06ca\u06cb\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc"+
		"\u06db\5\u00eex\2\u06cd\u06ce\7\u01a5\2\2\u06ce\u06d0\5\u01f6\u00fc\2"+
		"\u06cf\u06d1\t\7\2\2\u06d0\u06cf\3\2\2\2\u06d0\u06d1\3\2\2\2\u06d1\u06d2"+
		"\3\2\2\2\u06d2\u06d3\5\u00eex\2\u06d3\u06db\3\2\2\2\u06d4\u06d5\7\u01a5"+
		"\2\2\u06d5\u06d7\7t\2\2\u06d6\u06d8\t\7\2\2\u06d7\u06d6\3\2\2\2\u06d7"+
		"\u06d8\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9\u06db\5\u00eex\2\u06da\u0686"+
		"\3\2\2\2\u06da\u0687\3\2\2\2\u06da\u0689\3\2\2\2\u06da\u068e\3\2\2\2\u06da"+
		"\u0693\3\2\2\2\u06da\u0698\3\2\2\2\u06da\u069d\3\2\2\2\u06da\u06a4\3\2"+
		"\2\2\u06da\u06ab\3\2\2\2\u06da\u06b1\3\2\2\2\u06da\u06b6\3\2\2\2\u06da"+
		"\u06bb\3\2\2\2\u06da\u06c2\3\2\2\2\u06da\u06c8\3\2\2\2\u06da\u06cd\3\2"+
		"\2\2\u06da\u06d4\3\2\2\2\u06db\u00c3\3\2\2\2\u06dc\u06de\7,\2\2\u06dd"+
		"\u06df\5\u00caf\2\u06de\u06dd\3\2\2\2\u06de\u06df\3\2\2\2\u06df\u00c5"+
		"\3\2\2\2\u06e0\u06e1\t\b\2\2\u06e1\u00c7\3\2\2\2\u06e2\u06e4\7\22\2\2"+
		"\u06e3\u06e2\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5\u06e7"+
		"\7\u0223\2\2\u06e6\u06e8\5\u00caf\2\u06e7\u06e6\3\2\2\2\u06e7\u06e8\3"+
		"\2\2\2\u06e8\u00c9\3\2\2\2\u06e9\u06ea\7\61\2\2\u06ea\u06eb\7\u0221\2"+
		"\2\u06eb\u00cb\3\2\2\2\u06ec\u06ee\5\u00ceh\2\u06ed\u06ec\3\2\2\2\u06ed"+
		"\u06ee\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef\u06f1\7\u0221\2\2\u06f0\u06f2"+
		"\5\u00d0i\2\u06f1\u06f0\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u06f5\3\2\2"+
		"\2\u06f3\u06f5\5\u00d2j\2\u06f4\u06ed\3\2\2\2\u06f4\u06f3\3\2\2\2\u06f5"+
		"\u00cd\3\2\2\2\u06f6\u06f7\t\t\2\2\u06f7\u06f8\7\13\2\2\u06f8\u00cf\3"+
		"\2\2\2\u06f9\u06fa\7\u013a\2\2\u06fa\u06fb\7\u0222\2\2\u06fb\u00d1\3\2"+
		"\2\2\u06fc\u06fd\t\n\2\2\u06fd\u00d3\3\2\2\2\u06fe\u06ff\t\13\2\2\u06ff"+
		"\u00d5\3\2\2\2\u0700\u0701\5\u00ccg\2\u0701\u00d7\3\2\2\2\u0702\u0703"+
		"\5\u00dco\2\u0703\u0704\7\26\2\2\u0704\u0706\3\2\2\2\u0705\u0702\3\2\2"+
		"\2\u0705\u0706\3\2\2\2\u0706\u0707\3\2\2\2\u0707\u0708\5\u00dep\2\u0708"+
		"\u00d9\3\2\2\2\u0709\u070a\5\u00dco\2\u070a\u070b\7\26\2\2\u070b\u070d"+
		"\3\2\2\2\u070c\u0709\3\2\2\2\u070c\u070d\3\2\2\2\u070d\u070e\3\2\2\2\u070e"+
		"\u070f\5\u00dep\2\u070f\u00db\3\2\2\2\u0710\u0711\5\u00ccg\2\u0711\u00dd"+
		"\3\2\2\2\u0712\u0713\5\u00ccg\2\u0713\u00df\3\2\2\2\u0714\u0716\7\"\2"+
		"\2\u0715\u0714\3\2\2\2\u0715\u0716\3\2\2\2\u0716\u0717\3\2\2\2\u0717\u071c"+
		"\5\u00d8m\2\u0718\u0719\7(\2\2\u0719\u071b\5\u00d8m\2\u071a\u0718\3\2"+
		"\2\2\u071b\u071e\3\2\2\2\u071c\u071a\3\2\2\2\u071c\u071d\3\2\2\2\u071d"+
		"\u0720\3\2\2\2\u071e\u071c\3\2\2\2\u071f\u0721\7#\2\2\u0720\u071f\3\2"+
		"\2\2\u0720\u0721\3\2\2\2\u0721\u00e1\3\2\2\2\u0722\u0723\7\"\2\2\u0723"+
		"\u0728\5\u00dan\2\u0724\u0725\7(\2\2\u0725\u0727\5\u00dan\2\u0726\u0724"+
		"\3\2\2\2\u0727\u072a\3\2\2\2\u0728\u0726\3\2\2\2\u0728\u0729\3\2\2\2\u0729"+
		"\u072b\3\2\2\2\u072a\u0728\3\2\2\2\u072b\u072c\7#\2\2\u072c\u00e3\3\2"+
		"\2\2\u072d\u0730\7\u0222\2\2\u072e\u0730\5\u00ccg\2\u072f\u072d\3\2\2"+
		"\2\u072f\u072e\3\2\2\2\u0730\u00e5\3\2\2\2\u0731\u0732\5\u00ccg\2\u0732"+
		"\u00e7\3\2\2\2\u0733\u0735\7D\2\2\u0734\u0733\3\2\2\2\u0734\u0735\3\2"+
		"\2\2\u0735\u0736\3\2\2\2\u0736\u0737\7G\2\2\u0737\u00e9\3\2\2\2\u0738"+
		"\u0739\t\f\2\2\u0739\u00eb\3\2\2\2\u073a\u073b\t\r\2\2\u073b\u00ed\3\2"+
		"\2\2\u073c\u073d\5\u00dep\2\u073d\u00ef\3\2\2\2\u073e\u073f\by\1\2\u073f"+
		"\u0751\5\u00f4{\2\u0740\u0741\7\21\2\2\u0741\u0751\5\u00f0y;\u0742\u0743"+
		"\7\22\2\2\u0743\u0751\5\u00f0y:\u0744\u0745\5\u010c\u0087\2\u0745\u0746"+
		"\5\u00f0y\61\u0746\u0751\3\2\2\2\u0747\u0748\7m\2\2\u0748\u0751\5\u00f0"+
		"y/\u0749\u074a\5\u011e\u0090\2\u074a\u074b\7\u00c8\2\2\u074b\u074c\5\u011e"+
		"\u0090\2\u074c\u0751\3\2\2\2\u074d\u074e\7E\2\2\u074e\u0751\5&\24\2\u074f"+
		"\u0751\7\u0097\2\2\u0750\u073e\3\2\2\2\u0750\u0740\3\2\2\2\u0750\u0742"+
		"\3\2\2\2\u0750\u0744\3\2\2\2\u0750\u0747\3\2\2\2\u0750\u0749\3\2\2\2\u0750"+
		"\u074d\3\2\2\2\u0750\u074f\3\2\2\2\u0751\u0847\3\2\2\2\u0752\u0753\f<"+
		"\2\2\u0753\u0754\7\u00ca\2\2\u0754\u0755\7\u008a\2\2\u0755\u0756\7\u0138"+
		"\2\2\u0756\u0846\5\u00f0y=\u0757\u0758\f9\2\2\u0758\u0759\7\21\2\2\u0759"+
		"\u0846\5\u00f0y:\u075a\u075b\f8\2\2\u075b\u075c\7\22\2\2\u075c\u0846\5"+
		"\u00f0y9\u075d\u075e\f\67\2\2\u075e\u075f\7\23\2\2\u075f\u0846\5\u00f0"+
		"y8\u0760\u0761\f\66\2\2\u0761\u0762\7\24\2\2\u0762\u0846\5\u00f0y\67\u0763"+
		"\u0764\f\65\2\2\u0764\u0765\7\17\2\2\u0765\u0846\5\u00f0y\66\u0766\u0767"+
		"\f\64\2\2\u0767\u0768\7\16\2\2\u0768\u0846\5\u00f0y\65\u0769\u076a\f\63"+
		"\2\2\u076a\u076b\5\u00ecw\2\u076b\u076c\5\u00f0y\64\u076c\u0846\3\2\2"+
		"\2\u076d\u076e\f\62\2\2\u076e\u076f\5\u010c\u0087\2\u076f\u0770\5\u00f0"+
		"y\63\u0770\u0846\3\2\2\2\u0771\u0772\f.\2\2\u0772\u0773\7v\2\2\u0773\u0846"+
		"\5\u00f0y/\u0774\u0775\f-\2\2\u0775\u0776\7v\2\2\u0776\u0777\5\u00f0y"+
		"\2\u0777\u0778\7\u00d0\2\2\u0778\u0779\5\u00f0y.\u0779\u0846\3\2\2\2\u077a"+
		"\u077b\f,\2\2\u077b\u077c\7m\2\2\u077c\u077d\7v\2\2\u077d\u0846\5\u00f0"+
		"y-\u077e\u077f\f+\2\2\u077f\u0780\7m\2\2\u0780\u0781\7v\2\2\u0781\u0782"+
		"\5\u00f0y\2\u0782\u0783\7\u00d0\2\2\u0783\u0784\5\u00f0y,\u0784\u0846"+
		"\3\2\2\2\u0785\u0786\f*\2\2\u0786\u0787\7\u0183\2\2\u0787\u0846\5\u00f0"+
		"y+\u0788\u0789\f)\2\2\u0789\u078a\7\u0183\2\2\u078a\u078b\5\u00f0y\2\u078b"+
		"\u078c\7\u00d0\2\2\u078c\u078d\5\u00f0y*\u078d\u0846\3\2\2\2\u078e\u078f"+
		"\f(\2\2\u078f\u0790\7m\2\2\u0790\u0791\7\u0183\2\2\u0791\u0846\5\u00f0"+
		"y)\u0792\u0793\f\'\2\2\u0793\u0794\7m\2\2\u0794\u0795\7\u0183\2\2\u0795"+
		"\u0796\5\u00f0y\2\u0796\u0797\7\u00d0\2\2\u0797\u0798\5\u00f0y(\u0798"+
		"\u0846\3\2\2\2\u0799\u079a\f&\2\2\u079a\u079b\7\u0184\2\2\u079b\u079c"+
		"\7i\2\2\u079c\u0846\5\u00f0y\'\u079d\u079e\f%\2\2\u079e\u079f\7\u0184"+
		"\2\2\u079f\u07a0\7i\2\2\u07a0\u07a1\5\u00f0y\2\u07a1\u07a2\7\u00d0\2\2"+
		"\u07a2\u07a3\5\u00f0y&\u07a3\u0846\3\2\2\2\u07a4\u07a5\f$\2\2\u07a5\u07a6"+
		"\7m\2\2\u07a6\u07a7\7\u0184\2\2\u07a7\u07a8\7i\2\2\u07a8\u0846\5\u00f0"+
		"y%\u07a9\u07aa\f#\2\2\u07aa\u07ab\7m\2\2\u07ab\u07ac\7\u0184\2\2\u07ac"+
		"\u07ad\7i\2\2\u07ad\u07ae\5\u00f0y\2\u07ae\u07af\7\u00d0\2\2\u07af\u07b0"+
		"\5\u00f0y$\u07b0\u0846\3\2\2\2\u07b1\u07b2\f\27\2\2\u07b2\u07b3\7l\2\2"+
		"\u07b3\u07b4\7R\2\2\u07b4\u07b5\7X\2\2\u07b5\u0846\5\u00f0y\30\u07b6\u07b7"+
		"\f\26\2\2\u07b7\u07b8\7l\2\2\u07b8\u07b9\7m\2\2\u07b9\u07ba\7R\2\2\u07ba"+
		"\u07bb\7X\2\2\u07bb\u0846\5\u00f0y\27\u07bc\u07bd\f\23\2\2\u07bd\u07bf"+
		"\7r\2\2\u07be\u07c0\7\u018a\2\2\u07bf\u07be\3\2\2\2\u07bf\u07c0\3\2\2"+
		"\2\u07c0\u07c1\3\2\2\2\u07c1\u07c2\5\u00f2z\2\u07c2\u07c3\7j\2\2\u07c3"+
		"\u07c4\5\u00f0y\24\u07c4\u0846\3\2\2\2\u07c5\u07c6\f\22\2\2\u07c6\u07c7"+
		"\7m\2\2\u07c7\u07c9\7r\2\2\u07c8\u07ca\7\u018a\2\2\u07c9\u07c8\3\2\2\2"+
		"\u07c9\u07ca\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb\u07cc\5\u00f2z\2\u07cc"+
		"\u07cd\7j\2\2\u07cd\u07ce\5\u00f0y\23\u07ce\u0846\3\2\2\2\u07cf\u07d0"+
		"\f\21\2\2\u07d0\u07d1\7r\2\2\u07d1\u07d2\7\u0187\2\2\u07d2\u07d3\5\u00f2"+
		"z\2\u07d3\u07d4\7j\2\2\u07d4\u07d5\5\u00f0y\22\u07d5\u0846\3\2\2\2\u07d6"+
		"\u07d7\f\20\2\2\u07d7\u07d8\7m\2\2\u07d8\u07d9\7r\2\2\u07d9\u07da\7\u0187"+
		"\2\2\u07da\u07db\5\u00f2z\2\u07db\u07dc\7j\2\2\u07dc\u07dd\5\u00f0y\21"+
		"\u07dd\u0846\3\2\2\2\u07de\u07df\f\4\2\2\u07df\u07e0\5\u00eav\2\u07e0"+
		"\u07e1\5\u00f0y\5\u07e1\u0846\3\2\2\2\u07e2\u07e3\f>\2\2\u07e3\u07e4\7"+
		"\61\2\2\u07e4\u0846\5\u0158\u00ad\2\u07e5\u07e6\f=\2\2\u07e6\u07e7\7\u00ea"+
		"\2\2\u07e7\u0846\5\u01b8\u00dd\2\u07e8\u07e9\f\60\2\2\u07e9\u0846\5\u010c"+
		"\u0087\2\u07ea\u07eb\f\"\2\2\u07eb\u07ec\7l\2\2\u07ec\u0846\7n\2\2\u07ed"+
		"\u07ee\f!\2\2\u07ee\u0846\7\u0185\2\2\u07ef\u07f0\f \2\2\u07f0\u07f1\7"+
		"l\2\2\u07f1\u07f2\7m\2\2\u07f2\u0846\7n\2\2\u07f3\u07f4\f\37\2\2\u07f4"+
		"\u0846\7\u0186\2\2\u07f5\u07f6\f\35\2\2\u07f6\u07f7\7l\2\2\u07f7\u0846"+
		"\7o\2\2\u07f8\u07f9\f\34\2\2\u07f9\u07fa\7l\2\2\u07fa\u07fb\7m\2\2\u07fb"+
		"\u0846\7o\2\2\u07fc\u07fd\f\33\2\2\u07fd\u07fe\7l\2\2\u07fe\u0846\7p\2"+
		"\2\u07ff\u0800\f\32\2\2\u0800\u0801\7l\2\2\u0801\u0802\7m\2\2\u0802\u0846"+
		"\7p\2\2\u0803\u0804\f\31\2\2\u0804\u0805\7l\2\2\u0805\u0846\7\u00d5\2"+
		"\2\u0806\u0807\f\30\2\2\u0807\u0808\7l\2\2\u0808\u0809\7m\2\2\u0809\u0846"+
		"\7\u00d5\2\2\u080a\u080b\f\25\2\2\u080b\u080c\7l\2\2\u080c\u080d\7\u0139"+
		"\2\2\u080d\u080e\7\"\2\2\u080e\u080f\5\u0130\u0099\2\u080f\u0810\7#\2"+
		"\2\u0810\u0846\3\2\2\2\u0811\u0812\f\24\2\2\u0812\u0813\7l\2\2\u0813\u0814"+
		"\7m\2\2\u0814\u0815\7\u0139\2\2\u0815\u0816\7\"\2\2\u0816\u0817\5\u0130"+
		"\u0099\2\u0817\u0818\7#\2\2\u0818\u0846\3\2\2\2\u0819\u081a\f\17\2\2\u081a"+
		"\u081b\7s\2\2\u081b\u0846\5\u00fe\u0080\2\u081c\u081d\f\16\2\2\u081d\u081e"+
		"\7m\2\2\u081e\u081f\7s\2\2\u081f\u0846\5\u00fe\u0080\2\u0820\u0821\f\r"+
		"\2\2\u0821\u0822\5\u010e\u0088\2\u0822\u0823\5\u0124\u0093\2\u0823\u0824"+
		"\5&\24\2\u0824";
	private static final String _serializedATNSegment1 =
		"\u0846\3\2\2\2\u0825\u0826\f\f\2\2\u0826\u0827\5\u010e\u0088\2\u0827\u0828"+
		"\5\u0124\u0093\2\u0828\u0829\7\"\2\2\u0829\u082a\5\u00f0y\2\u082a\u082b"+
		"\7#\2\2\u082b\u0846\3\2\2\2\u082c\u082d\f\n\2\2\u082d\u082e\7l\2\2\u082e"+
		"\u0846\7\u0188\2\2\u082f\u0830\f\t\2\2\u0830\u0831\7l\2\2\u0831\u0832"+
		"\7m\2\2\u0832\u0846\7\u0188\2\2\u0833\u0834\f\b\2\2\u0834\u0835\7l\2\2"+
		"\u0835\u0846\7\u0189\2\2\u0836\u0837\f\7\2\2\u0837\u0838\7l\2\2\u0838"+
		"\u0839\5\u018a\u00c6\2\u0839\u083a\7\u0189\2\2\u083a\u0846\3\2\2\2\u083b"+
		"\u083c\f\6\2\2\u083c\u083d\7l\2\2\u083d\u083e\7m\2\2\u083e\u0846\7\u0189"+
		"\2\2\u083f\u0840\f\5\2\2\u0840\u0841\7l\2\2\u0841\u0842\7m\2\2\u0842\u0843"+
		"\5\u018a\u00c6\2\u0843\u0844\7\u0189\2\2\u0844\u0846\3\2\2\2\u0845\u0752"+
		"\3\2\2\2\u0845\u0757\3\2\2\2\u0845\u075a\3\2\2\2\u0845\u075d\3\2\2\2\u0845"+
		"\u0760\3\2\2\2\u0845\u0763\3\2\2\2\u0845\u0766\3\2\2\2\u0845\u0769\3\2"+
		"\2\2\u0845\u076d\3\2\2\2\u0845\u0771\3\2\2\2\u0845\u0774\3\2\2\2\u0845"+
		"\u077a\3\2\2\2\u0845\u077e\3\2\2\2\u0845\u0785\3\2\2\2\u0845\u0788\3\2"+
		"\2\2\u0845\u078e\3\2\2\2\u0845\u0792\3\2\2\2\u0845\u0799\3\2\2\2\u0845"+
		"\u079d\3\2\2\2\u0845\u07a4\3\2\2\2\u0845\u07a9\3\2\2\2\u0845\u07b1\3\2"+
		"\2\2\u0845\u07b6\3\2\2\2\u0845\u07bc\3\2\2\2\u0845\u07c5\3\2\2\2\u0845"+
		"\u07cf\3\2\2\2\u0845\u07d6\3\2\2\2\u0845\u07de\3\2\2\2\u0845\u07e2\3\2"+
		"\2\2\u0845\u07e5\3\2\2\2\u0845\u07e8\3\2\2\2\u0845\u07ea\3\2\2\2\u0845"+
		"\u07ed\3\2\2\2\u0845\u07ef\3\2\2\2\u0845\u07f3\3\2\2\2\u0845\u07f5\3\2"+
		"\2\2\u0845\u07f8\3\2\2\2\u0845\u07fc\3\2\2\2\u0845\u07ff\3\2\2\2\u0845"+
		"\u0803\3\2\2\2\u0845\u0806\3\2\2\2\u0845\u080a\3\2\2\2\u0845\u0811\3\2"+
		"\2\2\u0845\u0819\3\2\2\2\u0845\u081c\3\2\2\2\u0845\u0820\3\2\2\2\u0845"+
		"\u0825\3\2\2\2\u0845\u082c\3\2\2\2\u0845\u082f\3\2\2\2\u0845\u0833\3\2"+
		"\2\2\u0845\u0836\3\2\2\2\u0845\u083b\3\2\2\2\u0845\u083f\3\2\2\2\u0846"+
		"\u0849\3\2\2\2\u0847\u0845\3\2\2\2\u0847\u0848\3\2\2\2\u0848\u00f1\3\2"+
		"\2\2\u0849\u0847\3\2\2\2\u084a\u084b\bz\1\2\u084b\u0854\5\u00f4{\2\u084c"+
		"\u084d\7\21\2\2\u084d\u0854\5\u00f2z\r\u084e\u084f\7\22\2\2\u084f\u0854"+
		"\5\u00f2z\f\u0850\u0851\5\u010c\u0087\2\u0851\u0852\5\u00f2z\n\u0852\u0854"+
		"\3\2\2\2\u0853\u084a\3\2\2\2\u0853\u084c\3\2\2\2\u0853\u084e\3\2\2\2\u0853"+
		"\u0850\3\2\2\2\u0854\u0881\3\2\2\2\u0855\u0856\f\13\2\2\u0856\u0857\5"+
		"\u010c\u0087\2\u0857\u0858\5\u00f2z\f\u0858\u0880\3\2\2\2\u0859\u085a"+
		"\f\b\2\2\u085a\u085b\7l\2\2\u085b\u085c\7R\2\2\u085c\u085d\7X\2\2\u085d"+
		"\u0880\5\u00f2z\t\u085e\u085f\f\7\2\2\u085f\u0860\7l\2\2\u0860\u0861\7"+
		"m\2\2\u0861\u0862\7R\2\2\u0862\u0863\7X\2\2\u0863\u0880\5\u00f2z\b\u0864"+
		"\u0865\f\16\2\2\u0865\u0866\7\61\2\2\u0866\u0880\5\u0158\u00ad\2\u0867"+
		"\u0868\f\t\2\2\u0868\u0880\5\u010c\u0087\2\u0869\u086a\f\6\2\2\u086a\u086b"+
		"\7l\2\2\u086b\u086c\7\u0139\2\2\u086c\u086d\7\"\2\2\u086d\u086e\5\u0130"+
		"\u0099\2\u086e\u086f\7#\2\2\u086f\u0880\3\2\2\2\u0870\u0871\f\5\2\2\u0871"+
		"\u0872\7l\2\2\u0872\u0873\7m\2\2\u0873\u0874\7\u0139\2\2\u0874\u0875\7"+
		"\"\2\2\u0875\u0876\5\u0130\u0099\2\u0876\u0877\7#\2\2\u0877\u0880\3\2"+
		"\2\2\u0878\u0879\f\4\2\2\u0879\u087a\7l\2\2\u087a\u0880\7\u0188\2\2\u087b"+
		"\u087c\f\3\2\2\u087c\u087d\7l\2\2\u087d\u087e\7m\2\2\u087e\u0880\7\u0188"+
		"\2\2\u087f\u0855\3\2\2\2\u087f\u0859\3\2\2\2\u087f\u085e\3\2\2\2\u087f"+
		"\u0864\3\2\2\2\u087f\u0867\3\2\2\2\u087f\u0869\3\2\2\2\u087f\u0870\3\2"+
		"\2\2\u087f\u0878\3\2\2\2\u087f\u087b\3\2\2\2\u0880\u0883\3\2\2\2\u0881"+
		"\u087f\3\2\2\2\u0881\u0882\3\2\2\2\u0882\u00f3\3\2\2\2\u0883\u0881\3\2"+
		"\2\2\u0884\u08a4\5\u00c4c\2\u0885\u08a4\5\u010a\u0086\2\u0886\u08a4\5"+
		"\u0136\u009c\2\u0887\u0889\7\u021e\2\2\u0888\u088a\5\u00fa~\2\u0889\u0888"+
		"\3\2\2\2\u0889\u088a\3\2\2\2\u088a\u08a4\3\2\2\2\u088b\u088c\7\"\2\2\u088c"+
		"\u088d\5\u00f0y\2\u088d\u088e\7#\2\2\u088e\u088f\5\u00f8}\2\u088f\u08a4"+
		"\3\2\2\2\u0890\u08a4\5\u0100\u0081\2\u0891\u08a4\5\u014c\u00a7\2\u0892"+
		"\u08a4\5&\24\2\u0893\u0894\5&\24\2\u0894\u0895\5\u00f6|\2\u0895\u08a4"+
		"\3\2\2\2\u0896\u0897\7q\2\2\u0897\u08a4\5&\24\2\u0898\u0899\7\u0087\2"+
		"\2\u0899\u08a4\5&\24\2\u089a\u089b\7\u0087\2\2\u089b\u08a4\5\u0126\u0094"+
		"\2\u089c\u08a4\5\u0120\u0091\2\u089d\u08a4\5\u0122\u0092\2\u089e\u089f"+
		"\7\u00c4\2\2\u089f\u08a0\7\"\2\2\u08a0\u08a1\5\u015c\u00af\2\u08a1\u08a2"+
		"\7#\2\2\u08a2\u08a4\3\2\2\2\u08a3\u0884\3\2\2\2\u08a3\u0885\3\2\2\2\u08a3"+
		"\u0886\3\2\2\2\u08a3\u0887\3\2\2\2\u08a3\u088b\3\2\2\2\u08a3\u0890\3\2"+
		"\2\2\u08a3\u0891\3\2\2\2\u08a3\u0892\3\2\2\2\u08a3\u0893\3\2\2\2\u08a3"+
		"\u0896\3\2\2\2\u08a3\u0898\3\2\2\2\u08a3\u089a\3\2\2\2\u08a3\u089c\3\2"+
		"\2\2\u08a3\u089d\3\2\2\2\u08a3\u089e\3\2\2\2\u08a4\u00f5\3\2\2\2\u08a5"+
		"\u08a6\b|\1\2\u08a6\u08a7\5\u00fa~\2\u08a7\u08ac\3\2\2\2\u08a8\u08a9\f"+
		"\3\2\2\u08a9\u08ab\5\u00fa~\2\u08aa\u08a8\3\2\2\2\u08ab\u08ae\3\2\2\2"+
		"\u08ac\u08aa\3\2\2\2\u08ac\u08ad\3\2\2\2\u08ad\u00f7\3\2\2\2\u08ae\u08ac"+
		"\3\2\2\2\u08af\u08b4\b}\1\2\u08b0\u08b1\f\4\2\2\u08b1\u08b3\5\u00fa~\2"+
		"\u08b2\u08b0\3\2\2\2\u08b3\u08b6\3\2\2\2\u08b4\u08b2\3\2\2\2\u08b4\u08b5"+
		"\3\2\2\2\u08b5\u00f9\3\2\2\2\u08b6\u08b4\3\2\2\2\u08b7\u08b8\7\26\2\2"+
		"\u08b8\u08c9\5\u0178\u00bd\2\u08b9\u08ba\7\26\2\2\u08ba\u08c9\7\23\2\2"+
		"\u08bb\u08bc\7&\2\2\u08bc\u08bd\5\u00f0y\2\u08bd\u08be\7\'\2\2\u08be\u08c9"+
		"\3\2\2\2\u08bf\u08c1\7&\2\2\u08c0\u08c2\5\u00fc\177\2\u08c1\u08c0\3\2"+
		"\2\2\u08c1\u08c2\3\2\2\2\u08c2\u08c3\3\2\2\2\u08c3\u08c5\7\20\2\2\u08c4"+
		"\u08c6\5\u00fc\177\2\u08c5\u08c4\3\2\2\2\u08c5\u08c6\3\2\2\2\u08c6\u08c7"+
		"\3\2\2\2\u08c7\u08c9\7\'\2\2\u08c8\u08b7\3\2\2\2\u08c8\u08b9\3\2\2\2\u08c8"+
		"\u08bb\3\2\2\2\u08c8\u08bf\3\2\2\2\u08c9\u00fb\3\2\2\2\u08ca\u08cb\5\u00f0"+
		"y\2\u08cb\u00fd\3\2\2\2\u08cc\u08d2\5&\24\2\u08cd\u08ce\7\"\2\2\u08ce"+
		"\u08cf\5\u015c\u00af\2\u08cf\u08d0\7#\2\2\u08d0\u08d2\3\2\2\2\u08d1\u08cc"+
		"\3\2\2\2\u08d1\u08cd\3\2\2\2\u08d2\u00ff\3\2\2\2\u08d3\u08d5\7S\2\2\u08d4"+
		"\u08d6\5\u0108\u0085\2\u08d5\u08d4\3\2\2\2\u08d5\u08d6\3\2\2\2\u08d6\u08d7"+
		"\3\2\2\2\u08d7\u08d9\5\u0102\u0082\2\u08d8\u08da\5\u0106\u0084\2\u08d9"+
		"\u08d8\3\2\2\2\u08d9\u08da\3\2\2\2\u08da\u08db\3\2\2\2\u08db\u08dc\7\u00cc"+
		"\2\2\u08dc\u0101\3\2\2\2\u08dd\u08df\5\u0104\u0083\2\u08de\u08dd\3\2\2"+
		"\2\u08df\u08e0\3\2\2\2\u08e0\u08de\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1\u0103"+
		"\3\2\2\2\u08e2\u08e3\7T\2\2\u08e3\u08e4\5\u00f0y\2\u08e4\u08e5\7g\2\2"+
		"\u08e5\u08e6\5\u00f0y\2\u08e6\u0105\3\2\2\2\u08e7\u08e8\7f\2\2\u08e8\u08e9"+
		"\5\u00f0y\2\u08e9\u0107\3\2\2\2\u08ea\u08eb\5\u00f0y\2\u08eb\u0109\3\2"+
		"\2\2\u08ec\u08f1\5\u0138\u009d\2\u08ed\u08ee\5\u0138\u009d\2\u08ee\u08ef"+
		"\5\u00f6|\2\u08ef\u08f1\3\2\2\2\u08f0\u08ec\3\2\2\2\u08f0\u08ed\3\2\2"+
		"\2\u08f1\u010b\3\2\2\2\u08f2\u08fb\5\u0114\u008b\2\u08f3\u08fb\7/\2\2"+
		"\u08f4\u08fb\7\60\2\2\u08f5\u08f6\7\u0180\2\2\u08f6\u08f7\7\"\2\2\u08f7"+
		"\u08f8\5\u011a\u008e\2\u08f8\u08f9\7#\2\2\u08f9\u08fb\3\2\2\2\u08fa\u08f2"+
		"\3\2\2\2\u08fa\u08f3\3\2\2\2\u08fa\u08f4\3\2\2\2\u08fa\u08f5\3\2\2\2\u08fb"+
		"\u010d\3\2\2\2\u08fc\u0909\5\u0110\u0089\2\u08fd\u08fe\7\u0180\2\2\u08fe"+
		"\u08ff\7\"\2\2\u08ff\u0900\5\u011a\u008e\2\u0900\u0901\7#\2\2\u0901\u0909"+
		"\3\2\2\2\u0902\u0909\7v\2\2\u0903\u0904\7m\2\2\u0904\u0909\7v\2\2\u0905"+
		"\u0909\7\u0183\2\2\u0906\u0907\7m\2\2\u0907\u0909\7\u0183\2\2\u0908\u08fc"+
		"\3\2\2\2\u0908\u08fd\3\2\2\2\u0908\u0902\3\2\2\2\u0908\u0903\3\2\2\2\u0908"+
		"\u0905\3\2\2\2\u0908\u0906\3\2\2\2\u0909\u010f\3\2\2\2\u090a\u090d\5\u0112"+
		"\u008a\2\u090b\u090d\5\u0114\u008b\2\u090c\u090a\3\2\2\2\u090c\u090b\3"+
		"\2\2\2\u090d\u0111\3\2\2\2\u090e\u0910\t\16\2\2\u090f\u090e\3\2\2\2\u0910"+
		"\u0911\3\2\2\2\u0911\u090f\3\2\2\2\u0911\u0912\3\2\2\2\u0912\u0113\3\2"+
		"\2\2\u0913\u0914\t\17\2\2\u0914\u0115\3\2\2\2\u0915\u091c\5\u0110\u0089"+
		"\2\u0916\u0917\7\u0180\2\2\u0917\u0918\7\"\2\2\u0918\u0919\5\u011a\u008e"+
		"\2\u0919\u091a\7#\2\2\u091a\u091c\3\2\2\2\u091b\u0915\3\2\2\2\u091b\u0916"+
		"\3\2\2\2\u091c\u0117\3\2\2\2\u091d\u091e\t\20\2\2\u091e\u0119\3\2\2\2"+
		"\u091f\u0925\5\u0110\u0089\2\u0920\u0921\5\u0138\u009d\2\u0921\u0922\7"+
		"\26\2\2\u0922\u0923\5\u011a\u008e\2\u0923\u0925\3\2\2\2\u0924\u091f\3"+
		"\2\2\2\u0924\u0920\3\2\2\2\u0925\u011b\3\2\2\2\u0926\u0927\7\u00d1\2\2"+
		"\u0927\u0928\7\u0098\2\2\u0928\u0931\7\u00d4\2\2\u0929\u092a\7\u00d1\2"+
		"\2\u092a\u0931\7x\2\2\u092b\u092c\7\u00d1\2\2\u092c\u0931\7\u00c1\2\2"+
		"\u092d\u092e\7\u00d1\2\2\u092e\u092f\7\u00dc\2\2\u092f\u0931\7\u00c7\2"+
		"\2\u0930\u0926\3\2\2\2\u0930\u0929\3\2\2\2\u0930\u092b\3\2\2\2\u0930\u092d"+
		"\3\2\2\2\u0931\u011d\3\2\2\2\u0932\u0933\7\u00d4\2\2\u0933\u0934\7\"\2"+
		"\2\u0934\u0935\5\u015c\u00af\2\u0935\u0936\7#\2\2\u0936\u0941\3\2\2\2"+
		"\u0937\u0938\7\u00d4\2\2\u0938\u0939\7\"\2\2\u0939\u0941\7#\2\2\u093a"+
		"\u093b\7\"\2\2\u093b\u093c\5\u015c\u00af\2\u093c\u093d\7(\2\2\u093d\u093e"+
		"\5\u00f0y\2\u093e\u093f\7#\2\2\u093f\u0941\3\2\2\2\u0940\u0932\3\2\2\2"+
		"\u0940\u0937\3\2\2\2\u0940\u093a\3\2\2\2\u0941\u011f\3\2\2\2\u0942\u0943"+
		"\7\u00d4\2\2\u0943\u0944\7\"\2\2\u0944\u0945\5\u015c\u00af\2\u0945\u0946"+
		"\7#\2\2\u0946\u094b\3\2\2\2\u0947\u0948\7\u00d4\2\2\u0948\u0949\7\"\2"+
		"\2\u0949\u094b\7#\2\2\u094a\u0942\3\2\2\2\u094a\u0947\3\2\2\2\u094b\u0121"+
		"\3\2\2\2\u094c\u094d\7\"\2\2\u094d\u094e\5\u015c\u00af\2\u094e\u094f\7"+
		"(\2\2\u094f\u0950\5\u00f0y\2\u0950\u0951\7#\2\2\u0951\u0123\3\2\2\2\u0952"+
		"\u0953\t\21\2\2\u0953\u0125\3\2\2\2\u0954\u0955\7&\2\2\u0955\u0956\5\u015c"+
		"\u00af\2\u0956\u0957\7\'\2\2\u0957\u095f\3\2\2\2\u0958\u0959\7&\2\2\u0959"+
		"\u095a\5\u0128\u0095\2\u095a\u095b\7\'\2\2\u095b\u095f\3\2\2\2\u095c\u095d"+
		"\7&\2\2\u095d\u095f\7\'\2\2\u095e\u0954\3\2\2\2\u095e\u0958\3\2\2\2\u095e"+
		"\u095c\3\2\2\2\u095f\u0127\3\2\2\2\u0960\u0965\5\u0126\u0094\2\u0961\u0962"+
		"\7(\2\2\u0962\u0964\5\u0126\u0094\2\u0963\u0961\3\2\2\2\u0964\u0967\3"+
		"\2\2\2\u0965\u0963\3\2\2\2\u0965\u0966\3\2\2\2\u0966\u0129\3\2\2\2\u0967"+
		"\u0965\3\2\2\2\u0968\u096d\5\u012e\u0098\2\u0969\u096a\7(\2\2\u096a\u096c"+
		"\5\u012e\u0098\2\u096b\u0969\3\2\2\2\u096c\u096f\3\2\2\2\u096d\u096b\3"+
		"\2\2\2\u096d\u096e\3\2\2\2\u096e\u012b\3\2\2\2\u096f\u096d\3\2\2\2\u0970"+
		"\u0971\5\u013a\u009e\2\u0971\u012d\3\2\2\2\u0972\u097c\5\u00f0y\2\u0973"+
		"\u0974\5\u012c\u0097\2\u0974\u0975\7\33\2\2\u0975\u0976\5\u00f0y\2\u0976"+
		"\u097c\3\2\2\2\u0977\u0978\5\u012c\u0097\2\u0978\u0979\7\36\2\2\u0979"+
		"\u097a\5\u00f0y\2\u097a\u097c\3\2\2\2\u097b\u0972\3\2\2\2\u097b\u0973"+
		"\3\2\2\2\u097b\u0977\3\2\2\2\u097c\u012f\3\2\2\2\u097d\u0982\5\u0158\u00ad"+
		"\2\u097e\u097f\7(\2\2\u097f\u0981\5\u0158\u00ad\2\u0980\u097e\3\2\2\2"+
		"\u0981\u0984\3\2\2\2\u0982\u0980\3\2\2\2\u0982\u0983\3\2\2\2\u0983\u0131"+
		"\3\2\2\2\u0984\u0982\3\2\2\2\u0985\u0986\5\u0134\u009b\2\u0986\u0987\7"+
		"\"\2\2\u0987\u0988\7#\2\2\u0988\u09bd\3\2\2\2\u0989\u098a\5\u0134\u009b"+
		"\2\u098a\u098b\7\"\2\2\u098b\u098d\5\u012a\u0096\2\u098c\u098e\5\u01c6"+
		"\u00e4\2\u098d\u098c\3\2\2\2\u098d\u098e\3\2\2\2\u098e\u098f\3\2\2\2\u098f"+
		"\u0990\7#\2\2\u0990\u09bd\3\2\2\2\u0991\u0992\5\u0134\u009b\2\u0992\u0993"+
		"\7\"\2\2\u0993\u0994\7\u018b\2\2\u0994\u0996\5\u012e\u0098\2\u0995\u0997"+
		"\5\u01c6\u00e4\2\u0996\u0995\3\2\2\2\u0996\u0997\3\2\2\2\u0997\u0998\3"+
		"\2\2\2\u0998\u0999\7#\2\2\u0999\u09bd\3\2\2\2\u099a\u099b\5\u0134\u009b"+
		"\2\u099b\u099c\7\"\2\2\u099c\u099d\5\u012a\u0096\2\u099d\u099e\7(\2\2"+
		"\u099e\u099f\7\u018b\2\2\u099f\u09a1\5\u012e\u0098\2\u09a0\u09a2\5\u01c6"+
		"\u00e4\2\u09a1\u09a0\3\2\2\2\u09a1\u09a2\3\2\2\2\u09a2\u09a3\3\2\2\2\u09a3"+
		"\u09a4\7#\2\2\u09a4\u09bd\3\2\2\2\u09a5\u09a6\5\u0134\u009b\2\u09a6\u09a7"+
		"\7\"\2\2\u09a7\u09a8\7t\2\2\u09a8\u09aa\5\u012a\u0096\2\u09a9\u09ab\5"+
		"\u01c6\u00e4\2\u09aa\u09a9\3\2\2\2\u09aa\u09ab\3\2\2\2\u09ab\u09ac\3\2"+
		"\2\2\u09ac\u09ad\7#\2\2\u09ad\u09bd\3\2\2\2\u09ae\u09af\5\u0134\u009b"+
		"\2\u09af\u09b0\7\"\2\2\u09b0\u09b1\7R\2\2\u09b1\u09b3\5\u012a\u0096\2"+
		"\u09b2\u09b4\5\u01c6\u00e4\2\u09b3\u09b2\3\2\2\2\u09b3\u09b4\3\2\2\2\u09b4"+
		"\u09b5\3\2\2\2\u09b5\u09b6\7#\2\2\u09b6\u09bd\3\2\2\2\u09b7\u09b8\5\u0134"+
		"\u009b\2\u09b8\u09b9\7\"\2\2\u09b9\u09ba\7\23\2\2\u09ba\u09bb\7#\2\2\u09bb"+
		"\u09bd\3\2\2\2\u09bc\u0985\3\2\2\2\u09bc\u0989\3\2\2\2\u09bc\u0991\3\2"+
		"\2\2\u09bc\u099a\3\2\2\2\u09bc\u09a5\3\2\2\2\u09bc\u09ae\3\2\2\2\u09bc"+
		"\u09b7\3\2\2\2\u09bd\u0133\3\2\2\2\u09be\u09c3\5\u013a\u009e\2\u09bf\u09c0"+
		"\5\u0138\u009d\2\u09c0\u09c1\5\u00f6|\2\u09c1\u09c3\3\2\2\2\u09c2\u09be"+
		"\3\2\2\2\u09c2\u09bf\3\2\2\2\u09c3\u0135\3\2\2\2\u09c4\u09d6\7\u0223\2"+
		"\2\u09c5\u09d6\7\u0222\2\2\u09c6\u09c7\5\u0134\u009b\2\u09c7\u09c8\7\u0222"+
		"\2\2\u09c8\u09d6\3\2\2\2\u09c9\u09ca\5\u0134\u009b\2\u09ca\u09cb\7\"\2"+
		"\2\u09cb\u09cd\5\u012a\u0096\2\u09cc\u09ce\5\u01c6\u00e4\2\u09cd\u09cc"+
		"\3\2\2\2\u09cd\u09ce\3\2\2\2\u09ce\u09cf\3\2\2\2\u09cf\u09d0\7#\2\2\u09d0"+
		"\u09d1\7\u0222\2\2\u09d1\u09d6\3\2\2\2\u09d2\u09d6\7o\2\2\u09d3\u09d6"+
		"\7p\2\2\u09d4\u09d6\7n\2\2\u09d5\u09c4\3\2\2\2\u09d5\u09c5\3\2\2\2\u09d5"+
		"\u09c6\3\2\2\2\u09d5\u09c9\3\2\2\2\u09d5\u09d2\3\2\2\2\u09d5\u09d3\3\2"+
		"\2\2\u09d5\u09d4\3\2\2\2\u09d6\u0137\3\2\2\2\u09d7\u09d8\5\u00ccg\2\u09d8"+
		"\u0139\3\2\2\2\u09d9\u09dd\5\u00ccg\2\u09da\u09dd\5\u00d2j\2\u09db\u09dd"+
		"\5\u00d4k\2\u09dc\u09d9\3\2\2\2\u09dc\u09da\3\2\2\2\u09dc\u09db\3\2\2"+
		"\2\u09dd\u013b\3\2\2\2\u09de\u09e0\5\u0152\u00aa\2\u09df\u09e1\5\u0154"+
		"\u00ab\2\u09e0\u09df\3\2\2\2\u09e0\u09e1\3\2\2\2\u09e1\u09eb\3\2\2\2\u09e2"+
		"\u09e3\7\u00e2\2\2\u09e3\u09e4\7X\2\2\u09e4\u09e5\7\"\2\2\u09e5\u09e6"+
		"\5\u01ae\u00d8\2\u09e6\u09e8\7#\2\2\u09e7\u09e9\5\u0154\u00ab\2\u09e8"+
		"\u09e7\3\2\2\2\u09e8\u09e9\3\2\2\2\u09e9\u09eb\3\2\2\2\u09ea\u09de\3\2"+
		"\2\2\u09ea\u09e2\3\2\2\2\u09eb\u013d\3\2\2\2\u09ec\u09ed\7\u018e\2\2\u09ed"+
		"\u09ee\7\"\2\2\u09ee\u09ef\5\u00f4{\2\u09ef\u09f0\5\u01a0\u00d1\2\u09f0"+
		"\u09f1\7\u018f\2\2\u09f1\u09f2\5\u0140\u00a1\2\u09f2\u09f3\7#\2\2\u09f3"+
		"\u0a02\3\2\2\2\u09f4\u09f5\7\u018e\2\2\u09f5\u09f6\7\"\2\2\u09f6\u09f7"+
		"\7\u0193\2\2\u09f7\u09f8\7\"\2\2\u09f8\u09f9\5\u0148\u00a5\2\u09f9\u09fa"+
		"\7#\2\2\u09fa\u09fb\7(\2\2\u09fb\u09fc\5\u00f4{\2\u09fc\u09fd\5\u01a0"+
		"\u00d1\2\u09fd\u09fe\7\u018f\2\2\u09fe\u09ff\5\u0140\u00a1\2\u09ff\u0a00"+
		"\7#\2\2\u0a00\u0a02\3\2\2\2\u0a01\u09ec\3\2\2\2\u0a01\u09f4\3\2\2\2\u0a02"+
		"\u013f\3\2\2\2\u0a03\u0a08\5\u0142\u00a2\2\u0a04\u0a05\7(\2\2\u0a05\u0a07"+
		"\5\u0142\u00a2\2\u0a06\u0a04\3\2\2\2\u0a07\u0a0a\3\2\2\2\u0a08\u0a06\3"+
		"\2\2\2\u0a08\u0a09\3\2\2\2\u0a09\u0141\3\2\2\2\u0a0a\u0a08\3\2\2\2\u0a0b"+
		"\u0a0c\5\u0138\u009d\2\u0a0c\u0a0d\5\u0158\u00ad\2\u0a0d\u0a17\3\2\2\2"+
		"\u0a0e\u0a0f\5\u0138\u009d\2\u0a0f\u0a10\5\u0158\u00ad\2\u0a10\u0a11\5"+
		"\u0144\u00a3\2\u0a11\u0a17\3\2\2\2\u0a12\u0a13\5\u0138\u009d\2\u0a13\u0a14"+
		"\7h\2\2\u0a14\u0a15\7\u0163\2\2\u0a15\u0a17\3\2\2\2\u0a16\u0a0b\3\2\2"+
		"\2\u0a16\u0a0e\3\2\2\2\u0a16\u0a12\3\2\2\2\u0a17\u0143\3\2\2\2\u0a18\u0a19"+
		"\b\u00a3\1\2\u0a19\u0a1a\5\u0146\u00a4\2\u0a1a\u0a1f\3\2\2\2\u0a1b\u0a1c"+
		"\f\3\2\2\u0a1c\u0a1e\5\u0146\u00a4\2\u0a1d\u0a1b\3\2\2\2\u0a1e\u0a21\3"+
		"\2\2\2\u0a1f\u0a1d\3\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20\u0145\3\2\2\2\u0a21"+
		"\u0a1f\3\2\2\2\u0a22\u0a23\5\u00ccg\2\u0a23\u0a24\5\u00f2z\2\u0a24\u0a2b"+
		"\3\2\2\2\u0a25\u0a26\7\u0097\2\2\u0a26\u0a2b\5\u00f2z\2\u0a27\u0a28\7"+
		"m\2\2\u0a28\u0a2b\7n\2\2\u0a29\u0a2b\7n\2\2\u0a2a\u0a22\3\2\2\2\u0a2a"+
		"\u0a25\3\2\2\2\u0a2a\u0a27\3\2\2\2\u0a2a\u0a29\3\2\2\2\u0a2b\u0147\3\2"+
		"\2\2\u0a2c\u0a31\5\u014a\u00a6\2\u0a2d\u0a2e\7(\2\2\u0a2e\u0a30\5\u014a"+
		"\u00a6\2\u0a2f\u0a2d\3\2\2\2\u0a30\u0a33\3\2\2\2\u0a31\u0a2f\3\2\2\2\u0a31"+
		"\u0a32\3\2\2\2\u0a32\u0149\3\2\2\2\u0a33\u0a31\3\2\2\2\u0a34\u0a35\5\u00f2"+
		"z\2\u0a35\u0a36\7c\2\2\u0a36\u0a37\5\u00ccg\2\u0a37\u0a3b\3\2\2\2\u0a38"+
		"\u0a39\7\u0097\2\2\u0a39\u0a3b\5\u00f2z\2\u0a3a\u0a34\3\2\2\2\u0a3a\u0a38"+
		"\3\2\2\2\u0a3b\u014b\3\2\2\2\u0a3c\u0a3e\5\u0132\u009a\2\u0a3d\u0a3f\5"+
		"\u014e\u00a8\2\u0a3e\u0a3d\3\2\2\2\u0a3e\u0a3f\3\2\2\2\u0a3f\u0a41\3\2"+
		"\2\2\u0a40\u0a42\5\u0150\u00a9\2\u0a41\u0a40\3\2\2\2\u0a41\u0a42\3\2\2"+
		"\2\u0a42\u0a44\3\2\2\2\u0a43\u0a45\5\u01d2\u00ea\2\u0a44\u0a43\3\2\2\2"+
		"\u0a44\u0a45\3\2\2\2\u0a45\u0a48\3\2\2\2\u0a46\u0a48\5\u0156\u00ac\2\u0a47"+
		"\u0a3c\3\2\2\2\u0a47\u0a46\3\2\2\2\u0a48\u014d\3\2\2\2\u0a49\u0a4a\7\u0136"+
		"\2\2\u0a4a\u0a4b\7x\2\2\u0a4b\u0a4c\7\"\2\2\u0a4c\u0a4d\5\u01c6\u00e4"+
		"\2\u0a4d\u0a4e\7#\2\2\u0a4e\u014f\3\2\2\2\u0a4f\u0a50\7\u00fd\2\2\u0a50"+
		"\u0a51\7\"\2\2\u0a51\u0a52\7b\2\2\u0a52\u0a53\5\u00f0y\2\u0a53\u0a54\7"+
		"#\2\2\u0a54\u0151\3\2\2\2\u0a55\u0a58\5\u0132\u009a\2\u0a56\u0a58\5\u0156"+
		"\u00ac\2\u0a57\u0a55\3\2\2\2\u0a57\u0a56\3\2\2\2\u0a58\u0153\3\2\2\2\u0a59"+
		"\u0a5a\7P\2\2\u0a5a\u0a5b\7\u0163\2\2\u0a5b\u0155\3\2\2\2\u0a5c\u0a5d"+
		"\7\u00a8\2\2\u0a5d\u0a5e\7h\2\2\u0a5e\u0a5f\7\"\2\2\u0a5f\u0a60\5\u00f0"+
		"y\2\u0a60\u0a61\7#\2\2\u0a61\u0b31\3\2\2\2\u0a62\u0b31\7\u00b3\2\2\u0a63"+
		"\u0b31\7\u00b4\2\2\u0a64\u0a65\7\u00b4\2\2\u0a65\u0a66\7\"\2\2\u0a66\u0a67"+
		"\7\u0223\2\2\u0a67\u0b31\7#\2\2\u0a68\u0b31\7\u00b5\2\2\u0a69\u0a6a\7"+
		"\u00b5\2\2\u0a6a\u0a6b\7\"\2\2\u0a6b\u0a6c\7\u0223\2\2\u0a6c\u0b31\7#"+
		"\2\2\u0a6d\u0b31\7\u008c\2\2\u0a6e\u0a6f\7\u008c\2\2\u0a6f\u0a70\7\"\2"+
		"\2\u0a70\u0a71\7\u0223\2\2\u0a71\u0b31\7#\2\2\u0a72\u0b31\7\u008d\2\2"+
		"\u0a73\u0a74\7\u008d\2\2\u0a74\u0a75\7\"\2\2\u0a75\u0a76\7\u0223\2\2\u0a76"+
		"\u0b31\7#\2\2\u0a77\u0b31\7\u0164\2\2\u0a78\u0b31\7\u00a0\2\2\u0a79\u0b31"+
		"\7\u0129\2\2\u0a7a\u0b31\7\u00e5\2\2\u0a7b\u0b31\7\u0165\2\2\u0a7c\u0b31"+
		"\7\u0166\2\2\u0a7d\u0a7e\7U\2\2\u0a7e\u0a7f\7\"\2\2\u0a7f\u0a80\5\u00f0"+
		"y\2\u0a80\u0a81\7c\2\2\u0a81\u0a82\5\u0158\u00ad\2\u0a82\u0a83\7#\2\2"+
		"\u0a83\u0b31\3\2\2\2\u0a84\u0a85\7\u00fc\2\2\u0a85\u0a87\7\"\2\2\u0a86"+
		"\u0a88\5\u015e\u00b0\2\u0a87\u0a86\3\2\2\2\u0a87\u0a88\3\2\2\2\u0a88\u0a89"+
		"\3\2\2\2\u0a89\u0b31\7#\2\2\u0a8a\u0a8b\7\u0167\2\2\u0a8b\u0a8c\7\"\2"+
		"\2\u0a8c\u0a8d\5\u00f0y\2\u0a8d\u0a8e\7#\2\2\u0a8e\u0b31\3\2\2\2\u0a8f"+
		"\u0a90\7\u0167\2\2\u0a90\u0a91\7\"\2\2\u0a91\u0a92\5\u00f0y\2\u0a92\u0a93"+
		"\7(\2\2\u0a93\u0a94\5\u018a\u00c6\2\u0a94\u0a95\7#\2\2\u0a95\u0b31\3\2"+
		"\2\2\u0a96\u0a97\7\u0168\2\2\u0a97\u0a98\7\"\2\2\u0a98\u0a99\5\u018e\u00c8"+
		"\2\u0a99\u0a9a\7#\2\2\u0a9a\u0b31\3\2\2\2\u0a9b\u0a9c\7H\2\2\u0a9c\u0a9d"+
		"\7\"\2\2\u0a9d\u0a9e\5\u0196\u00cc\2\u0a9e\u0a9f\7#\2\2\u0a9f\u0b31\3"+
		"\2\2\2\u0aa0\u0aa1\7W\2\2\u0aa1\u0aa2\7\"\2\2\u0aa2\u0aa3\5\u0198\u00cd"+
		"\2\u0aa3\u0aa4\7#\2\2\u0aa4\u0b31\3\2\2\2\u0aa5\u0aa6\7\u0171\2\2\u0aa6"+
		"\u0aa7\7\"\2\2\u0aa7\u0aa8\5\u00f0y\2\u0aa8\u0aa9\7c\2\2\u0aa9\u0aaa\5"+
		"\u0158\u00ad\2\u0aaa\u0aab\7#\2\2\u0aab\u0b31\3\2\2\2\u0aac\u0aad\7V\2"+
		"\2\u0aad\u0aae\7\"\2\2\u0aae\u0aaf\7\u00bb\2\2\u0aaf\u0ab0\5\u018c\u00c7"+
		"\2\u0ab0\u0ab1\7#\2\2\u0ab1\u0b31\3\2\2\2\u0ab2\u0ab3\7V\2\2\u0ab3\u0ab4"+
		"\7\"\2\2\u0ab4\u0ab5\7\u00bc\2\2\u0ab5\u0ab6\5\u018c\u00c7\2\u0ab6\u0ab7"+
		"\7#\2\2\u0ab7\u0b31\3\2\2\2\u0ab8\u0ab9\7V\2\2\u0ab9\u0aba\7\"\2\2\u0aba"+
		"\u0abb\7\u00bd\2\2\u0abb\u0abc\5\u018c\u00c7\2\u0abc\u0abd\7#\2\2\u0abd"+
		"\u0b31\3\2\2\2\u0abe\u0abf\7V\2\2\u0abf\u0ac0\7\"\2\2\u0ac0\u0ac1\5\u018c"+
		"\u00c7\2\u0ac1\u0ac2\7#\2\2\u0ac2\u0b31\3\2\2\2\u0ac3\u0ac4\7\u00b6\2"+
		"\2\u0ac4\u0ac5\7\"\2\2\u0ac5\u0ac6\5\u00f0y\2\u0ac6\u0ac7\7(\2\2\u0ac7"+
		"\u0ac8\5\u00f0y\2\u0ac8\u0ac9\7#\2\2\u0ac9\u0b31\3\2\2\2\u0aca\u0acb\7"+
		"\u00be\2\2\u0acb\u0acc\7\"\2\2\u0acc\u0acd\5\u015c\u00af\2\u0acd\u0ace"+
		"\7#\2\2\u0ace\u0b31\3\2\2\2\u0acf\u0ad0\7\u017d\2\2\u0ad0\u0ad1\7\"\2"+
		"\2\u0ad1\u0ad2\5\u015c\u00af\2\u0ad2\u0ad3\7#\2\2\u0ad3\u0b31\3\2\2\2"+
		"\u0ad4\u0ad5\7\u017e\2\2\u0ad5\u0ad6\7\"\2\2\u0ad6\u0ad7\5\u015c\u00af"+
		"\2\u0ad7\u0ad8\7#\2\2\u0ad8\u0b31\3\2\2\2\u0ad9\u0ada\7\u0169\2\2\u0ada"+
		"\u0adb\7\"\2\2\u0adb\u0adc\5\u015c\u00af\2\u0adc\u0add\7#\2\2\u0add\u0b31"+
		"\3\2\2\2\u0ade\u0adf\7\u016a\2\2\u0adf\u0ae0\7\"\2\2\u0ae0\u0ae1\7\u00a7"+
		"\2\2\u0ae1\u0ae2\5\u00ccg\2\u0ae2\u0ae3\7#\2\2\u0ae3\u0b31\3\2\2\2\u0ae4"+
		"\u0ae5\7\u016a\2\2\u0ae5\u0ae6\7\"\2\2\u0ae6\u0ae7\7\u00a7\2\2\u0ae7\u0ae8"+
		"\5\u00ccg\2\u0ae8\u0ae9\7(\2\2\u0ae9\u0aea\5\u019a\u00ce\2\u0aea\u0aeb"+
		"\7#\2\2\u0aeb\u0b31\3\2\2\2\u0aec\u0aed\7\u016a\2\2\u0aed\u0aee\7\"\2"+
		"\2\u0aee\u0aef\7\u00a7\2\2\u0aef\u0af0\5\u00ccg\2\u0af0\u0af1\7(\2\2\u0af1"+
		"\u0af2\5\u015c\u00af\2\u0af2\u0af3\7#\2\2\u0af3\u0b31\3\2\2\2\u0af4\u0af5"+
		"\7\u016a\2\2\u0af5\u0af6\7\"\2\2\u0af6\u0af7\7\u00a7\2\2\u0af7\u0af8\5"+
		"\u00ccg\2\u0af8\u0af9\7(\2\2\u0af9\u0afa\5\u019a\u00ce\2\u0afa\u0afb\7"+
		"(\2\2\u0afb\u0afc\5\u015c\u00af\2\u0afc\u0afd\7#\2\2\u0afd\u0b31\3\2\2"+
		"\2\u0afe\u0aff\7\u016b\2\2\u0aff\u0b00\7\"\2\2\u0b00\u0b01\5\u00f4{\2"+
		"\u0b01\u0b02\5\u01a0\u00d1\2\u0b02\u0b03\7#\2\2\u0b03\u0b31\3\2\2\2\u0b04"+
		"\u0b05\7\u016c\2\2\u0b05\u0b06\7\"\2\2\u0b06\u0b07\5\u019c\u00cf\2\u0b07"+
		"\u0b08\7#\2\2\u0b08\u0b31\3\2\2\2\u0b09\u0b0a\7\u016d\2\2\u0b0a\u0b0b"+
		"\7\"\2\2\u0b0b\u0b0c\5\u01a4\u00d3\2\u0b0c\u0b0d\5\u00f0y\2\u0b0d\u0b0e"+
		"\5\u01a6\u00d4\2\u0b0e\u0b0f\7#\2\2\u0b0f\u0b31\3\2\2\2\u0b10\u0b11\7"+
		"\u016e\2\2\u0b11\u0b12\7\"\2\2\u0b12\u0b13\7\u00a7\2\2\u0b13\u0b14\5\u00cc"+
		"g\2\u0b14\u0b15\7#\2\2\u0b15\u0b31\3\2\2\2\u0b16\u0b17\7\u016e\2\2\u0b17"+
		"\u0b18\7\"\2\2\u0b18\u0b19\7\u00a7\2\2\u0b19\u0b1a\5\u00ccg\2\u0b1a\u0b1b"+
		"\7(\2\2\u0b1b\u0b1c\5\u00f0y\2\u0b1c\u0b1d\7#\2\2\u0b1d\u0b31\3\2\2\2"+
		"\u0b1e\u0b1f\7\u016f\2\2\u0b1f\u0b20\7\"\2\2\u0b20\u0b21\5\u00f0y\2\u0b21"+
		"\u0b22\7(\2\2\u0b22\u0b24\5\u01a8\u00d5\2\u0b23\u0b25\5\u01aa\u00d6\2"+
		"\u0b24\u0b23\3\2\2\2\u0b24\u0b25\3\2\2\2\u0b25\u0b26\3\2\2\2\u0b26\u0b27"+
		"\7#\2\2\u0b27\u0b31\3\2\2\2\u0b28\u0b29\7\u0170\2\2\u0b29\u0b2a\7\"\2"+
		"\2\u0b2a\u0b2b\5\u01a4\u00d3\2\u0b2b\u0b2c\5\u00f0y\2\u0b2c\u0b2d\7c\2"+
		"\2\u0b2d\u0b2e\5\u015a\u00ae\2\u0b2e\u0b2f\7#\2\2\u0b2f\u0b31\3\2\2\2"+
		"\u0b30\u0a5c\3\2\2\2\u0b30\u0a62\3\2\2\2\u0b30\u0a63\3\2\2\2\u0b30\u0a64"+
		"\3\2\2\2\u0b30\u0a68\3\2\2\2\u0b30\u0a69\3\2\2\2\u0b30\u0a6d\3\2\2\2\u0b30"+
		"\u0a6e\3\2\2\2\u0b30\u0a72\3\2\2\2\u0b30\u0a73\3\2\2\2\u0b30\u0a77\3\2"+
		"\2\2\u0b30\u0a78\3\2\2\2\u0b30\u0a79\3\2\2\2\u0b30\u0a7a\3\2\2\2\u0b30"+
		"\u0a7b\3\2\2\2\u0b30\u0a7c\3\2\2\2\u0b30\u0a7d\3\2\2\2\u0b30\u0a84\3\2"+
		"\2\2\u0b30\u0a8a\3\2\2\2\u0b30\u0a8f\3\2\2\2\u0b30\u0a96\3\2\2\2\u0b30"+
		"\u0a9b\3\2\2\2\u0b30\u0aa0\3\2\2\2\u0b30\u0aa5\3\2\2\2\u0b30\u0aac\3\2"+
		"\2\2\u0b30\u0ab2\3\2\2\2\u0b30\u0ab8\3\2\2\2\u0b30\u0abe\3\2\2\2\u0b30"+
		"\u0ac3\3\2\2\2\u0b30\u0aca\3\2\2\2\u0b30\u0acf\3\2\2\2\u0b30\u0ad4\3\2"+
		"\2\2\u0b30\u0ad9\3\2\2\2\u0b30\u0ade\3\2\2\2\u0b30\u0ae4\3\2\2\2\u0b30"+
		"\u0aec\3\2\2\2\u0b30\u0af4\3\2\2\2\u0b30\u0afe\3\2\2\2\u0b30\u0b04\3\2"+
		"\2\2\u0b30\u0b09\3\2\2\2\u0b30\u0b10\3\2\2\2\u0b30\u0b16\3\2\2\2\u0b30"+
		"\u0b1e\3\2\2\2\u0b30\u0b28\3\2\2\2\u0b31\u0157\3\2\2\2\u0b32\u0b33\5\u015a"+
		"\u00ae\2\u0b33\u0b34\5\u0186\u00c4\2\u0b34\u0b4e\3\2\2\2\u0b35\u0b36\7"+
		"\u0172\2\2\u0b36\u0b37\5\u015a\u00ae\2\u0b37\u0b38\5\u0186\u00c4\2\u0b38"+
		"\u0b4e\3\2\2\2\u0b39\u0b3a\5\u015a\u00ae\2\u0b3a\u0b3b\7\u0087\2\2\u0b3b"+
		"\u0b3c\7&\2\2\u0b3c\u0b3d\7\u0223\2\2\u0b3d\u0b3e\7\'\2\2\u0b3e\u0b4e"+
		"\3\2\2\2\u0b3f\u0b40\7\u0172\2\2\u0b40\u0b41\5\u015a\u00ae\2\u0b41\u0b42"+
		"\7\u0087\2\2\u0b42\u0b43\7&\2\2\u0b43\u0b44\7\u0223\2\2\u0b44\u0b45\7"+
		"\'\2\2\u0b45\u0b4e\3\2\2\2\u0b46\u0b47\5\u015a\u00ae\2\u0b47\u0b48\7\u0087"+
		"\2\2\u0b48\u0b4e\3\2\2\2\u0b49\u0b4a\7\u0172\2\2\u0b4a\u0b4b\5\u015a\u00ae"+
		"\2\u0b4b\u0b4c\7\u0087\2\2\u0b4c\u0b4e\3\2\2\2\u0b4d\u0b32\3\2\2\2\u0b4d"+
		"\u0b35\3\2\2\2\u0b4d\u0b39\3\2\2\2\u0b4d\u0b3f\3\2\2\2\u0b4d\u0b46\3\2"+
		"\2\2\u0b4d\u0b49\3\2\2\2\u0b4e\u0159\3\2\2\2\u0b4f\u0b5d\5\u0162\u00b2"+
		"\2\u0b50\u0b5d\5\u0166\u00b4\2\u0b51\u0b5d\5\u017c\u00bf\2\u0b52\u0b5d"+
		"\5\u016c\u00b7\2\u0b53\u0b5d\5\u0168\u00b5\2\u0b54\u0b55\5\u0182\u00c2"+
		"\2\u0b55\u0b56\5\u0184\u00c3\2\u0b56\u0b5d\3\2\2\2\u0b57\u0b58\5\u0182"+
		"\u00c2\2\u0b58\u0b59\7\"\2\2\u0b59\u0b5a\7\u0223\2\2\u0b5a\u0b5b\7#\2"+
		"\2\u0b5b\u0b5d\3\2\2\2\u0b5c\u0b4f\3\2\2\2\u0b5c\u0b50\3\2\2\2\u0b5c\u0b51"+
		"\3\2\2\2\u0b5c\u0b52\3\2\2\2\u0b5c\u0b53\3\2\2\2\u0b5c\u0b54\3\2\2\2\u0b5c"+
		"\u0b57\3\2\2\2\u0b5d\u015b\3\2\2\2\u0b5e\u0b5f\b\u00af\1\2\u0b5f\u0b60"+
		"\5\u00f0y\2\u0b60\u0b66\3\2\2\2\u0b61\u0b62\f\3\2\2\u0b62\u0b63\7(\2\2"+
		"\u0b63\u0b65\5\u00f0y\2\u0b64\u0b61\3\2\2\2\u0b65\u0b68\3\2\2\2\u0b66"+
		"\u0b64\3\2\2\2\u0b66\u0b67\3\2\2\2\u0b67\u015d\3\2\2\2\u0b68\u0b66\3\2"+
		"\2\2\u0b69\u0b6a\5\u0160\u00b1\2\u0b6a\u0b6b\7X\2\2\u0b6b\u0b6c\5\u00f0"+
		"y\2\u0b6c\u015f\3\2\2\2\u0b6d\u0b75\7\u008e\2\2\u0b6e\u0b75\7\u0090\2"+
		"\2\u0b6f\u0b75\7\u0092\2\2\u0b70\u0b75\7\u0093\2\2\u0b71\u0b75\7\u0094"+
		"\2\2\u0b72\u0b75\7\u0095\2\2\u0b73\u0b75\5\u00ccg\2\u0b74\u0b6d\3\2\2"+
		"\2\u0b74\u0b6e\3\2\2\2\u0b74\u0b6f\3\2\2\2\u0b74\u0b70\3\2\2\2\u0b74\u0b71"+
		"\3\2\2\2\u0b74\u0b72\3\2\2\2\u0b74\u0b73\3\2\2\2\u0b75\u0161\3\2\2\2\u0b76"+
		"\u0b78\5\u013a\u009e\2\u0b77\u0b79\5\u0164\u00b3\2\u0b78\u0b77\3\2\2\2"+
		"\u0b78\u0b79\3\2\2\2\u0b79\u0b80\3\2\2\2\u0b7a\u0b7b\5\u013a\u009e\2\u0b7b"+
		"\u0b7d\5\u0176\u00bc\2\u0b7c\u0b7e\5\u0164\u00b3\2\u0b7d\u0b7c\3\2\2\2"+
		"\u0b7d\u0b7e\3\2\2\2\u0b7e\u0b80\3\2\2\2\u0b7f\u0b76\3\2\2\2\u0b7f\u0b7a"+
		"\3\2\2\2\u0b80\u0163\3\2\2\2\u0b81\u0b82\7\"\2\2\u0b82\u0b83\5\u015c\u00af"+
		"\2\u0b83\u0b84\7#\2\2\u0b84\u0165\3\2\2\2\u0b85\u0ba1\7\u013d\2\2\u0b86"+
		"\u0ba1\7\u00aa\2\2\u0b87\u0ba1\7\u00ae\2\2\u0b88\u0ba1\7\u00af\2\2\u0b89"+
		"\u0ba1\7\u00ab\2\2\u0b8a\u0b8b\7\u0141\2\2\u0b8b\u0ba1\5\u0174\u00bb\2"+
		"\u0b8c\u0b8d\7\u0084\2\2\u0b8d\u0ba1\7I\2\2\u0b8e\u0b90\7\u00ac\2\2\u0b8f"+
		"\u0b91\5\u0164\u00b3\2\u0b90\u0b8f\3\2\2\2\u0b90\u0b91\3\2\2\2\u0b91\u0ba1"+
		"\3\2\2\2\u0b92\u0b94\7\u00cb\2\2\u0b93\u0b95\5\u0164\u00b3\2\u0b94\u0b93"+
		"\3\2\2\2\u0b94\u0b95\3\2\2\2\u0b95\u0ba1\3\2\2\2\u0b96\u0b98\7\u00b0\2"+
		"\2\u0b97\u0b99\5\u0164\u00b3\2\u0b98\u0b97\3\2\2\2\u0b98\u0b99\3\2\2\2"+
		"\u0b99\u0ba1\3\2\2\2\u0b9a\u0ba1\7\u0083\2\2\u0b9b\u0ba1\7\u0143\2\2\u0b9c"+
		"\u0ba1\7\u0142\2\2\u0b9d\u0ba1\7\u013e\2\2\u0b9e\u0ba1\7\u013f\2\2\u0b9f"+
		"\u0ba1\7\u0140\2\2\u0ba0\u0b85\3\2\2\2\u0ba0\u0b86\3\2\2\2\u0ba0\u0b87"+
		"\3\2\2\2\u0ba0\u0b88\3\2\2\2\u0ba0\u0b89\3\2\2\2\u0ba0\u0b8a\3\2\2\2\u0ba0"+
		"\u0b8c\3\2\2\2\u0ba0\u0b8e\3\2\2\2\u0ba0\u0b92\3\2\2\2\u0ba0\u0b96\3\2"+
		"\2\2\u0ba0\u0b9a\3\2\2\2\u0ba0\u0b9b\3\2\2\2\u0ba0\u0b9c\3\2\2\2\u0ba0"+
		"\u0b9d\3\2\2\2\u0ba0\u0b9e\3\2\2\2\u0ba0\u0b9f\3\2\2\2\u0ba1\u0167\3\2"+
		"\2\2\u0ba2\u0ba3\7\u008b\2\2\u0ba3\u0ba4\7\"\2\2\u0ba4\u0ba5\7\u0223\2"+
		"\2\u0ba5\u0ba7\7#\2\2\u0ba6\u0ba8\5\u016a\u00b6\2\u0ba7\u0ba6\3\2\2\2"+
		"\u0ba7\u0ba8\3\2\2\2\u0ba8\u0bba\3\2\2\2\u0ba9\u0bab\7\u008b\2\2\u0baa"+
		"\u0bac\5\u016a\u00b6\2\u0bab\u0baa\3\2\2\2\u0bab\u0bac\3\2\2\2\u0bac\u0bba"+
		"\3\2\2\2\u0bad\u0bae\7\u008a\2\2\u0bae\u0baf\7\"\2\2\u0baf\u0bb0\7\u0223"+
		"\2\2\u0bb0\u0bb2\7#\2\2\u0bb1\u0bb3\5\u016a\u00b6\2\u0bb2\u0bb1\3\2\2"+
		"\2\u0bb2\u0bb3\3\2\2\2\u0bb3\u0bba\3\2\2\2\u0bb4\u0bb6\7\u008a\2\2\u0bb5"+
		"\u0bb7\5\u016a\u00b6\2\u0bb6\u0bb5\3\2\2\2\u0bb6\u0bb7\3\2\2\2\u0bb7\u0bba"+
		"\3\2\2\2\u0bb8\u0bba\7\u0089\2\2\u0bb9\u0ba2\3\2\2\2\u0bb9\u0ba9\3\2\2"+
		"\2\u0bb9\u0bad\3\2\2\2\u0bb9\u0bb4\3\2\2\2\u0bb9\u0bb8\3\2\2\2\u0bba\u0169"+
		"\3\2\2\2\u0bbb\u0bbc\7P\2\2\u0bbc\u0bbd\7\u008a\2\2\u0bbd\u0bc2\7\u0138"+
		"\2\2\u0bbe\u0bbf\7\u0137\2\2\u0bbf\u0bc0\7\u008a\2\2\u0bc0\u0bc2\7\u0138"+
		"\2\2\u0bc1\u0bbb\3\2\2\2\u0bc1\u0bbe\3\2\2\2\u0bc2\u016b\3\2\2\2\u0bc3"+
		"\u0bc6\5\u016e\u00b8\2\u0bc4\u0bc6\5\u0170\u00b9\2\u0bc5\u0bc3\3\2\2\2"+
		"\u0bc5\u0bc4\3\2\2\2\u0bc6\u016d\3\2\2\2\u0bc7\u0bc8\5\u0172\u00ba\2\u0bc8"+
		"\u0bc9\7\"\2\2\u0bc9\u0bca\7\u0223\2\2\u0bca\u0bcb\7#\2\2\u0bcb\u016f"+
		"\3\2\2\2\u0bcc\u0bcd\5\u0172\u00ba\2\u0bcd\u0171\3\2\2\2\u0bce\u0bd0\7"+
		"\u0086\2\2\u0bcf\u0bd1\7\u00b7\2\2\u0bd0\u0bcf\3\2\2\2\u0bd0\u0bd1\3\2"+
		"\2\2\u0bd1\u0be6\3\2\2\2\u0bd2\u0bd4\7\u0085\2\2\u0bd3\u0bd5\7\u00b7\2"+
		"\2\u0bd4\u0bd3\3\2\2\2\u0bd4\u0bd5\3\2\2\2\u0bd5\u0be6\3\2\2\2\u0bd6\u0be6"+
		"\7\u0148\2\2\u0bd7\u0bd8\7\u00b8\2\2\u0bd8\u0bda\7\u0086\2\2\u0bd9\u0bdb"+
		"\7\u00b7\2\2\u0bda\u0bd9\3\2\2\2\u0bda\u0bdb\3\2\2\2\u0bdb\u0be6\3\2\2"+
		"\2\u0bdc\u0bdd\7\u00b8\2\2\u0bdd\u0bdf\7\u0085\2\2\u0bde\u0be0\7\u00b7"+
		"\2\2\u0bdf\u0bde\3\2\2\2\u0bdf\u0be0\3\2\2\2\u0be0\u0be6\3\2\2\2\u0be1"+
		"\u0be3\7\u00b9\2\2\u0be2\u0be4\7\u00b7\2\2\u0be3\u0be2\3\2\2\2\u0be3\u0be4"+
		"\3\2\2\2\u0be4\u0be6\3\2\2\2\u0be5\u0bce\3\2\2\2\u0be5\u0bd2\3\2\2\2\u0be5"+
		"\u0bd6\3\2\2\2\u0be5\u0bd7\3\2\2\2\u0be5\u0bdc\3\2\2\2\u0be5\u0be1\3\2"+
		"\2\2\u0be6\u0173\3\2\2\2\u0be7\u0be8\7\"\2\2\u0be8\u0be9\7\u0223\2\2\u0be9"+
		"\u0bec\7#\2\2\u0bea\u0bec\3\2\2\2\u0beb\u0be7\3\2\2\2\u0beb\u0bea\3\2"+
		"\2\2\u0bec\u0175\3\2\2\2\u0bed\u0bee\b\u00bc\1\2\u0bee\u0bef\7\26\2\2"+
		"\u0bef\u0bf0\5\u0178\u00bd\2\u0bf0\u0bf6\3\2\2\2\u0bf1\u0bf2\f\3\2\2\u0bf2"+
		"\u0bf3\7\26\2\2\u0bf3\u0bf5\5\u0178\u00bd\2\u0bf4\u0bf1\3\2\2\2\u0bf5"+
		"\u0bf8\3\2\2\2\u0bf6\u0bf4\3\2\2\2\u0bf6\u0bf7\3\2\2\2\u0bf7\u0177\3\2"+
		"\2\2\u0bf8\u0bf6\3\2\2\2\u0bf9\u0bfa\5\u017a\u00be\2\u0bfa\u0179\3\2\2"+
		"\2\u0bfb\u0c00\5\u00ccg\2\u0bfc\u0c00\5\u01fc\u00ff\2\u0bfd\u0c00\5\u00d4"+
		"k\2\u0bfe\u0c00\5\u00c6d\2\u0bff\u0bfb\3\2\2\2\u0bff\u0bfc\3\2\2\2\u0bff"+
		"\u0bfd\3\2\2\2\u0bff\u0bfe\3\2\2\2\u0c00\u017b\3\2\2\2\u0c01\u0c04\5\u017e"+
		"\u00c0\2\u0c02\u0c04\5\u0180\u00c1\2\u0c03\u0c01\3\2\2\2\u0c03\u0c02\3"+
		"\2\2\2\u0c04\u017d\3\2\2\2\u0c05\u0c07\7\u0156\2\2\u0c06\u0c08\7\u00b7"+
		"\2\2\u0c07\u0c06\3\2\2\2\u0c07\u0c08\3\2\2\2\u0c08\u0c09\3\2\2\2\u0c09"+
		"\u0c0a\7\"\2\2\u0c0a\u0c0b\5\u015c\u00af\2\u0c0b\u0c0c\7#\2\2\u0c0c\u017f"+
		"\3\2\2\2\u0c0d\u0c0f\7\u0156\2\2\u0c0e\u0c10\7\u00b7\2\2\u0c0f\u0c0e\3"+
		"\2\2\2\u0c0f\u0c10\3\2\2\2\u0c10\u0181\3\2\2\2\u0c11\u0c12\7\u0088\2\2"+
		"\u0c12\u0183\3\2\2\2\u0c13\u0c30\7\u008e\2\2\u0c14\u0c30\7\u0090\2\2\u0c15"+
		"\u0c30\7\u0092\2\2\u0c16\u0c30\7\u0093\2\2\u0c17\u0c30\7\u0094\2\2\u0c18"+
		"\u0c30\5\u0188\u00c5\2\u0c19\u0c1a\7\u008e\2\2\u0c1a\u0c1b\7i\2\2\u0c1b"+
		"\u0c30\7\u0090\2\2\u0c1c\u0c1d\7\u0092\2\2\u0c1d\u0c1e\7i\2\2\u0c1e\u0c30"+
		"\7\u0093\2\2\u0c1f\u0c20\7\u0092\2\2\u0c20\u0c21\7i\2\2\u0c21\u0c30\7"+
		"\u0094\2\2\u0c22\u0c23\7\u0092\2\2\u0c23\u0c24\7i\2\2\u0c24\u0c30\5\u0188"+
		"\u00c5\2\u0c25\u0c26\7\u0093\2\2\u0c26\u0c27\7i\2\2\u0c27\u0c30\7\u0094"+
		"\2\2\u0c28\u0c29\7\u0093\2\2\u0c29\u0c2a\7i\2\2\u0c2a\u0c30\5\u0188\u00c5"+
		"\2\u0c2b\u0c2c\7\u0094\2\2\u0c2c\u0c2d\7i\2\2\u0c2d\u0c30\5\u0188\u00c5"+
		"\2\u0c2e\u0c30\3\2\2\2\u0c2f\u0c13\3\2\2\2\u0c2f\u0c14\3\2\2\2\u0c2f\u0c15"+
		"\3\2\2\2\u0c2f\u0c16\3\2\2\2\u0c2f\u0c17\3\2\2\2\u0c2f\u0c18\3\2\2\2\u0c2f"+
		"\u0c19\3\2\2\2\u0c2f\u0c1c\3\2\2\2\u0c2f\u0c1f\3\2\2\2\u0c2f\u0c22\3\2"+
		"\2\2\u0c2f\u0c25\3\2\2\2\u0c2f\u0c28\3\2\2\2\u0c2f\u0c2b\3\2\2\2\u0c2f"+
		"\u0c2e\3\2\2\2\u0c30\u0185\3\2\2\2\u0c31\u0c3b\b\u00c4\1\2\u0c32\u0c33"+
		"\f\5\2\2\u0c33\u0c34\7&\2\2\u0c34\u0c3a\7\'\2\2\u0c35\u0c36\f\4\2\2\u0c36"+
		"\u0c37\7&\2\2\u0c37\u0c38\7\u0223\2\2\u0c38\u0c3a\7\'\2\2\u0c39\u0c32"+
		"\3\2\2\2\u0c39\u0c35\3\2\2\2\u0c3a\u0c3d\3\2\2\2\u0c3b\u0c39\3\2\2\2\u0c3b"+
		"\u0c3c\3\2\2\2\u0c3c\u0187\3\2\2\2\u0c3d\u0c3b\3\2\2\2\u0c3e\u0c44\7\u0095"+
		"\2\2\u0c3f\u0c40\7\u0095\2\2\u0c40\u0c41\7\"\2\2\u0c41\u0c42\7\u0223\2"+
		"\2\u0c42\u0c44\7#\2\2\u0c43\u0c3e\3\2\2\2\u0c43\u0c3f\3\2\2\2\u0c44\u0189"+
		"\3\2\2\2\u0c45\u0c46\t\22\2\2\u0c46\u018b\3\2\2\2\u0c47\u0c48\5\u00f0"+
		"y\2\u0c48\u0c49\7X\2\2\u0c49\u0c4a\5\u015c\u00af\2\u0c4a\u0c4f\3\2\2\2"+
		"\u0c4b\u0c4c\7X\2\2\u0c4c\u0c4f\5\u015c\u00af\2\u0c4d\u0c4f\5\u015c\u00af"+
		"\2\u0c4e\u0c47\3\2\2\2\u0c4e\u0c4b\3\2\2\2\u0c4e\u0c4d\3\2\2\2\u0c4f\u018d"+
		"\3\2\2\2\u0c50\u0c51\5\u00f0y\2\u0c51\u0c52\5\u0190\u00c9\2\u0c52\u0c53"+
		"\5\u0192\u00ca\2\u0c53\u0c54\5\u0194\u00cb\2\u0c54\u0c5a\3\2\2\2\u0c55"+
		"\u0c56\5\u00f0y\2\u0c56\u0c57\5\u0190\u00c9\2\u0c57\u0c58\5\u0192\u00ca"+
		"\2\u0c58\u0c5a\3\2\2\2\u0c59\u0c50\3\2\2\2\u0c59\u0c55\3\2\2\2\u0c5a\u018f"+
		"\3\2\2\2\u0c5b\u0c5c\7\u0194\2\2\u0c5c\u0c5d\5\u00f0y\2\u0c5d\u0191\3"+
		"\2\2\2\u0c5e\u0c5f\7X\2\2\u0c5f\u0c60\5\u00f0y\2\u0c60\u0193\3\2\2\2\u0c61"+
		"\u0c62\7h\2\2\u0c62\u0c63\5\u00f0y\2\u0c63\u0195\3\2\2\2\u0c64\u0c65\5"+
		"\u00f2z\2\u0c65\u0c66\7s\2\2\u0c66\u0c67\5\u00f2z\2\u0c67\u0c6a\3\2\2"+
		"\2\u0c68\u0c6a\3\2\2\2\u0c69\u0c64\3\2\2\2\u0c69\u0c68\3\2\2\2\u0c6a\u0197"+
		"\3\2\2\2\u0c6b\u0c6c\5\u00f0y\2\u0c6c\u0c6d\5\u0192\u00ca\2\u0c6d\u0c6e"+
		"\5\u0194\u00cb\2\u0c6e\u0c7c\3\2\2\2\u0c6f\u0c70\5\u00f0y\2\u0c70\u0c71"+
		"\5\u0194\u00cb\2\u0c71\u0c72\5\u0192\u00ca\2\u0c72\u0c7c\3\2\2\2\u0c73"+
		"\u0c74\5\u00f0y\2\u0c74\u0c75\5\u0192\u00ca\2\u0c75\u0c7c\3\2\2\2\u0c76"+
		"\u0c77\5\u00f0y\2\u0c77\u0c78\5\u0194\u00cb\2\u0c78\u0c7c\3\2\2\2\u0c79"+
		"\u0c7c\5\u015c\u00af\2\u0c7a\u0c7c\3\2\2\2\u0c7b\u0c6b\3\2\2\2\u0c7b\u0c6f"+
		"\3\2\2\2\u0c7b\u0c73\3\2\2\2\u0c7b\u0c76\3\2\2\2\u0c7b\u0c79\3\2\2\2\u0c7b"+
		"\u0c7a\3\2\2\2\u0c7c\u0199\3\2\2\2\u0c7d\u0c7e\7\u0177\2\2\u0c7e\u0c7f"+
		"\7\"\2\2\u0c7f\u0c80\5\u019c\u00cf\2\u0c80\u0c81\7#\2\2\u0c81\u019b\3"+
		"\2\2\2\u0c82\u0c87\5\u019e\u00d0\2\u0c83\u0c84\7(\2\2\u0c84\u0c86\5\u019e"+
		"\u00d0\2\u0c85\u0c83\3\2\2\2\u0c86\u0c89\3\2\2\2\u0c87\u0c85\3\2\2\2\u0c87"+
		"\u0c88\3\2\2\2\u0c88\u019d\3\2\2\2\u0c89\u0c87\3\2\2\2\u0c8a\u0c8b\5\u00f0"+
		"y\2\u0c8b\u0c8c\7c\2\2\u0c8c\u0c8d\5\u00ccg\2\u0c8d\u0c90\3\2\2\2\u0c8e"+
		"\u0c90\5\u00f0y\2\u0c8f\u0c8a\3\2\2\2\u0c8f\u0c8e\3\2\2\2\u0c90\u019f"+
		"\3\2\2\2\u0c91\u0c92\7\u0179\2\2\u0c92\u0ca1\5\u00f4{\2\u0c93\u0c94\7"+
		"\u0179\2\2\u0c94\u0c95\5\u00f4{\2\u0c95\u0c96\5\u01a2\u00d2\2\u0c96\u0ca1"+
		"\3\2\2\2\u0c97\u0c98\7\u0179\2\2\u0c98\u0c99\5\u01a2\u00d2\2\u0c99\u0c9a"+
		"\5\u00f4{\2\u0c9a\u0ca1\3\2\2\2\u0c9b\u0c9c\7\u0179\2\2\u0c9c\u0c9d\5"+
		"\u01a2\u00d2\2\u0c9d\u0c9e\5\u00f4{\2\u0c9e\u0c9f\5\u01a2\u00d2\2\u0c9f"+
		"\u0ca1\3\2\2\2\u0ca0\u0c91\3\2\2\2\u0ca0\u0c93\3\2\2\2\u0ca0\u0c97\3\2"+
		"\2\2\u0ca0\u0c9b\3\2\2\2\u0ca1\u01a1\3\2\2\2\u0ca2\u0ca3\7y\2\2\u0ca3"+
		"\u0ca7\7\u0178\2\2\u0ca4\u0ca5\7y\2\2\u0ca5\u0ca7\7\u00ba\2\2\u0ca6\u0ca2"+
		"\3\2\2\2\u0ca6\u0ca4\3\2\2\2\u0ca7\u01a3\3\2\2\2\u0ca8\u0ca9\t\23\2\2"+
		"\u0ca9\u01a5\3\2\2\2\u0caa\u0cab\7\u009d\2\2\u0cab\u0cb0\7\u0192\2\2\u0cac"+
		"\u0cad\7\u0191\2\2\u0cad\u0cb0\7\u0192\2\2\u0cae\u0cb0\3\2\2\2\u0caf\u0caa"+
		"\3\2\2\2\u0caf\u0cac\3\2\2\2\u0caf\u0cae\3\2\2\2\u0cb0\u01a7\3\2\2\2\u0cb1"+
		"\u0cb2\7\u017a\2\2\u0cb2\u0cb7\5\u00f0y\2\u0cb3\u0cb4\7\u017a\2\2\u0cb4"+
		"\u0cb5\7\u00dc\2\2\u0cb5\u0cb7\7\u00ba\2\2\u0cb6\u0cb1\3\2\2\2\u0cb6\u0cb3"+
		"\3\2\2\2\u0cb7\u01a9\3\2\2\2\u0cb8\u0cb9\7(\2\2\u0cb9\u0cba\7\u017c\2"+
		"\2\u0cba\u0cc3\7\u017b\2\2\u0cbb\u0cbc\7(\2\2\u0cbc\u0cbd\7\u017c\2\2"+
		"\u0cbd\u0cc3\7\u00dc\2\2\u0cbe\u0cbf\7(\2\2\u0cbf\u0cc0\7\u017c\2\2\u0cc0"+
		"\u0cc1\7\u00dc\2\2\u0cc1\u0cc3\7\u00ba\2\2\u0cc2\u0cb8\3\2\2\2\u0cc2\u0cbb"+
		"\3\2\2\2\u0cc2\u0cbe\3\2\2\2\u0cc3\u01ab\3\2\2\2\u0cc4\u0cc5\5\u0152\u00aa"+
		"\2\u0cc5\u0cc6\5\u01b0\u00d9\2\u0cc6\u01ad\3\2\2\2\u0cc7\u0ccc\5\u01ac"+
		"\u00d7\2\u0cc8\u0cc9\7(\2\2\u0cc9\u0ccb\5\u01ac\u00d7\2\u0cca\u0cc8\3"+
		"\2\2\2\u0ccb\u0cce\3\2\2\2\u0ccc\u0cca\3\2\2\2\u0ccc\u0ccd\3\2\2\2\u0ccd"+
		"\u01af\3\2\2\2\u0cce\u0ccc\3\2\2\2\u0ccf\u0cd0\7c\2\2\u0cd0\u0cd1\7\""+
		"\2\2\u0cd1\u0cd2\5\u01b2\u00da\2\u0cd2\u0cd3\7#\2\2\u0cd3\u01b1\3\2\2"+
		"\2\u0cd4\u0cd9\5\u01b4\u00db\2\u0cd5\u0cd6\7(\2\2\u0cd6\u0cd8\5\u01b4"+
		"\u00db\2\u0cd7\u0cd5\3\2\2\2\u0cd8\u0cdb\3\2\2\2\u0cd9\u0cd7\3\2\2\2\u0cd9"+
		"\u0cda\3\2\2\2\u0cda\u01b3\3\2\2\2\u0cdb\u0cd9\3\2\2\2\u0cdc\u0cdd\5\u0138"+
		"\u009d\2\u0cdd\u0cdf\5\u0158\u00ad\2\u0cde\u0ce0\5\u01b6\u00dc\2\u0cdf"+
		"\u0cde\3\2\2\2\u0cdf\u0ce0\3\2\2\2\u0ce0\u01b5\3\2\2\2\u0ce1\u0ce3\7\u00ea"+
		"\2\2\u0ce2\u0ce4\7\32\2\2\u0ce3\u0ce2\3\2\2\2\u0ce3\u0ce4\3\2\2\2\u0ce4"+
		"\u0ce5\3\2\2\2\u0ce5\u0ce6\5\u01b8\u00dd\2\u0ce6\u01b7\3\2\2\2\u0ce7\u0cec"+
		"\5\u0138\u009d\2\u0ce8\u0ce9\5\u0138\u009d\2\u0ce9\u0cea\5\u0176\u00bc"+
		"\2\u0cea\u0cec\3\2\2\2\u0ceb\u0ce7\3\2\2\2\u0ceb\u0ce8\3\2\2\2\u0cec\u01b9"+
		"\3\2\2\2\u0ced\u0cee\7c\2\2\u0cee\u0cef\5\u0138\u009d\2\u0cef\u0cf0\7"+
		"\"\2\2\u0cf0\u0cf1\5\u01bc\u00df\2\u0cf1\u0cf2\7#\2\2\u0cf2\u0cfc\3\2"+
		"\2\2\u0cf3\u0cf4\7c\2\2\u0cf4\u0cfc\5\u0138\u009d\2\u0cf5\u0cf6\5\u0138"+
		"\u009d\2\u0cf6\u0cf7\7\"\2\2\u0cf7\u0cf8\5\u01bc\u00df\2\u0cf8\u0cf9\7"+
		"#\2\2\u0cf9\u0cfc\3\2\2\2\u0cfa\u0cfc\5\u0138\u009d\2\u0cfb\u0ced\3\2"+
		"\2\2\u0cfb\u0cf3\3\2\2\2\u0cfb\u0cf5\3\2\2\2\u0cfb\u0cfa\3\2\2\2\u0cfc"+
		"\u01bb\3\2\2\2\u0cfd\u0cfe\b\u00df\1\2\u0cfe\u0cff\5\u00dep\2\u0cff\u0d05"+
		"\3\2\2\2\u0d00\u0d01\f\3\2\2\u0d01\u0d02\7(\2\2\u0d02\u0d04\5\u00dep\2"+
		"\u0d03\u0d00\3\2\2\2\u0d04\u0d07\3\2\2\2\u0d05\u0d03\3\2\2\2\u0d05\u0d06"+
		"\3\2\2\2\u0d06\u01bd\3\2\2\2\u0d07\u0d05\3\2\2\2\u0d08\u0d1a\5\u01ba\u00de"+
		"\2\u0d09\u0d0a\7c\2\2\u0d0a\u0d0b\7\"\2\2\u0d0b\u0d0c\5\u01b2\u00da\2"+
		"\u0d0c\u0d0d\7#\2\2\u0d0d\u0d1a\3\2\2\2\u0d0e\u0d0f\7c\2\2\u0d0f\u0d10"+
		"\5\u0138\u009d\2\u0d10\u0d11\7\"\2\2\u0d11\u0d12\5\u01b2\u00da\2\u0d12"+
		"\u0d13\7#\2\2\u0d13\u0d1a\3\2\2\2\u0d14\u0d15\5\u0138\u009d\2\u0d15\u0d16"+
		"\7\"\2\2\u0d16\u0d17\5\u01b2\u00da\2\u0d17\u0d18\7#\2\2\u0d18\u0d1a\3"+
		"\2\2\2\u0d19\u0d08\3\2\2\2\u0d19\u0d09\3\2\2\2\u0d19\u0d0e\3\2\2\2\u0d19"+
		"\u0d14\3\2\2\2\u0d1a\u01bf\3\2\2\2\u0d1b\u0d1c\7\u0162\2\2\u0d1c\u0d1d"+
		"\5\u0134\u009b\2\u0d1d\u0d1e\7\"\2\2\u0d1e\u0d1f\5\u015c\u00af\2\u0d1f"+
		"\u0d21\7#\2\2\u0d20\u0d22\5\u01c2\u00e2\2\u0d21\u0d20\3\2\2\2\u0d21\u0d22"+
		"\3\2\2\2\u0d22\u01c1\3\2\2\2\u0d23\u0d24\7\u00b2\2\2\u0d24\u0d25\7\"\2"+
		"\2\u0d25\u0d26\5\u00f0y\2\u0d26\u0d27\7#\2\2\u0d27\u01c3\3\2\2\2\u0d28"+
		"\u0d29\t\24\2\2\u0d29\u01c5\3\2\2\2\u0d2a\u0d2b\7w\2\2\u0d2b\u0d2c\7y"+
		"\2\2\u0d2c\u0d2d\5\u01c8\u00e5\2\u0d2d\u01c7\3\2\2\2\u0d2e\u0d33\5\u01ca"+
		"\u00e6\2\u0d2f\u0d30\7(\2\2\u0d30\u0d32\5\u01ca\u00e6\2\u0d31\u0d2f\3"+
		"\2\2\2\u0d32\u0d35\3\2\2\2\u0d33\u0d31\3\2\2\2\u0d33\u0d34\3\2\2\2\u0d34"+
		"\u01c9\3\2\2\2\u0d35\u0d33\3\2\2\2\u0d36\u0d37\5\u00f0y\2\u0d37\u0d38"+
		"\7a\2\2\u0d38\u0d3a\5\u0116\u008c\2\u0d39\u0d3b\5\u01cc\u00e7\2\u0d3a"+
		"\u0d39\3\2\2\2\u0d3a\u0d3b\3\2\2\2\u0d3b\u0d44\3\2\2\2\u0d3c\u0d3e\5\u00f0"+
		"y\2\u0d3d\u0d3f\5\u0118\u008d\2\u0d3e\u0d3d\3\2\2\2\u0d3e\u0d3f\3\2\2"+
		"\2\u0d3f\u0d41\3\2\2\2\u0d40\u0d42\5\u01cc\u00e7\2\u0d41\u0d40\3\2\2\2"+
		"\u0d41\u0d42\3\2\2\2\u0d42\u0d44\3\2\2\2\u0d43\u0d36\3\2\2\2\u0d43\u0d3c"+
		"\3\2\2\2\u0d44\u01cb\3\2\2\2\u0d45\u0d46\7\u0114\2\2\u0d46\u0d4a\7\u00fe"+
		"\2\2\u0d47\u0d48\7\u0114\2\2\u0d48\u0d4a\7\u010d\2\2\u0d49\u0d45\3\2\2"+
		"\2\u0d49\u0d47\3\2\2\2\u0d4a\u01cd\3\2\2\2\u0d4b\u0d53\7R\2\2\u0d4c\u0d4d"+
		"\7R\2\2\u0d4d\u0d4e\7d\2\2\u0d4e\u0d4f\7\"\2\2\u0d4f\u0d50\5\u015c\u00af"+
		"\2\u0d50\u0d51\7#\2\2\u0d51\u0d53\3\2\2\2\u0d52\u0d4b\3\2\2\2\u0d52\u0d4c"+
		"\3\2\2\2\u0d53\u01cf\3\2\2\2\u0d54\u0d55\7R\2\2\u0d55\u01d1\3\2\2\2\u0d56"+
		"\u0d57\7\u0118\2\2\u0d57\u0d5b\5x=\2\u0d58\u0d59\7\u0118\2\2\u0d59\u0d5b"+
		"\5\u0138\u009d\2\u0d5a\u0d56\3\2\2\2\u0d5a\u0d58\3\2\2\2\u0d5b\u01d3\3"+
		"\2\2\2\u0d5c\u0d5d\5\u0138\u009d\2\u0d5d\u01d5\3\2\2\2\u0d5e\u0d63\5\u01da"+
		"\u00ee\2\u0d5f\u0d60\7(\2\2\u0d60\u0d62\5\u01da\u00ee\2\u0d61\u0d5f\3"+
		"\2\2\2\u0d62\u0d65\3\2\2\2\u0d63\u0d61\3\2\2\2\u0d63\u0d64\3\2\2\2\u0d64"+
		"\u01d7\3\2\2\2\u0d65\u0d63\3\2\2\2\u0d66\u0d68\5\u01dc\u00ef\2\u0d67\u0d66"+
		"\3\2\2\2\u0d67\u0d68\3\2\2\2\u0d68\u0d69\3\2\2\2\u0d69\u0d6b\5\u01de\u00f0"+
		"\2\u0d6a\u0d6c\5\u0118\u008d\2\u0d6b\u0d6a\3\2\2\2\u0d6b\u0d6c\3\2\2\2"+
		"\u0d6c\u0d6e\3\2\2\2\u0d6d\u0d6f\5\u01cc\u00e7\2\u0d6e\u0d6d\3\2\2\2\u0d6e"+
		"\u0d6f\3\2\2\2\u0d6f\u0d7c\3\2\2\2\u0d70\u0d72\5\u01dc\u00ef\2\u0d71\u0d70"+
		"\3\2\2\2\u0d71\u0d72\3\2\2\2\u0d72\u0d73\3\2\2\2\u0d73\u0d74\5\u01b8\u00dd"+
		"\2\u0d74\u0d76\5\u01e0\u00f1\2\u0d75\u0d77\5\u0118\u008d\2\u0d76\u0d75"+
		"\3\2\2\2\u0d76\u0d77\3\2\2\2\u0d77\u0d79\3\2\2\2\u0d78\u0d7a\5\u01cc\u00e7"+
		"\2\u0d79\u0d78\3\2\2\2\u0d79\u0d7a\3\2\2\2\u0d7a\u0d7c\3\2\2\2\u0d7b\u0d67"+
		"\3\2\2\2\u0d7b\u0d71\3\2\2\2\u0d7c\u01d9\3\2\2\2\u0d7d\u0d7e\5\u0138\u009d"+
		"\2\u0d7e\u0d7f\5\u01d8\u00ed\2\u0d7f\u0d89\3\2\2\2\u0d80\u0d81\5\u0152"+
		"\u00aa\2\u0d81\u0d82\5\u01d8\u00ed\2\u0d82\u0d89\3\2\2\2\u0d83\u0d84\7"+
		"\"\2\2\u0d84\u0d85\5\u00f0y\2\u0d85\u0d86\7#\2\2\u0d86\u0d87\5\u01d8\u00ed"+
		"\2\u0d87\u0d89\3\2\2\2\u0d88\u0d7d\3\2\2\2\u0d88\u0d80\3\2\2\2\u0d88\u0d83"+
		"\3\2\2\2\u0d89\u01db\3\2\2\2\u0d8a\u0d8b\7\u00ea\2\2\u0d8b\u0d8c\5\u01b8"+
		"\u00dd\2\u0d8c\u01dd\3\2\2\2\u0d8d\u0d90\5\u01b8\u00dd\2\u0d8e\u0d90\3"+
		"\2\2\2\u0d8f\u0d8d\3\2\2\2\u0d8f\u0d8e\3\2\2\2\u0d90\u01df\3\2\2\2\u0d91"+
		"\u0d92\7\"\2\2\u0d92\u0d93\5\u01e2\u00f2\2\u0d93\u0d94\7#\2\2\u0d94\u01e1"+
		"\3\2\2\2\u0d95\u0d9a\5\u01e4\u00f3\2\u0d96\u0d97\7(\2\2\u0d97\u0d99\5"+
		"\u01e4\u00f3\2\u0d98\u0d96\3\2\2\2\u0d99\u0d9c\3\2\2\2\u0d9a\u0d98\3\2"+
		"\2\2\u0d9a\u0d9b\3\2\2\2\u0d9b\u01e3\3\2\2\2\u0d9c\u0d9a\3\2\2\2\u0d9d"+
		"\u0d9e\5\u0086D\2\u0d9e\u0d9f\7\32\2\2\u0d9f\u0da0\5\u01e6\u00f4\2\u0da0"+
		"\u0dad\3\2\2\2\u0da1\u0dad\5\u0086D\2\u0da2\u0da3\5\u0086D\2\u0da3\u0da4"+
		"\7\26\2\2\u0da4\u0da5\5\u0086D\2\u0da5\u0da6\7\32\2\2\u0da6\u0da7\5\u01e6"+
		"\u00f4\2\u0da7\u0dad\3\2\2\2\u0da8\u0da9\5\u0086D\2\u0da9\u0daa\7\26\2"+
		"\2\u0daa\u0dab\5\u0086D\2\u0dab\u0dad\3\2\2\2\u0dac\u0d9d\3\2\2\2\u0dac"+
		"\u0da1\3\2\2\2\u0dac\u0da2\3\2\2\2\u0dac\u0da8\3\2\2\2\u0dad\u01e5\3\2"+
		"\2\2\u0dae\u0db5\5\u01e8\u00f5\2\u0daf\u0db5\5\u00c6d\2\u0db0\u0db5\5"+
		"\u0116\u008c\2\u0db1\u0db5\7\u0223\2\2\u0db2\u0db5\7\u0222\2\2\u0db3\u0db5"+
		"\7\u0197\2\2\u0db4\u0dae\3\2\2\2\u0db4\u0daf\3\2\2\2\u0db4\u0db0\3\2\2"+
		"\2\u0db4\u0db1\3\2\2\2\u0db4\u0db2\3\2\2\2\u0db4\u0db3\3\2\2\2\u0db5\u01e7"+
		"\3\2\2\2\u0db6\u0dc3\5\u0158\u00ad\2\u0db7\u0db8\5\u013a\u009e\2\u0db8"+
		"\u0db9\5\u0176\u00bc\2\u0db9\u0dba\7\17\2\2\u0dba\u0dbb\7\u00ad\2\2\u0dbb"+
		"\u0dc3\3\2\2\2\u0dbc\u0dbd\7\u0172\2\2\u0dbd\u0dbe\5\u013a\u009e\2\u0dbe"+
		"\u0dbf\5\u0176\u00bc\2\u0dbf\u0dc0\7\17\2\2\u0dc0\u0dc1\7\u00ad\2\2\u0dc1"+
		"\u0dc3\3\2\2\2\u0dc2\u0db6\3\2\2\2\u0dc2\u0db7\3\2\2\2\u0dc2\u0dbc\3\2"+
		"\2\2\u0dc3\u01e9\3\2\2\2\u0dc4\u0dc6\5\u01ec\u00f7\2\u0dc5\u0dc7\5\u01ee"+
		"\u00f8\2\u0dc6\u0dc5\3\2\2\2\u0dc6\u0dc7\3\2\2\2\u0dc7\u0dc9\3\2\2\2\u0dc8"+
		"\u0dca\5\u01f0\u00f9\2\u0dc9\u0dc8\3\2\2\2\u0dc9\u0dca\3\2\2\2\u0dca\u0dcc"+
		"\3\2\2\2\u0dcb\u0dcd\5\u01b6\u00dc\2\u0dcc\u0dcb\3\2\2\2\u0dcc\u0dcd\3"+
		"\2\2\2\u0dcd\u0de0\3\2\2\2\u0dce\u0dcf\5\u01ec\u00f7\2\u0dcf\u0dd0\7\""+
		"\2\2\u0dd0\u0dd5\7\u0222\2\2\u0dd1\u0dd2\7(\2\2\u0dd2\u0dd4\7\u0222\2"+
		"\2\u0dd3\u0dd1\3\2\2\2\u0dd4\u0dd7\3\2\2\2\u0dd5\u0dd3\3\2\2\2\u0dd5\u0dd6"+
		"\3\2\2\2\u0dd6\u0dd8\3\2\2\2\u0dd7\u0dd5\3\2\2\2\u0dd8\u0dda\7#\2\2\u0dd9"+
		"\u0ddb\5\u01f0\u00f9\2\u0dda\u0dd9\3\2\2\2\u0dda\u0ddb\3\2\2\2\u0ddb\u0ddd"+
		"\3\2\2\2\u0ddc\u0dde\5\u01b6\u00dc\2\u0ddd\u0ddc\3\2\2\2\u0ddd\u0dde\3"+
		"\2\2\2\u0dde\u0de0\3\2\2\2\u0ddf\u0dc4\3\2\2\2\u0ddf\u0dce\3\2\2\2\u0de0"+
		"\u01eb\3\2\2\2\u0de1\u0e1c\7\u013d\2\2\u0de2\u0e1c\7\u013e\2\2\u0de3\u0e1c"+
		"\7\u013f\2\2\u0de4\u0e1c\7\u0140\2\2\u0de5\u0e1c\7\u00ae\2\2\u0de6\u0e1c"+
		"\7\u00aa\2\2\u0de7\u0e1c\7\u00af\2\2\u0de8\u0e1c\7\u00ac\2\2\u0de9\u0e1c"+
		"\7\u00b0\2\2\u0dea\u0e1c\7\u00ab\2\2\u0deb\u0e1c\7\u0141\2\2\u0dec\u0e1c"+
		"\7\u0142\2\2\u0ded\u0e1c\7\u0143\2\2\u0dee\u0def\7\u0084\2\2\u0def\u0e1c"+
		"\7I\2\2\u0df0\u0e1c\7\u0144\2\2\u0df1\u0e1c\7\u0145\2\2\u0df2\u0e1c\7"+
		"\u0146\2\2\u0df3\u0e1c\7\u0147\2\2\u0df4\u0e1c\7\u0148\2\2\u0df5\u0e1c"+
		"\7\u0086\2\2\u0df6\u0e1c\7\u0085\2\2\u0df7\u0e1c\7\u00b1\2\2\u0df8\u0e1c"+
		"\7\u00a7\2\2\u0df9\u0e1c\7\u0149\2\2\u0dfa\u0e1c\7\u008b\2\2\u0dfb\u0e1c"+
		"\7\u0089\2\2\u0dfc\u0e1c\7\u008a\2\2\u0dfd\u0e1c\7\u0088\2\2\u0dfe\u0e1c"+
		"\7\u0083\2\2\u0dff\u0e1c\7\u014a\2\2\u0e00\u0e1c\7\u014b\2\2\u0e01\u0e1c"+
		"\7\u014c\2\2\u0e02\u0e1c\7\u014d\2\2\u0e03\u0e1c\7\u014e\2\2\u0e04\u0e1c"+
		"\7\u014f\2\2\u0e05\u0e1c\7\u0150\2\2\u0e06\u0e1c\7\u0151\2\2\u0e07\u0e1c"+
		"\7\u0152\2\2\u0e08\u0e1c\7\u0153\2\2\u0e09\u0e1c\7\u0154\2\2\u0e0a\u0e1c"+
		"\7\u0155\2\2\u0e0b\u0e1c\7\u0156\2\2\u0e0c\u0e1c\7\u0157\2\2\u0e0d\u0e1c"+
		"\7\u0158\2\2\u0e0e\u0e1c\7\u0159\2\2\u0e0f\u0e1c\7\u015a\2\2\u0e10\u0e1c"+
		"\7\u015b\2\2\u0e11\u0e1c\7\u015c\2\2\u0e12\u0e1c\7\u015d\2\2\u0e13\u0e1c"+
		"\7\u015e\2\2\u0e14\u0e1c\7\u015f\2\2\u0e15\u0e1c\7\u0160\2\2\u0e16\u0e1c"+
		"\7\u0161\2\2\u0e17\u0e1c\7\u0087\2\2\u0e18\u0e1c\5\u00ccg\2\u0e19\u0e1c"+
		"\5\u0168\u00b5\2\u0e1a\u0e1c\5\u0158\u00ad\2\u0e1b\u0de1\3\2\2\2\u0e1b"+
		"\u0de2\3\2\2\2\u0e1b\u0de3\3\2\2\2\u0e1b\u0de4\3\2\2\2\u0e1b\u0de5\3\2"+
		"\2\2\u0e1b\u0de6\3\2\2\2\u0e1b\u0de7\3\2\2\2\u0e1b\u0de8\3\2\2\2\u0e1b"+
		"\u0de9\3\2\2\2\u0e1b\u0dea\3\2\2\2\u0e1b\u0deb\3\2\2\2\u0e1b\u0dec\3\2"+
		"\2\2\u0e1b\u0ded\3\2\2\2\u0e1b\u0dee\3\2\2\2\u0e1b\u0df0\3\2\2\2\u0e1b"+
		"\u0df1\3\2\2\2\u0e1b\u0df2\3\2\2\2\u0e1b\u0df3\3\2\2\2\u0e1b\u0df4\3\2"+
		"\2\2\u0e1b\u0df5\3\2\2\2\u0e1b\u0df6\3\2\2\2\u0e1b\u0df7\3\2\2\2\u0e1b"+
		"\u0df8\3\2\2\2\u0e1b\u0df9\3\2\2\2\u0e1b\u0dfa\3\2\2\2\u0e1b\u0dfb\3\2"+
		"\2\2\u0e1b\u0dfc\3\2\2\2\u0e1b\u0dfd\3\2\2\2\u0e1b\u0dfe\3\2\2\2\u0e1b"+
		"\u0dff\3\2\2\2\u0e1b\u0e00\3\2\2\2\u0e1b\u0e01\3\2\2\2\u0e1b\u0e02\3\2"+
		"\2\2\u0e1b\u0e03\3\2\2\2\u0e1b\u0e04\3\2\2\2\u0e1b\u0e05\3\2\2\2\u0e1b"+
		"\u0e06\3\2\2\2\u0e1b\u0e07\3\2\2\2\u0e1b\u0e08\3\2\2\2\u0e1b\u0e09\3\2"+
		"\2\2\u0e1b\u0e0a\3\2\2\2\u0e1b\u0e0b\3\2\2\2\u0e1b\u0e0c\3\2\2\2\u0e1b"+
		"\u0e0d\3\2\2\2\u0e1b\u0e0e\3\2\2\2\u0e1b\u0e0f\3\2\2\2\u0e1b\u0e10\3\2"+
		"\2\2\u0e1b\u0e11\3\2\2\2\u0e1b\u0e12\3\2\2\2\u0e1b\u0e13\3\2\2\2\u0e1b"+
		"\u0e14\3\2\2\2\u0e1b\u0e15\3\2\2\2\u0e1b\u0e16\3\2\2\2\u0e1b\u0e17\3\2"+
		"\2\2\u0e1b\u0e18\3\2\2\2\u0e1b\u0e19\3\2\2\2\u0e1b\u0e1a\3\2\2\2\u0e1c"+
		"\u01ed\3\2\2\2\u0e1d\u0e1e\7\"\2\2\u0e1e\u0e21\7\u0223\2\2\u0e1f\u0e20"+
		"\7(\2\2\u0e20\u0e22\7\u0223\2\2\u0e21\u0e1f\3\2\2\2\u0e21\u0e22\3\2\2"+
		"\2\u0e22\u0e23\3\2\2\2\u0e23\u0e24\7#\2\2\u0e24\u01ef\3\2\2\2\u0e25\u0e26"+
		"\t\25\2\2\u0e26\u0e28\7?\2\2\u0e27\u0e29\7\32\2\2\u0e28\u0e27\3\2\2\2"+
		"\u0e28\u0e29\3\2\2\2\u0e29\u0e2a\3\2\2\2\u0e2a\u0e2b\5\u01f2\u00fa\2\u0e2b"+
		"\u01f1\3\2\2\2\u0e2c\u0e2f\5\u00ccg\2\u0e2d\u0e2e\7\26\2\2\u0e2e\u0e30"+
		"\5\u00ccg\2\u0e2f\u0e2d\3\2\2\2\u0e2f\u0e30\3\2\2\2\u0e30\u01f3\3\2\2"+
		"\2\u0e31\u0e36\5\u01f2\u00fa\2\u0e32\u0e33\7(\2\2\u0e33\u0e35\5\u01f2"+
		"\u00fa\2\u0e34\u0e32\3\2\2\2\u0e35\u0e38\3\2\2\2\u0e36\u0e34\3\2\2\2\u0e36"+
		"\u0e37\3\2\2\2\u0e37\u01f5\3\2\2\2\u0e38\u0e36\3\2\2\2\u0e39\u0e3f\7\u0223"+
		"\2\2\u0e3a\u0e3b\7\21\2\2\u0e3b\u0e3f\7\u0223\2\2\u0e3c\u0e3d\7\22\2\2"+
		"\u0e3d\u0e3f\7\u0223\2\2\u0e3e\u0e39\3\2\2\2\u0e3e\u0e3a\3\2\2\2\u0e3e"+
		"\u0e3c\3\2\2\2\u0e3f\u01f7\3\2\2\2\u0e40\u0e46\7o\2\2\u0e41\u0e46\7p\2"+
		"\2\u0e42\u0e46\7d\2\2\u0e43\u0e46\5\u01fa\u00fe\2\u0e44\u0e46\7\u0222"+
		"\2\2\u0e45\u0e40\3\2\2\2\u0e45\u0e41\3\2\2\2\u0e45\u0e42\3\2\2\2\u0e45"+
		"\u0e43\3\2\2\2\u0e45\u0e44\3\2\2\2\u0e46\u01f9\3\2\2\2\u0e47\u0e4c\5\u00cc"+
		"g\2\u0e48\u0e4c\5\u00d2j\2\u0e49\u0e4c\5\u01fc\u00ff\2\u0e4a\u0e4c\5\u00d4"+
		"k\2\u0e4b\u0e47\3\2\2\2\u0e4b\u0e48\3\2\2\2\u0e4b\u0e49\3\2\2\2\u0e4b"+
		"\u0e4a\3\2\2\2\u0e4c\u01fb\3\2\2\2\u0e4d\u0e4e\t\26\2\2\u0e4e\u01fd\3"+
		"\2\2\2\u0e4f\u0e50\5\u0138\u009d\2\u0e50\u01ff\3\2\2\2\u0e51\u0e56\5\u00cc"+
		"g\2\u0e52\u0e56\5\u01fa\u00fe\2\u0e53\u0e56\7\u00a0\2\2\u0e54\u0e56\7"+
		"\u0129\2\2\u0e55\u0e51\3\2\2\2\u0e55\u0e52\3\2\2\2\u0e55\u0e53\3\2\2\2"+
		"\u0e55\u0e54\3\2\2\2\u0e56\u0201\3\2\2\2\u0e57\u0e58\b\u0102\1\2\u0e58"+
		"\u0e59\5\u0138\u009d\2\u0e59\u0e5f\3\2\2\2\u0e5a\u0e5b\f\3\2\2\u0e5b\u0e5c"+
		"\7\26\2\2\u0e5c\u0e5e\5\u0138\u009d\2\u0e5d\u0e5a\3\2\2\2\u0e5e\u0e61"+
		"\3\2\2\2\u0e5f\u0e5d\3\2\2\2\u0e5f\u0e60\3\2\2\2\u0e60\u0203\3\2\2\2\u0e61"+
		"\u0e5f\3\2\2\2\u0e62\u0e67\5\u0206\u0104\2\u0e63\u0e64\7(\2\2\u0e64\u0e66"+
		"\5\u0206\u0104\2\u0e65\u0e63\3\2\2\2\u0e66\u0e69\3\2\2\2\u0e67\u0e65\3"+
		"\2\2\2\u0e67\u0e68\3\2\2\2\u0e68\u0205\3\2\2\2\u0e69\u0e67\3\2\2\2\u0e6a"+
		"\u0e6d\5\u01f8\u00fd\2\u0e6b\u0e6d\5\u020a\u0106\2\u0e6c\u0e6a\3\2\2\2"+
		"\u0e6c\u0e6b\3\2\2\2\u0e6d\u0207\3\2\2\2\u0e6e\u0e7c\7\u0222\2\2\u0e6f"+
		"\u0e7c\5\u00ccg\2\u0e70\u0e71\7\u0088\2\2\u0e71\u0e72\7\u0222\2\2\u0e72"+
		"\u0e7c\5\u0184\u00c3\2\u0e73\u0e74\7\u0088\2\2\u0e74\u0e75\7\"\2\2\u0e75"+
		"\u0e76\7\u0223\2\2\u0e76\u0e77\7#\2\2\u0e77\u0e7c\7\u0222\2\2\u0e78\u0e7c"+
		"\5\u020a\u0106\2\u0e79\u0e7c\7\u0097\2\2\u0e7a\u0e7c\7\u00a3\2\2\u0e7b"+
		"\u0e6e\3\2\2\2\u0e7b\u0e6f\3\2\2\2\u0e7b\u0e70\3\2\2\2\u0e7b\u0e73\3\2"+
		"\2\2\u0e7b\u0e78\3\2\2\2\u0e7b\u0e79\3\2\2\2\u0e7b\u0e7a\3\2\2\2\u0e7c"+
		"\u0209\3\2\2\2\u0e7d\u0e83\7\u0223\2\2\u0e7e\u0e7f\7\21\2\2\u0e7f\u0e83"+
		"\7\u0223\2\2\u0e80\u0e81\7\22\2\2\u0e81\u0e83\7\u0223\2\2\u0e82\u0e7d"+
		"\3\2\2\2\u0e82\u0e7e\3\2\2\2\u0e82\u0e80\3\2\2\2\u0e83\u020b\3\2\2\2\u0e84"+
		"\u0e85\7\u00df\2\2\u0e85\u0e8c\7\u020d\2\2\u0e86\u0e87\7\u00df\2\2\u0e87"+
		"\u0e8c\7\u01c1\2\2\u0e88\u0e89\7\u00b2\2\2\u0e89\u0e8c\7\u00df\2\2\u0e8a"+
		"\u0e8c\7\u0202\2\2\u0e8b\u0e84\3\2\2\2\u0e8b\u0e86\3\2\2\2\u0e8b\u0e88"+
		"\3\2\2\2\u0e8b\u0e8a\3\2\2\2\u0e8c\u020d\3\2\2\2\u0e8d\u0e8e\5\u0138\u009d"+
		"\2\u0e8e\u0e90\5\u0158\u00ad\2\u0e8f\u0e91\5\u023c\u011f\2\u0e90\u0e8f"+
		"\3\2\2\2\u0e90\u0e91\3\2\2\2\u0e91\u0e92\3\2\2\2\u0e92\u0e93\5\u0210\u0109"+
		"\2\u0e93\u020f\3\2\2\2\u0e94\u0e96\5\u0212\u010a\2\u0e95\u0e94\3\2\2\2"+
		"\u0e96\u0e99\3\2\2\2\u0e97\u0e95\3\2\2\2\u0e97\u0e98\3\2\2\2\u0e98\u0211"+
		"\3\2\2\2\u0e99\u0e97\3\2\2\2\u0e9a\u0e9b\7C\2\2\u0e9b\u0e9c\5\u00dep\2"+
		"\u0e9c\u0e9d\5\u0216\u010c\2\u0e9d\u0ea3\3\2\2\2\u0e9e\u0ea3\5\u0216\u010c"+
		"\2\u0e9f\u0ea3\5\u0214\u010b\2\u0ea0\u0ea1\7\u00ea\2\2\u0ea1\u0ea3\5\u01b8"+
		"\u00dd\2\u0ea2\u0e9a\3\2\2\2\u0ea2\u0e9e\3\2\2\2\u0ea2\u0e9f\3\2\2\2\u0ea2"+
		"\u0ea0\3\2\2\2\u0ea3\u0213\3\2\2\2\u0ea4\u0eac\7\u00f3\2\2\u0ea5\u0ea6"+
		"\7m\2\2\u0ea6\u0eac\7\u00f3\2\2\u0ea7\u0ea8\7\u0109\2\2\u0ea8\u0eac\7"+
		"\u00f4\2\2\u0ea9\u0eaa\7\u0109\2\2\u0eaa\u0eac\7\u0103\2\2\u0eab\u0ea4"+
		"\3\2\2\2\u0eab\u0ea5\3\2\2\2\u0eab\u0ea7\3\2\2\2\u0eab\u0ea9\3\2\2\2\u0eac"+
		"\u0215\3\2\2\2\u0ead\u0eae\7m\2\2\u0eae\u0ee1\7n\2\2\u0eaf\u0ee1\7n\2"+
		"\2\u0eb0\u0eb3\7E\2\2\u0eb1\u0eb2\7P\2\2\u0eb2\u0eb4\5\u022a\u0116\2\u0eb3"+
		"\u0eb1\3\2\2\2\u0eb3\u0eb4\3\2\2\2\u0eb4\u0eb5\3\2\2\2\u0eb5\u0ee1\5\u0228"+
		"\u0115\2\u0eb6\u0eb7\7D\2\2\u0eb7\u0eba\7G\2\2\u0eb8\u0eb9\7P\2\2\u0eb9"+
		"\u0ebb\5\u022a\u0116\2\u0eba\u0eb8\3\2\2\2\u0eba\u0ebb\3\2\2\2\u0ebb\u0ebc"+
		"\3\2\2\2\u0ebc\u0ee1\5\u0228\u0115\2\u0ebd\u0ebe\7\u00d8\2\2\u0ebe\u0ebf"+
		"\7\"\2\2\u0ebf\u0ec0\5\u00f0y\2\u0ec0\u0ec2\7#\2\2\u0ec1\u0ec3\5\u0226"+
		"\u0114\2\u0ec2\u0ec1\3\2\2\2\u0ec2\u0ec3\3\2\2\2\u0ec3\u0ee1\3\2\2\2\u0ec4"+
		"\u0ec5\7\u0097\2\2\u0ec5\u0ee1\5\u00f2z\2\u0ec6\u0ec7\7\u00d9\2\2\u0ec7"+
		"\u0ec8\5\u0224\u0113\2\u0ec8\u0ec9\7c\2\2\u0ec9\u0ecb\7\u0102\2\2\u0eca"+
		"\u0ecc\5\u0218\u010d\2\u0ecb\u0eca\3\2\2\2\u0ecb\u0ecc\3\2\2\2\u0ecc\u0ee1"+
		"\3\2\2\2\u0ecd\u0ece\7\u00d9\2\2\u0ece\u0ecf\5\u0224\u0113\2\u0ecf\u0ed0"+
		"\7c\2\2\u0ed0\u0ed1\7\"\2\2\u0ed1\u0ed2\5\u00f0y\2\u0ed2\u0ed3\7#\2\2"+
		"\u0ed3\u0ed4\7\u0215\2\2\u0ed4\u0ee1\3\2\2\2\u0ed5\u0ed6\7\u00e0\2\2\u0ed6"+
		"\u0ed8\5L\'\2\u0ed7\u0ed9\5\u021e\u0110\2\u0ed8\u0ed7\3\2\2\2\u0ed8\u0ed9"+
		"\3\2\2\2\u0ed9\u0edb\3\2\2\2\u0eda\u0edc\5\u023a\u011e\2\u0edb\u0eda\3"+
		"\2\2\2\u0edb\u0edc\3\2\2\2\u0edc\u0ede\3\2\2\2\u0edd\u0edf\5\u0232\u011a"+
		"\2\u0ede\u0edd\3\2\2\2\u0ede\u0edf\3\2\2\2\u0edf\u0ee1\3\2\2\2\u0ee0\u0ead"+
		"\3\2\2\2\u0ee0\u0eaf\3\2\2\2\u0ee0\u0eb0\3\2\2\2\u0ee0\u0eb6\3\2\2\2\u0ee0"+
		"\u0ebd\3\2\2\2\u0ee0\u0ec4\3\2\2\2\u0ee0\u0ec6\3\2\2\2\u0ee0\u0ecd\3\2"+
		"\2\2\u0ee0\u0ed5\3\2\2\2\u0ee1\u0217\3\2\2\2\u0ee2\u0ee3\7\"\2\2\u0ee3"+
		"\u0ee4\5\u021a\u010e\2\u0ee4\u0ee5\7#\2\2\u0ee5\u0219\3\2\2\2\u0ee6\u0ee8"+
		"\5\u021c\u010f\2\u0ee7\u0ee6\3\2\2\2\u0ee8\u0ee9\3\2\2\2\u0ee9\u0ee7\3"+
		"\2\2\2\u0ee9\u0eea\3\2\2\2\u0eea\u021b\3\2\2\2\u0eeb\u0eec\7c\2\2\u0eec"+
		"\u0f11\5\u015a\u00ae\2\u0eed\u0eee\7\u00e7\2\2\u0eee\u0f11\5\u020a\u0106"+
		"\2\u0eef\u0f11\7\u00ef\2\2\u0ef0\u0ef1\7\u00dc\2\2\u0ef1\u0f11\7\u00ef"+
		"\2\2\u0ef2\u0ef4\7\u0105\2\2\u0ef3\u0ef5\7y\2\2\u0ef4\u0ef3\3\2\2\2\u0ef4"+
		"\u0ef5\3\2\2\2\u0ef5\u0ef6\3\2\2\2\u0ef6\u0f11\5\u020a\u0106\2\u0ef7\u0ef8"+
		"\7\u0111\2\2\u0ef8\u0f11\5\u020a\u0106\2\u0ef9\u0efa\7\u0112\2\2\u0efa"+
		"\u0f11\5\u020a\u0106\2\u0efb\u0efc\7\u00dc\2\2\u0efc\u0f11\7\u0111\2\2"+
		"\u0efd\u0efe\7\u00dc\2\2\u0efe\u0f11\7\u0112\2\2\u0eff\u0f00\7\u0119\2"+
		"\2\u0f00\u0f01\7y\2\2\u0f01\u0f11\5\u01b8\u00dd\2\u0f02\u0f03\7\u0127"+
		"\2\2\u0f03\u0f04\7\u00a7\2\2\u0f04\u0f11\5\u01b8\u00dd\2\u0f05\u0f07\7"+
		"\u00e3\2\2\u0f06\u0f08\7P\2\2\u0f07\u0f06\3\2\2\2\u0f07\u0f08\3\2\2\2"+
		"\u0f08\u0f09\3\2\2\2\u0f09\u0f11\5\u020a\u0106\2\u0f0a\u0f11\7\u0122\2"+
		"\2\u0f0b\u0f0d\7\u0122\2\2\u0f0c\u0f0e\7P\2\2\u0f0d\u0f0c\3\2\2\2\u0f0d"+
		"\u0f0e\3\2\2\2\u0f0e\u0f0f\3\2\2\2\u0f0f\u0f11\5\u020a\u0106\2\u0f10\u0eeb"+
		"\3\2\2\2\u0f10\u0eed\3\2\2\2\u0f10\u0eef\3\2\2\2\u0f10\u0ef0\3\2\2\2\u0f10"+
		"\u0ef2\3\2\2\2\u0f10\u0ef7\3\2\2\2\u0f10\u0ef9\3\2\2\2\u0f10\u0efb\3\2"+
		"\2\2\u0f10\u0efd\3\2\2\2\u0f10\u0eff\3\2\2\2\u0f10\u0f02\3\2\2\2\u0f10"+
		"\u0f05\3\2\2\2\u0f10\u0f0a\3\2\2\2\u0f10\u0f0b\3\2\2\2\u0f11\u021d\3\2"+
		"\2\2\u0f12\u0f13\7\"\2\2\u0f13\u0f14\5\u0222\u0112\2\u0f14\u0f15\7#\2"+
		"\2\u0f15\u021f\3\2\2\2\u0f16\u0f17\5\u0138\u009d\2\u0f17\u0221\3\2\2\2"+
		"\u0f18\u0f1d\5\u0220\u0111\2\u0f19\u0f1a\7(\2\2\u0f1a\u0f1c\5\u0220\u0111"+
		"\2\u0f1b\u0f19\3\2\2\2\u0f1c\u0f1f\3\2\2\2\u0f1d\u0f1b\3\2\2\2\u0f1d\u0f1e"+
		"\3\2\2\2\u0f1e\u0223\3\2\2\2\u0f1f\u0f1d\3\2\2\2\u0f20\u0f24\7\u00d6\2"+
		"\2\u0f21\u0f22\7y\2\2\u0f22\u0f24\7\u0097\2\2\u0f23\u0f20\3\2\2\2\u0f23"+
		"\u0f21\3\2\2\2\u0f24\u0225\3\2\2\2\u0f25\u0f26\7\u00dc\2\2\u0f26\u0f27"+
		"\7\u0107\2\2\u0f27\u0227\3\2\2\2\u0f28\u0f29\7a\2\2\u0f29\u0f2a\7B\2\2"+
		"\u0f2a\u0f2b\7\u012e\2\2\u0f2b\u0f2c\5\u00dep\2\u0f2c\u0229\3\2\2\2\u0f2d"+
		"\u0f2e\7\"\2\2\u0f2e\u0f2f\5\u022c\u0117\2\u0f2f\u0f30\7#\2\2\u0f30\u022b"+
		"\3\2\2\2\u0f31\u0f36\5\u022e\u0118\2\u0f32\u0f33\7(\2\2\u0f33\u0f35\5"+
		"\u022e\u0118\2\u0f34\u0f32\3\2\2\2\u0f35\u0f38\3\2\2\2\u0f36\u0f34\3\2"+
		"\2\2\u0f36\u0f37\3\2\2\2\u0f37\u022d\3\2\2\2\u0f38\u0f36\3\2\2\2\u0f39"+
		"\u0f3a\5\u0230\u0119\2\u0f3a\u0f3b\7\32\2\2\u0f3b\u0f3c\5\u01e6\u00f4"+
		"\2\u0f3c\u0f3f\3\2\2\2\u0f3d\u0f3f\5\u0230\u0119\2\u0f3e\u0f39\3\2\2\2"+
		"\u0f3e\u0f3d\3\2\2\2\u0f3f\u022f\3\2\2\2\u0f40\u0f46\5\u00ccg\2\u0f41"+
		"\u0f46\5\u00d2j\2\u0f42\u0f46\5\u01fc\u00ff\2\u0f43\u0f46\5\u00d4k\2\u0f44"+
		"\u0f46\5\u00c6d\2\u0f45\u0f40\3\2\2\2\u0f45\u0f41\3\2\2\2\u0f45\u0f42"+
		"\3\2\2\2\u0f45\u0f43\3\2\2\2\u0f45\u0f44\3\2\2\2\u0f46\u0231\3\2\2\2\u0f47"+
		"\u0f50\5\u0236\u011c\2\u0f48\u0f50\5\u0234\u011b\2\u0f49\u0f4a\5\u0236"+
		"\u011c\2\u0f4a\u0f4b\5\u0234\u011b\2\u0f4b\u0f50\3\2\2\2\u0f4c\u0f4d\5"+
		"\u0234\u011b\2\u0f4d\u0f4e\5\u0236\u011c\2\u0f4e\u0f50\3\2\2\2\u0f4f\u0f47"+
		"\3\2\2\2\u0f4f\u0f48\3\2\2\2\u0f4f\u0f49\3\2\2\2\u0f4f\u0f4c\3\2\2\2\u0f50"+
		"\u0233\3\2\2\2\u0f51\u0f52\7d\2\2\u0f52\u0f53\7\66\2\2\u0f53\u0f54\5\u0238"+
		"\u011d\2\u0f54\u0235\3\2\2\2\u0f55\u0f56\7d\2\2\u0f56\u0f57\7\65\2\2\u0f57"+
		"\u0f58\5\u0238\u011d\2\u0f58\u0237\3\2\2\2\u0f59\u0f5a\7\u00dc\2\2\u0f5a"+
		"\u0f62\7\u00e6\2\2\u0f5b\u0f62\7\u0123\2\2\u0f5c\u0f62\7\u00d7\2\2\u0f5d"+
		"\u0f5e\7?\2\2\u0f5e\u0f62\7n\2\2\u0f5f\u0f60\7?\2\2\u0f60\u0f62\7\u0097"+
		"\2\2\u0f61\u0f59\3\2\2\2\u0f61\u0f5b\3\2\2\2\u0f61\u0f5c\3\2\2\2\u0f61"+
		"\u0f5d\3\2\2\2\u0f61\u0f5f\3\2\2\2\u0f62\u0239\3\2\2\2\u0f63\u0f64\7\u0110"+
		"\2\2\u0f64\u0f6a\7[\2\2\u0f65\u0f66\7\u0110\2\2\u0f66\u0f6a\7\u011b\2"+
		"\2\u0f67\u0f68\7\u0110\2\2\u0f68\u0f6a\7\u012b\2\2\u0f69\u0f63\3\2\2\2"+
		"\u0f69\u0f65\3\2\2\2\u0f69\u0f67\3\2\2\2\u0f6a\u023b\3\2\2\2\u0f6b\u0f6c"+
		"\7\u01f0\2\2\u0f6c\u0f6d\7\"\2\2\u0f6d\u0f6e\5\u023e\u0120\2\u0f6e\u0f6f"+
		"\7#\2\2\u0f6f\u023d\3\2\2\2\u0f70\u0f75\5\u0240\u0121\2\u0f71\u0f72\7"+
		"(\2\2\u0f72\u0f74\5\u0240\u0121\2\u0f73\u0f71\3\2\2\2\u0f74\u0f77\3\2"+
		"\2\2\u0f75\u0f73\3\2\2\2\u0f75\u0f76\3\2\2\2\u0f76\u023f\3\2\2\2\u0f77"+
		"\u0f75\3\2\2\2\u0f78\u0f79\5\u0244\u0123\2\u0f79\u0f7a\5\u0242\u0122\2"+
		"\u0f7a\u0241\3\2\2\2\u0f7b\u0f7c\7\u0222\2\2\u0f7c\u0243\3\2\2\2\u0f7d"+
		"\u0f7e\5\u017a\u00be\2\u0f7e\u0245\3\2\2\2\u0f7f\u0f86\7\u0113\2\2\u0f80"+
		"\u0f86\7[\2\2\u0f81\u0f86\7\u0097\2\2\u0f82\u0f83\7a\2\2\u0f83\u0f84\7"+
		"B\2\2\u0f84\u0f86\5\u00dep\2\u0f85\u0f7f\3\2\2\2\u0f85\u0f80\3\2\2\2\u0f85"+
		"\u0f81\3\2\2\2\u0f85\u0f82\3\2\2\2\u0f86\u0247\3\2\2\2\u0f87\u0f88\7\""+
		"\2\2\u0f88\u0f89\5\u0158\u00ad\2\u0f89\u0f8a\7#\2\2\u0f8a\u0f9e\3\2\2"+
		"\2\u0f8b\u0f8c\7\"\2\2\u0f8c\u0f8d\5\u0158\u00ad\2\u0f8d\u0f8e\7(\2\2"+
		"\u0f8e\u0f8f\5\u0158\u00ad\2\u0f8f\u0f90\7#\2\2\u0f90\u0f9e\3\2\2\2\u0f91"+
		"\u0f92\7\"\2\2\u0f92\u0f93\7\u0197\2\2\u0f93\u0f94\7(\2\2\u0f94\u0f95"+
		"\5\u0158\u00ad\2\u0f95\u0f96\7#\2\2\u0f96\u0f9e\3\2\2\2\u0f97\u0f98\7"+
		"\"\2\2\u0f98\u0f99\5\u0158\u00ad\2\u0f99\u0f9a\7(\2\2\u0f9a\u0f9b\7\u0197"+
		"\2\2\u0f9b\u0f9c\7#\2\2\u0f9c\u0f9e\3\2\2\2\u0f9d\u0f87\3\2\2\2\u0f9d"+
		"\u0f8b\3\2\2\2\u0f9d\u0f91\3\2\2\2\u0f9d\u0f97\3\2\2\2\u0f9e\u0249\3\2"+
		"\2\2\u0f9f\u0fa0\5\u024c\u0127\2\u0fa0\u0fa1\5\u012c\u0097\2\u0fa1\u0fa2"+
		"\5\u01e8\u00f5\2\u0fa2\u0faf\3\2\2\2\u0fa3\u0fa4\5\u012c\u0097\2\u0fa4"+
		"\u0fa5\5\u024c\u0127\2\u0fa5\u0fa6\5\u01e8\u00f5\2\u0fa6\u0faf\3\2\2\2"+
		"\u0fa7\u0fa8\5\u012c\u0097\2\u0fa8\u0fa9\5\u01e8\u00f5\2\u0fa9\u0faf\3"+
		"\2\2\2\u0faa\u0fab\5\u024c\u0127\2\u0fab\u0fac\5\u01e8\u00f5\2\u0fac\u0faf"+
		"\3\2\2\2\u0fad\u0faf\5\u01e8\u00f5\2\u0fae\u0f9f\3\2\2\2\u0fae\u0fa3\3"+
		"\2\2\2\u0fae\u0fa7\3\2\2\2\u0fae\u0faa\3\2\2\2\u0fae\u0fad\3\2\2\2\u0faf"+
		"\u024b\3\2\2\2\u0fb0\u0fb7\7s\2\2\u0fb1\u0fb7\7\u021f\2\2\u0fb2\u0fb7"+
		"\7\u0220\2\2\u0fb3\u0fb4\7s\2\2\u0fb4\u0fb7\7\u021f\2\2\u0fb5\u0fb7\7"+
		"\u018b\2\2\u0fb6\u0fb0\3\2\2\2\u0fb6\u0fb1\3\2\2\2\u0fb6\u0fb2\3\2\2\2"+
		"\u0fb6\u0fb3\3\2\2\2\u0fb6\u0fb5\3\2\2\2\u0fb7\u024d\3\2\2\2\u0fb8\u0fbd"+
		"\5\u024a\u0126\2\u0fb9\u0fba\7(\2\2\u0fba\u0fbc\5\u024a\u0126\2\u0fbb"+
		"\u0fb9\3\2\2\2\u0fbc\u0fbf\3\2\2\2\u0fbd\u0fbb\3\2\2\2\u0fbd\u0fbe\3\2"+
		"\2\2\u0fbe\u024f\3\2\2\2\u0fbf\u0fbd\3\2\2\2\u0fc0\u0fc3\5\u01fa\u00fe"+
		"\2\u0fc1\u0fc3\7\u0222\2\2\u0fc2\u0fc0\3\2\2\2\u0fc2\u0fc1\3\2\2\2\u0fc3"+
		"\u0251\3\2\2\2\u0fc4\u0fc5\7\u0222\2\2\u0fc5\u0253\3\2\2\2\u0fc6\u0fcb"+
		"\5\u0200\u0101\2\u0fc7\u0fc8\7(\2\2\u0fc8\u0fca\5\u0200\u0101\2\u0fc9"+
		"\u0fc7\3\2\2\2\u0fca\u0fcd\3\2\2\2\u0fcb\u0fc9\3\2\2\2\u0fcb\u0fcc\3\2"+
		"\2\2\u0fcc\u0255\3\2\2\2\u0fcd\u0fcb\3\2\2\2\u0fce\u0fcf\7?\2\2\u0fcf"+
		"\u0fd2\5\u0258\u012d\2\u0fd0\u0fd2\5\u0264\u0133\2\u0fd1\u0fce\3\2\2\2"+
		"\u0fd1\u0fd0\3\2\2\2\u0fd2\u0257\3\2\2\2\u0fd3\u0fd4\7\u00e4\2\2\u0fd4"+
		"\u0fdc\5\u025a\u012e\2\u0fd5\u0fd6\7\u0128\2\2\u0fd6\u0fd7\7\u00e8\2\2"+
		"\u0fd7\u0fd8\7c\2\2\u0fd8\u0fd9\7\u00e4\2\2\u0fd9\u0fdc\5\u025a\u012e"+
		"\2\u0fda\u0fdc\5\u025e\u0130\2\u0fdb\u0fd3\3\2\2\2\u0fdb\u0fd5\3\2\2\2"+
		"\u0fdb\u0fda\3\2\2\2\u0fdc\u0259\3\2\2\2\u0fdd\u0fe4\5\u025c\u012f\2\u0fde"+
		"\u0fe0\7(\2\2\u0fdf\u0fde\3\2\2\2\u0fdf\u0fe0\3\2\2\2\u0fe0\u0fe1\3\2"+
		"\2\2\u0fe1\u0fe3\5\u025c\u012f\2\u0fe2\u0fdf\3\2\2\2\u0fe3\u0fe6\3\2\2"+
		"\2\u0fe4\u0fe2\3\2\2\2\u0fe4\u0fe5\3\2\2\2\u0fe5\u025b\3\2\2\2\u0fe6\u0fe4"+
		"\3\2\2\2\u0fe7\u0fe8\7\u00da\2\2\u0fe8\u0fe9\7\u00db\2\2\u0fe9\u0ff2\5"+
		"\u020c\u0107\2\u0fea\u0feb\7\u00df\2\2\u0feb\u0ff2\7\u0117\2\2\u0fec\u0fed"+
		"\7\u00df\2\2\u0fed\u0ff2\7\u0216\2\2\u0fee\u0ff2\7\u00f3\2\2\u0fef\u0ff0"+
		"\7m\2\2\u0ff0\u0ff2\7\u00f3\2\2\u0ff1\u0fe7\3\2\2\2\u0ff1\u0fea\3\2\2"+
		"\2\u0ff1\u0fec\3\2\2\2\u0ff1\u0fee\3\2\2\2\u0ff1\u0fef\3\2\2\2\u0ff2\u025d"+
		"\3\2\2\2\u0ff3\u1014\5\u0262\u0132\2\u0ff4\u0ff5\5\u0202\u0102\2\u0ff5"+
		"\u0ff6\7X\2\2\u0ff6\u0ff7\7\u0098\2\2\u0ff7\u1014\3\2\2\2\u0ff8\u0ff9"+
		"\7\u008a\2\2\u0ff9\u0ffa\7\u0138\2\2\u0ffa\u1014\5\u0208\u0105\2\u0ffb"+
		"\u0ffc\7\u01af\2\2\u0ffc\u1014\7\u0222\2\2\u0ffd\u0ffe\7;\2\2\u0ffe\u1014"+
		"\7\u0222\2\2\u0fff\u1001\7\u00a9\2\2\u1000\u1002\5\u0260\u0131\2\u1001"+
		"\u1000\3\2\2\2\u1001\u1002\3\2\2\2\u1002\u1014\3\2\2\2\u1003\u1004\7\u00e1"+
		"\2\2\u1004\u1014\5\u01fa\u00fe\2\u1005\u1014\7\u0222\2\2\u1006\u1007\7"+
		"\u0128\2\2\u1007\u1008\7\u021c\2\2\u1008\u1014\5\u01fa\u00fe\2\u1009\u1014"+
		"\7\u0222\2\2\u100a\u100b\7\u0128\2\2\u100b\u100c\7\u021c\2\2\u100c\u1014"+
		"\7\u0097\2\2\u100d\u100e\7\u015a\2\2\u100e\u100f\7\u00dd\2\2\u100f\u1014"+
		"\5\u01a4\u00d3\2\u1010\u1011\7\u00e4\2\2\u1011\u1012\7\u01ed\2\2\u1012"+
		"\u1014\7\u0222\2\2\u1013\u0ff3\3\2\2\2\u1013\u0ff4\3\2\2\2\u1013\u0ff8"+
		"\3\2\2\2\u1013\u0ffb\3\2\2\2\u1013\u0ffd\3\2\2\2\u1013\u0fff\3\2\2\2\u1013"+
		"\u1003\3\2\2\2\u1013\u1005\3\2\2\2\u1013\u1006\3\2\2\2\u1013\u1009\3\2"+
		"\2\2\u1013\u100a\3\2\2\2\u1013\u100d\3\2\2\2\u1013\u1010\3\2\2\2\u1014"+
		"\u025f\3\2\2\2\u1015\u1016\t\27\2\2\u1016\u0261\3\2\2\2\u1017\u1018\5"+
		"\u0202\u0102\2\u1018\u101b\t\30\2\2\u1019\u101c\5\u0204\u0103\2\u101a"+
		"\u101c\7\u0097\2\2\u101b\u1019\3\2\2\2\u101b\u101a\3\2\2\2\u101c\u0263"+
		"\3\2\2\2\u101d\u101e\7\u0121\2\2\u101e\u101f\5\u0266\u0134\2\u101f\u0265"+
		"\3\2\2\2\u1020\u1029\5\u0268\u0135\2\u1021\u1022\7\u008a\2\2\u1022\u1029"+
		"\7\u0138\2\2\u1023\u1024\7\u00e4\2\2\u1024\u1025\7\u00da\2\2\u1025\u1029"+
		"\7\u00db\2\2\u1026\u1027\7\u0128\2\2\u1027\u1029\7\u021c\2\2\u1028\u1020"+
		"\3\2\2\2\u1028\u1021\3\2\2\2\u1028\u1023\3\2\2\2\u1028\u1026\3\2\2\2\u1029"+
		"\u0267\3\2\2\2\u102a\u102d\5\u0202\u0102\2\u102b\u102d\7t\2\2\u102c\u102a"+
		"\3\2\2\2\u102c\u102b\3\2\2\2\u102d\u0269\3\2\2\2\u102e\u1033\5\u0096L"+
		"\2\u102f\u1030\7(\2\2\u1030\u1032\5\u0096L\2\u1031\u102f\3\2\2\2\u1032"+
		"\u1035\3\2\2\2\u1033\u1031\3\2\2\2\u1033\u1034\3\2\2\2\u1034\u026b\3\2"+
		"\2\2\u1035\u1033\3\2\2\2\u1036\u1037\7\u01ae\2\2\u1037\u1038\7d\2\2\u1038"+
		"\u1039\7n\2\2\u1039\u105a\7\u01bd\2\2\u103a\u103b\7\u0203\2\2\u103b\u103c"+
		"\7n\2\2\u103c\u103d\7d\2\2\u103d\u103e\7n\2\2\u103e\u105a\7\u01bd\2\2"+
		"\u103f\u105a\7\u0217\2\2\u1040\u105a\7\u01d4\2\2\u1041\u105a\7\u0209\2"+
		"\2\u1042\u105a\7\u0214\2\2\u1043\u1044\7\u00fb\2\2\u1044\u1045\7\u0126"+
		"\2\2\u1045\u105a\7\u009f\2\2\u1046\u1047\7\u00fb\2\2\u1047\u1048\7\u0126"+
		"\2\2\u1048\u105a\7\u01f2\2\2\u1049\u104a\7\u0126\2\2\u104a\u105a\7\u009f"+
		"\2\2\u104b\u104c\7\u0126\2\2\u104c\u105a\7\u01f2\2\2\u104d\u105a\7\u01c0"+
		"\2\2\u104e\u104f\7m\2\2\u104f\u105a\7\u01c0\2\2\u1050\u1051\7\u01ac\2"+
		"\2\u1051\u105a\5\u020a\u0106\2\u1052\u1053\7\u00e2\2\2\u1053\u105a\5\u020a"+
		"\u0106\2\u1054\u1055\7\u0208\2\2\u1055\u105a\5\u01b8\u00dd\2\u1056\u105a"+
		"\5\u026e\u0138\2\u1057\u1058\7\u01bf\2\2\u1058\u105a\5\u0138\u009d\2\u1059"+
		"\u1036\3\2\2\2\u1059\u103a\3\2\2\2\u1059\u103f\3\2\2\2\u1059\u1040\3\2"+
		"\2\2\u1059\u1041\3\2\2\2\u1059\u1042\3\2\2\2\u1059\u1043\3\2\2\2\u1059"+
		"\u1046\3\2\2\2\u1059\u1049\3\2\2\2\u1059\u104b\3\2\2\2\u1059\u104d\3\2"+
		"\2\2\u1059\u104e\3\2\2\2\u1059\u1050\3\2\2\2\u1059\u1052\3\2\2\2\u1059"+
		"\u1054\3\2\2\2\u1059\u1056\3\2\2\2\u1059\u1057\3\2\2\2\u105a\u026d\3\2"+
		"\2\2\u105b\u105c\7?\2\2\u105c\u105f\5\u025e\u0130\2\u105d\u105f\5\u0264"+
		"\u0133\2\u105e\u105b\3\2\2\2\u105e\u105d\3\2\2\2\u105f\u026f\3\2\2\2\u1060"+
		"\u1061\t\31\2\2\u1061\u0271\3\2\2\2\u1062\u1063\t\32\2\2\u1063\u0273\3"+
		"\2\2\2\u1064\u1069\5\u0158\u00ad\2\u1065\u1066\7(\2\2\u1066\u1068\5\u0158"+
		"\u00ad\2\u1067\u1065\3\2\2\2\u1068\u106b\3\2\2\2\u1069\u1067\3\2\2\2\u1069"+
		"\u106a\3\2\2\2\u106a\u0275\3\2\2\2\u106b\u1069\3\2\2\2\u017e\u0277\u027e"+
		"\u0281\u0288\u029f\u02ab\u02b9\u02c1\u02c7\u02cd\u02d0\u02d7\u02da\u02dd"+
		"\u02e7\u02f4\u0301\u0308\u030e\u0311\u0314\u031e\u0325\u032f\u0337\u033b"+
		"\u033f\u0343\u034f\u0353\u0358\u035c\u035e\u0363\u0368\u036e\u0374\u0377"+
		"\u0379\u037e\u0381\u0384\u0387\u038a\u038d\u0390\u0393\u0399\u039c\u039f"+
		"\u03a2\u03a5\u03a8\u03ad\u03b4\u03bb\u03c0\u03c6\u03cc\u03d2\u03d8\u03dd"+
		"\u03e1\u03e5\u03ef\u03fe\u0405\u040b\u0411\u041a\u041f\u0422\u0427\u0434"+
		"\u0441\u0448\u0452\u0462\u0484\u048c\u0490\u0499\u04a7\u04b6\u04c1\u04c9"+
		"\u04e9\u04f2\u04f5\u04f8\u04fb\u0511\u0519\u0527\u0534\u0538\u0545\u054b"+
		"\u054f\u0555\u055a\u055e\u0563\u0567\u056c\u0573\u0575\u057b\u0592\u0596"+
		"\u059a\u059e\u05a1\u05ac\u05b9\u05c3\u05ce\u05d3\u05d7\u05de\u05e1\u05f3"+
		"\u05f9\u0600\u0604\u0608\u060b\u060f\u0617\u061b\u061f\u0626\u062d\u063a"+
		"\u0641\u0649\u0650\u0655\u065c\u0661\u0673\u0676\u067d\u0681\u068b\u0690"+
		"\u0695\u069a\u06a0\u06a7\u06ad\u06b3\u06b8\u06be\u06c5\u06ca\u06d0\u06d7"+
		"\u06da\u06de\u06e3\u06e7\u06ed\u06f1\u06f4\u0705\u070c\u0715\u071c\u0720"+
		"\u0728\u072f\u0734\u0750\u07bf\u07c9\u0845\u0847\u0853\u087f\u0881\u0889"+
		"\u08a3\u08ac\u08b4\u08c1\u08c5\u08c8\u08d1\u08d5\u08d9\u08e0\u08f0\u08fa"+
		"\u0908\u090c\u0911\u091b\u0924\u0930\u0940\u094a\u095e\u0965\u096d\u097b"+
		"\u0982\u098d\u0996\u09a1\u09aa\u09b3\u09bc\u09c2\u09cd\u09d5\u09dc\u09e0"+
		"\u09e8\u09ea\u0a01\u0a08\u0a16\u0a1f\u0a2a\u0a31\u0a3a\u0a3e\u0a41\u0a44"+
		"\u0a47\u0a57\u0a87\u0b24\u0b30\u0b4d\u0b5c\u0b66\u0b74\u0b78\u0b7d\u0b7f"+
		"\u0b90\u0b94\u0b98\u0ba0\u0ba7\u0bab\u0bb2\u0bb6\u0bb9\u0bc1\u0bc5\u0bd0"+
		"\u0bd4\u0bda\u0bdf\u0be3\u0be5\u0beb\u0bf6\u0bff\u0c03\u0c07\u0c0f\u0c2f"+
		"\u0c39\u0c3b\u0c43\u0c4e\u0c59\u0c69\u0c7b\u0c87\u0c8f\u0ca0\u0ca6\u0caf"+
		"\u0cb6\u0cc2\u0ccc\u0cd9\u0cdf\u0ce3\u0ceb\u0cfb\u0d05\u0d19\u0d21\u0d33"+
		"\u0d3a\u0d3e\u0d41\u0d43\u0d49\u0d52\u0d5a\u0d63\u0d67\u0d6b\u0d6e\u0d71"+
		"\u0d76\u0d79\u0d7b\u0d88\u0d8f\u0d9a\u0dac\u0db4\u0dc2\u0dc6\u0dc9\u0dcc"+
		"\u0dd5\u0dda\u0ddd\u0ddf\u0e1b\u0e21\u0e28\u0e2f\u0e36\u0e3e\u0e45\u0e4b"+
		"\u0e55\u0e5f\u0e67\u0e6c\u0e7b\u0e82\u0e8b\u0e90\u0e97\u0ea2\u0eab\u0eb3"+
		"\u0eba\u0ec2\u0ecb\u0ed8\u0edb\u0ede\u0ee0\u0ee9\u0ef4\u0f07\u0f0d\u0f10"+
		"\u0f1d\u0f23\u0f36\u0f3e\u0f45\u0f4f\u0f61\u0f69\u0f75\u0f85\u0f9d\u0fae"+
		"\u0fb6\u0fbd\u0fc2\u0fcb\u0fd1\u0fdb\u0fdf\u0fe4\u0ff1\u1001\u1013\u101b"+
		"\u1028\u102c\u1033\u1059\u105e\u1069";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}