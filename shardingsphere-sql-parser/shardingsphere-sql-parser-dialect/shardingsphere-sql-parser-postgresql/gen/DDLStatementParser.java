// Generated from /home/totalo/code/shardingsphere/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/antlr4/imports/postgresql/DDLStatement.g4 by ANTLR 4.9.1
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DDLStatementParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, AND_=5, OR_=6, NOT_=7, TILDE_=8, VERTICAL_BAR_=9, 
		AMPERSAND_=10, SIGNED_LEFT_SHIFT_=11, SIGNED_RIGHT_SHIFT_=12, CARET_=13, 
		MOD_=14, COLON_=15, PLUS_=16, MINUS_=17, ASTERISK_=18, SLASH_=19, BACKSLASH_=20, 
		DOT_=21, DOT_ASTERISK_=22, SAFE_EQ_=23, DEQ_=24, EQ_=25, CQ_=26, NEQ_=27, 
		GT_=28, GTE_=29, LT_=30, LTE_=31, POUND_=32, LP_=33, RP_=34, LBE_=35, 
		RBE_=36, LBT_=37, RBT_=38, COMMA_=39, DQ_=40, SQ_=41, BQ_=42, QUESTION_=43, 
		AT_=44, SEMI_=45, TILDE_TILDE_=46, NOT_TILDE_TILDE_=47, TYPE_CAST_=48, 
		ILIKE_=49, NOT_ILIKE_=50, JSON_EXTRACT_=51, JSON_EXTRACT_TEXT_=52, JSON_PATH_EXTRACT_=53, 
		JSON_PATH_EXTRACT_TEXT_=54, JSONB_CONTAIN_RIGHT_=55, JSONB_CONTAIN_LEFT_=56, 
		JSONB_CONTAIN_ALL_TOP_KEY_=57, JSONB_PATH_DELETE_=58, JSONB_PATH_CONTAIN_ANY_VALUE_=59, 
		JSONB_PATH_PREDICATE_CHECK_=60, WS=61, SELECT=62, INSERT=63, UPDATE=64, 
		DELETE=65, CREATE=66, ALTER=67, DROP=68, TRUNCATE=69, SCHEMA=70, GRANT=71, 
		REVOKE=72, ADD=73, SET=74, TABLE=75, COLUMN=76, INDEX=77, CONSTRAINT=78, 
		PRIMARY=79, UNIQUE=80, FOREIGN=81, KEY=82, POSITION=83, PRECISION=84, 
		FUNCTION=85, TRIGGER=86, PROCEDURE=87, VIEW=88, INTO=89, VALUES=90, WITH=91, 
		UNION=92, DISTINCT=93, CASE=94, WHEN=95, CAST=96, TRIM=97, SUBSTRING=98, 
		FROM=99, NATURAL=100, JOIN=101, FULL=102, INNER=103, OUTER=104, LEFT=105, 
		RIGHT=106, CROSS=107, USING=108, WHERE=109, AS=110, ON=111, IF=112, ELSE=113, 
		THEN=114, FOR=115, TO=116, AND=117, OR=118, IS=119, NOT=120, NULL=121, 
		TRUE=122, FALSE=123, EXISTS=124, BETWEEN=125, IN=126, ALL=127, ANY=128, 
		LIKE=129, ORDER=130, GROUP=131, BY=132, ASC=133, DESC=134, HAVING=135, 
		LIMIT=136, OFFSET=137, BEGIN=138, COMMIT=139, ROLLBACK=140, SAVEPOINT=141, 
		BOOLEAN=142, DOUBLE=143, CHAR=144, CHARACTER=145, ARRAY=146, INTERVAL=147, 
		DATE=148, TIME=149, TIMESTAMP=150, LOCALTIME=151, LOCALTIMESTAMP=152, 
		YEAR=153, QUARTER=154, MONTH=155, WEEK=156, DAY=157, HOUR=158, MINUTE=159, 
		SECOND=160, MICROSECOND=161, DEFAULT=162, CURRENT=163, ENABLE=164, DISABLE=165, 
		CALL=166, INSTANCE=167, PRESERVE=168, DO=169, DEFINER=170, CURRENT_USER=171, 
		SQL=172, CASCADED=173, LOCAL=174, CLOSE=175, OPEN=176, NEXT=177, NAME=178, 
		COLLATION=179, NAMES=180, INTEGER=181, REAL=182, DECIMAL=183, TYPE=184, 
		SMALLINT=185, BIGINT=186, NUMERIC=187, TEXT=188, REPEATABLE=189, CURRENT_DATE=190, 
		CURRENT_TIME=191, CURRENT_TIMESTAMP=192, NULLIF=193, VARYING=194, NATIONAL=195, 
		NCHAR=196, VALUE=197, BOTH=198, LEADING=199, TRAILING=200, COALESCE=201, 
		INTERSECT=202, EXCEPT=203, TIES=204, FETCH=205, CUBE=206, GROUPING=207, 
		SETS=208, WINDOW=209, OTHERS=210, OVERLAPS=211, SOME=212, AT=213, DEC=214, 
		END=215, FOR_GENERATOR=216, ADMIN=217, BINARY=218, ESCAPE=219, EXCLUDE=220, 
		MOD=221, PARTITION=222, ROW=223, UNKNOWN=224, ALWAYS=225, CASCADE=226, 
		CHECK=227, GENERATED=228, ISOLATION=229, LEVEL=230, NO=231, OPTION=232, 
		PRIVILEGES=233, READ=234, REFERENCES=235, ROLE=236, ROWS=237, START=238, 
		TRANSACTION=239, USER=240, ACTION=241, CACHE=242, CHARACTERISTICS=243, 
		CLUSTER=244, COLLATE=245, COMMENTS=246, CONCURRENTLY=247, CONNECT=248, 
		CONSTRAINTS=249, CYCLE=250, DATA=251, DATABASE=252, DEFAULTS=253, DEFERRABLE=254, 
		DEFERRED=255, DEPENDS=256, DOMAIN=257, EXCLUDING=258, EXECUTE=259, EXTENDED=260, 
		EXTENSION=261, EXTERNAL=262, EXTRACT=263, FILTER=264, FIRST=265, FOLLOWING=266, 
		FORCE=267, GLOBAL=268, IDENTITY=269, IMMEDIATE=270, INCLUDING=271, INCREMENT=272, 
		INDEXES=273, INHERIT=274, INHERITS=275, INITIALLY=276, INCLUDE=277, LANGUAGE=278, 
		LARGE=279, LAST=280, LOGGED=281, MAIN=282, MATCH=283, MAXVALUE=284, MINVALUE=285, 
		NOTHING=286, NULLS=287, OBJECT=288, OIDS=289, ONLY=290, OVER=291, OWNED=292, 
		OWNER=293, PARTIAL=294, PLAIN=295, PRECEDING=296, RANGE=297, RENAME=298, 
		REPLICA=299, RESET=300, RESTART=301, RESTRICT=302, ROUTINE=303, RULE=304, 
		SECURITY=305, SEQUENCE=306, SESSION=307, SESSION_USER=308, SHOW=309, SIMPLE=310, 
		STATISTICS=311, STORAGE=312, TABLESPACE=313, TEMP=314, TEMPORARY=315, 
		UNBOUNDED=316, UNLOGGED=317, USAGE=318, VALID=319, VALIDATE=320, WITHIN=321, 
		WITHOUT=322, ZONE=323, OF=324, UESCAPE=325, GROUPS=326, RECURSIVE=327, 
		INT=328, INT2=329, INT4=330, INT8=331, FLOAT=332, FLOAT4=333, FLOAT8=334, 
		SMALLSERIAL=335, SERIAL=336, BIGSERIAL=337, MONEY=338, VARCHAR=339, BYTEA=340, 
		ENUM=341, POINT=342, LINE=343, LSEG=344, BOX=345, PATH=346, POLYGON=347, 
		CIRCLE=348, CIDR=349, INET=350, MACADDR=351, MACADDR8=352, BIT=353, VARBIT=354, 
		TSVECTOR=355, TSQUERY=356, XML=357, JSON=358, INT4RANGE=359, INT8RANGE=360, 
		NUMRANGE=361, TSRANGE=362, TSTZRANGE=363, DATERANGE=364, TABLESAMPLE=365, 
		ORDINALITY=366, CURRENT_ROLE=367, CURRENT_CATALOG=368, CURRENT_SCHEMA=369, 
		NORMALIZE=370, OVERLAY=371, XMLCONCAT=372, XMLELEMENT=373, XMLEXISTS=374, 
		XMLFOREST=375, XMLPARSE=376, XMLPI=377, XMLROOT=378, XMLSERIALIZE=379, 
		TREAT=380, SETOF=381, NFC=382, NFD=383, NFKC=384, NFKD=385, XMLATTRIBUTES=386, 
		REF=387, PASSING=388, VERSION=389, YES=390, STANDALONE=391, GREATEST=392, 
		LEAST=393, MATERIALIZED=394, OPERATOR=395, SHARE=396, ROLLUP=397, ILIKE=398, 
		SIMILAR=399, ISNULL=400, NOTNULL=401, SYMMETRIC=402, DOCUMENT=403, NORMALIZED=404, 
		ASYMMETRIC=405, VARIADIC=406, NOWAIT=407, LOCKED=408, XMLTABLE=409, COLUMNS=410, 
		CONTENT=411, STRIP=412, WHITESPACE=413, XMLNAMESPACES=414, PLACING=415, 
		RETURNING=416, LATERAL=417, NONE=418, ANALYSE=419, ANALYZE=420, CONFLICT=421, 
		OVERRIDING=422, SYSTEM=423, ABORT=424, ABSOLUTE=425, ACCESS=426, AFTER=427, 
		AGGREGATE=428, ALSO=429, ATTACH=430, ATTRIBUTE=431, BACKWARD=432, BEFORE=433, 
		ASSERTION=434, ASSIGNMENT=435, CONTINUE=436, CONVERSION=437, COPY=438, 
		COST=439, CSV=440, CALLED=441, CATALOG=442, CHAIN=443, CHECKPOINT=444, 
		CLASS=445, CONFIGURATION=446, COMMENT=447, DETACH=448, DICTIONARY=449, 
		EXPRESSION=450, INSENSITIVE=451, DISCARD=452, OFF=453, INSTEAD=454, EXPLAIN=455, 
		INPUT=456, INLINE=457, PARALLEL=458, LEAKPROOF=459, COMMITTED=460, ENCODING=461, 
		IMPLICIT=462, DELIMITER=463, CURSOR=464, EACH=465, EVENT=466, DEALLOCATE=467, 
		CONNECTION=468, DECLARE=469, FAMILY=470, FORWARD=471, EXCLUSIVE=472, FUNCTIONS=473, 
		LOCATION=474, LABEL=475, DELIMITERS=476, HANDLER=477, HEADER=478, IMMUTABLE=479, 
		GRANTED=480, HOLD=481, MAPPING=482, OLD=483, METHOD=484, LOAD=485, LISTEN=486, 
		MODE=487, MOVE=488, PROCEDURAL=489, PARSER=490, PROCEDURES=491, ENCRYPTED=492, 
		PUBLICATION=493, PROGRAM=494, REFERENCING=495, PLANS=496, REINDEX=497, 
		PRIOR=498, PASSWORD=499, RELATIVE=500, QUOTE=501, ROUTINES=502, REPLACE=503, 
		SNAPSHOT=504, REFRESH=505, PREPARE=506, OPTIONS=507, IMPORT=508, INVOKER=509, 
		NEW=510, PREPARED=511, SCROLL=512, SEQUENCES=513, SYSID=514, REASSIGN=515, 
		SERVER=516, SUBSCRIPTION=517, SEARCH=518, SCHEMAS=519, RECHECK=520, POLICY=521, 
		NOTIFY=522, LOCK=523, RELEASE=524, SERIALIZABLE=525, RETURNS=526, STATEMENT=527, 
		STDIN=528, STDOUT=529, TABLES=530, SUPPORT=531, STABLE=532, TEMPLATE=533, 
		UNENCRYPTED=534, VIEWS=535, UNCOMMITTED=536, TRANSFORM=537, UNLISTEN=538, 
		TRUSTED=539, VALIDATOR=540, UNTIL=541, VACUUM=542, VOLATILE=543, STORED=544, 
		WRITE=545, STRICT=546, TYPES=547, WRAPPER=548, WORK=549, FREEZE=550, AUTHORIZATION=551, 
		VERBOSE=552, PARAM=553, OUT=554, INOUT=555, IDENTIFIER_=556, STRING_=557, 
		NUMBER_=558, HEX_DIGIT_=559, BIT_NUM_=560;
	public static final int
		RULE_createTable = 0, RULE_executeParamClause = 1, RULE_partitionBoundSpec = 2, 
		RULE_hashPartbound = 3, RULE_hashPartboundElem = 4, RULE_typedTableElementList = 5, 
		RULE_typedTableElement = 6, RULE_columnOptions = 7, RULE_colQualList = 8, 
		RULE_withData = 9, RULE_tableSpace = 10, RULE_onCommitOption = 11, RULE_withOption = 12, 
		RULE_tableAccessMethodClause = 13, RULE_accessMethod = 14, RULE_createIndex = 15, 
		RULE_include = 16, RULE_indexIncludingParams = 17, RULE_accessMethodClause = 18, 
		RULE_createDatabase = 19, RULE_createView = 20, RULE_columnList = 21, 
		RULE_columnElem = 22, RULE_dropDatabase = 23, RULE_createDatabaseSpecification = 24, 
		RULE_createdbOptName = 25, RULE_alterTable = 26, RULE_alterIndex = 27, 
		RULE_dropTable = 28, RULE_dropTableOpt = 29, RULE_dropIndex = 30, RULE_dropIndexOpt = 31, 
		RULE_truncateTable = 32, RULE_restartSeqs = 33, RULE_createTableSpecification = 34, 
		RULE_createDefinitionClause = 35, RULE_createDefinition = 36, RULE_columnDefinition = 37, 
		RULE_columnConstraint = 38, RULE_constraintClause = 39, RULE_columnConstraintOption = 40, 
		RULE_checkOption = 41, RULE_defaultExpr = 42, RULE_sequenceOptions = 43, 
		RULE_sequenceOption = 44, RULE_indexParameters = 45, RULE_action = 46, 
		RULE_constraintOptionalParam = 47, RULE_likeOption = 48, RULE_tableConstraint = 49, 
		RULE_tableConstraintOption = 50, RULE_exclusionWhereClause = 51, RULE_exclusionConstraintList = 52, 
		RULE_exclusionConstraintElem = 53, RULE_inheritClause = 54, RULE_partitionSpec = 55, 
		RULE_partParams = 56, RULE_partElem = 57, RULE_funcExprWindowless = 58, 
		RULE_partStrategy = 59, RULE_createIndexSpecification = 60, RULE_concurrentlyClause = 61, 
		RULE_onlyClause = 62, RULE_asteriskClause = 63, RULE_alterDefinitionClause = 64, 
		RULE_partitionCmd = 65, RULE_alterIndexDefinitionClause = 66, RULE_indexPartitionCmd = 67, 
		RULE_renameIndexSpecification = 68, RULE_alterIndexDependsOnExtension = 69, 
		RULE_alterIndexSetTableSpace = 70, RULE_tableNamesClause = 71, RULE_tableNameClause = 72, 
		RULE_alterTableActions = 73, RULE_alterTableAction = 74, RULE_addColumnSpecification = 75, 
		RULE_dropColumnSpecification = 76, RULE_modifyColumnSpecification = 77, 
		RULE_modifyColumn = 78, RULE_alterColumnSetOption = 79, RULE_attributeOptions = 80, 
		RULE_attributeOption = 81, RULE_addConstraintSpecification = 82, RULE_tableConstraintUsingIndex = 83, 
		RULE_storageParameterWithValue = 84, RULE_storageParameter = 85, RULE_renameColumnSpecification = 86, 
		RULE_renameConstraint = 87, RULE_renameTableSpecification = 88, RULE_indexNames = 89, 
		RULE_alterDatabase = 90, RULE_alterDatabaseClause = 91, RULE_createdbOptItems = 92, 
		RULE_createdbOptItem = 93, RULE_alterTableCmds = 94, RULE_alterTableCmd = 95, 
		RULE_constraintAttributeSpec = 96, RULE_constraintAttributeElem = 97, 
		RULE_alterGenericOptions = 98, RULE_alterGenericOptionList = 99, RULE_alterGenericOptionElem = 100, 
		RULE_genericOptionName = 101, RULE_dropBehavior = 102, RULE_alterUsing = 103, 
		RULE_setData = 104, RULE_alterIdentityColumnOptionList = 105, RULE_alterIdentityColumnOption = 106, 
		RULE_alterColumnDefault = 107, RULE_alterOperator = 108, RULE_alterOperatorClass = 109, 
		RULE_alterOperatorClassClauses = 110, RULE_alterOperatorFamily = 111, 
		RULE_alterOperatorFamilyClauses = 112, RULE_opclassItemList = 113, RULE_opclassItem = 114, 
		RULE_opclassPurpose = 115, RULE_alterOperatorClauses = 116, RULE_operatorDefList = 117, 
		RULE_operatorDefElem = 118, RULE_operatorDefArg = 119, RULE_operatorWithArgtypes = 120, 
		RULE_alterAggregate = 121, RULE_aggregateSignature = 122, RULE_aggrArgs = 123, 
		RULE_aggrArgsList = 124, RULE_aggrArg = 125, RULE_alterAggregateDefinitionClause = 126, 
		RULE_alterCollation = 127, RULE_alterCollationClause = 128, RULE_alterConversion = 129, 
		RULE_alterConversionClause = 130, RULE_alterDefaultPrivileges = 131, RULE_defACLAction = 132, 
		RULE_grantGrantOption = 133, RULE_granteeList = 134, RULE_grantee = 135, 
		RULE_defaclPrivilegeTarget = 136, RULE_privileges = 137, RULE_privilegeList = 138, 
		RULE_privilege = 139, RULE_defACLOptionList = 140, RULE_defACLOption = 141, 
		RULE_schemaNameList = 142, RULE_alterDomain = 143, RULE_alterDomainClause = 144, 
		RULE_constraintName = 145, RULE_alterEventTrigger = 146, RULE_alterEventTriggerClause = 147, 
		RULE_tiggerName = 148, RULE_alterExtension = 149, RULE_alterExtensionClauses = 150, 
		RULE_functionWithArgtypes = 151, RULE_funcArgs = 152, RULE_aggregateWithArgtypes = 153, 
		RULE_alterExtensionOptList = 154, RULE_alterExtensionOptItem = 155, RULE_alterForeignDataWrapper = 156, 
		RULE_alterForeignDataWrapperClauses = 157, RULE_genericOptionElem = 158, 
		RULE_genericOptionArg = 159, RULE_fdwOptions = 160, RULE_fdwOption = 161, 
		RULE_handlerName = 162, RULE_alterGroup = 163, RULE_alterGroupClauses = 164, 
		RULE_alterLanguage = 165, RULE_alterLargeObject = 166, RULE_alterMaterializedView = 167, 
		RULE_alterMaterializedViewClauses = 168, RULE_declare = 169, RULE_cursorOptions = 170, 
		RULE_cursorOption = 171, RULE_executeStmt = 172, RULE_createMaterializedView = 173, 
		RULE_createMvTarget = 174, RULE_refreshMatViewStmt = 175, RULE_alterPolicy = 176, 
		RULE_alterPolicyClauses = 177, RULE_alterProcedure = 178, RULE_alterProcedureClauses = 179, 
		RULE_alterfuncOptList = 180, RULE_alterFunction = 181, RULE_alterFunctionClauses = 182, 
		RULE_alterPublication = 183, RULE_alterRoutine = 184, RULE_alterRule = 185, 
		RULE_alterSequence = 186, RULE_alterSequenceClauses = 187, RULE_alterServer = 188, 
		RULE_foreignServerVersion = 189, RULE_alterStatistics = 190, RULE_alterSubscription = 191, 
		RULE_publicationNameList = 192, RULE_publicationNameItem = 193, RULE_alterSystem = 194, 
		RULE_alterTablespace = 195, RULE_alterTextSearchConfiguration = 196, RULE_alterTextSearchConfigurationClauses = 197, 
		RULE_anyNameList = 198, RULE_alterTextSearchDictionary = 199, RULE_alterTextSearchParser = 200, 
		RULE_alterTextSearchTemplate = 201, RULE_alterTrigger = 202, RULE_alterType = 203, 
		RULE_alterTypeClauses = 204, RULE_alterTypeCmds = 205, RULE_alterTypeCmd = 206, 
		RULE_alterUserMapping = 207, RULE_authIdent = 208, RULE_alterView = 209, 
		RULE_alterViewClauses = 210, RULE_close = 211, RULE_cluster = 212, RULE_clusterIndexSpecification = 213, 
		RULE_comment = 214, RULE_commentClauses = 215, RULE_objectTypeNameOnAnyName = 216, 
		RULE_objectTypeName = 217, RULE_dropTypeName = 218, RULE_objectTypeAnyName = 219, 
		RULE_commentText = 220, RULE_createAccessMethod = 221, RULE_createAggregate = 222, 
		RULE_oldAggrDefinition = 223, RULE_oldAggrList = 224, RULE_oldAggrElem = 225, 
		RULE_createCast = 226, RULE_castContext = 227, RULE_createCollation = 228, 
		RULE_createConversion = 229, RULE_createDomain = 230, RULE_createEventTrigger = 231, 
		RULE_eventTriggerWhenList = 232, RULE_eventTriggerWhenItem = 233, RULE_eventTriggerValueList = 234, 
		RULE_createExtension = 235, RULE_createExtensionOptList = 236, RULE_createExtensionOptItem = 237, 
		RULE_createForeignDataWrapper = 238, RULE_createForeignTable = 239, RULE_createForeignTableClauses = 240, 
		RULE_tableElementList = 241, RULE_tableElement = 242, RULE_tableLikeClause = 243, 
		RULE_tableLikeOptionList = 244, RULE_tableLikeOption = 245, RULE_createFunction = 246, 
		RULE_tableFuncColumnList = 247, RULE_tableFuncColumn = 248, RULE_createfuncOptList = 249, 
		RULE_createfuncOptItem = 250, RULE_transformTypeList = 251, RULE_funcAs = 252, 
		RULE_funcReturn = 253, RULE_funcArgsWithDefaults = 254, RULE_funcArgsWithDefaultsList = 255, 
		RULE_funcArgWithDefault = 256, RULE_createLanguage = 257, RULE_transformElementList = 258, 
		RULE_validatorClause = 259, RULE_createPolicy = 260, RULE_createProcedure = 261, 
		RULE_createPublication = 262, RULE_publicationForTables = 263, RULE_createRule = 264, 
		RULE_ruleActionList = 265, RULE_ruleActionStmt = 266, RULE_ruleActionMulti = 267, 
		RULE_notifyStmt = 268, RULE_createTrigger = 269, RULE_triggerEvents = 270, 
		RULE_triggerOneEvent = 271, RULE_triggerActionTime = 272, RULE_triggerFuncArgs = 273, 
		RULE_triggerFuncArg = 274, RULE_triggerWhen = 275, RULE_triggerForSpec = 276, 
		RULE_triggerReferencing = 277, RULE_triggerTransitions = 278, RULE_triggerTransition = 279, 
		RULE_transitionRelName = 280, RULE_transitionRowOrTable = 281, RULE_transitionOldOrNew = 282, 
		RULE_createSequence = 283, RULE_tempOption = 284, RULE_createServer = 285, 
		RULE_createStatistics = 286, RULE_createSubscription = 287, RULE_createTablespace = 288, 
		RULE_createTextSearch = 289, RULE_createTransform = 290, RULE_createType = 291, 
		RULE_createTypeClauses = 292, RULE_enumValList = 293, RULE_createUserMapping = 294, 
		RULE_discard = 295, RULE_dropAccessMethod = 296, RULE_dropAggregate = 297, 
		RULE_aggregateWithArgtypesList = 298, RULE_dropCast = 299, RULE_dropCollation = 300, 
		RULE_dropConversion = 301, RULE_dropDomain = 302, RULE_dropEventTrigger = 303, 
		RULE_dropExtension = 304, RULE_dropForeignDataWrapper = 305, RULE_dropForeignTable = 306, 
		RULE_dropFunction = 307, RULE_functionWithArgtypesList = 308, RULE_dropLanguage = 309, 
		RULE_dropMaterializedView = 310, RULE_dropOperator = 311, RULE_operatorWithArgtypesList = 312, 
		RULE_dropOperatorClass = 313, RULE_dropOperatorFamily = 314, RULE_dropOwned = 315, 
		RULE_dropPolicy = 316, RULE_dropProcedure = 317, RULE_dropPublication = 318, 
		RULE_dropRoutine = 319, RULE_dropRule = 320, RULE_dropSequence = 321, 
		RULE_dropServer = 322, RULE_dropStatistics = 323, RULE_dropSubscription = 324, 
		RULE_dropTablespace = 325, RULE_dropTextSearch = 326, RULE_dropTransform = 327, 
		RULE_dropTrigger = 328, RULE_dropType = 329, RULE_dropUserMapping = 330, 
		RULE_dropView = 331, RULE_importForeignSchema = 332, RULE_importQualification = 333, 
		RULE_importQualificationType = 334, RULE_listen = 335, RULE_move = 336, 
		RULE_prepare = 337, RULE_deallocate = 338, RULE_prepTypeClause = 339, 
		RULE_refreshMaterializedView = 340, RULE_reIndex = 341, RULE_reIndexClauses = 342, 
		RULE_reindexOptionList = 343, RULE_reindexOptionElem = 344, RULE_reindexTargetMultitable = 345, 
		RULE_reindexTargetType = 346, RULE_alterForeignTable = 347, RULE_alterForeignTableClauses = 348, 
		RULE_createOperator = 349, RULE_createOperatorClass = 350, RULE_createOperatorFamily = 351, 
		RULE_securityLabelStmt = 352, RULE_securityLabel = 353, RULE_securityLabelClausces = 354, 
		RULE_unlisten = 355, RULE_parameterMarker = 356, RULE_reservedKeyword = 357, 
		RULE_numberLiterals = 358, RULE_literalsType = 359, RULE_identifier = 360, 
		RULE_unicodeEscapes = 361, RULE_uescape = 362, RULE_unreservedWord = 363, 
		RULE_typeFuncNameKeyword = 364, RULE_schemaName = 365, RULE_tableName = 366, 
		RULE_columnName = 367, RULE_owner = 368, RULE_name = 369, RULE_tableNames = 370, 
		RULE_columnNames = 371, RULE_collationName = 372, RULE_indexName = 373, 
		RULE_alias = 374, RULE_primaryKey = 375, RULE_logicalOperator = 376, RULE_comparisonOperator = 377, 
		RULE_patternMatchingOperator = 378, RULE_cursorName = 379, RULE_aExpr = 380, 
		RULE_bExpr = 381, RULE_cExpr = 382, RULE_indirection = 383, RULE_optIndirection = 384, 
		RULE_indirectionEl = 385, RULE_sliceBound = 386, RULE_inExpr = 387, RULE_caseExpr = 388, 
		RULE_whenClauseList = 389, RULE_whenClause = 390, RULE_caseDefault = 391, 
		RULE_caseArg = 392, RULE_columnref = 393, RULE_qualOp = 394, RULE_subqueryOp = 395, 
		RULE_allOp = 396, RULE_op = 397, RULE_mathOperator = 398, RULE_jsonOperator = 399, 
		RULE_qualAllOp = 400, RULE_ascDesc = 401, RULE_anyOperator = 402, RULE_frameClause = 403, 
		RULE_frameExtent = 404, RULE_frameBound = 405, RULE_windowExclusionClause = 406, 
		RULE_row = 407, RULE_explicitRow = 408, RULE_implicitRow = 409, RULE_subType = 410, 
		RULE_arrayExpr = 411, RULE_arrayExprList = 412, RULE_funcArgList = 413, 
		RULE_paramName = 414, RULE_funcArgExpr = 415, RULE_typeList = 416, RULE_funcApplication = 417, 
		RULE_funcName = 418, RULE_aexprConst = 419, RULE_qualifiedName = 420, 
		RULE_colId = 421, RULE_typeFunctionName = 422, RULE_functionTable = 423, 
		RULE_xmlTable = 424, RULE_xmlTableColumnList = 425, RULE_xmlTableColumnEl = 426, 
		RULE_xmlTableColumnOptionList = 427, RULE_xmlTableColumnOptionEl = 428, 
		RULE_xmlNamespaceList = 429, RULE_xmlNamespaceEl = 430, RULE_funcExpr = 431, 
		RULE_withinGroupClause = 432, RULE_filterClause = 433, RULE_functionExprWindowless = 434, 
		RULE_ordinality = 435, RULE_functionExprCommonSubexpr = 436, RULE_typeName = 437, 
		RULE_simpleTypeName = 438, RULE_exprList = 439, RULE_extractList = 440, 
		RULE_extractArg = 441, RULE_genericType = 442, RULE_typeModifiers = 443, 
		RULE_numeric = 444, RULE_constDatetime = 445, RULE_timezone = 446, RULE_character = 447, 
		RULE_characterWithLength = 448, RULE_characterWithoutLength = 449, RULE_characterClause = 450, 
		RULE_optFloat = 451, RULE_attrs = 452, RULE_attrName = 453, RULE_colLable = 454, 
		RULE_bit = 455, RULE_bitWithLength = 456, RULE_bitWithoutLength = 457, 
		RULE_constInterval = 458, RULE_optInterval = 459, RULE_optArrayBounds = 460, 
		RULE_intervalSecond = 461, RULE_unicodeNormalForm = 462, RULE_trimList = 463, 
		RULE_overlayList = 464, RULE_overlayPlacing = 465, RULE_substrFrom = 466, 
		RULE_substrFor = 467, RULE_positionList = 468, RULE_substrList = 469, 
		RULE_xmlAttributes = 470, RULE_xmlAttributeList = 471, RULE_xmlAttributeEl = 472, 
		RULE_xmlExistsArgument = 473, RULE_xmlPassingMech = 474, RULE_documentOrContent = 475, 
		RULE_xmlWhitespaceOption = 476, RULE_xmlRootVersion = 477, RULE_xmlRootStandalone = 478, 
		RULE_rowsFromItem = 479, RULE_rowsFromList = 480, RULE_columnDefList = 481, 
		RULE_tableFuncElementList = 482, RULE_tableFuncElement = 483, RULE_collateClause = 484, 
		RULE_anyName = 485, RULE_aliasClause = 486, RULE_nameList = 487, RULE_funcAliasClause = 488, 
		RULE_tablesampleClause = 489, RULE_repeatableClause = 490, RULE_allOrDistinct = 491, 
		RULE_sortClause = 492, RULE_sortbyList = 493, RULE_sortby = 494, RULE_nullsOrder = 495, 
		RULE_distinctClause = 496, RULE_distinct = 497, RULE_overClause = 498, 
		RULE_windowSpecification = 499, RULE_windowName = 500, RULE_partitionClause = 501, 
		RULE_indexParams = 502, RULE_indexElemOptions = 503, RULE_indexElem = 504, 
		RULE_collate = 505, RULE_optClass = 506, RULE_reloptions = 507, RULE_reloptionList = 508, 
		RULE_reloptionElem = 509, RULE_defArg = 510, RULE_funcType = 511, RULE_selectWithParens = 512, 
		RULE_dataType = 513, RULE_dataTypeName = 514, RULE_dataTypeLength = 515, 
		RULE_characterSet = 516, RULE_ignoredIdentifier = 517, RULE_ignoredIdentifiers = 518, 
		RULE_signedIconst = 519, RULE_booleanOrString = 520, RULE_nonReservedWord = 521, 
		RULE_colNameKeyword = 522, RULE_databaseName = 523, RULE_roleSpec = 524, 
		RULE_varName = 525, RULE_varList = 526, RULE_varValue = 527, RULE_zoneValue = 528, 
		RULE_numericOnly = 529, RULE_isoLevel = 530, RULE_columnDef = 531, RULE_colConstraint = 532, 
		RULE_constraintAttr = 533, RULE_colConstraintElem = 534, RULE_parenthesizedSeqOptList = 535, 
		RULE_seqOptList = 536, RULE_seqOptElem = 537, RULE_optColumnList = 538, 
		RULE_generatedWhen = 539, RULE_noInherit = 540, RULE_consTableSpace = 541, 
		RULE_definition = 542, RULE_defList = 543, RULE_defElem = 544, RULE_colLabel = 545, 
		RULE_keyActions = 546, RULE_keyDelete = 547, RULE_keyUpdate = 548, RULE_keyAction = 549, 
		RULE_keyMatch = 550, RULE_createGenericOptions = 551, RULE_genericOptionList = 552, 
		RULE_replicaIdentity = 553, RULE_operArgtypes = 554, RULE_funcArg = 555, 
		RULE_argClass = 556, RULE_funcArgsList = 557, RULE_nonReservedWordOrSconst = 558, 
		RULE_fileName = 559, RULE_roleList = 560, RULE_setResetClause = 561, RULE_setRest = 562, 
		RULE_transactionModeList = 563, RULE_transactionModeItem = 564, RULE_setRestMore = 565, 
		RULE_encoding = 566, RULE_genericSet = 567, RULE_variableResetStmt = 568, 
		RULE_resetRest = 569, RULE_genericReset = 570, RULE_relationExprList = 571, 
		RULE_relationExpr = 572, RULE_commonFuncOptItem = 573, RULE_functionSetResetClause = 574, 
		RULE_rowSecurityCmd = 575, RULE_event = 576, RULE_typeNameList = 577, 
		RULE_notExistClause = 578, RULE_existClause = 579, RULE_insert = 580, 
		RULE_insertTarget = 581, RULE_insertRest = 582, RULE_overrideKind = 583, 
		RULE_insertColumnList = 584, RULE_insertColumnItem = 585, RULE_optOnConflict = 586, 
		RULE_optConfExpr = 587, RULE_update = 588, RULE_setClauseList = 589, RULE_setClause = 590, 
		RULE_setTarget = 591, RULE_setTargetList = 592, RULE_returningClause = 593, 
		RULE_delete = 594, RULE_relationExprOptAlias = 595, RULE_usingClause = 596, 
		RULE_select = 597, RULE_selectNoParens = 598, RULE_selectClauseN = 599, 
		RULE_simpleSelect = 600, RULE_withClause = 601, RULE_intoClause = 602, 
		RULE_optTempTableName = 603, RULE_cteList = 604, RULE_commonTableExpr = 605, 
		RULE_optMaterialized = 606, RULE_optNameList = 607, RULE_preparableStmt = 608, 
		RULE_forLockingClause = 609, RULE_forLockingItems = 610, RULE_forLockingItem = 611, 
		RULE_nowaitOrSkip = 612, RULE_forLockingStrength = 613, RULE_lockedRelsList = 614, 
		RULE_qualifiedNameList = 615, RULE_selectLimit = 616, RULE_valuesClause = 617, 
		RULE_limitClause = 618, RULE_offsetClause = 619, RULE_selectLimitValue = 620, 
		RULE_selectOffsetValue = 621, RULE_selectFetchFirstValue = 622, RULE_rowOrRows = 623, 
		RULE_firstOrNext = 624, RULE_targetList = 625, RULE_targetEl = 626, RULE_groupClause = 627, 
		RULE_groupByList = 628, RULE_groupByItem = 629, RULE_emptyGroupingSet = 630, 
		RULE_rollupClause = 631, RULE_cubeClause = 632, RULE_groupingSetsClause = 633, 
		RULE_windowClause = 634, RULE_windowDefinitionList = 635, RULE_windowDefinition = 636, 
		RULE_existingWindowName = 637, RULE_optWindowExclusionClause = 638, RULE_fromClause = 639, 
		RULE_fromList = 640, RULE_tableReference = 641, RULE_joinedTable = 642, 
		RULE_joinType = 643, RULE_joinOuter = 644, RULE_joinQual = 645, RULE_whereClause = 646, 
		RULE_whereOrCurrentClause = 647, RULE_havingClause = 648, RULE_doStatement = 649, 
		RULE_dostmtOptList = 650, RULE_dostmtOptItem = 651, RULE_lock = 652, RULE_lockType = 653, 
		RULE_checkpoint = 654, RULE_copy = 655, RULE_copyOptions = 656, RULE_copyGenericOptList = 657, 
		RULE_copyGenericOptElem = 658, RULE_copyGenericOptArg = 659, RULE_copyGenericOptArgList = 660, 
		RULE_copyGenericOptArgListItem = 661, RULE_copyOptList = 662, RULE_copyOptItem = 663, 
		RULE_copyDelimiter = 664, RULE_fetch = 665, RULE_fetchArgs = 666;
	private static String[] makeRuleNames() {
		return new String[] {
			"createTable", "executeParamClause", "partitionBoundSpec", "hashPartbound", 
			"hashPartboundElem", "typedTableElementList", "typedTableElement", "columnOptions", 
			"colQualList", "withData", "tableSpace", "onCommitOption", "withOption", 
			"tableAccessMethodClause", "accessMethod", "createIndex", "include", 
			"indexIncludingParams", "accessMethodClause", "createDatabase", "createView", 
			"columnList", "columnElem", "dropDatabase", "createDatabaseSpecification", 
			"createdbOptName", "alterTable", "alterIndex", "dropTable", "dropTableOpt", 
			"dropIndex", "dropIndexOpt", "truncateTable", "restartSeqs", "createTableSpecification", 
			"createDefinitionClause", "createDefinition", "columnDefinition", "columnConstraint", 
			"constraintClause", "columnConstraintOption", "checkOption", "defaultExpr", 
			"sequenceOptions", "sequenceOption", "indexParameters", "action", "constraintOptionalParam", 
			"likeOption", "tableConstraint", "tableConstraintOption", "exclusionWhereClause", 
			"exclusionConstraintList", "exclusionConstraintElem", "inheritClause", 
			"partitionSpec", "partParams", "partElem", "funcExprWindowless", "partStrategy", 
			"createIndexSpecification", "concurrentlyClause", "onlyClause", "asteriskClause", 
			"alterDefinitionClause", "partitionCmd", "alterIndexDefinitionClause", 
			"indexPartitionCmd", "renameIndexSpecification", "alterIndexDependsOnExtension", 
			"alterIndexSetTableSpace", "tableNamesClause", "tableNameClause", "alterTableActions", 
			"alterTableAction", "addColumnSpecification", "dropColumnSpecification", 
			"modifyColumnSpecification", "modifyColumn", "alterColumnSetOption", 
			"attributeOptions", "attributeOption", "addConstraintSpecification", 
			"tableConstraintUsingIndex", "storageParameterWithValue", "storageParameter", 
			"renameColumnSpecification", "renameConstraint", "renameTableSpecification", 
			"indexNames", "alterDatabase", "alterDatabaseClause", "createdbOptItems", 
			"createdbOptItem", "alterTableCmds", "alterTableCmd", "constraintAttributeSpec", 
			"constraintAttributeElem", "alterGenericOptions", "alterGenericOptionList", 
			"alterGenericOptionElem", "genericOptionName", "dropBehavior", "alterUsing", 
			"setData", "alterIdentityColumnOptionList", "alterIdentityColumnOption", 
			"alterColumnDefault", "alterOperator", "alterOperatorClass", "alterOperatorClassClauses", 
			"alterOperatorFamily", "alterOperatorFamilyClauses", "opclassItemList", 
			"opclassItem", "opclassPurpose", "alterOperatorClauses", "operatorDefList", 
			"operatorDefElem", "operatorDefArg", "operatorWithArgtypes", "alterAggregate", 
			"aggregateSignature", "aggrArgs", "aggrArgsList", "aggrArg", "alterAggregateDefinitionClause", 
			"alterCollation", "alterCollationClause", "alterConversion", "alterConversionClause", 
			"alterDefaultPrivileges", "defACLAction", "grantGrantOption", "granteeList", 
			"grantee", "defaclPrivilegeTarget", "privileges", "privilegeList", "privilege", 
			"defACLOptionList", "defACLOption", "schemaNameList", "alterDomain", 
			"alterDomainClause", "constraintName", "alterEventTrigger", "alterEventTriggerClause", 
			"tiggerName", "alterExtension", "alterExtensionClauses", "functionWithArgtypes", 
			"funcArgs", "aggregateWithArgtypes", "alterExtensionOptList", "alterExtensionOptItem", 
			"alterForeignDataWrapper", "alterForeignDataWrapperClauses", "genericOptionElem", 
			"genericOptionArg", "fdwOptions", "fdwOption", "handlerName", "alterGroup", 
			"alterGroupClauses", "alterLanguage", "alterLargeObject", "alterMaterializedView", 
			"alterMaterializedViewClauses", "declare", "cursorOptions", "cursorOption", 
			"executeStmt", "createMaterializedView", "createMvTarget", "refreshMatViewStmt", 
			"alterPolicy", "alterPolicyClauses", "alterProcedure", "alterProcedureClauses", 
			"alterfuncOptList", "alterFunction", "alterFunctionClauses", "alterPublication", 
			"alterRoutine", "alterRule", "alterSequence", "alterSequenceClauses", 
			"alterServer", "foreignServerVersion", "alterStatistics", "alterSubscription", 
			"publicationNameList", "publicationNameItem", "alterSystem", "alterTablespace", 
			"alterTextSearchConfiguration", "alterTextSearchConfigurationClauses", 
			"anyNameList", "alterTextSearchDictionary", "alterTextSearchParser", 
			"alterTextSearchTemplate", "alterTrigger", "alterType", "alterTypeClauses", 
			"alterTypeCmds", "alterTypeCmd", "alterUserMapping", "authIdent", "alterView", 
			"alterViewClauses", "close", "cluster", "clusterIndexSpecification", 
			"comment", "commentClauses", "objectTypeNameOnAnyName", "objectTypeName", 
			"dropTypeName", "objectTypeAnyName", "commentText", "createAccessMethod", 
			"createAggregate", "oldAggrDefinition", "oldAggrList", "oldAggrElem", 
			"createCast", "castContext", "createCollation", "createConversion", "createDomain", 
			"createEventTrigger", "eventTriggerWhenList", "eventTriggerWhenItem", 
			"eventTriggerValueList", "createExtension", "createExtensionOptList", 
			"createExtensionOptItem", "createForeignDataWrapper", "createForeignTable", 
			"createForeignTableClauses", "tableElementList", "tableElement", "tableLikeClause", 
			"tableLikeOptionList", "tableLikeOption", "createFunction", "tableFuncColumnList", 
			"tableFuncColumn", "createfuncOptList", "createfuncOptItem", "transformTypeList", 
			"funcAs", "funcReturn", "funcArgsWithDefaults", "funcArgsWithDefaultsList", 
			"funcArgWithDefault", "createLanguage", "transformElementList", "validatorClause", 
			"createPolicy", "createProcedure", "createPublication", "publicationForTables", 
			"createRule", "ruleActionList", "ruleActionStmt", "ruleActionMulti", 
			"notifyStmt", "createTrigger", "triggerEvents", "triggerOneEvent", "triggerActionTime", 
			"triggerFuncArgs", "triggerFuncArg", "triggerWhen", "triggerForSpec", 
			"triggerReferencing", "triggerTransitions", "triggerTransition", "transitionRelName", 
			"transitionRowOrTable", "transitionOldOrNew", "createSequence", "tempOption", 
			"createServer", "createStatistics", "createSubscription", "createTablespace", 
			"createTextSearch", "createTransform", "createType", "createTypeClauses", 
			"enumValList", "createUserMapping", "discard", "dropAccessMethod", "dropAggregate", 
			"aggregateWithArgtypesList", "dropCast", "dropCollation", "dropConversion", 
			"dropDomain", "dropEventTrigger", "dropExtension", "dropForeignDataWrapper", 
			"dropForeignTable", "dropFunction", "functionWithArgtypesList", "dropLanguage", 
			"dropMaterializedView", "dropOperator", "operatorWithArgtypesList", "dropOperatorClass", 
			"dropOperatorFamily", "dropOwned", "dropPolicy", "dropProcedure", "dropPublication", 
			"dropRoutine", "dropRule", "dropSequence", "dropServer", "dropStatistics", 
			"dropSubscription", "dropTablespace", "dropTextSearch", "dropTransform", 
			"dropTrigger", "dropType", "dropUserMapping", "dropView", "importForeignSchema", 
			"importQualification", "importQualificationType", "listen", "move", "prepare", 
			"deallocate", "prepTypeClause", "refreshMaterializedView", "reIndex", 
			"reIndexClauses", "reindexOptionList", "reindexOptionElem", "reindexTargetMultitable", 
			"reindexTargetType", "alterForeignTable", "alterForeignTableClauses", 
			"createOperator", "createOperatorClass", "createOperatorFamily", "securityLabelStmt", 
			"securityLabel", "securityLabelClausces", "unlisten", "parameterMarker", 
			"reservedKeyword", "numberLiterals", "literalsType", "identifier", "unicodeEscapes", 
			"uescape", "unreservedWord", "typeFuncNameKeyword", "schemaName", "tableName", 
			"columnName", "owner", "name", "tableNames", "columnNames", "collationName", 
			"indexName", "alias", "primaryKey", "logicalOperator", "comparisonOperator", 
			"patternMatchingOperator", "cursorName", "aExpr", "bExpr", "cExpr", "indirection", 
			"optIndirection", "indirectionEl", "sliceBound", "inExpr", "caseExpr", 
			"whenClauseList", "whenClause", "caseDefault", "caseArg", "columnref", 
			"qualOp", "subqueryOp", "allOp", "op", "mathOperator", "jsonOperator", 
			"qualAllOp", "ascDesc", "anyOperator", "frameClause", "frameExtent", 
			"frameBound", "windowExclusionClause", "row", "explicitRow", "implicitRow", 
			"subType", "arrayExpr", "arrayExprList", "funcArgList", "paramName", 
			"funcArgExpr", "typeList", "funcApplication", "funcName", "aexprConst", 
			"qualifiedName", "colId", "typeFunctionName", "functionTable", "xmlTable", 
			"xmlTableColumnList", "xmlTableColumnEl", "xmlTableColumnOptionList", 
			"xmlTableColumnOptionEl", "xmlNamespaceList", "xmlNamespaceEl", "funcExpr", 
			"withinGroupClause", "filterClause", "functionExprWindowless", "ordinality", 
			"functionExprCommonSubexpr", "typeName", "simpleTypeName", "exprList", 
			"extractList", "extractArg", "genericType", "typeModifiers", "numeric", 
			"constDatetime", "timezone", "character", "characterWithLength", "characterWithoutLength", 
			"characterClause", "optFloat", "attrs", "attrName", "colLable", "bit", 
			"bitWithLength", "bitWithoutLength", "constInterval", "optInterval", 
			"optArrayBounds", "intervalSecond", "unicodeNormalForm", "trimList", 
			"overlayList", "overlayPlacing", "substrFrom", "substrFor", "positionList", 
			"substrList", "xmlAttributes", "xmlAttributeList", "xmlAttributeEl", 
			"xmlExistsArgument", "xmlPassingMech", "documentOrContent", "xmlWhitespaceOption", 
			"xmlRootVersion", "xmlRootStandalone", "rowsFromItem", "rowsFromList", 
			"columnDefList", "tableFuncElementList", "tableFuncElement", "collateClause", 
			"anyName", "aliasClause", "nameList", "funcAliasClause", "tablesampleClause", 
			"repeatableClause", "allOrDistinct", "sortClause", "sortbyList", "sortby", 
			"nullsOrder", "distinctClause", "distinct", "overClause", "windowSpecification", 
			"windowName", "partitionClause", "indexParams", "indexElemOptions", "indexElem", 
			"collate", "optClass", "reloptions", "reloptionList", "reloptionElem", 
			"defArg", "funcType", "selectWithParens", "dataType", "dataTypeName", 
			"dataTypeLength", "characterSet", "ignoredIdentifier", "ignoredIdentifiers", 
			"signedIconst", "booleanOrString", "nonReservedWord", "colNameKeyword", 
			"databaseName", "roleSpec", "varName", "varList", "varValue", "zoneValue", 
			"numericOnly", "isoLevel", "columnDef", "colConstraint", "constraintAttr", 
			"colConstraintElem", "parenthesizedSeqOptList", "seqOptList", "seqOptElem", 
			"optColumnList", "generatedWhen", "noInherit", "consTableSpace", "definition", 
			"defList", "defElem", "colLabel", "keyActions", "keyDelete", "keyUpdate", 
			"keyAction", "keyMatch", "createGenericOptions", "genericOptionList", 
			"replicaIdentity", "operArgtypes", "funcArg", "argClass", "funcArgsList", 
			"nonReservedWordOrSconst", "fileName", "roleList", "setResetClause", 
			"setRest", "transactionModeList", "transactionModeItem", "setRestMore", 
			"encoding", "genericSet", "variableResetStmt", "resetRest", "genericReset", 
			"relationExprList", "relationExpr", "commonFuncOptItem", "functionSetResetClause", 
			"rowSecurityCmd", "event", "typeNameList", "notExistClause", "existClause", 
			"insert", "insertTarget", "insertRest", "overrideKind", "insertColumnList", 
			"insertColumnItem", "optOnConflict", "optConfExpr", "update", "setClauseList", 
			"setClause", "setTarget", "setTargetList", "returningClause", "delete", 
			"relationExprOptAlias", "usingClause", "select", "selectNoParens", "selectClauseN", 
			"simpleSelect", "withClause", "intoClause", "optTempTableName", "cteList", 
			"commonTableExpr", "optMaterialized", "optNameList", "preparableStmt", 
			"forLockingClause", "forLockingItems", "forLockingItem", "nowaitOrSkip", 
			"forLockingStrength", "lockedRelsList", "qualifiedNameList", "selectLimit", 
			"valuesClause", "limitClause", "offsetClause", "selectLimitValue", "selectOffsetValue", 
			"selectFetchFirstValue", "rowOrRows", "firstOrNext", "targetList", "targetEl", 
			"groupClause", "groupByList", "groupByItem", "emptyGroupingSet", "rollupClause", 
			"cubeClause", "groupingSetsClause", "windowClause", "windowDefinitionList", 
			"windowDefinition", "existingWindowName", "optWindowExclusionClause", 
			"fromClause", "fromList", "tableReference", "joinedTable", "joinType", 
			"joinOuter", "joinQual", "whereClause", "whereOrCurrentClause", "havingClause", 
			"doStatement", "dostmtOptList", "dostmtOptItem", "lock", "lockType", 
			"checkpoint", "copy", "copyOptions", "copyGenericOptList", "copyGenericOptElem", 
			"copyGenericOptArg", "copyGenericOptArgList", "copyGenericOptArgListItem", 
			"copyOptList", "copyOptItem", "copyDelimiter", "fetch", "fetchArgs"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'U'", "'u'", "'Default does not match anything'", "'skip'", "'&&'", 
			"'||'", "'!'", "'~'", "'|'", "'&'", "'<<'", "'>>'", "'^'", "'%'", "':'", 
			"'+'", "'-'", "'*'", "'/'", "'\\'", "'.'", "'.*'", "'<=>'", "'=='", "'='", 
			"':='", null, "'>'", "'>='", "'<'", "'<='", "'#'", "'('", "')'", "'{'", 
			"'}'", "'['", "']'", "','", "'\"'", "'''", "'`'", "'?'", "'@'", "';'", 
			"'~~'", "'!~~'", "'::'", "'~~*'", "'!~~*'", "'->'", "'->>'", "'#>'", 
			"'#>>'", "'@>'", "'<@'", "'?&'", "'#-'", "'@?'", "'@@'", null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, "'DO NOT MATCH ANY THING, JUST FOR GENERATOR'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, "AND_", "OR_", "NOT_", "TILDE_", "VERTICAL_BAR_", 
			"AMPERSAND_", "SIGNED_LEFT_SHIFT_", "SIGNED_RIGHT_SHIFT_", "CARET_", 
			"MOD_", "COLON_", "PLUS_", "MINUS_", "ASTERISK_", "SLASH_", "BACKSLASH_", 
			"DOT_", "DOT_ASTERISK_", "SAFE_EQ_", "DEQ_", "EQ_", "CQ_", "NEQ_", "GT_", 
			"GTE_", "LT_", "LTE_", "POUND_", "LP_", "RP_", "LBE_", "RBE_", "LBT_", 
			"RBT_", "COMMA_", "DQ_", "SQ_", "BQ_", "QUESTION_", "AT_", "SEMI_", "TILDE_TILDE_", 
			"NOT_TILDE_TILDE_", "TYPE_CAST_", "ILIKE_", "NOT_ILIKE_", "JSON_EXTRACT_", 
			"JSON_EXTRACT_TEXT_", "JSON_PATH_EXTRACT_", "JSON_PATH_EXTRACT_TEXT_", 
			"JSONB_CONTAIN_RIGHT_", "JSONB_CONTAIN_LEFT_", "JSONB_CONTAIN_ALL_TOP_KEY_", 
			"JSONB_PATH_DELETE_", "JSONB_PATH_CONTAIN_ANY_VALUE_", "JSONB_PATH_PREDICATE_CHECK_", 
			"WS", "SELECT", "INSERT", "UPDATE", "DELETE", "CREATE", "ALTER", "DROP", 
			"TRUNCATE", "SCHEMA", "GRANT", "REVOKE", "ADD", "SET", "TABLE", "COLUMN", 
			"INDEX", "CONSTRAINT", "PRIMARY", "UNIQUE", "FOREIGN", "KEY", "POSITION", 
			"PRECISION", "FUNCTION", "TRIGGER", "PROCEDURE", "VIEW", "INTO", "VALUES", 
			"WITH", "UNION", "DISTINCT", "CASE", "WHEN", "CAST", "TRIM", "SUBSTRING", 
			"FROM", "NATURAL", "JOIN", "FULL", "INNER", "OUTER", "LEFT", "RIGHT", 
			"CROSS", "USING", "WHERE", "AS", "ON", "IF", "ELSE", "THEN", "FOR", "TO", 
			"AND", "OR", "IS", "NOT", "NULL", "TRUE", "FALSE", "EXISTS", "BETWEEN", 
			"IN", "ALL", "ANY", "LIKE", "ORDER", "GROUP", "BY", "ASC", "DESC", "HAVING", 
			"LIMIT", "OFFSET", "BEGIN", "COMMIT", "ROLLBACK", "SAVEPOINT", "BOOLEAN", 
			"DOUBLE", "CHAR", "CHARACTER", "ARRAY", "INTERVAL", "DATE", "TIME", "TIMESTAMP", 
			"LOCALTIME", "LOCALTIMESTAMP", "YEAR", "QUARTER", "MONTH", "WEEK", "DAY", 
			"HOUR", "MINUTE", "SECOND", "MICROSECOND", "DEFAULT", "CURRENT", "ENABLE", 
			"DISABLE", "CALL", "INSTANCE", "PRESERVE", "DO", "DEFINER", "CURRENT_USER", 
			"SQL", "CASCADED", "LOCAL", "CLOSE", "OPEN", "NEXT", "NAME", "COLLATION", 
			"NAMES", "INTEGER", "REAL", "DECIMAL", "TYPE", "SMALLINT", "BIGINT", 
			"NUMERIC", "TEXT", "REPEATABLE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
			"NULLIF", "VARYING", "NATIONAL", "NCHAR", "VALUE", "BOTH", "LEADING", 
			"TRAILING", "COALESCE", "INTERSECT", "EXCEPT", "TIES", "FETCH", "CUBE", 
			"GROUPING", "SETS", "WINDOW", "OTHERS", "OVERLAPS", "SOME", "AT", "DEC", 
			"END", "FOR_GENERATOR", "ADMIN", "BINARY", "ESCAPE", "EXCLUDE", "MOD", 
			"PARTITION", "ROW", "UNKNOWN", "ALWAYS", "CASCADE", "CHECK", "GENERATED", 
			"ISOLATION", "LEVEL", "NO", "OPTION", "PRIVILEGES", "READ", "REFERENCES", 
			"ROLE", "ROWS", "START", "TRANSACTION", "USER", "ACTION", "CACHE", "CHARACTERISTICS", 
			"CLUSTER", "COLLATE", "COMMENTS", "CONCURRENTLY", "CONNECT", "CONSTRAINTS", 
			"CYCLE", "DATA", "DATABASE", "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEPENDS", 
			"DOMAIN", "EXCLUDING", "EXECUTE", "EXTENDED", "EXTENSION", "EXTERNAL", 
			"EXTRACT", "FILTER", "FIRST", "FOLLOWING", "FORCE", "GLOBAL", "IDENTITY", 
			"IMMEDIATE", "INCLUDING", "INCREMENT", "INDEXES", "INHERIT", "INHERITS", 
			"INITIALLY", "INCLUDE", "LANGUAGE", "LARGE", "LAST", "LOGGED", "MAIN", 
			"MATCH", "MAXVALUE", "MINVALUE", "NOTHING", "NULLS", "OBJECT", "OIDS", 
			"ONLY", "OVER", "OWNED", "OWNER", "PARTIAL", "PLAIN", "PRECEDING", "RANGE", 
			"RENAME", "REPLICA", "RESET", "RESTART", "RESTRICT", "ROUTINE", "RULE", 
			"SECURITY", "SEQUENCE", "SESSION", "SESSION_USER", "SHOW", "SIMPLE", 
			"STATISTICS", "STORAGE", "TABLESPACE", "TEMP", "TEMPORARY", "UNBOUNDED", 
			"UNLOGGED", "USAGE", "VALID", "VALIDATE", "WITHIN", "WITHOUT", "ZONE", 
			"OF", "UESCAPE", "GROUPS", "RECURSIVE", "INT", "INT2", "INT4", "INT8", 
			"FLOAT", "FLOAT4", "FLOAT8", "SMALLSERIAL", "SERIAL", "BIGSERIAL", "MONEY", 
			"VARCHAR", "BYTEA", "ENUM", "POINT", "LINE", "LSEG", "BOX", "PATH", "POLYGON", 
			"CIRCLE", "CIDR", "INET", "MACADDR", "MACADDR8", "BIT", "VARBIT", "TSVECTOR", 
			"TSQUERY", "XML", "JSON", "INT4RANGE", "INT8RANGE", "NUMRANGE", "TSRANGE", 
			"TSTZRANGE", "DATERANGE", "TABLESAMPLE", "ORDINALITY", "CURRENT_ROLE", 
			"CURRENT_CATALOG", "CURRENT_SCHEMA", "NORMALIZE", "OVERLAY", "XMLCONCAT", 
			"XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT", 
			"XMLSERIALIZE", "TREAT", "SETOF", "NFC", "NFD", "NFKC", "NFKD", "XMLATTRIBUTES", 
			"REF", "PASSING", "VERSION", "YES", "STANDALONE", "GREATEST", "LEAST", 
			"MATERIALIZED", "OPERATOR", "SHARE", "ROLLUP", "ILIKE", "SIMILAR", "ISNULL", 
			"NOTNULL", "SYMMETRIC", "DOCUMENT", "NORMALIZED", "ASYMMETRIC", "VARIADIC", 
			"NOWAIT", "LOCKED", "XMLTABLE", "COLUMNS", "CONTENT", "STRIP", "WHITESPACE", 
			"XMLNAMESPACES", "PLACING", "RETURNING", "LATERAL", "NONE", "ANALYSE", 
			"ANALYZE", "CONFLICT", "OVERRIDING", "SYSTEM", "ABORT", "ABSOLUTE", "ACCESS", 
			"AFTER", "AGGREGATE", "ALSO", "ATTACH", "ATTRIBUTE", "BACKWARD", "BEFORE", 
			"ASSERTION", "ASSIGNMENT", "CONTINUE", "CONVERSION", "COPY", "COST", 
			"CSV", "CALLED", "CATALOG", "CHAIN", "CHECKPOINT", "CLASS", "CONFIGURATION", 
			"COMMENT", "DETACH", "DICTIONARY", "EXPRESSION", "INSENSITIVE", "DISCARD", 
			"OFF", "INSTEAD", "EXPLAIN", "INPUT", "INLINE", "PARALLEL", "LEAKPROOF", 
			"COMMITTED", "ENCODING", "IMPLICIT", "DELIMITER", "CURSOR", "EACH", "EVENT", 
			"DEALLOCATE", "CONNECTION", "DECLARE", "FAMILY", "FORWARD", "EXCLUSIVE", 
			"FUNCTIONS", "LOCATION", "LABEL", "DELIMITERS", "HANDLER", "HEADER", 
			"IMMUTABLE", "GRANTED", "HOLD", "MAPPING", "OLD", "METHOD", "LOAD", "LISTEN", 
			"MODE", "MOVE", "PROCEDURAL", "PARSER", "PROCEDURES", "ENCRYPTED", "PUBLICATION", 
			"PROGRAM", "REFERENCING", "PLANS", "REINDEX", "PRIOR", "PASSWORD", "RELATIVE", 
			"QUOTE", "ROUTINES", "REPLACE", "SNAPSHOT", "REFRESH", "PREPARE", "OPTIONS", 
			"IMPORT", "INVOKER", "NEW", "PREPARED", "SCROLL", "SEQUENCES", "SYSID", 
			"REASSIGN", "SERVER", "SUBSCRIPTION", "SEARCH", "SCHEMAS", "RECHECK", 
			"POLICY", "NOTIFY", "LOCK", "RELEASE", "SERIALIZABLE", "RETURNS", "STATEMENT", 
			"STDIN", "STDOUT", "TABLES", "SUPPORT", "STABLE", "TEMPLATE", "UNENCRYPTED", 
			"VIEWS", "UNCOMMITTED", "TRANSFORM", "UNLISTEN", "TRUSTED", "VALIDATOR", 
			"UNTIL", "VACUUM", "VOLATILE", "STORED", "WRITE", "STRICT", "TYPES", 
			"WRAPPER", "WORK", "FREEZE", "AUTHORIZATION", "VERBOSE", "PARAM", "OUT", 
			"INOUT", "IDENTIFIER_", "STRING_", "NUMBER_", "HEX_DIGIT_", "BIT_NUM_"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "DDLStatement.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public DDLStatementParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class CreateTableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public CreateTableSpecificationContext createTableSpecification() {
			return getRuleContext(CreateTableSpecificationContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InheritClauseContext inheritClause() {
			return getRuleContext(InheritClauseContext.class,0);
		}
		public CreateDefinitionClauseContext createDefinitionClause() {
			return getRuleContext(CreateDefinitionClauseContext.class,0);
		}
		public NotExistClauseContext notExistClause() {
			return getRuleContext(NotExistClauseContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TableAccessMethodClauseContext tableAccessMethodClause() {
			return getRuleContext(TableAccessMethodClauseContext.class,0);
		}
		public WithOptionContext withOption() {
			return getRuleContext(WithOptionContext.class,0);
		}
		public OnCommitOptionContext onCommitOption() {
			return getRuleContext(OnCommitOptionContext.class,0);
		}
		public TableSpaceContext tableSpace() {
			return getRuleContext(TableSpaceContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(DDLStatementParser.EXECUTE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExecuteParamClauseContext executeParamClause() {
			return getRuleContext(ExecuteParamClauseContext.class,0);
		}
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(DDLStatementParser.PARTITION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public PartitionBoundSpecContext partitionBoundSpec() {
			return getRuleContext(PartitionBoundSpecContext.class,0);
		}
		public List<WithDataContext> withData() {
			return getRuleContexts(WithDataContext.class);
		}
		public WithDataContext withData(int i) {
			return getRuleContext(WithDataContext.class,i);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TypedTableElementListContext typedTableElementList() {
			return getRuleContext(TypedTableElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_createTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1334);
			match(CREATE);
			setState(1335);
			createTableSpecification();
			setState(1336);
			match(TABLE);
			setState(1338);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				setState(1337);
				notExistClause();
				}
				break;
			}
			setState(1340);
			tableName();
			setState(1361);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				{
				setState(1341);
				createDefinitionClause();
				}
				break;
			case OF:
				{
				{
				setState(1342);
				match(OF);
				setState(1343);
				anyName();
				setState(1348);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(1344);
					match(LP_);
					setState(1345);
					typedTableElementList();
					setState(1346);
					match(RP_);
					}
				}

				}
				}
				break;
			case PARTITION:
				{
				{
				setState(1350);
				match(PARTITION);
				setState(1351);
				match(OF);
				setState(1352);
				qualifiedName();
				setState(1357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(1353);
					match(LP_);
					setState(1354);
					typedTableElementList();
					setState(1355);
					match(RP_);
					}
				}

				setState(1359);
				partitionBoundSpec();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1363);
			inheritClause();
			setState(1365);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1364);
				partitionSpec();
				}
			}

			setState(1368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1367);
				tableAccessMethodClause();
				}
			}

			setState(1371);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH || _la==WITHOUT) {
				{
				setState(1370);
				withOption();
				}
			}

			setState(1374);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1373);
				onCommitOption();
				}
			}

			setState(1377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(1376);
				tableSpace();
				}
			}

			setState(1384);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1379);
				match(AS);
				setState(1380);
				select();
				setState(1382);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1381);
					withData();
					}
				}

				}
			}

			setState(1392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXECUTE) {
				{
				setState(1386);
				match(EXECUTE);
				setState(1387);
				name();
				setState(1388);
				executeParamClause();
				setState(1390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1389);
					withData();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteParamClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ExecuteParamClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeParamClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExecuteParamClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExecuteParamClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExecuteParamClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteParamClauseContext executeParamClause() throws RecognitionException {
		ExecuteParamClauseContext _localctx = new ExecuteParamClauseContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_executeParamClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1394);
			match(LP_);
			setState(1395);
			exprList(0);
			setState(1396);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionBoundSpecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode VALUES() { return getToken(DDLStatementParser.VALUES, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public List<TerminalNode> LP_() { return getTokens(DDLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(DDLStatementParser.LP_, i);
		}
		public HashPartboundContext hashPartbound() {
			return getRuleContext(HashPartboundContext.class,0);
		}
		public List<TerminalNode> RP_() { return getTokens(DDLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(DDLStatementParser.RP_, i);
		}
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public List<ExprListContext> exprList() {
			return getRuleContexts(ExprListContext.class);
		}
		public ExprListContext exprList(int i) {
			return getRuleContext(ExprListContext.class,i);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public PartitionBoundSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionBoundSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPartitionBoundSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPartitionBoundSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPartitionBoundSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionBoundSpecContext partitionBoundSpec() throws RecognitionException {
		PartitionBoundSpecContext _localctx = new PartitionBoundSpecContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_partitionBoundSpec);
		try {
			setState(1424);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1398);
				match(FOR);
				setState(1399);
				match(VALUES);
				setState(1400);
				match(WITH);
				setState(1401);
				match(LP_);
				setState(1402);
				hashPartbound();
				setState(1403);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1405);
				match(FOR);
				setState(1406);
				match(VALUES);
				setState(1407);
				match(IN);
				setState(1408);
				match(LP_);
				setState(1409);
				exprList(0);
				setState(1410);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1412);
				match(FOR);
				setState(1413);
				match(VALUES);
				setState(1414);
				match(FROM);
				setState(1415);
				match(LP_);
				setState(1416);
				exprList(0);
				setState(1417);
				match(RP_);
				setState(1418);
				match(TO);
				setState(1419);
				match(LP_);
				setState(1420);
				exprList(0);
				setState(1421);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1423);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HashPartboundContext extends ParserRuleContext {
		public List<HashPartboundElemContext> hashPartboundElem() {
			return getRuleContexts(HashPartboundElemContext.class);
		}
		public HashPartboundElemContext hashPartboundElem(int i) {
			return getRuleContext(HashPartboundElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public HashPartboundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hashPartbound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterHashPartbound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitHashPartbound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitHashPartbound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HashPartboundContext hashPartbound() throws RecognitionException {
		HashPartboundContext _localctx = new HashPartboundContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_hashPartbound);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1426);
			hashPartboundElem();
			setState(1431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1427);
				match(COMMA_);
				setState(1428);
				hashPartboundElem();
				}
				}
				setState(1433);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HashPartboundElemContext extends ParserRuleContext {
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public HashPartboundElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hashPartboundElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterHashPartboundElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitHashPartboundElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitHashPartboundElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HashPartboundElemContext hashPartboundElem() throws RecognitionException {
		HashPartboundElemContext _localctx = new HashPartboundElemContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_hashPartboundElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1434);
			nonReservedWord();
			setState(1435);
			match(NUMBER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedTableElementListContext extends ParserRuleContext {
		public List<TypedTableElementContext> typedTableElement() {
			return getRuleContexts(TypedTableElementContext.class);
		}
		public TypedTableElementContext typedTableElement(int i) {
			return getRuleContext(TypedTableElementContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TypedTableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedTableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTypedTableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTypedTableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTypedTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedTableElementListContext typedTableElementList() throws RecognitionException {
		TypedTableElementListContext _localctx = new TypedTableElementListContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_typedTableElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1437);
			typedTableElement();
			setState(1442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1438);
				match(COMMA_);
				setState(1439);
				typedTableElement();
				}
				}
				setState(1444);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedTableElementContext extends ParserRuleContext {
		public ColumnOptionsContext columnOptions() {
			return getRuleContext(ColumnOptionsContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TypedTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedTableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTypedTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTypedTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTypedTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedTableElementContext typedTableElement() throws RecognitionException {
		TypedTableElementContext _localctx = new TypedTableElementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_typedTableElement);
		try {
			setState(1447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1445);
				columnOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1446);
				tableConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnOptionsContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode OPTIONS() { return getToken(DDLStatementParser.OPTIONS, 0); }
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnOptionsContext columnOptions() throws RecognitionException {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_columnOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1449);
			colId();
			setState(1452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1450);
				match(WITH);
				setState(1451);
				match(OPTIONS);
				}
			}

			setState(1454);
			colQualList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColQualListContext extends ParserRuleContext {
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColQualListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colQualList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColQualList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColQualList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColQualList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColQualListContext colQualList() throws RecognitionException {
		ColQualListContext _localctx = new ColQualListContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_colQualList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (CONSTRAINT - 78)) | (1L << (PRIMARY - 78)) | (1L << (UNIQUE - 78)) | (1L << (KEY - 78)) | (1L << (NOT - 78)) | (1L << (NULL - 78)))) != 0) || _la==DEFAULT || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (CHECK - 227)) | (1L << (GENERATED - 227)) | (1L << (REFERENCES - 227)))) != 0)) {
				{
				{
				setState(1456);
				columnConstraint();
				}
				}
				setState(1461);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithDataContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public WithDataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withData; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWithData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWithData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWithData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithDataContext withData() throws RecognitionException {
		WithDataContext _localctx = new WithDataContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_withData);
		try {
			setState(1467);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1462);
				match(WITH);
				setState(1463);
				match(DATA);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1464);
				match(WITH);
				setState(1465);
				match(NO);
				setState(1466);
				match(DATA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSpaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSpaceContext tableSpace() throws RecognitionException {
		TableSpaceContext _localctx = new TableSpaceContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_tableSpace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1469);
			match(TABLESPACE);
			setState(1470);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnCommitOptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(DDLStatementParser.COMMIT, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode DELETE() { return getToken(DDLStatementParser.DELETE, 0); }
		public TerminalNode ROWS() { return getToken(DDLStatementParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(DDLStatementParser.PRESERVE, 0); }
		public OnCommitOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onCommitOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOnCommitOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOnCommitOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOnCommitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnCommitOptionContext onCommitOption() throws RecognitionException {
		OnCommitOptionContext _localctx = new OnCommitOptionContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_onCommitOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1472);
			match(ON);
			setState(1473);
			match(COMMIT);
			setState(1479);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DROP:
				{
				setState(1474);
				match(DROP);
				}
				break;
			case DELETE:
				{
				setState(1475);
				match(DELETE);
				setState(1476);
				match(ROWS);
				}
				break;
			case PRESERVE:
				{
				setState(1477);
				match(PRESERVE);
				setState(1478);
				match(ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(DDLStatementParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(DDLStatementParser.OIDS, 0); }
		public WithOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWithOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWithOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWithOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithOptionContext withOption() throws RecognitionException {
		WithOptionContext _localctx = new WithOptionContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_withOption);
		try {
			setState(1485);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1481);
				match(WITH);
				setState(1482);
				reloptions();
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1483);
				match(WITHOUT);
				setState(1484);
				match(OIDS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAccessMethodClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public AccessMethodContext accessMethod() {
			return getRuleContext(AccessMethodContext.class,0);
		}
		public TableAccessMethodClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAccessMethodClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableAccessMethodClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableAccessMethodClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableAccessMethodClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAccessMethodClauseContext tableAccessMethodClause() throws RecognitionException {
		TableAccessMethodClauseContext _localctx = new TableAccessMethodClauseContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_tableAccessMethodClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1487);
			match(USING);
			setState(1488);
			accessMethod();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AccessMethodContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public AccessMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accessMethod; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAccessMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAccessMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAccessMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AccessMethodContext accessMethod() throws RecognitionException {
		AccessMethodContext _localctx = new AccessMethodContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_accessMethod);
		try {
			setState(1493);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1490);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1491);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1492);
				colNameKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public CreateIndexSpecificationContext createIndexSpecification() {
			return getRuleContext(CreateIndexSpecificationContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public ConcurrentlyClauseContext concurrentlyClause() {
			return getRuleContext(ConcurrentlyClauseContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public OnlyClauseContext onlyClause() {
			return getRuleContext(OnlyClauseContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public IndexParamsContext indexParams() {
			return getRuleContext(IndexParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public AccessMethodClauseContext accessMethodClause() {
			return getRuleContext(AccessMethodClauseContext.class,0);
		}
		public IncludeContext include() {
			return getRuleContext(IncludeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TableSpaceContext tableSpace() {
			return getRuleContext(TableSpaceContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public NotExistClauseContext notExistClause() {
			return getRuleContext(NotExistClauseContext.class,0);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_createIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1495);
			match(CREATE);
			setState(1496);
			createIndexSpecification();
			setState(1497);
			match(INDEX);
			setState(1498);
			concurrentlyClause();
			setState(1503);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (KEY - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (IF - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (BY - 132)) | (1L << (BEGIN - 132)) | (1L << (COMMIT - 132)) | (1L << (ROLLBACK - 132)) | (1L << (SAVEPOINT - 132)) | (1L << (DOUBLE - 132)) | (1L << (YEAR - 132)) | (1L << (MONTH - 132)) | (1L << (DAY - 132)) | (1L << (HOUR - 132)) | (1L << (MINUTE - 132)) | (1L << (SECOND - 132)) | (1L << (CURRENT - 132)) | (1L << (ENABLE - 132)) | (1L << (DISABLE - 132)) | (1L << (CALL - 132)) | (1L << (PRESERVE - 132)) | (1L << (DEFINER - 132)) | (1L << (SQL - 132)) | (1L << (CASCADED - 132)) | (1L << (LOCAL - 132)) | (1L << (CLOSE - 132)) | (1L << (NEXT - 132)) | (1L << (NAME - 132)) | (1L << (NAMES - 132)) | (1L << (TYPE - 132)) | (1L << (TEXT - 132)) | (1L << (REPEATABLE - 132)) | (1L << (VARYING - 132)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (VALUE - 197)) | (1L << (TIES - 197)) | (1L << (CUBE - 197)) | (1L << (SETS - 197)) | (1L << (OTHERS - 197)) | (1L << (AT - 197)) | (1L << (ADMIN - 197)) | (1L << (ESCAPE - 197)) | (1L << (EXCLUDE - 197)) | (1L << (PARTITION - 197)) | (1L << (UNKNOWN - 197)) | (1L << (ALWAYS - 197)) | (1L << (CASCADE - 197)) | (1L << (GENERATED - 197)) | (1L << (ISOLATION - 197)) | (1L << (LEVEL - 197)) | (1L << (NO - 197)) | (1L << (OPTION - 197)) | (1L << (PRIVILEGES - 197)) | (1L << (READ - 197)) | (1L << (ROLE - 197)) | (1L << (ROWS - 197)) | (1L << (START - 197)) | (1L << (TRANSACTION - 197)) | (1L << (ACTION - 197)) | (1L << (CACHE - 197)) | (1L << (CHARACTERISTICS - 197)) | (1L << (CLUSTER - 197)) | (1L << (COMMENTS - 197)) | (1L << (CONSTRAINTS - 197)) | (1L << (CYCLE - 197)) | (1L << (DATA - 197)) | (1L << (DATABASE - 197)) | (1L << (DEFAULTS - 197)) | (1L << (DEFERRED - 197)) | (1L << (DEPENDS - 197)) | (1L << (DOMAIN - 197)) | (1L << (EXCLUDING - 197)) | (1L << (EXECUTE - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (EXTENSION - 261)) | (1L << (EXTERNAL - 261)) | (1L << (FILTER - 261)) | (1L << (FIRST - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FORCE - 261)) | (1L << (GLOBAL - 261)) | (1L << (IDENTITY - 261)) | (1L << (IMMEDIATE - 261)) | (1L << (INCLUDING - 261)) | (1L << (INCREMENT - 261)) | (1L << (INDEXES - 261)) | (1L << (INHERIT - 261)) | (1L << (INHERITS - 261)) | (1L << (INCLUDE - 261)) | (1L << (LANGUAGE - 261)) | (1L << (LARGE - 261)) | (1L << (LAST - 261)) | (1L << (LOGGED - 261)) | (1L << (MATCH - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MINVALUE - 261)) | (1L << (NOTHING - 261)) | (1L << (NULLS - 261)) | (1L << (OBJECT - 261)) | (1L << (OIDS - 261)) | (1L << (OVER - 261)) | (1L << (OWNED - 261)) | (1L << (OWNER - 261)) | (1L << (PARTIAL - 261)) | (1L << (PRECEDING - 261)) | (1L << (RANGE - 261)) | (1L << (RENAME - 261)) | (1L << (REPLICA - 261)) | (1L << (RESET - 261)) | (1L << (RESTART - 261)) | (1L << (RESTRICT - 261)) | (1L << (ROUTINE - 261)) | (1L << (RULE - 261)) | (1L << (SECURITY - 261)) | (1L << (SEQUENCE - 261)) | (1L << (SESSION - 261)) | (1L << (SHOW - 261)) | (1L << (SIMPLE - 261)) | (1L << (STATISTICS - 261)) | (1L << (STORAGE - 261)) | (1L << (TABLESPACE - 261)) | (1L << (TEMP - 261)) | (1L << (TEMPORARY - 261)) | (1L << (UNBOUNDED - 261)) | (1L << (UNLOGGED - 261)) | (1L << (VALID - 261)) | (1L << (VALIDATE - 261)) | (1L << (WITHIN - 261)) | (1L << (WITHOUT - 261)) | (1L << (ZONE - 261)) | (1L << (OF - 261)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (UESCAPE - 325)) | (1L << (GROUPS - 325)) | (1L << (RECURSIVE - 325)) | (1L << (ENUM - 325)) | (1L << (XML - 325)) | (1L << (JSON - 325)) | (1L << (ORDINALITY - 325)) | (1L << (NFC - 325)) | (1L << (NFD - 325)) | (1L << (NFKC - 325)) | (1L << (NFKD - 325)) | (1L << (REF - 325)) | (1L << (PASSING - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (VERSION - 389)) | (1L << (YES - 389)) | (1L << (STANDALONE - 389)) | (1L << (MATERIALIZED - 389)) | (1L << (OPERATOR - 389)) | (1L << (SHARE - 389)) | (1L << (ROLLUP - 389)) | (1L << (DOCUMENT - 389)) | (1L << (NORMALIZED - 389)) | (1L << (NOWAIT - 389)) | (1L << (LOCKED - 389)) | (1L << (COLUMNS - 389)) | (1L << (CONTENT - 389)) | (1L << (STRIP - 389)) | (1L << (WHITESPACE - 389)) | (1L << (CONFLICT - 389)) | (1L << (OVERRIDING - 389)) | (1L << (SYSTEM - 389)) | (1L << (ABORT - 389)) | (1L << (ABSOLUTE - 389)) | (1L << (ACCESS - 389)) | (1L << (AFTER - 389)) | (1L << (AGGREGATE - 389)) | (1L << (ALSO - 389)) | (1L << (ATTACH - 389)) | (1L << (ATTRIBUTE - 389)) | (1L << (BACKWARD - 389)) | (1L << (BEFORE - 389)) | (1L << (ASSERTION - 389)) | (1L << (ASSIGNMENT - 389)) | (1L << (CONTINUE - 389)) | (1L << (CONVERSION - 389)) | (1L << (COPY - 389)) | (1L << (COST - 389)) | (1L << (CSV - 389)) | (1L << (CALLED - 389)) | (1L << (CATALOG - 389)) | (1L << (CHAIN - 389)) | (1L << (CHECKPOINT - 389)) | (1L << (CLASS - 389)) | (1L << (CONFIGURATION - 389)) | (1L << (COMMENT - 389)) | (1L << (DETACH - 389)) | (1L << (DICTIONARY - 389)) | (1L << (EXPRESSION - 389)) | (1L << (INSENSITIVE - 389)) | (1L << (DISCARD - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (OFF - 453)) | (1L << (INSTEAD - 453)) | (1L << (EXPLAIN - 453)) | (1L << (INPUT - 453)) | (1L << (INLINE - 453)) | (1L << (PARALLEL - 453)) | (1L << (LEAKPROOF - 453)) | (1L << (COMMITTED - 453)) | (1L << (ENCODING - 453)) | (1L << (IMPLICIT - 453)) | (1L << (DELIMITER - 453)) | (1L << (CURSOR - 453)) | (1L << (EACH - 453)) | (1L << (EVENT - 453)) | (1L << (DEALLOCATE - 453)) | (1L << (CONNECTION - 453)) | (1L << (DECLARE - 453)) | (1L << (FAMILY - 453)) | (1L << (FORWARD - 453)) | (1L << (EXCLUSIVE - 453)) | (1L << (FUNCTIONS - 453)) | (1L << (LOCATION - 453)) | (1L << (LABEL - 453)) | (1L << (DELIMITERS - 453)) | (1L << (HANDLER - 453)) | (1L << (HEADER - 453)) | (1L << (IMMUTABLE - 453)) | (1L << (GRANTED - 453)) | (1L << (HOLD - 453)) | (1L << (MAPPING - 453)) | (1L << (OLD - 453)) | (1L << (METHOD - 453)) | (1L << (LOAD - 453)) | (1L << (LISTEN - 453)) | (1L << (MODE - 453)) | (1L << (MOVE - 453)) | (1L << (PROCEDURAL - 453)) | (1L << (PARSER - 453)) | (1L << (PROCEDURES - 453)) | (1L << (ENCRYPTED - 453)) | (1L << (PUBLICATION - 453)) | (1L << (PROGRAM - 453)) | (1L << (REFERENCING - 453)) | (1L << (PLANS - 453)) | (1L << (REINDEX - 453)) | (1L << (PRIOR - 453)) | (1L << (PASSWORD - 453)) | (1L << (RELATIVE - 453)) | (1L << (QUOTE - 453)) | (1L << (ROUTINES - 453)) | (1L << (REPLACE - 453)) | (1L << (SNAPSHOT - 453)) | (1L << (REFRESH - 453)) | (1L << (PREPARE - 453)) | (1L << (OPTIONS - 453)) | (1L << (IMPORT - 453)) | (1L << (INVOKER - 453)) | (1L << (NEW - 453)) | (1L << (PREPARED - 453)) | (1L << (SCROLL - 453)) | (1L << (SEQUENCES - 453)) | (1L << (SYSID - 453)) | (1L << (REASSIGN - 453)) | (1L << (SERVER - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (SUBSCRIPTION - 517)) | (1L << (SEARCH - 517)) | (1L << (SCHEMAS - 517)) | (1L << (RECHECK - 517)) | (1L << (POLICY - 517)) | (1L << (NOTIFY - 517)) | (1L << (LOCK - 517)) | (1L << (RELEASE - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (RETURNS - 517)) | (1L << (STATEMENT - 517)) | (1L << (STDIN - 517)) | (1L << (STDOUT - 517)) | (1L << (TABLES - 517)) | (1L << (SUPPORT - 517)) | (1L << (STABLE - 517)) | (1L << (TEMPLATE - 517)) | (1L << (UNENCRYPTED - 517)) | (1L << (VIEWS - 517)) | (1L << (UNCOMMITTED - 517)) | (1L << (TRANSFORM - 517)) | (1L << (UNLISTEN - 517)) | (1L << (TRUSTED - 517)) | (1L << (VALIDATOR - 517)) | (1L << (UNTIL - 517)) | (1L << (VACUUM - 517)) | (1L << (VOLATILE - 517)) | (1L << (STORED - 517)) | (1L << (WRITE - 517)) | (1L << (STRICT - 517)) | (1L << (TYPES - 517)) | (1L << (WRAPPER - 517)) | (1L << (WORK - 517)) | (1L << (IDENTIFIER_ - 517)))) != 0)) {
				{
				setState(1500);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
				case 1:
					{
					setState(1499);
					notExistClause();
					}
					break;
				}
				setState(1502);
				indexName();
				}
			}

			setState(1505);
			match(ON);
			setState(1506);
			onlyClause();
			setState(1507);
			tableName();
			setState(1509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1508);
				accessMethodClause();
				}
			}

			setState(1511);
			match(LP_);
			setState(1512);
			indexParams();
			setState(1513);
			match(RP_);
			setState(1515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(1514);
				include();
				}
			}

			setState(1519);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1517);
				match(WITH);
				setState(1518);
				reloptions();
				}
			}

			setState(1522);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(1521);
				tableSpace();
				}
			}

			setState(1525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1524);
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludeContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(DDLStatementParser.INCLUDE, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public IndexIncludingParamsContext indexIncludingParams() {
			return getRuleContext(IndexIncludingParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_include; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterInclude(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitInclude(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitInclude(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IncludeContext include() throws RecognitionException {
		IncludeContext _localctx = new IncludeContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_include);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1527);
			match(INCLUDE);
			setState(1528);
			match(LP_);
			setState(1529);
			indexIncludingParams();
			setState(1530);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexIncludingParamsContext extends ParserRuleContext {
		public List<IndexElemContext> indexElem() {
			return getRuleContexts(IndexElemContext.class);
		}
		public IndexElemContext indexElem(int i) {
			return getRuleContext(IndexElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public IndexIncludingParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexIncludingParams; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexIncludingParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexIncludingParams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexIncludingParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexIncludingParamsContext indexIncludingParams() throws RecognitionException {
		IndexIncludingParamsContext _localctx = new IndexIncludingParamsContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_indexIncludingParams);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1532);
			indexElem();
			setState(1537);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1533);
				match(COMMA_);
				setState(1534);
				indexElem();
				}
				}
				setState(1539);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AccessMethodClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public AccessMethodContext accessMethod() {
			return getRuleContext(AccessMethodContext.class,0);
		}
		public AccessMethodClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accessMethodClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAccessMethodClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAccessMethodClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAccessMethodClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AccessMethodClauseContext accessMethodClause() throws RecognitionException {
		AccessMethodClauseContext _localctx = new AccessMethodClauseContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_accessMethodClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1540);
			match(USING);
			setState(1541);
			accessMethod();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(DDLStatementParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public List<CreateDatabaseSpecificationContext> createDatabaseSpecification() {
			return getRuleContexts(CreateDatabaseSpecificationContext.class);
		}
		public CreateDatabaseSpecificationContext createDatabaseSpecification(int i) {
			return getRuleContext(CreateDatabaseSpecificationContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1543);
			match(CREATE);
			setState(1544);
			match(DATABASE);
			setState(1545);
			name();
			setState(1547);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1546);
				match(WITH);
				}
			}

			setState(1552);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (KEY - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (IF - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (BY - 132)) | (1L << (BEGIN - 132)) | (1L << (COMMIT - 132)) | (1L << (ROLLBACK - 132)) | (1L << (SAVEPOINT - 132)) | (1L << (DOUBLE - 132)) | (1L << (YEAR - 132)) | (1L << (MONTH - 132)) | (1L << (DAY - 132)) | (1L << (HOUR - 132)) | (1L << (MINUTE - 132)) | (1L << (SECOND - 132)) | (1L << (CURRENT - 132)) | (1L << (ENABLE - 132)) | (1L << (DISABLE - 132)) | (1L << (CALL - 132)) | (1L << (PRESERVE - 132)) | (1L << (DEFINER - 132)) | (1L << (SQL - 132)) | (1L << (CASCADED - 132)) | (1L << (LOCAL - 132)) | (1L << (CLOSE - 132)) | (1L << (NEXT - 132)) | (1L << (NAME - 132)) | (1L << (NAMES - 132)) | (1L << (TYPE - 132)) | (1L << (TEXT - 132)) | (1L << (REPEATABLE - 132)) | (1L << (VARYING - 132)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (VALUE - 197)) | (1L << (TIES - 197)) | (1L << (CUBE - 197)) | (1L << (SETS - 197)) | (1L << (OTHERS - 197)) | (1L << (AT - 197)) | (1L << (ADMIN - 197)) | (1L << (ESCAPE - 197)) | (1L << (EXCLUDE - 197)) | (1L << (PARTITION - 197)) | (1L << (UNKNOWN - 197)) | (1L << (ALWAYS - 197)) | (1L << (CASCADE - 197)) | (1L << (GENERATED - 197)) | (1L << (ISOLATION - 197)) | (1L << (LEVEL - 197)) | (1L << (NO - 197)) | (1L << (OPTION - 197)) | (1L << (PRIVILEGES - 197)) | (1L << (READ - 197)) | (1L << (ROLE - 197)) | (1L << (ROWS - 197)) | (1L << (START - 197)) | (1L << (TRANSACTION - 197)) | (1L << (ACTION - 197)) | (1L << (CACHE - 197)) | (1L << (CHARACTERISTICS - 197)) | (1L << (CLUSTER - 197)) | (1L << (COMMENTS - 197)) | (1L << (CONSTRAINTS - 197)) | (1L << (CYCLE - 197)) | (1L << (DATA - 197)) | (1L << (DATABASE - 197)) | (1L << (DEFAULTS - 197)) | (1L << (DEFERRED - 197)) | (1L << (DEPENDS - 197)) | (1L << (DOMAIN - 197)) | (1L << (EXCLUDING - 197)) | (1L << (EXECUTE - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (EXTENSION - 261)) | (1L << (EXTERNAL - 261)) | (1L << (FILTER - 261)) | (1L << (FIRST - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FORCE - 261)) | (1L << (GLOBAL - 261)) | (1L << (IDENTITY - 261)) | (1L << (IMMEDIATE - 261)) | (1L << (INCLUDING - 261)) | (1L << (INCREMENT - 261)) | (1L << (INDEXES - 261)) | (1L << (INHERIT - 261)) | (1L << (INHERITS - 261)) | (1L << (INCLUDE - 261)) | (1L << (LANGUAGE - 261)) | (1L << (LARGE - 261)) | (1L << (LAST - 261)) | (1L << (LOGGED - 261)) | (1L << (MATCH - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MINVALUE - 261)) | (1L << (NOTHING - 261)) | (1L << (NULLS - 261)) | (1L << (OBJECT - 261)) | (1L << (OIDS - 261)) | (1L << (OVER - 261)) | (1L << (OWNED - 261)) | (1L << (OWNER - 261)) | (1L << (PARTIAL - 261)) | (1L << (PRECEDING - 261)) | (1L << (RANGE - 261)) | (1L << (RENAME - 261)) | (1L << (REPLICA - 261)) | (1L << (RESET - 261)) | (1L << (RESTART - 261)) | (1L << (RESTRICT - 261)) | (1L << (ROUTINE - 261)) | (1L << (RULE - 261)) | (1L << (SECURITY - 261)) | (1L << (SEQUENCE - 261)) | (1L << (SESSION - 261)) | (1L << (SHOW - 261)) | (1L << (SIMPLE - 261)) | (1L << (STATISTICS - 261)) | (1L << (STORAGE - 261)) | (1L << (TABLESPACE - 261)) | (1L << (TEMP - 261)) | (1L << (TEMPORARY - 261)) | (1L << (UNBOUNDED - 261)) | (1L << (UNLOGGED - 261)) | (1L << (VALID - 261)) | (1L << (VALIDATE - 261)) | (1L << (WITHIN - 261)) | (1L << (WITHOUT - 261)) | (1L << (ZONE - 261)) | (1L << (OF - 261)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (UESCAPE - 325)) | (1L << (GROUPS - 325)) | (1L << (RECURSIVE - 325)) | (1L << (ENUM - 325)) | (1L << (XML - 325)) | (1L << (JSON - 325)) | (1L << (ORDINALITY - 325)) | (1L << (NFC - 325)) | (1L << (NFD - 325)) | (1L << (NFKC - 325)) | (1L << (NFKD - 325)) | (1L << (REF - 325)) | (1L << (PASSING - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (VERSION - 389)) | (1L << (YES - 389)) | (1L << (STANDALONE - 389)) | (1L << (MATERIALIZED - 389)) | (1L << (OPERATOR - 389)) | (1L << (SHARE - 389)) | (1L << (ROLLUP - 389)) | (1L << (DOCUMENT - 389)) | (1L << (NORMALIZED - 389)) | (1L << (NOWAIT - 389)) | (1L << (LOCKED - 389)) | (1L << (COLUMNS - 389)) | (1L << (CONTENT - 389)) | (1L << (STRIP - 389)) | (1L << (WHITESPACE - 389)) | (1L << (CONFLICT - 389)) | (1L << (OVERRIDING - 389)) | (1L << (SYSTEM - 389)) | (1L << (ABORT - 389)) | (1L << (ABSOLUTE - 389)) | (1L << (ACCESS - 389)) | (1L << (AFTER - 389)) | (1L << (AGGREGATE - 389)) | (1L << (ALSO - 389)) | (1L << (ATTACH - 389)) | (1L << (ATTRIBUTE - 389)) | (1L << (BACKWARD - 389)) | (1L << (BEFORE - 389)) | (1L << (ASSERTION - 389)) | (1L << (ASSIGNMENT - 389)) | (1L << (CONTINUE - 389)) | (1L << (CONVERSION - 389)) | (1L << (COPY - 389)) | (1L << (COST - 389)) | (1L << (CSV - 389)) | (1L << (CALLED - 389)) | (1L << (CATALOG - 389)) | (1L << (CHAIN - 389)) | (1L << (CHECKPOINT - 389)) | (1L << (CLASS - 389)) | (1L << (CONFIGURATION - 389)) | (1L << (COMMENT - 389)) | (1L << (DETACH - 389)) | (1L << (DICTIONARY - 389)) | (1L << (EXPRESSION - 389)) | (1L << (INSENSITIVE - 389)) | (1L << (DISCARD - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (OFF - 453)) | (1L << (INSTEAD - 453)) | (1L << (EXPLAIN - 453)) | (1L << (INPUT - 453)) | (1L << (INLINE - 453)) | (1L << (PARALLEL - 453)) | (1L << (LEAKPROOF - 453)) | (1L << (COMMITTED - 453)) | (1L << (ENCODING - 453)) | (1L << (IMPLICIT - 453)) | (1L << (DELIMITER - 453)) | (1L << (CURSOR - 453)) | (1L << (EACH - 453)) | (1L << (EVENT - 453)) | (1L << (DEALLOCATE - 453)) | (1L << (CONNECTION - 453)) | (1L << (DECLARE - 453)) | (1L << (FAMILY - 453)) | (1L << (FORWARD - 453)) | (1L << (EXCLUSIVE - 453)) | (1L << (FUNCTIONS - 453)) | (1L << (LOCATION - 453)) | (1L << (LABEL - 453)) | (1L << (DELIMITERS - 453)) | (1L << (HANDLER - 453)) | (1L << (HEADER - 453)) | (1L << (IMMUTABLE - 453)) | (1L << (GRANTED - 453)) | (1L << (HOLD - 453)) | (1L << (MAPPING - 453)) | (1L << (OLD - 453)) | (1L << (METHOD - 453)) | (1L << (LOAD - 453)) | (1L << (LISTEN - 453)) | (1L << (MODE - 453)) | (1L << (MOVE - 453)) | (1L << (PROCEDURAL - 453)) | (1L << (PARSER - 453)) | (1L << (PROCEDURES - 453)) | (1L << (ENCRYPTED - 453)) | (1L << (PUBLICATION - 453)) | (1L << (PROGRAM - 453)) | (1L << (REFERENCING - 453)) | (1L << (PLANS - 453)) | (1L << (REINDEX - 453)) | (1L << (PRIOR - 453)) | (1L << (PASSWORD - 453)) | (1L << (RELATIVE - 453)) | (1L << (QUOTE - 453)) | (1L << (ROUTINES - 453)) | (1L << (REPLACE - 453)) | (1L << (SNAPSHOT - 453)) | (1L << (REFRESH - 453)) | (1L << (PREPARE - 453)) | (1L << (OPTIONS - 453)) | (1L << (IMPORT - 453)) | (1L << (INVOKER - 453)) | (1L << (NEW - 453)) | (1L << (PREPARED - 453)) | (1L << (SCROLL - 453)) | (1L << (SEQUENCES - 453)) | (1L << (SYSID - 453)) | (1L << (REASSIGN - 453)) | (1L << (SERVER - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (SUBSCRIPTION - 517)) | (1L << (SEARCH - 517)) | (1L << (SCHEMAS - 517)) | (1L << (RECHECK - 517)) | (1L << (POLICY - 517)) | (1L << (NOTIFY - 517)) | (1L << (LOCK - 517)) | (1L << (RELEASE - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (RETURNS - 517)) | (1L << (STATEMENT - 517)) | (1L << (STDIN - 517)) | (1L << (STDOUT - 517)) | (1L << (TABLES - 517)) | (1L << (SUPPORT - 517)) | (1L << (STABLE - 517)) | (1L << (TEMPLATE - 517)) | (1L << (UNENCRYPTED - 517)) | (1L << (VIEWS - 517)) | (1L << (UNCOMMITTED - 517)) | (1L << (TRANSFORM - 517)) | (1L << (UNLISTEN - 517)) | (1L << (TRUSTED - 517)) | (1L << (VALIDATOR - 517)) | (1L << (UNTIL - 517)) | (1L << (VACUUM - 517)) | (1L << (VOLATILE - 517)) | (1L << (STORED - 517)) | (1L << (WRITE - 517)) | (1L << (STRICT - 517)) | (1L << (TYPES - 517)) | (1L << (WRAPPER - 517)) | (1L << (WORK - 517)) | (1L << (IDENTIFIER_ - 517)))) != 0)) {
				{
				{
				setState(1549);
				createDatabaseSpecification();
				}
				}
				setState(1554);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public TerminalNode RECURSIVE() { return getToken(DDLStatementParser.RECURSIVE, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public List<TerminalNode> WITH() { return getTokens(DDLStatementParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(DDLStatementParser.WITH, i);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(DDLStatementParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(DDLStatementParser.OPTION, 0); }
		public TerminalNode TEMP() { return getToken(DDLStatementParser.TEMP, 0); }
		public TerminalNode TEMPORARY() { return getToken(DDLStatementParser.TEMPORARY, 0); }
		public List<ColumnListContext> columnList() {
			return getRuleContexts(ColumnListContext.class);
		}
		public ColumnListContext columnList(int i) {
			return getRuleContext(ColumnListContext.class,i);
		}
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public TerminalNode LOCAL() { return getToken(DDLStatementParser.LOCAL, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1555);
			match(CREATE);
			setState(1558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1556);
				match(OR);
				setState(1557);
				match(REPLACE);
				}
			}

			setState(1561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(1560);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1564);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECURSIVE) {
				{
				setState(1563);
				match(RECURSIVE);
				}
			}

			setState(1566);
			match(VIEW);
			setState(1567);
			qualifiedName();
			setState(1580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(1568);
				match(LP_);
				setState(1577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (KEY - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (IF - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (BY - 132)) | (1L << (BEGIN - 132)) | (1L << (COMMIT - 132)) | (1L << (ROLLBACK - 132)) | (1L << (SAVEPOINT - 132)) | (1L << (DOUBLE - 132)) | (1L << (YEAR - 132)) | (1L << (MONTH - 132)) | (1L << (DAY - 132)) | (1L << (HOUR - 132)) | (1L << (MINUTE - 132)) | (1L << (SECOND - 132)) | (1L << (CURRENT - 132)) | (1L << (ENABLE - 132)) | (1L << (DISABLE - 132)) | (1L << (CALL - 132)) | (1L << (PRESERVE - 132)) | (1L << (DEFINER - 132)) | (1L << (SQL - 132)) | (1L << (CASCADED - 132)) | (1L << (LOCAL - 132)) | (1L << (CLOSE - 132)) | (1L << (NEXT - 132)) | (1L << (NAME - 132)) | (1L << (NAMES - 132)) | (1L << (TYPE - 132)) | (1L << (TEXT - 132)) | (1L << (REPEATABLE - 132)) | (1L << (VARYING - 132)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (VALUE - 197)) | (1L << (TIES - 197)) | (1L << (CUBE - 197)) | (1L << (SETS - 197)) | (1L << (OTHERS - 197)) | (1L << (AT - 197)) | (1L << (ADMIN - 197)) | (1L << (ESCAPE - 197)) | (1L << (EXCLUDE - 197)) | (1L << (PARTITION - 197)) | (1L << (UNKNOWN - 197)) | (1L << (ALWAYS - 197)) | (1L << (CASCADE - 197)) | (1L << (GENERATED - 197)) | (1L << (ISOLATION - 197)) | (1L << (LEVEL - 197)) | (1L << (NO - 197)) | (1L << (OPTION - 197)) | (1L << (PRIVILEGES - 197)) | (1L << (READ - 197)) | (1L << (ROLE - 197)) | (1L << (ROWS - 197)) | (1L << (START - 197)) | (1L << (TRANSACTION - 197)) | (1L << (ACTION - 197)) | (1L << (CACHE - 197)) | (1L << (CHARACTERISTICS - 197)) | (1L << (CLUSTER - 197)) | (1L << (COMMENTS - 197)) | (1L << (CONSTRAINTS - 197)) | (1L << (CYCLE - 197)) | (1L << (DATA - 197)) | (1L << (DATABASE - 197)) | (1L << (DEFAULTS - 197)) | (1L << (DEFERRED - 197)) | (1L << (DEPENDS - 197)) | (1L << (DOMAIN - 197)) | (1L << (EXCLUDING - 197)) | (1L << (EXECUTE - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (EXTENSION - 261)) | (1L << (EXTERNAL - 261)) | (1L << (FILTER - 261)) | (1L << (FIRST - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FORCE - 261)) | (1L << (GLOBAL - 261)) | (1L << (IDENTITY - 261)) | (1L << (IMMEDIATE - 261)) | (1L << (INCLUDING - 261)) | (1L << (INCREMENT - 261)) | (1L << (INDEXES - 261)) | (1L << (INHERIT - 261)) | (1L << (INHERITS - 261)) | (1L << (INCLUDE - 261)) | (1L << (LANGUAGE - 261)) | (1L << (LARGE - 261)) | (1L << (LAST - 261)) | (1L << (LOGGED - 261)) | (1L << (MATCH - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MINVALUE - 261)) | (1L << (NOTHING - 261)) | (1L << (NULLS - 261)) | (1L << (OBJECT - 261)) | (1L << (OIDS - 261)) | (1L << (OVER - 261)) | (1L << (OWNED - 261)) | (1L << (OWNER - 261)) | (1L << (PARTIAL - 261)) | (1L << (PRECEDING - 261)) | (1L << (RANGE - 261)) | (1L << (RENAME - 261)) | (1L << (REPLICA - 261)) | (1L << (RESET - 261)) | (1L << (RESTART - 261)) | (1L << (RESTRICT - 261)) | (1L << (ROUTINE - 261)) | (1L << (RULE - 261)) | (1L << (SECURITY - 261)) | (1L << (SEQUENCE - 261)) | (1L << (SESSION - 261)) | (1L << (SHOW - 261)) | (1L << (SIMPLE - 261)) | (1L << (STATISTICS - 261)) | (1L << (STORAGE - 261)) | (1L << (TABLESPACE - 261)) | (1L << (TEMP - 261)) | (1L << (TEMPORARY - 261)) | (1L << (UNBOUNDED - 261)) | (1L << (UNLOGGED - 261)) | (1L << (VALID - 261)) | (1L << (VALIDATE - 261)) | (1L << (WITHIN - 261)) | (1L << (WITHOUT - 261)) | (1L << (ZONE - 261)) | (1L << (OF - 261)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (UESCAPE - 325)) | (1L << (GROUPS - 325)) | (1L << (RECURSIVE - 325)) | (1L << (ENUM - 325)) | (1L << (XML - 325)) | (1L << (JSON - 325)) | (1L << (ORDINALITY - 325)) | (1L << (NFC - 325)) | (1L << (NFD - 325)) | (1L << (NFKC - 325)) | (1L << (NFKD - 325)) | (1L << (REF - 325)) | (1L << (PASSING - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (VERSION - 389)) | (1L << (YES - 389)) | (1L << (STANDALONE - 389)) | (1L << (MATERIALIZED - 389)) | (1L << (OPERATOR - 389)) | (1L << (SHARE - 389)) | (1L << (ROLLUP - 389)) | (1L << (DOCUMENT - 389)) | (1L << (NORMALIZED - 389)) | (1L << (NOWAIT - 389)) | (1L << (LOCKED - 389)) | (1L << (COLUMNS - 389)) | (1L << (CONTENT - 389)) | (1L << (STRIP - 389)) | (1L << (WHITESPACE - 389)) | (1L << (CONFLICT - 389)) | (1L << (OVERRIDING - 389)) | (1L << (SYSTEM - 389)) | (1L << (ABORT - 389)) | (1L << (ABSOLUTE - 389)) | (1L << (ACCESS - 389)) | (1L << (AFTER - 389)) | (1L << (AGGREGATE - 389)) | (1L << (ALSO - 389)) | (1L << (ATTACH - 389)) | (1L << (ATTRIBUTE - 389)) | (1L << (BACKWARD - 389)) | (1L << (BEFORE - 389)) | (1L << (ASSERTION - 389)) | (1L << (ASSIGNMENT - 389)) | (1L << (CONTINUE - 389)) | (1L << (CONVERSION - 389)) | (1L << (COPY - 389)) | (1L << (COST - 389)) | (1L << (CSV - 389)) | (1L << (CALLED - 389)) | (1L << (CATALOG - 389)) | (1L << (CHAIN - 389)) | (1L << (CHECKPOINT - 389)) | (1L << (CLASS - 389)) | (1L << (CONFIGURATION - 389)) | (1L << (COMMENT - 389)) | (1L << (DETACH - 389)) | (1L << (DICTIONARY - 389)) | (1L << (EXPRESSION - 389)) | (1L << (INSENSITIVE - 389)) | (1L << (DISCARD - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (OFF - 453)) | (1L << (INSTEAD - 453)) | (1L << (EXPLAIN - 453)) | (1L << (INPUT - 453)) | (1L << (INLINE - 453)) | (1L << (PARALLEL - 453)) | (1L << (LEAKPROOF - 453)) | (1L << (COMMITTED - 453)) | (1L << (ENCODING - 453)) | (1L << (IMPLICIT - 453)) | (1L << (DELIMITER - 453)) | (1L << (CURSOR - 453)) | (1L << (EACH - 453)) | (1L << (EVENT - 453)) | (1L << (DEALLOCATE - 453)) | (1L << (CONNECTION - 453)) | (1L << (DECLARE - 453)) | (1L << (FAMILY - 453)) | (1L << (FORWARD - 453)) | (1L << (EXCLUSIVE - 453)) | (1L << (FUNCTIONS - 453)) | (1L << (LOCATION - 453)) | (1L << (LABEL - 453)) | (1L << (DELIMITERS - 453)) | (1L << (HANDLER - 453)) | (1L << (HEADER - 453)) | (1L << (IMMUTABLE - 453)) | (1L << (GRANTED - 453)) | (1L << (HOLD - 453)) | (1L << (MAPPING - 453)) | (1L << (OLD - 453)) | (1L << (METHOD - 453)) | (1L << (LOAD - 453)) | (1L << (LISTEN - 453)) | (1L << (MODE - 453)) | (1L << (MOVE - 453)) | (1L << (PROCEDURAL - 453)) | (1L << (PARSER - 453)) | (1L << (PROCEDURES - 453)) | (1L << (ENCRYPTED - 453)) | (1L << (PUBLICATION - 453)) | (1L << (PROGRAM - 453)) | (1L << (REFERENCING - 453)) | (1L << (PLANS - 453)) | (1L << (REINDEX - 453)) | (1L << (PRIOR - 453)) | (1L << (PASSWORD - 453)) | (1L << (RELATIVE - 453)) | (1L << (QUOTE - 453)) | (1L << (ROUTINES - 453)) | (1L << (REPLACE - 453)) | (1L << (SNAPSHOT - 453)) | (1L << (REFRESH - 453)) | (1L << (PREPARE - 453)) | (1L << (OPTIONS - 453)) | (1L << (IMPORT - 453)) | (1L << (INVOKER - 453)) | (1L << (NEW - 453)) | (1L << (PREPARED - 453)) | (1L << (SCROLL - 453)) | (1L << (SEQUENCES - 453)) | (1L << (SYSID - 453)) | (1L << (REASSIGN - 453)) | (1L << (SERVER - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (SUBSCRIPTION - 517)) | (1L << (SEARCH - 517)) | (1L << (SCHEMAS - 517)) | (1L << (RECHECK - 517)) | (1L << (POLICY - 517)) | (1L << (NOTIFY - 517)) | (1L << (LOCK - 517)) | (1L << (RELEASE - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (RETURNS - 517)) | (1L << (STATEMENT - 517)) | (1L << (STDIN - 517)) | (1L << (STDOUT - 517)) | (1L << (TABLES - 517)) | (1L << (SUPPORT - 517)) | (1L << (STABLE - 517)) | (1L << (TEMPLATE - 517)) | (1L << (UNENCRYPTED - 517)) | (1L << (VIEWS - 517)) | (1L << (UNCOMMITTED - 517)) | (1L << (TRANSFORM - 517)) | (1L << (UNLISTEN - 517)) | (1L << (TRUSTED - 517)) | (1L << (VALIDATOR - 517)) | (1L << (UNTIL - 517)) | (1L << (VACUUM - 517)) | (1L << (VOLATILE - 517)) | (1L << (STORED - 517)) | (1L << (WRITE - 517)) | (1L << (STRICT - 517)) | (1L << (TYPES - 517)) | (1L << (WRAPPER - 517)) | (1L << (WORK - 517)) | (1L << (IDENTIFIER_ - 517)))) != 0)) {
					{
					setState(1569);
					columnList();
					setState(1574);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(1570);
						match(COMMA_);
						setState(1571);
						columnList();
						}
						}
						setState(1576);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1579);
				match(RP_);
				}
			}

			setState(1584);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1582);
				match(WITH);
				setState(1583);
				reloptions();
				}
			}

			setState(1586);
			match(AS);
			setState(1587);
			select();
			setState(1594);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1588);
				match(WITH);
				setState(1590);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==CASCADE) {
					{
					setState(1589);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==CASCADE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1592);
				match(CHECK);
				setState(1593);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnListContext extends ParserRuleContext {
		public List<ColumnElemContext> columnElem() {
			return getRuleContexts(ColumnElemContext.class);
		}
		public ColumnElemContext columnElem(int i) {
			return getRuleContext(ColumnElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public ColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnListContext columnList() throws RecognitionException {
		ColumnListContext _localctx = new ColumnListContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_columnList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1596);
			columnElem();
			setState(1601);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,42,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1597);
					match(COMMA_);
					setState(1598);
					columnElem();
					}
					} 
				}
				setState(1603);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,42,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnElemContext columnElem() throws RecognitionException {
		ColumnElemContext _localctx = new ColumnElemContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_columnElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1604);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(DDLStatementParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_dropDatabase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1606);
			match(DROP);
			setState(1607);
			match(DATABASE);
			setState(1609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				setState(1608);
				existClause();
				}
				break;
			}
			setState(1611);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseSpecificationContext extends ParserRuleContext {
		public CreatedbOptNameContext createdbOptName() {
			return getRuleContext(CreatedbOptNameContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public CreateDatabaseSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateDatabaseSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateDatabaseSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateDatabaseSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseSpecificationContext createDatabaseSpecification() throws RecognitionException {
		CreateDatabaseSpecificationContext _localctx = new CreateDatabaseSpecificationContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_createDatabaseSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1613);
			createdbOptName();
			setState(1615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(1614);
				match(EQ_);
				}
			}

			setState(1620);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				{
				setState(1617);
				signedIconst();
				}
				break;
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
				{
				setState(1618);
				booleanOrString();
				}
				break;
			case DEFAULT:
				{
				setState(1619);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedbOptNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(DDLStatementParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(DDLStatementParser.LIMIT, 0); }
		public TerminalNode ENCODING() { return getToken(DDLStatementParser.ENCODING, 0); }
		public TerminalNode LOCATION() { return getToken(DDLStatementParser.LOCATION, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public TerminalNode TEMPLATE() { return getToken(DDLStatementParser.TEMPLATE, 0); }
		public CreatedbOptNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbOptName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreatedbOptName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreatedbOptName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreatedbOptName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbOptNameContext createdbOptName() throws RecognitionException {
		CreatedbOptNameContext _localctx = new CreatedbOptNameContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_createdbOptName);
		try {
			setState(1630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1622);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1623);
				match(CONNECTION);
				setState(1624);
				match(LIMIT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1625);
				match(ENCODING);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1626);
				match(LOCATION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1627);
				match(OWNER);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1628);
				match(TABLESPACE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1629);
				match(TEMPLATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public OnlyClauseContext onlyClause() {
			return getRuleContext(OnlyClauseContext.class,0);
		}
		public TableNameClauseContext tableNameClause() {
			return getRuleContext(TableNameClauseContext.class,0);
		}
		public AlterDefinitionClauseContext alterDefinitionClause() {
			return getRuleContext(AlterDefinitionClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(DDLStatementParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(DDLStatementParser.TABLESPACE, i);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public TerminalNode OWNED() { return getToken(DDLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(DDLStatementParser.NOWAIT, 0); }
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1632);
			match(ALTER);
			setState(1633);
			match(TABLE);
			setState(1656);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case ONLY:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(1635);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					setState(1634);
					existClause();
					}
					break;
				}
				setState(1637);
				onlyClause();
				setState(1638);
				tableNameClause();
				setState(1639);
				alterDefinitionClause();
				}
				break;
			case ALL:
				{
				setState(1641);
				match(ALL);
				setState(1642);
				match(IN);
				setState(1643);
				match(TABLESPACE);
				setState(1644);
				tableNameClause();
				setState(1648);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(1645);
					match(OWNED);
					setState(1646);
					match(BY);
					setState(1647);
					roleList();
					}
				}

				setState(1650);
				match(SET);
				setState(1651);
				match(TABLESPACE);
				setState(1652);
				name();
				setState(1654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOWAIT) {
					{
					setState(1653);
					match(NOWAIT);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public AlterIndexDefinitionClauseContext alterIndexDefinitionClause() {
			return getRuleContext(AlterIndexDefinitionClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public AlterIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexContext alterIndex() throws RecognitionException {
		AlterIndexContext _localctx = new AlterIndexContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_alterIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1658);
			match(ALTER);
			setState(1659);
			match(INDEX);
			setState(1666);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(1661);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,51,_ctx) ) {
				case 1:
					{
					setState(1660);
					existClause();
					}
					break;
				}
				}
				break;
			case ALL:
				{
				setState(1663);
				match(ALL);
				setState(1664);
				match(IN);
				setState(1665);
				match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1668);
			indexName();
			setState(1669);
			alterIndexDefinitionClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropTableOptContext dropTableOpt() {
			return getRuleContext(DropTableOptContext.class,0);
		}
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1671);
			match(DROP);
			setState(1672);
			match(TABLE);
			setState(1674);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				setState(1673);
				existClause();
				}
				break;
			}
			setState(1676);
			tableNames();
			setState(1678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(1677);
				dropTableOpt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableOptContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public DropTableOptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableOpt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropTableOpt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropTableOpt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropTableOpt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableOptContext dropTableOpt() throws RecognitionException {
		DropTableOptContext _localctx = new DropTableOptContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_dropTableOpt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1680);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public ConcurrentlyClauseContext concurrentlyClause() {
			return getRuleContext(ConcurrentlyClauseContext.class,0);
		}
		public IndexNamesContext indexNames() {
			return getRuleContext(IndexNamesContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropIndexOptContext dropIndexOpt() {
			return getRuleContext(DropIndexOptContext.class,0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_dropIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1682);
			match(DROP);
			setState(1683);
			match(INDEX);
			setState(1684);
			concurrentlyClause();
			setState(1686);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
			case 1:
				{
				setState(1685);
				existClause();
				}
				break;
			}
			setState(1688);
			indexNames();
			setState(1690);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(1689);
				dropIndexOpt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexOptContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public DropIndexOptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndexOpt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropIndexOpt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropIndexOpt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropIndexOpt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexOptContext dropIndexOpt() throws RecognitionException {
		DropIndexOptContext _localctx = new DropIndexOptContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_dropIndexOpt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1692);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(DDLStatementParser.TRUNCATE, 0); }
		public OnlyClauseContext onlyClause() {
			return getRuleContext(OnlyClauseContext.class,0);
		}
		public TableNamesClauseContext tableNamesClause() {
			return getRuleContext(TableNamesClauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public RestartSeqsContext restartSeqs() {
			return getRuleContext(RestartSeqsContext.class,0);
		}
		public DropTableOptContext dropTableOpt() {
			return getRuleContext(DropTableOptContext.class,0);
		}
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1694);
			match(TRUNCATE);
			setState(1696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(1695);
				match(TABLE);
				}
			}

			setState(1698);
			onlyClause();
			setState(1699);
			tableNamesClause();
			setState(1701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTART || _la==CONTINUE) {
				{
				setState(1700);
				restartSeqs();
				}
			}

			setState(1704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(1703);
				dropTableOpt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RestartSeqsContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(DDLStatementParser.CONTINUE, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public TerminalNode RESTART() { return getToken(DDLStatementParser.RESTART, 0); }
		public RestartSeqsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restartSeqs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRestartSeqs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRestartSeqs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRestartSeqs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RestartSeqsContext restartSeqs() throws RecognitionException {
		RestartSeqsContext _localctx = new RestartSeqsContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_restartSeqs);
		try {
			setState(1710);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTINUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1706);
				match(CONTINUE);
				setState(1707);
				match(IDENTITY);
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 2);
				{
				setState(1708);
				match(RESTART);
				setState(1709);
				match(IDENTITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableSpecificationContext extends ParserRuleContext {
		public TerminalNode UNLOGGED() { return getToken(DDLStatementParser.UNLOGGED, 0); }
		public TerminalNode TEMPORARY() { return getToken(DDLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(DDLStatementParser.TEMP, 0); }
		public TerminalNode GLOBAL() { return getToken(DDLStatementParser.GLOBAL, 0); }
		public TerminalNode LOCAL() { return getToken(DDLStatementParser.LOCAL, 0); }
		public CreateTableSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateTableSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateTableSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateTableSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableSpecificationContext createTableSpecification() throws RecognitionException {
		CreateTableSpecificationContext _localctx = new CreateTableSpecificationContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_createTableSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1717);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL:
			case GLOBAL:
			case TEMP:
			case TEMPORARY:
				{
				setState(1713);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==GLOBAL) {
					{
					setState(1712);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==GLOBAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1715);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNLOGGED:
				{
				setState(1716);
				match(UNLOGGED);
				}
				break;
			case TABLE:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public CreateDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateDefinitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateDefinitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionClauseContext createDefinitionClause() throws RecognitionException {
		CreateDefinitionClauseContext _localctx = new CreateDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_createDefinitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1719);
			match(LP_);
			setState(1728);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (PRIMARY - 64)) | (1L << (UNIQUE - 64)) | (1L << (FOREIGN - 64)) | (1L << (KEY - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (IF - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (LIKE - 129)) | (1L << (BY - 129)) | (1L << (BEGIN - 129)) | (1L << (COMMIT - 129)) | (1L << (ROLLBACK - 129)) | (1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (VARYING - 194)) | (1L << (VALUE - 194)) | (1L << (TIES - 194)) | (1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (CHECK - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (EXCLUDING - 258)) | (1L << (EXECUTE - 258)) | (1L << (EXTENSION - 258)) | (1L << (EXTERNAL - 258)) | (1L << (FILTER - 258)) | (1L << (FIRST - 258)) | (1L << (FOLLOWING - 258)) | (1L << (FORCE - 258)) | (1L << (GLOBAL - 258)) | (1L << (IDENTITY - 258)) | (1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (WITHOUT - 322)) | (1L << (ZONE - 322)) | (1L << (OF - 322)) | (1L << (UESCAPE - 322)) | (1L << (GROUPS - 322)) | (1L << (RECURSIVE - 322)) | (1L << (ENUM - 322)) | (1L << (XML - 322)) | (1L << (JSON - 322)) | (1L << (ORDINALITY - 322)) | (1L << (NFC - 322)) | (1L << (NFD - 322)) | (1L << (NFKC - 322)) | (1L << (NFKD - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (REF - 387)) | (1L << (PASSING - 387)) | (1L << (VERSION - 387)) | (1L << (YES - 387)) | (1L << (STANDALONE - 387)) | (1L << (MATERIALIZED - 387)) | (1L << (OPERATOR - 387)) | (1L << (SHARE - 387)) | (1L << (ROLLUP - 387)) | (1L << (DOCUMENT - 387)) | (1L << (NORMALIZED - 387)) | (1L << (NOWAIT - 387)) | (1L << (LOCKED - 387)) | (1L << (COLUMNS - 387)) | (1L << (CONTENT - 387)) | (1L << (STRIP - 387)) | (1L << (WHITESPACE - 387)) | (1L << (CONFLICT - 387)) | (1L << (OVERRIDING - 387)) | (1L << (SYSTEM - 387)) | (1L << (ABORT - 387)) | (1L << (ABSOLUTE - 387)) | (1L << (ACCESS - 387)) | (1L << (AFTER - 387)) | (1L << (AGGREGATE - 387)) | (1L << (ALSO - 387)) | (1L << (ATTACH - 387)) | (1L << (ATTRIBUTE - 387)) | (1L << (BACKWARD - 387)) | (1L << (BEFORE - 387)) | (1L << (ASSERTION - 387)) | (1L << (ASSIGNMENT - 387)) | (1L << (CONTINUE - 387)) | (1L << (CONVERSION - 387)) | (1L << (COPY - 387)) | (1L << (COST - 387)) | (1L << (CSV - 387)) | (1L << (CALLED - 387)) | (1L << (CATALOG - 387)) | (1L << (CHAIN - 387)) | (1L << (CHECKPOINT - 387)) | (1L << (CLASS - 387)) | (1L << (CONFIGURATION - 387)) | (1L << (COMMENT - 387)) | (1L << (DETACH - 387)) | (1L << (DICTIONARY - 387)) | (1L << (EXPRESSION - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (INSENSITIVE - 451)) | (1L << (DISCARD - 451)) | (1L << (OFF - 451)) | (1L << (INSTEAD - 451)) | (1L << (EXPLAIN - 451)) | (1L << (INPUT - 451)) | (1L << (INLINE - 451)) | (1L << (PARALLEL - 451)) | (1L << (LEAKPROOF - 451)) | (1L << (COMMITTED - 451)) | (1L << (ENCODING - 451)) | (1L << (IMPLICIT - 451)) | (1L << (DELIMITER - 451)) | (1L << (CURSOR - 451)) | (1L << (EACH - 451)) | (1L << (EVENT - 451)) | (1L << (DEALLOCATE - 451)) | (1L << (CONNECTION - 451)) | (1L << (DECLARE - 451)) | (1L << (FAMILY - 451)) | (1L << (FORWARD - 451)) | (1L << (EXCLUSIVE - 451)) | (1L << (FUNCTIONS - 451)) | (1L << (LOCATION - 451)) | (1L << (LABEL - 451)) | (1L << (DELIMITERS - 451)) | (1L << (HANDLER - 451)) | (1L << (HEADER - 451)) | (1L << (IMMUTABLE - 451)) | (1L << (GRANTED - 451)) | (1L << (HOLD - 451)) | (1L << (MAPPING - 451)) | (1L << (OLD - 451)) | (1L << (METHOD - 451)) | (1L << (LOAD - 451)) | (1L << (LISTEN - 451)) | (1L << (MODE - 451)) | (1L << (MOVE - 451)) | (1L << (PROCEDURAL - 451)) | (1L << (PARSER - 451)) | (1L << (PROCEDURES - 451)) | (1L << (ENCRYPTED - 451)) | (1L << (PUBLICATION - 451)) | (1L << (PROGRAM - 451)) | (1L << (REFERENCING - 451)) | (1L << (PLANS - 451)) | (1L << (REINDEX - 451)) | (1L << (PRIOR - 451)) | (1L << (PASSWORD - 451)) | (1L << (RELATIVE - 451)) | (1L << (QUOTE - 451)) | (1L << (ROUTINES - 451)) | (1L << (REPLACE - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (REFRESH - 451)) | (1L << (PREPARE - 451)) | (1L << (OPTIONS - 451)) | (1L << (IMPORT - 451)) | (1L << (INVOKER - 451)) | (1L << (NEW - 451)) | (1L << (PREPARED - 451)) | (1L << (SCROLL - 451)) | (1L << (SEQUENCES - 451)) | (1L << (SYSID - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (REASSIGN - 515)) | (1L << (SERVER - 515)) | (1L << (SUBSCRIPTION - 515)) | (1L << (SEARCH - 515)) | (1L << (SCHEMAS - 515)) | (1L << (RECHECK - 515)) | (1L << (POLICY - 515)) | (1L << (NOTIFY - 515)) | (1L << (LOCK - 515)) | (1L << (RELEASE - 515)) | (1L << (SERIALIZABLE - 515)) | (1L << (RETURNS - 515)) | (1L << (STATEMENT - 515)) | (1L << (STDIN - 515)) | (1L << (STDOUT - 515)) | (1L << (TABLES - 515)) | (1L << (SUPPORT - 515)) | (1L << (STABLE - 515)) | (1L << (TEMPLATE - 515)) | (1L << (UNENCRYPTED - 515)) | (1L << (VIEWS - 515)) | (1L << (UNCOMMITTED - 515)) | (1L << (TRANSFORM - 515)) | (1L << (UNLISTEN - 515)) | (1L << (TRUSTED - 515)) | (1L << (VALIDATOR - 515)) | (1L << (UNTIL - 515)) | (1L << (VACUUM - 515)) | (1L << (VOLATILE - 515)) | (1L << (STORED - 515)) | (1L << (WRITE - 515)) | (1L << (STRICT - 515)) | (1L << (TYPES - 515)) | (1L << (WRAPPER - 515)) | (1L << (WORK - 515)) | (1L << (IDENTIFIER_ - 515)))) != 0)) {
				{
				setState(1720);
				createDefinition();
				setState(1725);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1721);
					match(COMMA_);
					setState(1722);
					createDefinition();
					}
					}
					setState(1727);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1730);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(DDLStatementParser.LIKE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<LikeOptionContext> likeOption() {
			return getRuleContexts(LikeOptionContext.class);
		}
		public LikeOptionContext likeOption(int i) {
			return getRuleContext(LikeOptionContext.class,i);
		}
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_createDefinition);
		int _la;
		try {
			setState(1742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1732);
				columnDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1733);
				tableConstraint();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1734);
				match(LIKE);
				setState(1735);
				tableName();
				setState(1739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXCLUDING || _la==INCLUDING) {
					{
					{
					setState(1736);
					likeOption();
					}
					}
					setState(1741);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_columnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1744);
			columnName();
			setState(1745);
			dataType();
			setState(1747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(1746);
				collateClause();
				}
			}

			setState(1752);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (CONSTRAINT - 78)) | (1L << (PRIMARY - 78)) | (1L << (UNIQUE - 78)) | (1L << (KEY - 78)) | (1L << (NOT - 78)) | (1L << (NULL - 78)))) != 0) || _la==DEFAULT || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (CHECK - 227)) | (1L << (GENERATED - 227)) | (1L << (REFERENCES - 227)))) != 0)) {
				{
				{
				setState(1749);
				columnConstraint();
				}
				}
				setState(1754);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintOptionContext columnConstraintOption() {
			return getRuleContext(ColumnConstraintOptionContext.class,0);
		}
		public ConstraintOptionalParamContext constraintOptionalParam() {
			return getRuleContext(ConstraintOptionalParamContext.class,0);
		}
		public ConstraintClauseContext constraintClause() {
			return getRuleContext(ConstraintClauseContext.class,0);
		}
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_columnConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1756);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1755);
				constraintClause();
				}
			}

			setState(1758);
			columnConstraintOption();
			setState(1759);
			constraintOptionalParam();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintClauseContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public ConstraintClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConstraintClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConstraintClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConstraintClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintClauseContext constraintClause() throws RecognitionException {
		ConstraintClauseContext _localctx = new ConstraintClauseContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_constraintClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1761);
			match(CONSTRAINT);
			setState(1762);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintOptionContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public CheckOptionContext checkOption() {
			return getRuleContext(CheckOptionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public DefaultExprContext defaultExpr() {
			return getRuleContext(DefaultExprContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(DDLStatementParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(DDLStatementParser.ALWAYS, 0); }
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode STORED() { return getToken(DDLStatementParser.STORED, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public SequenceOptionsContext sequenceOptions() {
			return getRuleContext(SequenceOptionsContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(DDLStatementParser.UNIQUE, 0); }
		public IndexParametersContext indexParameters() {
			return getRuleContext(IndexParametersContext.class,0);
		}
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(DDLStatementParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(DDLStatementParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(DDLStatementParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(DDLStatementParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(DDLStatementParser.SIMPLE, 0); }
		public List<TerminalNode> ON() { return getTokens(DDLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(DDLStatementParser.ON, i);
		}
		public List<ActionContext> action() {
			return getRuleContexts(ActionContext.class);
		}
		public ActionContext action(int i) {
			return getRuleContext(ActionContext.class,i);
		}
		public List<TerminalNode> DELETE() { return getTokens(DDLStatementParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(DDLStatementParser.DELETE, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(DDLStatementParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(DDLStatementParser.UPDATE, i);
		}
		public ColumnConstraintOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraintOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnConstraintOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnConstraintOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnConstraintOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintOptionContext columnConstraintOption() throws RecognitionException {
		ColumnConstraintOptionContext _localctx = new ColumnConstraintOptionContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_columnConstraintOption);
		int _la;
		try {
			setState(1819);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1765);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1764);
					match(NOT);
					}
				}

				setState(1767);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1768);
				checkOption();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1769);
				match(DEFAULT);
				setState(1770);
				defaultExpr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1771);
				match(GENERATED);
				setState(1772);
				match(ALWAYS);
				setState(1773);
				match(AS);
				setState(1774);
				match(LP_);
				setState(1775);
				aExpr(0);
				setState(1776);
				match(RP_);
				setState(1777);
				match(STORED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1779);
				match(GENERATED);
				setState(1783);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(1780);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					setState(1781);
					match(BY);
					setState(1782);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1785);
				match(AS);
				setState(1786);
				match(IDENTITY);
				setState(1791);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(1787);
					match(LP_);
					setState(1788);
					sequenceOptions();
					setState(1789);
					match(RP_);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1793);
				match(UNIQUE);
				setState(1794);
				indexParameters();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1795);
				primaryKey();
				setState(1796);
				indexParameters();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1798);
				match(REFERENCES);
				setState(1799);
				tableName();
				setState(1801);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(1800);
					columnNames();
					}
				}

				setState(1809);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
				case 1:
					{
					setState(1803);
					match(MATCH);
					setState(1804);
					match(FULL);
					}
					break;
				case 2:
					{
					setState(1805);
					match(MATCH);
					setState(1806);
					match(PARTIAL);
					}
					break;
				case 3:
					{
					setState(1807);
					match(MATCH);
					setState(1808);
					match(SIMPLE);
					}
					break;
				}
				setState(1816);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ON) {
					{
					{
					setState(1811);
					match(ON);
					setState(1812);
					_la = _input.LA(1);
					if ( !(_la==UPDATE || _la==DELETE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1813);
					action();
					}
					}
					setState(1818);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckOptionContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(DDLStatementParser.CHECK, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(DDLStatementParser.INHERIT, 0); }
		public CheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCheckOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCheckOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCheckOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckOptionContext checkOption() throws RecognitionException {
		CheckOptionContext _localctx = new CheckOptionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_checkOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1821);
			match(CHECK);
			setState(1822);
			aExpr(0);
			setState(1825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(1823);
				match(NO);
				setState(1824);
				match(INHERIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultExprContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DDLStatementParser.CURRENT_TIMESTAMP, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public DefaultExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefaultExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefaultExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefaultExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultExprContext defaultExpr() throws RecognitionException {
		DefaultExprContext _localctx = new DefaultExprContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_defaultExpr);
		try {
			setState(1829);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1827);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1828);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceOptionsContext extends ParserRuleContext {
		public List<SequenceOptionContext> sequenceOption() {
			return getRuleContexts(SequenceOptionContext.class);
		}
		public SequenceOptionContext sequenceOption(int i) {
			return getRuleContext(SequenceOptionContext.class,i);
		}
		public SequenceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSequenceOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSequenceOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSequenceOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceOptionsContext sequenceOptions() throws RecognitionException {
		SequenceOptionsContext _localctx = new SequenceOptionsContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_sequenceOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1832); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1831);
				sequenceOption();
				}
				}
				setState(1834); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 231)) & ~0x3f) == 0 && ((1L << (_la - 231)) & ((1L << (NO - 231)) | (1L << (START - 231)) | (1L << (CACHE - 231)) | (1L << (CYCLE - 231)) | (1L << (INCREMENT - 231)) | (1L << (MAXVALUE - 231)) | (1L << (MINVALUE - 231)) | (1L << (OWNED - 231)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceOptionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(DDLStatementParser.START, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode INCREMENT() { return getToken(DDLStatementParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public TerminalNode MAXVALUE() { return getToken(DDLStatementParser.MAXVALUE, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode MINVALUE() { return getToken(DDLStatementParser.MINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(DDLStatementParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(DDLStatementParser.CACHE, 0); }
		public TerminalNode OWNED() { return getToken(DDLStatementParser.OWNED, 0); }
		public SequenceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSequenceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSequenceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSequenceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceOptionContext sequenceOption() throws RecognitionException {
		SequenceOptionContext _localctx = new SequenceOptionContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_sequenceOption);
		int _la;
		try {
			setState(1861);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1836);
				match(START);
				setState(1838);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1837);
					match(WITH);
					}
				}

				setState(1840);
				match(NUMBER_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1841);
				match(INCREMENT);
				setState(1843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(1842);
					match(BY);
					}
				}

				setState(1845);
				match(NUMBER_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1846);
				match(MAXVALUE);
				setState(1847);
				match(NUMBER_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1848);
				match(NO);
				setState(1849);
				match(MAXVALUE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1850);
				match(MINVALUE);
				setState(1851);
				match(NUMBER_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1852);
				match(NO);
				setState(1853);
				match(MINVALUE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1854);
				match(CYCLE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1855);
				match(NO);
				setState(1856);
				match(CYCLE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1857);
				match(CACHE);
				setState(1858);
				match(NUMBER_);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1859);
				match(OWNED);
				setState(1860);
				match(BY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexParametersContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode INCLUDE() { return getToken(DDLStatementParser.INCLUDE, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public IndexParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexParameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexParameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexParametersContext indexParameters() throws RecognitionException {
		IndexParametersContext _localctx = new IndexParametersContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_indexParameters);
		int _la;
		try {
			setState(1873);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case RP_:
			case COMMA_:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case KEY:
			case USING:
			case WHERE:
			case NOT:
			case NULL:
			case DEFAULT:
			case CHECK:
			case GENERATED:
			case REFERENCES:
			case DEFERRABLE:
			case INITIALLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(1867);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1863);
					match(USING);
					setState(1864);
					match(INDEX);
					setState(1865);
					match(TABLESPACE);
					setState(1866);
					ignoredIdentifier();
					}
				}

				}
				break;
			case INCLUDE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1869);
				match(INCLUDE);
				setState(1870);
				columnNames();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1871);
				match(WITH);
				setState(1872);
				definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ActionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(DDLStatementParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ActionContext action() throws RecognitionException {
		ActionContext _localctx = new ActionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_action);
		int _la;
		try {
			setState(1881);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(1875);
				match(NO);
				setState(1876);
				match(ACTION);
				}
				break;
			case RESTRICT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1877);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1878);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(1879);
				match(SET);
				setState(1880);
				_la = _input.LA(1);
				if ( !(_la==NULL || _la==DEFAULT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintOptionalParamContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(DDLStatementParser.DEFERRABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(DDLStatementParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(DDLStatementParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(DDLStatementParser.IMMEDIATE, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public ConstraintOptionalParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintOptionalParam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConstraintOptionalParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConstraintOptionalParam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConstraintOptionalParam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintOptionalParamContext constraintOptionalParam() throws RecognitionException {
		ConstraintOptionalParamContext _localctx = new ConstraintOptionalParamContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_constraintOptionalParam);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1887);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				setState(1884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1883);
					match(NOT);
					}
				}

				setState(1886);
				match(DEFERRABLE);
				}
				break;
			}
			setState(1891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIALLY) {
				{
				setState(1889);
				match(INITIALLY);
				setState(1890);
				_la = _input.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikeOptionContext extends ParserRuleContext {
		public TerminalNode INCLUDING() { return getToken(DDLStatementParser.INCLUDING, 0); }
		public TerminalNode EXCLUDING() { return getToken(DDLStatementParser.EXCLUDING, 0); }
		public TerminalNode COMMENTS() { return getToken(DDLStatementParser.COMMENTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(DDLStatementParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(DDLStatementParser.DEFAULTS, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public TerminalNode INDEXES() { return getToken(DDLStatementParser.INDEXES, 0); }
		public TerminalNode STATISTICS() { return getToken(DDLStatementParser.STATISTICS, 0); }
		public TerminalNode STORAGE() { return getToken(DDLStatementParser.STORAGE, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public LikeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterLikeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitLikeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitLikeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikeOptionContext likeOption() throws RecognitionException {
		LikeOptionContext _localctx = new LikeOptionContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_likeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1893);
			_la = _input.LA(1);
			if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1894);
			_la = _input.LA(1);
			if ( !(_la==ALL || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (COMMENTS - 246)) | (1L << (CONSTRAINTS - 246)) | (1L << (DEFAULTS - 246)) | (1L << (IDENTITY - 246)) | (1L << (INDEXES - 246)))) != 0) || _la==STATISTICS || _la==STORAGE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintOptionContext tableConstraintOption() {
			return getRuleContext(TableConstraintOptionContext.class,0);
		}
		public ConstraintOptionalParamContext constraintOptionalParam() {
			return getRuleContext(ConstraintOptionalParamContext.class,0);
		}
		public ConstraintClauseContext constraintClause() {
			return getRuleContext(ConstraintClauseContext.class,0);
		}
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_tableConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1897);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1896);
				constraintClause();
				}
			}

			setState(1899);
			tableConstraintOption();
			setState(1900);
			constraintOptionalParam();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintOptionContext extends ParserRuleContext {
		public CheckOptionContext checkOption() {
			return getRuleContext(CheckOptionContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(DDLStatementParser.UNIQUE, 0); }
		public List<ColumnNamesContext> columnNames() {
			return getRuleContexts(ColumnNamesContext.class);
		}
		public ColumnNamesContext columnNames(int i) {
			return getRuleContext(ColumnNamesContext.class,i);
		}
		public IndexParametersContext indexParameters() {
			return getRuleContext(IndexParametersContext.class,0);
		}
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public TerminalNode EXCLUDE() { return getToken(DDLStatementParser.EXCLUDE, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExclusionConstraintListContext exclusionConstraintList() {
			return getRuleContext(ExclusionConstraintListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public ExclusionWhereClauseContext exclusionWhereClause() {
			return getRuleContext(ExclusionWhereClauseContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(DDLStatementParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(DDLStatementParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(DDLStatementParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(DDLStatementParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(DDLStatementParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(DDLStatementParser.SIMPLE, 0); }
		public List<TerminalNode> ON() { return getTokens(DDLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(DDLStatementParser.ON, i);
		}
		public List<ActionContext> action() {
			return getRuleContexts(ActionContext.class);
		}
		public ActionContext action(int i) {
			return getRuleContext(ActionContext.class,i);
		}
		public List<TerminalNode> DELETE() { return getTokens(DDLStatementParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(DDLStatementParser.DELETE, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(DDLStatementParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(DDLStatementParser.UPDATE, i);
		}
		public TableConstraintOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraintOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableConstraintOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableConstraintOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableConstraintOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintOptionContext tableConstraintOption() throws RecognitionException {
		TableConstraintOptionContext _localctx = new TableConstraintOptionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_tableConstraintOption);
		int _la;
		try {
			setState(1947);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(1902);
				checkOption();
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1903);
				match(UNIQUE);
				setState(1904);
				columnNames();
				setState(1905);
				indexParameters();
				}
				break;
			case PRIMARY:
			case KEY:
				enterOuterAlt(_localctx, 3);
				{
				setState(1907);
				primaryKey();
				setState(1908);
				columnNames();
				setState(1909);
				indexParameters();
				}
				break;
			case EXCLUDE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1911);
				match(EXCLUDE);
				setState(1914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1912);
					match(USING);
					setState(1913);
					ignoredIdentifier();
					}
				}

				setState(1916);
				match(LP_);
				setState(1917);
				exclusionConstraintList();
				setState(1918);
				match(RP_);
				setState(1919);
				indexParameters();
				setState(1921);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(1920);
					exclusionWhereClause();
					}
				}

				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 5);
				{
				setState(1923);
				match(FOREIGN);
				setState(1924);
				match(KEY);
				setState(1925);
				columnNames();
				setState(1926);
				match(REFERENCES);
				setState(1927);
				tableName();
				setState(1929);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(1928);
					columnNames();
					}
				}

				setState(1937);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
				case 1:
					{
					setState(1931);
					match(MATCH);
					setState(1932);
					match(FULL);
					}
					break;
				case 2:
					{
					setState(1933);
					match(MATCH);
					setState(1934);
					match(PARTIAL);
					}
					break;
				case 3:
					{
					setState(1935);
					match(MATCH);
					setState(1936);
					match(SIMPLE);
					}
					break;
				}
				setState(1944);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ON) {
					{
					{
					setState(1939);
					match(ON);
					setState(1940);
					_la = _input.LA(1);
					if ( !(_la==UPDATE || _la==DELETE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1941);
					action();
					}
					}
					setState(1946);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionWhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(DDLStatementParser.WHERE, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ExclusionWhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionWhereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExclusionWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExclusionWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExclusionWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionWhereClauseContext exclusionWhereClause() throws RecognitionException {
		ExclusionWhereClauseContext _localctx = new ExclusionWhereClauseContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_exclusionWhereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1949);
			match(WHERE);
			setState(1950);
			match(LP_);
			setState(1951);
			aExpr(0);
			setState(1952);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionConstraintListContext extends ParserRuleContext {
		public List<ExclusionConstraintElemContext> exclusionConstraintElem() {
			return getRuleContexts(ExclusionConstraintElemContext.class);
		}
		public ExclusionConstraintElemContext exclusionConstraintElem(int i) {
			return getRuleContext(ExclusionConstraintElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public ExclusionConstraintListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionConstraintList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExclusionConstraintList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExclusionConstraintList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExclusionConstraintList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionConstraintListContext exclusionConstraintList() throws RecognitionException {
		ExclusionConstraintListContext _localctx = new ExclusionConstraintListContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_exclusionConstraintList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1954);
			exclusionConstraintElem();
			setState(1959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1955);
				match(COMMA_);
				setState(1956);
				exclusionConstraintElem();
				}
				}
				setState(1961);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionConstraintElemContext extends ParserRuleContext {
		public IndexElemContext indexElem() {
			return getRuleContext(IndexElemContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ExclusionConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionConstraintElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExclusionConstraintElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExclusionConstraintElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExclusionConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionConstraintElemContext exclusionConstraintElem() throws RecognitionException {
		ExclusionConstraintElemContext _localctx = new ExclusionConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_exclusionConstraintElem);
		try {
			setState(1973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1962);
				indexElem();
				setState(1963);
				match(WITH);
				setState(1964);
				anyOperator();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1966);
				indexElem();
				setState(1967);
				match(WITH);
				setState(1968);
				match(OPERATOR);
				setState(1969);
				match(LP_);
				setState(1970);
				anyOperator();
				setState(1971);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InheritClauseContext extends ParserRuleContext {
		public TerminalNode INHERITS() { return getToken(DDLStatementParser.INHERITS, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public InheritClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inheritClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterInheritClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitInheritClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitInheritClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InheritClauseContext inheritClause() throws RecognitionException {
		InheritClauseContext _localctx = new InheritClauseContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_inheritClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INHERITS) {
				{
				setState(1975);
				match(INHERITS);
				setState(1976);
				tableNames();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionSpecContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DDLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public PartStrategyContext partStrategy() {
			return getRuleContext(PartStrategyContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public PartParamsContext partParams() {
			return getRuleContext(PartParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public PartitionSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPartitionSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPartitionSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPartitionSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionSpecContext partitionSpec() throws RecognitionException {
		PartitionSpecContext _localctx = new PartitionSpecContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_partitionSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1979);
			match(PARTITION);
			setState(1980);
			match(BY);
			setState(1981);
			partStrategy();
			setState(1982);
			match(LP_);
			setState(1983);
			partParams();
			setState(1984);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartParamsContext extends ParserRuleContext {
		public List<PartElemContext> partElem() {
			return getRuleContexts(PartElemContext.class);
		}
		public PartElemContext partElem(int i) {
			return getRuleContext(PartElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public PartParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partParams; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPartParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPartParams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPartParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartParamsContext partParams() throws RecognitionException {
		PartParamsContext _localctx = new PartParamsContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_partParams);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1986);
			partElem();
			setState(1991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1987);
				match(COMMA_);
				setState(1988);
				partElem();
				}
				}
				setState(1993);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(DDLStatementParser.COLLATE, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public FuncExprWindowlessContext funcExprWindowless() {
			return getRuleContext(FuncExprWindowlessContext.class,0);
		}
		public PartElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPartElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPartElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPartElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartElemContext partElem() throws RecognitionException {
		PartElemContext _localctx = new PartElemContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_partElem);
		int _la;
		try {
			setState(2020);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1994);
				colId();
				setState(1997);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(1995);
					match(COLLATE);
					setState(1996);
					anyName();
					}
				}

				setState(2000);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (KEY - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (IF - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (BY - 132)) | (1L << (BEGIN - 132)) | (1L << (COMMIT - 132)) | (1L << (ROLLBACK - 132)) | (1L << (SAVEPOINT - 132)) | (1L << (DOUBLE - 132)) | (1L << (YEAR - 132)) | (1L << (MONTH - 132)) | (1L << (DAY - 132)) | (1L << (HOUR - 132)) | (1L << (MINUTE - 132)) | (1L << (SECOND - 132)) | (1L << (CURRENT - 132)) | (1L << (ENABLE - 132)) | (1L << (DISABLE - 132)) | (1L << (CALL - 132)) | (1L << (PRESERVE - 132)) | (1L << (DEFINER - 132)) | (1L << (SQL - 132)) | (1L << (CASCADED - 132)) | (1L << (LOCAL - 132)) | (1L << (CLOSE - 132)) | (1L << (NEXT - 132)) | (1L << (NAME - 132)) | (1L << (NAMES - 132)) | (1L << (TYPE - 132)) | (1L << (TEXT - 132)) | (1L << (REPEATABLE - 132)) | (1L << (VARYING - 132)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (VALUE - 197)) | (1L << (TIES - 197)) | (1L << (CUBE - 197)) | (1L << (SETS - 197)) | (1L << (OTHERS - 197)) | (1L << (AT - 197)) | (1L << (ADMIN - 197)) | (1L << (ESCAPE - 197)) | (1L << (EXCLUDE - 197)) | (1L << (PARTITION - 197)) | (1L << (UNKNOWN - 197)) | (1L << (ALWAYS - 197)) | (1L << (CASCADE - 197)) | (1L << (GENERATED - 197)) | (1L << (ISOLATION - 197)) | (1L << (LEVEL - 197)) | (1L << (NO - 197)) | (1L << (OPTION - 197)) | (1L << (PRIVILEGES - 197)) | (1L << (READ - 197)) | (1L << (ROLE - 197)) | (1L << (ROWS - 197)) | (1L << (START - 197)) | (1L << (TRANSACTION - 197)) | (1L << (ACTION - 197)) | (1L << (CACHE - 197)) | (1L << (CHARACTERISTICS - 197)) | (1L << (CLUSTER - 197)) | (1L << (COMMENTS - 197)) | (1L << (CONSTRAINTS - 197)) | (1L << (CYCLE - 197)) | (1L << (DATA - 197)) | (1L << (DATABASE - 197)) | (1L << (DEFAULTS - 197)) | (1L << (DEFERRED - 197)) | (1L << (DEPENDS - 197)) | (1L << (DOMAIN - 197)) | (1L << (EXCLUDING - 197)) | (1L << (EXECUTE - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (EXTENSION - 261)) | (1L << (EXTERNAL - 261)) | (1L << (FILTER - 261)) | (1L << (FIRST - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FORCE - 261)) | (1L << (GLOBAL - 261)) | (1L << (IDENTITY - 261)) | (1L << (IMMEDIATE - 261)) | (1L << (INCLUDING - 261)) | (1L << (INCREMENT - 261)) | (1L << (INDEXES - 261)) | (1L << (INHERIT - 261)) | (1L << (INHERITS - 261)) | (1L << (INCLUDE - 261)) | (1L << (LANGUAGE - 261)) | (1L << (LARGE - 261)) | (1L << (LAST - 261)) | (1L << (LOGGED - 261)) | (1L << (MATCH - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MINVALUE - 261)) | (1L << (NOTHING - 261)) | (1L << (NULLS - 261)) | (1L << (OBJECT - 261)) | (1L << (OIDS - 261)) | (1L << (OVER - 261)) | (1L << (OWNED - 261)) | (1L << (OWNER - 261)) | (1L << (PARTIAL - 261)) | (1L << (PRECEDING - 261)) | (1L << (RANGE - 261)) | (1L << (RENAME - 261)) | (1L << (REPLICA - 261)) | (1L << (RESET - 261)) | (1L << (RESTART - 261)) | (1L << (RESTRICT - 261)) | (1L << (ROUTINE - 261)) | (1L << (RULE - 261)) | (1L << (SECURITY - 261)) | (1L << (SEQUENCE - 261)) | (1L << (SESSION - 261)) | (1L << (SHOW - 261)) | (1L << (SIMPLE - 261)) | (1L << (STATISTICS - 261)) | (1L << (STORAGE - 261)) | (1L << (TABLESPACE - 261)) | (1L << (TEMP - 261)) | (1L << (TEMPORARY - 261)) | (1L << (UNBOUNDED - 261)) | (1L << (UNLOGGED - 261)) | (1L << (VALID - 261)) | (1L << (VALIDATE - 261)) | (1L << (WITHIN - 261)) | (1L << (WITHOUT - 261)) | (1L << (ZONE - 261)) | (1L << (OF - 261)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (UESCAPE - 325)) | (1L << (GROUPS - 325)) | (1L << (RECURSIVE - 325)) | (1L << (ENUM - 325)) | (1L << (XML - 325)) | (1L << (JSON - 325)) | (1L << (ORDINALITY - 325)) | (1L << (NFC - 325)) | (1L << (NFD - 325)) | (1L << (NFKC - 325)) | (1L << (NFKD - 325)) | (1L << (REF - 325)) | (1L << (PASSING - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (VERSION - 389)) | (1L << (YES - 389)) | (1L << (STANDALONE - 389)) | (1L << (MATERIALIZED - 389)) | (1L << (OPERATOR - 389)) | (1L << (SHARE - 389)) | (1L << (ROLLUP - 389)) | (1L << (DOCUMENT - 389)) | (1L << (NORMALIZED - 389)) | (1L << (NOWAIT - 389)) | (1L << (LOCKED - 389)) | (1L << (COLUMNS - 389)) | (1L << (CONTENT - 389)) | (1L << (STRIP - 389)) | (1L << (WHITESPACE - 389)) | (1L << (CONFLICT - 389)) | (1L << (OVERRIDING - 389)) | (1L << (SYSTEM - 389)) | (1L << (ABORT - 389)) | (1L << (ABSOLUTE - 389)) | (1L << (ACCESS - 389)) | (1L << (AFTER - 389)) | (1L << (AGGREGATE - 389)) | (1L << (ALSO - 389)) | (1L << (ATTACH - 389)) | (1L << (ATTRIBUTE - 389)) | (1L << (BACKWARD - 389)) | (1L << (BEFORE - 389)) | (1L << (ASSERTION - 389)) | (1L << (ASSIGNMENT - 389)) | (1L << (CONTINUE - 389)) | (1L << (CONVERSION - 389)) | (1L << (COPY - 389)) | (1L << (COST - 389)) | (1L << (CSV - 389)) | (1L << (CALLED - 389)) | (1L << (CATALOG - 389)) | (1L << (CHAIN - 389)) | (1L << (CHECKPOINT - 389)) | (1L << (CLASS - 389)) | (1L << (CONFIGURATION - 389)) | (1L << (COMMENT - 389)) | (1L << (DETACH - 389)) | (1L << (DICTIONARY - 389)) | (1L << (EXPRESSION - 389)) | (1L << (INSENSITIVE - 389)) | (1L << (DISCARD - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (OFF - 453)) | (1L << (INSTEAD - 453)) | (1L << (EXPLAIN - 453)) | (1L << (INPUT - 453)) | (1L << (INLINE - 453)) | (1L << (PARALLEL - 453)) | (1L << (LEAKPROOF - 453)) | (1L << (COMMITTED - 453)) | (1L << (ENCODING - 453)) | (1L << (IMPLICIT - 453)) | (1L << (DELIMITER - 453)) | (1L << (CURSOR - 453)) | (1L << (EACH - 453)) | (1L << (EVENT - 453)) | (1L << (DEALLOCATE - 453)) | (1L << (CONNECTION - 453)) | (1L << (DECLARE - 453)) | (1L << (FAMILY - 453)) | (1L << (FORWARD - 453)) | (1L << (EXCLUSIVE - 453)) | (1L << (FUNCTIONS - 453)) | (1L << (LOCATION - 453)) | (1L << (LABEL - 453)) | (1L << (DELIMITERS - 453)) | (1L << (HANDLER - 453)) | (1L << (HEADER - 453)) | (1L << (IMMUTABLE - 453)) | (1L << (GRANTED - 453)) | (1L << (HOLD - 453)) | (1L << (MAPPING - 453)) | (1L << (OLD - 453)) | (1L << (METHOD - 453)) | (1L << (LOAD - 453)) | (1L << (LISTEN - 453)) | (1L << (MODE - 453)) | (1L << (MOVE - 453)) | (1L << (PROCEDURAL - 453)) | (1L << (PARSER - 453)) | (1L << (PROCEDURES - 453)) | (1L << (ENCRYPTED - 453)) | (1L << (PUBLICATION - 453)) | (1L << (PROGRAM - 453)) | (1L << (REFERENCING - 453)) | (1L << (PLANS - 453)) | (1L << (REINDEX - 453)) | (1L << (PRIOR - 453)) | (1L << (PASSWORD - 453)) | (1L << (RELATIVE - 453)) | (1L << (QUOTE - 453)) | (1L << (ROUTINES - 453)) | (1L << (REPLACE - 453)) | (1L << (SNAPSHOT - 453)) | (1L << (REFRESH - 453)) | (1L << (PREPARE - 453)) | (1L << (OPTIONS - 453)) | (1L << (IMPORT - 453)) | (1L << (INVOKER - 453)) | (1L << (NEW - 453)) | (1L << (PREPARED - 453)) | (1L << (SCROLL - 453)) | (1L << (SEQUENCES - 453)) | (1L << (SYSID - 453)) | (1L << (REASSIGN - 453)) | (1L << (SERVER - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (SUBSCRIPTION - 517)) | (1L << (SEARCH - 517)) | (1L << (SCHEMAS - 517)) | (1L << (RECHECK - 517)) | (1L << (POLICY - 517)) | (1L << (NOTIFY - 517)) | (1L << (LOCK - 517)) | (1L << (RELEASE - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (RETURNS - 517)) | (1L << (STATEMENT - 517)) | (1L << (STDIN - 517)) | (1L << (STDOUT - 517)) | (1L << (TABLES - 517)) | (1L << (SUPPORT - 517)) | (1L << (STABLE - 517)) | (1L << (TEMPLATE - 517)) | (1L << (UNENCRYPTED - 517)) | (1L << (VIEWS - 517)) | (1L << (UNCOMMITTED - 517)) | (1L << (TRANSFORM - 517)) | (1L << (UNLISTEN - 517)) | (1L << (TRUSTED - 517)) | (1L << (VALIDATOR - 517)) | (1L << (UNTIL - 517)) | (1L << (VACUUM - 517)) | (1L << (VOLATILE - 517)) | (1L << (STORED - 517)) | (1L << (WRITE - 517)) | (1L << (STRICT - 517)) | (1L << (TYPES - 517)) | (1L << (WRAPPER - 517)) | (1L << (WORK - 517)) | (1L << (IDENTIFIER_ - 517)))) != 0)) {
					{
					setState(1999);
					anyName();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2002);
				match(LP_);
				setState(2003);
				aExpr(0);
				setState(2004);
				match(RP_);
				setState(2007);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2005);
					match(COLLATE);
					setState(2006);
					anyName();
					}
				}

				setState(2010);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (KEY - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (IF - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (BY - 132)) | (1L << (BEGIN - 132)) | (1L << (COMMIT - 132)) | (1L << (ROLLBACK - 132)) | (1L << (SAVEPOINT - 132)) | (1L << (DOUBLE - 132)) | (1L << (YEAR - 132)) | (1L << (MONTH - 132)) | (1L << (DAY - 132)) | (1L << (HOUR - 132)) | (1L << (MINUTE - 132)) | (1L << (SECOND - 132)) | (1L << (CURRENT - 132)) | (1L << (ENABLE - 132)) | (1L << (DISABLE - 132)) | (1L << (CALL - 132)) | (1L << (PRESERVE - 132)) | (1L << (DEFINER - 132)) | (1L << (SQL - 132)) | (1L << (CASCADED - 132)) | (1L << (LOCAL - 132)) | (1L << (CLOSE - 132)) | (1L << (NEXT - 132)) | (1L << (NAME - 132)) | (1L << (NAMES - 132)) | (1L << (TYPE - 132)) | (1L << (TEXT - 132)) | (1L << (REPEATABLE - 132)) | (1L << (VARYING - 132)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (VALUE - 197)) | (1L << (TIES - 197)) | (1L << (CUBE - 197)) | (1L << (SETS - 197)) | (1L << (OTHERS - 197)) | (1L << (AT - 197)) | (1L << (ADMIN - 197)) | (1L << (ESCAPE - 197)) | (1L << (EXCLUDE - 197)) | (1L << (PARTITION - 197)) | (1L << (UNKNOWN - 197)) | (1L << (ALWAYS - 197)) | (1L << (CASCADE - 197)) | (1L << (GENERATED - 197)) | (1L << (ISOLATION - 197)) | (1L << (LEVEL - 197)) | (1L << (NO - 197)) | (1L << (OPTION - 197)) | (1L << (PRIVILEGES - 197)) | (1L << (READ - 197)) | (1L << (ROLE - 197)) | (1L << (ROWS - 197)) | (1L << (START - 197)) | (1L << (TRANSACTION - 197)) | (1L << (ACTION - 197)) | (1L << (CACHE - 197)) | (1L << (CHARACTERISTICS - 197)) | (1L << (CLUSTER - 197)) | (1L << (COMMENTS - 197)) | (1L << (CONSTRAINTS - 197)) | (1L << (CYCLE - 197)) | (1L << (DATA - 197)) | (1L << (DATABASE - 197)) | (1L << (DEFAULTS - 197)) | (1L << (DEFERRED - 197)) | (1L << (DEPENDS - 197)) | (1L << (DOMAIN - 197)) | (1L << (EXCLUDING - 197)) | (1L << (EXECUTE - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (EXTENSION - 261)) | (1L << (EXTERNAL - 261)) | (1L << (FILTER - 261)) | (1L << (FIRST - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FORCE - 261)) | (1L << (GLOBAL - 261)) | (1L << (IDENTITY - 261)) | (1L << (IMMEDIATE - 261)) | (1L << (INCLUDING - 261)) | (1L << (INCREMENT - 261)) | (1L << (INDEXES - 261)) | (1L << (INHERIT - 261)) | (1L << (INHERITS - 261)) | (1L << (INCLUDE - 261)) | (1L << (LANGUAGE - 261)) | (1L << (LARGE - 261)) | (1L << (LAST - 261)) | (1L << (LOGGED - 261)) | (1L << (MATCH - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MINVALUE - 261)) | (1L << (NOTHING - 261)) | (1L << (NULLS - 261)) | (1L << (OBJECT - 261)) | (1L << (OIDS - 261)) | (1L << (OVER - 261)) | (1L << (OWNED - 261)) | (1L << (OWNER - 261)) | (1L << (PARTIAL - 261)) | (1L << (PRECEDING - 261)) | (1L << (RANGE - 261)) | (1L << (RENAME - 261)) | (1L << (REPLICA - 261)) | (1L << (RESET - 261)) | (1L << (RESTART - 261)) | (1L << (RESTRICT - 261)) | (1L << (ROUTINE - 261)) | (1L << (RULE - 261)) | (1L << (SECURITY - 261)) | (1L << (SEQUENCE - 261)) | (1L << (SESSION - 261)) | (1L << (SHOW - 261)) | (1L << (SIMPLE - 261)) | (1L << (STATISTICS - 261)) | (1L << (STORAGE - 261)) | (1L << (TABLESPACE - 261)) | (1L << (TEMP - 261)) | (1L << (TEMPORARY - 261)) | (1L << (UNBOUNDED - 261)) | (1L << (UNLOGGED - 261)) | (1L << (VALID - 261)) | (1L << (VALIDATE - 261)) | (1L << (WITHIN - 261)) | (1L << (WITHOUT - 261)) | (1L << (ZONE - 261)) | (1L << (OF - 261)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (UESCAPE - 325)) | (1L << (GROUPS - 325)) | (1L << (RECURSIVE - 325)) | (1L << (ENUM - 325)) | (1L << (XML - 325)) | (1L << (JSON - 325)) | (1L << (ORDINALITY - 325)) | (1L << (NFC - 325)) | (1L << (NFD - 325)) | (1L << (NFKC - 325)) | (1L << (NFKD - 325)) | (1L << (REF - 325)) | (1L << (PASSING - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (VERSION - 389)) | (1L << (YES - 389)) | (1L << (STANDALONE - 389)) | (1L << (MATERIALIZED - 389)) | (1L << (OPERATOR - 389)) | (1L << (SHARE - 389)) | (1L << (ROLLUP - 389)) | (1L << (DOCUMENT - 389)) | (1L << (NORMALIZED - 389)) | (1L << (NOWAIT - 389)) | (1L << (LOCKED - 389)) | (1L << (COLUMNS - 389)) | (1L << (CONTENT - 389)) | (1L << (STRIP - 389)) | (1L << (WHITESPACE - 389)) | (1L << (CONFLICT - 389)) | (1L << (OVERRIDING - 389)) | (1L << (SYSTEM - 389)) | (1L << (ABORT - 389)) | (1L << (ABSOLUTE - 389)) | (1L << (ACCESS - 389)) | (1L << (AFTER - 389)) | (1L << (AGGREGATE - 389)) | (1L << (ALSO - 389)) | (1L << (ATTACH - 389)) | (1L << (ATTRIBUTE - 389)) | (1L << (BACKWARD - 389)) | (1L << (BEFORE - 389)) | (1L << (ASSERTION - 389)) | (1L << (ASSIGNMENT - 389)) | (1L << (CONTINUE - 389)) | (1L << (CONVERSION - 389)) | (1L << (COPY - 389)) | (1L << (COST - 389)) | (1L << (CSV - 389)) | (1L << (CALLED - 389)) | (1L << (CATALOG - 389)) | (1L << (CHAIN - 389)) | (1L << (CHECKPOINT - 389)) | (1L << (CLASS - 389)) | (1L << (CONFIGURATION - 389)) | (1L << (COMMENT - 389)) | (1L << (DETACH - 389)) | (1L << (DICTIONARY - 389)) | (1L << (EXPRESSION - 389)) | (1L << (INSENSITIVE - 389)) | (1L << (DISCARD - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (OFF - 453)) | (1L << (INSTEAD - 453)) | (1L << (EXPLAIN - 453)) | (1L << (INPUT - 453)) | (1L << (INLINE - 453)) | (1L << (PARALLEL - 453)) | (1L << (LEAKPROOF - 453)) | (1L << (COMMITTED - 453)) | (1L << (ENCODING - 453)) | (1L << (IMPLICIT - 453)) | (1L << (DELIMITER - 453)) | (1L << (CURSOR - 453)) | (1L << (EACH - 453)) | (1L << (EVENT - 453)) | (1L << (DEALLOCATE - 453)) | (1L << (CONNECTION - 453)) | (1L << (DECLARE - 453)) | (1L << (FAMILY - 453)) | (1L << (FORWARD - 453)) | (1L << (EXCLUSIVE - 453)) | (1L << (FUNCTIONS - 453)) | (1L << (LOCATION - 453)) | (1L << (LABEL - 453)) | (1L << (DELIMITERS - 453)) | (1L << (HANDLER - 453)) | (1L << (HEADER - 453)) | (1L << (IMMUTABLE - 453)) | (1L << (GRANTED - 453)) | (1L << (HOLD - 453)) | (1L << (MAPPING - 453)) | (1L << (OLD - 453)) | (1L << (METHOD - 453)) | (1L << (LOAD - 453)) | (1L << (LISTEN - 453)) | (1L << (MODE - 453)) | (1L << (MOVE - 453)) | (1L << (PROCEDURAL - 453)) | (1L << (PARSER - 453)) | (1L << (PROCEDURES - 453)) | (1L << (ENCRYPTED - 453)) | (1L << (PUBLICATION - 453)) | (1L << (PROGRAM - 453)) | (1L << (REFERENCING - 453)) | (1L << (PLANS - 453)) | (1L << (REINDEX - 453)) | (1L << (PRIOR - 453)) | (1L << (PASSWORD - 453)) | (1L << (RELATIVE - 453)) | (1L << (QUOTE - 453)) | (1L << (ROUTINES - 453)) | (1L << (REPLACE - 453)) | (1L << (SNAPSHOT - 453)) | (1L << (REFRESH - 453)) | (1L << (PREPARE - 453)) | (1L << (OPTIONS - 453)) | (1L << (IMPORT - 453)) | (1L << (INVOKER - 453)) | (1L << (NEW - 453)) | (1L << (PREPARED - 453)) | (1L << (SCROLL - 453)) | (1L << (SEQUENCES - 453)) | (1L << (SYSID - 453)) | (1L << (REASSIGN - 453)) | (1L << (SERVER - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (SUBSCRIPTION - 517)) | (1L << (SEARCH - 517)) | (1L << (SCHEMAS - 517)) | (1L << (RECHECK - 517)) | (1L << (POLICY - 517)) | (1L << (NOTIFY - 517)) | (1L << (LOCK - 517)) | (1L << (RELEASE - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (RETURNS - 517)) | (1L << (STATEMENT - 517)) | (1L << (STDIN - 517)) | (1L << (STDOUT - 517)) | (1L << (TABLES - 517)) | (1L << (SUPPORT - 517)) | (1L << (STABLE - 517)) | (1L << (TEMPLATE - 517)) | (1L << (UNENCRYPTED - 517)) | (1L << (VIEWS - 517)) | (1L << (UNCOMMITTED - 517)) | (1L << (TRANSFORM - 517)) | (1L << (UNLISTEN - 517)) | (1L << (TRUSTED - 517)) | (1L << (VALIDATOR - 517)) | (1L << (UNTIL - 517)) | (1L << (VACUUM - 517)) | (1L << (VOLATILE - 517)) | (1L << (STORED - 517)) | (1L << (WRITE - 517)) | (1L << (STRICT - 517)) | (1L << (TYPES - 517)) | (1L << (WRAPPER - 517)) | (1L << (WORK - 517)) | (1L << (IDENTIFIER_ - 517)))) != 0)) {
					{
					setState(2009);
					anyName();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2012);
				funcExprWindowless();
				setState(2015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2013);
					match(COLLATE);
					setState(2014);
					anyName();
					}
				}

				setState(2018);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (KEY - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (IF - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (BY - 132)) | (1L << (BEGIN - 132)) | (1L << (COMMIT - 132)) | (1L << (ROLLBACK - 132)) | (1L << (SAVEPOINT - 132)) | (1L << (DOUBLE - 132)) | (1L << (YEAR - 132)) | (1L << (MONTH - 132)) | (1L << (DAY - 132)) | (1L << (HOUR - 132)) | (1L << (MINUTE - 132)) | (1L << (SECOND - 132)) | (1L << (CURRENT - 132)) | (1L << (ENABLE - 132)) | (1L << (DISABLE - 132)) | (1L << (CALL - 132)) | (1L << (PRESERVE - 132)) | (1L << (DEFINER - 132)) | (1L << (SQL - 132)) | (1L << (CASCADED - 132)) | (1L << (LOCAL - 132)) | (1L << (CLOSE - 132)) | (1L << (NEXT - 132)) | (1L << (NAME - 132)) | (1L << (NAMES - 132)) | (1L << (TYPE - 132)) | (1L << (TEXT - 132)) | (1L << (REPEATABLE - 132)) | (1L << (VARYING - 132)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (VALUE - 197)) | (1L << (TIES - 197)) | (1L << (CUBE - 197)) | (1L << (SETS - 197)) | (1L << (OTHERS - 197)) | (1L << (AT - 197)) | (1L << (ADMIN - 197)) | (1L << (ESCAPE - 197)) | (1L << (EXCLUDE - 197)) | (1L << (PARTITION - 197)) | (1L << (UNKNOWN - 197)) | (1L << (ALWAYS - 197)) | (1L << (CASCADE - 197)) | (1L << (GENERATED - 197)) | (1L << (ISOLATION - 197)) | (1L << (LEVEL - 197)) | (1L << (NO - 197)) | (1L << (OPTION - 197)) | (1L << (PRIVILEGES - 197)) | (1L << (READ - 197)) | (1L << (ROLE - 197)) | (1L << (ROWS - 197)) | (1L << (START - 197)) | (1L << (TRANSACTION - 197)) | (1L << (ACTION - 197)) | (1L << (CACHE - 197)) | (1L << (CHARACTERISTICS - 197)) | (1L << (CLUSTER - 197)) | (1L << (COMMENTS - 197)) | (1L << (CONSTRAINTS - 197)) | (1L << (CYCLE - 197)) | (1L << (DATA - 197)) | (1L << (DATABASE - 197)) | (1L << (DEFAULTS - 197)) | (1L << (DEFERRED - 197)) | (1L << (DEPENDS - 197)) | (1L << (DOMAIN - 197)) | (1L << (EXCLUDING - 197)) | (1L << (EXECUTE - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (EXTENSION - 261)) | (1L << (EXTERNAL - 261)) | (1L << (FILTER - 261)) | (1L << (FIRST - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FORCE - 261)) | (1L << (GLOBAL - 261)) | (1L << (IDENTITY - 261)) | (1L << (IMMEDIATE - 261)) | (1L << (INCLUDING - 261)) | (1L << (INCREMENT - 261)) | (1L << (INDEXES - 261)) | (1L << (INHERIT - 261)) | (1L << (INHERITS - 261)) | (1L << (INCLUDE - 261)) | (1L << (LANGUAGE - 261)) | (1L << (LARGE - 261)) | (1L << (LAST - 261)) | (1L << (LOGGED - 261)) | (1L << (MATCH - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MINVALUE - 261)) | (1L << (NOTHING - 261)) | (1L << (NULLS - 261)) | (1L << (OBJECT - 261)) | (1L << (OIDS - 261)) | (1L << (OVER - 261)) | (1L << (OWNED - 261)) | (1L << (OWNER - 261)) | (1L << (PARTIAL - 261)) | (1L << (PRECEDING - 261)) | (1L << (RANGE - 261)) | (1L << (RENAME - 261)) | (1L << (REPLICA - 261)) | (1L << (RESET - 261)) | (1L << (RESTART - 261)) | (1L << (RESTRICT - 261)) | (1L << (ROUTINE - 261)) | (1L << (RULE - 261)) | (1L << (SECURITY - 261)) | (1L << (SEQUENCE - 261)) | (1L << (SESSION - 261)) | (1L << (SHOW - 261)) | (1L << (SIMPLE - 261)) | (1L << (STATISTICS - 261)) | (1L << (STORAGE - 261)) | (1L << (TABLESPACE - 261)) | (1L << (TEMP - 261)) | (1L << (TEMPORARY - 261)) | (1L << (UNBOUNDED - 261)) | (1L << (UNLOGGED - 261)) | (1L << (VALID - 261)) | (1L << (VALIDATE - 261)) | (1L << (WITHIN - 261)) | (1L << (WITHOUT - 261)) | (1L << (ZONE - 261)) | (1L << (OF - 261)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (UESCAPE - 325)) | (1L << (GROUPS - 325)) | (1L << (RECURSIVE - 325)) | (1L << (ENUM - 325)) | (1L << (XML - 325)) | (1L << (JSON - 325)) | (1L << (ORDINALITY - 325)) | (1L << (NFC - 325)) | (1L << (NFD - 325)) | (1L << (NFKC - 325)) | (1L << (NFKD - 325)) | (1L << (REF - 325)) | (1L << (PASSING - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (VERSION - 389)) | (1L << (YES - 389)) | (1L << (STANDALONE - 389)) | (1L << (MATERIALIZED - 389)) | (1L << (OPERATOR - 389)) | (1L << (SHARE - 389)) | (1L << (ROLLUP - 389)) | (1L << (DOCUMENT - 389)) | (1L << (NORMALIZED - 389)) | (1L << (NOWAIT - 389)) | (1L << (LOCKED - 389)) | (1L << (COLUMNS - 389)) | (1L << (CONTENT - 389)) | (1L << (STRIP - 389)) | (1L << (WHITESPACE - 389)) | (1L << (CONFLICT - 389)) | (1L << (OVERRIDING - 389)) | (1L << (SYSTEM - 389)) | (1L << (ABORT - 389)) | (1L << (ABSOLUTE - 389)) | (1L << (ACCESS - 389)) | (1L << (AFTER - 389)) | (1L << (AGGREGATE - 389)) | (1L << (ALSO - 389)) | (1L << (ATTACH - 389)) | (1L << (ATTRIBUTE - 389)) | (1L << (BACKWARD - 389)) | (1L << (BEFORE - 389)) | (1L << (ASSERTION - 389)) | (1L << (ASSIGNMENT - 389)) | (1L << (CONTINUE - 389)) | (1L << (CONVERSION - 389)) | (1L << (COPY - 389)) | (1L << (COST - 389)) | (1L << (CSV - 389)) | (1L << (CALLED - 389)) | (1L << (CATALOG - 389)) | (1L << (CHAIN - 389)) | (1L << (CHECKPOINT - 389)) | (1L << (CLASS - 389)) | (1L << (CONFIGURATION - 389)) | (1L << (COMMENT - 389)) | (1L << (DETACH - 389)) | (1L << (DICTIONARY - 389)) | (1L << (EXPRESSION - 389)) | (1L << (INSENSITIVE - 389)) | (1L << (DISCARD - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (OFF - 453)) | (1L << (INSTEAD - 453)) | (1L << (EXPLAIN - 453)) | (1L << (INPUT - 453)) | (1L << (INLINE - 453)) | (1L << (PARALLEL - 453)) | (1L << (LEAKPROOF - 453)) | (1L << (COMMITTED - 453)) | (1L << (ENCODING - 453)) | (1L << (IMPLICIT - 453)) | (1L << (DELIMITER - 453)) | (1L << (CURSOR - 453)) | (1L << (EACH - 453)) | (1L << (EVENT - 453)) | (1L << (DEALLOCATE - 453)) | (1L << (CONNECTION - 453)) | (1L << (DECLARE - 453)) | (1L << (FAMILY - 453)) | (1L << (FORWARD - 453)) | (1L << (EXCLUSIVE - 453)) | (1L << (FUNCTIONS - 453)) | (1L << (LOCATION - 453)) | (1L << (LABEL - 453)) | (1L << (DELIMITERS - 453)) | (1L << (HANDLER - 453)) | (1L << (HEADER - 453)) | (1L << (IMMUTABLE - 453)) | (1L << (GRANTED - 453)) | (1L << (HOLD - 453)) | (1L << (MAPPING - 453)) | (1L << (OLD - 453)) | (1L << (METHOD - 453)) | (1L << (LOAD - 453)) | (1L << (LISTEN - 453)) | (1L << (MODE - 453)) | (1L << (MOVE - 453)) | (1L << (PROCEDURAL - 453)) | (1L << (PARSER - 453)) | (1L << (PROCEDURES - 453)) | (1L << (ENCRYPTED - 453)) | (1L << (PUBLICATION - 453)) | (1L << (PROGRAM - 453)) | (1L << (REFERENCING - 453)) | (1L << (PLANS - 453)) | (1L << (REINDEX - 453)) | (1L << (PRIOR - 453)) | (1L << (PASSWORD - 453)) | (1L << (RELATIVE - 453)) | (1L << (QUOTE - 453)) | (1L << (ROUTINES - 453)) | (1L << (REPLACE - 453)) | (1L << (SNAPSHOT - 453)) | (1L << (REFRESH - 453)) | (1L << (PREPARE - 453)) | (1L << (OPTIONS - 453)) | (1L << (IMPORT - 453)) | (1L << (INVOKER - 453)) | (1L << (NEW - 453)) | (1L << (PREPARED - 453)) | (1L << (SCROLL - 453)) | (1L << (SEQUENCES - 453)) | (1L << (SYSID - 453)) | (1L << (REASSIGN - 453)) | (1L << (SERVER - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (SUBSCRIPTION - 517)) | (1L << (SEARCH - 517)) | (1L << (SCHEMAS - 517)) | (1L << (RECHECK - 517)) | (1L << (POLICY - 517)) | (1L << (NOTIFY - 517)) | (1L << (LOCK - 517)) | (1L << (RELEASE - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (RETURNS - 517)) | (1L << (STATEMENT - 517)) | (1L << (STDIN - 517)) | (1L << (STDOUT - 517)) | (1L << (TABLES - 517)) | (1L << (SUPPORT - 517)) | (1L << (STABLE - 517)) | (1L << (TEMPLATE - 517)) | (1L << (UNENCRYPTED - 517)) | (1L << (VIEWS - 517)) | (1L << (UNCOMMITTED - 517)) | (1L << (TRANSFORM - 517)) | (1L << (UNLISTEN - 517)) | (1L << (TRUSTED - 517)) | (1L << (VALIDATOR - 517)) | (1L << (UNTIL - 517)) | (1L << (VACUUM - 517)) | (1L << (VOLATILE - 517)) | (1L << (STORED - 517)) | (1L << (WRITE - 517)) | (1L << (STRICT - 517)) | (1L << (TYPES - 517)) | (1L << (WRAPPER - 517)) | (1L << (WORK - 517)) | (1L << (IDENTIFIER_ - 517)))) != 0)) {
					{
					setState(2017);
					anyName();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncExprWindowlessContext extends ParserRuleContext {
		public FuncApplicationContext funcApplication() {
			return getRuleContext(FuncApplicationContext.class,0);
		}
		public FunctionExprCommonSubexprContext functionExprCommonSubexpr() {
			return getRuleContext(FunctionExprCommonSubexprContext.class,0);
		}
		public FuncExprWindowlessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcExprWindowless; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncExprWindowless(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncExprWindowless(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncExprWindowless(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncExprWindowlessContext funcExprWindowless() throws RecognitionException {
		FuncExprWindowlessContext _localctx = new FuncExprWindowlessContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_funcExprWindowless);
		try {
			setState(2024);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2022);
				funcApplication();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2023);
				functionExprCommonSubexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartStrategyContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public PartStrategyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partStrategy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPartStrategy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPartStrategy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPartStrategy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartStrategyContext partStrategy() throws RecognitionException {
		PartStrategyContext _localctx = new PartStrategyContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_partStrategy);
		try {
			setState(2028);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2026);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2027);
				unreservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(DDLStatementParser.UNIQUE, 0); }
		public CreateIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateIndexSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateIndexSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexSpecificationContext createIndexSpecification() throws RecognitionException {
		CreateIndexSpecificationContext _localctx = new CreateIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_createIndexSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2031);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(2030);
				match(UNIQUE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcurrentlyClauseContext extends ParserRuleContext {
		public TerminalNode CONCURRENTLY() { return getToken(DDLStatementParser.CONCURRENTLY, 0); }
		public ConcurrentlyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concurrentlyClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConcurrentlyClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConcurrentlyClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConcurrentlyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConcurrentlyClauseContext concurrentlyClause() throws RecognitionException {
		ConcurrentlyClauseContext _localctx = new ConcurrentlyClauseContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_concurrentlyClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2034);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(2033);
				match(CONCURRENTLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnlyClauseContext extends ParserRuleContext {
		public TerminalNode ONLY() { return getToken(DDLStatementParser.ONLY, 0); }
		public OnlyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onlyClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOnlyClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOnlyClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOnlyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnlyClauseContext onlyClause() throws RecognitionException {
		OnlyClauseContext _localctx = new OnlyClauseContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_onlyClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(2036);
				match(ONLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsteriskClauseContext extends ParserRuleContext {
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public AsteriskClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asteriskClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAsteriskClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAsteriskClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAsteriskClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsteriskClauseContext asteriskClause() throws RecognitionException {
		AsteriskClauseContext _localctx = new AsteriskClauseContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_asteriskClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASTERISK_) {
				{
				setState(2039);
				match(ASTERISK_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDefinitionClauseContext extends ParserRuleContext {
		public AlterTableActionsContext alterTableActions() {
			return getRuleContext(AlterTableActionsContext.class,0);
		}
		public RenameColumnSpecificationContext renameColumnSpecification() {
			return getRuleContext(RenameColumnSpecificationContext.class,0);
		}
		public RenameConstraintContext renameConstraint() {
			return getRuleContext(RenameConstraintContext.class,0);
		}
		public RenameTableSpecificationContext renameTableSpecification() {
			return getRuleContext(RenameTableSpecificationContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public PartitionCmdContext partitionCmd() {
			return getRuleContext(PartitionCmdContext.class,0);
		}
		public AlterDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDefinitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterDefinitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterDefinitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDefinitionClauseContext alterDefinitionClause() throws RecognitionException {
		AlterDefinitionClauseContext _localctx = new AlterDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alterDefinitionClause);
		try {
			setState(2050);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2042);
				alterTableActions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2043);
				renameColumnSpecification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2044);
				renameConstraint();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2045);
				renameTableSpecification();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2046);
				match(SET);
				setState(2047);
				match(SCHEMA);
				setState(2048);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2049);
				partitionCmd();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionCmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(DDLStatementParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(DDLStatementParser.PARTITION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public PartitionBoundSpecContext partitionBoundSpec() {
			return getRuleContext(PartitionBoundSpecContext.class,0);
		}
		public TerminalNode DETACH() { return getToken(DDLStatementParser.DETACH, 0); }
		public PartitionCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionCmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPartitionCmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPartitionCmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPartitionCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionCmdContext partitionCmd() throws RecognitionException {
		PartitionCmdContext _localctx = new PartitionCmdContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_partitionCmd);
		try {
			setState(2060);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATTACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2052);
				match(ATTACH);
				setState(2053);
				match(PARTITION);
				setState(2054);
				qualifiedName();
				setState(2055);
				partitionBoundSpec();
				}
				break;
			case DETACH:
				enterOuterAlt(_localctx, 2);
				{
				setState(2057);
				match(DETACH);
				setState(2058);
				match(PARTITION);
				setState(2059);
				qualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexDefinitionClauseContext extends ParserRuleContext {
		public RenameIndexSpecificationContext renameIndexSpecification() {
			return getRuleContext(RenameIndexSpecificationContext.class,0);
		}
		public AlterIndexDependsOnExtensionContext alterIndexDependsOnExtension() {
			return getRuleContext(AlterIndexDependsOnExtensionContext.class,0);
		}
		public AlterIndexSetTableSpaceContext alterIndexSetTableSpace() {
			return getRuleContext(AlterIndexSetTableSpaceContext.class,0);
		}
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public IndexPartitionCmdContext indexPartitionCmd() {
			return getRuleContext(IndexPartitionCmdContext.class,0);
		}
		public AlterIndexDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexDefinitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterIndexDefinitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterIndexDefinitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterIndexDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexDefinitionClauseContext alterIndexDefinitionClause() throws RecognitionException {
		AlterIndexDefinitionClauseContext _localctx = new AlterIndexDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alterIndexDefinitionClause);
		try {
			setState(2067);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2062);
				renameIndexSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2063);
				alterIndexDependsOnExtension();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2064);
				alterIndexSetTableSpace();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2065);
				alterTableCmds();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2066);
				indexPartitionCmd();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexPartitionCmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(DDLStatementParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(DDLStatementParser.PARTITION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public IndexPartitionCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexPartitionCmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexPartitionCmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexPartitionCmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexPartitionCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexPartitionCmdContext indexPartitionCmd() throws RecognitionException {
		IndexPartitionCmdContext _localctx = new IndexPartitionCmdContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_indexPartitionCmd);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2069);
			match(ATTACH);
			setState(2070);
			match(PARTITION);
			setState(2071);
			qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public RenameIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameIndexSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRenameIndexSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRenameIndexSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRenameIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameIndexSpecificationContext renameIndexSpecification() throws RecognitionException {
		RenameIndexSpecificationContext _localctx = new RenameIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_renameIndexSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2073);
			match(RENAME);
			setState(2074);
			match(TO);
			setState(2075);
			indexName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexDependsOnExtensionContext extends ParserRuleContext {
		public TerminalNode DEPENDS() { return getToken(DDLStatementParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public AlterIndexDependsOnExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexDependsOnExtension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterIndexDependsOnExtension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterIndexDependsOnExtension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterIndexDependsOnExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexDependsOnExtensionContext alterIndexDependsOnExtension() throws RecognitionException {
		AlterIndexDependsOnExtensionContext _localctx = new AlterIndexDependsOnExtensionContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alterIndexDependsOnExtension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2077);
			match(DEPENDS);
			setState(2078);
			match(ON);
			setState(2079);
			match(EXTENSION);
			setState(2080);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexSetTableSpaceContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNED() { return getToken(DDLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public IgnoredIdentifiersContext ignoredIdentifiers() {
			return getRuleContext(IgnoredIdentifiersContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(DDLStatementParser.NOWAIT, 0); }
		public AlterIndexSetTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexSetTableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterIndexSetTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterIndexSetTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterIndexSetTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexSetTableSpaceContext alterIndexSetTableSpace() throws RecognitionException {
		AlterIndexSetTableSpaceContext _localctx = new AlterIndexSetTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_alterIndexSetTableSpace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2085);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OWNED) {
				{
				setState(2082);
				match(OWNED);
				setState(2083);
				match(BY);
				setState(2084);
				ignoredIdentifiers();
				}
			}

			setState(2087);
			match(SET);
			setState(2088);
			match(TABLESPACE);
			setState(2089);
			name();
			setState(2091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT) {
				{
				setState(2090);
				match(NOWAIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNamesClauseContext extends ParserRuleContext {
		public List<TableNameClauseContext> tableNameClause() {
			return getRuleContexts(TableNameClauseContext.class);
		}
		public TableNameClauseContext tableNameClause(int i) {
			return getRuleContext(TableNameClauseContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TableNamesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNamesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableNamesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableNamesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableNamesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNamesClauseContext tableNamesClause() throws RecognitionException {
		TableNamesClauseContext _localctx = new TableNamesClauseContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_tableNamesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2093);
			tableNameClause();
			setState(2098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2094);
				match(COMMA_);
				setState(2095);
				tableNameClause();
				}
				}
				setState(2100);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameClauseContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TableNameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableNameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableNameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableNameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameClauseContext tableNameClause() throws RecognitionException {
		TableNameClauseContext _localctx = new TableNameClauseContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_tableNameClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2101);
			tableName();
			setState(2103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASTERISK_) {
				{
				setState(2102);
				match(ASTERISK_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableActionsContext extends ParserRuleContext {
		public List<AlterTableActionContext> alterTableAction() {
			return getRuleContexts(AlterTableActionContext.class);
		}
		public AlterTableActionContext alterTableAction(int i) {
			return getRuleContext(AlterTableActionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public AlterTableActionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableActions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTableActions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTableActions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTableActions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableActionsContext alterTableActions() throws RecognitionException {
		AlterTableActionsContext _localctx = new AlterTableActionsContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_alterTableActions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2105);
			alterTableAction();
			setState(2110);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2106);
				match(COMMA_);
				setState(2107);
				alterTableAction();
				}
				}
				setState(2112);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableActionContext extends ParserRuleContext {
		public AddColumnSpecificationContext addColumnSpecification() {
			return getRuleContext(AddColumnSpecificationContext.class,0);
		}
		public DropColumnSpecificationContext dropColumnSpecification() {
			return getRuleContext(DropColumnSpecificationContext.class,0);
		}
		public ModifyColumnSpecificationContext modifyColumnSpecification() {
			return getRuleContext(ModifyColumnSpecificationContext.class,0);
		}
		public AddConstraintSpecificationContext addConstraintSpecification() {
			return getRuleContext(AddConstraintSpecificationContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public ConstraintOptionalParamContext constraintOptionalParam() {
			return getRuleContext(ConstraintOptionalParamContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(DDLStatementParser.VALIDATE, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public TerminalNode DISABLE() { return getToken(DDLStatementParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(DDLStatementParser.ENABLE, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public TerminalNode REPLICA() { return getToken(DDLStatementParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(DDLStatementParser.ALWAYS, 0); }
		public TerminalNode RULE() { return getToken(DDLStatementParser.RULE, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode LEVEL() { return getToken(DDLStatementParser.LEVEL, 0); }
		public TerminalNode SECURITY() { return getToken(DDLStatementParser.SECURITY, 0); }
		public TerminalNode FORCE() { return getToken(DDLStatementParser.FORCE, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode CLUSTER() { return getToken(DDLStatementParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode WITHOUT() { return getToken(DDLStatementParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(DDLStatementParser.OIDS, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public TerminalNode LOGGED() { return getToken(DDLStatementParser.LOGGED, 0); }
		public TerminalNode UNLOGGED() { return getToken(DDLStatementParser.UNLOGGED, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<StorageParameterWithValueContext> storageParameterWithValue() {
			return getRuleContexts(StorageParameterWithValueContext.class);
		}
		public StorageParameterWithValueContext storageParameterWithValue(int i) {
			return getRuleContext(StorageParameterWithValueContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TerminalNode RESET() { return getToken(DDLStatementParser.RESET, 0); }
		public List<StorageParameterContext> storageParameter() {
			return getRuleContexts(StorageParameterContext.class);
		}
		public StorageParameterContext storageParameter(int i) {
			return getRuleContext(StorageParameterContext.class,i);
		}
		public TerminalNode INHERIT() { return getToken(DDLStatementParser.INHERIT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public DataTypeNameContext dataTypeName() {
			return getRuleContext(DataTypeNameContext.class,0);
		}
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode CURRENT_USER() { return getToken(DDLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(DDLStatementParser.SESSION_USER, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode FULL() { return getToken(DDLStatementParser.FULL, 0); }
		public TerminalNode NOTHING() { return getToken(DDLStatementParser.NOTHING, 0); }
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public AlterTableActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTableAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTableAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTableAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableActionContext alterTableAction() throws RecognitionException {
		AlterTableActionContext _localctx = new AlterTableActionContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_alterTableAction);
		int _la;
		try {
			setState(2227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2113);
				addColumnSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2114);
				dropColumnSpecification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2115);
				modifyColumnSpecification();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2116);
				addConstraintSpecification();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2117);
				match(ALTER);
				setState(2118);
				match(CONSTRAINT);
				setState(2119);
				ignoredIdentifier();
				setState(2120);
				constraintOptionalParam();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2122);
				match(VALIDATE);
				setState(2123);
				match(CONSTRAINT);
				setState(2124);
				ignoredIdentifier();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2125);
				match(DROP);
				setState(2126);
				match(CONSTRAINT);
				setState(2128);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
				case 1:
					{
					setState(2127);
					existClause();
					}
					break;
				}
				setState(2130);
				ignoredIdentifier();
				setState(2132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2131);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2134);
				_la = _input.LA(1);
				if ( !(_la==ENABLE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2135);
				match(TRIGGER);
				setState(2139);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__0:
				case T__1:
				case INSERT:
				case UPDATE:
				case DELETE:
				case ALTER:
				case DROP:
				case TRUNCATE:
				case SCHEMA:
				case REVOKE:
				case ADD:
				case SET:
				case INDEX:
				case KEY:
				case FUNCTION:
				case TRIGGER:
				case PROCEDURE:
				case VIEW:
				case IF:
				case BY:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case DOUBLE:
				case YEAR:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case CALL:
				case PRESERVE:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case NEXT:
				case NAME:
				case NAMES:
				case TYPE:
				case TEXT:
				case REPEATABLE:
				case VARYING:
				case VALUE:
				case TIES:
				case CUBE:
				case SETS:
				case OTHERS:
				case AT:
				case ADMIN:
				case ESCAPE:
				case EXCLUDE:
				case PARTITION:
				case UNKNOWN:
				case ALWAYS:
				case CASCADE:
				case GENERATED:
				case ISOLATION:
				case LEVEL:
				case NO:
				case OPTION:
				case PRIVILEGES:
				case READ:
				case ROLE:
				case ROWS:
				case START:
				case TRANSACTION:
				case ACTION:
				case CACHE:
				case CHARACTERISTICS:
				case CLUSTER:
				case COMMENTS:
				case CONSTRAINTS:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DEFAULTS:
				case DEFERRED:
				case DEPENDS:
				case DOMAIN:
				case EXCLUDING:
				case EXECUTE:
				case EXTENSION:
				case EXTERNAL:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case GLOBAL:
				case IDENTITY:
				case IMMEDIATE:
				case INCLUDING:
				case INCREMENT:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INCLUDE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LOGGED:
				case MATCH:
				case MAXVALUE:
				case MINVALUE:
				case NOTHING:
				case NULLS:
				case OBJECT:
				case OIDS:
				case OVER:
				case OWNED:
				case OWNER:
				case PARTIAL:
				case PRECEDING:
				case RANGE:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case ROUTINE:
				case RULE:
				case SECURITY:
				case SEQUENCE:
				case SESSION:
				case SHOW:
				case SIMPLE:
				case STATISTICS:
				case STORAGE:
				case TABLESPACE:
				case TEMP:
				case TEMPORARY:
				case UNBOUNDED:
				case UNLOGGED:
				case VALID:
				case VALIDATE:
				case WITHIN:
				case WITHOUT:
				case ZONE:
				case OF:
				case UESCAPE:
				case GROUPS:
				case RECURSIVE:
				case ENUM:
				case XML:
				case JSON:
				case ORDINALITY:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case REF:
				case PASSING:
				case VERSION:
				case YES:
				case STANDALONE:
				case MATERIALIZED:
				case OPERATOR:
				case SHARE:
				case ROLLUP:
				case DOCUMENT:
				case NORMALIZED:
				case NOWAIT:
				case LOCKED:
				case COLUMNS:
				case CONTENT:
				case STRIP:
				case WHITESPACE:
				case CONFLICT:
				case OVERRIDING:
				case SYSTEM:
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case ASSERTION:
				case ASSIGNMENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CALLED:
				case CATALOG:
				case CHAIN:
				case CHECKPOINT:
				case CLASS:
				case CONFIGURATION:
				case COMMENT:
				case DETACH:
				case DICTIONARY:
				case EXPRESSION:
				case INSENSITIVE:
				case DISCARD:
				case OFF:
				case INSTEAD:
				case EXPLAIN:
				case INPUT:
				case INLINE:
				case PARALLEL:
				case LEAKPROOF:
				case COMMITTED:
				case ENCODING:
				case IMPLICIT:
				case DELIMITER:
				case CURSOR:
				case EACH:
				case EVENT:
				case DEALLOCATE:
				case CONNECTION:
				case DECLARE:
				case FAMILY:
				case FORWARD:
				case EXCLUSIVE:
				case FUNCTIONS:
				case LOCATION:
				case LABEL:
				case DELIMITERS:
				case HANDLER:
				case HEADER:
				case IMMUTABLE:
				case GRANTED:
				case HOLD:
				case MAPPING:
				case OLD:
				case METHOD:
				case LOAD:
				case LISTEN:
				case MODE:
				case MOVE:
				case PROCEDURAL:
				case PARSER:
				case PROCEDURES:
				case ENCRYPTED:
				case PUBLICATION:
				case PROGRAM:
				case REFERENCING:
				case PLANS:
				case REINDEX:
				case PRIOR:
				case PASSWORD:
				case RELATIVE:
				case QUOTE:
				case ROUTINES:
				case REPLACE:
				case SNAPSHOT:
				case REFRESH:
				case PREPARE:
				case OPTIONS:
				case IMPORT:
				case INVOKER:
				case NEW:
				case PREPARED:
				case SCROLL:
				case SEQUENCES:
				case SYSID:
				case REASSIGN:
				case SERVER:
				case SUBSCRIPTION:
				case SEARCH:
				case SCHEMAS:
				case RECHECK:
				case POLICY:
				case NOTIFY:
				case LOCK:
				case RELEASE:
				case SERIALIZABLE:
				case RETURNS:
				case STATEMENT:
				case STDIN:
				case STDOUT:
				case TABLES:
				case SUPPORT:
				case STABLE:
				case TEMPLATE:
				case UNENCRYPTED:
				case VIEWS:
				case UNCOMMITTED:
				case TRANSFORM:
				case UNLISTEN:
				case TRUSTED:
				case VALIDATOR:
				case UNTIL:
				case VACUUM:
				case VOLATILE:
				case STORED:
				case WRITE:
				case STRICT:
				case TYPES:
				case WRAPPER:
				case WORK:
				case IDENTIFIER_:
					{
					setState(2136);
					ignoredIdentifier();
					}
					break;
				case ALL:
					{
					setState(2137);
					match(ALL);
					}
					break;
				case USER:
					{
					setState(2138);
					match(USER);
					}
					break;
				case EOF:
				case COMMA_:
					break;
				default:
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2141);
				match(ENABLE);
				setState(2142);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2143);
				match(TRIGGER);
				setState(2144);
				ignoredIdentifier();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2145);
				_la = _input.LA(1);
				if ( !(_la==ENABLE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2146);
				match(RULE);
				setState(2147);
				ignoredIdentifier();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2148);
				match(ENABLE);
				setState(2149);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2150);
				match(RULE);
				setState(2151);
				ignoredIdentifier();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2158);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DISABLE:
					{
					setState(2152);
					match(DISABLE);
					}
					break;
				case ENABLE:
					{
					setState(2153);
					match(ENABLE);
					}
					break;
				case NO:
				case FORCE:
					{
					{
					setState(2155);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(2154);
						match(NO);
						}
					}

					setState(2157);
					match(FORCE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2160);
				match(ROW);
				setState(2161);
				match(LEVEL);
				setState(2162);
				match(SECURITY);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2163);
				match(CLUSTER);
				setState(2164);
				match(ON);
				setState(2165);
				indexName();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2166);
				match(SET);
				setState(2167);
				match(WITHOUT);
				setState(2168);
				match(CLUSTER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2169);
				match(SET);
				setState(2170);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2171);
				match(OIDS);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2172);
				match(SET);
				setState(2173);
				match(TABLESPACE);
				setState(2174);
				ignoredIdentifier();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2175);
				match(SET);
				setState(2176);
				_la = _input.LA(1);
				if ( !(_la==LOGGED || _la==UNLOGGED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2177);
				match(SET);
				setState(2178);
				match(LP_);
				setState(2179);
				storageParameterWithValue();
				setState(2184);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(2180);
					match(COMMA_);
					setState(2181);
					storageParameterWithValue();
					}
					}
					setState(2186);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2187);
				match(RP_);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2189);
				match(RESET);
				setState(2190);
				match(LP_);
				setState(2191);
				storageParameter();
				setState(2196);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(2192);
					match(COMMA_);
					setState(2193);
					storageParameter();
					}
					}
					setState(2198);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2199);
				match(RP_);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2201);
				match(INHERIT);
				setState(2202);
				tableName();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2203);
				match(NO);
				setState(2204);
				match(INHERIT);
				setState(2205);
				tableName();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2206);
				match(OF);
				setState(2207);
				dataTypeName();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2208);
				match(NOT);
				setState(2209);
				match(OF);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2210);
				match(OWNER);
				setState(2211);
				match(TO);
				setState(2215);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__0:
				case T__1:
				case INSERT:
				case UPDATE:
				case DELETE:
				case ALTER:
				case DROP:
				case TRUNCATE:
				case SCHEMA:
				case REVOKE:
				case ADD:
				case SET:
				case INDEX:
				case KEY:
				case FUNCTION:
				case TRIGGER:
				case PROCEDURE:
				case VIEW:
				case IF:
				case BY:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case DOUBLE:
				case YEAR:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case CALL:
				case PRESERVE:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case NEXT:
				case NAME:
				case NAMES:
				case TYPE:
				case TEXT:
				case REPEATABLE:
				case VARYING:
				case VALUE:
				case TIES:
				case CUBE:
				case SETS:
				case OTHERS:
				case AT:
				case ADMIN:
				case ESCAPE:
				case EXCLUDE:
				case PARTITION:
				case UNKNOWN:
				case ALWAYS:
				case CASCADE:
				case GENERATED:
				case ISOLATION:
				case LEVEL:
				case NO:
				case OPTION:
				case PRIVILEGES:
				case READ:
				case ROLE:
				case ROWS:
				case START:
				case TRANSACTION:
				case ACTION:
				case CACHE:
				case CHARACTERISTICS:
				case CLUSTER:
				case COMMENTS:
				case CONSTRAINTS:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DEFAULTS:
				case DEFERRED:
				case DEPENDS:
				case DOMAIN:
				case EXCLUDING:
				case EXECUTE:
				case EXTENSION:
				case EXTERNAL:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case GLOBAL:
				case IDENTITY:
				case IMMEDIATE:
				case INCLUDING:
				case INCREMENT:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INCLUDE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LOGGED:
				case MATCH:
				case MAXVALUE:
				case MINVALUE:
				case NOTHING:
				case NULLS:
				case OBJECT:
				case OIDS:
				case OVER:
				case OWNED:
				case OWNER:
				case PARTIAL:
				case PRECEDING:
				case RANGE:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case ROUTINE:
				case RULE:
				case SECURITY:
				case SEQUENCE:
				case SESSION:
				case SHOW:
				case SIMPLE:
				case STATISTICS:
				case STORAGE:
				case TABLESPACE:
				case TEMP:
				case TEMPORARY:
				case UNBOUNDED:
				case UNLOGGED:
				case VALID:
				case VALIDATE:
				case WITHIN:
				case WITHOUT:
				case ZONE:
				case OF:
				case UESCAPE:
				case GROUPS:
				case RECURSIVE:
				case ENUM:
				case XML:
				case JSON:
				case ORDINALITY:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case REF:
				case PASSING:
				case VERSION:
				case YES:
				case STANDALONE:
				case MATERIALIZED:
				case OPERATOR:
				case SHARE:
				case ROLLUP:
				case DOCUMENT:
				case NORMALIZED:
				case NOWAIT:
				case LOCKED:
				case COLUMNS:
				case CONTENT:
				case STRIP:
				case WHITESPACE:
				case CONFLICT:
				case OVERRIDING:
				case SYSTEM:
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case ASSERTION:
				case ASSIGNMENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CALLED:
				case CATALOG:
				case CHAIN:
				case CHECKPOINT:
				case CLASS:
				case CONFIGURATION:
				case COMMENT:
				case DETACH:
				case DICTIONARY:
				case EXPRESSION:
				case INSENSITIVE:
				case DISCARD:
				case OFF:
				case INSTEAD:
				case EXPLAIN:
				case INPUT:
				case INLINE:
				case PARALLEL:
				case LEAKPROOF:
				case COMMITTED:
				case ENCODING:
				case IMPLICIT:
				case DELIMITER:
				case CURSOR:
				case EACH:
				case EVENT:
				case DEALLOCATE:
				case CONNECTION:
				case DECLARE:
				case FAMILY:
				case FORWARD:
				case EXCLUSIVE:
				case FUNCTIONS:
				case LOCATION:
				case LABEL:
				case DELIMITERS:
				case HANDLER:
				case HEADER:
				case IMMUTABLE:
				case GRANTED:
				case HOLD:
				case MAPPING:
				case OLD:
				case METHOD:
				case LOAD:
				case LISTEN:
				case MODE:
				case MOVE:
				case PROCEDURAL:
				case PARSER:
				case PROCEDURES:
				case ENCRYPTED:
				case PUBLICATION:
				case PROGRAM:
				case REFERENCING:
				case PLANS:
				case REINDEX:
				case PRIOR:
				case PASSWORD:
				case RELATIVE:
				case QUOTE:
				case ROUTINES:
				case REPLACE:
				case SNAPSHOT:
				case REFRESH:
				case PREPARE:
				case OPTIONS:
				case IMPORT:
				case INVOKER:
				case NEW:
				case PREPARED:
				case SCROLL:
				case SEQUENCES:
				case SYSID:
				case REASSIGN:
				case SERVER:
				case SUBSCRIPTION:
				case SEARCH:
				case SCHEMAS:
				case RECHECK:
				case POLICY:
				case NOTIFY:
				case LOCK:
				case RELEASE:
				case SERIALIZABLE:
				case RETURNS:
				case STATEMENT:
				case STDIN:
				case STDOUT:
				case TABLES:
				case SUPPORT:
				case STABLE:
				case TEMPLATE:
				case UNENCRYPTED:
				case VIEWS:
				case UNCOMMITTED:
				case TRANSFORM:
				case UNLISTEN:
				case TRUSTED:
				case VALIDATOR:
				case UNTIL:
				case VACUUM:
				case VOLATILE:
				case STORED:
				case WRITE:
				case STRICT:
				case TYPES:
				case WRAPPER:
				case WORK:
				case IDENTIFIER_:
					{
					setState(2212);
					ignoredIdentifier();
					}
					break;
				case CURRENT_USER:
					{
					setState(2213);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(2214);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2217);
				match(REPLICA);
				setState(2218);
				match(IDENTITY);
				setState(2225);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(2219);
					match(DEFAULT);
					}
					break;
				case USING:
					{
					{
					setState(2220);
					match(USING);
					setState(2221);
					match(INDEX);
					setState(2222);
					indexName();
					}
					}
					break;
				case FULL:
					{
					setState(2223);
					match(FULL);
					}
					break;
				case NOTHING:
					{
					setState(2224);
					match(NOTHING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public NotExistClauseContext notExistClause() {
			return getRuleContext(NotExistClauseContext.class,0);
		}
		public AddColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addColumnSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAddColumnSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAddColumnSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAddColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddColumnSpecificationContext addColumnSpecification() throws RecognitionException {
		AddColumnSpecificationContext _localctx = new AddColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_addColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2229);
			match(ADD);
			setState(2231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(2230);
				match(COLUMN);
				}
			}

			setState(2234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				{
				setState(2233);
				notExistClause();
				}
				break;
			}
			setState(2236);
			columnDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public DropColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropColumnSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropColumnSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropColumnSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropColumnSpecificationContext dropColumnSpecification() throws RecognitionException {
		DropColumnSpecificationContext _localctx = new DropColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_dropColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2238);
			match(DROP);
			setState(2240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(2239);
				match(COLUMN);
				}
			}

			setState(2243);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				{
				setState(2242);
				existClause();
				}
				break;
			}
			setState(2245);
			columnName();
			setState(2247);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2246);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModifyColumnSpecificationContext extends ParserRuleContext {
		public ModifyColumnContext modifyColumn() {
			return getRuleContext(ModifyColumnContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode GENERATED() { return getToken(DDLStatementParser.GENERATED, 0); }
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public TerminalNode ALWAYS() { return getToken(DDLStatementParser.ALWAYS, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public SequenceOptionsContext sequenceOptions() {
			return getRuleContext(SequenceOptionsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public List<AlterColumnSetOptionContext> alterColumnSetOption() {
			return getRuleContexts(AlterColumnSetOptionContext.class);
		}
		public AlterColumnSetOptionContext alterColumnSetOption(int i) {
			return getRuleContext(AlterColumnSetOptionContext.class,i);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public TerminalNode STATISTICS() { return getToken(DDLStatementParser.STATISTICS, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public AttributeOptionsContext attributeOptions() {
			return getRuleContext(AttributeOptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(DDLStatementParser.RESET, 0); }
		public TerminalNode STORAGE() { return getToken(DDLStatementParser.STORAGE, 0); }
		public TerminalNode PLAIN() { return getToken(DDLStatementParser.PLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(DDLStatementParser.EXTERNAL, 0); }
		public TerminalNode EXTENDED() { return getToken(DDLStatementParser.EXTENDED, 0); }
		public TerminalNode MAIN() { return getToken(DDLStatementParser.MAIN, 0); }
		public ModifyColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifyColumnSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterModifyColumnSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitModifyColumnSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitModifyColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModifyColumnSpecificationContext modifyColumnSpecification() throws RecognitionException {
		ModifyColumnSpecificationContext _localctx = new ModifyColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_modifyColumnSpecification);
		int _la;
		try {
			setState(2329);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2249);
				modifyColumn();
				setState(2252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(2250);
					match(SET);
					setState(2251);
					match(DATA);
					}
				}

				setState(2254);
				match(TYPE);
				setState(2255);
				dataType();
				setState(2257);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2256);
					collateClause();
					}
				}

				setState(2261);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2259);
					match(USING);
					setState(2260);
					aExpr(0);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2263);
				modifyColumn();
				setState(2264);
				match(SET);
				setState(2265);
				match(DEFAULT);
				setState(2266);
				aExpr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2268);
				modifyColumn();
				setState(2269);
				match(DROP);
				setState(2270);
				match(DEFAULT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2272);
				modifyColumn();
				setState(2273);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2274);
				match(NOT);
				setState(2275);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2277);
				modifyColumn();
				setState(2278);
				match(ADD);
				setState(2279);
				match(GENERATED);
				setState(2283);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(2280);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					{
					setState(2281);
					match(BY);
					setState(2282);
					match(DEFAULT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2285);
				match(AS);
				setState(2286);
				match(IDENTITY);
				setState(2291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(2287);
					match(LP_);
					setState(2288);
					sequenceOptions();
					setState(2289);
					match(RP_);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2293);
				modifyColumn();
				setState(2294);
				alterColumnSetOption();
				setState(2298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==SET || _la==RESTART) {
					{
					{
					setState(2295);
					alterColumnSetOption();
					}
					}
					setState(2300);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2301);
				modifyColumn();
				setState(2302);
				match(DROP);
				setState(2303);
				match(IDENTITY);
				setState(2305);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2304);
					existClause();
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2307);
				modifyColumn();
				setState(2308);
				match(SET);
				setState(2309);
				match(STATISTICS);
				setState(2310);
				match(NUMBER_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2312);
				modifyColumn();
				setState(2313);
				match(SET);
				setState(2314);
				match(LP_);
				setState(2315);
				attributeOptions();
				setState(2316);
				match(RP_);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2318);
				modifyColumn();
				setState(2319);
				match(RESET);
				setState(2320);
				match(LP_);
				setState(2321);
				attributeOptions();
				setState(2322);
				match(RP_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2324);
				modifyColumn();
				setState(2325);
				match(SET);
				setState(2326);
				match(STORAGE);
				setState(2327);
				_la = _input.LA(1);
				if ( !(((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (EXTENDED - 260)) | (1L << (EXTERNAL - 260)) | (1L << (MAIN - 260)) | (1L << (PLAIN - 260)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModifyColumnContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public ModifyColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifyColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterModifyColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitModifyColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitModifyColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModifyColumnContext modifyColumn() throws RecognitionException {
		ModifyColumnContext _localctx = new ModifyColumnContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_modifyColumn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2331);
			match(ALTER);
			setState(2333);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(2332);
				match(COLUMN);
				}
			}

			setState(2335);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterColumnSetOptionContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode GENERATED() { return getToken(DDLStatementParser.GENERATED, 0); }
		public SequenceOptionContext sequenceOption() {
			return getRuleContext(SequenceOptionContext.class,0);
		}
		public TerminalNode ALWAYS() { return getToken(DDLStatementParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode RESTART() { return getToken(DDLStatementParser.RESTART, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public AlterColumnSetOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnSetOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterColumnSetOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterColumnSetOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterColumnSetOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnSetOptionContext alterColumnSetOption() throws RecognitionException {
		AlterColumnSetOptionContext _localctx = new AlterColumnSetOptionContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_alterColumnSetOption);
		int _la;
		try {
			setState(2354);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2337);
				match(SET);
				setState(2345);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case GENERATED:
					{
					setState(2338);
					match(GENERATED);
					setState(2342);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALWAYS:
						{
						setState(2339);
						match(ALWAYS);
						}
						break;
					case BY:
						{
						setState(2340);
						match(BY);
						setState(2341);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case NO:
				case START:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case OWNED:
					{
					setState(2344);
					sequenceOption();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 2);
				{
				setState(2347);
				match(RESTART);
				setState(2352);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==NUMBER_) {
					{
					setState(2349);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(2348);
						match(WITH);
						}
					}

					setState(2351);
					match(NUMBER_);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttributeOptionsContext extends ParserRuleContext {
		public List<AttributeOptionContext> attributeOption() {
			return getRuleContexts(AttributeOptionContext.class);
		}
		public AttributeOptionContext attributeOption(int i) {
			return getRuleContext(AttributeOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public AttributeOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attributeOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAttributeOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAttributeOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAttributeOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttributeOptionsContext attributeOptions() throws RecognitionException {
		AttributeOptionsContext _localctx = new AttributeOptionsContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_attributeOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2356);
			attributeOption();
			setState(2361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2357);
				match(COMMA_);
				setState(2358);
				attributeOption();
				}
				}
				setState(2363);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttributeOptionContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DDLStatementParser.IDENTIFIER_, 0); }
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public AttributeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attributeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAttributeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAttributeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAttributeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttributeOptionContext attributeOption() throws RecognitionException {
		AttributeOptionContext _localctx = new AttributeOptionContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_attributeOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2364);
			match(IDENTIFIER_);
			setState(2365);
			match(EQ_);
			setState(2366);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddConstraintSpecificationContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TableConstraintUsingIndexContext tableConstraintUsingIndex() {
			return getRuleContext(TableConstraintUsingIndexContext.class,0);
		}
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode VALID() { return getToken(DDLStatementParser.VALID, 0); }
		public AddConstraintSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addConstraintSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAddConstraintSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAddConstraintSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAddConstraintSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddConstraintSpecificationContext addConstraintSpecification() throws RecognitionException {
		AddConstraintSpecificationContext _localctx = new AddConstraintSpecificationContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_addConstraintSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2368);
			match(ADD);
			setState(2375);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
			case 1:
				{
				setState(2369);
				tableConstraint();
				setState(2372);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2370);
					match(NOT);
					setState(2371);
					match(VALID);
					}
				}

				}
				break;
			case 2:
				{
				setState(2374);
				tableConstraintUsingIndex();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintUsingIndexContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public ConstraintOptionalParamContext constraintOptionalParam() {
			return getRuleContext(ConstraintOptionalParamContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(DDLStatementParser.UNIQUE, 0); }
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TableConstraintUsingIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraintUsingIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableConstraintUsingIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableConstraintUsingIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableConstraintUsingIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintUsingIndexContext tableConstraintUsingIndex() throws RecognitionException {
		TableConstraintUsingIndexContext _localctx = new TableConstraintUsingIndexContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_tableConstraintUsingIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2377);
				match(CONSTRAINT);
				setState(2378);
				ignoredIdentifier();
				}
			}

			setState(2383);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE:
				{
				setState(2381);
				match(UNIQUE);
				}
				break;
			case PRIMARY:
			case KEY:
				{
				setState(2382);
				primaryKey();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2385);
			match(USING);
			setState(2386);
			match(INDEX);
			setState(2387);
			indexName();
			setState(2388);
			constraintOptionalParam();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorageParameterWithValueContext extends ParserRuleContext {
		public StorageParameterContext storageParameter() {
			return getRuleContext(StorageParameterContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public StorageParameterWithValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageParameterWithValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterStorageParameterWithValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitStorageParameterWithValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitStorageParameterWithValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageParameterWithValueContext storageParameterWithValue() throws RecognitionException {
		StorageParameterWithValueContext _localctx = new StorageParameterWithValueContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_storageParameterWithValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2390);
			storageParameter();
			setState(2391);
			match(EQ_);
			setState(2392);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorageParameterContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DDLStatementParser.IDENTIFIER_, 0); }
		public StorageParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterStorageParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitStorageParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitStorageParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageParameterContext storageParameter() throws RecognitionException {
		StorageParameterContext _localctx = new StorageParameterContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_storageParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2394);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public RenameColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameColumnSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRenameColumnSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRenameColumnSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRenameColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameColumnSpecificationContext renameColumnSpecification() throws RecognitionException {
		RenameColumnSpecificationContext _localctx = new RenameColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_renameColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2396);
			match(RENAME);
			setState(2398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(2397);
				match(COLUMN);
				}
			}

			setState(2400);
			columnName();
			setState(2401);
			match(TO);
			setState(2402);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameConstraintContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public List<IgnoredIdentifierContext> ignoredIdentifier() {
			return getRuleContexts(IgnoredIdentifierContext.class);
		}
		public IgnoredIdentifierContext ignoredIdentifier(int i) {
			return getRuleContext(IgnoredIdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public RenameConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRenameConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRenameConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRenameConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameConstraintContext renameConstraint() throws RecognitionException {
		RenameConstraintContext _localctx = new RenameConstraintContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_renameConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2404);
			match(RENAME);
			setState(2405);
			match(CONSTRAINT);
			setState(2406);
			ignoredIdentifier();
			setState(2407);
			match(TO);
			setState(2408);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableSpecificationContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RenameTableSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRenameTableSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRenameTableSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRenameTableSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableSpecificationContext renameTableSpecification() throws RecognitionException {
		RenameTableSpecificationContext _localctx = new RenameTableSpecificationContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_renameTableSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2410);
			match(RENAME);
			setState(2411);
			match(TO);
			setState(2412);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNamesContext extends ParserRuleContext {
		public List<IndexNameContext> indexName() {
			return getRuleContexts(IndexNameContext.class);
		}
		public IndexNameContext indexName(int i) {
			return getRuleContext(IndexNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public IndexNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNamesContext indexNames() throws RecognitionException {
		IndexNamesContext _localctx = new IndexNamesContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_indexNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2414);
			indexName();
			setState(2419);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2415);
				match(COMMA_);
				setState(2416);
				indexName();
				}
				}
				setState(2421);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(DDLStatementParser.DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public AlterDatabaseClauseContext alterDatabaseClause() {
			return getRuleContext(AlterDatabaseClauseContext.class,0);
		}
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_alterDatabase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2422);
			match(ALTER);
			setState(2423);
			match(DATABASE);
			setState(2424);
			databaseName();
			setState(2425);
			alterDatabaseClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public CreatedbOptItemsContext createdbOptItems() {
			return getRuleContext(CreatedbOptItemsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public AlterDatabaseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterDatabaseClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterDatabaseClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterDatabaseClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseClauseContext alterDatabaseClause() throws RecognitionException {
		AlterDatabaseClauseContext _localctx = new AlterDatabaseClauseContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_alterDatabaseClause);
		int _la;
		try {
			setState(2443);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2428);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2427);
					match(WITH);
					}
				}

				setState(2431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (KEY - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (IF - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (BY - 132)) | (1L << (BEGIN - 132)) | (1L << (COMMIT - 132)) | (1L << (ROLLBACK - 132)) | (1L << (SAVEPOINT - 132)) | (1L << (DOUBLE - 132)) | (1L << (YEAR - 132)) | (1L << (MONTH - 132)) | (1L << (DAY - 132)) | (1L << (HOUR - 132)) | (1L << (MINUTE - 132)) | (1L << (SECOND - 132)) | (1L << (CURRENT - 132)) | (1L << (ENABLE - 132)) | (1L << (DISABLE - 132)) | (1L << (CALL - 132)) | (1L << (PRESERVE - 132)) | (1L << (DEFINER - 132)) | (1L << (SQL - 132)) | (1L << (CASCADED - 132)) | (1L << (LOCAL - 132)) | (1L << (CLOSE - 132)) | (1L << (NEXT - 132)) | (1L << (NAME - 132)) | (1L << (NAMES - 132)) | (1L << (TYPE - 132)) | (1L << (TEXT - 132)) | (1L << (REPEATABLE - 132)) | (1L << (VARYING - 132)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (VALUE - 197)) | (1L << (TIES - 197)) | (1L << (CUBE - 197)) | (1L << (SETS - 197)) | (1L << (OTHERS - 197)) | (1L << (AT - 197)) | (1L << (ADMIN - 197)) | (1L << (ESCAPE - 197)) | (1L << (EXCLUDE - 197)) | (1L << (PARTITION - 197)) | (1L << (UNKNOWN - 197)) | (1L << (ALWAYS - 197)) | (1L << (CASCADE - 197)) | (1L << (GENERATED - 197)) | (1L << (ISOLATION - 197)) | (1L << (LEVEL - 197)) | (1L << (NO - 197)) | (1L << (OPTION - 197)) | (1L << (PRIVILEGES - 197)) | (1L << (READ - 197)) | (1L << (ROLE - 197)) | (1L << (ROWS - 197)) | (1L << (START - 197)) | (1L << (TRANSACTION - 197)) | (1L << (ACTION - 197)) | (1L << (CACHE - 197)) | (1L << (CHARACTERISTICS - 197)) | (1L << (CLUSTER - 197)) | (1L << (COMMENTS - 197)) | (1L << (CONSTRAINTS - 197)) | (1L << (CYCLE - 197)) | (1L << (DATA - 197)) | (1L << (DATABASE - 197)) | (1L << (DEFAULTS - 197)) | (1L << (DEFERRED - 197)) | (1L << (DEPENDS - 197)) | (1L << (DOMAIN - 197)) | (1L << (EXCLUDING - 197)) | (1L << (EXECUTE - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (EXTENSION - 261)) | (1L << (EXTERNAL - 261)) | (1L << (FILTER - 261)) | (1L << (FIRST - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FORCE - 261)) | (1L << (GLOBAL - 261)) | (1L << (IDENTITY - 261)) | (1L << (IMMEDIATE - 261)) | (1L << (INCLUDING - 261)) | (1L << (INCREMENT - 261)) | (1L << (INDEXES - 261)) | (1L << (INHERIT - 261)) | (1L << (INHERITS - 261)) | (1L << (INCLUDE - 261)) | (1L << (LANGUAGE - 261)) | (1L << (LARGE - 261)) | (1L << (LAST - 261)) | (1L << (LOGGED - 261)) | (1L << (MATCH - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MINVALUE - 261)) | (1L << (NOTHING - 261)) | (1L << (NULLS - 261)) | (1L << (OBJECT - 261)) | (1L << (OIDS - 261)) | (1L << (OVER - 261)) | (1L << (OWNED - 261)) | (1L << (OWNER - 261)) | (1L << (PARTIAL - 261)) | (1L << (PRECEDING - 261)) | (1L << (RANGE - 261)) | (1L << (RENAME - 261)) | (1L << (REPLICA - 261)) | (1L << (RESET - 261)) | (1L << (RESTART - 261)) | (1L << (RESTRICT - 261)) | (1L << (ROUTINE - 261)) | (1L << (RULE - 261)) | (1L << (SECURITY - 261)) | (1L << (SEQUENCE - 261)) | (1L << (SESSION - 261)) | (1L << (SHOW - 261)) | (1L << (SIMPLE - 261)) | (1L << (STATISTICS - 261)) | (1L << (STORAGE - 261)) | (1L << (TABLESPACE - 261)) | (1L << (TEMP - 261)) | (1L << (TEMPORARY - 261)) | (1L << (UNBOUNDED - 261)) | (1L << (UNLOGGED - 261)) | (1L << (VALID - 261)) | (1L << (VALIDATE - 261)) | (1L << (WITHIN - 261)) | (1L << (WITHOUT - 261)) | (1L << (ZONE - 261)) | (1L << (OF - 261)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (UESCAPE - 325)) | (1L << (GROUPS - 325)) | (1L << (RECURSIVE - 325)) | (1L << (ENUM - 325)) | (1L << (XML - 325)) | (1L << (JSON - 325)) | (1L << (ORDINALITY - 325)) | (1L << (NFC - 325)) | (1L << (NFD - 325)) | (1L << (NFKC - 325)) | (1L << (NFKD - 325)) | (1L << (REF - 325)) | (1L << (PASSING - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (VERSION - 389)) | (1L << (YES - 389)) | (1L << (STANDALONE - 389)) | (1L << (MATERIALIZED - 389)) | (1L << (OPERATOR - 389)) | (1L << (SHARE - 389)) | (1L << (ROLLUP - 389)) | (1L << (DOCUMENT - 389)) | (1L << (NORMALIZED - 389)) | (1L << (NOWAIT - 389)) | (1L << (LOCKED - 389)) | (1L << (COLUMNS - 389)) | (1L << (CONTENT - 389)) | (1L << (STRIP - 389)) | (1L << (WHITESPACE - 389)) | (1L << (CONFLICT - 389)) | (1L << (OVERRIDING - 389)) | (1L << (SYSTEM - 389)) | (1L << (ABORT - 389)) | (1L << (ABSOLUTE - 389)) | (1L << (ACCESS - 389)) | (1L << (AFTER - 389)) | (1L << (AGGREGATE - 389)) | (1L << (ALSO - 389)) | (1L << (ATTACH - 389)) | (1L << (ATTRIBUTE - 389)) | (1L << (BACKWARD - 389)) | (1L << (BEFORE - 389)) | (1L << (ASSERTION - 389)) | (1L << (ASSIGNMENT - 389)) | (1L << (CONTINUE - 389)) | (1L << (CONVERSION - 389)) | (1L << (COPY - 389)) | (1L << (COST - 389)) | (1L << (CSV - 389)) | (1L << (CALLED - 389)) | (1L << (CATALOG - 389)) | (1L << (CHAIN - 389)) | (1L << (CHECKPOINT - 389)) | (1L << (CLASS - 389)) | (1L << (CONFIGURATION - 389)) | (1L << (COMMENT - 389)) | (1L << (DETACH - 389)) | (1L << (DICTIONARY - 389)) | (1L << (EXPRESSION - 389)) | (1L << (INSENSITIVE - 389)) | (1L << (DISCARD - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (OFF - 453)) | (1L << (INSTEAD - 453)) | (1L << (EXPLAIN - 453)) | (1L << (INPUT - 453)) | (1L << (INLINE - 453)) | (1L << (PARALLEL - 453)) | (1L << (LEAKPROOF - 453)) | (1L << (COMMITTED - 453)) | (1L << (ENCODING - 453)) | (1L << (IMPLICIT - 453)) | (1L << (DELIMITER - 453)) | (1L << (CURSOR - 453)) | (1L << (EACH - 453)) | (1L << (EVENT - 453)) | (1L << (DEALLOCATE - 453)) | (1L << (CONNECTION - 453)) | (1L << (DECLARE - 453)) | (1L << (FAMILY - 453)) | (1L << (FORWARD - 453)) | (1L << (EXCLUSIVE - 453)) | (1L << (FUNCTIONS - 453)) | (1L << (LOCATION - 453)) | (1L << (LABEL - 453)) | (1L << (DELIMITERS - 453)) | (1L << (HANDLER - 453)) | (1L << (HEADER - 453)) | (1L << (IMMUTABLE - 453)) | (1L << (GRANTED - 453)) | (1L << (HOLD - 453)) | (1L << (MAPPING - 453)) | (1L << (OLD - 453)) | (1L << (METHOD - 453)) | (1L << (LOAD - 453)) | (1L << (LISTEN - 453)) | (1L << (MODE - 453)) | (1L << (MOVE - 453)) | (1L << (PROCEDURAL - 453)) | (1L << (PARSER - 453)) | (1L << (PROCEDURES - 453)) | (1L << (ENCRYPTED - 453)) | (1L << (PUBLICATION - 453)) | (1L << (PROGRAM - 453)) | (1L << (REFERENCING - 453)) | (1L << (PLANS - 453)) | (1L << (REINDEX - 453)) | (1L << (PRIOR - 453)) | (1L << (PASSWORD - 453)) | (1L << (RELATIVE - 453)) | (1L << (QUOTE - 453)) | (1L << (ROUTINES - 453)) | (1L << (REPLACE - 453)) | (1L << (SNAPSHOT - 453)) | (1L << (REFRESH - 453)) | (1L << (PREPARE - 453)) | (1L << (OPTIONS - 453)) | (1L << (IMPORT - 453)) | (1L << (INVOKER - 453)) | (1L << (NEW - 453)) | (1L << (PREPARED - 453)) | (1L << (SCROLL - 453)) | (1L << (SEQUENCES - 453)) | (1L << (SYSID - 453)) | (1L << (REASSIGN - 453)) | (1L << (SERVER - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (SUBSCRIPTION - 517)) | (1L << (SEARCH - 517)) | (1L << (SCHEMAS - 517)) | (1L << (RECHECK - 517)) | (1L << (POLICY - 517)) | (1L << (NOTIFY - 517)) | (1L << (LOCK - 517)) | (1L << (RELEASE - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (RETURNS - 517)) | (1L << (STATEMENT - 517)) | (1L << (STDIN - 517)) | (1L << (STDOUT - 517)) | (1L << (TABLES - 517)) | (1L << (SUPPORT - 517)) | (1L << (STABLE - 517)) | (1L << (TEMPLATE - 517)) | (1L << (UNENCRYPTED - 517)) | (1L << (VIEWS - 517)) | (1L << (UNCOMMITTED - 517)) | (1L << (TRANSFORM - 517)) | (1L << (UNLISTEN - 517)) | (1L << (TRUSTED - 517)) | (1L << (VALIDATOR - 517)) | (1L << (UNTIL - 517)) | (1L << (VACUUM - 517)) | (1L << (VOLATILE - 517)) | (1L << (STORED - 517)) | (1L << (WRITE - 517)) | (1L << (STRICT - 517)) | (1L << (TYPES - 517)) | (1L << (WRAPPER - 517)) | (1L << (WORK - 517)) | (1L << (IDENTIFIER_ - 517)))) != 0)) {
					{
					setState(2430);
					createdbOptItems();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2433);
				match(RENAME);
				setState(2434);
				match(TO);
				setState(2435);
				databaseName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2436);
				match(OWNER);
				setState(2437);
				match(TO);
				setState(2438);
				roleSpec();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2439);
				match(SET);
				setState(2440);
				match(TABLESPACE);
				setState(2441);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2442);
				setResetClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedbOptItemsContext extends ParserRuleContext {
		public List<CreatedbOptItemContext> createdbOptItem() {
			return getRuleContexts(CreatedbOptItemContext.class);
		}
		public CreatedbOptItemContext createdbOptItem(int i) {
			return getRuleContext(CreatedbOptItemContext.class,i);
		}
		public CreatedbOptItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbOptItems; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreatedbOptItems(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreatedbOptItems(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreatedbOptItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbOptItemsContext createdbOptItems() throws RecognitionException {
		CreatedbOptItemsContext _localctx = new CreatedbOptItemsContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_createdbOptItems);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2446); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2445);
				createdbOptItem();
				}
				}
				setState(2448); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (KEY - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (IF - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (BY - 132)) | (1L << (BEGIN - 132)) | (1L << (COMMIT - 132)) | (1L << (ROLLBACK - 132)) | (1L << (SAVEPOINT - 132)) | (1L << (DOUBLE - 132)) | (1L << (YEAR - 132)) | (1L << (MONTH - 132)) | (1L << (DAY - 132)) | (1L << (HOUR - 132)) | (1L << (MINUTE - 132)) | (1L << (SECOND - 132)) | (1L << (CURRENT - 132)) | (1L << (ENABLE - 132)) | (1L << (DISABLE - 132)) | (1L << (CALL - 132)) | (1L << (PRESERVE - 132)) | (1L << (DEFINER - 132)) | (1L << (SQL - 132)) | (1L << (CASCADED - 132)) | (1L << (LOCAL - 132)) | (1L << (CLOSE - 132)) | (1L << (NEXT - 132)) | (1L << (NAME - 132)) | (1L << (NAMES - 132)) | (1L << (TYPE - 132)) | (1L << (TEXT - 132)) | (1L << (REPEATABLE - 132)) | (1L << (VARYING - 132)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (VALUE - 197)) | (1L << (TIES - 197)) | (1L << (CUBE - 197)) | (1L << (SETS - 197)) | (1L << (OTHERS - 197)) | (1L << (AT - 197)) | (1L << (ADMIN - 197)) | (1L << (ESCAPE - 197)) | (1L << (EXCLUDE - 197)) | (1L << (PARTITION - 197)) | (1L << (UNKNOWN - 197)) | (1L << (ALWAYS - 197)) | (1L << (CASCADE - 197)) | (1L << (GENERATED - 197)) | (1L << (ISOLATION - 197)) | (1L << (LEVEL - 197)) | (1L << (NO - 197)) | (1L << (OPTION - 197)) | (1L << (PRIVILEGES - 197)) | (1L << (READ - 197)) | (1L << (ROLE - 197)) | (1L << (ROWS - 197)) | (1L << (START - 197)) | (1L << (TRANSACTION - 197)) | (1L << (ACTION - 197)) | (1L << (CACHE - 197)) | (1L << (CHARACTERISTICS - 197)) | (1L << (CLUSTER - 197)) | (1L << (COMMENTS - 197)) | (1L << (CONSTRAINTS - 197)) | (1L << (CYCLE - 197)) | (1L << (DATA - 197)) | (1L << (DATABASE - 197)) | (1L << (DEFAULTS - 197)) | (1L << (DEFERRED - 197)) | (1L << (DEPENDS - 197)) | (1L << (DOMAIN - 197)) | (1L << (EXCLUDING - 197)) | (1L << (EXECUTE - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (EXTENSION - 261)) | (1L << (EXTERNAL - 261)) | (1L << (FILTER - 261)) | (1L << (FIRST - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FORCE - 261)) | (1L << (GLOBAL - 261)) | (1L << (IDENTITY - 261)) | (1L << (IMMEDIATE - 261)) | (1L << (INCLUDING - 261)) | (1L << (INCREMENT - 261)) | (1L << (INDEXES - 261)) | (1L << (INHERIT - 261)) | (1L << (INHERITS - 261)) | (1L << (INCLUDE - 261)) | (1L << (LANGUAGE - 261)) | (1L << (LARGE - 261)) | (1L << (LAST - 261)) | (1L << (LOGGED - 261)) | (1L << (MATCH - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MINVALUE - 261)) | (1L << (NOTHING - 261)) | (1L << (NULLS - 261)) | (1L << (OBJECT - 261)) | (1L << (OIDS - 261)) | (1L << (OVER - 261)) | (1L << (OWNED - 261)) | (1L << (OWNER - 261)) | (1L << (PARTIAL - 261)) | (1L << (PRECEDING - 261)) | (1L << (RANGE - 261)) | (1L << (RENAME - 261)) | (1L << (REPLICA - 261)) | (1L << (RESET - 261)) | (1L << (RESTART - 261)) | (1L << (RESTRICT - 261)) | (1L << (ROUTINE - 261)) | (1L << (RULE - 261)) | (1L << (SECURITY - 261)) | (1L << (SEQUENCE - 261)) | (1L << (SESSION - 261)) | (1L << (SHOW - 261)) | (1L << (SIMPLE - 261)) | (1L << (STATISTICS - 261)) | (1L << (STORAGE - 261)) | (1L << (TABLESPACE - 261)) | (1L << (TEMP - 261)) | (1L << (TEMPORARY - 261)) | (1L << (UNBOUNDED - 261)) | (1L << (UNLOGGED - 261)) | (1L << (VALID - 261)) | (1L << (VALIDATE - 261)) | (1L << (WITHIN - 261)) | (1L << (WITHOUT - 261)) | (1L << (ZONE - 261)) | (1L << (OF - 261)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (UESCAPE - 325)) | (1L << (GROUPS - 325)) | (1L << (RECURSIVE - 325)) | (1L << (ENUM - 325)) | (1L << (XML - 325)) | (1L << (JSON - 325)) | (1L << (ORDINALITY - 325)) | (1L << (NFC - 325)) | (1L << (NFD - 325)) | (1L << (NFKC - 325)) | (1L << (NFKD - 325)) | (1L << (REF - 325)) | (1L << (PASSING - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (VERSION - 389)) | (1L << (YES - 389)) | (1L << (STANDALONE - 389)) | (1L << (MATERIALIZED - 389)) | (1L << (OPERATOR - 389)) | (1L << (SHARE - 389)) | (1L << (ROLLUP - 389)) | (1L << (DOCUMENT - 389)) | (1L << (NORMALIZED - 389)) | (1L << (NOWAIT - 389)) | (1L << (LOCKED - 389)) | (1L << (COLUMNS - 389)) | (1L << (CONTENT - 389)) | (1L << (STRIP - 389)) | (1L << (WHITESPACE - 389)) | (1L << (CONFLICT - 389)) | (1L << (OVERRIDING - 389)) | (1L << (SYSTEM - 389)) | (1L << (ABORT - 389)) | (1L << (ABSOLUTE - 389)) | (1L << (ACCESS - 389)) | (1L << (AFTER - 389)) | (1L << (AGGREGATE - 389)) | (1L << (ALSO - 389)) | (1L << (ATTACH - 389)) | (1L << (ATTRIBUTE - 389)) | (1L << (BACKWARD - 389)) | (1L << (BEFORE - 389)) | (1L << (ASSERTION - 389)) | (1L << (ASSIGNMENT - 389)) | (1L << (CONTINUE - 389)) | (1L << (CONVERSION - 389)) | (1L << (COPY - 389)) | (1L << (COST - 389)) | (1L << (CSV - 389)) | (1L << (CALLED - 389)) | (1L << (CATALOG - 389)) | (1L << (CHAIN - 389)) | (1L << (CHECKPOINT - 389)) | (1L << (CLASS - 389)) | (1L << (CONFIGURATION - 389)) | (1L << (COMMENT - 389)) | (1L << (DETACH - 389)) | (1L << (DICTIONARY - 389)) | (1L << (EXPRESSION - 389)) | (1L << (INSENSITIVE - 389)) | (1L << (DISCARD - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (OFF - 453)) | (1L << (INSTEAD - 453)) | (1L << (EXPLAIN - 453)) | (1L << (INPUT - 453)) | (1L << (INLINE - 453)) | (1L << (PARALLEL - 453)) | (1L << (LEAKPROOF - 453)) | (1L << (COMMITTED - 453)) | (1L << (ENCODING - 453)) | (1L << (IMPLICIT - 453)) | (1L << (DELIMITER - 453)) | (1L << (CURSOR - 453)) | (1L << (EACH - 453)) | (1L << (EVENT - 453)) | (1L << (DEALLOCATE - 453)) | (1L << (CONNECTION - 453)) | (1L << (DECLARE - 453)) | (1L << (FAMILY - 453)) | (1L << (FORWARD - 453)) | (1L << (EXCLUSIVE - 453)) | (1L << (FUNCTIONS - 453)) | (1L << (LOCATION - 453)) | (1L << (LABEL - 453)) | (1L << (DELIMITERS - 453)) | (1L << (HANDLER - 453)) | (1L << (HEADER - 453)) | (1L << (IMMUTABLE - 453)) | (1L << (GRANTED - 453)) | (1L << (HOLD - 453)) | (1L << (MAPPING - 453)) | (1L << (OLD - 453)) | (1L << (METHOD - 453)) | (1L << (LOAD - 453)) | (1L << (LISTEN - 453)) | (1L << (MODE - 453)) | (1L << (MOVE - 453)) | (1L << (PROCEDURAL - 453)) | (1L << (PARSER - 453)) | (1L << (PROCEDURES - 453)) | (1L << (ENCRYPTED - 453)) | (1L << (PUBLICATION - 453)) | (1L << (PROGRAM - 453)) | (1L << (REFERENCING - 453)) | (1L << (PLANS - 453)) | (1L << (REINDEX - 453)) | (1L << (PRIOR - 453)) | (1L << (PASSWORD - 453)) | (1L << (RELATIVE - 453)) | (1L << (QUOTE - 453)) | (1L << (ROUTINES - 453)) | (1L << (REPLACE - 453)) | (1L << (SNAPSHOT - 453)) | (1L << (REFRESH - 453)) | (1L << (PREPARE - 453)) | (1L << (OPTIONS - 453)) | (1L << (IMPORT - 453)) | (1L << (INVOKER - 453)) | (1L << (NEW - 453)) | (1L << (PREPARED - 453)) | (1L << (SCROLL - 453)) | (1L << (SEQUENCES - 453)) | (1L << (SYSID - 453)) | (1L << (REASSIGN - 453)) | (1L << (SERVER - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (SUBSCRIPTION - 517)) | (1L << (SEARCH - 517)) | (1L << (SCHEMAS - 517)) | (1L << (RECHECK - 517)) | (1L << (POLICY - 517)) | (1L << (NOTIFY - 517)) | (1L << (LOCK - 517)) | (1L << (RELEASE - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (RETURNS - 517)) | (1L << (STATEMENT - 517)) | (1L << (STDIN - 517)) | (1L << (STDOUT - 517)) | (1L << (TABLES - 517)) | (1L << (SUPPORT - 517)) | (1L << (STABLE - 517)) | (1L << (TEMPLATE - 517)) | (1L << (UNENCRYPTED - 517)) | (1L << (VIEWS - 517)) | (1L << (UNCOMMITTED - 517)) | (1L << (TRANSFORM - 517)) | (1L << (UNLISTEN - 517)) | (1L << (TRUSTED - 517)) | (1L << (VALIDATOR - 517)) | (1L << (UNTIL - 517)) | (1L << (VACUUM - 517)) | (1L << (VOLATILE - 517)) | (1L << (STORED - 517)) | (1L << (WRITE - 517)) | (1L << (STRICT - 517)) | (1L << (TYPES - 517)) | (1L << (WRAPPER - 517)) | (1L << (WORK - 517)) | (1L << (IDENTIFIER_ - 517)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedbOptItemContext extends ParserRuleContext {
		public CreatedbOptNameContext createdbOptName() {
			return getRuleContext(CreatedbOptNameContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public CreatedbOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreatedbOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreatedbOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreatedbOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbOptItemContext createdbOptItem() throws RecognitionException {
		CreatedbOptItemContext _localctx = new CreatedbOptItemContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_createdbOptItem);
		int _la;
		try {
			setState(2468);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2450);
				createdbOptName();
				setState(2452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(2451);
					match(EQ_);
					}
				}

				setState(2454);
				signedIconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2456);
				createdbOptName();
				setState(2458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(2457);
					match(EQ_);
					}
				}

				setState(2460);
				booleanOrString();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2462);
				createdbOptName();
				setState(2464);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(2463);
					match(EQ_);
					}
				}

				setState(2466);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableCmdsContext extends ParserRuleContext {
		public List<AlterTableCmdContext> alterTableCmd() {
			return getRuleContexts(AlterTableCmdContext.class);
		}
		public AlterTableCmdContext alterTableCmd(int i) {
			return getRuleContext(AlterTableCmdContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public AlterTableCmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableCmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTableCmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTableCmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTableCmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableCmdsContext alterTableCmds() throws RecognitionException {
		AlterTableCmdsContext _localctx = new AlterTableCmdsContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_alterTableCmds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2470);
			alterTableCmd();
			setState(2475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2471);
				match(COMMA_);
				setState(2472);
				alterTableCmd();
				}
				}
				setState(2477);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableCmdContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public NotExistClauseContext notExistClause() {
			return getRuleContext(NotExistClauseContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public List<ColIdContext> colId() {
			return getRuleContexts(ColIdContext.class);
		}
		public ColIdContext colId(int i) {
			return getRuleContext(ColIdContext.class,i);
		}
		public AlterColumnDefaultContext alterColumnDefault() {
			return getRuleContext(AlterColumnDefaultContext.class,0);
		}
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode STATISTICS() { return getToken(DDLStatementParser.STATISTICS, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(DDLStatementParser.RESET, 0); }
		public TerminalNode STORAGE() { return getToken(DDLStatementParser.STORAGE, 0); }
		public TerminalNode GENERATED() { return getToken(DDLStatementParser.GENERATED, 0); }
		public GeneratedWhenContext generatedWhen() {
			return getRuleContext(GeneratedWhenContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public ParenthesizedSeqOptListContext parenthesizedSeqOptList() {
			return getRuleContext(ParenthesizedSeqOptListContext.class,0);
		}
		public AlterIdentityColumnOptionListContext alterIdentityColumnOptionList() {
			return getRuleContext(AlterIdentityColumnOptionListContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public SetDataContext setData() {
			return getRuleContext(SetDataContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public AlterUsingContext alterUsing() {
			return getRuleContext(AlterUsingContext.class,0);
		}
		public AlterGenericOptionsContext alterGenericOptions() {
			return getRuleContext(AlterGenericOptionsContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(DDLStatementParser.VALIDATE, 0); }
		public TerminalNode WITHOUT() { return getToken(DDLStatementParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(DDLStatementParser.OIDS, 0); }
		public TerminalNode CLUSTER() { return getToken(DDLStatementParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode LOGGED() { return getToken(DDLStatementParser.LOGGED, 0); }
		public TerminalNode UNLOGGED() { return getToken(DDLStatementParser.UNLOGGED, 0); }
		public TerminalNode ENABLE() { return getToken(DDLStatementParser.ENABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public TerminalNode ALWAYS() { return getToken(DDLStatementParser.ALWAYS, 0); }
		public TerminalNode REPLICA() { return getToken(DDLStatementParser.REPLICA, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public TerminalNode DISABLE() { return getToken(DDLStatementParser.DISABLE, 0); }
		public TerminalNode RULE() { return getToken(DDLStatementParser.RULE, 0); }
		public TerminalNode INHERIT() { return getToken(DDLStatementParser.INHERIT, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public ReplicaIdentityContext replicaIdentity() {
			return getRuleContext(ReplicaIdentityContext.class,0);
		}
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode LEVEL() { return getToken(DDLStatementParser.LEVEL, 0); }
		public TerminalNode SECURITY() { return getToken(DDLStatementParser.SECURITY, 0); }
		public TerminalNode FORCE() { return getToken(DDLStatementParser.FORCE, 0); }
		public AlterTableCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableCmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTableCmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTableCmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTableCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableCmdContext alterTableCmd() throws RecognitionException {
		AlterTableCmdContext _localctx = new AlterTableCmdContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_alterTableCmd);
		int _la;
		try {
			setState(2746);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2478);
				match(ADD);
				setState(2480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2479);
					match(COLUMN);
					}
				}

				setState(2483);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
				case 1:
					{
					setState(2482);
					notExistClause();
					}
					break;
				}
				setState(2485);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2486);
				match(ALTER);
				setState(2488);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2487);
					match(COLUMN);
					}
				}

				setState(2490);
				colId();
				setState(2491);
				alterColumnDefault();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2493);
				match(ALTER);
				setState(2495);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2494);
					match(COLUMN);
					}
				}

				setState(2497);
				colId();
				setState(2498);
				match(DROP);
				setState(2499);
				match(NOT);
				setState(2500);
				match(NULL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2502);
				match(ALTER);
				setState(2504);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2503);
					match(COLUMN);
					}
				}

				setState(2506);
				colId();
				setState(2507);
				match(SET);
				setState(2508);
				match(NOT);
				setState(2509);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2511);
				match(ALTER);
				setState(2513);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2512);
					match(COLUMN);
					}
				}

				setState(2515);
				colId();
				setState(2516);
				match(SET);
				setState(2517);
				match(STATISTICS);
				setState(2518);
				signedIconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2520);
				match(ALTER);
				setState(2522);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2521);
					match(COLUMN);
					}
				}

				setState(2524);
				match(NUMBER_);
				setState(2525);
				match(SET);
				setState(2526);
				match(STATISTICS);
				setState(2527);
				signedIconst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2528);
				match(ALTER);
				setState(2530);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2529);
					match(COLUMN);
					}
				}

				setState(2532);
				colId();
				setState(2533);
				match(SET);
				setState(2534);
				reloptions();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2536);
				match(ALTER);
				setState(2538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2537);
					match(COLUMN);
					}
				}

				setState(2540);
				colId();
				setState(2541);
				match(RESET);
				setState(2542);
				reloptions();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2544);
				match(ALTER);
				setState(2546);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2545);
					match(COLUMN);
					}
				}

				setState(2548);
				colId();
				setState(2549);
				match(SET);
				setState(2550);
				match(STORAGE);
				setState(2551);
				colId();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2553);
				match(ALTER);
				setState(2555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2554);
					match(COLUMN);
					}
				}

				setState(2557);
				colId();
				setState(2558);
				match(ADD);
				setState(2559);
				match(GENERATED);
				setState(2560);
				generatedWhen();
				setState(2561);
				match(AS);
				setState(2562);
				match(IDENTITY);
				setState(2564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(2563);
					parenthesizedSeqOptList();
					}
				}

				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2566);
				match(ALTER);
				setState(2568);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2567);
					match(COLUMN);
					}
				}

				setState(2570);
				colId();
				setState(2571);
				alterIdentityColumnOptionList();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2573);
				match(ALTER);
				setState(2575);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2574);
					match(COLUMN);
					}
				}

				setState(2577);
				colId();
				setState(2578);
				match(DROP);
				setState(2579);
				match(IDENTITY);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2581);
				match(ALTER);
				setState(2583);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2582);
					match(COLUMN);
					}
				}

				setState(2585);
				colId();
				setState(2586);
				match(DROP);
				setState(2587);
				match(IDENTITY);
				setState(2588);
				existClause();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2590);
				match(DROP);
				setState(2592);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2591);
					match(COLUMN);
					}
				}

				setState(2594);
				existClause();
				setState(2595);
				colId();
				setState(2597);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2596);
					dropBehavior();
					}
				}

				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2599);
				match(DROP);
				setState(2601);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2600);
					match(COLUMN);
					}
				}

				setState(2603);
				colId();
				setState(2605);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2604);
					dropBehavior();
					}
				}

				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2607);
				match(ALTER);
				setState(2609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2608);
					match(COLUMN);
					}
				}

				setState(2611);
				colId();
				setState(2613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(2612);
					setData();
					}
				}

				setState(2615);
				match(TYPE);
				setState(2616);
				typeName();
				setState(2618);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2617);
					collateClause();
					}
				}

				setState(2621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2620);
					alterUsing();
					}
				}

				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2623);
				match(ALTER);
				setState(2625);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2624);
					match(COLUMN);
					}
				}

				setState(2627);
				colId();
				setState(2628);
				alterGenericOptions();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2630);
				match(ADD);
				setState(2631);
				tableConstraint();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2632);
				match(ALTER);
				setState(2633);
				match(CONSTRAINT);
				setState(2634);
				name();
				setState(2635);
				constraintAttributeSpec();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2637);
				match(VALIDATE);
				setState(2638);
				match(CONSTRAINT);
				setState(2639);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2640);
				match(DROP);
				setState(2641);
				match(CONSTRAINT);
				setState(2642);
				existClause();
				setState(2643);
				name();
				setState(2645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2644);
					dropBehavior();
					}
				}

				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2647);
				match(DROP);
				setState(2648);
				match(CONSTRAINT);
				setState(2649);
				name();
				setState(2651);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2650);
					dropBehavior();
					}
				}

				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2653);
				match(SET);
				setState(2654);
				match(WITHOUT);
				setState(2655);
				match(OIDS);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2656);
				match(CLUSTER);
				setState(2657);
				match(ON);
				setState(2658);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2659);
				match(SET);
				setState(2660);
				match(WITHOUT);
				setState(2661);
				match(CLUSTER);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2662);
				match(SET);
				setState(2663);
				match(LOGGED);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2664);
				match(SET);
				setState(2665);
				match(UNLOGGED);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(2666);
				match(ENABLE);
				setState(2667);
				match(TRIGGER);
				setState(2668);
				name();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(2669);
				match(ENABLE);
				setState(2670);
				match(ALWAYS);
				setState(2671);
				match(TRIGGER);
				setState(2672);
				name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(2673);
				match(ENABLE);
				setState(2674);
				match(REPLICA);
				setState(2675);
				match(TRIGGER);
				setState(2676);
				name();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(2677);
				match(ENABLE);
				setState(2678);
				match(TRIGGER);
				setState(2679);
				match(ALL);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(2680);
				match(ENABLE);
				setState(2681);
				match(TRIGGER);
				setState(2682);
				match(USER);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(2683);
				match(DISABLE);
				setState(2684);
				match(TRIGGER);
				setState(2685);
				name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(2686);
				match(DISABLE);
				setState(2687);
				match(TRIGGER);
				setState(2688);
				match(ALL);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(2689);
				match(DISABLE);
				setState(2690);
				match(TRIGGER);
				setState(2691);
				match(USER);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(2692);
				match(ENABLE);
				setState(2693);
				match(RULE);
				setState(2694);
				name();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(2695);
				match(ENABLE);
				setState(2696);
				match(ALWAYS);
				setState(2697);
				match(RULE);
				setState(2698);
				name();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(2699);
				match(ENABLE);
				setState(2700);
				match(REPLICA);
				setState(2701);
				match(RULE);
				setState(2702);
				name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(2703);
				match(DISABLE);
				setState(2704);
				match(RULE);
				setState(2705);
				name();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(2706);
				match(INHERIT);
				setState(2707);
				qualifiedName();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(2708);
				match(NO);
				setState(2709);
				match(INHERIT);
				setState(2710);
				qualifiedName();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(2711);
				match(OF);
				setState(2712);
				anyName();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(2713);
				match(NOT);
				setState(2714);
				match(OF);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(2715);
				match(OWNER);
				setState(2716);
				match(TO);
				setState(2717);
				roleSpec();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(2718);
				match(SET);
				setState(2719);
				match(TABLESPACE);
				setState(2720);
				name();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(2721);
				match(SET);
				setState(2722);
				reloptions();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(2723);
				match(RESET);
				setState(2724);
				reloptions();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(2725);
				match(REPLICA);
				setState(2726);
				match(IDENTITY);
				setState(2727);
				replicaIdentity();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(2728);
				match(ENABLE);
				setState(2729);
				match(ROW);
				setState(2730);
				match(LEVEL);
				setState(2731);
				match(SECURITY);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(2732);
				match(DISABLE);
				setState(2733);
				match(ROW);
				setState(2734);
				match(LEVEL);
				setState(2735);
				match(SECURITY);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(2736);
				match(FORCE);
				setState(2737);
				match(ROW);
				setState(2738);
				match(LEVEL);
				setState(2739);
				match(SECURITY);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(2740);
				match(NO);
				setState(2741);
				match(FORCE);
				setState(2742);
				match(ROW);
				setState(2743);
				match(LEVEL);
				setState(2744);
				match(SECURITY);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(2745);
				alterGenericOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttributeSpecContext extends ParserRuleContext {
		public List<ConstraintAttributeElemContext> constraintAttributeElem() {
			return getRuleContexts(ConstraintAttributeElemContext.class);
		}
		public ConstraintAttributeElemContext constraintAttributeElem(int i) {
			return getRuleContext(ConstraintAttributeElemContext.class,i);
		}
		public ConstraintAttributeSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttributeSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConstraintAttributeSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConstraintAttributeSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConstraintAttributeSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttributeSpecContext constraintAttributeSpec() throws RecognitionException {
		ConstraintAttributeSpecContext _localctx = new ConstraintAttributeSpecContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_constraintAttributeSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2751);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NOT || ((((_la - 231)) & ~0x3f) == 0 && ((1L << (_la - 231)) & ((1L << (NO - 231)) | (1L << (DEFERRABLE - 231)) | (1L << (INITIALLY - 231)))) != 0)) {
				{
				{
				setState(2748);
				constraintAttributeElem();
				}
				}
				setState(2753);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttributeElemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(DDLStatementParser.DEFERRABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(DDLStatementParser.INITIALLY, 0); }
		public TerminalNode IMMEDIATE() { return getToken(DDLStatementParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(DDLStatementParser.DEFERRED, 0); }
		public TerminalNode VALID() { return getToken(DDLStatementParser.VALID, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(DDLStatementParser.INHERIT, 0); }
		public ConstraintAttributeElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttributeElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConstraintAttributeElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConstraintAttributeElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConstraintAttributeElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttributeElemContext constraintAttributeElem() throws RecognitionException {
		ConstraintAttributeElemContext _localctx = new ConstraintAttributeElemContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_constraintAttributeElem);
		try {
			setState(2765);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2754);
				match(NOT);
				setState(2755);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2756);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2757);
				match(INITIALLY);
				setState(2758);
				match(IMMEDIATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2759);
				match(INITIALLY);
				setState(2760);
				match(DEFERRED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2761);
				match(NOT);
				setState(2762);
				match(VALID);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2763);
				match(NO);
				setState(2764);
				match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGenericOptionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(DDLStatementParser.OPTIONS, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AlterGenericOptionListContext alterGenericOptionList() {
			return getRuleContext(AlterGenericOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public AlterGenericOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGenericOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterGenericOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterGenericOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterGenericOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGenericOptionsContext alterGenericOptions() throws RecognitionException {
		AlterGenericOptionsContext _localctx = new AlterGenericOptionsContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_alterGenericOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2767);
			match(OPTIONS);
			setState(2768);
			match(LP_);
			setState(2769);
			alterGenericOptionList();
			setState(2770);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGenericOptionListContext extends ParserRuleContext {
		public List<AlterGenericOptionElemContext> alterGenericOptionElem() {
			return getRuleContexts(AlterGenericOptionElemContext.class);
		}
		public AlterGenericOptionElemContext alterGenericOptionElem(int i) {
			return getRuleContext(AlterGenericOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public AlterGenericOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGenericOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterGenericOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterGenericOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterGenericOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGenericOptionListContext alterGenericOptionList() throws RecognitionException {
		AlterGenericOptionListContext _localctx = new AlterGenericOptionListContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_alterGenericOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2772);
			alterGenericOptionElem();
			setState(2777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2773);
				match(COMMA_);
				setState(2774);
				alterGenericOptionElem();
				}
				}
				setState(2779);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGenericOptionElemContext extends ParserRuleContext {
		public GenericOptionElemContext genericOptionElem() {
			return getRuleContext(GenericOptionElemContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public GenericOptionNameContext genericOptionName() {
			return getRuleContext(GenericOptionNameContext.class,0);
		}
		public AlterGenericOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGenericOptionElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterGenericOptionElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterGenericOptionElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterGenericOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGenericOptionElemContext alterGenericOptionElem() throws RecognitionException {
		AlterGenericOptionElemContext _localctx = new AlterGenericOptionElemContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_alterGenericOptionElem);
		try {
			setState(2787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2780);
				genericOptionElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2781);
				match(SET);
				setState(2782);
				genericOptionElem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2783);
				match(ADD);
				setState(2784);
				genericOptionElem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2785);
				match(DROP);
				setState(2786);
				genericOptionName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericOptionNameContext extends ParserRuleContext {
		public ColLableContext colLable() {
			return getRuleContext(ColLableContext.class,0);
		}
		public GenericOptionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGenericOptionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGenericOptionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGenericOptionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionNameContext genericOptionName() throws RecognitionException {
		GenericOptionNameContext _localctx = new GenericOptionNameContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_genericOptionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2789);
			colLable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropBehaviorContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public DropBehaviorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropBehavior; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropBehavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropBehavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropBehavior(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropBehaviorContext dropBehavior() throws RecognitionException {
		DropBehaviorContext _localctx = new DropBehaviorContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_dropBehavior);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2791);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUsingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public AlterUsingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUsing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterUsing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterUsing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterUsing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUsingContext alterUsing() throws RecognitionException {
		AlterUsingContext _localctx = new AlterUsingContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_alterUsing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2793);
			match(USING);
			setState(2794);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetDataContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public SetDataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setData; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSetData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSetData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSetData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetDataContext setData() throws RecognitionException {
		SetDataContext _localctx = new SetDataContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_setData);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2796);
			match(SET);
			setState(2797);
			match(DATA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIdentityColumnOptionListContext extends ParserRuleContext {
		public List<AlterIdentityColumnOptionContext> alterIdentityColumnOption() {
			return getRuleContexts(AlterIdentityColumnOptionContext.class);
		}
		public AlterIdentityColumnOptionContext alterIdentityColumnOption(int i) {
			return getRuleContext(AlterIdentityColumnOptionContext.class,i);
		}
		public AlterIdentityColumnOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIdentityColumnOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterIdentityColumnOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterIdentityColumnOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterIdentityColumnOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIdentityColumnOptionListContext alterIdentityColumnOptionList() throws RecognitionException {
		AlterIdentityColumnOptionListContext _localctx = new AlterIdentityColumnOptionListContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_alterIdentityColumnOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2800); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2799);
				alterIdentityColumnOption();
				}
				}
				setState(2802); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==SET || _la==RESTART );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIdentityColumnOptionContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(DDLStatementParser.RESTART, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public SeqOptElemContext seqOptElem() {
			return getRuleContext(SeqOptElemContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(DDLStatementParser.GENERATED, 0); }
		public GeneratedWhenContext generatedWhen() {
			return getRuleContext(GeneratedWhenContext.class,0);
		}
		public AlterIdentityColumnOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIdentityColumnOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterIdentityColumnOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterIdentityColumnOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterIdentityColumnOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIdentityColumnOptionContext alterIdentityColumnOption() throws RecognitionException {
		AlterIdentityColumnOptionContext _localctx = new AlterIdentityColumnOptionContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_alterIdentityColumnOption);
		int _la;
		try {
			setState(2815);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2804);
				match(RESTART);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2805);
				match(RESTART);
				setState(2807);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2806);
					match(WITH);
					}
				}

				setState(2809);
				numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2810);
				match(SET);
				setState(2811);
				seqOptElem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2812);
				match(SET);
				setState(2813);
				match(GENERATED);
				setState(2814);
				generatedWhen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterColumnDefaultContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public AlterColumnDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterColumnDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterColumnDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterColumnDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnDefaultContext alterColumnDefault() throws RecognitionException {
		AlterColumnDefaultContext _localctx = new AlterColumnDefaultContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_alterColumnDefault);
		try {
			setState(2822);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2817);
				match(SET);
				setState(2818);
				match(DEFAULT);
				setState(2819);
				aExpr(0);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2820);
				match(DROP);
				setState(2821);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public AlterOperatorClausesContext alterOperatorClauses() {
			return getRuleContext(AlterOperatorClausesContext.class,0);
		}
		public AlterOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorContext alterOperator() throws RecognitionException {
		AlterOperatorContext _localctx = new AlterOperatorContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_alterOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2824);
			match(ALTER);
			setState(2825);
			match(OPERATOR);
			setState(2826);
			alterOperatorClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorClassContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(DDLStatementParser.CLASS, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterOperatorClassClausesContext alterOperatorClassClauses() {
			return getRuleContext(AlterOperatorClassClausesContext.class,0);
		}
		public AlterOperatorClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterOperatorClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterOperatorClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterOperatorClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorClassContext alterOperatorClass() throws RecognitionException {
		AlterOperatorClassContext _localctx = new AlterOperatorClassContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_alterOperatorClass);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2828);
			match(ALTER);
			setState(2829);
			match(OPERATOR);
			setState(2830);
			match(CLASS);
			setState(2831);
			anyName();
			setState(2832);
			match(USING);
			setState(2833);
			name();
			setState(2834);
			alterOperatorClassClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorClassClausesContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterOperatorClassClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorClassClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterOperatorClassClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterOperatorClassClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterOperatorClassClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorClassClausesContext alterOperatorClassClauses() throws RecognitionException {
		AlterOperatorClassClausesContext _localctx = new AlterOperatorClassClausesContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_alterOperatorClassClauses);
		try {
			setState(2845);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(2836);
				match(RENAME);
				setState(2837);
				match(TO);
				setState(2838);
				name();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2839);
				match(SET);
				setState(2840);
				match(SCHEMA);
				setState(2841);
				name();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2842);
				match(OWNER);
				setState(2843);
				match(TO);
				setState(2844);
				roleSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorFamilyContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(DDLStatementParser.FAMILY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterOperatorFamilyClausesContext alterOperatorFamilyClauses() {
			return getRuleContext(AlterOperatorFamilyClausesContext.class,0);
		}
		public AlterOperatorFamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorFamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterOperatorFamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterOperatorFamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterOperatorFamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorFamilyContext alterOperatorFamily() throws RecognitionException {
		AlterOperatorFamilyContext _localctx = new AlterOperatorFamilyContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_alterOperatorFamily);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2847);
			match(ALTER);
			setState(2848);
			match(OPERATOR);
			setState(2849);
			match(FAMILY);
			setState(2850);
			anyName();
			setState(2851);
			match(USING);
			setState(2852);
			name();
			setState(2853);
			alterOperatorFamilyClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorFamilyClausesContext extends ParserRuleContext {
		public OpclassItemListContext opclassItemList() {
			return getRuleContext(OpclassItemListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public AlterOperatorClassClausesContext alterOperatorClassClauses() {
			return getRuleContext(AlterOperatorClassClausesContext.class,0);
		}
		public AlterOperatorFamilyClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorFamilyClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterOperatorFamilyClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterOperatorFamilyClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterOperatorFamilyClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorFamilyClausesContext alterOperatorFamilyClauses() throws RecognitionException {
		AlterOperatorFamilyClausesContext _localctx = new AlterOperatorFamilyClausesContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_alterOperatorFamilyClauses);
		int _la;
		try {
			setState(2858);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DROP:
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2855);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2856);
				opclassItemList();
				}
				break;
			case SET:
			case OWNER:
			case RENAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(2857);
				alterOperatorClassClauses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpclassItemListContext extends ParserRuleContext {
		public List<OpclassItemContext> opclassItem() {
			return getRuleContexts(OpclassItemContext.class);
		}
		public OpclassItemContext opclassItem(int i) {
			return getRuleContext(OpclassItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public OpclassItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclassItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOpclassItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOpclassItemList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOpclassItemList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpclassItemListContext opclassItemList() throws RecognitionException {
		OpclassItemListContext _localctx = new OpclassItemListContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_opclassItemList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2860);
			opclassItem();
			setState(2865);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2861);
				match(COMMA_);
				setState(2862);
				opclassItem();
				}
				}
				setState(2867);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpclassItemContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public OpclassPurposeContext opclassPurpose() {
			return getRuleContext(OpclassPurposeContext.class,0);
		}
		public TerminalNode RECHECK() { return getToken(DDLStatementParser.RECHECK, 0); }
		public OperatorWithArgtypesContext operatorWithArgtypes() {
			return getRuleContext(OperatorWithArgtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode STORAGE() { return getToken(DDLStatementParser.STORAGE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public OpclassItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclassItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOpclassItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOpclassItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOpclassItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpclassItemContext opclassItem() throws RecognitionException {
		OpclassItemContext _localctx = new OpclassItemContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_opclassItem);
		int _la;
		try {
			setState(2898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2868);
				match(OPERATOR);
				setState(2869);
				match(NUMBER_);
				setState(2870);
				anyOperator();
				setState(2872);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2871);
					opclassPurpose();
					}
				}

				setState(2875);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RECHECK) {
					{
					setState(2874);
					match(RECHECK);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2877);
				match(OPERATOR);
				setState(2878);
				match(NUMBER_);
				setState(2879);
				operatorWithArgtypes();
				setState(2881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2880);
					opclassPurpose();
					}
				}

				setState(2884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RECHECK) {
					{
					setState(2883);
					match(RECHECK);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2886);
				match(FUNCTION);
				setState(2887);
				match(NUMBER_);
				setState(2888);
				functionWithArgtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2889);
				match(FUNCTION);
				setState(2890);
				match(NUMBER_);
				setState(2891);
				match(LP_);
				setState(2892);
				typeList();
				setState(2893);
				match(RP_);
				setState(2894);
				functionWithArgtypes();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2896);
				match(STORAGE);
				setState(2897);
				typeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpclassPurposeContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public TerminalNode ORDER() { return getToken(DDLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public OpclassPurposeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclassPurpose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOpclassPurpose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOpclassPurpose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOpclassPurpose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpclassPurposeContext opclassPurpose() throws RecognitionException {
		OpclassPurposeContext _localctx = new OpclassPurposeContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_opclassPurpose);
		try {
			setState(2906);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2900);
				match(FOR);
				setState(2901);
				match(SEARCH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2902);
				match(FOR);
				setState(2903);
				match(ORDER);
				setState(2904);
				match(BY);
				setState(2905);
				anyName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorClausesContext extends ParserRuleContext {
		public OperatorWithArgtypesContext operatorWithArgtypes() {
			return getRuleContext(OperatorWithArgtypesContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public OperatorDefListContext operatorDefList() {
			return getRuleContext(OperatorDefListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterOperatorClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterOperatorClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterOperatorClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterOperatorClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorClausesContext alterOperatorClauses() throws RecognitionException {
		AlterOperatorClausesContext _localctx = new AlterOperatorClausesContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_alterOperatorClauses);
		try {
			setState(2924);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2908);
				operatorWithArgtypes();
				setState(2909);
				match(SET);
				setState(2910);
				match(SCHEMA);
				setState(2911);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2913);
				operatorWithArgtypes();
				setState(2914);
				match(SET);
				setState(2915);
				match(LP_);
				setState(2916);
				operatorDefList();
				setState(2917);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2919);
				operatorWithArgtypes();
				setState(2920);
				match(OWNER);
				setState(2921);
				match(TO);
				setState(2922);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorDefListContext extends ParserRuleContext {
		public List<OperatorDefElemContext> operatorDefElem() {
			return getRuleContexts(OperatorDefElemContext.class);
		}
		public OperatorDefElemContext operatorDefElem(int i) {
			return getRuleContext(OperatorDefElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public OperatorDefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorDefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOperatorDefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOperatorDefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOperatorDefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorDefListContext operatorDefList() throws RecognitionException {
		OperatorDefListContext _localctx = new OperatorDefListContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_operatorDefList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2926);
			operatorDefElem();
			setState(2931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2927);
				match(COMMA_);
				setState(2928);
				operatorDefElem();
				}
				}
				setState(2933);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorDefElemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public TerminalNode NONE() { return getToken(DDLStatementParser.NONE, 0); }
		public OperatorDefArgContext operatorDefArg() {
			return getRuleContext(OperatorDefArgContext.class,0);
		}
		public OperatorDefElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorDefElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOperatorDefElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOperatorDefElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOperatorDefElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorDefElemContext operatorDefElem() throws RecognitionException {
		OperatorDefElemContext _localctx = new OperatorDefElemContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_operatorDefElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2934);
			colLabel();
			setState(2935);
			match(EQ_);
			setState(2938);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(2936);
				match(NONE);
				}
				break;
			case T__0:
			case T__1:
			case AND_:
			case OR_:
			case NOT_:
			case TILDE_:
			case VERTICAL_BAR_:
			case AMPERSAND_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case CARET_:
			case MOD_:
			case COLON_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case BACKSLASH_:
			case DOT_:
			case DOT_ASTERISK_:
			case SAFE_EQ_:
			case DEQ_:
			case EQ_:
			case CQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case POUND_:
			case LP_:
			case RP_:
			case LBE_:
			case RBE_:
			case LBT_:
			case RBT_:
			case COMMA_:
			case DQ_:
			case SQ_:
			case BQ_:
			case QUESTION_:
			case AT_:
			case SEMI_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case TYPE_CAST_:
			case SELECT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case CREATE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case GRANT:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case COLUMN:
			case INDEX:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case FOREIGN:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case INTO:
			case WITH:
			case UNION:
			case DISTINCT:
			case CASE:
			case WHEN:
			case CAST:
			case FROM:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case USING:
			case WHERE:
			case AS:
			case ON:
			case IF:
			case ELSE:
			case THEN:
			case FOR:
			case TO:
			case AND:
			case OR:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case IN:
			case ALL:
			case ANY:
			case LIKE:
			case ORDER:
			case GROUP:
			case BY:
			case ASC:
			case DESC:
			case HAVING:
			case LIMIT:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case ARRAY:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DO:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case BOTH:
			case LEADING:
			case TRAILING:
			case INTERSECT:
			case EXCEPT:
			case TIES:
			case FETCH:
			case CUBE:
			case SETS:
			case WINDOW:
			case OTHERS:
			case OVERLAPS:
			case SOME:
			case AT:
			case DEC:
			case END:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case CHECK:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case REFERENCES:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COLLATE:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRABLE:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INITIALLY:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case ONLY:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case INT2:
			case INT4:
			case INT8:
			case FLOAT:
			case FLOAT4:
			case FLOAT8:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case SYMMETRIC:
			case DOCUMENT:
			case NORMALIZED:
			case ASYMMETRIC:
			case VARIADIC:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case PLACING:
			case RETURNING:
			case LATERAL:
			case ANALYSE:
			case ANALYZE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				{
				setState(2937);
				operatorDefArg();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorDefArgContext extends ParserRuleContext {
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public QualAllOpContext qualAllOp() {
			return getRuleContext(QualAllOpContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public OperatorDefArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorDefArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOperatorDefArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOperatorDefArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOperatorDefArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorDefArgContext operatorDefArg() throws RecognitionException {
		OperatorDefArgContext _localctx = new OperatorDefArgContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_operatorDefArg);
		try {
			setState(2945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2940);
				funcType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2941);
				reservedKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2942);
				qualAllOp();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2943);
				numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2944);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorWithArgtypesContext extends ParserRuleContext {
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public OperArgtypesContext operArgtypes() {
			return getRuleContext(OperArgtypesContext.class,0);
		}
		public OperatorWithArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorWithArgtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOperatorWithArgtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOperatorWithArgtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOperatorWithArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorWithArgtypesContext operatorWithArgtypes() throws RecognitionException {
		OperatorWithArgtypesContext _localctx = new OperatorWithArgtypesContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_operatorWithArgtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2947);
			anyOperator();
			setState(2948);
			operArgtypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterAggregateContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(DDLStatementParser.AGGREGATE, 0); }
		public AggregateSignatureContext aggregateSignature() {
			return getRuleContext(AggregateSignatureContext.class,0);
		}
		public AlterAggregateDefinitionClauseContext alterAggregateDefinitionClause() {
			return getRuleContext(AlterAggregateDefinitionClauseContext.class,0);
		}
		public AlterAggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterAggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterAggregate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterAggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterAggregateContext alterAggregate() throws RecognitionException {
		AlterAggregateContext _localctx = new AlterAggregateContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_alterAggregate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2950);
			match(ALTER);
			setState(2951);
			match(AGGREGATE);
			setState(2952);
			aggregateSignature();
			setState(2953);
			alterAggregateDefinitionClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateSignatureContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public AggrArgsContext aggrArgs() {
			return getRuleContext(AggrArgsContext.class,0);
		}
		public AggregateSignatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateSignature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAggregateSignature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAggregateSignature(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAggregateSignature(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateSignatureContext aggregateSignature() throws RecognitionException {
		AggregateSignatureContext _localctx = new AggregateSignatureContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_aggregateSignature);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2955);
			funcName();
			setState(2956);
			aggrArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggrArgsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public List<AggrArgsListContext> aggrArgsList() {
			return getRuleContexts(AggrArgsListContext.class);
		}
		public AggrArgsListContext aggrArgsList(int i) {
			return getRuleContext(AggrArgsListContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(DDLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public AggrArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggrArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAggrArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAggrArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAggrArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggrArgsContext aggrArgs() throws RecognitionException {
		AggrArgsContext _localctx = new AggrArgsContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_aggrArgs);
		try {
			setState(2978);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2958);
				match(LP_);
				setState(2959);
				match(ASTERISK_);
				setState(2960);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2961);
				match(LP_);
				setState(2962);
				aggrArgsList();
				setState(2963);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2965);
				match(LP_);
				setState(2966);
				match(ORDER);
				setState(2967);
				match(BY);
				setState(2968);
				aggrArgsList();
				setState(2969);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2971);
				match(LP_);
				setState(2972);
				aggrArgsList();
				setState(2973);
				match(ORDER);
				setState(2974);
				match(BY);
				setState(2975);
				aggrArgsList();
				setState(2976);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggrArgsListContext extends ParserRuleContext {
		public List<AggrArgContext> aggrArg() {
			return getRuleContexts(AggrArgContext.class);
		}
		public AggrArgContext aggrArg(int i) {
			return getRuleContext(AggrArgContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public AggrArgsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggrArgsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAggrArgsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAggrArgsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAggrArgsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggrArgsListContext aggrArgsList() throws RecognitionException {
		AggrArgsListContext _localctx = new AggrArgsListContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_aggrArgsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2980);
			aggrArg();
			setState(2985);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2981);
				match(COMMA_);
				setState(2982);
				aggrArg();
				}
				}
				setState(2987);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggrArgContext extends ParserRuleContext {
		public FuncArgContext funcArg() {
			return getRuleContext(FuncArgContext.class,0);
		}
		public AggrArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggrArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAggrArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAggrArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAggrArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggrArgContext aggrArg() throws RecognitionException {
		AggrArgContext _localctx = new AggrArgContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_aggrArg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2988);
			funcArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterAggregateDefinitionClauseContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AlterAggregateDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAggregateDefinitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterAggregateDefinitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterAggregateDefinitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterAggregateDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterAggregateDefinitionClauseContext alterAggregateDefinitionClause() throws RecognitionException {
		AlterAggregateDefinitionClauseContext _localctx = new AlterAggregateDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_alterAggregateDefinitionClause);
		try {
			setState(2999);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(2990);
				match(RENAME);
				setState(2991);
				match(TO);
				setState(2992);
				name();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2993);
				match(OWNER);
				setState(2994);
				match(TO);
				setState(2995);
				roleSpec();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(2996);
				match(SET);
				setState(2997);
				match(SCHEMA);
				setState(2998);
				schemaName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCollationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode COLLATION() { return getToken(DDLStatementParser.COLLATION, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public AlterCollationClauseContext alterCollationClause() {
			return getRuleContext(AlterCollationClauseContext.class,0);
		}
		public AlterCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCollation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterCollation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCollationContext alterCollation() throws RecognitionException {
		AlterCollationContext _localctx = new AlterCollationContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_alterCollation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3001);
			match(ALTER);
			setState(3002);
			match(COLLATION);
			setState(3003);
			anyName();
			setState(3004);
			alterCollationClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCollationClauseContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(DDLStatementParser.REFRESH, 0); }
		public TerminalNode VERSION() { return getToken(DDLStatementParser.VERSION, 0); }
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AlterCollationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCollationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterCollationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterCollationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterCollationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCollationClauseContext alterCollationClause() throws RecognitionException {
		AlterCollationClauseContext _localctx = new AlterCollationClauseContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_alterCollationClause);
		try {
			setState(3017);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REFRESH:
				enterOuterAlt(_localctx, 1);
				{
				setState(3006);
				match(REFRESH);
				setState(3007);
				match(VERSION);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(3008);
				match(RENAME);
				setState(3009);
				match(TO);
				setState(3010);
				name();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 3);
				{
				setState(3011);
				match(OWNER);
				setState(3012);
				match(TO);
				setState(3013);
				roleSpec();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(3014);
				match(SET);
				setState(3015);
				match(SCHEMA);
				setState(3016);
				schemaName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterConversionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode CONVERSION() { return getToken(DDLStatementParser.CONVERSION, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public AlterConversionClauseContext alterConversionClause() {
			return getRuleContext(AlterConversionClauseContext.class,0);
		}
		public AlterConversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterConversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterConversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterConversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterConversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterConversionContext alterConversion() throws RecognitionException {
		AlterConversionContext _localctx = new AlterConversionContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_alterConversion);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3019);
			match(ALTER);
			setState(3020);
			match(CONVERSION);
			setState(3021);
			anyName();
			setState(3022);
			alterConversionClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterConversionClauseContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AlterConversionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterConversionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterConversionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterConversionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterConversionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterConversionClauseContext alterConversionClause() throws RecognitionException {
		AlterConversionClauseContext _localctx = new AlterConversionClauseContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_alterConversionClause);
		try {
			setState(3033);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(3024);
				match(RENAME);
				setState(3025);
				match(TO);
				setState(3026);
				name();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3027);
				match(OWNER);
				setState(3028);
				match(TO);
				setState(3029);
				roleSpec();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(3030);
				match(SET);
				setState(3031);
				match(SCHEMA);
				setState(3032);
				schemaName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDefaultPrivilegesContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DDLStatementParser.PRIVILEGES, 0); }
		public DefACLActionContext defACLAction() {
			return getRuleContext(DefACLActionContext.class,0);
		}
		public DefACLOptionListContext defACLOptionList() {
			return getRuleContext(DefACLOptionListContext.class,0);
		}
		public AlterDefaultPrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDefaultPrivileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterDefaultPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterDefaultPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterDefaultPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDefaultPrivilegesContext alterDefaultPrivileges() throws RecognitionException {
		AlterDefaultPrivilegesContext _localctx = new AlterDefaultPrivilegesContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_alterDefaultPrivileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3035);
			match(ALTER);
			setState(3036);
			match(DEFAULT);
			setState(3037);
			match(PRIVILEGES);
			setState(3039);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR || _la==IN) {
				{
				setState(3038);
				defACLOptionList();
				}
			}

			setState(3041);
			defACLAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLActionContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(DDLStatementParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public DefaclPrivilegeTargetContext defaclPrivilegeTarget() {
			return getRuleContext(DefaclPrivilegeTargetContext.class,0);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public GranteeListContext granteeList() {
			return getRuleContext(GranteeListContext.class,0);
		}
		public GrantGrantOptionContext grantGrantOption() {
			return getRuleContext(GrantGrantOptionContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(DDLStatementParser.REVOKE, 0); }
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(DDLStatementParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public DefACLActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefACLAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefACLAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefACLAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLActionContext defACLAction() throws RecognitionException {
		DefACLActionContext _localctx = new DefACLActionContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_defACLAction);
		int _la;
		try {
			setState(3073);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3043);
				match(GRANT);
				setState(3044);
				privileges();
				setState(3045);
				match(ON);
				setState(3046);
				defaclPrivilegeTarget();
				setState(3047);
				match(TO);
				setState(3048);
				granteeList();
				setState(3050);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3049);
					grantGrantOption();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3052);
				match(REVOKE);
				setState(3053);
				privileges();
				setState(3054);
				match(ON);
				setState(3055);
				defaclPrivilegeTarget();
				setState(3056);
				match(FROM);
				setState(3057);
				granteeList();
				setState(3059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(3058);
					dropBehavior();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3061);
				match(REVOKE);
				setState(3062);
				match(GRANT);
				setState(3063);
				match(OPTION);
				setState(3064);
				match(FOR);
				setState(3065);
				privileges();
				setState(3066);
				match(ON);
				setState(3067);
				defaclPrivilegeTarget();
				setState(3068);
				match(FROM);
				setState(3069);
				granteeList();
				setState(3071);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(3070);
					dropBehavior();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantGrantOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(DDLStatementParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(DDLStatementParser.OPTION, 0); }
		public GrantGrantOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantGrantOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGrantGrantOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGrantGrantOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGrantGrantOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantGrantOptionContext grantGrantOption() throws RecognitionException {
		GrantGrantOptionContext _localctx = new GrantGrantOptionContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_grantGrantOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3075);
			match(WITH);
			setState(3076);
			match(GRANT);
			setState(3077);
			match(OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GranteeListContext extends ParserRuleContext {
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public GranteeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_granteeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGranteeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGranteeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGranteeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeListContext granteeList() throws RecognitionException {
		GranteeListContext _localctx = new GranteeListContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_granteeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3079);
			grantee();
			setState(3084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3080);
				match(COMMA_);
				setState(3081);
				grantee();
				}
				}
				setState(3086);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GranteeContext extends ParserRuleContext {
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode GROUP() { return getToken(DDLStatementParser.GROUP, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGrantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGrantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_grantee);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(3087);
				match(GROUP);
				}
			}

			setState(3090);
			roleSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaclPrivilegeTargetContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(DDLStatementParser.TABLES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(DDLStatementParser.FUNCTIONS, 0); }
		public TerminalNode ROUTINES() { return getToken(DDLStatementParser.ROUTINES, 0); }
		public TerminalNode SEQUENCES() { return getToken(DDLStatementParser.SEQUENCES, 0); }
		public TerminalNode TYPES() { return getToken(DDLStatementParser.TYPES, 0); }
		public TerminalNode SCHEMAS() { return getToken(DDLStatementParser.SCHEMAS, 0); }
		public DefaclPrivilegeTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaclPrivilegeTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefaclPrivilegeTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefaclPrivilegeTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefaclPrivilegeTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaclPrivilegeTargetContext defaclPrivilegeTarget() throws RecognitionException {
		DefaclPrivilegeTargetContext _localctx = new DefaclPrivilegeTargetContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_defaclPrivilegeTarget);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3092);
			_la = _input.LA(1);
			if ( !(((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (FUNCTIONS - 473)) | (1L << (ROUTINES - 473)) | (1L << (SEQUENCES - 473)) | (1L << (SCHEMAS - 473)) | (1L << (TABLES - 473)))) != 0) || _la==TYPES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesContext extends ParserRuleContext {
		public PrivilegeListContext privilegeList() {
			return getRuleContext(PrivilegeListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DDLStatementParser.PRIVILEGES, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public PrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesContext privileges() throws RecognitionException {
		PrivilegesContext _localctx = new PrivilegesContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_privileges);
		try {
			setState(3109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3094);
				privilegeList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3095);
				match(ALL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3096);
				match(ALL);
				setState(3097);
				match(PRIVILEGES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3098);
				match(ALL);
				setState(3099);
				match(LP_);
				setState(3100);
				columnList();
				setState(3101);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3103);
				match(ALL);
				setState(3104);
				match(PRIVILEGES);
				setState(3105);
				match(LP_);
				setState(3106);
				columnList();
				setState(3107);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeListContext extends ParserRuleContext {
		public List<PrivilegeContext> privilege() {
			return getRuleContexts(PrivilegeContext.class);
		}
		public PrivilegeContext privilege(int i) {
			return getRuleContext(PrivilegeContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public PrivilegeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPrivilegeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPrivilegeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPrivilegeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeListContext privilegeList() throws RecognitionException {
		PrivilegeListContext _localctx = new PrivilegeListContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_privilegeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3111);
			privilege();
			setState(3116);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3112);
				match(COMMA_);
				setState(3113);
				privilege();
				}
				}
				setState(3118);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(DDLStatementParser.SELECT, 0); }
		public OptColumnListContext optColumnList() {
			return getRuleContext(OptColumnListContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(DDLStatementParser.REFERENCES, 0); }
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_privilege);
		int _la;
		try {
			setState(3135);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3119);
				match(SELECT);
				setState(3121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(3120);
					optColumnList();
					}
				}

				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 2);
				{
				setState(3123);
				match(REFERENCES);
				setState(3125);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(3124);
					optColumnList();
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3127);
				match(CREATE);
				setState(3129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(3128);
					optColumnList();
					}
				}

				}
				break;
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 4);
				{
				setState(3131);
				colId();
				setState(3133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(3132);
					optColumnList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLOptionListContext extends ParserRuleContext {
		public List<DefACLOptionContext> defACLOption() {
			return getRuleContexts(DefACLOptionContext.class);
		}
		public DefACLOptionContext defACLOption(int i) {
			return getRuleContext(DefACLOptionContext.class,i);
		}
		public DefACLOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefACLOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefACLOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefACLOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLOptionListContext defACLOptionList() throws RecognitionException {
		DefACLOptionListContext _localctx = new DefACLOptionListContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_defACLOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3138); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3137);
				defACLOption();
				}
				}
				setState(3140); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FOR || _la==IN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLOptionContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public SchemaNameListContext schemaNameList() {
			return getRuleContext(SchemaNameListContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(DDLStatementParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public DefACLOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefACLOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefACLOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefACLOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLOptionContext defACLOption() throws RecognitionException {
		DefACLOptionContext _localctx = new DefACLOptionContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_defACLOption);
		int _la;
		try {
			setState(3148);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3142);
				match(IN);
				setState(3143);
				match(SCHEMA);
				setState(3144);
				schemaNameList();
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(3145);
				match(FOR);
				setState(3146);
				_la = _input.LA(1);
				if ( !(_la==ROLE || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3147);
				roleList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameListContext extends ParserRuleContext {
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public SchemaNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSchemaNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSchemaNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSchemaNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameListContext schemaNameList() throws RecognitionException {
		SchemaNameListContext _localctx = new SchemaNameListContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_schemaNameList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3150);
			nameList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDomainContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode DOMAIN() { return getToken(DDLStatementParser.DOMAIN, 0); }
		public AlterDomainClauseContext alterDomainClause() {
			return getRuleContext(AlterDomainClauseContext.class,0);
		}
		public AlterDomainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDomain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterDomain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterDomain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterDomain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDomainContext alterDomain() throws RecognitionException {
		AlterDomainContext _localctx = new AlterDomainContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_alterDomain);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3152);
			match(ALTER);
			setState(3153);
			match(DOMAIN);
			setState(3154);
			alterDomainClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDomainClauseContext extends ParserRuleContext {
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(DDLStatementParser.VALIDATE, 0); }
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public List<ConstraintNameContext> constraintName() {
			return getRuleContexts(ConstraintNameContext.class);
		}
		public ConstraintNameContext constraintName(int i) {
			return getRuleContext(ConstraintNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public AlterColumnDefaultContext alterColumnDefault() {
			return getRuleContext(AlterColumnDefaultContext.class,0);
		}
		public AlterDomainClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDomainClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterDomainClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterDomainClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterDomainClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDomainClauseContext alterDomainClause() throws RecognitionException {
		AlterDomainClauseContext _localctx = new AlterDomainClauseContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_alterDomainClause);
		int _la;
		try {
			setState(3205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3156);
				anyName();
				setState(3157);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3158);
				match(NOT);
				setState(3159);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3161);
				anyName();
				setState(3162);
				match(ADD);
				setState(3163);
				tableConstraint();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3165);
				anyName();
				setState(3166);
				match(DROP);
				setState(3167);
				match(CONSTRAINT);
				setState(3169);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
				case 1:
					{
					setState(3168);
					existClause();
					}
					break;
				}
				setState(3171);
				name();
				setState(3173);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(3172);
					dropBehavior();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3175);
				anyName();
				setState(3176);
				match(VALIDATE);
				setState(3177);
				match(CONSTRAINT);
				setState(3178);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3180);
				anyName();
				setState(3181);
				match(RENAME);
				setState(3182);
				match(CONSTRAINT);
				setState(3183);
				constraintName();
				setState(3184);
				match(TO);
				setState(3185);
				constraintName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3187);
				anyName();
				setState(3188);
				match(OWNER);
				setState(3189);
				match(TO);
				setState(3190);
				roleSpec();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3192);
				anyName();
				setState(3193);
				match(RENAME);
				setState(3194);
				match(TO);
				setState(3195);
				anyName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3197);
				anyName();
				setState(3198);
				match(SET);
				setState(3199);
				match(SCHEMA);
				setState(3200);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3202);
				anyName();
				setState(3203);
				alterColumnDefault();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConstraintName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConstraintName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConstraintName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintNameContext constraintName() throws RecognitionException {
		ConstraintNameContext _localctx = new ConstraintNameContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_constraintName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3207);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventTriggerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(DDLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public TiggerNameContext tiggerName() {
			return getRuleContext(TiggerNameContext.class,0);
		}
		public AlterEventTriggerClauseContext alterEventTriggerClause() {
			return getRuleContext(AlterEventTriggerClauseContext.class,0);
		}
		public AlterEventTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEventTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterEventTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterEventTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterEventTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventTriggerContext alterEventTrigger() throws RecognitionException {
		AlterEventTriggerContext _localctx = new AlterEventTriggerContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_alterEventTrigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3209);
			match(ALTER);
			setState(3210);
			match(EVENT);
			setState(3211);
			match(TRIGGER);
			setState(3212);
			tiggerName();
			setState(3213);
			alterEventTriggerClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventTriggerClauseContext extends ParserRuleContext {
		public TerminalNode DISABLE() { return getToken(DDLStatementParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(DDLStatementParser.ENABLE, 0); }
		public TerminalNode REPLICA() { return getToken(DDLStatementParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(DDLStatementParser.ALWAYS, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TiggerNameContext tiggerName() {
			return getRuleContext(TiggerNameContext.class,0);
		}
		public AlterEventTriggerClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEventTriggerClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterEventTriggerClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterEventTriggerClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterEventTriggerClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventTriggerClauseContext alterEventTriggerClause() throws RecognitionException {
		AlterEventTriggerClauseContext _localctx = new AlterEventTriggerClauseContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_alterEventTriggerClause);
		int _la;
		try {
			setState(3224);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3215);
				match(DISABLE);
				}
				break;
			case ENABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3216);
				match(ENABLE);
				setState(3217);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 3);
				{
				setState(3218);
				match(OWNER);
				setState(3219);
				match(TO);
				setState(3220);
				roleSpec();
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(3221);
				match(RENAME);
				setState(3222);
				match(TO);
				setState(3223);
				tiggerName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TiggerNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TiggerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tiggerName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTiggerName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTiggerName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTiggerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TiggerNameContext tiggerName() throws RecognitionException {
		TiggerNameContext _localctx = new TiggerNameContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_tiggerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3226);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterExtensionClausesContext alterExtensionClauses() {
			return getRuleContext(AlterExtensionClausesContext.class,0);
		}
		public AlterExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterExtension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterExtension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionContext alterExtension() throws RecognitionException {
		AlterExtensionContext _localctx = new AlterExtensionContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_alterExtension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3228);
			match(ALTER);
			setState(3229);
			match(EXTENSION);
			setState(3230);
			name();
			setState(3231);
			alterExtensionClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionClausesContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public AlterExtensionOptListContext alterExtensionOptList() {
			return getRuleContext(AlterExtensionOptListContext.class,0);
		}
		public TerminalNode ACCESS() { return getToken(DDLStatementParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(DDLStatementParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(DDLStatementParser.AGGREGATE, 0); }
		public AggregateWithArgtypesContext aggregateWithArgtypes() {
			return getRuleContext(AggregateWithArgtypesContext.class,0);
		}
		public TerminalNode CAST() { return getToken(DDLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode COLLATION() { return getToken(DDLStatementParser.COLLATION, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode CONVERSION() { return getToken(DDLStatementParser.CONVERSION, 0); }
		public TerminalNode DOMAIN() { return getToken(DDLStatementParser.DOMAIN, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(DDLStatementParser.PROCEDURAL, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public OperatorWithArgtypesContext operatorWithArgtypes() {
			return getRuleContext(OperatorWithArgtypesContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public AccessMethodContext accessMethod() {
			return getRuleContext(AccessMethodContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(DDLStatementParser.CLASS, 0); }
		public TerminalNode FAMILY() { return getToken(DDLStatementParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(DDLStatementParser.ROUTINE, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode EVENT() { return getToken(DDLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(DDLStatementParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(DDLStatementParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(DDLStatementParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(DDLStatementParser.CONFIGURATION, 0); }
		public TerminalNode SEQUENCE() { return getToken(DDLStatementParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(DDLStatementParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public TerminalNode TRANSFORM() { return getToken(DDLStatementParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public AlterExtensionClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterExtensionClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterExtensionClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterExtensionClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionClausesContext alterExtensionClauses() throws RecognitionException {
		AlterExtensionClausesContext _localctx = new AlterExtensionClausesContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_alterExtensionClauses);
		int _la;
		try {
			setState(3349);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,240,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3233);
				match(UPDATE);
				setState(3234);
				alterExtensionOptList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3235);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3236);
				match(ACCESS);
				setState(3237);
				match(METHOD);
				setState(3238);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3239);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3240);
				match(AGGREGATE);
				setState(3241);
				aggregateWithArgtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3242);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3243);
				match(CAST);
				setState(3244);
				match(LP_);
				setState(3245);
				typeName();
				setState(3246);
				match(AS);
				setState(3247);
				typeName();
				setState(3248);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3250);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3251);
				match(COLLATION);
				setState(3252);
				anyName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3253);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3254);
				match(CONVERSION);
				setState(3255);
				anyName();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3256);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3257);
				match(DOMAIN);
				setState(3258);
				typeName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3259);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3260);
				match(FUNCTION);
				setState(3261);
				functionWithArgtypes();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3262);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3264);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(3263);
					match(PROCEDURAL);
					}
				}

				setState(3266);
				match(LANGUAGE);
				setState(3267);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3268);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3269);
				match(OPERATOR);
				setState(3270);
				operatorWithArgtypes();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3271);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3272);
				match(OPERATOR);
				setState(3273);
				_la = _input.LA(1);
				if ( !(_la==CLASS || _la==FAMILY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3274);
				anyName();
				setState(3275);
				match(USING);
				setState(3276);
				accessMethod();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3278);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3279);
				match(PROCEDURE);
				setState(3280);
				functionWithArgtypes();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3281);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3282);
				match(ROUTINE);
				setState(3283);
				functionWithArgtypes();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3284);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3285);
				match(SCHEMA);
				setState(3286);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3287);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3288);
				match(EVENT);
				setState(3289);
				match(TRIGGER);
				setState(3290);
				name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3291);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3292);
				match(TABLE);
				setState(3293);
				anyName();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3294);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3295);
				match(TEXT);
				setState(3296);
				match(SEARCH);
				setState(3297);
				match(PARSER);
				setState(3298);
				anyName();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3299);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3300);
				match(TEXT);
				setState(3301);
				match(SEARCH);
				setState(3302);
				match(DICTIONARY);
				setState(3303);
				anyName();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(3304);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3305);
				match(TEXT);
				setState(3306);
				match(SEARCH);
				setState(3307);
				match(TEMPLATE);
				setState(3308);
				anyName();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(3309);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3310);
				match(TEXT);
				setState(3311);
				match(SEARCH);
				setState(3312);
				match(CONFIGURATION);
				setState(3313);
				anyName();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(3314);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3315);
				match(SEQUENCE);
				setState(3316);
				anyName();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(3317);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3318);
				match(VIEW);
				setState(3319);
				anyName();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(3320);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3321);
				match(MATERIALIZED);
				setState(3322);
				match(VIEW);
				setState(3323);
				anyName();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(3324);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3325);
				match(FOREIGN);
				setState(3326);
				match(TABLE);
				setState(3327);
				anyName();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(3328);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3329);
				match(FOREIGN);
				setState(3330);
				match(DATA);
				setState(3331);
				match(WRAPPER);
				setState(3332);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(3333);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3334);
				match(SERVER);
				setState(3335);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(3336);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3337);
				match(TRANSFORM);
				setState(3338);
				match(FOR);
				setState(3339);
				typeName();
				setState(3340);
				match(LANGUAGE);
				setState(3341);
				name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(3343);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3344);
				match(TYPE);
				setState(3345);
				typeName();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(3346);
				match(SET);
				setState(3347);
				match(SCHEMA);
				setState(3348);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionWithArgtypesContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public FuncArgsContext funcArgs() {
			return getRuleContext(FuncArgsContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public FunctionWithArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionWithArgtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFunctionWithArgtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFunctionWithArgtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFunctionWithArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionWithArgtypesContext functionWithArgtypes() throws RecognitionException {
		FunctionWithArgtypesContext _localctx = new FunctionWithArgtypesContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_functionWithArgtypes);
		try {
			setState(3359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3351);
				funcName();
				setState(3352);
				funcArgs();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3354);
				typeFuncNameKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3355);
				colId();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3356);
				colId();
				setState(3357);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public FuncArgsListContext funcArgsList() {
			return getRuleContext(FuncArgsListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public FuncArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsContext funcArgs() throws RecognitionException {
		FuncArgsContext _localctx = new FuncArgsContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_funcArgs);
		try {
			setState(3367);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3361);
				match(LP_);
				setState(3362);
				funcArgsList();
				setState(3363);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3365);
				match(LP_);
				setState(3366);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWithArgtypesContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public AggrArgsContext aggrArgs() {
			return getRuleContext(AggrArgsContext.class,0);
		}
		public AggregateWithArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWithArgtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAggregateWithArgtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAggregateWithArgtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAggregateWithArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWithArgtypesContext aggregateWithArgtypes() throws RecognitionException {
		AggregateWithArgtypesContext _localctx = new AggregateWithArgtypesContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_aggregateWithArgtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3369);
			funcName();
			setState(3370);
			aggrArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionOptListContext extends ParserRuleContext {
		public List<AlterExtensionOptItemContext> alterExtensionOptItem() {
			return getRuleContexts(AlterExtensionOptItemContext.class);
		}
		public AlterExtensionOptItemContext alterExtensionOptItem(int i) {
			return getRuleContext(AlterExtensionOptItemContext.class,i);
		}
		public AlterExtensionOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterExtensionOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterExtensionOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterExtensionOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionOptListContext alterExtensionOptList() throws RecognitionException {
		AlterExtensionOptListContext _localctx = new AlterExtensionOptListContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_alterExtensionOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==TO) {
				{
				{
				setState(3372);
				alterExtensionOptItem();
				}
				}
				setState(3377);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionOptItemContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public AlterExtensionOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterExtensionOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterExtensionOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterExtensionOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionOptItemContext alterExtensionOptItem() throws RecognitionException {
		AlterExtensionOptItemContext _localctx = new AlterExtensionOptItemContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_alterExtensionOptItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3378);
			match(TO);
			setState(3381);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				{
				setState(3379);
				nonReservedWord();
				}
				break;
			case STRING_:
				{
				setState(3380);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignDataWrapperContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(DDLStatementParser.WRAPPER, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public AlterForeignDataWrapperClausesContext alterForeignDataWrapperClauses() {
			return getRuleContext(AlterForeignDataWrapperClausesContext.class,0);
		}
		public AlterForeignDataWrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignDataWrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterForeignDataWrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterForeignDataWrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterForeignDataWrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignDataWrapperContext alterForeignDataWrapper() throws RecognitionException {
		AlterForeignDataWrapperContext _localctx = new AlterForeignDataWrapperContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_alterForeignDataWrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3383);
			match(ALTER);
			setState(3384);
			match(FOREIGN);
			setState(3385);
			match(DATA);
			setState(3386);
			match(WRAPPER);
			setState(3387);
			colId();
			setState(3388);
			alterForeignDataWrapperClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignDataWrapperClausesContext extends ParserRuleContext {
		public AlterGenericOptionsContext alterGenericOptions() {
			return getRuleContext(AlterGenericOptionsContext.class,0);
		}
		public FdwOptionsContext fdwOptions() {
			return getRuleContext(FdwOptionsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterForeignDataWrapperClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignDataWrapperClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterForeignDataWrapperClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterForeignDataWrapperClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterForeignDataWrapperClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignDataWrapperClausesContext alterForeignDataWrapperClauses() throws RecognitionException {
		AlterForeignDataWrapperClausesContext _localctx = new AlterForeignDataWrapperClausesContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_alterForeignDataWrapperClauses);
		int _la;
		try {
			setState(3401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO || _la==HANDLER || _la==VALIDATOR) {
					{
					setState(3390);
					fdwOptions();
					}
				}

				setState(3393);
				alterGenericOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3394);
				fdwOptions();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3395);
				match(RENAME);
				setState(3396);
				match(TO);
				setState(3397);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3398);
				match(OWNER);
				setState(3399);
				match(TO);
				setState(3400);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericOptionElemContext extends ParserRuleContext {
		public GenericOptionNameContext genericOptionName() {
			return getRuleContext(GenericOptionNameContext.class,0);
		}
		public GenericOptionArgContext genericOptionArg() {
			return getRuleContext(GenericOptionArgContext.class,0);
		}
		public GenericOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGenericOptionElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGenericOptionElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGenericOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionElemContext genericOptionElem() throws RecognitionException {
		GenericOptionElemContext _localctx = new GenericOptionElemContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_genericOptionElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3403);
			genericOptionName();
			setState(3404);
			genericOptionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericOptionArgContext extends ParserRuleContext {
		public AexprConstContext aexprConst() {
			return getRuleContext(AexprConstContext.class,0);
		}
		public GenericOptionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGenericOptionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGenericOptionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGenericOptionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionArgContext genericOptionArg() throws RecognitionException {
		GenericOptionArgContext _localctx = new GenericOptionArgContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_genericOptionArg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3406);
			aexprConst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FdwOptionsContext extends ParserRuleContext {
		public List<FdwOptionContext> fdwOption() {
			return getRuleContexts(FdwOptionContext.class);
		}
		public FdwOptionContext fdwOption(int i) {
			return getRuleContext(FdwOptionContext.class,i);
		}
		public FdwOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdwOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFdwOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFdwOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFdwOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FdwOptionsContext fdwOptions() throws RecognitionException {
		FdwOptionsContext _localctx = new FdwOptionsContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_fdwOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3409); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3408);
				fdwOption();
				}
				}
				setState(3411); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NO || _la==HANDLER || _la==VALIDATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FdwOptionContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(DDLStatementParser.HANDLER, 0); }
		public HandlerNameContext handlerName() {
			return getRuleContext(HandlerNameContext.class,0);
		}
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode VALIDATOR() { return getToken(DDLStatementParser.VALIDATOR, 0); }
		public FdwOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdwOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFdwOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFdwOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFdwOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FdwOptionContext fdwOption() throws RecognitionException {
		FdwOptionContext _localctx = new FdwOptionContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_fdwOption);
		try {
			setState(3421);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3413);
				match(HANDLER);
				setState(3414);
				handlerName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3415);
				match(NO);
				setState(3416);
				match(HANDLER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3417);
				match(VALIDATOR);
				setState(3418);
				handlerName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3419);
				match(NO);
				setState(3420);
				match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerNameContext extends ParserRuleContext {
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public HandlerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterHandlerName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitHandlerName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitHandlerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerNameContext handlerName() throws RecognitionException {
		HandlerNameContext _localctx = new HandlerNameContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_handlerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3423);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode GROUP() { return getToken(DDLStatementParser.GROUP, 0); }
		public AlterGroupClausesContext alterGroupClauses() {
			return getRuleContext(AlterGroupClausesContext.class,0);
		}
		public AlterGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGroupContext alterGroup() throws RecognitionException {
		AlterGroupContext _localctx = new AlterGroupContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_alterGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3425);
			match(ALTER);
			setState(3426);
			match(GROUP);
			setState(3427);
			alterGroupClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGroupClausesContext extends ParserRuleContext {
		public List<RoleSpecContext> roleSpec() {
			return getRuleContexts(RoleSpecContext.class);
		}
		public RoleSpecContext roleSpec(int i) {
			return getRuleContext(RoleSpecContext.class,i);
		}
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public AlterGroupClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGroupClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterGroupClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterGroupClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterGroupClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGroupClausesContext alterGroupClauses() throws RecognitionException {
		AlterGroupClausesContext _localctx = new AlterGroupClausesContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_alterGroupClauses);
		int _la;
		try {
			setState(3439);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3429);
				roleSpec();
				setState(3430);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3431);
				match(USER);
				setState(3432);
				roleList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3434);
				roleSpec();
				setState(3435);
				match(RENAME);
				setState(3436);
				match(TO);
				setState(3437);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLanguageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public List<ColIdContext> colId() {
			return getRuleContexts(ColIdContext.class);
		}
		public ColIdContext colId(int i) {
			return getRuleContext(ColIdContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public TerminalNode PROCEDURAL() { return getToken(DDLStatementParser.PROCEDURAL, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(DDLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(DDLStatementParser.SESSION_USER, 0); }
		public AlterLanguageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLanguage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterLanguage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLanguageContext alterLanguage() throws RecognitionException {
		AlterLanguageContext _localctx = new AlterLanguageContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_alterLanguage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3441);
			match(ALTER);
			setState(3443);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(3442);
				match(PROCEDURAL);
				}
			}

			setState(3445);
			match(LANGUAGE);
			setState(3458);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				{
				setState(3446);
				colId();
				setState(3447);
				match(RENAME);
				setState(3448);
				match(TO);
				setState(3449);
				colId();
				}
				break;
			case 2:
				{
				setState(3451);
				match(OWNER);
				setState(3452);
				match(TO);
				setState(3456);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__0:
				case T__1:
				case INSERT:
				case UPDATE:
				case DELETE:
				case ALTER:
				case DROP:
				case TRUNCATE:
				case SCHEMA:
				case REVOKE:
				case ADD:
				case SET:
				case INDEX:
				case KEY:
				case FUNCTION:
				case TRIGGER:
				case PROCEDURE:
				case VIEW:
				case IF:
				case BY:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case DOUBLE:
				case YEAR:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case CALL:
				case PRESERVE:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case NEXT:
				case NAME:
				case NAMES:
				case TYPE:
				case TEXT:
				case REPEATABLE:
				case VARYING:
				case VALUE:
				case TIES:
				case CUBE:
				case SETS:
				case OTHERS:
				case AT:
				case ADMIN:
				case ESCAPE:
				case EXCLUDE:
				case PARTITION:
				case UNKNOWN:
				case ALWAYS:
				case CASCADE:
				case GENERATED:
				case ISOLATION:
				case LEVEL:
				case NO:
				case OPTION:
				case PRIVILEGES:
				case READ:
				case ROLE:
				case ROWS:
				case START:
				case TRANSACTION:
				case ACTION:
				case CACHE:
				case CHARACTERISTICS:
				case CLUSTER:
				case COMMENTS:
				case CONSTRAINTS:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DEFAULTS:
				case DEFERRED:
				case DEPENDS:
				case DOMAIN:
				case EXCLUDING:
				case EXECUTE:
				case EXTENSION:
				case EXTERNAL:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case GLOBAL:
				case IDENTITY:
				case IMMEDIATE:
				case INCLUDING:
				case INCREMENT:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INCLUDE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LOGGED:
				case MATCH:
				case MAXVALUE:
				case MINVALUE:
				case NOTHING:
				case NULLS:
				case OBJECT:
				case OIDS:
				case OVER:
				case OWNED:
				case OWNER:
				case PARTIAL:
				case PRECEDING:
				case RANGE:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case ROUTINE:
				case RULE:
				case SECURITY:
				case SEQUENCE:
				case SESSION:
				case SHOW:
				case SIMPLE:
				case STATISTICS:
				case STORAGE:
				case TABLESPACE:
				case TEMP:
				case TEMPORARY:
				case UNBOUNDED:
				case UNLOGGED:
				case VALID:
				case VALIDATE:
				case WITHIN:
				case WITHOUT:
				case ZONE:
				case OF:
				case UESCAPE:
				case GROUPS:
				case RECURSIVE:
				case ENUM:
				case XML:
				case JSON:
				case ORDINALITY:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case REF:
				case PASSING:
				case VERSION:
				case YES:
				case STANDALONE:
				case MATERIALIZED:
				case OPERATOR:
				case SHARE:
				case ROLLUP:
				case DOCUMENT:
				case NORMALIZED:
				case NOWAIT:
				case LOCKED:
				case COLUMNS:
				case CONTENT:
				case STRIP:
				case WHITESPACE:
				case CONFLICT:
				case OVERRIDING:
				case SYSTEM:
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case ASSERTION:
				case ASSIGNMENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CALLED:
				case CATALOG:
				case CHAIN:
				case CHECKPOINT:
				case CLASS:
				case CONFIGURATION:
				case COMMENT:
				case DETACH:
				case DICTIONARY:
				case EXPRESSION:
				case INSENSITIVE:
				case DISCARD:
				case OFF:
				case INSTEAD:
				case EXPLAIN:
				case INPUT:
				case INLINE:
				case PARALLEL:
				case LEAKPROOF:
				case COMMITTED:
				case ENCODING:
				case IMPLICIT:
				case DELIMITER:
				case CURSOR:
				case EACH:
				case EVENT:
				case DEALLOCATE:
				case CONNECTION:
				case DECLARE:
				case FAMILY:
				case FORWARD:
				case EXCLUSIVE:
				case FUNCTIONS:
				case LOCATION:
				case LABEL:
				case DELIMITERS:
				case HANDLER:
				case HEADER:
				case IMMUTABLE:
				case GRANTED:
				case HOLD:
				case MAPPING:
				case OLD:
				case METHOD:
				case LOAD:
				case LISTEN:
				case MODE:
				case MOVE:
				case PROCEDURAL:
				case PARSER:
				case PROCEDURES:
				case ENCRYPTED:
				case PUBLICATION:
				case PROGRAM:
				case REFERENCING:
				case PLANS:
				case REINDEX:
				case PRIOR:
				case PASSWORD:
				case RELATIVE:
				case QUOTE:
				case ROUTINES:
				case REPLACE:
				case SNAPSHOT:
				case REFRESH:
				case PREPARE:
				case OPTIONS:
				case IMPORT:
				case INVOKER:
				case NEW:
				case PREPARED:
				case SCROLL:
				case SEQUENCES:
				case SYSID:
				case REASSIGN:
				case SERVER:
				case SUBSCRIPTION:
				case SEARCH:
				case SCHEMAS:
				case RECHECK:
				case POLICY:
				case NOTIFY:
				case LOCK:
				case RELEASE:
				case SERIALIZABLE:
				case RETURNS:
				case STATEMENT:
				case STDIN:
				case STDOUT:
				case TABLES:
				case SUPPORT:
				case STABLE:
				case TEMPLATE:
				case UNENCRYPTED:
				case VIEWS:
				case UNCOMMITTED:
				case TRANSFORM:
				case UNLISTEN:
				case TRUSTED:
				case VALIDATOR:
				case UNTIL:
				case VACUUM:
				case VOLATILE:
				case STORED:
				case WRITE:
				case STRICT:
				case TYPES:
				case WRAPPER:
				case WORK:
				case IDENTIFIER_:
					{
					setState(3453);
					ignoredIdentifier();
					}
					break;
				case CURRENT_USER:
					{
					setState(3454);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(3455);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLargeObjectContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode LARGE() { return getToken(DDLStatementParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DDLStatementParser.OBJECT, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(DDLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(DDLStatementParser.SESSION_USER, 0); }
		public AlterLargeObjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLargeObject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterLargeObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterLargeObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterLargeObject(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLargeObjectContext alterLargeObject() throws RecognitionException {
		AlterLargeObjectContext _localctx = new AlterLargeObjectContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_alterLargeObject);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3460);
			match(ALTER);
			setState(3461);
			match(LARGE);
			setState(3462);
			match(OBJECT);
			setState(3463);
			numericOnly();
			setState(3464);
			match(OWNER);
			setState(3465);
			match(TO);
			setState(3469);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(3466);
				ignoredIdentifier();
				}
				break;
			case CURRENT_USER:
				{
				setState(3467);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				{
				setState(3468);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterMaterializedViewContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public AlterMaterializedViewClausesContext alterMaterializedViewClauses() {
			return getRuleContext(AlterMaterializedViewClausesContext.class,0);
		}
		public AlterMaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterMaterializedView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterMaterializedView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterMaterializedView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterMaterializedViewContext alterMaterializedView() throws RecognitionException {
		AlterMaterializedViewContext _localctx = new AlterMaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_alterMaterializedView);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3471);
			match(ALTER);
			setState(3472);
			match(MATERIALIZED);
			setState(3473);
			match(VIEW);
			setState(3474);
			alterMaterializedViewClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterMaterializedViewClausesContext extends ParserRuleContext {
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(DDLStatementParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(DDLStatementParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(DDLStatementParser.TABLESPACE, i);
		}
		public TerminalNode OWNED() { return getToken(DDLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(DDLStatementParser.NOWAIT, 0); }
		public AlterMaterializedViewClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterMaterializedViewClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterMaterializedViewClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterMaterializedViewClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterMaterializedViewClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterMaterializedViewClausesContext alterMaterializedViewClauses() throws RecognitionException {
		AlterMaterializedViewClausesContext _localctx = new AlterMaterializedViewClausesContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_alterMaterializedViewClauses);
		int _la;
		try {
			setState(3530);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3477);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					setState(3476);
					existClause();
					}
					break;
				}
				setState(3479);
				qualifiedName();
				setState(3480);
				alterTableCmds();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3482);
				qualifiedName();
				setState(3483);
				match(DEPENDS);
				setState(3484);
				match(ON);
				setState(3485);
				match(EXTENSION);
				setState(3486);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3489);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
				case 1:
					{
					setState(3488);
					existClause();
					}
					break;
				}
				setState(3491);
				qualifiedName();
				setState(3492);
				match(RENAME);
				setState(3494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(3493);
					match(COLUMN);
					}
				}

				setState(3496);
				columnName();
				setState(3497);
				match(TO);
				setState(3498);
				columnName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3501);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					setState(3500);
					existClause();
					}
					break;
				}
				setState(3503);
				qualifiedName();
				setState(3504);
				match(RENAME);
				setState(3505);
				match(TO);
				setState(3506);
				qualifiedName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3509);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					setState(3508);
					existClause();
					}
					break;
				}
				setState(3511);
				qualifiedName();
				setState(3512);
				match(SET);
				setState(3513);
				match(SCHEMA);
				setState(3514);
				schemaName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3516);
				match(ALL);
				setState(3517);
				match(IN);
				setState(3518);
				match(TABLESPACE);
				setState(3519);
				name();
				{
				setState(3520);
				match(OWNED);
				setState(3521);
				match(BY);
				setState(3522);
				roleList();
				}
				setState(3524);
				match(SET);
				setState(3525);
				match(TABLESPACE);
				setState(3526);
				name();
				setState(3528);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOWAIT) {
					{
					setState(3527);
					match(NOWAIT);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DDLStatementParser.DECLARE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CursorOptionsContext cursorOptions() {
			return getRuleContext(CursorOptionsContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(DDLStatementParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode HOLD() { return getToken(DDLStatementParser.HOLD, 0); }
		public TerminalNode WITHOUT() { return getToken(DDLStatementParser.WITHOUT, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDeclare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDeclare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDeclare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareContext declare() throws RecognitionException {
		DeclareContext _localctx = new DeclareContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_declare);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3532);
			match(DECLARE);
			setState(3533);
			name();
			setState(3534);
			cursorOptions();
			setState(3535);
			match(CURSOR);
			setState(3540);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(3536);
				match(WITH);
				setState(3537);
				match(HOLD);
				}
				break;
			case WITHOUT:
				{
				setState(3538);
				match(WITHOUT);
				setState(3539);
				match(HOLD);
				}
				break;
			case FOR:
				break;
			default:
				break;
			}
			setState(3542);
			match(FOR);
			setState(3543);
			select();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorOptionsContext extends ParserRuleContext {
		public List<CursorOptionContext> cursorOption() {
			return getRuleContexts(CursorOptionContext.class);
		}
		public CursorOptionContext cursorOption(int i) {
			return getRuleContext(CursorOptionContext.class,i);
		}
		public CursorOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCursorOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCursorOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCursorOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorOptionsContext cursorOptions() throws RecognitionException {
		CursorOptionsContext _localctx = new CursorOptionsContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_cursorOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3548);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BINARY || _la==NO || _la==INSENSITIVE || _la==SCROLL) {
				{
				{
				setState(3545);
				cursorOption();
				}
				}
				setState(3550);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorOptionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode SCROLL() { return getToken(DDLStatementParser.SCROLL, 0); }
		public TerminalNode BINARY() { return getToken(DDLStatementParser.BINARY, 0); }
		public TerminalNode INSENSITIVE() { return getToken(DDLStatementParser.INSENSITIVE, 0); }
		public CursorOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCursorOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCursorOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCursorOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorOptionContext cursorOption() throws RecognitionException {
		CursorOptionContext _localctx = new CursorOptionContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_cursorOption);
		try {
			setState(3556);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(3551);
				match(NO);
				setState(3552);
				match(SCROLL);
				}
				break;
			case SCROLL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3553);
				match(SCROLL);
				}
				break;
			case BINARY:
				enterOuterAlt(_localctx, 3);
				{
				setState(3554);
				match(BINARY);
				}
				break;
			case INSENSITIVE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3555);
				match(INSENSITIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStmtContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(DDLStatementParser.EXECUTE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExecuteParamClauseContext executeParamClause() {
			return getRuleContext(ExecuteParamClauseContext.class,0);
		}
		public ExecuteStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExecuteStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExecuteStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExecuteStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStmtContext executeStmt() throws RecognitionException {
		ExecuteStmtContext _localctx = new ExecuteStmtContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_executeStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3558);
			match(EXECUTE);
			setState(3559);
			name();
			setState(3560);
			executeParamClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateMaterializedViewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public CreateMvTargetContext createMvTarget() {
			return getRuleContext(CreateMvTargetContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode UNLOGGED() { return getToken(DDLStatementParser.UNLOGGED, 0); }
		public NotExistClauseContext notExistClause() {
			return getRuleContext(NotExistClauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public CreateMaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createMaterializedView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateMaterializedView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateMaterializedView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateMaterializedViewContext createMaterializedView() throws RecognitionException {
		CreateMaterializedViewContext _localctx = new CreateMaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_createMaterializedView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3562);
			match(CREATE);
			setState(3564);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNLOGGED) {
				{
				setState(3563);
				match(UNLOGGED);
				}
			}

			setState(3566);
			match(MATERIALIZED);
			setState(3567);
			match(VIEW);
			setState(3569);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
			case 1:
				{
				setState(3568);
				notExistClause();
				}
				break;
			}
			setState(3571);
			createMvTarget();
			setState(3572);
			match(AS);
			setState(3573);
			select();
			setState(3579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,266,_ctx) ) {
			case 1:
				{
				setState(3574);
				match(WITH);
				setState(3575);
				match(DATA);
				}
				break;
			case 2:
				{
				setState(3576);
				match(WITH);
				setState(3577);
				match(NO);
				setState(3578);
				match(DATA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateMvTargetContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TableAccessMethodClauseContext tableAccessMethodClause() {
			return getRuleContext(TableAccessMethodClauseContext.class,0);
		}
		public OptColumnListContext optColumnList() {
			return getRuleContext(OptColumnListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateMvTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createMvTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateMvTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateMvTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateMvTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateMvTargetContext createMvTarget() throws RecognitionException {
		CreateMvTargetContext _localctx = new CreateMvTargetContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_createMvTarget);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3581);
			qualifiedName();
			setState(3583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(3582);
				optColumnList();
				}
			}

			setState(3585);
			tableAccessMethodClause();
			setState(3588);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3586);
				match(WITH);
				setState(3587);
				reloptions();
				}
			}

			setState(3592);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(3590);
				match(TABLESPACE);
				setState(3591);
				name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshMatViewStmtContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(DDLStatementParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode CONCURRENTLY() { return getToken(DDLStatementParser.CONCURRENTLY, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public RefreshMatViewStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshMatViewStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRefreshMatViewStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRefreshMatViewStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRefreshMatViewStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshMatViewStmtContext refreshMatViewStmt() throws RecognitionException {
		RefreshMatViewStmtContext _localctx = new RefreshMatViewStmtContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_refreshMatViewStmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3594);
			match(REFRESH);
			setState(3595);
			match(MATERIALIZED);
			setState(3596);
			match(VIEW);
			setState(3598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(3597);
				match(CONCURRENTLY);
				}
			}

			setState(3600);
			qualifiedName();
			setState(3606);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,271,_ctx) ) {
			case 1:
				{
				setState(3601);
				match(WITH);
				setState(3602);
				match(DATA);
				}
				break;
			case 2:
				{
				setState(3603);
				match(WITH);
				setState(3604);
				match(NO);
				setState(3605);
				match(DATA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPolicyContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode POLICY() { return getToken(DDLStatementParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public AlterPolicyClausesContext alterPolicyClauses() {
			return getRuleContext(AlterPolicyClausesContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public AlterPolicyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPolicy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterPolicy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterPolicy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterPolicy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPolicyContext alterPolicy() throws RecognitionException {
		AlterPolicyContext _localctx = new AlterPolicyContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_alterPolicy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3608);
			match(ALTER);
			setState(3609);
			match(POLICY);
			setState(3611);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				{
				setState(3610);
				existClause();
				}
				break;
			}
			setState(3613);
			name();
			setState(3614);
			match(ON);
			setState(3615);
			qualifiedName();
			setState(3616);
			alterPolicyClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPolicyClausesContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public List<TerminalNode> LP_() { return getTokens(DDLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(DDLStatementParser.LP_, i);
		}
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public List<TerminalNode> RP_() { return getTokens(DDLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(DDLStatementParser.RP_, i);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(DDLStatementParser.CHECK, 0); }
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterPolicyClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPolicyClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterPolicyClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterPolicyClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterPolicyClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPolicyClausesContext alterPolicyClauses() throws RecognitionException {
		AlterPolicyClausesContext _localctx = new AlterPolicyClausesContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_alterPolicyClauses);
		int _la;
		try {
			setState(3640);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case WITH:
			case USING:
			case TO:
				enterOuterAlt(_localctx, 1);
				{
				setState(3620);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(3618);
					match(TO);
					setState(3619);
					roleList();
					}
				}

				setState(3627);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(3622);
					match(USING);
					setState(3623);
					match(LP_);
					setState(3624);
					aExpr(0);
					setState(3625);
					match(RP_);
					}
				}

				setState(3635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3629);
					match(WITH);
					setState(3630);
					match(CHECK);
					setState(3631);
					match(LP_);
					setState(3632);
					aExpr(0);
					setState(3633);
					match(RP_);
					}
				}

				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(3637);
				match(RENAME);
				setState(3638);
				match(TO);
				setState(3639);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public AlterProcedureClausesContext alterProcedureClauses() {
			return getRuleContext(AlterProcedureClausesContext.class,0);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_alterProcedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3642);
			match(ALTER);
			setState(3643);
			match(PROCEDURE);
			setState(3644);
			functionWithArgtypes();
			setState(3645);
			alterProcedureClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureClausesContext extends ParserRuleContext {
		public AlterfuncOptListContext alterfuncOptList() {
			return getRuleContext(AlterfuncOptListContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(DDLStatementParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterProcedureClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedureClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterProcedureClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterProcedureClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterProcedureClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureClausesContext alterProcedureClauses() throws RecognitionException {
		AlterProcedureClausesContext _localctx = new AlterProcedureClausesContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_alterProcedureClauses);
		int _la;
		try {
			setState(3667);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3647);
				alterfuncOptList();
				setState(3649);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(3648);
					match(RESTRICT);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3651);
				match(RENAME);
				setState(3652);
				match(TO);
				setState(3653);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3654);
					match(NO);
					}
				}

				setState(3657);
				match(DEPENDS);
				setState(3658);
				match(ON);
				setState(3659);
				match(EXTENSION);
				setState(3660);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3661);
				match(SET);
				setState(3662);
				match(SCHEMA);
				setState(3663);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3664);
				match(OWNER);
				setState(3665);
				match(TO);
				setState(3666);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterfuncOptListContext extends ParserRuleContext {
		public List<CommonFuncOptItemContext> commonFuncOptItem() {
			return getRuleContexts(CommonFuncOptItemContext.class);
		}
		public CommonFuncOptItemContext commonFuncOptItem(int i) {
			return getRuleContext(CommonFuncOptItemContext.class,i);
		}
		public AlterfuncOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfuncOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterfuncOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterfuncOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterfuncOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterfuncOptListContext alterfuncOptList() throws RecognitionException {
		AlterfuncOptListContext _localctx = new AlterfuncOptListContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_alterfuncOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3670); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3669);
				commonFuncOptItem();
				}
				}
				setState(3672); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==SET || _la==NOT || ((((_la - 237)) & ~0x3f) == 0 && ((1L << (_la - 237)) & ((1L << (ROWS - 237)) | (1L << (EXTERNAL - 237)) | (1L << (RESET - 237)))) != 0) || _la==SECURITY || ((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (COST - 439)) | (1L << (CALLED - 439)) | (1L << (PARALLEL - 439)) | (1L << (LEAKPROOF - 439)) | (1L << (IMMUTABLE - 439)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (RETURNS - 526)) | (1L << (SUPPORT - 526)) | (1L << (STABLE - 526)) | (1L << (VOLATILE - 526)) | (1L << (STRICT - 526)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public AlterFunctionClausesContext alterFunctionClauses() {
			return getRuleContext(AlterFunctionClausesContext.class,0);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_alterFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3674);
			match(ALTER);
			setState(3675);
			match(FUNCTION);
			setState(3676);
			functionWithArgtypes();
			setState(3677);
			alterFunctionClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionClausesContext extends ParserRuleContext {
		public AlterfuncOptListContext alterfuncOptList() {
			return getRuleContext(AlterfuncOptListContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(DDLStatementParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterFunctionClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunctionClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterFunctionClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterFunctionClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterFunctionClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionClausesContext alterFunctionClauses() throws RecognitionException {
		AlterFunctionClausesContext _localctx = new AlterFunctionClausesContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_alterFunctionClauses);
		int _la;
		try {
			setState(3699);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3679);
				alterfuncOptList();
				setState(3681);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(3680);
					match(RESTRICT);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3683);
				match(RENAME);
				setState(3684);
				match(TO);
				setState(3685);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3687);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3686);
					match(NO);
					}
				}

				setState(3689);
				match(DEPENDS);
				setState(3690);
				match(ON);
				setState(3691);
				match(EXTENSION);
				setState(3692);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3693);
				match(SET);
				setState(3694);
				match(SCHEMA);
				setState(3695);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3696);
				match(OWNER);
				setState(3697);
				match(TO);
				setState(3698);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPublicationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode PUBLICATION() { return getToken(DDLStatementParser.PUBLICATION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public AlterPublicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPublication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterPublication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterPublication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterPublication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPublicationContext alterPublication() throws RecognitionException {
		AlterPublicationContext _localctx = new AlterPublicationContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_alterPublication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3701);
			match(ALTER);
			setState(3702);
			match(PUBLICATION);
			setState(3703);
			name();
			setState(3715);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
			case 1:
				{
				setState(3704);
				match(RENAME);
				setState(3705);
				match(TO);
				setState(3706);
				name();
				}
				break;
			case 2:
				{
				setState(3707);
				match(OWNER);
				setState(3708);
				match(TO);
				setState(3709);
				roleSpec();
				}
				break;
			case 3:
				{
				setState(3710);
				match(SET);
				setState(3711);
				definition();
				}
				break;
			case 4:
				{
				setState(3712);
				_la = _input.LA(1);
				if ( !(((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (DROP - 68)) | (1L << (ADD - 68)) | (1L << (SET - 68)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3713);
				match(TABLE);
				setState(3714);
				relationExprList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterRoutineContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(DDLStatementParser.ROUTINE, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public AlterProcedureClausesContext alterProcedureClauses() {
			return getRuleContext(AlterProcedureClausesContext.class,0);
		}
		public AlterRoutineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRoutine; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterRoutine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterRoutine(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRoutineContext alterRoutine() throws RecognitionException {
		AlterRoutineContext _localctx = new AlterRoutineContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_alterRoutine);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3717);
			match(ALTER);
			setState(3718);
			match(ROUTINE);
			setState(3719);
			functionWithArgtypes();
			setState(3720);
			alterProcedureClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterRuleContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode RULE() { return getToken(DDLStatementParser.RULE, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRuleContext alterRule() throws RecognitionException {
		AlterRuleContext _localctx = new AlterRuleContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_alterRule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3722);
			match(ALTER);
			setState(3723);
			match(RULE);
			setState(3724);
			match(ON);
			setState(3725);
			qualifiedName();
			setState(3726);
			match(RENAME);
			setState(3727);
			match(TO);
			setState(3728);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(DDLStatementParser.SEQUENCE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public AlterSequenceClausesContext alterSequenceClauses() {
			return getRuleContext(AlterSequenceClausesContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public AlterSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSequenceContext alterSequence() throws RecognitionException {
		AlterSequenceContext _localctx = new AlterSequenceContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_alterSequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3730);
			match(ALTER);
			setState(3731);
			match(SEQUENCE);
			setState(3733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				{
				setState(3732);
				existClause();
				}
				break;
			}
			setState(3735);
			qualifiedName();
			setState(3736);
			alterSequenceClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSequenceClausesContext extends ParserRuleContext {
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public AlterSequenceClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSequenceClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterSequenceClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterSequenceClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterSequenceClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSequenceClausesContext alterSequenceClauses() throws RecognitionException {
		AlterSequenceClausesContext _localctx = new AlterSequenceClausesContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_alterSequenceClauses);
		try {
			setState(3746);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3738);
				alterTableCmds();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3739);
				seqOptList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3740);
				match(RENAME);
				setState(3741);
				match(TO);
				setState(3742);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3743);
				match(SET);
				setState(3744);
				match(SCHEMA);
				setState(3745);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public ForeignServerVersionContext foreignServerVersion() {
			return getRuleContext(ForeignServerVersionContext.class,0);
		}
		public AlterGenericOptionsContext alterGenericOptions() {
			return getRuleContext(AlterGenericOptionsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_alterServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3748);
			match(ALTER);
			setState(3749);
			match(SERVER);
			setState(3750);
			name();
			setState(3762);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,287,_ctx) ) {
			case 1:
				{
				setState(3751);
				foreignServerVersion();
				setState(3752);
				alterGenericOptions();
				}
				break;
			case 2:
				{
				setState(3754);
				foreignServerVersion();
				}
				break;
			case 3:
				{
				setState(3755);
				alterGenericOptions();
				}
				break;
			case 4:
				{
				setState(3756);
				match(RENAME);
				setState(3757);
				match(TO);
				setState(3758);
				name();
				}
				break;
			case 5:
				{
				setState(3759);
				match(OWNER);
				setState(3760);
				match(TO);
				setState(3761);
				roleSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForeignServerVersionContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(DDLStatementParser.VERSION, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public ForeignServerVersionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignServerVersion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterForeignServerVersion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitForeignServerVersion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitForeignServerVersion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeignServerVersionContext foreignServerVersion() throws RecognitionException {
		ForeignServerVersionContext _localctx = new ForeignServerVersionContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_foreignServerVersion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3764);
			match(VERSION);
			setState(3765);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStatisticsContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public List<TerminalNode> STATISTICS() { return getTokens(DDLStatementParser.STATISTICS); }
		public TerminalNode STATISTICS(int i) {
			return getToken(DDLStatementParser.STATISTICS, i);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public AlterStatisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterStatistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterStatistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterStatistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatisticsContext alterStatistics() throws RecognitionException {
		AlterStatisticsContext _localctx = new AlterStatisticsContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_alterStatistics);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3767);
			match(ALTER);
			setState(3768);
			match(STATISTICS);
			setState(3792);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
			case 1:
				{
				setState(3770);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
				case 1:
					{
					setState(3769);
					existClause();
					}
					break;
				}
				setState(3772);
				anyName();
				setState(3773);
				match(SET);
				setState(3774);
				match(STATISTICS);
				setState(3775);
				signedIconst();
				}
				break;
			case 2:
				{
				setState(3777);
				anyName();
				setState(3778);
				match(RENAME);
				setState(3779);
				match(TO);
				setState(3780);
				name();
				}
				break;
			case 3:
				{
				setState(3782);
				anyName();
				setState(3783);
				match(SET);
				setState(3784);
				match(SCHEMA);
				setState(3785);
				name();
				}
				break;
			case 4:
				{
				setState(3787);
				anyName();
				setState(3788);
				match(OWNER);
				setState(3789);
				match(TO);
				setState(3790);
				roleSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSubscriptionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(DDLStatementParser.SUBSCRIPTION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(DDLStatementParser.CONNECTION, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode REFRESH() { return getToken(DDLStatementParser.REFRESH, 0); }
		public TerminalNode PUBLICATION() { return getToken(DDLStatementParser.PUBLICATION, 0); }
		public PublicationNameListContext publicationNameList() {
			return getRuleContext(PublicationNameListContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(DDLStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DDLStatementParser.DISABLE, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public AlterSubscriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSubscription; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterSubscription(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterSubscription(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterSubscription(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSubscriptionContext alterSubscription() throws RecognitionException {
		AlterSubscriptionContext _localctx = new AlterSubscriptionContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_alterSubscription);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3794);
			match(ALTER);
			setState(3795);
			match(SUBSCRIPTION);
			setState(3796);
			name();
			setState(3821);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
			case 1:
				{
				setState(3797);
				match(RENAME);
				setState(3798);
				match(TO);
				setState(3799);
				name();
				}
				break;
			case 2:
				{
				setState(3800);
				match(OWNER);
				setState(3801);
				match(TO);
				setState(3802);
				roleSpec();
				}
				break;
			case 3:
				{
				setState(3803);
				match(SET);
				setState(3804);
				definition();
				}
				break;
			case 4:
				{
				setState(3805);
				match(CONNECTION);
				setState(3806);
				match(STRING_);
				}
				break;
			case 5:
				{
				setState(3807);
				match(REFRESH);
				setState(3808);
				match(PUBLICATION);
				setState(3811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3809);
					match(WITH);
					setState(3810);
					definition();
					}
				}

				}
				break;
			case 6:
				{
				setState(3813);
				match(SET);
				setState(3814);
				match(PUBLICATION);
				setState(3815);
				publicationNameList();
				setState(3818);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3816);
					match(WITH);
					setState(3817);
					definition();
					}
				}

				}
				break;
			case 7:
				{
				setState(3820);
				_la = _input.LA(1);
				if ( !(_la==ENABLE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PublicationNameListContext extends ParserRuleContext {
		public List<PublicationNameItemContext> publicationNameItem() {
			return getRuleContexts(PublicationNameItemContext.class);
		}
		public PublicationNameItemContext publicationNameItem(int i) {
			return getRuleContext(PublicationNameItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public PublicationNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publicationNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPublicationNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPublicationNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPublicationNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PublicationNameListContext publicationNameList() throws RecognitionException {
		PublicationNameListContext _localctx = new PublicationNameListContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_publicationNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3823);
			publicationNameItem();
			setState(3828);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3824);
				match(COMMA_);
				setState(3825);
				publicationNameItem();
				}
				}
				setState(3830);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PublicationNameItemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public PublicationNameItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publicationNameItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPublicationNameItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPublicationNameItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPublicationNameItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PublicationNameItemContext publicationNameItem() throws RecognitionException {
		PublicationNameItemContext _localctx = new PublicationNameItemContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_publicationNameItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3831);
			colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSystemContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(DDLStatementParser.SYSTEM, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public GenericSetContext genericSet() {
			return getRuleContext(GenericSetContext.class,0);
		}
		public TerminalNode RESET() { return getToken(DDLStatementParser.RESET, 0); }
		public GenericResetContext genericReset() {
			return getRuleContext(GenericResetContext.class,0);
		}
		public AlterSystemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSystem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterSystem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterSystem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterSystem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSystemContext alterSystem() throws RecognitionException {
		AlterSystemContext _localctx = new AlterSystemContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_alterSystem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3833);
			match(ALTER);
			setState(3834);
			match(SYSTEM);
			setState(3839);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				{
				setState(3835);
				match(SET);
				setState(3836);
				genericSet();
				}
				break;
			case RESET:
				{
				setState(3837);
				match(RESET);
				setState(3838);
				genericReset();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode RESET() { return getToken(DDLStatementParser.RESET, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_alterTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3841);
			match(ALTER);
			setState(3842);
			match(TABLESPACE);
			setState(3843);
			name();
			setState(3853);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				{
				setState(3844);
				match(SET);
				}
				break;
			case RESET:
				{
				setState(3845);
				match(RESET);
				setState(3846);
				reloptions();
				}
				break;
			case RENAME:
				{
				setState(3847);
				match(RENAME);
				setState(3848);
				match(TO);
				setState(3849);
				name();
				}
				break;
			case OWNER:
				{
				setState(3850);
				match(OWNER);
				setState(3851);
				match(TO);
				setState(3852);
				roleSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTextSearchConfigurationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(DDLStatementParser.CONFIGURATION, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public AlterTextSearchConfigurationClausesContext alterTextSearchConfigurationClauses() {
			return getRuleContext(AlterTextSearchConfigurationClausesContext.class,0);
		}
		public AlterTextSearchConfigurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchConfiguration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTextSearchConfiguration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTextSearchConfiguration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTextSearchConfiguration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchConfigurationContext alterTextSearchConfiguration() throws RecognitionException {
		AlterTextSearchConfigurationContext _localctx = new AlterTextSearchConfigurationContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_alterTextSearchConfiguration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3855);
			match(ALTER);
			setState(3856);
			match(TEXT);
			setState(3857);
			match(SEARCH);
			setState(3858);
			match(CONFIGURATION);
			setState(3859);
			anyName();
			setState(3860);
			alterTextSearchConfigurationClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTextSearchConfigurationClausesContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode MAPPING() { return getToken(DDLStatementParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public AlterTextSearchConfigurationClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchConfigurationClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTextSearchConfigurationClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTextSearchConfigurationClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTextSearchConfigurationClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchConfigurationClausesContext alterTextSearchConfigurationClauses() throws RecognitionException {
		AlterTextSearchConfigurationClausesContext _localctx = new AlterTextSearchConfigurationClausesContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_alterTextSearchConfigurationClauses);
		int _la;
		try {
			setState(3898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3862);
				match(RENAME);
				setState(3863);
				match(TO);
				setState(3864);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3865);
				match(SET);
				setState(3866);
				match(SCHEMA);
				setState(3867);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3868);
				match(OWNER);
				setState(3869);
				match(TO);
				setState(3870);
				roleSpec();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3871);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3872);
				match(MAPPING);
				setState(3873);
				match(FOR);
				setState(3874);
				nameList(0);
				setState(3876);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3875);
					match(WITH);
					}
				}

				setState(3878);
				anyNameList();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3880);
				match(ALTER);
				setState(3881);
				match(MAPPING);
				setState(3884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3882);
					match(FOR);
					setState(3883);
					nameList(0);
					}
				}

				setState(3886);
				match(REPLACE);
				setState(3887);
				anyName();
				setState(3888);
				match(WITH);
				setState(3889);
				anyName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3891);
				match(DROP);
				setState(3892);
				match(MAPPING);
				setState(3894);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(3893);
					existClause();
					}
				}

				setState(3896);
				match(FOR);
				setState(3897);
				nameList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnyNameListContext extends ParserRuleContext {
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public AnyNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAnyNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAnyNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAnyNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnyNameListContext anyNameList() throws RecognitionException {
		AnyNameListContext _localctx = new AnyNameListContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_anyNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3900);
			anyName();
			setState(3905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3901);
				match(COMMA_);
				setState(3902);
				anyName();
				}
				}
				setState(3907);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTextSearchDictionaryContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(DDLStatementParser.DICTIONARY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public AlterTextSearchDictionaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchDictionary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTextSearchDictionary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTextSearchDictionary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTextSearchDictionary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchDictionaryContext alterTextSearchDictionary() throws RecognitionException {
		AlterTextSearchDictionaryContext _localctx = new AlterTextSearchDictionaryContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_alterTextSearchDictionary);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3908);
			match(ALTER);
			setState(3909);
			match(TEXT);
			setState(3910);
			match(SEARCH);
			setState(3911);
			match(DICTIONARY);
			setState(3912);
			anyName();
			setState(3923);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(3913);
				match(RENAME);
				setState(3914);
				match(TO);
				setState(3915);
				name();
				}
				break;
			case SET:
				{
				setState(3916);
				match(SET);
				setState(3917);
				match(SCHEMA);
				setState(3918);
				name();
				}
				break;
			case OWNER:
				{
				setState(3919);
				match(OWNER);
				setState(3920);
				match(TO);
				setState(3921);
				roleSpec();
				}
				break;
			case LP_:
				{
				setState(3922);
				definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTextSearchParserContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(DDLStatementParser.PARSER, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public AlterTextSearchParserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchParser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTextSearchParser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTextSearchParser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTextSearchParser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchParserContext alterTextSearchParser() throws RecognitionException {
		AlterTextSearchParserContext _localctx = new AlterTextSearchParserContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_alterTextSearchParser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3925);
			match(ALTER);
			setState(3926);
			match(TEXT);
			setState(3927);
			match(SEARCH);
			setState(3928);
			match(PARSER);
			setState(3937);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				{
				setState(3929);
				anyName();
				setState(3930);
				match(RENAME);
				setState(3931);
				match(TO);
				setState(3932);
				name();
				}
				break;
			case 2:
				{
				setState(3934);
				match(SET);
				setState(3935);
				match(SCHEMA);
				setState(3936);
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTextSearchTemplateContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public TerminalNode TEMPLATE() { return getToken(DDLStatementParser.TEMPLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public AlterTextSearchTemplateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchTemplate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTextSearchTemplate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTextSearchTemplate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTextSearchTemplate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchTemplateContext alterTextSearchTemplate() throws RecognitionException {
		AlterTextSearchTemplateContext _localctx = new AlterTextSearchTemplateContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_alterTextSearchTemplate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3939);
			match(ALTER);
			setState(3940);
			match(TEXT);
			setState(3941);
			match(SEARCH);
			setState(3942);
			match(TEMPLATE);
			setState(3951);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
			case 1:
				{
				setState(3943);
				anyName();
				setState(3944);
				match(RENAME);
				setState(3945);
				match(TO);
				setState(3946);
				name();
				}
				break;
			case 2:
				{
				setState(3948);
				match(SET);
				setState(3949);
				match(SCHEMA);
				setState(3950);
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTriggerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(DDLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(DDLStatementParser.ON, i);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode DEPENDS() { return getToken(DDLStatementParser.DEPENDS, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public AlterTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTriggerContext alterTrigger() throws RecognitionException {
		AlterTriggerContext _localctx = new AlterTriggerContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_alterTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3953);
			match(ALTER);
			setState(3954);
			match(TRIGGER);
			setState(3955);
			name();
			setState(3956);
			match(ON);
			setState(3957);
			qualifiedName();
			setState(3968);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(3958);
				match(RENAME);
				setState(3959);
				match(TO);
				setState(3960);
				name();
				}
				break;
			case NO:
			case DEPENDS:
				{
				setState(3962);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3961);
					match(NO);
					}
				}

				setState(3964);
				match(DEPENDS);
				setState(3965);
				match(ON);
				setState(3966);
				match(EXTENSION);
				setState(3967);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTypeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public AlterTypeClausesContext alterTypeClauses() {
			return getRuleContext(AlterTypeClausesContext.class,0);
		}
		public AlterTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeContext alterType() throws RecognitionException {
		AlterTypeContext _localctx = new AlterTypeContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_alterType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3970);
			match(ALTER);
			setState(3971);
			match(TYPE);
			setState(3972);
			anyName();
			setState(3973);
			alterTypeClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTypeClausesContext extends ParserRuleContext {
		public AlterTypeCmdsContext alterTypeCmds() {
			return getRuleContext(AlterTypeCmdsContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode VALUE() { return getToken(DDLStatementParser.VALUE, 0); }
		public List<TerminalNode> STRING_() { return getTokens(DDLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DDLStatementParser.STRING_, i);
		}
		public NotExistClauseContext notExistClause() {
			return getRuleContext(NotExistClauseContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(DDLStatementParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(DDLStatementParser.AFTER, 0); }
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode ATTRIBUTE() { return getToken(DDLStatementParser.ATTRIBUTE, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public OperatorDefListContext operatorDefList() {
			return getRuleContext(OperatorDefListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterTypeClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTypeClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTypeClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTypeClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTypeClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeClausesContext alterTypeClauses() throws RecognitionException {
		AlterTypeClausesContext _localctx = new AlterTypeClausesContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_alterTypeClauses);
		int _la;
		try {
			setState(4013);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3975);
				alterTypeCmds();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3976);
				match(ADD);
				setState(3977);
				match(VALUE);
				setState(3979);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(3978);
					notExistClause();
					}
				}

				setState(3981);
				match(STRING_);
				setState(3984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER || _la==BEFORE) {
					{
					setState(3982);
					_la = _input.LA(1);
					if ( !(_la==AFTER || _la==BEFORE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(3983);
					match(STRING_);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3986);
				match(RENAME);
				setState(3987);
				match(VALUE);
				setState(3988);
				match(STRING_);
				setState(3989);
				match(TO);
				setState(3990);
				match(STRING_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3991);
				match(RENAME);
				setState(3992);
				match(TO);
				setState(3993);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3994);
				match(RENAME);
				setState(3995);
				match(ATTRIBUTE);
				setState(3996);
				name();
				setState(3997);
				match(TO);
				setState(3998);
				name();
				setState(4000);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(3999);
					dropBehavior();
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4002);
				match(SET);
				setState(4003);
				match(SCHEMA);
				setState(4004);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4005);
				match(SET);
				setState(4006);
				match(LP_);
				setState(4007);
				operatorDefList();
				setState(4008);
				match(RP_);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4010);
				match(OWNER);
				setState(4011);
				match(TO);
				setState(4012);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTypeCmdsContext extends ParserRuleContext {
		public List<AlterTypeCmdContext> alterTypeCmd() {
			return getRuleContexts(AlterTypeCmdContext.class);
		}
		public AlterTypeCmdContext alterTypeCmd(int i) {
			return getRuleContext(AlterTypeCmdContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public AlterTypeCmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTypeCmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTypeCmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTypeCmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTypeCmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeCmdsContext alterTypeCmds() throws RecognitionException {
		AlterTypeCmdsContext _localctx = new AlterTypeCmdsContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_alterTypeCmds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4015);
			alterTypeCmd();
			setState(4018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(4016);
				match(COMMA_);
				setState(4017);
				alterTypeCmd();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTypeCmdContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(DDLStatementParser.ATTRIBUTE, 0); }
		public TableFuncElementContext tableFuncElement() {
			return getRuleContext(TableFuncElementContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public SetDataContext setData() {
			return getRuleContext(SetDataContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public AlterTypeCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTypeCmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTypeCmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTypeCmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTypeCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeCmdContext alterTypeCmd() throws RecognitionException {
		AlterTypeCmdContext _localctx = new AlterTypeCmdContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_alterTypeCmd);
		int _la;
		try {
			setState(4053);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4020);
				match(ADD);
				setState(4021);
				match(ATTRIBUTE);
				setState(4022);
				tableFuncElement();
				setState(4024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4023);
					dropBehavior();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4026);
				match(DROP);
				setState(4027);
				match(ATTRIBUTE);
				setState(4028);
				existClause();
				setState(4029);
				colId();
				setState(4031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4030);
					dropBehavior();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4033);
				match(DROP);
				setState(4034);
				match(ATTRIBUTE);
				setState(4035);
				colId();
				setState(4037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4036);
					dropBehavior();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4039);
				match(ALTER);
				setState(4040);
				match(ATTRIBUTE);
				setState(4041);
				colId();
				setState(4043);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(4042);
					setData();
					}
				}

				setState(4045);
				match(TYPE);
				setState(4046);
				typeName();
				setState(4048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(4047);
					collateClause();
					}
				}

				setState(4051);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4050);
					dropBehavior();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserMappingContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(DDLStatementParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public AuthIdentContext authIdent() {
			return getRuleContext(AuthIdentContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterGenericOptionsContext alterGenericOptions() {
			return getRuleContext(AlterGenericOptionsContext.class,0);
		}
		public AlterUserMappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserMapping; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterUserMapping(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterUserMapping(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterUserMapping(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserMappingContext alterUserMapping() throws RecognitionException {
		AlterUserMappingContext _localctx = new AlterUserMappingContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_alterUserMapping);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4055);
			match(ALTER);
			setState(4056);
			match(USER);
			setState(4057);
			match(MAPPING);
			setState(4058);
			match(FOR);
			setState(4059);
			authIdent();
			setState(4060);
			match(SERVER);
			setState(4061);
			name();
			setState(4062);
			alterGenericOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthIdentContext extends ParserRuleContext {
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public AuthIdentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authIdent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAuthIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAuthIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAuthIdent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthIdentContext authIdent() throws RecognitionException {
		AuthIdentContext _localctx = new AuthIdentContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_authIdent);
		try {
			setState(4066);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4064);
				roleSpec();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4065);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public AlterViewClausesContext alterViewClauses() {
			return getRuleContext(AlterViewClausesContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_alterView);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4068);
			match(ALTER);
			setState(4069);
			match(VIEW);
			setState(4071);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				{
				setState(4070);
				existClause();
				}
				break;
			}
			setState(4073);
			qualifiedName();
			setState(4074);
			alterViewClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewClausesContext extends ParserRuleContext {
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public AlterViewClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterViewClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterViewClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterViewClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterViewClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewClausesContext alterViewClauses() throws RecognitionException {
		AlterViewClausesContext _localctx = new AlterViewClausesContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_alterViewClauses);
		int _la;
		try {
			setState(4091);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4076);
				alterTableCmds();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4077);
				match(RENAME);
				setState(4078);
				match(TO);
				setState(4079);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4080);
				match(RENAME);
				setState(4082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(4081);
					match(COLUMN);
					}
				}

				setState(4084);
				name();
				setState(4085);
				match(TO);
				setState(4086);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4088);
				match(SET);
				setState(4089);
				match(SCHEMA);
				setState(4090);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloseContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(DDLStatementParser.CLOSE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public CloseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterClose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitClose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitClose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloseContext close() throws RecognitionException {
		CloseContext _localctx = new CloseContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_close);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4093);
			match(CLOSE);
			setState(4096);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(4094);
				cursorName();
				}
				break;
			case ALL:
				{
				setState(4095);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(DDLStatementParser.CLUSTER, 0); }
		public TerminalNode VERBOSE() { return getToken(DDLStatementParser.VERBOSE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public ClusterIndexSpecificationContext clusterIndexSpecification() {
			return getRuleContext(ClusterIndexSpecificationContext.class,0);
		}
		public ClusterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCluster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCluster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCluster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterContext cluster() throws RecognitionException {
		ClusterContext _localctx = new ClusterContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_cluster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4098);
			match(CLUSTER);
			setState(4100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERBOSE) {
				{
				setState(4099);
				match(VERBOSE);
				}
			}

			setState(4110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
			case 1:
				{
				setState(4102);
				qualifiedName();
				setState(4104);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4103);
					clusterIndexSpecification();
					}
				}

				}
				break;
			case 2:
				{
				setState(4106);
				name();
				setState(4107);
				match(ON);
				setState(4108);
				qualifiedName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ClusterIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterIndexSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterClusterIndexSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitClusterIndexSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitClusterIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterIndexSpecificationContext clusterIndexSpecification() throws RecognitionException {
		ClusterIndexSpecificationContext _localctx = new ClusterIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_clusterIndexSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4112);
			match(USING);
			setState(4113);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(DDLStatementParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public CommentClausesContext commentClauses() {
			return getRuleContext(CommentClausesContext.class,0);
		}
		public CommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentContext comment() throws RecognitionException {
		CommentContext _localctx = new CommentContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_comment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4115);
			match(COMMENT);
			setState(4116);
			match(ON);
			setState(4117);
			commentClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentClausesContext extends ParserRuleContext {
		public ObjectTypeAnyNameContext objectTypeAnyName() {
			return getRuleContext(ObjectTypeAnyNameContext.class,0);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode IS() { return getToken(DDLStatementParser.IS, 0); }
		public CommentTextContext commentText() {
			return getRuleContext(CommentTextContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public ObjectTypeNameContext objectTypeName() {
			return getRuleContext(ObjectTypeNameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode DOMAIN() { return getToken(DDLStatementParser.DOMAIN, 0); }
		public TerminalNode AGGREGATE() { return getToken(DDLStatementParser.AGGREGATE, 0); }
		public AggregateWithArgtypesContext aggregateWithArgtypes() {
			return getRuleContext(AggregateWithArgtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public OperatorWithArgtypesContext operatorWithArgtypes() {
			return getRuleContext(OperatorWithArgtypesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public ObjectTypeNameOnAnyNameContext objectTypeNameOnAnyName() {
			return getRuleContext(ObjectTypeNameOnAnyNameContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(DDLStatementParser.ROUTINE, 0); }
		public TerminalNode TRANSFORM() { return getToken(DDLStatementParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public TerminalNode CLASS() { return getToken(DDLStatementParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(DDLStatementParser.FAMILY, 0); }
		public TerminalNode LARGE() { return getToken(DDLStatementParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DDLStatementParser.OBJECT, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode CAST() { return getToken(DDLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public CommentClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCommentClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCommentClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCommentClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentClausesContext commentClauses() throws RecognitionException {
		CommentClausesContext _localctx = new CommentClausesContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_commentClauses);
		try {
			setState(4230);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4119);
				objectTypeAnyName();
				setState(4120);
				anyName();
				setState(4121);
				match(IS);
				setState(4122);
				commentText();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4124);
				match(COLUMN);
				setState(4125);
				anyName();
				setState(4126);
				match(IS);
				setState(4127);
				commentText();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4129);
				objectTypeName();
				setState(4130);
				name();
				setState(4131);
				match(IS);
				setState(4132);
				commentText();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4134);
				match(TYPE);
				setState(4135);
				typeName();
				setState(4136);
				match(IS);
				setState(4137);
				commentText();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4139);
				match(DOMAIN);
				setState(4140);
				typeName();
				setState(4141);
				match(IS);
				setState(4142);
				commentText();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4144);
				match(AGGREGATE);
				setState(4145);
				aggregateWithArgtypes();
				setState(4146);
				match(IS);
				setState(4147);
				commentText();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4149);
				match(FUNCTION);
				setState(4150);
				functionWithArgtypes();
				setState(4151);
				match(IS);
				setState(4152);
				commentText();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4154);
				match(OPERATOR);
				setState(4155);
				operatorWithArgtypes();
				setState(4156);
				match(IS);
				setState(4157);
				commentText();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4159);
				match(CONSTRAINT);
				setState(4160);
				name();
				setState(4161);
				match(ON);
				setState(4162);
				anyName();
				setState(4163);
				match(IS);
				setState(4164);
				commentText();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4166);
				match(CONSTRAINT);
				setState(4167);
				name();
				setState(4168);
				match(ON);
				setState(4169);
				match(DOMAIN);
				setState(4170);
				anyName();
				setState(4171);
				match(IS);
				setState(4172);
				commentText();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4174);
				objectTypeNameOnAnyName();
				setState(4175);
				name();
				setState(4176);
				match(ON);
				setState(4177);
				anyName();
				setState(4178);
				match(IS);
				setState(4179);
				commentText();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4181);
				match(PROCEDURE);
				setState(4182);
				functionWithArgtypes();
				setState(4183);
				match(IS);
				setState(4184);
				commentText();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4186);
				match(ROUTINE);
				setState(4187);
				functionWithArgtypes();
				setState(4188);
				match(IS);
				setState(4189);
				commentText();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4191);
				match(TRANSFORM);
				setState(4192);
				match(FOR);
				setState(4193);
				typeName();
				setState(4194);
				match(LANGUAGE);
				setState(4195);
				name();
				setState(4196);
				match(IS);
				setState(4197);
				commentText();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4199);
				match(OPERATOR);
				setState(4200);
				match(CLASS);
				setState(4201);
				anyName();
				setState(4202);
				match(USING);
				setState(4203);
				name();
				setState(4204);
				match(IS);
				setState(4205);
				commentText();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4207);
				match(OPERATOR);
				setState(4208);
				match(FAMILY);
				setState(4209);
				anyName();
				setState(4210);
				match(USING);
				setState(4211);
				name();
				setState(4212);
				match(IS);
				setState(4213);
				commentText();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4215);
				match(LARGE);
				setState(4216);
				match(OBJECT);
				setState(4217);
				numericOnly();
				setState(4218);
				match(IS);
				setState(4219);
				commentText();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4221);
				match(CAST);
				setState(4222);
				match(LP_);
				setState(4223);
				typeName();
				setState(4224);
				match(AS);
				setState(4225);
				typeName();
				setState(4226);
				match(RP_);
				setState(4227);
				match(IS);
				setState(4228);
				commentText();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ObjectTypeNameOnAnyNameContext extends ParserRuleContext {
		public TerminalNode POLICY() { return getToken(DDLStatementParser.POLICY, 0); }
		public TerminalNode RULE() { return getToken(DDLStatementParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public ObjectTypeNameOnAnyNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectTypeNameOnAnyName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterObjectTypeNameOnAnyName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitObjectTypeNameOnAnyName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitObjectTypeNameOnAnyName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ObjectTypeNameOnAnyNameContext objectTypeNameOnAnyName() throws RecognitionException {
		ObjectTypeNameOnAnyNameContext _localctx = new ObjectTypeNameOnAnyNameContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_objectTypeNameOnAnyName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4232);
			_la = _input.LA(1);
			if ( !(_la==TRIGGER || _la==RULE || _la==POLICY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ObjectTypeNameContext extends ParserRuleContext {
		public DropTypeNameContext dropTypeName() {
			return getRuleContext(DropTypeNameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(DDLStatementParser.DATABASE, 0); }
		public TerminalNode ROLE() { return getToken(DDLStatementParser.ROLE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(DDLStatementParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public ObjectTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterObjectTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitObjectTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitObjectTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ObjectTypeNameContext objectTypeName() throws RecognitionException {
		ObjectTypeNameContext _localctx = new ObjectTypeNameContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_objectTypeName);
		try {
			setState(4239);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCHEMA:
			case FOREIGN:
			case EXTENSION:
			case LANGUAGE:
			case ACCESS:
			case EVENT:
			case PROCEDURAL:
			case PUBLICATION:
			case SERVER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4234);
				dropTypeName();
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4235);
				match(DATABASE);
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4236);
				match(ROLE);
				}
				break;
			case SUBSCRIPTION:
				enterOuterAlt(_localctx, 4);
				{
				setState(4237);
				match(SUBSCRIPTION);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 5);
				{
				setState(4238);
				match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTypeNameContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(DDLStatementParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(DDLStatementParser.METHOD, 0); }
		public TerminalNode EVENT() { return getToken(DDLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(DDLStatementParser.WRAPPER, 0); }
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(DDLStatementParser.PROCEDURAL, 0); }
		public TerminalNode PUBLICATION() { return getToken(DDLStatementParser.PUBLICATION, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public DropTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTypeNameContext dropTypeName() throws RecognitionException {
		DropTypeNameContext _localctx = new DropTypeNameContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_dropTypeName);
		int _la;
		try {
			setState(4256);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4241);
				match(ACCESS);
				setState(4242);
				match(METHOD);
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4243);
				match(EVENT);
				setState(4244);
				match(TRIGGER);
				}
				break;
			case EXTENSION:
				enterOuterAlt(_localctx, 3);
				{
				setState(4245);
				match(EXTENSION);
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 4);
				{
				setState(4246);
				match(FOREIGN);
				setState(4247);
				match(DATA);
				setState(4248);
				match(WRAPPER);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(4249);
					match(PROCEDURAL);
					}
				}

				setState(4252);
				match(LANGUAGE);
				}
				break;
			case PUBLICATION:
				enterOuterAlt(_localctx, 6);
				{
				setState(4253);
				match(PUBLICATION);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 7);
				{
				setState(4254);
				match(SCHEMA);
				}
				break;
			case SERVER:
				enterOuterAlt(_localctx, 8);
				{
				setState(4255);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ObjectTypeAnyNameContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(DDLStatementParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode COLLATION() { return getToken(DDLStatementParser.COLLATION, 0); }
		public TerminalNode CONVERSION() { return getToken(DDLStatementParser.CONVERSION, 0); }
		public TerminalNode STATISTICS() { return getToken(DDLStatementParser.STATISTICS, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(DDLStatementParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(DDLStatementParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(DDLStatementParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(DDLStatementParser.CONFIGURATION, 0); }
		public ObjectTypeAnyNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectTypeAnyName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterObjectTypeAnyName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitObjectTypeAnyName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitObjectTypeAnyName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ObjectTypeAnyNameContext objectTypeAnyName() throws RecognitionException {
		ObjectTypeAnyNameContext _localctx = new ObjectTypeAnyNameContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_objectTypeAnyName);
		try {
			setState(4281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4258);
				match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4259);
				match(SEQUENCE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4260);
				match(VIEW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4261);
				match(MATERIALIZED);
				setState(4262);
				match(VIEW);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4263);
				match(INDEX);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4264);
				match(FOREIGN);
				setState(4265);
				match(TABLE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4266);
				match(COLLATION);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4267);
				match(CONVERSION);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4268);
				match(STATISTICS);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4269);
				match(TEXT);
				setState(4270);
				match(SEARCH);
				setState(4271);
				match(PARSER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4272);
				match(TEXT);
				setState(4273);
				match(SEARCH);
				setState(4274);
				match(DICTIONARY);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4275);
				match(TEXT);
				setState(4276);
				match(SEARCH);
				setState(4277);
				match(TEMPLATE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4278);
				match(TEXT);
				setState(4279);
				match(SEARCH);
				setState(4280);
				match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentTextContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public CommentTextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentText; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCommentText(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCommentText(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCommentText(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentTextContext commentText() throws RecognitionException {
		CommentTextContext _localctx = new CommentTextContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_commentText);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4283);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAccessMethodContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode ACCESS() { return getToken(DDLStatementParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(DDLStatementParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TerminalNode HANDLER() { return getToken(DDLStatementParser.HANDLER, 0); }
		public HandlerNameContext handlerName() {
			return getRuleContext(HandlerNameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public CreateAccessMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAccessMethod; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateAccessMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateAccessMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateAccessMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAccessMethodContext createAccessMethod() throws RecognitionException {
		CreateAccessMethodContext _localctx = new CreateAccessMethodContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_createAccessMethod);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4285);
			match(CREATE);
			setState(4286);
			match(ACCESS);
			setState(4287);
			match(METHOD);
			setState(4288);
			name();
			setState(4289);
			match(TYPE);
			setState(4290);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4291);
			match(HANDLER);
			setState(4292);
			handlerName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAggregateContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode AGGREGATE() { return getToken(DDLStatementParser.AGGREGATE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public AggrArgsContext aggrArgs() {
			return getRuleContext(AggrArgsContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public OldAggrDefinitionContext oldAggrDefinition() {
			return getRuleContext(OldAggrDefinitionContext.class,0);
		}
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public CreateAggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateAggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateAggregate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateAggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAggregateContext createAggregate() throws RecognitionException {
		CreateAggregateContext _localctx = new CreateAggregateContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_createAggregate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4294);
			match(CREATE);
			setState(4297);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4295);
				match(OR);
				setState(4296);
				match(REPLACE);
				}
			}

			setState(4299);
			match(AGGREGATE);
			setState(4300);
			funcName();
			setState(4305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				{
				setState(4301);
				aggrArgs();
				setState(4302);
				definition();
				}
				break;
			case 2:
				{
				setState(4304);
				oldAggrDefinition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OldAggrDefinitionContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public OldAggrListContext oldAggrList() {
			return getRuleContext(OldAggrListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public OldAggrDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oldAggrDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOldAggrDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOldAggrDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOldAggrDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OldAggrDefinitionContext oldAggrDefinition() throws RecognitionException {
		OldAggrDefinitionContext _localctx = new OldAggrDefinitionContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_oldAggrDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4307);
			match(LP_);
			setState(4308);
			oldAggrList();
			setState(4309);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OldAggrListContext extends ParserRuleContext {
		public List<OldAggrElemContext> oldAggrElem() {
			return getRuleContexts(OldAggrElemContext.class);
		}
		public OldAggrElemContext oldAggrElem(int i) {
			return getRuleContext(OldAggrElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public OldAggrListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oldAggrList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOldAggrList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOldAggrList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOldAggrList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OldAggrListContext oldAggrList() throws RecognitionException {
		OldAggrListContext _localctx = new OldAggrListContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_oldAggrList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4311);
			oldAggrElem();
			setState(4316);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4312);
				match(COMMA_);
				setState(4313);
				oldAggrElem();
				}
				}
				setState(4318);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OldAggrElemContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public DefArgContext defArg() {
			return getRuleContext(DefArgContext.class,0);
		}
		public OldAggrElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oldAggrElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOldAggrElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOldAggrElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOldAggrElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OldAggrElemContext oldAggrElem() throws RecognitionException {
		OldAggrElemContext _localctx = new OldAggrElemContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_oldAggrElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4319);
			identifier();
			setState(4320);
			match(EQ_);
			setState(4321);
			defArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateCastContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode CAST() { return getToken(DDLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(DDLStatementParser.WITHOUT, 0); }
		public TerminalNode INOUT() { return getToken(DDLStatementParser.INOUT, 0); }
		public CastContextContext castContext() {
			return getRuleContext(CastContextContext.class,0);
		}
		public CreateCastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createCast; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateCast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateCast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateCast(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateCastContext createCast() throws RecognitionException {
		CreateCastContext _localctx = new CreateCastContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_createCast);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4323);
			match(CREATE);
			setState(4324);
			match(CAST);
			setState(4325);
			match(LP_);
			setState(4326);
			typeName();
			setState(4327);
			match(AS);
			setState(4328);
			typeName();
			setState(4329);
			match(RP_);
			setState(4346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
			case 1:
				{
				setState(4330);
				match(WITH);
				setState(4331);
				match(FUNCTION);
				setState(4332);
				functionWithArgtypes();
				setState(4334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4333);
					castContext();
					}
				}

				}
				break;
			case 2:
				{
				setState(4336);
				match(WITHOUT);
				setState(4337);
				match(FUNCTION);
				setState(4339);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4338);
					castContext();
					}
				}

				}
				break;
			case 3:
				{
				setState(4341);
				match(WITH);
				setState(4342);
				match(INOUT);
				setState(4344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4343);
					castContext();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastContextContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode IMPLICIT() { return getToken(DDLStatementParser.IMPLICIT, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(DDLStatementParser.ASSIGNMENT, 0); }
		public CastContextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castContext; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCastContext(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCastContext(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCastContext(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastContextContext castContext() throws RecognitionException {
		CastContextContext _localctx = new CastContextContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_castContext);
		try {
			setState(4352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4348);
				match(AS);
				setState(4349);
				match(IMPLICIT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4350);
				match(AS);
				setState(4351);
				match(ASSIGNMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateCollationContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode COLLATION() { return getToken(DDLStatementParser.COLLATION, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public NotExistClauseContext notExistClause() {
			return getRuleContext(NotExistClauseContext.class,0);
		}
		public CreateCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createCollation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateCollation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateCollationContext createCollation() throws RecognitionException {
		CreateCollationContext _localctx = new CreateCollationContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_createCollation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4354);
			match(CREATE);
			setState(4355);
			match(COLLATION);
			setState(4357);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
			case 1:
				{
				setState(4356);
				notExistClause();
				}
				break;
			}
			setState(4366);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				setState(4359);
				anyName();
				setState(4360);
				definition();
				}
				break;
			case 2:
				{
				setState(4362);
				anyName();
				setState(4363);
				match(FROM);
				setState(4364);
				anyName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateConversionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode CONVERSION() { return getToken(DDLStatementParser.CONVERSION, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public List<TerminalNode> STRING_() { return getTokens(DDLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DDLStatementParser.STRING_, i);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public CreateConversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createConversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateConversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateConversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateConversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateConversionContext createConversion() throws RecognitionException {
		CreateConversionContext _localctx = new CreateConversionContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_createConversion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4368);
			match(CREATE);
			setState(4370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4369);
				match(DEFAULT);
				}
			}

			setState(4372);
			match(CONVERSION);
			setState(4373);
			anyName();
			setState(4374);
			match(FOR);
			setState(4375);
			match(STRING_);
			setState(4376);
			match(TO);
			setState(4377);
			match(STRING_);
			setState(4378);
			match(FROM);
			setState(4379);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDomainContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode DOMAIN() { return getToken(DDLStatementParser.DOMAIN, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public CreateDomainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDomain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateDomain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateDomain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateDomain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDomainContext createDomain() throws RecognitionException {
		CreateDomainContext _localctx = new CreateDomainContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_createDomain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4381);
			match(CREATE);
			setState(4382);
			match(DOMAIN);
			setState(4383);
			anyName();
			setState(4385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4384);
				match(AS);
				}
			}

			setState(4387);
			typeName();
			setState(4388);
			colQualList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventTriggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(DDLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(DDLStatementParser.EXECUTE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public TerminalNode WHEN() { return getToken(DDLStatementParser.WHEN, 0); }
		public EventTriggerWhenListContext eventTriggerWhenList() {
			return getRuleContext(EventTriggerWhenListContext.class,0);
		}
		public CreateEventTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEventTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateEventTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateEventTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateEventTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventTriggerContext createEventTrigger() throws RecognitionException {
		CreateEventTriggerContext _localctx = new CreateEventTriggerContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_createEventTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4390);
			match(CREATE);
			setState(4391);
			match(EVENT);
			setState(4392);
			match(TRIGGER);
			setState(4393);
			name();
			setState(4394);
			match(ON);
			setState(4395);
			colLabel();
			setState(4398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(4396);
				match(WHEN);
				setState(4397);
				eventTriggerWhenList();
				}
			}

			setState(4400);
			match(EXECUTE);
			setState(4401);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4402);
			funcName();
			setState(4403);
			match(LP_);
			setState(4404);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventTriggerWhenListContext extends ParserRuleContext {
		public List<EventTriggerWhenItemContext> eventTriggerWhenItem() {
			return getRuleContexts(EventTriggerWhenItemContext.class);
		}
		public EventTriggerWhenItemContext eventTriggerWhenItem(int i) {
			return getRuleContext(EventTriggerWhenItemContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(DDLStatementParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(DDLStatementParser.AND, i);
		}
		public EventTriggerWhenListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventTriggerWhenList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterEventTriggerWhenList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitEventTriggerWhenList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitEventTriggerWhenList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventTriggerWhenListContext eventTriggerWhenList() throws RecognitionException {
		EventTriggerWhenListContext _localctx = new EventTriggerWhenListContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_eventTriggerWhenList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4406);
			eventTriggerWhenItem();
			setState(4411);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(4407);
				match(AND);
				setState(4408);
				eventTriggerWhenItem();
				}
				}
				setState(4413);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventTriggerWhenItemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public EventTriggerValueListContext eventTriggerValueList() {
			return getRuleContext(EventTriggerValueListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public EventTriggerWhenItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventTriggerWhenItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterEventTriggerWhenItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitEventTriggerWhenItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitEventTriggerWhenItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventTriggerWhenItemContext eventTriggerWhenItem() throws RecognitionException {
		EventTriggerWhenItemContext _localctx = new EventTriggerWhenItemContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_eventTriggerWhenItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4414);
			colId();
			setState(4415);
			match(IN);
			setState(4416);
			match(LP_);
			setState(4417);
			eventTriggerValueList();
			setState(4418);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventTriggerValueListContext extends ParserRuleContext {
		public List<TerminalNode> STRING_() { return getTokens(DDLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DDLStatementParser.STRING_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public EventTriggerValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventTriggerValueList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterEventTriggerValueList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitEventTriggerValueList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitEventTriggerValueList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventTriggerValueListContext eventTriggerValueList() throws RecognitionException {
		EventTriggerValueListContext _localctx = new EventTriggerValueListContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_eventTriggerValueList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4420);
			match(STRING_);
			setState(4425);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4421);
				match(COMMA_);
				setState(4422);
				match(STRING_);
				}
				}
				setState(4427);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateExtensionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateExtensionOptListContext createExtensionOptList() {
			return getRuleContext(CreateExtensionOptListContext.class,0);
		}
		public NotExistClauseContext notExistClause() {
			return getRuleContext(NotExistClauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public CreateExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateExtension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateExtension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionContext createExtension() throws RecognitionException {
		CreateExtensionContext _localctx = new CreateExtensionContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_createExtension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4428);
			match(CREATE);
			setState(4429);
			match(EXTENSION);
			setState(4431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(4430);
				notExistClause();
				}
				break;
			}
			setState(4433);
			name();
			setState(4435);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4434);
				match(WITH);
				}
			}

			setState(4437);
			createExtensionOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateExtensionOptListContext extends ParserRuleContext {
		public List<CreateExtensionOptItemContext> createExtensionOptItem() {
			return getRuleContexts(CreateExtensionOptItemContext.class);
		}
		public CreateExtensionOptItemContext createExtensionOptItem(int i) {
			return getRuleContext(CreateExtensionOptItemContext.class,i);
		}
		public CreateExtensionOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtensionOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateExtensionOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateExtensionOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateExtensionOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionOptListContext createExtensionOptList() throws RecognitionException {
		CreateExtensionOptListContext _localctx = new CreateExtensionOptListContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_createExtensionOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SCHEMA || _la==FROM || _la==CASCADE || _la==VERSION) {
				{
				{
				setState(4439);
				createExtensionOptItem();
				}
				}
				setState(4444);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateExtensionOptItemContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode VERSION() { return getToken(DDLStatementParser.VERSION, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public CreateExtensionOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtensionOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateExtensionOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateExtensionOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateExtensionOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionOptItemContext createExtensionOptItem() throws RecognitionException {
		CreateExtensionOptItemContext _localctx = new CreateExtensionOptItemContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_createExtensionOptItem);
		try {
			setState(4452);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(4445);
				match(SCHEMA);
				setState(4446);
				name();
				}
				break;
			case VERSION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4447);
				match(VERSION);
				setState(4448);
				nonReservedWordOrSconst();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 3);
				{
				setState(4449);
				match(FROM);
				setState(4450);
				nonReservedWordOrSconst();
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4451);
				match(CASCADE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignDataWrapperContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(DDLStatementParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public FdwOptionsContext fdwOptions() {
			return getRuleContext(FdwOptionsContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public CreateForeignDataWrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignDataWrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateForeignDataWrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateForeignDataWrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateForeignDataWrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignDataWrapperContext createForeignDataWrapper() throws RecognitionException {
		CreateForeignDataWrapperContext _localctx = new CreateForeignDataWrapperContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_createForeignDataWrapper);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4454);
			match(CREATE);
			setState(4455);
			match(FOREIGN);
			setState(4456);
			match(DATA);
			setState(4457);
			match(WRAPPER);
			setState(4458);
			name();
			setState(4460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO || _la==HANDLER || _la==VALIDATOR) {
				{
				setState(4459);
				fdwOptions();
				}
			}

			setState(4463);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(4462);
				createGenericOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignTableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public CreateForeignTableClausesContext createForeignTableClauses() {
			return getRuleContext(CreateForeignTableClausesContext.class,0);
		}
		public CreateForeignTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateForeignTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateForeignTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateForeignTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignTableContext createForeignTable() throws RecognitionException {
		CreateForeignTableContext _localctx = new CreateForeignTableContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_createForeignTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4465);
			match(CREATE);
			setState(4466);
			match(FOREIGN);
			setState(4467);
			match(TABLE);
			setState(4468);
			createForeignTableClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignTableClausesContext extends ParserRuleContext {
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public List<TerminalNode> LP_() { return getTokens(DDLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(DDLStatementParser.LP_, i);
		}
		public List<TerminalNode> RP_() { return getTokens(DDLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(DDLStatementParser.RP_, i);
		}
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public NotExistClauseContext notExistClause() {
			return getRuleContext(NotExistClauseContext.class,0);
		}
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public TerminalNode INHERITS() { return getToken(DDLStatementParser.INHERITS, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(DDLStatementParser.PARTITION, 0); }
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public PartitionBoundSpecContext partitionBoundSpec() {
			return getRuleContext(PartitionBoundSpecContext.class,0);
		}
		public TypedTableElementListContext typedTableElementList() {
			return getRuleContext(TypedTableElementListContext.class,0);
		}
		public CreateForeignTableClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignTableClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateForeignTableClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateForeignTableClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateForeignTableClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignTableClausesContext createForeignTableClauses() throws RecognitionException {
		CreateForeignTableClausesContext _localctx = new CreateForeignTableClausesContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_createForeignTableClauses);
		int _la;
		try {
			setState(4510);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4471);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(4470);
					notExistClause();
					}
					break;
				}
				setState(4473);
				qualifiedName();
				setState(4474);
				match(LP_);
				setState(4476);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (PRIMARY - 64)) | (1L << (UNIQUE - 64)) | (1L << (FOREIGN - 64)) | (1L << (KEY - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (IF - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (LIKE - 129)) | (1L << (BY - 129)) | (1L << (BEGIN - 129)) | (1L << (COMMIT - 129)) | (1L << (ROLLBACK - 129)) | (1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (VARYING - 194)) | (1L << (VALUE - 194)) | (1L << (TIES - 194)) | (1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (CHECK - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (EXCLUDING - 258)) | (1L << (EXECUTE - 258)) | (1L << (EXTENSION - 258)) | (1L << (EXTERNAL - 258)) | (1L << (FILTER - 258)) | (1L << (FIRST - 258)) | (1L << (FOLLOWING - 258)) | (1L << (FORCE - 258)) | (1L << (GLOBAL - 258)) | (1L << (IDENTITY - 258)) | (1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (WITHOUT - 322)) | (1L << (ZONE - 322)) | (1L << (OF - 322)) | (1L << (UESCAPE - 322)) | (1L << (GROUPS - 322)) | (1L << (RECURSIVE - 322)) | (1L << (ENUM - 322)) | (1L << (XML - 322)) | (1L << (JSON - 322)) | (1L << (ORDINALITY - 322)) | (1L << (NFC - 322)) | (1L << (NFD - 322)) | (1L << (NFKC - 322)) | (1L << (NFKD - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (REF - 387)) | (1L << (PASSING - 387)) | (1L << (VERSION - 387)) | (1L << (YES - 387)) | (1L << (STANDALONE - 387)) | (1L << (MATERIALIZED - 387)) | (1L << (OPERATOR - 387)) | (1L << (SHARE - 387)) | (1L << (ROLLUP - 387)) | (1L << (DOCUMENT - 387)) | (1L << (NORMALIZED - 387)) | (1L << (NOWAIT - 387)) | (1L << (LOCKED - 387)) | (1L << (COLUMNS - 387)) | (1L << (CONTENT - 387)) | (1L << (STRIP - 387)) | (1L << (WHITESPACE - 387)) | (1L << (CONFLICT - 387)) | (1L << (OVERRIDING - 387)) | (1L << (SYSTEM - 387)) | (1L << (ABORT - 387)) | (1L << (ABSOLUTE - 387)) | (1L << (ACCESS - 387)) | (1L << (AFTER - 387)) | (1L << (AGGREGATE - 387)) | (1L << (ALSO - 387)) | (1L << (ATTACH - 387)) | (1L << (ATTRIBUTE - 387)) | (1L << (BACKWARD - 387)) | (1L << (BEFORE - 387)) | (1L << (ASSERTION - 387)) | (1L << (ASSIGNMENT - 387)) | (1L << (CONTINUE - 387)) | (1L << (CONVERSION - 387)) | (1L << (COPY - 387)) | (1L << (COST - 387)) | (1L << (CSV - 387)) | (1L << (CALLED - 387)) | (1L << (CATALOG - 387)) | (1L << (CHAIN - 387)) | (1L << (CHECKPOINT - 387)) | (1L << (CLASS - 387)) | (1L << (CONFIGURATION - 387)) | (1L << (COMMENT - 387)) | (1L << (DETACH - 387)) | (1L << (DICTIONARY - 387)) | (1L << (EXPRESSION - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (INSENSITIVE - 451)) | (1L << (DISCARD - 451)) | (1L << (OFF - 451)) | (1L << (INSTEAD - 451)) | (1L << (EXPLAIN - 451)) | (1L << (INPUT - 451)) | (1L << (INLINE - 451)) | (1L << (PARALLEL - 451)) | (1L << (LEAKPROOF - 451)) | (1L << (COMMITTED - 451)) | (1L << (ENCODING - 451)) | (1L << (IMPLICIT - 451)) | (1L << (DELIMITER - 451)) | (1L << (CURSOR - 451)) | (1L << (EACH - 451)) | (1L << (EVENT - 451)) | (1L << (DEALLOCATE - 451)) | (1L << (CONNECTION - 451)) | (1L << (DECLARE - 451)) | (1L << (FAMILY - 451)) | (1L << (FORWARD - 451)) | (1L << (EXCLUSIVE - 451)) | (1L << (FUNCTIONS - 451)) | (1L << (LOCATION - 451)) | (1L << (LABEL - 451)) | (1L << (DELIMITERS - 451)) | (1L << (HANDLER - 451)) | (1L << (HEADER - 451)) | (1L << (IMMUTABLE - 451)) | (1L << (GRANTED - 451)) | (1L << (HOLD - 451)) | (1L << (MAPPING - 451)) | (1L << (OLD - 451)) | (1L << (METHOD - 451)) | (1L << (LOAD - 451)) | (1L << (LISTEN - 451)) | (1L << (MODE - 451)) | (1L << (MOVE - 451)) | (1L << (PROCEDURAL - 451)) | (1L << (PARSER - 451)) | (1L << (PROCEDURES - 451)) | (1L << (ENCRYPTED - 451)) | (1L << (PUBLICATION - 451)) | (1L << (PROGRAM - 451)) | (1L << (REFERENCING - 451)) | (1L << (PLANS - 451)) | (1L << (REINDEX - 451)) | (1L << (PRIOR - 451)) | (1L << (PASSWORD - 451)) | (1L << (RELATIVE - 451)) | (1L << (QUOTE - 451)) | (1L << (ROUTINES - 451)) | (1L << (REPLACE - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (REFRESH - 451)) | (1L << (PREPARE - 451)) | (1L << (OPTIONS - 451)) | (1L << (IMPORT - 451)) | (1L << (INVOKER - 451)) | (1L << (NEW - 451)) | (1L << (PREPARED - 451)) | (1L << (SCROLL - 451)) | (1L << (SEQUENCES - 451)) | (1L << (SYSID - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (REASSIGN - 515)) | (1L << (SERVER - 515)) | (1L << (SUBSCRIPTION - 515)) | (1L << (SEARCH - 515)) | (1L << (SCHEMAS - 515)) | (1L << (RECHECK - 515)) | (1L << (POLICY - 515)) | (1L << (NOTIFY - 515)) | (1L << (LOCK - 515)) | (1L << (RELEASE - 515)) | (1L << (SERIALIZABLE - 515)) | (1L << (RETURNS - 515)) | (1L << (STATEMENT - 515)) | (1L << (STDIN - 515)) | (1L << (STDOUT - 515)) | (1L << (TABLES - 515)) | (1L << (SUPPORT - 515)) | (1L << (STABLE - 515)) | (1L << (TEMPLATE - 515)) | (1L << (UNENCRYPTED - 515)) | (1L << (VIEWS - 515)) | (1L << (UNCOMMITTED - 515)) | (1L << (TRANSFORM - 515)) | (1L << (UNLISTEN - 515)) | (1L << (TRUSTED - 515)) | (1L << (VALIDATOR - 515)) | (1L << (UNTIL - 515)) | (1L << (VACUUM - 515)) | (1L << (VOLATILE - 515)) | (1L << (STORED - 515)) | (1L << (WRITE - 515)) | (1L << (STRICT - 515)) | (1L << (TYPES - 515)) | (1L << (WRAPPER - 515)) | (1L << (WORK - 515)) | (1L << (IDENTIFIER_ - 515)))) != 0)) {
					{
					setState(4475);
					tableElementList();
					}
				}

				setState(4478);
				match(RP_);
				setState(4484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INHERITS) {
					{
					setState(4479);
					match(INHERITS);
					setState(4480);
					match(LP_);
					setState(4481);
					qualifiedNameList(0);
					setState(4482);
					match(RP_);
					}
				}

				setState(4486);
				match(SERVER);
				setState(4487);
				name();
				setState(4489);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(4488);
					createGenericOptions();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4492);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
				case 1:
					{
					setState(4491);
					notExistClause();
					}
					break;
				}
				setState(4494);
				qualifiedName();
				setState(4495);
				match(PARTITION);
				setState(4496);
				match(OF);
				setState(4497);
				qualifiedName();
				setState(4502);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(4498);
					match(LP_);
					setState(4499);
					typedTableElementList();
					setState(4500);
					match(RP_);
					}
				}

				setState(4504);
				partitionBoundSpec();
				setState(4505);
				match(SERVER);
				setState(4506);
				name();
				setState(4508);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(4507);
					createGenericOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementListContext extends ParserRuleContext {
		public List<TableElementContext> tableElement() {
			return getRuleContexts(TableElementContext.class);
		}
		public TableElementContext tableElement(int i) {
			return getRuleContext(TableElementContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementListContext tableElementList() throws RecognitionException {
		TableElementListContext _localctx = new TableElementListContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_tableElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4512);
			tableElement();
			setState(4517);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4513);
				match(COMMA_);
				setState(4514);
				tableElement();
				}
				}
				setState(4519);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementContext extends ParserRuleContext {
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TableLikeClauseContext tableLikeClause() {
			return getRuleContext(TableLikeClauseContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_tableElement);
		try {
			setState(4523);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4520);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4521);
				tableLikeClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4522);
				tableConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLikeClauseContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(DDLStatementParser.LIKE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TableLikeOptionListContext tableLikeOptionList() {
			return getRuleContext(TableLikeOptionListContext.class,0);
		}
		public TableLikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableLikeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableLikeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableLikeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeClauseContext tableLikeClause() throws RecognitionException {
		TableLikeClauseContext _localctx = new TableLikeClauseContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_tableLikeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4525);
			match(LIKE);
			setState(4526);
			qualifiedName();
			setState(4527);
			tableLikeOptionList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLikeOptionListContext extends ParserRuleContext {
		public TableLikeOptionListContext tableLikeOptionList() {
			return getRuleContext(TableLikeOptionListContext.class,0);
		}
		public TableLikeOptionContext tableLikeOption() {
			return getRuleContext(TableLikeOptionContext.class,0);
		}
		public TerminalNode INCLUDING() { return getToken(DDLStatementParser.INCLUDING, 0); }
		public TerminalNode EXCLUDING() { return getToken(DDLStatementParser.EXCLUDING, 0); }
		public TableLikeOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableLikeOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableLikeOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableLikeOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeOptionListContext tableLikeOptionList() throws RecognitionException {
		return tableLikeOptionList(0);
	}

	private TableLikeOptionListContext tableLikeOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableLikeOptionListContext _localctx = new TableLikeOptionListContext(_ctx, _parentState);
		TableLikeOptionListContext _prevctx = _localctx;
		int _startState = 488;
		enterRecursionRule(_localctx, 488, RULE_tableLikeOptionList, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(4535);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,362,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableLikeOptionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableLikeOptionList);
					setState(4530);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4531);
					_la = _input.LA(1);
					if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4532);
					tableLikeOption();
					}
					} 
				}
				setState(4537);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,362,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableLikeOptionContext extends ParserRuleContext {
		public TerminalNode COMMENTS() { return getToken(DDLStatementParser.COMMENTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(DDLStatementParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(DDLStatementParser.DEFAULTS, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public TerminalNode GENERATED() { return getToken(DDLStatementParser.GENERATED, 0); }
		public TerminalNode INDEXES() { return getToken(DDLStatementParser.INDEXES, 0); }
		public TerminalNode STATISTICS() { return getToken(DDLStatementParser.STATISTICS, 0); }
		public TerminalNode STORAGE() { return getToken(DDLStatementParser.STORAGE, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TableLikeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableLikeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableLikeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableLikeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeOptionContext tableLikeOption() throws RecognitionException {
		TableLikeOptionContext _localctx = new TableLikeOptionContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_tableLikeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4538);
			_la = _input.LA(1);
			if ( !(_la==ALL || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & ((1L << (GENERATED - 228)) | (1L << (COMMENTS - 228)) | (1L << (CONSTRAINTS - 228)) | (1L << (DEFAULTS - 228)) | (1L << (IDENTITY - 228)) | (1L << (INDEXES - 228)))) != 0) || _la==STATISTICS || _la==STORAGE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public FuncArgsWithDefaultsContext funcArgsWithDefaults() {
			return getRuleContext(FuncArgsWithDefaultsContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(DDLStatementParser.RETURNS, 0); }
		public FuncReturnContext funcReturn() {
			return getRuleContext(FuncReturnContext.class,0);
		}
		public CreatefuncOptListContext createfuncOptList() {
			return getRuleContext(CreatefuncOptListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TableFuncColumnListContext tableFuncColumnList() {
			return getRuleContext(TableFuncColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_createFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4540);
			match(CREATE);
			setState(4543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4541);
				match(OR);
				setState(4542);
				match(REPLACE);
				}
			}

			setState(4545);
			match(FUNCTION);
			setState(4546);
			funcName();
			setState(4547);
			funcArgsWithDefaults();
			setState(4560);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
			case 1:
				{
				setState(4548);
				match(RETURNS);
				setState(4549);
				funcReturn();
				setState(4550);
				createfuncOptList();
				}
				break;
			case 2:
				{
				setState(4552);
				match(RETURNS);
				setState(4553);
				match(TABLE);
				setState(4554);
				match(LP_);
				setState(4555);
				tableFuncColumnList();
				setState(4556);
				match(RP_);
				setState(4557);
				createfuncOptList();
				}
				break;
			case 3:
				{
				setState(4559);
				createfuncOptList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncColumnListContext extends ParserRuleContext {
		public List<TableFuncColumnContext> tableFuncColumn() {
			return getRuleContexts(TableFuncColumnContext.class);
		}
		public TableFuncColumnContext tableFuncColumn(int i) {
			return getRuleContext(TableFuncColumnContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TableFuncColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableFuncColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableFuncColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableFuncColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncColumnListContext tableFuncColumnList() throws RecognitionException {
		TableFuncColumnListContext _localctx = new TableFuncColumnListContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_tableFuncColumnList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4562);
			tableFuncColumn();
			setState(4567);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4563);
				match(COMMA_);
				setState(4564);
				tableFuncColumn();
				}
				}
				setState(4569);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncColumnContext extends ParserRuleContext {
		public ParamNameContext paramName() {
			return getRuleContext(ParamNameContext.class,0);
		}
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public TableFuncColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableFuncColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableFuncColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableFuncColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncColumnContext tableFuncColumn() throws RecognitionException {
		TableFuncColumnContext _localctx = new TableFuncColumnContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_tableFuncColumn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4570);
			paramName();
			setState(4571);
			funcType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatefuncOptListContext extends ParserRuleContext {
		public List<CreatefuncOptItemContext> createfuncOptItem() {
			return getRuleContexts(CreatefuncOptItemContext.class);
		}
		public CreatefuncOptItemContext createfuncOptItem(int i) {
			return getRuleContext(CreatefuncOptItemContext.class,i);
		}
		public CreatefuncOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfuncOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreatefuncOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreatefuncOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreatefuncOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatefuncOptListContext createfuncOptList() throws RecognitionException {
		CreatefuncOptListContext _localctx = new CreatefuncOptListContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_createfuncOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4574); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4573);
				createfuncOptItem();
				}
				}
				setState(4576); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (SET - 74)) | (1L << (AS - 74)) | (1L << (NOT - 74)))) != 0) || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (WINDOW - 209)) | (1L << (ROWS - 209)) | (1L << (EXTERNAL - 209)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (LANGUAGE - 278)) | (1L << (RESET - 278)) | (1L << (SECURITY - 278)))) != 0) || ((((_la - 439)) & ~0x3f) == 0 && ((1L << (_la - 439)) & ((1L << (COST - 439)) | (1L << (CALLED - 439)) | (1L << (PARALLEL - 439)) | (1L << (LEAKPROOF - 439)) | (1L << (IMMUTABLE - 439)))) != 0) || ((((_la - 526)) & ~0x3f) == 0 && ((1L << (_la - 526)) & ((1L << (RETURNS - 526)) | (1L << (SUPPORT - 526)) | (1L << (STABLE - 526)) | (1L << (TRANSFORM - 526)) | (1L << (VOLATILE - 526)) | (1L << (STRICT - 526)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatefuncOptItemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public FuncAsContext funcAs() {
			return getRuleContext(FuncAsContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public TerminalNode TRANSFORM() { return getToken(DDLStatementParser.TRANSFORM, 0); }
		public TransformTypeListContext transformTypeList() {
			return getRuleContext(TransformTypeListContext.class,0);
		}
		public TerminalNode WINDOW() { return getToken(DDLStatementParser.WINDOW, 0); }
		public CommonFuncOptItemContext commonFuncOptItem() {
			return getRuleContext(CommonFuncOptItemContext.class,0);
		}
		public CreatefuncOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfuncOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreatefuncOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreatefuncOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreatefuncOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatefuncOptItemContext createfuncOptItem() throws RecognitionException {
		CreatefuncOptItemContext _localctx = new CreatefuncOptItemContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_createfuncOptItem);
		try {
			setState(4586);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4578);
				match(AS);
				setState(4579);
				funcAs();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4580);
				match(LANGUAGE);
				setState(4581);
				nonReservedWordOrSconst();
				}
				break;
			case TRANSFORM:
				enterOuterAlt(_localctx, 3);
				{
				setState(4582);
				match(TRANSFORM);
				setState(4583);
				transformTypeList();
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 4);
				{
				setState(4584);
				match(WINDOW);
				}
				break;
			case SET:
			case NOT:
			case ROWS:
			case EXTERNAL:
			case RESET:
			case SECURITY:
			case COST:
			case CALLED:
			case PARALLEL:
			case LEAKPROOF:
			case IMMUTABLE:
			case RETURNS:
			case SUPPORT:
			case STABLE:
			case VOLATILE:
			case STRICT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4585);
				commonFuncOptItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransformTypeListContext extends ParserRuleContext {
		public List<TerminalNode> FOR() { return getTokens(DDLStatementParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(DDLStatementParser.FOR, i);
		}
		public List<TerminalNode> TYPE() { return getTokens(DDLStatementParser.TYPE); }
		public TerminalNode TYPE(int i) {
			return getToken(DDLStatementParser.TYPE, i);
		}
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public TransformTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transformTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTransformTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTransformTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTransformTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransformTypeListContext transformTypeList() throws RecognitionException {
		TransformTypeListContext _localctx = new TransformTypeListContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_transformTypeList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4588);
			match(FOR);
			setState(4589);
			match(TYPE);
			setState(4590);
			typeName();
			{
			setState(4591);
			match(COMMA_);
			setState(4592);
			match(FOR);
			setState(4593);
			match(TYPE);
			setState(4594);
			typeName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncAsContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> STRING_() { return getTokens(DDLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DDLStatementParser.STRING_, i);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public FuncAsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcAs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncAs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncAs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncAs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncAsContext funcAs() throws RecognitionException {
		FuncAsContext _localctx = new FuncAsContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_funcAs);
		try {
			setState(4603);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4596);
				identifier();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4597);
				match(STRING_);
				setState(4601);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COMMA_:
					{
					setState(4598);
					match(COMMA_);
					setState(4599);
					identifier();
					}
					break;
				case STRING_:
					{
					setState(4600);
					match(STRING_);
					}
					break;
				case EOF:
				case SET:
				case AS:
				case NOT:
				case WINDOW:
				case ROWS:
				case EXTERNAL:
				case LANGUAGE:
				case RESET:
				case SECURITY:
				case COST:
				case CALLED:
				case PARALLEL:
				case LEAKPROOF:
				case IMMUTABLE:
				case RETURNS:
				case SUPPORT:
				case STABLE:
				case TRANSFORM:
				case VOLATILE:
				case STRICT:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncReturnContext extends ParserRuleContext {
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public FuncReturnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcReturn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncReturn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncReturn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncReturn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncReturnContext funcReturn() throws RecognitionException {
		FuncReturnContext _localctx = new FuncReturnContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_funcReturn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4605);
			funcType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgsWithDefaultsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public FuncArgsWithDefaultsListContext funcArgsWithDefaultsList() {
			return getRuleContext(FuncArgsWithDefaultsListContext.class,0);
		}
		public FuncArgsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgsWithDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncArgsWithDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncArgsWithDefaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncArgsWithDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsWithDefaultsContext funcArgsWithDefaults() throws RecognitionException {
		FuncArgsWithDefaultsContext _localctx = new FuncArgsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_funcArgsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4607);
			match(LP_);
			setState(4609);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (KEY - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (NATURAL - 64)) | (1L << (JOIN - 64)) | (1L << (FULL - 64)) | (1L << (INNER - 64)) | (1L << (OUTER - 64)) | (1L << (LEFT - 64)) | (1L << (RIGHT - 64)) | (1L << (CROSS - 64)) | (1L << (IF - 64)) | (1L << (IS - 64)) | (1L << (IN - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (LIKE - 129)) | (1L << (BY - 129)) | (1L << (BEGIN - 129)) | (1L << (COMMIT - 129)) | (1L << (ROLLBACK - 129)) | (1L << (SAVEPOINT - 129)) | (1L << (BOOLEAN - 129)) | (1L << (DOUBLE - 129)) | (1L << (CHAR - 129)) | (1L << (CHARACTER - 129)) | (1L << (INTERVAL - 129)) | (1L << (DATE - 129)) | (1L << (TIME - 129)) | (1L << (TIMESTAMP - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (COLLATION - 129)) | (1L << (NAMES - 129)) | (1L << (INTEGER - 129)) | (1L << (REAL - 129)) | (1L << (DECIMAL - 129)) | (1L << (TYPE - 129)) | (1L << (SMALLINT - 129)) | (1L << (BIGINT - 129)) | (1L << (NUMERIC - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (VARYING - 194)) | (1L << (NATIONAL - 194)) | (1L << (NCHAR - 194)) | (1L << (VALUE - 194)) | (1L << (TIES - 194)) | (1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (OVERLAPS - 194)) | (1L << (AT - 194)) | (1L << (DEC - 194)) | (1L << (ADMIN - 194)) | (1L << (BINARY - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONCURRENTLY - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (EXCLUDING - 258)) | (1L << (EXECUTE - 258)) | (1L << (EXTENSION - 258)) | (1L << (EXTERNAL - 258)) | (1L << (FILTER - 258)) | (1L << (FIRST - 258)) | (1L << (FOLLOWING - 258)) | (1L << (FORCE - 258)) | (1L << (GLOBAL - 258)) | (1L << (IDENTITY - 258)) | (1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (WITHOUT - 322)) | (1L << (ZONE - 322)) | (1L << (OF - 322)) | (1L << (UESCAPE - 322)) | (1L << (GROUPS - 322)) | (1L << (RECURSIVE - 322)) | (1L << (INT - 322)) | (1L << (INT2 - 322)) | (1L << (INT4 - 322)) | (1L << (INT8 - 322)) | (1L << (FLOAT - 322)) | (1L << (FLOAT4 - 322)) | (1L << (FLOAT8 - 322)) | (1L << (VARCHAR - 322)) | (1L << (ENUM - 322)) | (1L << (BIT - 322)) | (1L << (XML - 322)) | (1L << (JSON - 322)) | (1L << (TABLESAMPLE - 322)) | (1L << (ORDINALITY - 322)) | (1L << (CURRENT_SCHEMA - 322)) | (1L << (SETOF - 322)) | (1L << (NFC - 322)) | (1L << (NFD - 322)) | (1L << (NFKC - 322)) | (1L << (NFKD - 322)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (REF - 387)) | (1L << (PASSING - 387)) | (1L << (VERSION - 387)) | (1L << (YES - 387)) | (1L << (STANDALONE - 387)) | (1L << (MATERIALIZED - 387)) | (1L << (OPERATOR - 387)) | (1L << (SHARE - 387)) | (1L << (ROLLUP - 387)) | (1L << (ILIKE - 387)) | (1L << (SIMILAR - 387)) | (1L << (ISNULL - 387)) | (1L << (NOTNULL - 387)) | (1L << (DOCUMENT - 387)) | (1L << (NORMALIZED - 387)) | (1L << (VARIADIC - 387)) | (1L << (NOWAIT - 387)) | (1L << (LOCKED - 387)) | (1L << (COLUMNS - 387)) | (1L << (CONTENT - 387)) | (1L << (STRIP - 387)) | (1L << (WHITESPACE - 387)) | (1L << (CONFLICT - 387)) | (1L << (OVERRIDING - 387)) | (1L << (SYSTEM - 387)) | (1L << (ABORT - 387)) | (1L << (ABSOLUTE - 387)) | (1L << (ACCESS - 387)) | (1L << (AFTER - 387)) | (1L << (AGGREGATE - 387)) | (1L << (ALSO - 387)) | (1L << (ATTACH - 387)) | (1L << (ATTRIBUTE - 387)) | (1L << (BACKWARD - 387)) | (1L << (BEFORE - 387)) | (1L << (ASSERTION - 387)) | (1L << (ASSIGNMENT - 387)) | (1L << (CONTINUE - 387)) | (1L << (CONVERSION - 387)) | (1L << (COPY - 387)) | (1L << (COST - 387)) | (1L << (CSV - 387)) | (1L << (CALLED - 387)) | (1L << (CATALOG - 387)) | (1L << (CHAIN - 387)) | (1L << (CHECKPOINT - 387)) | (1L << (CLASS - 387)) | (1L << (CONFIGURATION - 387)) | (1L << (COMMENT - 387)) | (1L << (DETACH - 387)) | (1L << (DICTIONARY - 387)) | (1L << (EXPRESSION - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (INSENSITIVE - 451)) | (1L << (DISCARD - 451)) | (1L << (OFF - 451)) | (1L << (INSTEAD - 451)) | (1L << (EXPLAIN - 451)) | (1L << (INPUT - 451)) | (1L << (INLINE - 451)) | (1L << (PARALLEL - 451)) | (1L << (LEAKPROOF - 451)) | (1L << (COMMITTED - 451)) | (1L << (ENCODING - 451)) | (1L << (IMPLICIT - 451)) | (1L << (DELIMITER - 451)) | (1L << (CURSOR - 451)) | (1L << (EACH - 451)) | (1L << (EVENT - 451)) | (1L << (DEALLOCATE - 451)) | (1L << (CONNECTION - 451)) | (1L << (DECLARE - 451)) | (1L << (FAMILY - 451)) | (1L << (FORWARD - 451)) | (1L << (EXCLUSIVE - 451)) | (1L << (FUNCTIONS - 451)) | (1L << (LOCATION - 451)) | (1L << (LABEL - 451)) | (1L << (DELIMITERS - 451)) | (1L << (HANDLER - 451)) | (1L << (HEADER - 451)) | (1L << (IMMUTABLE - 451)) | (1L << (GRANTED - 451)) | (1L << (HOLD - 451)) | (1L << (MAPPING - 451)) | (1L << (OLD - 451)) | (1L << (METHOD - 451)) | (1L << (LOAD - 451)) | (1L << (LISTEN - 451)) | (1L << (MODE - 451)) | (1L << (MOVE - 451)) | (1L << (PROCEDURAL - 451)) | (1L << (PARSER - 451)) | (1L << (PROCEDURES - 451)) | (1L << (ENCRYPTED - 451)) | (1L << (PUBLICATION - 451)) | (1L << (PROGRAM - 451)) | (1L << (REFERENCING - 451)) | (1L << (PLANS - 451)) | (1L << (REINDEX - 451)) | (1L << (PRIOR - 451)) | (1L << (PASSWORD - 451)) | (1L << (RELATIVE - 451)) | (1L << (QUOTE - 451)) | (1L << (ROUTINES - 451)) | (1L << (REPLACE - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (REFRESH - 451)) | (1L << (PREPARE - 451)) | (1L << (OPTIONS - 451)) | (1L << (IMPORT - 451)) | (1L << (INVOKER - 451)) | (1L << (NEW - 451)) | (1L << (PREPARED - 451)) | (1L << (SCROLL - 451)) | (1L << (SEQUENCES - 451)) | (1L << (SYSID - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (REASSIGN - 515)) | (1L << (SERVER - 515)) | (1L << (SUBSCRIPTION - 515)) | (1L << (SEARCH - 515)) | (1L << (SCHEMAS - 515)) | (1L << (RECHECK - 515)) | (1L << (POLICY - 515)) | (1L << (NOTIFY - 515)) | (1L << (LOCK - 515)) | (1L << (RELEASE - 515)) | (1L << (SERIALIZABLE - 515)) | (1L << (RETURNS - 515)) | (1L << (STATEMENT - 515)) | (1L << (STDIN - 515)) | (1L << (STDOUT - 515)) | (1L << (TABLES - 515)) | (1L << (SUPPORT - 515)) | (1L << (STABLE - 515)) | (1L << (TEMPLATE - 515)) | (1L << (UNENCRYPTED - 515)) | (1L << (VIEWS - 515)) | (1L << (UNCOMMITTED - 515)) | (1L << (TRANSFORM - 515)) | (1L << (UNLISTEN - 515)) | (1L << (TRUSTED - 515)) | (1L << (VALIDATOR - 515)) | (1L << (UNTIL - 515)) | (1L << (VACUUM - 515)) | (1L << (VOLATILE - 515)) | (1L << (STORED - 515)) | (1L << (WRITE - 515)) | (1L << (STRICT - 515)) | (1L << (TYPES - 515)) | (1L << (WRAPPER - 515)) | (1L << (WORK - 515)) | (1L << (FREEZE - 515)) | (1L << (AUTHORIZATION - 515)) | (1L << (VERBOSE - 515)) | (1L << (OUT - 515)) | (1L << (INOUT - 515)) | (1L << (IDENTIFIER_ - 515)))) != 0)) {
				{
				setState(4608);
				funcArgsWithDefaultsList();
				}
			}

			setState(4611);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgsWithDefaultsListContext extends ParserRuleContext {
		public List<FuncArgWithDefaultContext> funcArgWithDefault() {
			return getRuleContexts(FuncArgWithDefaultContext.class);
		}
		public FuncArgWithDefaultContext funcArgWithDefault(int i) {
			return getRuleContext(FuncArgWithDefaultContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public FuncArgsWithDefaultsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgsWithDefaultsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncArgsWithDefaultsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncArgsWithDefaultsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncArgsWithDefaultsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsWithDefaultsListContext funcArgsWithDefaultsList() throws RecognitionException {
		FuncArgsWithDefaultsListContext _localctx = new FuncArgsWithDefaultsListContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_funcArgsWithDefaultsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4613);
			funcArgWithDefault();
			setState(4618);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4614);
				match(COMMA_);
				setState(4615);
				funcArgWithDefault();
				}
				}
				setState(4620);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgWithDefaultContext extends ParserRuleContext {
		public FuncArgContext funcArg() {
			return getRuleContext(FuncArgContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public FuncArgWithDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgWithDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncArgWithDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncArgWithDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncArgWithDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgWithDefaultContext funcArgWithDefault() throws RecognitionException {
		FuncArgWithDefaultContext _localctx = new FuncArgWithDefaultContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_funcArgWithDefault);
		try {
			setState(4630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4621);
				funcArg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4622);
				funcArg();
				setState(4623);
				match(DEFAULT);
				setState(4624);
				aExpr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4626);
				funcArg();
				setState(4627);
				match(EQ_);
				setState(4628);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLanguageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public TerminalNode TRUSTED() { return getToken(DDLStatementParser.TRUSTED, 0); }
		public TerminalNode PROCEDURAL() { return getToken(DDLStatementParser.PROCEDURAL, 0); }
		public TerminalNode HANDLER() { return getToken(DDLStatementParser.HANDLER, 0); }
		public List<HandlerNameContext> handlerName() {
			return getRuleContexts(HandlerNameContext.class);
		}
		public HandlerNameContext handlerName(int i) {
			return getRuleContext(HandlerNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TransformElementListContext transformElementList() {
			return getRuleContext(TransformElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode INLINE() { return getToken(DDLStatementParser.INLINE, 0); }
		public ValidatorClauseContext validatorClause() {
			return getRuleContext(ValidatorClauseContext.class,0);
		}
		public CreateLanguageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLanguage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateLanguage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLanguageContext createLanguage() throws RecognitionException {
		CreateLanguageContext _localctx = new CreateLanguageContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_createLanguage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4632);
			match(CREATE);
			setState(4635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4633);
				match(OR);
				setState(4634);
				match(REPLACE);
				}
			}

			setState(4638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRUSTED) {
				{
				setState(4637);
				match(TRUSTED);
				}
			}

			setState(4641);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(4640);
				match(PROCEDURAL);
				}
			}

			setState(4643);
			match(LANGUAGE);
			setState(4644);
			name();
			setState(4658);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HANDLER:
				{
				setState(4645);
				match(HANDLER);
				setState(4646);
				handlerName();
				setState(4649);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INLINE) {
					{
					setState(4647);
					match(INLINE);
					setState(4648);
					handlerName();
					}
				}

				setState(4652);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO || _la==VALIDATOR) {
					{
					setState(4651);
					validatorClause();
					}
				}

				}
				break;
			case LP_:
				{
				setState(4654);
				match(LP_);
				setState(4655);
				transformElementList();
				setState(4656);
				match(RP_);
				}
				break;
			case EOF:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransformElementListContext extends ParserRuleContext {
		public List<TerminalNode> FROM() { return getTokens(DDLStatementParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(DDLStatementParser.FROM, i);
		}
		public List<TerminalNode> SQL() { return getTokens(DDLStatementParser.SQL); }
		public TerminalNode SQL(int i) {
			return getToken(DDLStatementParser.SQL, i);
		}
		public List<TerminalNode> WITH() { return getTokens(DDLStatementParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(DDLStatementParser.WITH, i);
		}
		public List<TerminalNode> FUNCTION() { return getTokens(DDLStatementParser.FUNCTION); }
		public TerminalNode FUNCTION(int i) {
			return getToken(DDLStatementParser.FUNCTION, i);
		}
		public List<FunctionWithArgtypesContext> functionWithArgtypes() {
			return getRuleContexts(FunctionWithArgtypesContext.class);
		}
		public FunctionWithArgtypesContext functionWithArgtypes(int i) {
			return getRuleContext(FunctionWithArgtypesContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TransformElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transformElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTransformElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTransformElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTransformElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransformElementListContext transformElementList() throws RecognitionException {
		TransformElementListContext _localctx = new TransformElementListContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_transformElementList);
		int _la;
		try {
			setState(4677);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4660);
				match(FROM);
				setState(4661);
				match(SQL);
				setState(4662);
				match(WITH);
				setState(4663);
				match(FUNCTION);
				setState(4664);
				functionWithArgtypes();
				setState(4665);
				match(COMMA_);
				setState(4666);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==TO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4667);
				match(SQL);
				setState(4668);
				match(WITH);
				setState(4669);
				match(FUNCTION);
				setState(4670);
				functionWithArgtypes();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4672);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==TO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4673);
				match(SQL);
				setState(4674);
				match(WITH);
				setState(4675);
				match(FUNCTION);
				setState(4676);
				functionWithArgtypes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValidatorClauseContext extends ParserRuleContext {
		public TerminalNode VALIDATOR() { return getToken(DDLStatementParser.VALIDATOR, 0); }
		public HandlerNameContext handlerName() {
			return getRuleContext(HandlerNameContext.class,0);
		}
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public ValidatorClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validatorClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterValidatorClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitValidatorClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitValidatorClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValidatorClauseContext validatorClause() throws RecognitionException {
		ValidatorClauseContext _localctx = new ValidatorClauseContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_validatorClause);
		try {
			setState(4683);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4679);
				match(VALIDATOR);
				setState(4680);
				handlerName();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(4681);
				match(NO);
				setState(4682);
				match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatePolicyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode POLICY() { return getToken(DDLStatementParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public RowSecurityCmdContext rowSecurityCmd() {
			return getRuleContext(RowSecurityCmdContext.class,0);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public List<TerminalNode> LP_() { return getTokens(DDLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(DDLStatementParser.LP_, i);
		}
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public List<TerminalNode> RP_() { return getTokens(DDLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(DDLStatementParser.RP_, i);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(DDLStatementParser.CHECK, 0); }
		public CreatePolicyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPolicy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreatePolicy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreatePolicy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreatePolicy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePolicyContext createPolicy() throws RecognitionException {
		CreatePolicyContext _localctx = new CreatePolicyContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_createPolicy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4685);
			match(CREATE);
			setState(4686);
			match(POLICY);
			setState(4687);
			name();
			setState(4688);
			match(ON);
			setState(4689);
			qualifiedName();
			setState(4692);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4690);
				match(AS);
				setState(4691);
				identifier();
				}
			}

			setState(4696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4694);
				match(FOR);
				setState(4695);
				rowSecurityCmd();
				}
			}

			setState(4700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(4698);
				match(TO);
				setState(4699);
				roleList();
				}
			}

			setState(4707);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4702);
				match(USING);
				setState(4703);
				match(LP_);
				setState(4704);
				aExpr(0);
				setState(4705);
				match(RP_);
				}
			}

			setState(4715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4709);
				match(WITH);
				setState(4710);
				match(CHECK);
				setState(4711);
				match(LP_);
				setState(4712);
				aExpr(0);
				setState(4713);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public FuncArgsWithDefaultsContext funcArgsWithDefaults() {
			return getRuleContext(FuncArgsWithDefaultsContext.class,0);
		}
		public CreatefuncOptListContext createfuncOptList() {
			return getRuleContext(CreatefuncOptListContext.class,0);
		}
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_createProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4717);
			match(CREATE);
			setState(4720);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4718);
				match(OR);
				setState(4719);
				match(REPLACE);
				}
			}

			setState(4722);
			match(PROCEDURE);
			setState(4723);
			funcName();
			setState(4724);
			funcArgsWithDefaults();
			setState(4725);
			createfuncOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatePublicationContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode PUBLICATION() { return getToken(DDLStatementParser.PUBLICATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public PublicationForTablesContext publicationForTables() {
			return getRuleContext(PublicationForTablesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public CreatePublicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPublication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreatePublication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreatePublication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreatePublication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePublicationContext createPublication() throws RecognitionException {
		CreatePublicationContext _localctx = new CreatePublicationContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_createPublication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4727);
			match(CREATE);
			setState(4728);
			match(PUBLICATION);
			setState(4729);
			name();
			setState(4731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4730);
				publicationForTables();
				}
			}

			setState(4735);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4733);
				match(WITH);
				setState(4734);
				definition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PublicationForTablesContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(DDLStatementParser.TABLES, 0); }
		public PublicationForTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publicationForTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPublicationForTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPublicationForTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPublicationForTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PublicationForTablesContext publicationForTables() throws RecognitionException {
		PublicationForTablesContext _localctx = new PublicationForTablesContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_publicationForTables);
		try {
			setState(4743);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,389,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4737);
				match(FOR);
				setState(4738);
				match(TABLE);
				setState(4739);
				relationExprList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4740);
				match(FOR);
				setState(4741);
				match(ALL);
				setState(4742);
				match(TABLES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRuleContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode RULE() { return getToken(DDLStatementParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public EventContext event() {
			return getRuleContext(EventContext.class,0);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode DO() { return getToken(DDLStatementParser.DO, 0); }
		public RuleActionListContext ruleActionList() {
			return getRuleContext(RuleActionListContext.class,0);
		}
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public TerminalNode WHERE() { return getToken(DDLStatementParser.WHERE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode INSTEAD() { return getToken(DDLStatementParser.INSTEAD, 0); }
		public TerminalNode ALSO() { return getToken(DDLStatementParser.ALSO, 0); }
		public CreateRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRuleContext createRule() throws RecognitionException {
		CreateRuleContext _localctx = new CreateRuleContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_createRule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4745);
			match(CREATE);
			setState(4748);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4746);
				match(OR);
				setState(4747);
				match(REPLACE);
				}
			}

			setState(4750);
			match(RULE);
			setState(4751);
			name();
			setState(4752);
			match(AS);
			setState(4753);
			match(ON);
			setState(4754);
			event();
			setState(4755);
			match(TO);
			setState(4756);
			qualifiedName();
			setState(4759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4757);
				match(WHERE);
				setState(4758);
				aExpr(0);
				}
			}

			setState(4761);
			match(DO);
			setState(4763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALSO || _la==INSTEAD) {
				{
				setState(4762);
				_la = _input.LA(1);
				if ( !(_la==ALSO || _la==INSTEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4765);
			ruleActionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionListContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(DDLStatementParser.NOTHING, 0); }
		public RuleActionStmtContext ruleActionStmt() {
			return getRuleContext(RuleActionStmtContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public RuleActionMultiContext ruleActionMulti() {
			return getRuleContext(RuleActionMultiContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public RuleActionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRuleActionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRuleActionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRuleActionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionListContext ruleActionList() throws RecognitionException {
		RuleActionListContext _localctx = new RuleActionListContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_ruleActionList);
		try {
			setState(4773);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOTHING:
				enterOuterAlt(_localctx, 1);
				{
				setState(4767);
				match(NOTHING);
				}
				break;
			case T__2:
			case SELECT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case TABLE:
			case VALUES:
			case WITH:
			case NOTIFY:
				enterOuterAlt(_localctx, 2);
				{
				setState(4768);
				ruleActionStmt();
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 3);
				{
				setState(4769);
				match(LP_);
				setState(4770);
				ruleActionMulti();
				setState(4771);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionStmtContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public NotifyStmtContext notifyStmt() {
			return getRuleContext(NotifyStmtContext.class,0);
		}
		public RuleActionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRuleActionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRuleActionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRuleActionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionStmtContext ruleActionStmt() throws RecognitionException {
		RuleActionStmtContext _localctx = new RuleActionStmtContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_ruleActionStmt);
		try {
			setState(4780);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4775);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4776);
				insert();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4777);
				update();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4778);
				delete();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4779);
				notifyStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionMultiContext extends ParserRuleContext {
		public List<RuleActionStmtContext> ruleActionStmt() {
			return getRuleContexts(RuleActionStmtContext.class);
		}
		public RuleActionStmtContext ruleActionStmt(int i) {
			return getRuleContext(RuleActionStmtContext.class,i);
		}
		public List<TerminalNode> SEMI_() { return getTokens(DDLStatementParser.SEMI_); }
		public TerminalNode SEMI_(int i) {
			return getToken(DDLStatementParser.SEMI_, i);
		}
		public RuleActionMultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionMulti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRuleActionMulti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRuleActionMulti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRuleActionMulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionMultiContext ruleActionMulti() throws RecognitionException {
		RuleActionMultiContext _localctx = new RuleActionMultiContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_ruleActionMulti);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << SELECT) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (TABLE - 64)) | (1L << (VALUES - 64)) | (1L << (WITH - 64)))) != 0) || _la==NOTIFY) {
				{
				setState(4782);
				ruleActionStmt();
				}
			}

			setState(4791);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMI_) {
				{
				{
				setState(4785);
				match(SEMI_);
				setState(4787);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << SELECT) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (TABLE - 64)) | (1L << (VALUES - 64)) | (1L << (WITH - 64)))) != 0) || _la==NOTIFY) {
					{
					setState(4786);
					ruleActionStmt();
					}
				}

				}
				}
				setState(4793);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotifyStmtContext extends ParserRuleContext {
		public TerminalNode NOTIFY() { return getToken(DDLStatementParser.NOTIFY, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public NotifyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifyStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNotifyStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNotifyStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNotifyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotifyStmtContext notifyStmt() throws RecognitionException {
		NotifyStmtContext _localctx = new NotifyStmtContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_notifyStmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4794);
			match(NOTIFY);
			setState(4795);
			colId();
			setState(4798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(4796);
				match(COMMA_);
				setState(4797);
				match(STRING_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TriggerActionTimeContext triggerActionTime() {
			return getRuleContext(TriggerActionTimeContext.class,0);
		}
		public TriggerEventsContext triggerEvents() {
			return getRuleContext(TriggerEventsContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(DDLStatementParser.EXECUTE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public TriggerReferencingContext triggerReferencing() {
			return getRuleContext(TriggerReferencingContext.class,0);
		}
		public TriggerForSpecContext triggerForSpec() {
			return getRuleContext(TriggerForSpecContext.class,0);
		}
		public TriggerWhenContext triggerWhen() {
			return getRuleContext(TriggerWhenContext.class,0);
		}
		public TriggerFuncArgsContext triggerFuncArgs() {
			return getRuleContext(TriggerFuncArgsContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(DDLStatementParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_createTrigger);
		int _la;
		try {
			setState(4844);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4800);
				match(CREATE);
				setState(4801);
				match(TRIGGER);
				setState(4802);
				name();
				setState(4803);
				triggerActionTime();
				setState(4804);
				triggerEvents();
				setState(4805);
				match(ON);
				setState(4806);
				qualifiedName();
				setState(4808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REFERENCING) {
					{
					setState(4807);
					triggerReferencing();
					}
				}

				setState(4811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4810);
					triggerForSpec();
					}
				}

				setState(4814);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(4813);
					triggerWhen();
					}
				}

				setState(4816);
				match(EXECUTE);
				setState(4817);
				_la = _input.LA(1);
				if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4818);
				funcName();
				setState(4819);
				match(LP_);
				setState(4821);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << SELECT) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (CREATE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (GRANT - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (TABLE - 64)) | (1L << (COLUMN - 64)) | (1L << (INDEX - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (PRIMARY - 64)) | (1L << (UNIQUE - 64)) | (1L << (FOREIGN - 64)) | (1L << (KEY - 64)) | (1L << (POSITION - 64)) | (1L << (PRECISION - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (INTO - 64)) | (1L << (VALUES - 64)) | (1L << (WITH - 64)) | (1L << (UNION - 64)) | (1L << (DISTINCT - 64)) | (1L << (CASE - 64)) | (1L << (WHEN - 64)) | (1L << (CAST - 64)) | (1L << (TRIM - 64)) | (1L << (SUBSTRING - 64)) | (1L << (FROM - 64)) | (1L << (NATURAL - 64)) | (1L << (JOIN - 64)) | (1L << (FULL - 64)) | (1L << (INNER - 64)) | (1L << (OUTER - 64)) | (1L << (LEFT - 64)) | (1L << (RIGHT - 64)) | (1L << (CROSS - 64)) | (1L << (USING - 64)) | (1L << (WHERE - 64)) | (1L << (AS - 64)) | (1L << (ON - 64)) | (1L << (IF - 64)) | (1L << (ELSE - 64)) | (1L << (THEN - 64)) | (1L << (FOR - 64)) | (1L << (TO - 64)) | (1L << (AND - 64)) | (1L << (OR - 64)) | (1L << (IS - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (TRUE - 64)) | (1L << (FALSE - 64)) | (1L << (EXISTS - 64)) | (1L << (BETWEEN - 64)) | (1L << (IN - 64)) | (1L << (ALL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ANY - 128)) | (1L << (LIKE - 128)) | (1L << (ORDER - 128)) | (1L << (GROUP - 128)) | (1L << (BY - 128)) | (1L << (ASC - 128)) | (1L << (DESC - 128)) | (1L << (HAVING - 128)) | (1L << (LIMIT - 128)) | (1L << (OFFSET - 128)) | (1L << (BEGIN - 128)) | (1L << (COMMIT - 128)) | (1L << (ROLLBACK - 128)) | (1L << (SAVEPOINT - 128)) | (1L << (BOOLEAN - 128)) | (1L << (DOUBLE - 128)) | (1L << (CHAR - 128)) | (1L << (CHARACTER - 128)) | (1L << (ARRAY - 128)) | (1L << (INTERVAL - 128)) | (1L << (TIME - 128)) | (1L << (TIMESTAMP - 128)) | (1L << (LOCALTIME - 128)) | (1L << (LOCALTIMESTAMP - 128)) | (1L << (YEAR - 128)) | (1L << (MONTH - 128)) | (1L << (DAY - 128)) | (1L << (HOUR - 128)) | (1L << (MINUTE - 128)) | (1L << (SECOND - 128)) | (1L << (DEFAULT - 128)) | (1L << (CURRENT - 128)) | (1L << (ENABLE - 128)) | (1L << (DISABLE - 128)) | (1L << (CALL - 128)) | (1L << (PRESERVE - 128)) | (1L << (DO - 128)) | (1L << (DEFINER - 128)) | (1L << (CURRENT_USER - 128)) | (1L << (SQL - 128)) | (1L << (CASCADED - 128)) | (1L << (LOCAL - 128)) | (1L << (CLOSE - 128)) | (1L << (NEXT - 128)) | (1L << (NAME - 128)) | (1L << (COLLATION - 128)) | (1L << (NAMES - 128)) | (1L << (INTEGER - 128)) | (1L << (REAL - 128)) | (1L << (DECIMAL - 128)) | (1L << (TYPE - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)) | (1L << (NUMERIC - 128)) | (1L << (TEXT - 128)) | (1L << (REPEATABLE - 128)) | (1L << (CURRENT_DATE - 128)) | (1L << (CURRENT_TIME - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (CURRENT_TIMESTAMP - 192)) | (1L << (NULLIF - 192)) | (1L << (VARYING - 192)) | (1L << (NATIONAL - 192)) | (1L << (NCHAR - 192)) | (1L << (VALUE - 192)) | (1L << (BOTH - 192)) | (1L << (LEADING - 192)) | (1L << (TRAILING - 192)) | (1L << (COALESCE - 192)) | (1L << (INTERSECT - 192)) | (1L << (EXCEPT - 192)) | (1L << (TIES - 192)) | (1L << (FETCH - 192)) | (1L << (CUBE - 192)) | (1L << (GROUPING - 192)) | (1L << (SETS - 192)) | (1L << (WINDOW - 192)) | (1L << (OTHERS - 192)) | (1L << (OVERLAPS - 192)) | (1L << (SOME - 192)) | (1L << (AT - 192)) | (1L << (DEC - 192)) | (1L << (END - 192)) | (1L << (ADMIN - 192)) | (1L << (BINARY - 192)) | (1L << (ESCAPE - 192)) | (1L << (EXCLUDE - 192)) | (1L << (PARTITION - 192)) | (1L << (ROW - 192)) | (1L << (UNKNOWN - 192)) | (1L << (ALWAYS - 192)) | (1L << (CASCADE - 192)) | (1L << (CHECK - 192)) | (1L << (GENERATED - 192)) | (1L << (ISOLATION - 192)) | (1L << (LEVEL - 192)) | (1L << (NO - 192)) | (1L << (OPTION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (READ - 192)) | (1L << (REFERENCES - 192)) | (1L << (ROLE - 192)) | (1L << (ROWS - 192)) | (1L << (START - 192)) | (1L << (TRANSACTION - 192)) | (1L << (USER - 192)) | (1L << (ACTION - 192)) | (1L << (CACHE - 192)) | (1L << (CHARACTERISTICS - 192)) | (1L << (CLUSTER - 192)) | (1L << (COLLATE - 192)) | (1L << (COMMENTS - 192)) | (1L << (CONCURRENTLY - 192)) | (1L << (CONSTRAINTS - 192)) | (1L << (CYCLE - 192)) | (1L << (DATA - 192)) | (1L << (DATABASE - 192)) | (1L << (DEFAULTS - 192)) | (1L << (DEFERRABLE - 192)) | (1L << (DEFERRED - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (DEPENDS - 256)) | (1L << (DOMAIN - 256)) | (1L << (EXCLUDING - 256)) | (1L << (EXECUTE - 256)) | (1L << (EXTENSION - 256)) | (1L << (EXTERNAL - 256)) | (1L << (EXTRACT - 256)) | (1L << (FILTER - 256)) | (1L << (FIRST - 256)) | (1L << (FOLLOWING - 256)) | (1L << (FORCE - 256)) | (1L << (GLOBAL - 256)) | (1L << (IDENTITY - 256)) | (1L << (IMMEDIATE - 256)) | (1L << (INCLUDING - 256)) | (1L << (INCREMENT - 256)) | (1L << (INDEXES - 256)) | (1L << (INHERIT - 256)) | (1L << (INHERITS - 256)) | (1L << (INITIALLY - 256)) | (1L << (INCLUDE - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LARGE - 256)) | (1L << (LAST - 256)) | (1L << (LOGGED - 256)) | (1L << (MATCH - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MINVALUE - 256)) | (1L << (NOTHING - 256)) | (1L << (NULLS - 256)) | (1L << (OBJECT - 256)) | (1L << (OIDS - 256)) | (1L << (ONLY - 256)) | (1L << (OVER - 256)) | (1L << (OWNED - 256)) | (1L << (OWNER - 256)) | (1L << (PARTIAL - 256)) | (1L << (PRECEDING - 256)) | (1L << (RANGE - 256)) | (1L << (RENAME - 256)) | (1L << (REPLICA - 256)) | (1L << (RESET - 256)) | (1L << (RESTART - 256)) | (1L << (RESTRICT - 256)) | (1L << (ROUTINE - 256)) | (1L << (RULE - 256)) | (1L << (SECURITY - 256)) | (1L << (SEQUENCE - 256)) | (1L << (SESSION - 256)) | (1L << (SESSION_USER - 256)) | (1L << (SHOW - 256)) | (1L << (SIMPLE - 256)) | (1L << (STATISTICS - 256)) | (1L << (STORAGE - 256)) | (1L << (TABLESPACE - 256)) | (1L << (TEMP - 256)) | (1L << (TEMPORARY - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNLOGGED - 256)) | (1L << (VALID - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (VALIDATE - 320)) | (1L << (WITHIN - 320)) | (1L << (WITHOUT - 320)) | (1L << (ZONE - 320)) | (1L << (OF - 320)) | (1L << (UESCAPE - 320)) | (1L << (GROUPS - 320)) | (1L << (RECURSIVE - 320)) | (1L << (INT - 320)) | (1L << (FLOAT - 320)) | (1L << (VARCHAR - 320)) | (1L << (ENUM - 320)) | (1L << (BIT - 320)) | (1L << (XML - 320)) | (1L << (JSON - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (ORDINALITY - 320)) | (1L << (CURRENT_ROLE - 320)) | (1L << (CURRENT_CATALOG - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (OVERLAY - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (TREAT - 320)) | (1L << (SETOF - 320)) | (1L << (NFC - 320)) | (1L << (NFD - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (NFKC - 384)) | (1L << (NFKD - 384)) | (1L << (XMLATTRIBUTES - 384)) | (1L << (REF - 384)) | (1L << (PASSING - 384)) | (1L << (VERSION - 384)) | (1L << (YES - 384)) | (1L << (STANDALONE - 384)) | (1L << (GREATEST - 384)) | (1L << (LEAST - 384)) | (1L << (MATERIALIZED - 384)) | (1L << (OPERATOR - 384)) | (1L << (SHARE - 384)) | (1L << (ROLLUP - 384)) | (1L << (ILIKE - 384)) | (1L << (SIMILAR - 384)) | (1L << (ISNULL - 384)) | (1L << (NOTNULL - 384)) | (1L << (SYMMETRIC - 384)) | (1L << (DOCUMENT - 384)) | (1L << (NORMALIZED - 384)) | (1L << (ASYMMETRIC - 384)) | (1L << (VARIADIC - 384)) | (1L << (NOWAIT - 384)) | (1L << (LOCKED - 384)) | (1L << (XMLTABLE - 384)) | (1L << (COLUMNS - 384)) | (1L << (CONTENT - 384)) | (1L << (STRIP - 384)) | (1L << (WHITESPACE - 384)) | (1L << (XMLNAMESPACES - 384)) | (1L << (PLACING - 384)) | (1L << (RETURNING - 384)) | (1L << (LATERAL - 384)) | (1L << (NONE - 384)) | (1L << (ANALYSE - 384)) | (1L << (ANALYZE - 384)) | (1L << (CONFLICT - 384)) | (1L << (OVERRIDING - 384)) | (1L << (SYSTEM - 384)) | (1L << (ABORT - 384)) | (1L << (ABSOLUTE - 384)) | (1L << (ACCESS - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALSO - 384)) | (1L << (ATTACH - 384)) | (1L << (ATTRIBUTE - 384)) | (1L << (BACKWARD - 384)) | (1L << (BEFORE - 384)) | (1L << (ASSERTION - 384)) | (1L << (ASSIGNMENT - 384)) | (1L << (CONTINUE - 384)) | (1L << (CONVERSION - 384)) | (1L << (COPY - 384)) | (1L << (COST - 384)) | (1L << (CSV - 384)) | (1L << (CALLED - 384)) | (1L << (CATALOG - 384)) | (1L << (CHAIN - 384)) | (1L << (CHECKPOINT - 384)) | (1L << (CLASS - 384)) | (1L << (CONFIGURATION - 384)) | (1L << (COMMENT - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (DETACH - 448)) | (1L << (DICTIONARY - 448)) | (1L << (EXPRESSION - 448)) | (1L << (INSENSITIVE - 448)) | (1L << (DISCARD - 448)) | (1L << (OFF - 448)) | (1L << (INSTEAD - 448)) | (1L << (EXPLAIN - 448)) | (1L << (INPUT - 448)) | (1L << (INLINE - 448)) | (1L << (PARALLEL - 448)) | (1L << (LEAKPROOF - 448)) | (1L << (COMMITTED - 448)) | (1L << (ENCODING - 448)) | (1L << (IMPLICIT - 448)) | (1L << (DELIMITER - 448)) | (1L << (CURSOR - 448)) | (1L << (EACH - 448)) | (1L << (EVENT - 448)) | (1L << (DEALLOCATE - 448)) | (1L << (CONNECTION - 448)) | (1L << (DECLARE - 448)) | (1L << (FAMILY - 448)) | (1L << (FORWARD - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (FUNCTIONS - 448)) | (1L << (LOCATION - 448)) | (1L << (LABEL - 448)) | (1L << (DELIMITERS - 448)) | (1L << (HANDLER - 448)) | (1L << (HEADER - 448)) | (1L << (IMMUTABLE - 448)) | (1L << (GRANTED - 448)) | (1L << (HOLD - 448)) | (1L << (MAPPING - 448)) | (1L << (OLD - 448)) | (1L << (METHOD - 448)) | (1L << (LOAD - 448)) | (1L << (LISTEN - 448)) | (1L << (MODE - 448)) | (1L << (MOVE - 448)) | (1L << (PROCEDURAL - 448)) | (1L << (PARSER - 448)) | (1L << (PROCEDURES - 448)) | (1L << (ENCRYPTED - 448)) | (1L << (PUBLICATION - 448)) | (1L << (PROGRAM - 448)) | (1L << (REFERENCING - 448)) | (1L << (PLANS - 448)) | (1L << (REINDEX - 448)) | (1L << (PRIOR - 448)) | (1L << (PASSWORD - 448)) | (1L << (RELATIVE - 448)) | (1L << (QUOTE - 448)) | (1L << (ROUTINES - 448)) | (1L << (REPLACE - 448)) | (1L << (SNAPSHOT - 448)) | (1L << (REFRESH - 448)) | (1L << (PREPARE - 448)) | (1L << (OPTIONS - 448)) | (1L << (IMPORT - 448)) | (1L << (INVOKER - 448)) | (1L << (NEW - 448)) | (1L << (PREPARED - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (SCROLL - 512)) | (1L << (SEQUENCES - 512)) | (1L << (SYSID - 512)) | (1L << (REASSIGN - 512)) | (1L << (SERVER - 512)) | (1L << (SUBSCRIPTION - 512)) | (1L << (SEARCH - 512)) | (1L << (SCHEMAS - 512)) | (1L << (RECHECK - 512)) | (1L << (POLICY - 512)) | (1L << (NOTIFY - 512)) | (1L << (LOCK - 512)) | (1L << (RELEASE - 512)) | (1L << (SERIALIZABLE - 512)) | (1L << (RETURNS - 512)) | (1L << (STATEMENT - 512)) | (1L << (STDIN - 512)) | (1L << (STDOUT - 512)) | (1L << (TABLES - 512)) | (1L << (SUPPORT - 512)) | (1L << (STABLE - 512)) | (1L << (TEMPLATE - 512)) | (1L << (UNENCRYPTED - 512)) | (1L << (VIEWS - 512)) | (1L << (UNCOMMITTED - 512)) | (1L << (TRANSFORM - 512)) | (1L << (UNLISTEN - 512)) | (1L << (TRUSTED - 512)) | (1L << (VALIDATOR - 512)) | (1L << (UNTIL - 512)) | (1L << (VACUUM - 512)) | (1L << (VOLATILE - 512)) | (1L << (STORED - 512)) | (1L << (WRITE - 512)) | (1L << (STRICT - 512)) | (1L << (TYPES - 512)) | (1L << (WRAPPER - 512)) | (1L << (WORK - 512)) | (1L << (FREEZE - 512)) | (1L << (AUTHORIZATION - 512)) | (1L << (VERBOSE - 512)) | (1L << (OUT - 512)) | (1L << (INOUT - 512)) | (1L << (IDENTIFIER_ - 512)) | (1L << (STRING_ - 512)) | (1L << (NUMBER_ - 512)))) != 0)) {
					{
					setState(4820);
					triggerFuncArgs();
					}
				}

				setState(4823);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4825);
				match(CREATE);
				setState(4826);
				match(CONSTRAINT);
				setState(4827);
				match(TRIGGER);
				setState(4830);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(4828);
					match(FROM);
					setState(4829);
					qualifiedName();
					}
				}

				setState(4832);
				constraintAttributeSpec();
				setState(4833);
				match(FOR);
				setState(4834);
				match(EACH);
				setState(4835);
				match(ROW);
				setState(4836);
				triggerWhen();
				setState(4837);
				match(EXECUTE);
				setState(4838);
				_la = _input.LA(1);
				if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4839);
				funcName();
				setState(4840);
				match(LP_);
				setState(4841);
				triggerFuncArgs();
				setState(4842);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerEventsContext extends ParserRuleContext {
		public List<TriggerOneEventContext> triggerOneEvent() {
			return getRuleContexts(TriggerOneEventContext.class);
		}
		public TriggerOneEventContext triggerOneEvent(int i) {
			return getRuleContext(TriggerOneEventContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(DDLStatementParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(DDLStatementParser.OR, i);
		}
		public TriggerEventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerEvents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerEvents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerEvents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerEventsContext triggerEvents() throws RecognitionException {
		TriggerEventsContext _localctx = new TriggerEventsContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_triggerEvents);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4846);
			triggerOneEvent();
			setState(4851);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(4847);
				match(OR);
				setState(4848);
				triggerOneEvent();
				}
				}
				setState(4853);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerOneEventContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DDLStatementParser.INSERT, 0); }
		public TerminalNode DELETE() { return getToken(DDLStatementParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(DDLStatementParser.TRUNCATE, 0); }
		public TriggerOneEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerOneEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerOneEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerOneEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerOneEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerOneEventContext triggerOneEvent() throws RecognitionException {
		TriggerOneEventContext _localctx = new TriggerOneEventContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_triggerOneEvent);
		try {
			setState(4861);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4854);
				match(INSERT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4855);
				match(DELETE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4856);
				match(UPDATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4857);
				match(UPDATE);
				setState(4858);
				match(OF);
				setState(4859);
				columnList();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4860);
				match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerActionTimeContext extends ParserRuleContext {
		public TerminalNode BEFORE() { return getToken(DDLStatementParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(DDLStatementParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(DDLStatementParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public TriggerActionTimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerActionTime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerActionTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerActionTime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerActionTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerActionTimeContext triggerActionTime() throws RecognitionException {
		TriggerActionTimeContext _localctx = new TriggerActionTimeContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_triggerActionTime);
		try {
			setState(4867);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4863);
				match(BEFORE);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4864);
				match(AFTER);
				}
				break;
			case INSTEAD:
				enterOuterAlt(_localctx, 3);
				{
				setState(4865);
				match(INSTEAD);
				setState(4866);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerFuncArgsContext extends ParserRuleContext {
		public List<TriggerFuncArgContext> triggerFuncArg() {
			return getRuleContexts(TriggerFuncArgContext.class);
		}
		public TriggerFuncArgContext triggerFuncArg(int i) {
			return getRuleContext(TriggerFuncArgContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TriggerFuncArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFuncArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerFuncArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerFuncArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerFuncArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFuncArgsContext triggerFuncArgs() throws RecognitionException {
		TriggerFuncArgsContext _localctx = new TriggerFuncArgsContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_triggerFuncArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4869);
			triggerFuncArg();
			setState(4874);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4870);
				match(COMMA_);
				setState(4871);
				triggerFuncArg();
				}
				}
				setState(4876);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerFuncArgContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TriggerFuncArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFuncArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerFuncArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerFuncArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerFuncArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFuncArgContext triggerFuncArg() throws RecognitionException {
		TriggerFuncArgContext _localctx = new TriggerFuncArgContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_triggerFuncArg);
		try {
			setState(4880);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4877);
				match(NUMBER_);
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4878);
				match(STRING_);
				}
				break;
			case T__0:
			case T__1:
			case SELECT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case CREATE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case GRANT:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case COLUMN:
			case INDEX:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case FOREIGN:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case INTO:
			case VALUES:
			case WITH:
			case UNION:
			case DISTINCT:
			case CASE:
			case WHEN:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case FROM:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case USING:
			case WHERE:
			case AS:
			case ON:
			case IF:
			case ELSE:
			case THEN:
			case FOR:
			case TO:
			case AND:
			case OR:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case IN:
			case ALL:
			case ANY:
			case LIKE:
			case ORDER:
			case GROUP:
			case BY:
			case ASC:
			case DESC:
			case HAVING:
			case LIMIT:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case ARRAY:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DO:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case BOTH:
			case LEADING:
			case TRAILING:
			case COALESCE:
			case INTERSECT:
			case EXCEPT:
			case TIES:
			case FETCH:
			case CUBE:
			case GROUPING:
			case SETS:
			case WINDOW:
			case OTHERS:
			case OVERLAPS:
			case SOME:
			case AT:
			case DEC:
			case END:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case CHECK:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case REFERENCES:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COLLATE:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRABLE:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INITIALLY:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case ONLY:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case SYMMETRIC:
			case DOCUMENT:
			case NORMALIZED:
			case ASYMMETRIC:
			case VARIADIC:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case PLACING:
			case RETURNING:
			case LATERAL:
			case NONE:
			case ANALYSE:
			case ANALYZE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 3);
				{
				setState(4879);
				colLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerWhenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(DDLStatementParser.WHEN, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TriggerWhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerWhen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerWhen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerWhen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerWhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerWhenContext triggerWhen() throws RecognitionException {
		TriggerWhenContext _localctx = new TriggerWhenContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_triggerWhen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4882);
			match(WHEN);
			setState(4883);
			match(LP_);
			setState(4884);
			aExpr(0);
			setState(4885);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerForSpecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode STATEMENT() { return getToken(DDLStatementParser.STATEMENT, 0); }
		public TerminalNode EACH() { return getToken(DDLStatementParser.EACH, 0); }
		public TriggerForSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerForSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerForSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerForSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerForSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerForSpecContext triggerForSpec() throws RecognitionException {
		TriggerForSpecContext _localctx = new TriggerForSpecContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_triggerForSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4887);
			match(FOR);
			setState(4889);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EACH) {
				{
				setState(4888);
				match(EACH);
				}
			}

			setState(4891);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==STATEMENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerReferencingContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(DDLStatementParser.REFERENCING, 0); }
		public TriggerTransitionsContext triggerTransitions() {
			return getRuleContext(TriggerTransitionsContext.class,0);
		}
		public TriggerReferencingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerReferencing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerReferencing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerReferencing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerReferencing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerReferencingContext triggerReferencing() throws RecognitionException {
		TriggerReferencingContext _localctx = new TriggerReferencingContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_triggerReferencing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4893);
			match(REFERENCING);
			setState(4894);
			triggerTransitions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerTransitionsContext extends ParserRuleContext {
		public List<TriggerTransitionContext> triggerTransition() {
			return getRuleContexts(TriggerTransitionContext.class);
		}
		public TriggerTransitionContext triggerTransition(int i) {
			return getRuleContext(TriggerTransitionContext.class,i);
		}
		public TriggerTransitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerTransitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerTransitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerTransitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerTransitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerTransitionsContext triggerTransitions() throws RecognitionException {
		TriggerTransitionsContext _localctx = new TriggerTransitionsContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_triggerTransitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4897); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4896);
				triggerTransition();
				}
				}
				setState(4899); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==OLD || _la==NEW );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerTransitionContext extends ParserRuleContext {
		public TransitionOldOrNewContext transitionOldOrNew() {
			return getRuleContext(TransitionOldOrNewContext.class,0);
		}
		public TransitionRowOrTableContext transitionRowOrTable() {
			return getRuleContext(TransitionRowOrTableContext.class,0);
		}
		public TransitionRelNameContext transitionRelName() {
			return getRuleContext(TransitionRelNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TriggerTransitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerTransition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerTransition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerTransition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerTransition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerTransitionContext triggerTransition() throws RecognitionException {
		TriggerTransitionContext _localctx = new TriggerTransitionContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_triggerTransition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4901);
			transitionOldOrNew();
			setState(4902);
			transitionRowOrTable();
			setState(4904);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4903);
				match(AS);
				}
			}

			setState(4906);
			transitionRelName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionRelNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TransitionRelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionRelName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTransitionRelName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTransitionRelName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTransitionRelName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionRelNameContext transitionRelName() throws RecognitionException {
		TransitionRelNameContext _localctx = new TransitionRelNameContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_transitionRelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4908);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionRowOrTableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TransitionRowOrTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionRowOrTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTransitionRowOrTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTransitionRowOrTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTransitionRowOrTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionRowOrTableContext transitionRowOrTable() throws RecognitionException {
		TransitionRowOrTableContext _localctx = new TransitionRowOrTableContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_transitionRowOrTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4910);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionOldOrNewContext extends ParserRuleContext {
		public TerminalNode OLD() { return getToken(DDLStatementParser.OLD, 0); }
		public TerminalNode NEW() { return getToken(DDLStatementParser.NEW, 0); }
		public TransitionOldOrNewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionOldOrNew; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTransitionOldOrNew(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTransitionOldOrNew(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTransitionOldOrNew(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionOldOrNewContext transitionOldOrNew() throws RecognitionException {
		TransitionOldOrNewContext _localctx = new TransitionOldOrNewContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_transitionOldOrNew);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4912);
			_la = _input.LA(1);
			if ( !(_la==OLD || _la==NEW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(DDLStatementParser.SEQUENCE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TempOptionContext tempOption() {
			return getRuleContext(TempOptionContext.class,0);
		}
		public NotExistClauseContext notExistClause() {
			return getRuleContext(NotExistClauseContext.class,0);
		}
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public CreateSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSequenceContext createSequence() throws RecognitionException {
		CreateSequenceContext _localctx = new CreateSequenceContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_createSequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4914);
			match(CREATE);
			setState(4916);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (GLOBAL - 268)) | (1L << (TEMP - 268)) | (1L << (TEMPORARY - 268)) | (1L << (UNLOGGED - 268)))) != 0)) {
				{
				setState(4915);
				tempOption();
				}
			}

			setState(4918);
			match(SEQUENCE);
			setState(4920);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
			case 1:
				{
				setState(4919);
				notExistClause();
				}
				break;
			}
			setState(4922);
			qualifiedName();
			setState(4924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || ((((_la - 231)) & ~0x3f) == 0 && ((1L << (_la - 231)) & ((1L << (NO - 231)) | (1L << (START - 231)) | (1L << (CACHE - 231)) | (1L << (CYCLE - 231)) | (1L << (INCREMENT - 231)) | (1L << (MAXVALUE - 231)) | (1L << (MINVALUE - 231)) | (1L << (OWNED - 231)))) != 0) || _la==RESTART || _la==SEQUENCE) {
				{
				setState(4923);
				seqOptList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TempOptionContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(DDLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(DDLStatementParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(DDLStatementParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(DDLStatementParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(DDLStatementParser.UNLOGGED, 0); }
		public TempOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tempOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTempOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTempOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTempOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TempOptionContext tempOption() throws RecognitionException {
		TempOptionContext _localctx = new TempOptionContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_tempOption);
		int _la;
		try {
			setState(4931);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL:
			case GLOBAL:
			case TEMP:
			case TEMPORARY:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(4927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==GLOBAL) {
					{
					setState(4926);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==GLOBAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4929);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case UNLOGGED:
				enterOuterAlt(_localctx, 2);
				{
				setState(4930);
				match(UNLOGGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(DDLStatementParser.WRAPPER, 0); }
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public NotExistClauseContext notExistClause() {
			return getRuleContext(NotExistClauseContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public ForeignServerVersionContext foreignServerVersion() {
			return getRuleContext(ForeignServerVersionContext.class,0);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_createServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4933);
			match(CREATE);
			setState(4934);
			match(SERVER);
			setState(4936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				{
				setState(4935);
				notExistClause();
				}
				break;
			}
			setState(4938);
			name();
			setState(4941);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE) {
				{
				setState(4939);
				match(TYPE);
				setState(4940);
				match(STRING_);
				}
			}

			setState(4944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERSION) {
				{
				setState(4943);
				foreignServerVersion();
				}
			}

			setState(4946);
			match(FOREIGN);
			setState(4947);
			match(DATA);
			setState(4948);
			match(WRAPPER);
			setState(4949);
			name();
			setState(4950);
			createGenericOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateStatisticsContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode STATISTICS() { return getToken(DDLStatementParser.STATISTICS, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public OptNameListContext optNameList() {
			return getRuleContext(OptNameListContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public NotExistClauseContext notExistClause() {
			return getRuleContext(NotExistClauseContext.class,0);
		}
		public CreateStatisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createStatistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateStatistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateStatistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateStatistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateStatisticsContext createStatistics() throws RecognitionException {
		CreateStatisticsContext _localctx = new CreateStatisticsContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_createStatistics);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4952);
			match(CREATE);
			setState(4953);
			match(STATISTICS);
			setState(4955);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				setState(4954);
				notExistClause();
				}
				break;
			}
			setState(4957);
			anyName();
			setState(4958);
			optNameList();
			setState(4959);
			match(ON);
			setState(4960);
			exprList(0);
			setState(4961);
			match(FROM);
			setState(4962);
			fromList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSubscriptionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(DDLStatementParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(DDLStatementParser.CONNECTION, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode PUBLICATION() { return getToken(DDLStatementParser.PUBLICATION, 0); }
		public PublicationNameListContext publicationNameList() {
			return getRuleContext(PublicationNameListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public CreateSubscriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSubscription; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateSubscription(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateSubscription(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateSubscription(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSubscriptionContext createSubscription() throws RecognitionException {
		CreateSubscriptionContext _localctx = new CreateSubscriptionContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_createSubscription);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4964);
			match(CREATE);
			setState(4965);
			match(SUBSCRIPTION);
			setState(4966);
			name();
			setState(4967);
			match(CONNECTION);
			setState(4968);
			match(STRING_);
			setState(4969);
			match(PUBLICATION);
			setState(4970);
			publicationNameList();
			setState(4973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4971);
				match(WITH);
				setState(4972);
				definition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(DDLStatementParser.LOCATION, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public CreateTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceContext createTablespace() throws RecognitionException {
		CreateTablespaceContext _localctx = new CreateTablespaceContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_createTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4975);
			match(CREATE);
			setState(4976);
			match(TABLESPACE);
			setState(4977);
			name();
			setState(4980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OWNER) {
				{
				setState(4978);
				match(OWNER);
				setState(4979);
				roleSpec();
				}
			}

			setState(4982);
			match(LOCATION);
			setState(4983);
			match(STRING_);
			setState(4986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4984);
				match(WITH);
				setState(4985);
				reloptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTextSearchContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(DDLStatementParser.CONFIGURATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(DDLStatementParser.DICTIONARY, 0); }
		public TerminalNode PARSER() { return getToken(DDLStatementParser.PARSER, 0); }
		public TerminalNode TEMPLATE() { return getToken(DDLStatementParser.TEMPLATE, 0); }
		public CreateTextSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTextSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateTextSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateTextSearch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateTextSearch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTextSearchContext createTextSearch() throws RecognitionException {
		CreateTextSearchContext _localctx = new CreateTextSearchContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_createTextSearch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4988);
			match(CREATE);
			setState(4989);
			match(TEXT);
			setState(4990);
			match(SEARCH);
			setState(4991);
			_la = _input.LA(1);
			if ( !(((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (CONFIGURATION - 446)) | (1L << (DICTIONARY - 446)) | (1L << (PARSER - 446)))) != 0) || _la==TEMPLATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4992);
			anyName();
			setState(4993);
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTransformContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode TRANSFORM() { return getToken(DDLStatementParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TransformElementListContext transformElementList() {
			return getRuleContext(TransformElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public CreateTransformContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTransform; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateTransform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateTransform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateTransform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTransformContext createTransform() throws RecognitionException {
		CreateTransformContext _localctx = new CreateTransformContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_createTransform);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4995);
			match(CREATE);
			setState(4998);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4996);
				match(OR);
				setState(4997);
				match(REPLACE);
				}
			}

			setState(5000);
			match(TRANSFORM);
			setState(5001);
			match(FOR);
			setState(5002);
			typeName();
			setState(5003);
			match(LANGUAGE);
			setState(5004);
			name();
			setState(5005);
			match(LP_);
			setState(5006);
			transformElementList();
			setState(5007);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTypeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public CreateTypeClausesContext createTypeClauses() {
			return getRuleContext(CreateTypeClausesContext.class,0);
		}
		public CreateTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTypeContext createType() throws RecognitionException {
		CreateTypeContext _localctx = new CreateTypeContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_createType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5009);
			match(CREATE);
			setState(5010);
			match(TYPE);
			setState(5011);
			anyName();
			setState(5012);
			createTypeClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTypeClausesContext extends ParserRuleContext {
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(DDLStatementParser.ENUM, 0); }
		public EnumValListContext enumValList() {
			return getRuleContext(EnumValListContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(DDLStatementParser.RANGE, 0); }
		public CreateTypeClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTypeClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateTypeClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateTypeClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateTypeClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTypeClausesContext createTypeClauses() throws RecognitionException {
		CreateTypeClausesContext _localctx = new CreateTypeClausesContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_createTypeClauses);
		int _la;
		try {
			setState(5033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(5014);
					definition();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5017);
				match(AS);
				setState(5018);
				match(LP_);
				setState(5020);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (KEY - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (IF - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (BY - 132)) | (1L << (BEGIN - 132)) | (1L << (COMMIT - 132)) | (1L << (ROLLBACK - 132)) | (1L << (SAVEPOINT - 132)) | (1L << (DOUBLE - 132)) | (1L << (YEAR - 132)) | (1L << (MONTH - 132)) | (1L << (DAY - 132)) | (1L << (HOUR - 132)) | (1L << (MINUTE - 132)) | (1L << (SECOND - 132)) | (1L << (CURRENT - 132)) | (1L << (ENABLE - 132)) | (1L << (DISABLE - 132)) | (1L << (CALL - 132)) | (1L << (PRESERVE - 132)) | (1L << (DEFINER - 132)) | (1L << (SQL - 132)) | (1L << (CASCADED - 132)) | (1L << (LOCAL - 132)) | (1L << (CLOSE - 132)) | (1L << (NEXT - 132)) | (1L << (NAME - 132)) | (1L << (NAMES - 132)) | (1L << (TYPE - 132)) | (1L << (TEXT - 132)) | (1L << (REPEATABLE - 132)) | (1L << (VARYING - 132)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (VALUE - 197)) | (1L << (TIES - 197)) | (1L << (CUBE - 197)) | (1L << (SETS - 197)) | (1L << (OTHERS - 197)) | (1L << (AT - 197)) | (1L << (ADMIN - 197)) | (1L << (ESCAPE - 197)) | (1L << (EXCLUDE - 197)) | (1L << (PARTITION - 197)) | (1L << (UNKNOWN - 197)) | (1L << (ALWAYS - 197)) | (1L << (CASCADE - 197)) | (1L << (GENERATED - 197)) | (1L << (ISOLATION - 197)) | (1L << (LEVEL - 197)) | (1L << (NO - 197)) | (1L << (OPTION - 197)) | (1L << (PRIVILEGES - 197)) | (1L << (READ - 197)) | (1L << (ROLE - 197)) | (1L << (ROWS - 197)) | (1L << (START - 197)) | (1L << (TRANSACTION - 197)) | (1L << (ACTION - 197)) | (1L << (CACHE - 197)) | (1L << (CHARACTERISTICS - 197)) | (1L << (CLUSTER - 197)) | (1L << (COMMENTS - 197)) | (1L << (CONSTRAINTS - 197)) | (1L << (CYCLE - 197)) | (1L << (DATA - 197)) | (1L << (DATABASE - 197)) | (1L << (DEFAULTS - 197)) | (1L << (DEFERRED - 197)) | (1L << (DEPENDS - 197)) | (1L << (DOMAIN - 197)) | (1L << (EXCLUDING - 197)) | (1L << (EXECUTE - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (EXTENSION - 261)) | (1L << (EXTERNAL - 261)) | (1L << (FILTER - 261)) | (1L << (FIRST - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FORCE - 261)) | (1L << (GLOBAL - 261)) | (1L << (IDENTITY - 261)) | (1L << (IMMEDIATE - 261)) | (1L << (INCLUDING - 261)) | (1L << (INCREMENT - 261)) | (1L << (INDEXES - 261)) | (1L << (INHERIT - 261)) | (1L << (INHERITS - 261)) | (1L << (INCLUDE - 261)) | (1L << (LANGUAGE - 261)) | (1L << (LARGE - 261)) | (1L << (LAST - 261)) | (1L << (LOGGED - 261)) | (1L << (MATCH - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MINVALUE - 261)) | (1L << (NOTHING - 261)) | (1L << (NULLS - 261)) | (1L << (OBJECT - 261)) | (1L << (OIDS - 261)) | (1L << (OVER - 261)) | (1L << (OWNED - 261)) | (1L << (OWNER - 261)) | (1L << (PARTIAL - 261)) | (1L << (PRECEDING - 261)) | (1L << (RANGE - 261)) | (1L << (RENAME - 261)) | (1L << (REPLICA - 261)) | (1L << (RESET - 261)) | (1L << (RESTART - 261)) | (1L << (RESTRICT - 261)) | (1L << (ROUTINE - 261)) | (1L << (RULE - 261)) | (1L << (SECURITY - 261)) | (1L << (SEQUENCE - 261)) | (1L << (SESSION - 261)) | (1L << (SHOW - 261)) | (1L << (SIMPLE - 261)) | (1L << (STATISTICS - 261)) | (1L << (STORAGE - 261)) | (1L << (TABLESPACE - 261)) | (1L << (TEMP - 261)) | (1L << (TEMPORARY - 261)) | (1L << (UNBOUNDED - 261)) | (1L << (UNLOGGED - 261)) | (1L << (VALID - 261)) | (1L << (VALIDATE - 261)) | (1L << (WITHIN - 261)) | (1L << (WITHOUT - 261)) | (1L << (ZONE - 261)) | (1L << (OF - 261)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (UESCAPE - 325)) | (1L << (GROUPS - 325)) | (1L << (RECURSIVE - 325)) | (1L << (ENUM - 325)) | (1L << (XML - 325)) | (1L << (JSON - 325)) | (1L << (ORDINALITY - 325)) | (1L << (NFC - 325)) | (1L << (NFD - 325)) | (1L << (NFKC - 325)) | (1L << (NFKD - 325)) | (1L << (REF - 325)) | (1L << (PASSING - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (VERSION - 389)) | (1L << (YES - 389)) | (1L << (STANDALONE - 389)) | (1L << (MATERIALIZED - 389)) | (1L << (OPERATOR - 389)) | (1L << (SHARE - 389)) | (1L << (ROLLUP - 389)) | (1L << (DOCUMENT - 389)) | (1L << (NORMALIZED - 389)) | (1L << (NOWAIT - 389)) | (1L << (LOCKED - 389)) | (1L << (COLUMNS - 389)) | (1L << (CONTENT - 389)) | (1L << (STRIP - 389)) | (1L << (WHITESPACE - 389)) | (1L << (CONFLICT - 389)) | (1L << (OVERRIDING - 389)) | (1L << (SYSTEM - 389)) | (1L << (ABORT - 389)) | (1L << (ABSOLUTE - 389)) | (1L << (ACCESS - 389)) | (1L << (AFTER - 389)) | (1L << (AGGREGATE - 389)) | (1L << (ALSO - 389)) | (1L << (ATTACH - 389)) | (1L << (ATTRIBUTE - 389)) | (1L << (BACKWARD - 389)) | (1L << (BEFORE - 389)) | (1L << (ASSERTION - 389)) | (1L << (ASSIGNMENT - 389)) | (1L << (CONTINUE - 389)) | (1L << (CONVERSION - 389)) | (1L << (COPY - 389)) | (1L << (COST - 389)) | (1L << (CSV - 389)) | (1L << (CALLED - 389)) | (1L << (CATALOG - 389)) | (1L << (CHAIN - 389)) | (1L << (CHECKPOINT - 389)) | (1L << (CLASS - 389)) | (1L << (CONFIGURATION - 389)) | (1L << (COMMENT - 389)) | (1L << (DETACH - 389)) | (1L << (DICTIONARY - 389)) | (1L << (EXPRESSION - 389)) | (1L << (INSENSITIVE - 389)) | (1L << (DISCARD - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (OFF - 453)) | (1L << (INSTEAD - 453)) | (1L << (EXPLAIN - 453)) | (1L << (INPUT - 453)) | (1L << (INLINE - 453)) | (1L << (PARALLEL - 453)) | (1L << (LEAKPROOF - 453)) | (1L << (COMMITTED - 453)) | (1L << (ENCODING - 453)) | (1L << (IMPLICIT - 453)) | (1L << (DELIMITER - 453)) | (1L << (CURSOR - 453)) | (1L << (EACH - 453)) | (1L << (EVENT - 453)) | (1L << (DEALLOCATE - 453)) | (1L << (CONNECTION - 453)) | (1L << (DECLARE - 453)) | (1L << (FAMILY - 453)) | (1L << (FORWARD - 453)) | (1L << (EXCLUSIVE - 453)) | (1L << (FUNCTIONS - 453)) | (1L << (LOCATION - 453)) | (1L << (LABEL - 453)) | (1L << (DELIMITERS - 453)) | (1L << (HANDLER - 453)) | (1L << (HEADER - 453)) | (1L << (IMMUTABLE - 453)) | (1L << (GRANTED - 453)) | (1L << (HOLD - 453)) | (1L << (MAPPING - 453)) | (1L << (OLD - 453)) | (1L << (METHOD - 453)) | (1L << (LOAD - 453)) | (1L << (LISTEN - 453)) | (1L << (MODE - 453)) | (1L << (MOVE - 453)) | (1L << (PROCEDURAL - 453)) | (1L << (PARSER - 453)) | (1L << (PROCEDURES - 453)) | (1L << (ENCRYPTED - 453)) | (1L << (PUBLICATION - 453)) | (1L << (PROGRAM - 453)) | (1L << (REFERENCING - 453)) | (1L << (PLANS - 453)) | (1L << (REINDEX - 453)) | (1L << (PRIOR - 453)) | (1L << (PASSWORD - 453)) | (1L << (RELATIVE - 453)) | (1L << (QUOTE - 453)) | (1L << (ROUTINES - 453)) | (1L << (REPLACE - 453)) | (1L << (SNAPSHOT - 453)) | (1L << (REFRESH - 453)) | (1L << (PREPARE - 453)) | (1L << (OPTIONS - 453)) | (1L << (IMPORT - 453)) | (1L << (INVOKER - 453)) | (1L << (NEW - 453)) | (1L << (PREPARED - 453)) | (1L << (SCROLL - 453)) | (1L << (SEQUENCES - 453)) | (1L << (SYSID - 453)) | (1L << (REASSIGN - 453)) | (1L << (SERVER - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (SUBSCRIPTION - 517)) | (1L << (SEARCH - 517)) | (1L << (SCHEMAS - 517)) | (1L << (RECHECK - 517)) | (1L << (POLICY - 517)) | (1L << (NOTIFY - 517)) | (1L << (LOCK - 517)) | (1L << (RELEASE - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (RETURNS - 517)) | (1L << (STATEMENT - 517)) | (1L << (STDIN - 517)) | (1L << (STDOUT - 517)) | (1L << (TABLES - 517)) | (1L << (SUPPORT - 517)) | (1L << (STABLE - 517)) | (1L << (TEMPLATE - 517)) | (1L << (UNENCRYPTED - 517)) | (1L << (VIEWS - 517)) | (1L << (UNCOMMITTED - 517)) | (1L << (TRANSFORM - 517)) | (1L << (UNLISTEN - 517)) | (1L << (TRUSTED - 517)) | (1L << (VALIDATOR - 517)) | (1L << (UNTIL - 517)) | (1L << (VACUUM - 517)) | (1L << (VOLATILE - 517)) | (1L << (STORED - 517)) | (1L << (WRITE - 517)) | (1L << (STRICT - 517)) | (1L << (TYPES - 517)) | (1L << (WRAPPER - 517)) | (1L << (WORK - 517)) | (1L << (IDENTIFIER_ - 517)))) != 0)) {
					{
					setState(5019);
					tableFuncElementList();
					}
				}

				setState(5022);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5023);
				match(AS);
				setState(5024);
				match(ENUM);
				setState(5025);
				match(LP_);
				setState(5027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STRING_) {
					{
					setState(5026);
					enumValList();
					}
				}

				setState(5029);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5030);
				match(AS);
				setState(5031);
				match(RANGE);
				setState(5032);
				definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnumValListContext extends ParserRuleContext {
		public List<TerminalNode> STRING_() { return getTokens(DDLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DDLStatementParser.STRING_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public EnumValListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enumValList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterEnumValList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitEnumValList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitEnumValList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnumValListContext enumValList() throws RecognitionException {
		EnumValListContext _localctx = new EnumValListContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_enumValList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5035);
			match(STRING_);
			setState(5040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5036);
				match(COMMA_);
				setState(5037);
				match(STRING_);
				}
				}
				setState(5042);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserMappingContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(DDLStatementParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public AuthIdentContext authIdent() {
			return getRuleContext(AuthIdentContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public NotExistClauseContext notExistClause() {
			return getRuleContext(NotExistClauseContext.class,0);
		}
		public CreateUserMappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserMapping; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateUserMapping(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateUserMapping(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateUserMapping(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserMappingContext createUserMapping() throws RecognitionException {
		CreateUserMappingContext _localctx = new CreateUserMappingContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_createUserMapping);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5043);
			match(CREATE);
			setState(5044);
			match(USER);
			setState(5045);
			match(MAPPING);
			setState(5047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(5046);
				notExistClause();
				}
			}

			setState(5049);
			match(FOR);
			setState(5050);
			authIdent();
			setState(5051);
			match(SERVER);
			setState(5052);
			name();
			setState(5053);
			createGenericOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiscardContext extends ParserRuleContext {
		public TerminalNode DISCARD() { return getToken(DDLStatementParser.DISCARD, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode PLANS() { return getToken(DDLStatementParser.PLANS, 0); }
		public TerminalNode SEQUENCES() { return getToken(DDLStatementParser.SEQUENCES, 0); }
		public TerminalNode TEMPORARY() { return getToken(DDLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(DDLStatementParser.TEMP, 0); }
		public DiscardContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discard; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDiscard(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDiscard(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDiscard(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiscardContext discard() throws RecognitionException {
		DiscardContext _localctx = new DiscardContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_discard);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5055);
			match(DISCARD);
			setState(5056);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==TEMP || _la==TEMPORARY || _la==PLANS || _la==SEQUENCES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropAccessMethodContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode ACCESS() { return getToken(DDLStatementParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(DDLStatementParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropAccessMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropAccessMethod; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropAccessMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropAccessMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropAccessMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropAccessMethodContext dropAccessMethod() throws RecognitionException {
		DropAccessMethodContext _localctx = new DropAccessMethodContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_dropAccessMethod);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5058);
			match(DROP);
			setState(5059);
			match(ACCESS);
			setState(5060);
			match(METHOD);
			setState(5062);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				{
				setState(5061);
				existClause();
				}
				break;
			}
			setState(5064);
			name();
			setState(5066);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5065);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropAggregateContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(DDLStatementParser.AGGREGATE, 0); }
		public AggregateWithArgtypesListContext aggregateWithArgtypesList() {
			return getRuleContext(AggregateWithArgtypesListContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropAggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropAggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropAggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropAggregate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropAggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropAggregateContext dropAggregate() throws RecognitionException {
		DropAggregateContext _localctx = new DropAggregateContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_dropAggregate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5068);
			match(DROP);
			setState(5069);
			match(AGGREGATE);
			setState(5071);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				{
				setState(5070);
				existClause();
				}
				break;
			}
			setState(5073);
			aggregateWithArgtypesList();
			setState(5075);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5074);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWithArgtypesListContext extends ParserRuleContext {
		public List<AggregateWithArgtypesContext> aggregateWithArgtypes() {
			return getRuleContexts(AggregateWithArgtypesContext.class);
		}
		public AggregateWithArgtypesContext aggregateWithArgtypes(int i) {
			return getRuleContext(AggregateWithArgtypesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public AggregateWithArgtypesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWithArgtypesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAggregateWithArgtypesList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAggregateWithArgtypesList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAggregateWithArgtypesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWithArgtypesListContext aggregateWithArgtypesList() throws RecognitionException {
		AggregateWithArgtypesListContext _localctx = new AggregateWithArgtypesListContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_aggregateWithArgtypesList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5077);
			aggregateWithArgtypes();
			setState(5082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5078);
				match(COMMA_);
				setState(5079);
				aggregateWithArgtypes();
				}
				}
				setState(5084);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropCastContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode CAST() { return getToken(DDLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropCastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropCast; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropCast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropCast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropCast(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropCastContext dropCast() throws RecognitionException {
		DropCastContext _localctx = new DropCastContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_dropCast);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5085);
			match(DROP);
			setState(5086);
			match(CAST);
			setState(5088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(5087);
				existClause();
				}
			}

			setState(5090);
			match(LP_);
			setState(5091);
			typeName();
			setState(5092);
			match(AS);
			setState(5093);
			typeName();
			setState(5094);
			match(RP_);
			setState(5096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5095);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropCollationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode COLLATION() { return getToken(DDLStatementParser.COLLATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropCollation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropCollation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropCollationContext dropCollation() throws RecognitionException {
		DropCollationContext _localctx = new DropCollationContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_dropCollation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5098);
			match(DROP);
			setState(5099);
			match(COLLATION);
			setState(5101);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(5100);
				existClause();
				}
				break;
			}
			setState(5103);
			name();
			setState(5105);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5104);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropConversionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode CONVERSION() { return getToken(DDLStatementParser.CONVERSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropConversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropConversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropConversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropConversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropConversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropConversionContext dropConversion() throws RecognitionException {
		DropConversionContext _localctx = new DropConversionContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_dropConversion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5107);
			match(DROP);
			setState(5108);
			match(CONVERSION);
			setState(5110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				setState(5109);
				existClause();
				}
				break;
			}
			setState(5112);
			name();
			setState(5114);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5113);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDomainContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode DOMAIN() { return getToken(DDLStatementParser.DOMAIN, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropDomainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDomain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropDomain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropDomain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropDomain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDomainContext dropDomain() throws RecognitionException {
		DropDomainContext _localctx = new DropDomainContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_dropDomain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5116);
			match(DROP);
			setState(5117);
			match(DOMAIN);
			setState(5119);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				setState(5118);
				existClause();
				}
				break;
			}
			setState(5121);
			nameList(0);
			setState(5123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5122);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(DDLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropEventTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEventTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropEventTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropEventTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropEventTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventTriggerContext dropEventTrigger() throws RecognitionException {
		DropEventTriggerContext _localctx = new DropEventTriggerContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_dropEventTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5125);
			match(DROP);
			setState(5126);
			match(EVENT);
			setState(5127);
			match(TRIGGER);
			setState(5129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				setState(5128);
				existClause();
				}
				break;
			}
			setState(5131);
			name();
			setState(5133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5132);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropExtensionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropExtension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropExtension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropExtension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropExtensionContext dropExtension() throws RecognitionException {
		DropExtensionContext _localctx = new DropExtensionContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_dropExtension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5135);
			match(DROP);
			setState(5136);
			match(EXTENSION);
			setState(5138);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				{
				setState(5137);
				existClause();
				}
				break;
			}
			setState(5140);
			nameList(0);
			setState(5142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5141);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropForeignDataWrapperContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(DDLStatementParser.WRAPPER, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropForeignDataWrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropForeignDataWrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropForeignDataWrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropForeignDataWrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropForeignDataWrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropForeignDataWrapperContext dropForeignDataWrapper() throws RecognitionException {
		DropForeignDataWrapperContext _localctx = new DropForeignDataWrapperContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_dropForeignDataWrapper);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5144);
			match(DROP);
			setState(5145);
			match(FOREIGN);
			setState(5146);
			match(DATA);
			setState(5147);
			match(WRAPPER);
			setState(5149);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				{
				setState(5148);
				existClause();
				}
				break;
			}
			setState(5151);
			nameList(0);
			setState(5153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5152);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropForeignTableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropForeignTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropForeignTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropForeignTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropForeignTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropForeignTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropForeignTableContext dropForeignTable() throws RecognitionException {
		DropForeignTableContext _localctx = new DropForeignTableContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_dropForeignTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5155);
			match(DROP);
			setState(5156);
			match(FOREIGN);
			setState(5157);
			match(TABLE);
			setState(5159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				{
				setState(5158);
				existClause();
				}
				break;
			}
			setState(5161);
			tableName();
			setState(5166);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5162);
				match(COMMA_);
				setState(5163);
				tableName();
				}
				}
				setState(5168);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5170);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5169);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesListContext functionWithArgtypesList() {
			return getRuleContext(FunctionWithArgtypesListContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_dropFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5172);
			match(DROP);
			setState(5173);
			match(FUNCTION);
			setState(5175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				setState(5174);
				existClause();
				}
				break;
			}
			setState(5177);
			functionWithArgtypesList();
			setState(5179);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5178);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionWithArgtypesListContext extends ParserRuleContext {
		public List<FunctionWithArgtypesContext> functionWithArgtypes() {
			return getRuleContexts(FunctionWithArgtypesContext.class);
		}
		public FunctionWithArgtypesContext functionWithArgtypes(int i) {
			return getRuleContext(FunctionWithArgtypesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public FunctionWithArgtypesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionWithArgtypesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFunctionWithArgtypesList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFunctionWithArgtypesList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFunctionWithArgtypesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionWithArgtypesListContext functionWithArgtypesList() throws RecognitionException {
		FunctionWithArgtypesListContext _localctx = new FunctionWithArgtypesListContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_functionWithArgtypesList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5181);
			functionWithArgtypes();
			setState(5186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5182);
				match(COMMA_);
				setState(5183);
				functionWithArgtypes();
				}
				}
				setState(5188);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLanguageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode PROCEDURAL() { return getToken(DDLStatementParser.PROCEDURAL, 0); }
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropLanguageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLanguage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropLanguage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLanguageContext dropLanguage() throws RecognitionException {
		DropLanguageContext _localctx = new DropLanguageContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_dropLanguage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5189);
			match(DROP);
			setState(5191);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(5190);
				match(PROCEDURAL);
				}
			}

			setState(5193);
			match(LANGUAGE);
			setState(5195);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				setState(5194);
				existClause();
				}
				break;
			}
			setState(5197);
			name();
			setState(5199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5198);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropMaterializedViewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropMaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropMaterializedView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropMaterializedView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropMaterializedView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropMaterializedViewContext dropMaterializedView() throws RecognitionException {
		DropMaterializedViewContext _localctx = new DropMaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_dropMaterializedView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5201);
			match(DROP);
			setState(5202);
			match(MATERIALIZED);
			setState(5203);
			match(VIEW);
			setState(5205);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
			case 1:
				{
				setState(5204);
				existClause();
				}
				break;
			}
			setState(5207);
			anyNameList();
			setState(5209);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5208);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOperatorContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public OperatorWithArgtypesListContext operatorWithArgtypesList() {
			return getRuleContext(OperatorWithArgtypesListContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOperatorContext dropOperator() throws RecognitionException {
		DropOperatorContext _localctx = new DropOperatorContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_dropOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5211);
			match(DROP);
			setState(5212);
			match(OPERATOR);
			setState(5214);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				{
				setState(5213);
				existClause();
				}
				break;
			}
			setState(5216);
			operatorWithArgtypesList();
			setState(5218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5217);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorWithArgtypesListContext extends ParserRuleContext {
		public List<OperatorWithArgtypesContext> operatorWithArgtypes() {
			return getRuleContexts(OperatorWithArgtypesContext.class);
		}
		public OperatorWithArgtypesContext operatorWithArgtypes(int i) {
			return getRuleContext(OperatorWithArgtypesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public OperatorWithArgtypesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorWithArgtypesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOperatorWithArgtypesList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOperatorWithArgtypesList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOperatorWithArgtypesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorWithArgtypesListContext operatorWithArgtypesList() throws RecognitionException {
		OperatorWithArgtypesListContext _localctx = new OperatorWithArgtypesListContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_operatorWithArgtypesList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5220);
			operatorWithArgtypes();
			setState(5225);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5221);
				match(COMMA_);
				setState(5222);
				operatorWithArgtypes();
				}
				}
				setState(5227);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOperatorClassContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(DDLStatementParser.CLASS, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropOperatorClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOperatorClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropOperatorClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropOperatorClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropOperatorClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOperatorClassContext dropOperatorClass() throws RecognitionException {
		DropOperatorClassContext _localctx = new DropOperatorClassContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_dropOperatorClass);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5228);
			match(DROP);
			setState(5229);
			match(OPERATOR);
			setState(5230);
			match(CLASS);
			setState(5232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				{
				setState(5231);
				existClause();
				}
				break;
			}
			setState(5234);
			anyName();
			setState(5235);
			match(USING);
			setState(5236);
			name();
			setState(5238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5237);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOperatorFamilyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(DDLStatementParser.FAMILY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropOperatorFamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOperatorFamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropOperatorFamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropOperatorFamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropOperatorFamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOperatorFamilyContext dropOperatorFamily() throws RecognitionException {
		DropOperatorFamilyContext _localctx = new DropOperatorFamilyContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_dropOperatorFamily);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5240);
			match(DROP);
			setState(5241);
			match(OPERATOR);
			setState(5242);
			match(FAMILY);
			setState(5244);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				{
				setState(5243);
				existClause();
				}
				break;
			}
			setState(5246);
			anyName();
			setState(5247);
			match(USING);
			setState(5248);
			name();
			setState(5250);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5249);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOwnedContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode OWNED() { return getToken(DDLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropOwnedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOwned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropOwned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropOwned(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropOwned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOwnedContext dropOwned() throws RecognitionException {
		DropOwnedContext _localctx = new DropOwnedContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_dropOwned);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5252);
			match(DROP);
			setState(5253);
			match(OWNED);
			setState(5254);
			match(BY);
			setState(5255);
			roleList();
			setState(5257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5256);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropPolicyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode POLICY() { return getToken(DDLStatementParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropPolicyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPolicy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropPolicy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropPolicy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropPolicy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPolicyContext dropPolicy() throws RecognitionException {
		DropPolicyContext _localctx = new DropPolicyContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_dropPolicy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5259);
			match(DROP);
			setState(5260);
			match(POLICY);
			setState(5262);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				{
				setState(5261);
				existClause();
				}
				break;
			}
			setState(5264);
			name();
			setState(5265);
			match(ON);
			setState(5266);
			tableName();
			setState(5268);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5267);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public FunctionWithArgtypesListContext functionWithArgtypesList() {
			return getRuleContext(FunctionWithArgtypesListContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_dropProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5270);
			match(DROP);
			setState(5271);
			match(PROCEDURE);
			setState(5273);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
			case 1:
				{
				setState(5272);
				existClause();
				}
				break;
			}
			setState(5275);
			functionWithArgtypesList();
			setState(5277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5276);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropPublicationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode PUBLICATION() { return getToken(DDLStatementParser.PUBLICATION, 0); }
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropPublicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPublication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropPublication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropPublication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropPublication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPublicationContext dropPublication() throws RecognitionException {
		DropPublicationContext _localctx = new DropPublicationContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_dropPublication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5279);
			match(DROP);
			setState(5280);
			match(PUBLICATION);
			setState(5282);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				{
				setState(5281);
				existClause();
				}
				break;
			}
			setState(5284);
			anyNameList();
			setState(5286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5285);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoutineContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode ROUTINE() { return getToken(DDLStatementParser.ROUTINE, 0); }
		public FunctionWithArgtypesListContext functionWithArgtypesList() {
			return getRuleContext(FunctionWithArgtypesListContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropRoutineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRoutine; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropRoutine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropRoutine(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoutineContext dropRoutine() throws RecognitionException {
		DropRoutineContext _localctx = new DropRoutineContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_dropRoutine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5288);
			match(DROP);
			setState(5289);
			match(ROUTINE);
			setState(5291);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				{
				setState(5290);
				existClause();
				}
				break;
			}
			setState(5293);
			functionWithArgtypesList();
			setState(5295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5294);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRuleContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode RULE() { return getToken(DDLStatementParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRuleContext dropRule() throws RecognitionException {
		DropRuleContext _localctx = new DropRuleContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_dropRule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5297);
			match(DROP);
			setState(5298);
			match(RULE);
			setState(5300);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				setState(5299);
				existClause();
				}
				break;
			}
			setState(5302);
			name();
			setState(5303);
			match(ON);
			setState(5304);
			tableName();
			setState(5306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5305);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropSequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(DDLStatementParser.SEQUENCE, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSequenceContext dropSequence() throws RecognitionException {
		DropSequenceContext _localctx = new DropSequenceContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_dropSequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5308);
			match(DROP);
			setState(5309);
			match(SEQUENCE);
			setState(5311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
			case 1:
				{
				setState(5310);
				existClause();
				}
				break;
			}
			setState(5313);
			qualifiedNameList(0);
			setState(5315);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5314);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_dropServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5317);
			match(DROP);
			setState(5318);
			match(SERVER);
			setState(5320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				setState(5319);
				existClause();
				}
				break;
			}
			setState(5322);
			qualifiedNameList(0);
			setState(5324);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5323);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropStatisticsContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(DDLStatementParser.STATISTICS, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropStatisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropStatistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropStatistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropStatistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropStatistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropStatisticsContext dropStatistics() throws RecognitionException {
		DropStatisticsContext _localctx = new DropStatisticsContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_dropStatistics);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5326);
			match(DROP);
			setState(5327);
			match(STATISTICS);
			setState(5329);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(5328);
				existClause();
				}
				break;
			}
			setState(5331);
			qualifiedNameList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropSubscriptionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(DDLStatementParser.SUBSCRIPTION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropSubscriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSubscription; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropSubscription(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropSubscription(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropSubscription(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSubscriptionContext dropSubscription() throws RecognitionException {
		DropSubscriptionContext _localctx = new DropSubscriptionContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_dropSubscription);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5333);
			match(DROP);
			setState(5334);
			match(SUBSCRIPTION);
			setState(5336);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				setState(5335);
				existClause();
				}
				break;
			}
			setState(5338);
			qualifiedName();
			setState(5340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5339);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTablespaceContext dropTablespace() throws RecognitionException {
		DropTablespaceContext _localctx = new DropTablespaceContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_dropTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5342);
			match(DROP);
			setState(5343);
			match(TABLESPACE);
			setState(5345);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				setState(5344);
				existClause();
				}
				break;
			}
			setState(5347);
			qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTextSearchContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(DDLStatementParser.CONFIGURATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(DDLStatementParser.DICTIONARY, 0); }
		public TerminalNode PARSER() { return getToken(DDLStatementParser.PARSER, 0); }
		public TerminalNode TEMPLATE() { return getToken(DDLStatementParser.TEMPLATE, 0); }
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropTextSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTextSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropTextSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropTextSearch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropTextSearch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTextSearchContext dropTextSearch() throws RecognitionException {
		DropTextSearchContext _localctx = new DropTextSearchContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_dropTextSearch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5349);
			match(DROP);
			setState(5350);
			match(TEXT);
			setState(5351);
			match(SEARCH);
			setState(5352);
			_la = _input.LA(1);
			if ( !(((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (CONFIGURATION - 446)) | (1L << (DICTIONARY - 446)) | (1L << (PARSER - 446)))) != 0) || _la==TEMPLATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				setState(5353);
				existClause();
				}
				break;
			}
			setState(5356);
			name();
			setState(5358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5357);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTransformContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode TRANSFORM() { return getToken(DDLStatementParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropTransformContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTransform; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropTransform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropTransform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropTransform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTransformContext dropTransform() throws RecognitionException {
		DropTransformContext _localctx = new DropTransformContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_dropTransform);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5360);
			match(DROP);
			setState(5361);
			match(TRANSFORM);
			setState(5363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(5362);
				existClause();
				}
			}

			setState(5365);
			match(FOR);
			setState(5366);
			typeName();
			setState(5367);
			match(LANGUAGE);
			setState(5368);
			name();
			setState(5370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5369);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_dropTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5372);
			match(DROP);
			setState(5373);
			match(TRIGGER);
			setState(5375);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				{
				setState(5374);
				existClause();
				}
				break;
			}
			setState(5377);
			qualifiedName();
			setState(5378);
			match(ON);
			setState(5379);
			tableName();
			setState(5381);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5380);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTypeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTypeContext dropType() throws RecognitionException {
		DropTypeContext _localctx = new DropTypeContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_dropType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5383);
			match(DROP);
			setState(5384);
			match(TYPE);
			setState(5386);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
			case 1:
				{
				setState(5385);
				existClause();
				}
				break;
			}
			setState(5388);
			anyNameList();
			setState(5390);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5389);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserMappingContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(DDLStatementParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public AuthIdentContext authIdent() {
			return getRuleContext(AuthIdentContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropUserMappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUserMapping; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropUserMapping(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropUserMapping(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropUserMapping(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserMappingContext dropUserMapping() throws RecognitionException {
		DropUserMappingContext _localctx = new DropUserMappingContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_dropUserMapping);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5392);
			match(DROP);
			setState(5393);
			match(USER);
			setState(5394);
			match(MAPPING);
			setState(5396);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(5395);
				existClause();
				}
			}

			setState(5398);
			match(FOR);
			setState(5399);
			authIdent();
			setState(5400);
			match(SERVER);
			setState(5401);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5403);
			match(DROP);
			setState(5404);
			match(VIEW);
			setState(5406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(5405);
				existClause();
				}
				break;
			}
			setState(5408);
			nameList(0);
			setState(5410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5409);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportForeignSchemaContext extends ParserRuleContext {
		public TerminalNode IMPORT() { return getToken(DDLStatementParser.IMPORT, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public TerminalNode INTO() { return getToken(DDLStatementParser.INTO, 0); }
		public ImportQualificationContext importQualification() {
			return getRuleContext(ImportQualificationContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public ImportForeignSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importForeignSchema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterImportForeignSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitImportForeignSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitImportForeignSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportForeignSchemaContext importForeignSchema() throws RecognitionException {
		ImportForeignSchemaContext _localctx = new ImportForeignSchemaContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_importForeignSchema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5412);
			match(IMPORT);
			setState(5413);
			match(FOREIGN);
			setState(5414);
			match(SCHEMA);
			setState(5415);
			name();
			setState(5417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT || _la==EXCEPT) {
				{
				setState(5416);
				importQualification();
				}
			}

			setState(5419);
			match(FROM);
			setState(5420);
			match(SERVER);
			setState(5421);
			name();
			setState(5422);
			match(INTO);
			setState(5423);
			name();
			setState(5425);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(5424);
				createGenericOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportQualificationContext extends ParserRuleContext {
		public ImportQualificationTypeContext importQualificationType() {
			return getRuleContext(ImportQualificationTypeContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ImportQualificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importQualification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterImportQualification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitImportQualification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitImportQualification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportQualificationContext importQualification() throws RecognitionException {
		ImportQualificationContext _localctx = new ImportQualificationContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_importQualification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5427);
			importQualificationType();
			setState(5428);
			match(LP_);
			setState(5429);
			relationExprList();
			setState(5430);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportQualificationTypeContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(DDLStatementParser.LIMIT, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode EXCEPT() { return getToken(DDLStatementParser.EXCEPT, 0); }
		public ImportQualificationTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importQualificationType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterImportQualificationType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitImportQualificationType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitImportQualificationType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportQualificationTypeContext importQualificationType() throws RecognitionException {
		ImportQualificationTypeContext _localctx = new ImportQualificationTypeContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_importQualificationType);
		try {
			setState(5435);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5432);
				match(LIMIT);
				setState(5433);
				match(TO);
				}
				break;
			case EXCEPT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5434);
				match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListenContext extends ParserRuleContext {
		public TerminalNode LISTEN() { return getToken(DDLStatementParser.LISTEN, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ListenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterListen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitListen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitListen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListenContext listen() throws RecognitionException {
		ListenContext _localctx = new ListenContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_listen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5437);
			match(LISTEN);
			setState(5438);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MoveContext extends ParserRuleContext {
		public TerminalNode MOVE() { return getToken(DDLStatementParser.MOVE, 0); }
		public FetchArgsContext fetchArgs() {
			return getRuleContext(FetchArgsContext.class,0);
		}
		public MoveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_move; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterMove(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitMove(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitMove(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MoveContext move() throws RecognitionException {
		MoveContext _localctx = new MoveContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_move);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5440);
			match(MOVE);
			setState(5441);
			fetchArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(DDLStatementParser.PREPARE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public PrepTypeClauseContext prepTypeClause() {
			return getRuleContext(PrepTypeClauseContext.class,0);
		}
		public PrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPrepare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPrepare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPrepare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareContext prepare() throws RecognitionException {
		PrepareContext _localctx = new PrepareContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_prepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5443);
			match(PREPARE);
			setState(5444);
			name();
			setState(5446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(5445);
				prepTypeClause();
				}
			}

			setState(5448);
			match(AS);
			setState(5449);
			preparableStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocateContext extends ParserRuleContext {
		public TerminalNode DEALLOCATE() { return getToken(DDLStatementParser.DEALLOCATE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode PREPARE() { return getToken(DDLStatementParser.PREPARE, 0); }
		public DeallocateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDeallocate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDeallocate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDeallocate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocateContext deallocate() throws RecognitionException {
		DeallocateContext _localctx = new DeallocateContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_deallocate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5451);
			match(DEALLOCATE);
			setState(5453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
			case 1:
				{
				setState(5452);
				match(PREPARE);
				}
				break;
			}
			setState(5457);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(5455);
				name();
				}
				break;
			case ALL:
				{
				setState(5456);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepTypeClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public PrepTypeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepTypeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPrepTypeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPrepTypeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPrepTypeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepTypeClauseContext prepTypeClause() throws RecognitionException {
		PrepTypeClauseContext _localctx = new PrepTypeClauseContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_prepTypeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5459);
			match(LP_);
			setState(5460);
			typeList();
			setState(5461);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshMaterializedViewContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(DDLStatementParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode CONCURRENTLY() { return getToken(DDLStatementParser.CONCURRENTLY, 0); }
		public WithDataContext withData() {
			return getRuleContext(WithDataContext.class,0);
		}
		public RefreshMaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshMaterializedView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRefreshMaterializedView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRefreshMaterializedView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRefreshMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshMaterializedViewContext refreshMaterializedView() throws RecognitionException {
		RefreshMaterializedViewContext _localctx = new RefreshMaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_refreshMaterializedView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5463);
			match(REFRESH);
			setState(5464);
			match(MATERIALIZED);
			setState(5465);
			match(VIEW);
			setState(5467);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(5466);
				match(CONCURRENTLY);
				}
			}

			setState(5469);
			qualifiedName();
			setState(5471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5470);
				withData();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReIndexContext extends ParserRuleContext {
		public TerminalNode REINDEX() { return getToken(DDLStatementParser.REINDEX, 0); }
		public ReIndexClausesContext reIndexClauses() {
			return getRuleContext(ReIndexClausesContext.class,0);
		}
		public ReIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReIndexContext reIndex() throws RecognitionException {
		ReIndexContext _localctx = new ReIndexContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_reIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5473);
			match(REINDEX);
			setState(5474);
			reIndexClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReIndexClausesContext extends ParserRuleContext {
		public ReindexTargetTypeContext reindexTargetType() {
			return getRuleContext(ReindexTargetTypeContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode CONCURRENTLY() { return getToken(DDLStatementParser.CONCURRENTLY, 0); }
		public ReindexTargetMultitableContext reindexTargetMultitable() {
			return getRuleContext(ReindexTargetMultitableContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ReindexOptionListContext reindexOptionList() {
			return getRuleContext(ReindexOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ReIndexClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reIndexClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReIndexClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReIndexClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReIndexClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReIndexClausesContext reIndexClauses() throws RecognitionException {
		ReIndexClausesContext _localctx = new ReIndexClausesContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_reIndexClauses);
		int _la;
		try {
			setState(5506);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5476);
				reindexTargetType();
				setState(5478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(5477);
					match(CONCURRENTLY);
					}
				}

				setState(5480);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5482);
				reindexTargetMultitable();
				setState(5484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(5483);
					match(CONCURRENTLY);
					}
				}

				setState(5486);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5488);
				match(LP_);
				setState(5489);
				reindexOptionList();
				setState(5490);
				match(RP_);
				setState(5491);
				reindexTargetType();
				setState(5493);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(5492);
					match(CONCURRENTLY);
					}
				}

				setState(5495);
				qualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5497);
				match(LP_);
				setState(5498);
				reindexOptionList();
				setState(5499);
				match(RP_);
				setState(5500);
				reindexTargetMultitable();
				setState(5502);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(5501);
					match(CONCURRENTLY);
					}
				}

				setState(5504);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexOptionListContext extends ParserRuleContext {
		public List<ReindexOptionElemContext> reindexOptionElem() {
			return getRuleContexts(ReindexOptionElemContext.class);
		}
		public ReindexOptionElemContext reindexOptionElem(int i) {
			return getRuleContext(ReindexOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public ReindexOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReindexOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReindexOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReindexOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexOptionListContext reindexOptionList() throws RecognitionException {
		ReindexOptionListContext _localctx = new ReindexOptionListContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_reindexOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5508);
			reindexOptionElem();
			setState(5513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5509);
				match(COMMA_);
				setState(5510);
				reindexOptionElem();
				}
				}
				setState(5515);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexOptionElemContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(DDLStatementParser.VERBOSE, 0); }
		public ReindexOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexOptionElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReindexOptionElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReindexOptionElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReindexOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexOptionElemContext reindexOptionElem() throws RecognitionException {
		ReindexOptionElemContext _localctx = new ReindexOptionElemContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_reindexOptionElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5516);
			match(VERBOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexTargetMultitableContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode SYSTEM() { return getToken(DDLStatementParser.SYSTEM, 0); }
		public TerminalNode DATABASE() { return getToken(DDLStatementParser.DATABASE, 0); }
		public ReindexTargetMultitableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexTargetMultitable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReindexTargetMultitable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReindexTargetMultitable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReindexTargetMultitable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexTargetMultitableContext reindexTargetMultitable() throws RecognitionException {
		ReindexTargetMultitableContext _localctx = new ReindexTargetMultitableContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_reindexTargetMultitable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5518);
			_la = _input.LA(1);
			if ( !(_la==SCHEMA || _la==DATABASE || _la==SYSTEM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexTargetTypeContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public ReindexTargetTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexTargetType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReindexTargetType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReindexTargetType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReindexTargetType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexTargetTypeContext reindexTargetType() throws RecognitionException {
		ReindexTargetTypeContext _localctx = new ReindexTargetTypeContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_reindexTargetType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5520);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignTableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public AlterForeignTableClausesContext alterForeignTableClauses() {
			return getRuleContext(AlterForeignTableClausesContext.class,0);
		}
		public ExistClauseContext existClause() {
			return getRuleContext(ExistClauseContext.class,0);
		}
		public AlterForeignTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterForeignTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterForeignTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterForeignTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignTableContext alterForeignTable() throws RecognitionException {
		AlterForeignTableContext _localctx = new AlterForeignTableContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_alterForeignTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5522);
			match(ALTER);
			setState(5523);
			match(FOREIGN);
			setState(5524);
			match(TABLE);
			setState(5526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
			case 1:
				{
				setState(5525);
				existClause();
				}
				break;
			}
			setState(5528);
			relationExpr();
			setState(5529);
			alterForeignTableClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignTableClausesContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public AlterForeignTableClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignTableClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterForeignTableClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterForeignTableClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterForeignTableClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignTableClausesContext alterForeignTableClauses() throws RecognitionException {
		AlterForeignTableClausesContext _localctx = new AlterForeignTableClausesContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_alterForeignTableClauses);
		int _la;
		try {
			setState(5546);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5531);
				match(RENAME);
				setState(5532);
				match(TO);
				setState(5533);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5534);
				match(RENAME);
				setState(5536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(5535);
					match(COLUMN);
					}
				}

				setState(5538);
				name();
				setState(5539);
				match(TO);
				setState(5540);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5542);
				alterTableCmds();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5543);
				match(SET);
				setState(5544);
				match(SCHEMA);
				setState(5545);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOperatorContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public CreateOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOperatorContext createOperator() throws RecognitionException {
		CreateOperatorContext _localctx = new CreateOperatorContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_createOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5548);
			match(CREATE);
			setState(5549);
			match(OPERATOR);
			setState(5550);
			anyOperator();
			setState(5551);
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOperatorClassContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(DDLStatementParser.CLASS, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public OpclassItemListContext opclassItemList() {
			return getRuleContext(OpclassItemListContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode FAMILY() { return getToken(DDLStatementParser.FAMILY, 0); }
		public CreateOperatorClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOperatorClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateOperatorClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateOperatorClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateOperatorClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOperatorClassContext createOperatorClass() throws RecognitionException {
		CreateOperatorClassContext _localctx = new CreateOperatorClassContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_createOperatorClass);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5553);
			match(CREATE);
			setState(5554);
			match(OPERATOR);
			setState(5555);
			match(CLASS);
			setState(5556);
			anyName();
			setState(5558);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(5557);
				match(DEFAULT);
				}
			}

			setState(5560);
			match(FOR);
			setState(5561);
			match(TYPE);
			setState(5562);
			typeName();
			setState(5563);
			match(USING);
			setState(5564);
			name();
			setState(5567);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FAMILY) {
				{
				setState(5565);
				match(FAMILY);
				setState(5566);
				anyName();
				}
			}

			setState(5569);
			match(AS);
			setState(5570);
			opclassItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOperatorFamilyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(DDLStatementParser.FAMILY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateOperatorFamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOperatorFamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateOperatorFamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateOperatorFamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateOperatorFamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOperatorFamilyContext createOperatorFamily() throws RecognitionException {
		CreateOperatorFamilyContext _localctx = new CreateOperatorFamilyContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_createOperatorFamily);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5572);
			match(CREATE);
			setState(5573);
			match(OPERATOR);
			setState(5574);
			match(FAMILY);
			setState(5575);
			anyName();
			setState(5576);
			match(USING);
			setState(5577);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecurityLabelStmtContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(DDLStatementParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DDLStatementParser.LABEL, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public SecurityLabelClauscesContext securityLabelClausces() {
			return getRuleContext(SecurityLabelClauscesContext.class,0);
		}
		public TerminalNode IS() { return getToken(DDLStatementParser.IS, 0); }
		public SecurityLabelContext securityLabel() {
			return getRuleContext(SecurityLabelContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public SecurityLabelStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securityLabelStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSecurityLabelStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSecurityLabelStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSecurityLabelStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurityLabelStmtContext securityLabelStmt() throws RecognitionException {
		SecurityLabelStmtContext _localctx = new SecurityLabelStmtContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_securityLabelStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5579);
			match(SECURITY);
			setState(5580);
			match(LABEL);
			{
			setState(5581);
			match(FOR);
			setState(5582);
			nonReservedWordOrSconst();
			}
			setState(5584);
			match(ON);
			setState(5585);
			securityLabelClausces();
			setState(5586);
			match(IS);
			setState(5587);
			securityLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecurityLabelContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public SecurityLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securityLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSecurityLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSecurityLabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSecurityLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurityLabelContext securityLabel() throws RecognitionException {
		SecurityLabelContext _localctx = new SecurityLabelContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_securityLabel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5589);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecurityLabelClauscesContext extends ParserRuleContext {
		public ObjectTypeAnyNameContext objectTypeAnyName() {
			return getRuleContext(ObjectTypeAnyNameContext.class,0);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TerminalNode DOMAIN() { return getToken(DDLStatementParser.DOMAIN, 0); }
		public AggregateWithArgtypesContext aggregateWithArgtypes() {
			return getRuleContext(AggregateWithArgtypesContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(DDLStatementParser.AGGREGATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public TerminalNode LARGE() { return getToken(DDLStatementParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DDLStatementParser.OBJECT, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(DDLStatementParser.ROUTINE, 0); }
		public SecurityLabelClauscesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securityLabelClausces; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSecurityLabelClausces(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSecurityLabelClausces(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSecurityLabelClausces(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurityLabelClauscesContext securityLabelClausces() throws RecognitionException {
		SecurityLabelClauscesContext _localctx = new SecurityLabelClauscesContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_securityLabelClausces);
		int _la;
		try {
			setState(5605);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
			case INDEX:
			case FOREIGN:
			case VIEW:
			case COLLATION:
			case TEXT:
			case SEQUENCE:
			case STATISTICS:
			case MATERIALIZED:
			case CONVERSION:
				enterOuterAlt(_localctx, 1);
				{
				setState(5591);
				objectTypeAnyName();
				setState(5592);
				anyName();
				}
				break;
			case COLUMN:
				enterOuterAlt(_localctx, 2);
				{
				setState(5594);
				match(COLUMN);
				setState(5595);
				anyName();
				}
				break;
			case TYPE:
			case DOMAIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(5596);
				_la = _input.LA(1);
				if ( !(_la==TYPE || _la==DOMAIN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5597);
				typeName();
				}
				break;
			case FUNCTION:
			case AGGREGATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5598);
				_la = _input.LA(1);
				if ( !(_la==FUNCTION || _la==AGGREGATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5599);
				aggregateWithArgtypes();
				}
				break;
			case LARGE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5600);
				match(LARGE);
				setState(5601);
				match(OBJECT);
				setState(5602);
				numericOnly();
				}
				break;
			case PROCEDURE:
			case ROUTINE:
				enterOuterAlt(_localctx, 6);
				{
				setState(5603);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==ROUTINE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5604);
				functionWithArgtypes();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlistenContext extends ParserRuleContext {
		public TerminalNode UNLISTEN() { return getToken(DDLStatementParser.UNLISTEN, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public UnlistenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlisten; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterUnlisten(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitUnlisten(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitUnlisten(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlistenContext unlisten() throws RecognitionException {
		UnlistenContext _localctx = new UnlistenContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_unlisten);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5607);
			match(UNLISTEN);
			setState(5610);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(5608);
				colId();
				}
				break;
			case ASTERISK_:
				{
				setState(5609);
				match(ASTERISK_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterMarkerContext extends ParserRuleContext {
		public TerminalNode QUESTION_() { return getToken(DDLStatementParser.QUESTION_, 0); }
		public LiteralsTypeContext literalsType() {
			return getRuleContext(LiteralsTypeContext.class,0);
		}
		public ParameterMarkerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterMarker; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterParameterMarker(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitParameterMarker(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitParameterMarker(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterMarkerContext parameterMarker() throws RecognitionException {
		ParameterMarkerContext _localctx = new ParameterMarkerContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_parameterMarker);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5612);
			match(QUESTION_);
			setState(5614);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				{
				setState(5613);
				literalsType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReservedKeywordContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode ANALYSE() { return getToken(DDLStatementParser.ANALYSE, 0); }
		public TerminalNode ANALYZE() { return getToken(DDLStatementParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(DDLStatementParser.AND, 0); }
		public TerminalNode ANY() { return getToken(DDLStatementParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(DDLStatementParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode ASC() { return getToken(DDLStatementParser.ASC, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(DDLStatementParser.ASYMMETRIC, 0); }
		public TerminalNode BOTH() { return getToken(DDLStatementParser.BOTH, 0); }
		public TerminalNode CASE() { return getToken(DDLStatementParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(DDLStatementParser.CAST, 0); }
		public TerminalNode CHECK() { return getToken(DDLStatementParser.CHECK, 0); }
		public TerminalNode COLLATE() { return getToken(DDLStatementParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(DDLStatementParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(DDLStatementParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(DDLStatementParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(DDLStatementParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DDLStatementParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(DDLStatementParser.CURRENT_USER, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(DDLStatementParser.DEFERRABLE, 0); }
		public TerminalNode DESC() { return getToken(DDLStatementParser.DESC, 0); }
		public TerminalNode DISTINCT() { return getToken(DDLStatementParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(DDLStatementParser.DO, 0); }
		public TerminalNode ELSE() { return getToken(DDLStatementParser.ELSE, 0); }
		public TerminalNode END() { return getToken(DDLStatementParser.END, 0); }
		public TerminalNode EXCEPT() { return getToken(DDLStatementParser.EXCEPT, 0); }
		public TerminalNode FALSE() { return getToken(DDLStatementParser.FALSE, 0); }
		public TerminalNode FETCH() { return getToken(DDLStatementParser.FETCH, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode GRANT() { return getToken(DDLStatementParser.GRANT, 0); }
		public TerminalNode GROUP() { return getToken(DDLStatementParser.GROUP, 0); }
		public TerminalNode HAVING() { return getToken(DDLStatementParser.HAVING, 0); }
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public TerminalNode INITIALLY() { return getToken(DDLStatementParser.INITIALLY, 0); }
		public TerminalNode INTERSECT() { return getToken(DDLStatementParser.INTERSECT, 0); }
		public TerminalNode INTO() { return getToken(DDLStatementParser.INTO, 0); }
		public TerminalNode LATERAL() { return getToken(DDLStatementParser.LATERAL, 0); }
		public TerminalNode LEADING() { return getToken(DDLStatementParser.LEADING, 0); }
		public TerminalNode LIMIT() { return getToken(DDLStatementParser.LIMIT, 0); }
		public TerminalNode LOCALTIME() { return getToken(DDLStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(DDLStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode OFFSET() { return getToken(DDLStatementParser.OFFSET, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode ONLY() { return getToken(DDLStatementParser.ONLY, 0); }
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(DDLStatementParser.ORDER, 0); }
		public TerminalNode PLACING() { return getToken(DDLStatementParser.PLACING, 0); }
		public TerminalNode PRIMARY() { return getToken(DDLStatementParser.PRIMARY, 0); }
		public TerminalNode REFERENCES() { return getToken(DDLStatementParser.REFERENCES, 0); }
		public TerminalNode RETURNING() { return getToken(DDLStatementParser.RETURNING, 0); }
		public TerminalNode SELECT() { return getToken(DDLStatementParser.SELECT, 0); }
		public TerminalNode SESSION_USER() { return getToken(DDLStatementParser.SESSION_USER, 0); }
		public TerminalNode SOME() { return getToken(DDLStatementParser.SOME, 0); }
		public TerminalNode SYMMETRIC() { return getToken(DDLStatementParser.SYMMETRIC, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TerminalNode THEN() { return getToken(DDLStatementParser.THEN, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode TRAILING() { return getToken(DDLStatementParser.TRAILING, 0); }
		public TerminalNode TRUE() { return getToken(DDLStatementParser.TRUE, 0); }
		public TerminalNode UNION() { return getToken(DDLStatementParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(DDLStatementParser.UNIQUE, 0); }
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public TerminalNode VARIADIC() { return getToken(DDLStatementParser.VARIADIC, 0); }
		public TerminalNode WHEN() { return getToken(DDLStatementParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(DDLStatementParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(DDLStatementParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public ReservedKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reservedKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReservedKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReservedKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReservedKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReservedKeywordContext reservedKeyword() throws RecognitionException {
		ReservedKeywordContext _localctx = new ReservedKeywordContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_reservedKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5616);
			_la = _input.LA(1);
			if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (SELECT - 62)) | (1L << (CREATE - 62)) | (1L << (GRANT - 62)) | (1L << (TABLE - 62)) | (1L << (COLUMN - 62)) | (1L << (CONSTRAINT - 62)) | (1L << (PRIMARY - 62)) | (1L << (UNIQUE - 62)) | (1L << (FOREIGN - 62)) | (1L << (INTO - 62)) | (1L << (WITH - 62)) | (1L << (UNION - 62)) | (1L << (DISTINCT - 62)) | (1L << (CASE - 62)) | (1L << (WHEN - 62)) | (1L << (CAST - 62)) | (1L << (FROM - 62)) | (1L << (USING - 62)) | (1L << (WHERE - 62)) | (1L << (AS - 62)) | (1L << (ON - 62)) | (1L << (ELSE - 62)) | (1L << (THEN - 62)) | (1L << (FOR - 62)) | (1L << (TO - 62)) | (1L << (AND - 62)) | (1L << (OR - 62)) | (1L << (NOT - 62)) | (1L << (NULL - 62)) | (1L << (TRUE - 62)) | (1L << (FALSE - 62)))) != 0) || ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (IN - 126)) | (1L << (ALL - 126)) | (1L << (ANY - 126)) | (1L << (ORDER - 126)) | (1L << (GROUP - 126)) | (1L << (ASC - 126)) | (1L << (DESC - 126)) | (1L << (HAVING - 126)) | (1L << (LIMIT - 126)) | (1L << (OFFSET - 126)) | (1L << (ARRAY - 126)) | (1L << (LOCALTIME - 126)) | (1L << (LOCALTIMESTAMP - 126)) | (1L << (DEFAULT - 126)) | (1L << (DO - 126)) | (1L << (CURRENT_USER - 126)))) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (CURRENT_DATE - 190)) | (1L << (CURRENT_TIME - 190)) | (1L << (CURRENT_TIMESTAMP - 190)) | (1L << (BOTH - 190)) | (1L << (LEADING - 190)) | (1L << (TRAILING - 190)) | (1L << (INTERSECT - 190)) | (1L << (EXCEPT - 190)) | (1L << (FETCH - 190)) | (1L << (WINDOW - 190)) | (1L << (SOME - 190)) | (1L << (END - 190)) | (1L << (CHECK - 190)) | (1L << (REFERENCES - 190)) | (1L << (USER - 190)) | (1L << (COLLATE - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (DEFERRABLE - 254)) | (1L << (INITIALLY - 254)) | (1L << (ONLY - 254)) | (1L << (SESSION_USER - 254)))) != 0) || ((((_la - 367)) & ~0x3f) == 0 && ((1L << (_la - 367)) & ((1L << (CURRENT_ROLE - 367)) | (1L << (CURRENT_CATALOG - 367)) | (1L << (SYMMETRIC - 367)) | (1L << (ASYMMETRIC - 367)) | (1L << (VARIADIC - 367)) | (1L << (PLACING - 367)) | (1L << (RETURNING - 367)) | (1L << (LATERAL - 367)) | (1L << (ANALYSE - 367)) | (1L << (ANALYZE - 367)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumberLiteralsContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode MINUS_() { return getToken(DDLStatementParser.MINUS_, 0); }
		public LiteralsTypeContext literalsType() {
			return getRuleContext(LiteralsTypeContext.class,0);
		}
		public NumberLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNumberLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNumberLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNumberLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberLiteralsContext numberLiterals() throws RecognitionException {
		NumberLiteralsContext _localctx = new NumberLiteralsContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_numberLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5619);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS_) {
				{
				setState(5618);
				match(MINUS_);
				}
			}

			setState(5621);
			match(NUMBER_);
			setState(5623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE_CAST_) {
				{
				setState(5622);
				literalsType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralsTypeContext extends ParserRuleContext {
		public TerminalNode TYPE_CAST_() { return getToken(DDLStatementParser.TYPE_CAST_, 0); }
		public TerminalNode IDENTIFIER_() { return getToken(DDLStatementParser.IDENTIFIER_, 0); }
		public LiteralsTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literalsType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterLiteralsType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitLiteralsType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitLiteralsType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralsTypeContext literalsType() throws RecognitionException {
		LiteralsTypeContext _localctx = new LiteralsTypeContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_literalsType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5625);
			match(TYPE_CAST_);
			setState(5626);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DDLStatementParser.IDENTIFIER_, 0); }
		public UnicodeEscapesContext unicodeEscapes() {
			return getRuleContext(UnicodeEscapesContext.class,0);
		}
		public UescapeContext uescape() {
			return getRuleContext(UescapeContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_identifier);
		int _la;
		try {
			setState(5636);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(5629);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__0 || _la==T__1) {
					{
					setState(5628);
					unicodeEscapes();
					}
				}

				setState(5631);
				match(IDENTIFIER_);
				setState(5633);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
				case 1:
					{
					setState(5632);
					uescape();
					}
					break;
				}
				}
				break;
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5635);
				unreservedWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnicodeEscapesContext extends ParserRuleContext {
		public TerminalNode AMPERSAND_() { return getToken(DDLStatementParser.AMPERSAND_, 0); }
		public UnicodeEscapesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicodeEscapes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterUnicodeEscapes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitUnicodeEscapes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitUnicodeEscapes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnicodeEscapesContext unicodeEscapes() throws RecognitionException {
		UnicodeEscapesContext _localctx = new UnicodeEscapesContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_unicodeEscapes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5638);
			_la = _input.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5639);
			match(AMPERSAND_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UescapeContext extends ParserRuleContext {
		public TerminalNode UESCAPE() { return getToken(DDLStatementParser.UESCAPE, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public UescapeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uescape; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterUescape(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitUescape(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitUescape(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UescapeContext uescape() throws RecognitionException {
		UescapeContext _localctx = new UescapeContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_uescape);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5641);
			match(UESCAPE);
			setState(5642);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnreservedWordContext extends ParserRuleContext {
		public TerminalNode ABORT() { return getToken(DDLStatementParser.ABORT, 0); }
		public TerminalNode ABSOLUTE() { return getToken(DDLStatementParser.ABSOLUTE, 0); }
		public TerminalNode ACCESS() { return getToken(DDLStatementParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(DDLStatementParser.ACTION, 0); }
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode ADMIN() { return getToken(DDLStatementParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(DDLStatementParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(DDLStatementParser.AGGREGATE, 0); }
		public TerminalNode ALSO() { return getToken(DDLStatementParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(DDLStatementParser.ALWAYS, 0); }
		public TerminalNode ASSERTION() { return getToken(DDLStatementParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(DDLStatementParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(DDLStatementParser.AT, 0); }
		public TerminalNode ATTACH() { return getToken(DDLStatementParser.ATTACH, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(DDLStatementParser.ATTRIBUTE, 0); }
		public TerminalNode BACKWARD() { return getToken(DDLStatementParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(DDLStatementParser.BEFORE, 0); }
		public TerminalNode BEGIN() { return getToken(DDLStatementParser.BEGIN, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public TerminalNode CACHE() { return getToken(DDLStatementParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(DDLStatementParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(DDLStatementParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(DDLStatementParser.CASCADED, 0); }
		public TerminalNode CATALOG() { return getToken(DDLStatementParser.CATALOG, 0); }
		public TerminalNode CHAIN() { return getToken(DDLStatementParser.CHAIN, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(DDLStatementParser.CHARACTERISTICS, 0); }
		public TerminalNode CHECKPOINT() { return getToken(DDLStatementParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(DDLStatementParser.CLASS, 0); }
		public TerminalNode CLOSE() { return getToken(DDLStatementParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(DDLStatementParser.CLUSTER, 0); }
		public TerminalNode COLUMNS() { return getToken(DDLStatementParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(DDLStatementParser.COMMENT, 0); }
		public TerminalNode COMMENTS() { return getToken(DDLStatementParser.COMMENTS, 0); }
		public TerminalNode COMMIT() { return getToken(DDLStatementParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(DDLStatementParser.COMMITTED, 0); }
		public TerminalNode CONFIGURATION() { return getToken(DDLStatementParser.CONFIGURATION, 0); }
		public TerminalNode CONFLICT() { return getToken(DDLStatementParser.CONFLICT, 0); }
		public TerminalNode CONNECTION() { return getToken(DDLStatementParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(DDLStatementParser.CONSTRAINTS, 0); }
		public TerminalNode CONTENT() { return getToken(DDLStatementParser.CONTENT, 0); }
		public TerminalNode CONTINUE() { return getToken(DDLStatementParser.CONTINUE, 0); }
		public TerminalNode CONVERSION() { return getToken(DDLStatementParser.CONVERSION, 0); }
		public TerminalNode COPY() { return getToken(DDLStatementParser.COPY, 0); }
		public TerminalNode COST() { return getToken(DDLStatementParser.COST, 0); }
		public TerminalNode CSV() { return getToken(DDLStatementParser.CSV, 0); }
		public TerminalNode CUBE() { return getToken(DDLStatementParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(DDLStatementParser.CURRENT, 0); }
		public TerminalNode CURSOR() { return getToken(DDLStatementParser.CURSOR, 0); }
		public TerminalNode CYCLE() { return getToken(DDLStatementParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(DDLStatementParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(DDLStatementParser.DAY, 0); }
		public TerminalNode DEALLOCATE() { return getToken(DDLStatementParser.DEALLOCATE, 0); }
		public TerminalNode DECLARE() { return getToken(DDLStatementParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(DDLStatementParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(DDLStatementParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(DDLStatementParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(DDLStatementParser.DELETE, 0); }
		public TerminalNode DELIMITER() { return getToken(DDLStatementParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(DDLStatementParser.DELIMITERS, 0); }
		public TerminalNode DEPENDS() { return getToken(DDLStatementParser.DEPENDS, 0); }
		public TerminalNode DETACH() { return getToken(DDLStatementParser.DETACH, 0); }
		public TerminalNode DICTIONARY() { return getToken(DDLStatementParser.DICTIONARY, 0); }
		public TerminalNode DISABLE() { return getToken(DDLStatementParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(DDLStatementParser.DISCARD, 0); }
		public TerminalNode DOCUMENT() { return getToken(DDLStatementParser.DOCUMENT, 0); }
		public TerminalNode DOMAIN() { return getToken(DDLStatementParser.DOMAIN, 0); }
		public TerminalNode DOUBLE() { return getToken(DDLStatementParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode EACH() { return getToken(DDLStatementParser.EACH, 0); }
		public TerminalNode ENABLE() { return getToken(DDLStatementParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(DDLStatementParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(DDLStatementParser.ENCRYPTED, 0); }
		public TerminalNode ENUM() { return getToken(DDLStatementParser.ENUM, 0); }
		public TerminalNode ESCAPE() { return getToken(DDLStatementParser.ESCAPE, 0); }
		public TerminalNode EVENT() { return getToken(DDLStatementParser.EVENT, 0); }
		public TerminalNode EXCLUDE() { return getToken(DDLStatementParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(DDLStatementParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DDLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTE() { return getToken(DDLStatementParser.EXECUTE, 0); }
		public TerminalNode EXPLAIN() { return getToken(DDLStatementParser.EXPLAIN, 0); }
		public TerminalNode EXPRESSION() { return getToken(DDLStatementParser.EXPRESSION, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(DDLStatementParser.EXTERNAL, 0); }
		public TerminalNode FAMILY() { return getToken(DDLStatementParser.FAMILY, 0); }
		public TerminalNode FILTER() { return getToken(DDLStatementParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(DDLStatementParser.FIRST, 0); }
		public TerminalNode FOLLOWING() { return getToken(DDLStatementParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(DDLStatementParser.FORCE, 0); }
		public TerminalNode FORWARD() { return getToken(DDLStatementParser.FORWARD, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(DDLStatementParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(DDLStatementParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(DDLStatementParser.GLOBAL, 0); }
		public TerminalNode GRANTED() { return getToken(DDLStatementParser.GRANTED, 0); }
		public TerminalNode GROUPS() { return getToken(DDLStatementParser.GROUPS, 0); }
		public TerminalNode HANDLER() { return getToken(DDLStatementParser.HANDLER, 0); }
		public TerminalNode HEADER() { return getToken(DDLStatementParser.HEADER, 0); }
		public TerminalNode HOLD() { return getToken(DDLStatementParser.HOLD, 0); }
		public TerminalNode HOUR() { return getToken(DDLStatementParser.HOUR, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode IMMEDIATE() { return getToken(DDLStatementParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(DDLStatementParser.IMMUTABLE, 0); }
		public TerminalNode IMPLICIT() { return getToken(DDLStatementParser.IMPLICIT, 0); }
		public TerminalNode IMPORT() { return getToken(DDLStatementParser.IMPORT, 0); }
		public TerminalNode INCLUDE() { return getToken(DDLStatementParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(DDLStatementParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(DDLStatementParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(DDLStatementParser.INDEXES, 0); }
		public TerminalNode INHERIT() { return getToken(DDLStatementParser.INHERIT, 0); }
		public TerminalNode INHERITS() { return getToken(DDLStatementParser.INHERITS, 0); }
		public TerminalNode INLINE() { return getToken(DDLStatementParser.INLINE, 0); }
		public TerminalNode INPUT() { return getToken(DDLStatementParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(DDLStatementParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(DDLStatementParser.INSERT, 0); }
		public TerminalNode INSTEAD() { return getToken(DDLStatementParser.INSTEAD, 0); }
		public TerminalNode INVOKER() { return getToken(DDLStatementParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(DDLStatementParser.ISOLATION, 0); }
		public TerminalNode KEY() { return getToken(DDLStatementParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(DDLStatementParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public TerminalNode LARGE() { return getToken(DDLStatementParser.LARGE, 0); }
		public TerminalNode LAST() { return getToken(DDLStatementParser.LAST, 0); }
		public TerminalNode LEAKPROOF() { return getToken(DDLStatementParser.LEAKPROOF, 0); }
		public TerminalNode LEVEL() { return getToken(DDLStatementParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(DDLStatementParser.LISTEN, 0); }
		public TerminalNode LOAD() { return getToken(DDLStatementParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(DDLStatementParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(DDLStatementParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(DDLStatementParser.LOCK, 0); }
		public TerminalNode LOCKED() { return getToken(DDLStatementParser.LOCKED, 0); }
		public TerminalNode LOGGED() { return getToken(DDLStatementParser.LOGGED, 0); }
		public TerminalNode MAPPING() { return getToken(DDLStatementParser.MAPPING, 0); }
		public TerminalNode MATCH() { return getToken(DDLStatementParser.MATCH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode MAXVALUE() { return getToken(DDLStatementParser.MAXVALUE, 0); }
		public TerminalNode METHOD() { return getToken(DDLStatementParser.METHOD, 0); }
		public TerminalNode MINUTE() { return getToken(DDLStatementParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(DDLStatementParser.MINVALUE, 0); }
		public TerminalNode MODE() { return getToken(DDLStatementParser.MODE, 0); }
		public TerminalNode MONTH() { return getToken(DDLStatementParser.MONTH, 0); }
		public TerminalNode MOVE() { return getToken(DDLStatementParser.MOVE, 0); }
		public TerminalNode NAME() { return getToken(DDLStatementParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(DDLStatementParser.NAMES, 0); }
		public TerminalNode NEW() { return getToken(DDLStatementParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(DDLStatementParser.NEXT, 0); }
		public TerminalNode NFC() { return getToken(DDLStatementParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(DDLStatementParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(DDLStatementParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(DDLStatementParser.NFKD, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode NORMALIZED() { return getToken(DDLStatementParser.NORMALIZED, 0); }
		public TerminalNode NOTHING() { return getToken(DDLStatementParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(DDLStatementParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(DDLStatementParser.NOWAIT, 0); }
		public TerminalNode NULLS() { return getToken(DDLStatementParser.NULLS, 0); }
		public TerminalNode OBJECT() { return getToken(DDLStatementParser.OBJECT, 0); }
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public TerminalNode OFF() { return getToken(DDLStatementParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(DDLStatementParser.OIDS, 0); }
		public TerminalNode OLD() { return getToken(DDLStatementParser.OLD, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(DDLStatementParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(DDLStatementParser.OPTIONS, 0); }
		public TerminalNode ORDINALITY() { return getToken(DDLStatementParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(DDLStatementParser.OTHERS, 0); }
		public TerminalNode OVER() { return getToken(DDLStatementParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(DDLStatementParser.OVERRIDING, 0); }
		public TerminalNode OWNED() { return getToken(DDLStatementParser.OWNED, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public TerminalNode PARALLEL() { return getToken(DDLStatementParser.PARALLEL, 0); }
		public TerminalNode PARSER() { return getToken(DDLStatementParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(DDLStatementParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(DDLStatementParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(DDLStatementParser.PASSING, 0); }
		public TerminalNode PASSWORD() { return getToken(DDLStatementParser.PASSWORD, 0); }
		public TerminalNode PLANS() { return getToken(DDLStatementParser.PLANS, 0); }
		public TerminalNode POLICY() { return getToken(DDLStatementParser.POLICY, 0); }
		public TerminalNode PRECEDING() { return getToken(DDLStatementParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(DDLStatementParser.PREPARE, 0); }
		public TerminalNode PREPARED() { return getToken(DDLStatementParser.PREPARED, 0); }
		public TerminalNode PRESERVE() { return getToken(DDLStatementParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(DDLStatementParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DDLStatementParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(DDLStatementParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public TerminalNode PROCEDURES() { return getToken(DDLStatementParser.PROCEDURES, 0); }
		public TerminalNode PROGRAM() { return getToken(DDLStatementParser.PROGRAM, 0); }
		public TerminalNode PUBLICATION() { return getToken(DDLStatementParser.PUBLICATION, 0); }
		public TerminalNode QUOTE() { return getToken(DDLStatementParser.QUOTE, 0); }
		public TerminalNode RANGE() { return getToken(DDLStatementParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(DDLStatementParser.READ, 0); }
		public TerminalNode REASSIGN() { return getToken(DDLStatementParser.REASSIGN, 0); }
		public TerminalNode RECHECK() { return getToken(DDLStatementParser.RECHECK, 0); }
		public TerminalNode RECURSIVE() { return getToken(DDLStatementParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(DDLStatementParser.REF, 0); }
		public TerminalNode REFERENCING() { return getToken(DDLStatementParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(DDLStatementParser.REFRESH, 0); }
		public TerminalNode REINDEX() { return getToken(DDLStatementParser.REINDEX, 0); }
		public TerminalNode RELATIVE() { return getToken(DDLStatementParser.RELATIVE, 0); }
		public TerminalNode RELEASE() { return getToken(DDLStatementParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(DDLStatementParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public TerminalNode REPLICA() { return getToken(DDLStatementParser.REPLICA, 0); }
		public TerminalNode RESET() { return getToken(DDLStatementParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(DDLStatementParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public TerminalNode RETURNS() { return getToken(DDLStatementParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(DDLStatementParser.REVOKE, 0); }
		public TerminalNode ROLE() { return getToken(DDLStatementParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(DDLStatementParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(DDLStatementParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(DDLStatementParser.ROUTINE, 0); }
		public TerminalNode ROUTINES() { return getToken(DDLStatementParser.ROUTINES, 0); }
		public TerminalNode ROWS() { return getToken(DDLStatementParser.ROWS, 0); }
		public TerminalNode RULE() { return getToken(DDLStatementParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(DDLStatementParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(DDLStatementParser.SCHEMAS, 0); }
		public TerminalNode SCROLL() { return getToken(DDLStatementParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public TerminalNode SECOND() { return getToken(DDLStatementParser.SECOND, 0); }
		public TerminalNode SECURITY() { return getToken(DDLStatementParser.SECURITY, 0); }
		public TerminalNode SEQUENCE() { return getToken(DDLStatementParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(DDLStatementParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(DDLStatementParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(DDLStatementParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SETS() { return getToken(DDLStatementParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(DDLStatementParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(DDLStatementParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(DDLStatementParser.SIMPLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(DDLStatementParser.SNAPSHOT, 0); }
		public TerminalNode SQL() { return getToken(DDLStatementParser.SQL, 0); }
		public TerminalNode STABLE() { return getToken(DDLStatementParser.STABLE, 0); }
		public TerminalNode STANDALONE() { return getToken(DDLStatementParser.STANDALONE, 0); }
		public TerminalNode START() { return getToken(DDLStatementParser.START, 0); }
		public TerminalNode STATEMENT() { return getToken(DDLStatementParser.STATEMENT, 0); }
		public TerminalNode STATISTICS() { return getToken(DDLStatementParser.STATISTICS, 0); }
		public TerminalNode STDIN() { return getToken(DDLStatementParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(DDLStatementParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(DDLStatementParser.STORAGE, 0); }
		public TerminalNode STORED() { return getToken(DDLStatementParser.STORED, 0); }
		public TerminalNode STRICT() { return getToken(DDLStatementParser.STRICT, 0); }
		public TerminalNode STRIP() { return getToken(DDLStatementParser.STRIP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(DDLStatementParser.SUBSCRIPTION, 0); }
		public TerminalNode SUPPORT() { return getToken(DDLStatementParser.SUPPORT, 0); }
		public TerminalNode SYSID() { return getToken(DDLStatementParser.SYSID, 0); }
		public TerminalNode SYSTEM() { return getToken(DDLStatementParser.SYSTEM, 0); }
		public TerminalNode TABLES() { return getToken(DDLStatementParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public TerminalNode TEMP() { return getToken(DDLStatementParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(DDLStatementParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(DDLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode TIES() { return getToken(DDLStatementParser.TIES, 0); }
		public TerminalNode TRANSACTION() { return getToken(DDLStatementParser.TRANSACTION, 0); }
		public TerminalNode TRANSFORM() { return getToken(DDLStatementParser.TRANSFORM, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(DDLStatementParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(DDLStatementParser.TRUSTED, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TerminalNode TYPES() { return getToken(DDLStatementParser.TYPES, 0); }
		public TerminalNode UESCAPE() { return getToken(DDLStatementParser.UESCAPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(DDLStatementParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(DDLStatementParser.UNCOMMITTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(DDLStatementParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(DDLStatementParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(DDLStatementParser.UNLISTEN, 0); }
		public TerminalNode UNLOGGED() { return getToken(DDLStatementParser.UNLOGGED, 0); }
		public TerminalNode UNTIL() { return getToken(DDLStatementParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public TerminalNode VACUUM() { return getToken(DDLStatementParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(DDLStatementParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(DDLStatementParser.VALIDATE, 0); }
		public TerminalNode VALIDATOR() { return getToken(DDLStatementParser.VALIDATOR, 0); }
		public TerminalNode VALUE() { return getToken(DDLStatementParser.VALUE, 0); }
		public TerminalNode VARYING() { return getToken(DDLStatementParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(DDLStatementParser.VERSION, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(DDLStatementParser.VIEWS, 0); }
		public TerminalNode VOLATILE() { return getToken(DDLStatementParser.VOLATILE, 0); }
		public TerminalNode WHITESPACE() { return getToken(DDLStatementParser.WHITESPACE, 0); }
		public TerminalNode WITHIN() { return getToken(DDLStatementParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(DDLStatementParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(DDLStatementParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(DDLStatementParser.WRAPPER, 0); }
		public TerminalNode WRITE() { return getToken(DDLStatementParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(DDLStatementParser.XML, 0); }
		public TerminalNode YEAR() { return getToken(DDLStatementParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(DDLStatementParser.YES, 0); }
		public TerminalNode ZONE() { return getToken(DDLStatementParser.ZONE, 0); }
		public TerminalNode JSON() { return getToken(DDLStatementParser.JSON, 0); }
		public UnreservedWordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreservedWord; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterUnreservedWord(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitUnreservedWord(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitUnreservedWord(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnreservedWordContext unreservedWord() throws RecognitionException {
		UnreservedWordContext _localctx = new UnreservedWordContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_unreservedWord);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5644);
			_la = _input.LA(1);
			if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (INSERT - 63)) | (1L << (UPDATE - 63)) | (1L << (DELETE - 63)) | (1L << (ALTER - 63)) | (1L << (DROP - 63)) | (1L << (TRUNCATE - 63)) | (1L << (SCHEMA - 63)) | (1L << (REVOKE - 63)) | (1L << (ADD - 63)) | (1L << (SET - 63)) | (1L << (INDEX - 63)) | (1L << (KEY - 63)) | (1L << (FUNCTION - 63)) | (1L << (TRIGGER - 63)) | (1L << (PROCEDURE - 63)) | (1L << (VIEW - 63)) | (1L << (IF - 63)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (BY - 132)) | (1L << (BEGIN - 132)) | (1L << (COMMIT - 132)) | (1L << (ROLLBACK - 132)) | (1L << (SAVEPOINT - 132)) | (1L << (DOUBLE - 132)) | (1L << (YEAR - 132)) | (1L << (MONTH - 132)) | (1L << (DAY - 132)) | (1L << (HOUR - 132)) | (1L << (MINUTE - 132)) | (1L << (SECOND - 132)) | (1L << (CURRENT - 132)) | (1L << (ENABLE - 132)) | (1L << (DISABLE - 132)) | (1L << (CALL - 132)) | (1L << (PRESERVE - 132)) | (1L << (DEFINER - 132)) | (1L << (SQL - 132)) | (1L << (CASCADED - 132)) | (1L << (LOCAL - 132)) | (1L << (CLOSE - 132)) | (1L << (NEXT - 132)) | (1L << (NAME - 132)) | (1L << (NAMES - 132)) | (1L << (TYPE - 132)) | (1L << (TEXT - 132)) | (1L << (REPEATABLE - 132)) | (1L << (VARYING - 132)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (VALUE - 197)) | (1L << (TIES - 197)) | (1L << (CUBE - 197)) | (1L << (SETS - 197)) | (1L << (OTHERS - 197)) | (1L << (AT - 197)) | (1L << (ADMIN - 197)) | (1L << (ESCAPE - 197)) | (1L << (EXCLUDE - 197)) | (1L << (PARTITION - 197)) | (1L << (UNKNOWN - 197)) | (1L << (ALWAYS - 197)) | (1L << (CASCADE - 197)) | (1L << (GENERATED - 197)) | (1L << (ISOLATION - 197)) | (1L << (LEVEL - 197)) | (1L << (NO - 197)) | (1L << (OPTION - 197)) | (1L << (PRIVILEGES - 197)) | (1L << (READ - 197)) | (1L << (ROLE - 197)) | (1L << (ROWS - 197)) | (1L << (START - 197)) | (1L << (TRANSACTION - 197)) | (1L << (ACTION - 197)) | (1L << (CACHE - 197)) | (1L << (CHARACTERISTICS - 197)) | (1L << (CLUSTER - 197)) | (1L << (COMMENTS - 197)) | (1L << (CONSTRAINTS - 197)) | (1L << (CYCLE - 197)) | (1L << (DATA - 197)) | (1L << (DATABASE - 197)) | (1L << (DEFAULTS - 197)) | (1L << (DEFERRED - 197)) | (1L << (DEPENDS - 197)) | (1L << (DOMAIN - 197)) | (1L << (EXCLUDING - 197)) | (1L << (EXECUTE - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (EXTENSION - 261)) | (1L << (EXTERNAL - 261)) | (1L << (FILTER - 261)) | (1L << (FIRST - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FORCE - 261)) | (1L << (GLOBAL - 261)) | (1L << (IDENTITY - 261)) | (1L << (IMMEDIATE - 261)) | (1L << (INCLUDING - 261)) | (1L << (INCREMENT - 261)) | (1L << (INDEXES - 261)) | (1L << (INHERIT - 261)) | (1L << (INHERITS - 261)) | (1L << (INCLUDE - 261)) | (1L << (LANGUAGE - 261)) | (1L << (LARGE - 261)) | (1L << (LAST - 261)) | (1L << (LOGGED - 261)) | (1L << (MATCH - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MINVALUE - 261)) | (1L << (NOTHING - 261)) | (1L << (NULLS - 261)) | (1L << (OBJECT - 261)) | (1L << (OIDS - 261)) | (1L << (OVER - 261)) | (1L << (OWNED - 261)) | (1L << (OWNER - 261)) | (1L << (PARTIAL - 261)) | (1L << (PRECEDING - 261)) | (1L << (RANGE - 261)) | (1L << (RENAME - 261)) | (1L << (REPLICA - 261)) | (1L << (RESET - 261)) | (1L << (RESTART - 261)) | (1L << (RESTRICT - 261)) | (1L << (ROUTINE - 261)) | (1L << (RULE - 261)) | (1L << (SECURITY - 261)) | (1L << (SEQUENCE - 261)) | (1L << (SESSION - 261)) | (1L << (SHOW - 261)) | (1L << (SIMPLE - 261)) | (1L << (STATISTICS - 261)) | (1L << (STORAGE - 261)) | (1L << (TABLESPACE - 261)) | (1L << (TEMP - 261)) | (1L << (TEMPORARY - 261)) | (1L << (UNBOUNDED - 261)) | (1L << (UNLOGGED - 261)) | (1L << (VALID - 261)) | (1L << (VALIDATE - 261)) | (1L << (WITHIN - 261)) | (1L << (WITHOUT - 261)) | (1L << (ZONE - 261)) | (1L << (OF - 261)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (UESCAPE - 325)) | (1L << (GROUPS - 325)) | (1L << (RECURSIVE - 325)) | (1L << (ENUM - 325)) | (1L << (XML - 325)) | (1L << (JSON - 325)) | (1L << (ORDINALITY - 325)) | (1L << (NFC - 325)) | (1L << (NFD - 325)) | (1L << (NFKC - 325)) | (1L << (NFKD - 325)) | (1L << (REF - 325)) | (1L << (PASSING - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (VERSION - 389)) | (1L << (YES - 389)) | (1L << (STANDALONE - 389)) | (1L << (MATERIALIZED - 389)) | (1L << (OPERATOR - 389)) | (1L << (SHARE - 389)) | (1L << (ROLLUP - 389)) | (1L << (DOCUMENT - 389)) | (1L << (NORMALIZED - 389)) | (1L << (NOWAIT - 389)) | (1L << (LOCKED - 389)) | (1L << (COLUMNS - 389)) | (1L << (CONTENT - 389)) | (1L << (STRIP - 389)) | (1L << (WHITESPACE - 389)) | (1L << (CONFLICT - 389)) | (1L << (OVERRIDING - 389)) | (1L << (SYSTEM - 389)) | (1L << (ABORT - 389)) | (1L << (ABSOLUTE - 389)) | (1L << (ACCESS - 389)) | (1L << (AFTER - 389)) | (1L << (AGGREGATE - 389)) | (1L << (ALSO - 389)) | (1L << (ATTACH - 389)) | (1L << (ATTRIBUTE - 389)) | (1L << (BACKWARD - 389)) | (1L << (BEFORE - 389)) | (1L << (ASSERTION - 389)) | (1L << (ASSIGNMENT - 389)) | (1L << (CONTINUE - 389)) | (1L << (CONVERSION - 389)) | (1L << (COPY - 389)) | (1L << (COST - 389)) | (1L << (CSV - 389)) | (1L << (CALLED - 389)) | (1L << (CATALOG - 389)) | (1L << (CHAIN - 389)) | (1L << (CHECKPOINT - 389)) | (1L << (CLASS - 389)) | (1L << (CONFIGURATION - 389)) | (1L << (COMMENT - 389)) | (1L << (DETACH - 389)) | (1L << (DICTIONARY - 389)) | (1L << (EXPRESSION - 389)) | (1L << (INSENSITIVE - 389)) | (1L << (DISCARD - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (OFF - 453)) | (1L << (INSTEAD - 453)) | (1L << (EXPLAIN - 453)) | (1L << (INPUT - 453)) | (1L << (INLINE - 453)) | (1L << (PARALLEL - 453)) | (1L << (LEAKPROOF - 453)) | (1L << (COMMITTED - 453)) | (1L << (ENCODING - 453)) | (1L << (IMPLICIT - 453)) | (1L << (DELIMITER - 453)) | (1L << (CURSOR - 453)) | (1L << (EACH - 453)) | (1L << (EVENT - 453)) | (1L << (DEALLOCATE - 453)) | (1L << (CONNECTION - 453)) | (1L << (DECLARE - 453)) | (1L << (FAMILY - 453)) | (1L << (FORWARD - 453)) | (1L << (EXCLUSIVE - 453)) | (1L << (FUNCTIONS - 453)) | (1L << (LOCATION - 453)) | (1L << (LABEL - 453)) | (1L << (DELIMITERS - 453)) | (1L << (HANDLER - 453)) | (1L << (HEADER - 453)) | (1L << (IMMUTABLE - 453)) | (1L << (GRANTED - 453)) | (1L << (HOLD - 453)) | (1L << (MAPPING - 453)) | (1L << (OLD - 453)) | (1L << (METHOD - 453)) | (1L << (LOAD - 453)) | (1L << (LISTEN - 453)) | (1L << (MODE - 453)) | (1L << (MOVE - 453)) | (1L << (PROCEDURAL - 453)) | (1L << (PARSER - 453)) | (1L << (PROCEDURES - 453)) | (1L << (ENCRYPTED - 453)) | (1L << (PUBLICATION - 453)) | (1L << (PROGRAM - 453)) | (1L << (REFERENCING - 453)) | (1L << (PLANS - 453)) | (1L << (REINDEX - 453)) | (1L << (PRIOR - 453)) | (1L << (PASSWORD - 453)) | (1L << (RELATIVE - 453)) | (1L << (QUOTE - 453)) | (1L << (ROUTINES - 453)) | (1L << (REPLACE - 453)) | (1L << (SNAPSHOT - 453)) | (1L << (REFRESH - 453)) | (1L << (PREPARE - 453)) | (1L << (OPTIONS - 453)) | (1L << (IMPORT - 453)) | (1L << (INVOKER - 453)) | (1L << (NEW - 453)) | (1L << (PREPARED - 453)) | (1L << (SCROLL - 453)) | (1L << (SEQUENCES - 453)) | (1L << (SYSID - 453)) | (1L << (REASSIGN - 453)) | (1L << (SERVER - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (SUBSCRIPTION - 517)) | (1L << (SEARCH - 517)) | (1L << (SCHEMAS - 517)) | (1L << (RECHECK - 517)) | (1L << (POLICY - 517)) | (1L << (NOTIFY - 517)) | (1L << (LOCK - 517)) | (1L << (RELEASE - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (RETURNS - 517)) | (1L << (STATEMENT - 517)) | (1L << (STDIN - 517)) | (1L << (STDOUT - 517)) | (1L << (TABLES - 517)) | (1L << (SUPPORT - 517)) | (1L << (STABLE - 517)) | (1L << (TEMPLATE - 517)) | (1L << (UNENCRYPTED - 517)) | (1L << (VIEWS - 517)) | (1L << (UNCOMMITTED - 517)) | (1L << (TRANSFORM - 517)) | (1L << (UNLISTEN - 517)) | (1L << (TRUSTED - 517)) | (1L << (VALIDATOR - 517)) | (1L << (UNTIL - 517)) | (1L << (VACUUM - 517)) | (1L << (VOLATILE - 517)) | (1L << (STORED - 517)) | (1L << (WRITE - 517)) | (1L << (STRICT - 517)) | (1L << (TYPES - 517)) | (1L << (WRAPPER - 517)) | (1L << (WORK - 517)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeFuncNameKeywordContext extends ParserRuleContext {
		public TerminalNode AUTHORIZATION() { return getToken(DDLStatementParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(DDLStatementParser.BINARY, 0); }
		public TerminalNode COLLATION() { return getToken(DDLStatementParser.COLLATION, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(DDLStatementParser.CONCURRENTLY, 0); }
		public TerminalNode CROSS() { return getToken(DDLStatementParser.CROSS, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(DDLStatementParser.CURRENT_SCHEMA, 0); }
		public TerminalNode FREEZE() { return getToken(DDLStatementParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(DDLStatementParser.FULL, 0); }
		public TerminalNode ILIKE() { return getToken(DDLStatementParser.ILIKE, 0); }
		public TerminalNode INNER() { return getToken(DDLStatementParser.INNER, 0); }
		public TerminalNode IS() { return getToken(DDLStatementParser.IS, 0); }
		public TerminalNode ISNULL() { return getToken(DDLStatementParser.ISNULL, 0); }
		public TerminalNode JOIN() { return getToken(DDLStatementParser.JOIN, 0); }
		public TerminalNode LEFT() { return getToken(DDLStatementParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(DDLStatementParser.LIKE, 0); }
		public TerminalNode NATURAL() { return getToken(DDLStatementParser.NATURAL, 0); }
		public TerminalNode NOTNULL() { return getToken(DDLStatementParser.NOTNULL, 0); }
		public TerminalNode OUTER() { return getToken(DDLStatementParser.OUTER, 0); }
		public TerminalNode OVERLAPS() { return getToken(DDLStatementParser.OVERLAPS, 0); }
		public TerminalNode RIGHT() { return getToken(DDLStatementParser.RIGHT, 0); }
		public TerminalNode SIMILAR() { return getToken(DDLStatementParser.SIMILAR, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(DDLStatementParser.TABLESAMPLE, 0); }
		public TerminalNode VERBOSE() { return getToken(DDLStatementParser.VERBOSE, 0); }
		public TypeFuncNameKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeFuncNameKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTypeFuncNameKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTypeFuncNameKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTypeFuncNameKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeFuncNameKeywordContext typeFuncNameKeyword() throws RecognitionException {
		TypeFuncNameKeywordContext _localctx = new TypeFuncNameKeywordContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_typeFuncNameKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5646);
			_la = _input.LA(1);
			if ( !(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (NATURAL - 100)) | (1L << (JOIN - 100)) | (1L << (FULL - 100)) | (1L << (INNER - 100)) | (1L << (OUTER - 100)) | (1L << (LEFT - 100)) | (1L << (RIGHT - 100)) | (1L << (CROSS - 100)) | (1L << (IS - 100)) | (1L << (LIKE - 100)))) != 0) || ((((_la - 179)) & ~0x3f) == 0 && ((1L << (_la - 179)) & ((1L << (COLLATION - 179)) | (1L << (OVERLAPS - 179)) | (1L << (BINARY - 179)))) != 0) || _la==CONCURRENTLY || ((((_la - 365)) & ~0x3f) == 0 && ((1L << (_la - 365)) & ((1L << (TABLESAMPLE - 365)) | (1L << (CURRENT_SCHEMA - 365)) | (1L << (ILIKE - 365)) | (1L << (SIMILAR - 365)) | (1L << (ISNULL - 365)) | (1L << (NOTNULL - 365)))) != 0) || ((((_la - 550)) & ~0x3f) == 0 && ((1L << (_la - 550)) & ((1L << (FREEZE - 550)) | (1L << (AUTHORIZATION - 550)) | (1L << (VERBOSE - 550)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5648);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DDLStatementParser.DOT_, 0); }
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5653);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
			case 1:
				{
				setState(5650);
				owner();
				setState(5651);
				match(DOT_);
				}
				break;
			}
			setState(5655);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DDLStatementParser.DOT_, 0); }
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_columnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5660);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				setState(5657);
				owner();
				setState(5658);
				match(DOT_);
				}
				break;
			}
			setState(5662);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOwner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerContext owner() throws RecognitionException {
		OwnerContext _localctx = new OwnerContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_owner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5664);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5666);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNamesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TableNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNamesContext tableNames() throws RecognitionException {
		TableNamesContext _localctx = new TableNamesContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_tableNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5669);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(5668);
				match(LP_);
				}
			}

			setState(5671);
			tableName();
			setState(5676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5672);
				match(COMMA_);
				setState(5673);
				tableName();
				}
				}
				setState(5678);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5680);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RP_) {
				{
				setState(5679);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNamesContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public ColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNamesContext columnNames() throws RecognitionException {
		ColumnNamesContext _localctx = new ColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_columnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5682);
			match(LP_);
			setState(5683);
			columnName();
			setState(5688);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5684);
				match(COMMA_);
				setState(5685);
				columnName();
				}
				}
				setState(5690);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5691);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_collationName);
		try {
			setState(5695);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(5693);
				match(STRING_);
				}
				break;
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(5694);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5697);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5699);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrimaryKeyContext extends ParserRuleContext {
		public TerminalNode KEY() { return getToken(DDLStatementParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(DDLStatementParser.PRIMARY, 0); }
		public PrimaryKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryKeyContext primaryKey() throws RecognitionException {
		PrimaryKeyContext _localctx = new PrimaryKeyContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_primaryKey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIMARY) {
				{
				setState(5701);
				match(PRIMARY);
				}
			}

			setState(5704);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode OR_() { return getToken(DDLStatementParser.OR_, 0); }
		public TerminalNode AND() { return getToken(DDLStatementParser.AND, 0); }
		public TerminalNode AND_() { return getToken(DDLStatementParser.AND_, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_logicalOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5706);
			_la = _input.LA(1);
			if ( !(_la==AND_ || _la==OR_ || _la==AND || _la==OR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public TerminalNode GTE_() { return getToken(DDLStatementParser.GTE_, 0); }
		public TerminalNode GT_() { return getToken(DDLStatementParser.GT_, 0); }
		public TerminalNode LTE_() { return getToken(DDLStatementParser.LTE_, 0); }
		public TerminalNode LT_() { return getToken(DDLStatementParser.LT_, 0); }
		public TerminalNode NEQ_() { return getToken(DDLStatementParser.NEQ_, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5708);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PatternMatchingOperatorContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(DDLStatementParser.LIKE, 0); }
		public TerminalNode TILDE_TILDE_() { return getToken(DDLStatementParser.TILDE_TILDE_, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode NOT_TILDE_TILDE_() { return getToken(DDLStatementParser.NOT_TILDE_TILDE_, 0); }
		public TerminalNode ILIKE() { return getToken(DDLStatementParser.ILIKE, 0); }
		public TerminalNode ILIKE_() { return getToken(DDLStatementParser.ILIKE_, 0); }
		public TerminalNode NOT_ILIKE_() { return getToken(DDLStatementParser.NOT_ILIKE_, 0); }
		public TerminalNode SIMILAR() { return getToken(DDLStatementParser.SIMILAR, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode TILDE_() { return getToken(DDLStatementParser.TILDE_, 0); }
		public TerminalNode NOT_() { return getToken(DDLStatementParser.NOT_, 0); }
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public PatternMatchingOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_patternMatchingOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPatternMatchingOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPatternMatchingOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPatternMatchingOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PatternMatchingOperatorContext patternMatchingOperator() throws RecognitionException {
		PatternMatchingOperatorContext _localctx = new PatternMatchingOperatorContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_patternMatchingOperator);
		try {
			setState(5733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5710);
				match(LIKE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5711);
				match(TILDE_TILDE_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5712);
				match(NOT);
				setState(5713);
				match(LIKE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5714);
				match(NOT_TILDE_TILDE_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5715);
				match(ILIKE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5716);
				match(ILIKE_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5717);
				match(NOT);
				setState(5718);
				match(ILIKE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5719);
				match(NOT_ILIKE_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5720);
				match(SIMILAR);
				setState(5721);
				match(TO);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5722);
				match(NOT);
				setState(5723);
				match(SIMILAR);
				setState(5724);
				match(TO);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5725);
				match(TILDE_);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5726);
				match(NOT_);
				setState(5727);
				match(TILDE_);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5728);
				match(TILDE_);
				setState(5729);
				match(ASTERISK_);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5730);
				match(NOT_);
				setState(5731);
				match(TILDE_);
				setState(5732);
				match(ASTERISK_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CursorNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCursorName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCursorName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCursorName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorNameContext cursorName() throws RecognitionException {
		CursorNameContext _localctx = new CursorNameContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_cursorName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5735);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AExprContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public TerminalNode PLUS_() { return getToken(DDLStatementParser.PLUS_, 0); }
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public TerminalNode MINUS_() { return getToken(DDLStatementParser.MINUS_, 0); }
		public QualOpContext qualOp() {
			return getRuleContext(QualOpContext.class,0);
		}
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public List<RowContext> row() {
			return getRuleContexts(RowContext.class);
		}
		public RowContext row(int i) {
			return getRuleContext(RowContext.class,i);
		}
		public TerminalNode OVERLAPS() { return getToken(DDLStatementParser.OVERLAPS, 0); }
		public TerminalNode UNIQUE() { return getToken(DDLStatementParser.UNIQUE, 0); }
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode AT() { return getToken(DDLStatementParser.AT, 0); }
		public TerminalNode TIME() { return getToken(DDLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(DDLStatementParser.ZONE, 0); }
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TerminalNode SLASH_() { return getToken(DDLStatementParser.SLASH_, 0); }
		public TerminalNode MOD_() { return getToken(DDLStatementParser.MOD_, 0); }
		public TerminalNode CARET_() { return getToken(DDLStatementParser.CARET_, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public PatternMatchingOperatorContext patternMatchingOperator() {
			return getRuleContext(PatternMatchingOperatorContext.class,0);
		}
		public TerminalNode ESCAPE() { return getToken(DDLStatementParser.ESCAPE, 0); }
		public TerminalNode IS() { return getToken(DDLStatementParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(DDLStatementParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode BETWEEN() { return getToken(DDLStatementParser.BETWEEN, 0); }
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode AND() { return getToken(DDLStatementParser.AND, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(DDLStatementParser.ASYMMETRIC, 0); }
		public TerminalNode SYMMETRIC() { return getToken(DDLStatementParser.SYMMETRIC, 0); }
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public TerminalNode TYPE_CAST_() { return getToken(DDLStatementParser.TYPE_CAST_, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(DDLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode ISNULL() { return getToken(DDLStatementParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(DDLStatementParser.NOTNULL, 0); }
		public TerminalNode TRUE() { return getToken(DDLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(DDLStatementParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(DDLStatementParser.UNKNOWN, 0); }
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public InExprContext inExpr() {
			return getRuleContext(InExprContext.class,0);
		}
		public SubqueryOpContext subqueryOp() {
			return getRuleContext(SubqueryOpContext.class,0);
		}
		public SubTypeContext subType() {
			return getRuleContext(SubTypeContext.class,0);
		}
		public TerminalNode DOCUMENT() { return getToken(DDLStatementParser.DOCUMENT, 0); }
		public TerminalNode NORMALIZED() { return getToken(DDLStatementParser.NORMALIZED, 0); }
		public UnicodeNormalFormContext unicodeNormalForm() {
			return getRuleContext(UnicodeNormalFormContext.class,0);
		}
		public AExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AExprContext aExpr() throws RecognitionException {
		return aExpr(0);
	}

	private AExprContext aExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AExprContext _localctx = new AExprContext(_ctx, _parentState);
		AExprContext _prevctx = _localctx;
		int _startState = 760;
		enterRecursionRule(_localctx, 760, RULE_aExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5755);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
			case 1:
				{
				setState(5738);
				cExpr();
				}
				break;
			case 2:
				{
				setState(5739);
				match(PLUS_);
				setState(5740);
				aExpr(47);
				}
				break;
			case 3:
				{
				setState(5741);
				match(MINUS_);
				setState(5742);
				aExpr(46);
				}
				break;
			case 4:
				{
				setState(5743);
				qualOp();
				setState(5744);
				aExpr(38);
				}
				break;
			case 5:
				{
				setState(5746);
				match(NOT);
				setState(5747);
				aExpr(35);
				}
				break;
			case 6:
				{
				setState(5748);
				row();
				setState(5749);
				match(OVERLAPS);
				setState(5750);
				row();
				}
				break;
			case 7:
				{
				setState(5752);
				match(UNIQUE);
				setState(5753);
				selectWithParens();
				}
				break;
			case 8:
				{
				setState(5754);
				match(DEFAULT);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5948);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,539,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5946);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
					case 1:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5757);
						if (!(precpred(_ctx, 48))) throw new FailedPredicateException(this, "precpred(_ctx, 48)");
						setState(5758);
						match(AT);
						setState(5759);
						match(TIME);
						setState(5760);
						match(ZONE);
						setState(5761);
						aExpr(49);
						}
						break;
					case 2:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5762);
						if (!(precpred(_ctx, 45))) throw new FailedPredicateException(this, "precpred(_ctx, 45)");
						setState(5763);
						match(PLUS_);
						setState(5764);
						aExpr(46);
						}
						break;
					case 3:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5765);
						if (!(precpred(_ctx, 44))) throw new FailedPredicateException(this, "precpred(_ctx, 44)");
						setState(5766);
						match(MINUS_);
						setState(5767);
						aExpr(45);
						}
						break;
					case 4:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5768);
						if (!(precpred(_ctx, 43))) throw new FailedPredicateException(this, "precpred(_ctx, 43)");
						setState(5769);
						match(ASTERISK_);
						setState(5770);
						aExpr(44);
						}
						break;
					case 5:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5771);
						if (!(precpred(_ctx, 42))) throw new FailedPredicateException(this, "precpred(_ctx, 42)");
						setState(5772);
						match(SLASH_);
						setState(5773);
						aExpr(43);
						}
						break;
					case 6:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5774);
						if (!(precpred(_ctx, 41))) throw new FailedPredicateException(this, "precpred(_ctx, 41)");
						setState(5775);
						match(MOD_);
						setState(5776);
						aExpr(42);
						}
						break;
					case 7:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5777);
						if (!(precpred(_ctx, 40))) throw new FailedPredicateException(this, "precpred(_ctx, 40)");
						setState(5778);
						match(CARET_);
						setState(5779);
						aExpr(41);
						}
						break;
					case 8:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5780);
						if (!(precpred(_ctx, 39))) throw new FailedPredicateException(this, "precpred(_ctx, 39)");
						setState(5781);
						qualOp();
						setState(5782);
						aExpr(40);
						}
						break;
					case 9:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5784);
						if (!(precpred(_ctx, 36))) throw new FailedPredicateException(this, "precpred(_ctx, 36)");
						setState(5785);
						comparisonOperator();
						setState(5786);
						aExpr(37);
						}
						break;
					case 10:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5788);
						if (!(precpred(_ctx, 34))) throw new FailedPredicateException(this, "precpred(_ctx, 34)");
						setState(5789);
						patternMatchingOperator();
						setState(5790);
						aExpr(35);
						}
						break;
					case 11:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5792);
						if (!(precpred(_ctx, 33))) throw new FailedPredicateException(this, "precpred(_ctx, 33)");
						setState(5793);
						patternMatchingOperator();
						setState(5794);
						aExpr(0);
						setState(5795);
						match(ESCAPE);
						setState(5796);
						aExpr(34);
						}
						break;
					case 12:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5798);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(5799);
						match(IS);
						setState(5800);
						match(DISTINCT);
						setState(5801);
						match(FROM);
						setState(5802);
						aExpr(22);
						}
						break;
					case 13:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5803);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(5804);
						match(IS);
						setState(5805);
						match(NOT);
						setState(5806);
						match(DISTINCT);
						setState(5807);
						match(FROM);
						setState(5808);
						aExpr(21);
						}
						break;
					case 14:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5809);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(5810);
						match(BETWEEN);
						setState(5812);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ASYMMETRIC) {
							{
							setState(5811);
							match(ASYMMETRIC);
							}
						}

						setState(5814);
						bExpr(0);
						setState(5815);
						match(AND);
						setState(5816);
						aExpr(18);
						}
						break;
					case 15:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5818);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(5819);
						match(NOT);
						setState(5820);
						match(BETWEEN);
						setState(5822);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ASYMMETRIC) {
							{
							setState(5821);
							match(ASYMMETRIC);
							}
						}

						setState(5824);
						bExpr(0);
						setState(5825);
						match(AND);
						setState(5826);
						aExpr(17);
						}
						break;
					case 16:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5828);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(5829);
						match(BETWEEN);
						setState(5830);
						match(SYMMETRIC);
						setState(5831);
						bExpr(0);
						setState(5832);
						match(AND);
						setState(5833);
						aExpr(16);
						}
						break;
					case 17:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5835);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(5836);
						match(NOT);
						setState(5837);
						match(BETWEEN);
						setState(5838);
						match(SYMMETRIC);
						setState(5839);
						bExpr(0);
						setState(5840);
						match(AND);
						setState(5841);
						aExpr(15);
						}
						break;
					case 18:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5843);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5844);
						logicalOperator();
						setState(5845);
						aExpr(3);
						}
						break;
					case 19:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5847);
						if (!(precpred(_ctx, 50))) throw new FailedPredicateException(this, "precpred(_ctx, 50)");
						setState(5848);
						match(TYPE_CAST_);
						setState(5849);
						typeName();
						}
						break;
					case 20:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5850);
						if (!(precpred(_ctx, 49))) throw new FailedPredicateException(this, "precpred(_ctx, 49)");
						setState(5851);
						match(COLLATE);
						setState(5852);
						anyName();
						}
						break;
					case 21:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5853);
						if (!(precpred(_ctx, 37))) throw new FailedPredicateException(this, "precpred(_ctx, 37)");
						setState(5854);
						qualOp();
						}
						break;
					case 22:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5855);
						if (!(precpred(_ctx, 32))) throw new FailedPredicateException(this, "precpred(_ctx, 32)");
						setState(5856);
						match(IS);
						setState(5857);
						match(NULL);
						}
						break;
					case 23:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5858);
						if (!(precpred(_ctx, 31))) throw new FailedPredicateException(this, "precpred(_ctx, 31)");
						setState(5859);
						match(ISNULL);
						}
						break;
					case 24:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5860);
						if (!(precpred(_ctx, 30))) throw new FailedPredicateException(this, "precpred(_ctx, 30)");
						setState(5861);
						match(IS);
						setState(5862);
						match(NOT);
						setState(5863);
						match(NULL);
						}
						break;
					case 25:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5864);
						if (!(precpred(_ctx, 29))) throw new FailedPredicateException(this, "precpred(_ctx, 29)");
						setState(5865);
						match(NOTNULL);
						}
						break;
					case 26:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5866);
						if (!(precpred(_ctx, 27))) throw new FailedPredicateException(this, "precpred(_ctx, 27)");
						setState(5867);
						match(IS);
						setState(5868);
						match(TRUE);
						}
						break;
					case 27:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5869);
						if (!(precpred(_ctx, 26))) throw new FailedPredicateException(this, "precpred(_ctx, 26)");
						setState(5870);
						match(IS);
						setState(5871);
						match(NOT);
						setState(5872);
						match(TRUE);
						}
						break;
					case 28:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5873);
						if (!(precpred(_ctx, 25))) throw new FailedPredicateException(this, "precpred(_ctx, 25)");
						setState(5874);
						match(IS);
						setState(5875);
						match(FALSE);
						}
						break;
					case 29:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5876);
						if (!(precpred(_ctx, 24))) throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						setState(5877);
						match(IS);
						setState(5878);
						match(NOT);
						setState(5879);
						match(FALSE);
						}
						break;
					case 30:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5880);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(5881);
						match(IS);
						setState(5882);
						match(UNKNOWN);
						}
						break;
					case 31:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5883);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(5884);
						match(IS);
						setState(5885);
						match(NOT);
						setState(5886);
						match(UNKNOWN);
						}
						break;
					case 32:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5887);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(5888);
						match(IS);
						setState(5889);
						match(OF);
						setState(5890);
						match(LP_);
						setState(5891);
						typeList();
						setState(5892);
						match(RP_);
						}
						break;
					case 33:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5894);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(5895);
						match(IS);
						setState(5896);
						match(NOT);
						setState(5897);
						match(OF);
						setState(5898);
						match(LP_);
						setState(5899);
						typeList();
						setState(5900);
						match(RP_);
						}
						break;
					case 34:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5902);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(5903);
						match(IN);
						setState(5904);
						inExpr();
						}
						break;
					case 35:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5905);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(5906);
						match(NOT);
						setState(5907);
						match(IN);
						setState(5908);
						inExpr();
						}
						break;
					case 36:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5909);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(5910);
						subqueryOp();
						setState(5911);
						subType();
						setState(5912);
						selectWithParens();
						}
						break;
					case 37:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5914);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(5915);
						subqueryOp();
						setState(5916);
						subType();
						setState(5917);
						match(LP_);
						setState(5918);
						aExpr(0);
						setState(5919);
						match(RP_);
						}
						break;
					case 38:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5921);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(5922);
						match(IS);
						setState(5923);
						match(DOCUMENT);
						}
						break;
					case 39:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5924);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(5925);
						match(IS);
						setState(5926);
						match(NOT);
						setState(5927);
						match(DOCUMENT);
						}
						break;
					case 40:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5928);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(5929);
						match(IS);
						setState(5930);
						match(NORMALIZED);
						}
						break;
					case 41:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5931);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(5932);
						match(IS);
						setState(5933);
						unicodeNormalForm();
						setState(5934);
						match(NORMALIZED);
						}
						break;
					case 42:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5936);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(5937);
						match(IS);
						setState(5938);
						match(NOT);
						setState(5939);
						match(NORMALIZED);
						}
						break;
					case 43:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5940);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5941);
						match(IS);
						setState(5942);
						match(NOT);
						setState(5943);
						unicodeNormalForm();
						setState(5944);
						match(NORMALIZED);
						}
						break;
					}
					} 
				}
				setState(5950);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,539,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class BExprContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public TerminalNode PLUS_() { return getToken(DDLStatementParser.PLUS_, 0); }
		public List<BExprContext> bExpr() {
			return getRuleContexts(BExprContext.class);
		}
		public BExprContext bExpr(int i) {
			return getRuleContext(BExprContext.class,i);
		}
		public TerminalNode MINUS_() { return getToken(DDLStatementParser.MINUS_, 0); }
		public QualOpContext qualOp() {
			return getRuleContext(QualOpContext.class,0);
		}
		public TerminalNode IS() { return getToken(DDLStatementParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(DDLStatementParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode TYPE_CAST_() { return getToken(DDLStatementParser.TYPE_CAST_, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode DOCUMENT() { return getToken(DDLStatementParser.DOCUMENT, 0); }
		public BExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterBExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitBExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitBExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BExprContext bExpr() throws RecognitionException {
		return bExpr(0);
	}

	private BExprContext bExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BExprContext _localctx = new BExprContext(_ctx, _parentState);
		BExprContext _prevctx = _localctx;
		int _startState = 762;
		enterRecursionRule(_localctx, 762, RULE_bExpr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5960);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
			case 1:
				{
				setState(5952);
				cExpr();
				}
				break;
			case 2:
				{
				setState(5953);
				match(PLUS_);
				setState(5954);
				bExpr(11);
				}
				break;
			case 3:
				{
				setState(5955);
				match(MINUS_);
				setState(5956);
				bExpr(10);
				}
				break;
			case 4:
				{
				setState(5957);
				qualOp();
				setState(5958);
				bExpr(8);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6006);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,542,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6004);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
					case 1:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(5962);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(5963);
						qualOp();
						setState(5964);
						bExpr(10);
						}
						break;
					case 2:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(5966);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(5967);
						match(IS);
						setState(5968);
						match(DISTINCT);
						setState(5969);
						match(FROM);
						setState(5970);
						bExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(5971);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(5972);
						match(IS);
						setState(5973);
						match(NOT);
						setState(5974);
						match(DISTINCT);
						setState(5975);
						match(FROM);
						setState(5976);
						bExpr(6);
						}
						break;
					case 4:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(5977);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(5978);
						match(TYPE_CAST_);
						setState(5979);
						typeName();
						}
						break;
					case 5:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(5980);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(5981);
						qualOp();
						}
						break;
					case 6:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(5982);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(5983);
						match(IS);
						setState(5984);
						match(OF);
						setState(5985);
						match(LP_);
						setState(5986);
						typeList();
						setState(5987);
						match(RP_);
						}
						break;
					case 7:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(5989);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5990);
						match(IS);
						setState(5991);
						match(NOT);
						setState(5992);
						match(OF);
						setState(5993);
						match(LP_);
						setState(5994);
						typeList();
						setState(5995);
						match(RP_);
						}
						break;
					case 8:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(5997);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5998);
						match(IS);
						setState(5999);
						match(DOCUMENT);
						}
						break;
					case 9:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(6000);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6001);
						match(IS);
						setState(6002);
						match(NOT);
						setState(6003);
						match(DOCUMENT);
						}
						break;
					}
					} 
				}
				setState(6008);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,542,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CExprContext extends ParserRuleContext {
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public ColumnrefContext columnref() {
			return getRuleContext(ColumnrefContext.class,0);
		}
		public AexprConstContext aexprConst() {
			return getRuleContext(AexprConstContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(DDLStatementParser.PARAM, 0); }
		public IndirectionElContext indirectionEl() {
			return getRuleContext(IndirectionElContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public CaseExprContext caseExpr() {
			return getRuleContext(CaseExprContext.class,0);
		}
		public FuncExprContext funcExpr() {
			return getRuleContext(FuncExprContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public TerminalNode ARRAY() { return getToken(DDLStatementParser.ARRAY, 0); }
		public ArrayExprContext arrayExpr() {
			return getRuleContext(ArrayExprContext.class,0);
		}
		public ExplicitRowContext explicitRow() {
			return getRuleContext(ExplicitRowContext.class,0);
		}
		public ImplicitRowContext implicitRow() {
			return getRuleContext(ImplicitRowContext.class,0);
		}
		public TerminalNode GROUPING() { return getToken(DDLStatementParser.GROUPING, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public CExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CExprContext cExpr() throws RecognitionException {
		CExprContext _localctx = new CExprContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_cExpr);
		try {
			setState(6040);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6009);
				parameterMarker();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6010);
				columnref();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6011);
				aexprConst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6012);
				match(PARAM);
				setState(6014);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
				case 1:
					{
					setState(6013);
					indirectionEl();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6016);
				match(LP_);
				setState(6017);
				aExpr(0);
				setState(6018);
				match(RP_);
				setState(6019);
				optIndirection(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6021);
				caseExpr();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6022);
				funcExpr();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6023);
				selectWithParens();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6024);
				selectWithParens();
				setState(6025);
				indirection(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6027);
				match(EXISTS);
				setState(6028);
				selectWithParens();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6029);
				match(ARRAY);
				setState(6030);
				selectWithParens();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6031);
				match(ARRAY);
				setState(6032);
				arrayExpr();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6033);
				explicitRow();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6034);
				implicitRow();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6035);
				match(GROUPING);
				setState(6036);
				match(LP_);
				setState(6037);
				exprList(0);
				setState(6038);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectionContext extends ParserRuleContext {
		public IndirectionElContext indirectionEl() {
			return getRuleContext(IndirectionElContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionContext indirection() throws RecognitionException {
		return indirection(0);
	}

	private IndirectionContext indirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		IndirectionContext _localctx = new IndirectionContext(_ctx, _parentState);
		IndirectionContext _prevctx = _localctx;
		int _startState = 766;
		enterRecursionRule(_localctx, 766, RULE_indirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6043);
			indirectionEl();
			}
			_ctx.stop = _input.LT(-1);
			setState(6049);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,545,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IndirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_indirection);
					setState(6045);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6046);
					indirectionEl();
					}
					} 
				}
				setState(6051);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,545,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class OptIndirectionContext extends ParserRuleContext {
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public IndirectionElContext indirectionEl() {
			return getRuleContext(IndirectionElContext.class,0);
		}
		public OptIndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optIndirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptIndirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptIndirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptIndirectionContext optIndirection() throws RecognitionException {
		return optIndirection(0);
	}

	private OptIndirectionContext optIndirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptIndirectionContext _localctx = new OptIndirectionContext(_ctx, _parentState);
		OptIndirectionContext _prevctx = _localctx;
		int _startState = 768;
		enterRecursionRule(_localctx, 768, RULE_optIndirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(6057);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,546,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptIndirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_optIndirection);
					setState(6053);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6054);
					indirectionEl();
					}
					} 
				}
				setState(6059);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,546,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class IndirectionElContext extends ParserRuleContext {
		public TerminalNode DOT_() { return getToken(DDLStatementParser.DOT_, 0); }
		public AttrNameContext attrName() {
			return getRuleContext(AttrNameContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TerminalNode LBT_() { return getToken(DDLStatementParser.LBT_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RBT_() { return getToken(DDLStatementParser.RBT_, 0); }
		public TerminalNode COLON_() { return getToken(DDLStatementParser.COLON_, 0); }
		public List<SliceBoundContext> sliceBound() {
			return getRuleContexts(SliceBoundContext.class);
		}
		public SliceBoundContext sliceBound(int i) {
			return getRuleContext(SliceBoundContext.class,i);
		}
		public IndirectionElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirectionEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndirectionEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndirectionEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndirectionEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionElContext indirectionEl() throws RecognitionException {
		IndirectionElContext _localctx = new IndirectionElContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_indirectionEl);
		int _la;
		try {
			setState(6077);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6060);
				match(DOT_);
				setState(6061);
				attrName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6062);
				match(DOT_);
				setState(6063);
				match(ASTERISK_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6064);
				match(LBT_);
				setState(6065);
				aExpr(0);
				setState(6066);
				match(RBT_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6068);
				match(LBT_);
				setState(6070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << OR_) | (1L << PLUS_) | (1L << MINUS_) | (1L << LP_) | (1L << QUESTION_) | (1L << JSON_EXTRACT_) | (1L << JSON_EXTRACT_TEXT_) | (1L << JSON_PATH_EXTRACT_) | (1L << JSON_PATH_EXTRACT_TEXT_) | (1L << JSONB_CONTAIN_RIGHT_) | (1L << JSONB_CONTAIN_LEFT_) | (1L << JSONB_CONTAIN_ALL_TOP_KEY_) | (1L << JSONB_PATH_DELETE_) | (1L << JSONB_PATH_CONTAIN_ANY_VALUE_) | (1L << JSONB_PATH_PREDICATE_CHECK_) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (UNIQUE - 64)) | (1L << (KEY - 64)) | (1L << (POSITION - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (TRIM - 64)) | (1L << (SUBSTRING - 64)) | (1L << (NATURAL - 64)) | (1L << (JOIN - 64)) | (1L << (FULL - 64)) | (1L << (INNER - 64)) | (1L << (OUTER - 64)) | (1L << (LEFT - 64)) | (1L << (RIGHT - 64)) | (1L << (CROSS - 64)) | (1L << (IF - 64)) | (1L << (IS - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (TRUE - 64)) | (1L << (FALSE - 64)) | (1L << (EXISTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (LIKE - 129)) | (1L << (BY - 129)) | (1L << (BEGIN - 129)) | (1L << (COMMIT - 129)) | (1L << (ROLLBACK - 129)) | (1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (ARRAY - 129)) | (1L << (LOCALTIME - 129)) | (1L << (LOCALTIMESTAMP - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (DEFAULT - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (CURRENT_USER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (COLLATION - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (CURRENT_DATE - 129)) | (1L << (CURRENT_TIME - 129)) | (1L << (CURRENT_TIMESTAMP - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (NULLIF - 193)) | (1L << (VARYING - 193)) | (1L << (VALUE - 193)) | (1L << (COALESCE - 193)) | (1L << (TIES - 193)) | (1L << (CUBE - 193)) | (1L << (GROUPING - 193)) | (1L << (SETS - 193)) | (1L << (OTHERS - 193)) | (1L << (OVERLAPS - 193)) | (1L << (AT - 193)) | (1L << (ADMIN - 193)) | (1L << (BINARY - 193)) | (1L << (ESCAPE - 193)) | (1L << (EXCLUDE - 193)) | (1L << (PARTITION - 193)) | (1L << (ROW - 193)) | (1L << (UNKNOWN - 193)) | (1L << (ALWAYS - 193)) | (1L << (CASCADE - 193)) | (1L << (GENERATED - 193)) | (1L << (ISOLATION - 193)) | (1L << (LEVEL - 193)) | (1L << (NO - 193)) | (1L << (OPTION - 193)) | (1L << (PRIVILEGES - 193)) | (1L << (READ - 193)) | (1L << (ROLE - 193)) | (1L << (ROWS - 193)) | (1L << (START - 193)) | (1L << (TRANSACTION - 193)) | (1L << (USER - 193)) | (1L << (ACTION - 193)) | (1L << (CACHE - 193)) | (1L << (CHARACTERISTICS - 193)) | (1L << (CLUSTER - 193)) | (1L << (COMMENTS - 193)) | (1L << (CONCURRENTLY - 193)) | (1L << (CONSTRAINTS - 193)) | (1L << (CYCLE - 193)) | (1L << (DATA - 193)) | (1L << (DATABASE - 193)) | (1L << (DEFAULTS - 193)) | (1L << (DEFERRED - 193)) | (1L << (DEPENDS - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (DOMAIN - 257)) | (1L << (EXCLUDING - 257)) | (1L << (EXECUTE - 257)) | (1L << (EXTENSION - 257)) | (1L << (EXTERNAL - 257)) | (1L << (EXTRACT - 257)) | (1L << (FILTER - 257)) | (1L << (FIRST - 257)) | (1L << (FOLLOWING - 257)) | (1L << (FORCE - 257)) | (1L << (GLOBAL - 257)) | (1L << (IDENTITY - 257)) | (1L << (IMMEDIATE - 257)) | (1L << (INCLUDING - 257)) | (1L << (INCREMENT - 257)) | (1L << (INDEXES - 257)) | (1L << (INHERIT - 257)) | (1L << (INHERITS - 257)) | (1L << (INCLUDE - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LARGE - 257)) | (1L << (LAST - 257)) | (1L << (LOGGED - 257)) | (1L << (MATCH - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MINVALUE - 257)) | (1L << (NOTHING - 257)) | (1L << (NULLS - 257)) | (1L << (OBJECT - 257)) | (1L << (OIDS - 257)) | (1L << (OVER - 257)) | (1L << (OWNED - 257)) | (1L << (OWNER - 257)) | (1L << (PARTIAL - 257)) | (1L << (PRECEDING - 257)) | (1L << (RANGE - 257)) | (1L << (RENAME - 257)) | (1L << (REPLICA - 257)) | (1L << (RESET - 257)) | (1L << (RESTART - 257)) | (1L << (RESTRICT - 257)) | (1L << (ROUTINE - 257)) | (1L << (RULE - 257)) | (1L << (SECURITY - 257)) | (1L << (SEQUENCE - 257)) | (1L << (SESSION - 257)) | (1L << (SESSION_USER - 257)) | (1L << (SHOW - 257)) | (1L << (SIMPLE - 257)) | (1L << (STATISTICS - 257)) | (1L << (STORAGE - 257)) | (1L << (TABLESPACE - 257)) | (1L << (TEMP - 257)) | (1L << (TEMPORARY - 257)) | (1L << (UNBOUNDED - 257)) | (1L << (UNLOGGED - 257)) | (1L << (VALID - 257)) | (1L << (VALIDATE - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (WITHIN - 321)) | (1L << (WITHOUT - 321)) | (1L << (ZONE - 321)) | (1L << (OF - 321)) | (1L << (UESCAPE - 321)) | (1L << (GROUPS - 321)) | (1L << (RECURSIVE - 321)) | (1L << (ENUM - 321)) | (1L << (XML - 321)) | (1L << (JSON - 321)) | (1L << (TABLESAMPLE - 321)) | (1L << (ORDINALITY - 321)) | (1L << (CURRENT_ROLE - 321)) | (1L << (CURRENT_CATALOG - 321)) | (1L << (CURRENT_SCHEMA - 321)) | (1L << (NORMALIZE - 321)) | (1L << (OVERLAY - 321)) | (1L << (XMLCONCAT - 321)) | (1L << (XMLELEMENT - 321)) | (1L << (XMLEXISTS - 321)) | (1L << (XMLFOREST - 321)) | (1L << (XMLPARSE - 321)) | (1L << (XMLPI - 321)) | (1L << (XMLROOT - 321)) | (1L << (XMLSERIALIZE - 321)) | (1L << (TREAT - 321)) | (1L << (NFC - 321)) | (1L << (NFD - 321)) | (1L << (NFKC - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (NFKD - 385)) | (1L << (REF - 385)) | (1L << (PASSING - 385)) | (1L << (VERSION - 385)) | (1L << (YES - 385)) | (1L << (STANDALONE - 385)) | (1L << (GREATEST - 385)) | (1L << (LEAST - 385)) | (1L << (MATERIALIZED - 385)) | (1L << (OPERATOR - 385)) | (1L << (SHARE - 385)) | (1L << (ROLLUP - 385)) | (1L << (ILIKE - 385)) | (1L << (SIMILAR - 385)) | (1L << (ISNULL - 385)) | (1L << (NOTNULL - 385)) | (1L << (DOCUMENT - 385)) | (1L << (NORMALIZED - 385)) | (1L << (NOWAIT - 385)) | (1L << (LOCKED - 385)) | (1L << (COLUMNS - 385)) | (1L << (CONTENT - 385)) | (1L << (STRIP - 385)) | (1L << (WHITESPACE - 385)) | (1L << (CONFLICT - 385)) | (1L << (OVERRIDING - 385)) | (1L << (SYSTEM - 385)) | (1L << (ABORT - 385)) | (1L << (ABSOLUTE - 385)) | (1L << (ACCESS - 385)) | (1L << (AFTER - 385)) | (1L << (AGGREGATE - 385)) | (1L << (ALSO - 385)) | (1L << (ATTACH - 385)) | (1L << (ATTRIBUTE - 385)) | (1L << (BACKWARD - 385)) | (1L << (BEFORE - 385)) | (1L << (ASSERTION - 385)) | (1L << (ASSIGNMENT - 385)) | (1L << (CONTINUE - 385)) | (1L << (CONVERSION - 385)) | (1L << (COPY - 385)) | (1L << (COST - 385)) | (1L << (CSV - 385)) | (1L << (CALLED - 385)) | (1L << (CATALOG - 385)) | (1L << (CHAIN - 385)) | (1L << (CHECKPOINT - 385)) | (1L << (CLASS - 385)) | (1L << (CONFIGURATION - 385)) | (1L << (COMMENT - 385)) | (1L << (DETACH - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (DICTIONARY - 449)) | (1L << (EXPRESSION - 449)) | (1L << (INSENSITIVE - 449)) | (1L << (DISCARD - 449)) | (1L << (OFF - 449)) | (1L << (INSTEAD - 449)) | (1L << (EXPLAIN - 449)) | (1L << (INPUT - 449)) | (1L << (INLINE - 449)) | (1L << (PARALLEL - 449)) | (1L << (LEAKPROOF - 449)) | (1L << (COMMITTED - 449)) | (1L << (ENCODING - 449)) | (1L << (IMPLICIT - 449)) | (1L << (DELIMITER - 449)) | (1L << (CURSOR - 449)) | (1L << (EACH - 449)) | (1L << (EVENT - 449)) | (1L << (DEALLOCATE - 449)) | (1L << (CONNECTION - 449)) | (1L << (DECLARE - 449)) | (1L << (FAMILY - 449)) | (1L << (FORWARD - 449)) | (1L << (EXCLUSIVE - 449)) | (1L << (FUNCTIONS - 449)) | (1L << (LOCATION - 449)) | (1L << (LABEL - 449)) | (1L << (DELIMITERS - 449)) | (1L << (HANDLER - 449)) | (1L << (HEADER - 449)) | (1L << (IMMUTABLE - 449)) | (1L << (GRANTED - 449)) | (1L << (HOLD - 449)) | (1L << (MAPPING - 449)) | (1L << (OLD - 449)) | (1L << (METHOD - 449)) | (1L << (LOAD - 449)) | (1L << (LISTEN - 449)) | (1L << (MODE - 449)) | (1L << (MOVE - 449)) | (1L << (PROCEDURAL - 449)) | (1L << (PARSER - 449)) | (1L << (PROCEDURES - 449)) | (1L << (ENCRYPTED - 449)) | (1L << (PUBLICATION - 449)) | (1L << (PROGRAM - 449)) | (1L << (REFERENCING - 449)) | (1L << (PLANS - 449)) | (1L << (REINDEX - 449)) | (1L << (PRIOR - 449)) | (1L << (PASSWORD - 449)) | (1L << (RELATIVE - 449)) | (1L << (QUOTE - 449)) | (1L << (ROUTINES - 449)) | (1L << (REPLACE - 449)) | (1L << (SNAPSHOT - 449)) | (1L << (REFRESH - 449)) | (1L << (PREPARE - 449)) | (1L << (OPTIONS - 449)) | (1L << (IMPORT - 449)) | (1L << (INVOKER - 449)) | (1L << (NEW - 449)) | (1L << (PREPARED - 449)) | (1L << (SCROLL - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SEQUENCES - 513)) | (1L << (SYSID - 513)) | (1L << (REASSIGN - 513)) | (1L << (SERVER - 513)) | (1L << (SUBSCRIPTION - 513)) | (1L << (SEARCH - 513)) | (1L << (SCHEMAS - 513)) | (1L << (RECHECK - 513)) | (1L << (POLICY - 513)) | (1L << (NOTIFY - 513)) | (1L << (LOCK - 513)) | (1L << (RELEASE - 513)) | (1L << (SERIALIZABLE - 513)) | (1L << (RETURNS - 513)) | (1L << (STATEMENT - 513)) | (1L << (STDIN - 513)) | (1L << (STDOUT - 513)) | (1L << (TABLES - 513)) | (1L << (SUPPORT - 513)) | (1L << (STABLE - 513)) | (1L << (TEMPLATE - 513)) | (1L << (UNENCRYPTED - 513)) | (1L << (VIEWS - 513)) | (1L << (UNCOMMITTED - 513)) | (1L << (TRANSFORM - 513)) | (1L << (UNLISTEN - 513)) | (1L << (TRUSTED - 513)) | (1L << (VALIDATOR - 513)) | (1L << (UNTIL - 513)) | (1L << (VACUUM - 513)) | (1L << (VOLATILE - 513)) | (1L << (STORED - 513)) | (1L << (WRITE - 513)) | (1L << (STRICT - 513)) | (1L << (TYPES - 513)) | (1L << (WRAPPER - 513)) | (1L << (WORK - 513)) | (1L << (FREEZE - 513)) | (1L << (AUTHORIZATION - 513)) | (1L << (VERBOSE - 513)) | (1L << (PARAM - 513)) | (1L << (IDENTIFIER_ - 513)) | (1L << (STRING_ - 513)) | (1L << (NUMBER_ - 513)))) != 0)) {
					{
					setState(6069);
					sliceBound();
					}
				}

				setState(6072);
				match(COLON_);
				setState(6074);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << OR_) | (1L << PLUS_) | (1L << MINUS_) | (1L << LP_) | (1L << QUESTION_) | (1L << JSON_EXTRACT_) | (1L << JSON_EXTRACT_TEXT_) | (1L << JSON_PATH_EXTRACT_) | (1L << JSON_PATH_EXTRACT_TEXT_) | (1L << JSONB_CONTAIN_RIGHT_) | (1L << JSONB_CONTAIN_LEFT_) | (1L << JSONB_CONTAIN_ALL_TOP_KEY_) | (1L << JSONB_PATH_DELETE_) | (1L << JSONB_PATH_CONTAIN_ANY_VALUE_) | (1L << JSONB_PATH_PREDICATE_CHECK_) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (UNIQUE - 64)) | (1L << (KEY - 64)) | (1L << (POSITION - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (TRIM - 64)) | (1L << (SUBSTRING - 64)) | (1L << (NATURAL - 64)) | (1L << (JOIN - 64)) | (1L << (FULL - 64)) | (1L << (INNER - 64)) | (1L << (OUTER - 64)) | (1L << (LEFT - 64)) | (1L << (RIGHT - 64)) | (1L << (CROSS - 64)) | (1L << (IF - 64)) | (1L << (IS - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (TRUE - 64)) | (1L << (FALSE - 64)) | (1L << (EXISTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (LIKE - 129)) | (1L << (BY - 129)) | (1L << (BEGIN - 129)) | (1L << (COMMIT - 129)) | (1L << (ROLLBACK - 129)) | (1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (ARRAY - 129)) | (1L << (LOCALTIME - 129)) | (1L << (LOCALTIMESTAMP - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (DEFAULT - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (CURRENT_USER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (COLLATION - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (CURRENT_DATE - 129)) | (1L << (CURRENT_TIME - 129)) | (1L << (CURRENT_TIMESTAMP - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (NULLIF - 193)) | (1L << (VARYING - 193)) | (1L << (VALUE - 193)) | (1L << (COALESCE - 193)) | (1L << (TIES - 193)) | (1L << (CUBE - 193)) | (1L << (GROUPING - 193)) | (1L << (SETS - 193)) | (1L << (OTHERS - 193)) | (1L << (OVERLAPS - 193)) | (1L << (AT - 193)) | (1L << (ADMIN - 193)) | (1L << (BINARY - 193)) | (1L << (ESCAPE - 193)) | (1L << (EXCLUDE - 193)) | (1L << (PARTITION - 193)) | (1L << (ROW - 193)) | (1L << (UNKNOWN - 193)) | (1L << (ALWAYS - 193)) | (1L << (CASCADE - 193)) | (1L << (GENERATED - 193)) | (1L << (ISOLATION - 193)) | (1L << (LEVEL - 193)) | (1L << (NO - 193)) | (1L << (OPTION - 193)) | (1L << (PRIVILEGES - 193)) | (1L << (READ - 193)) | (1L << (ROLE - 193)) | (1L << (ROWS - 193)) | (1L << (START - 193)) | (1L << (TRANSACTION - 193)) | (1L << (USER - 193)) | (1L << (ACTION - 193)) | (1L << (CACHE - 193)) | (1L << (CHARACTERISTICS - 193)) | (1L << (CLUSTER - 193)) | (1L << (COMMENTS - 193)) | (1L << (CONCURRENTLY - 193)) | (1L << (CONSTRAINTS - 193)) | (1L << (CYCLE - 193)) | (1L << (DATA - 193)) | (1L << (DATABASE - 193)) | (1L << (DEFAULTS - 193)) | (1L << (DEFERRED - 193)) | (1L << (DEPENDS - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (DOMAIN - 257)) | (1L << (EXCLUDING - 257)) | (1L << (EXECUTE - 257)) | (1L << (EXTENSION - 257)) | (1L << (EXTERNAL - 257)) | (1L << (EXTRACT - 257)) | (1L << (FILTER - 257)) | (1L << (FIRST - 257)) | (1L << (FOLLOWING - 257)) | (1L << (FORCE - 257)) | (1L << (GLOBAL - 257)) | (1L << (IDENTITY - 257)) | (1L << (IMMEDIATE - 257)) | (1L << (INCLUDING - 257)) | (1L << (INCREMENT - 257)) | (1L << (INDEXES - 257)) | (1L << (INHERIT - 257)) | (1L << (INHERITS - 257)) | (1L << (INCLUDE - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LARGE - 257)) | (1L << (LAST - 257)) | (1L << (LOGGED - 257)) | (1L << (MATCH - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MINVALUE - 257)) | (1L << (NOTHING - 257)) | (1L << (NULLS - 257)) | (1L << (OBJECT - 257)) | (1L << (OIDS - 257)) | (1L << (OVER - 257)) | (1L << (OWNED - 257)) | (1L << (OWNER - 257)) | (1L << (PARTIAL - 257)) | (1L << (PRECEDING - 257)) | (1L << (RANGE - 257)) | (1L << (RENAME - 257)) | (1L << (REPLICA - 257)) | (1L << (RESET - 257)) | (1L << (RESTART - 257)) | (1L << (RESTRICT - 257)) | (1L << (ROUTINE - 257)) | (1L << (RULE - 257)) | (1L << (SECURITY - 257)) | (1L << (SEQUENCE - 257)) | (1L << (SESSION - 257)) | (1L << (SESSION_USER - 257)) | (1L << (SHOW - 257)) | (1L << (SIMPLE - 257)) | (1L << (STATISTICS - 257)) | (1L << (STORAGE - 257)) | (1L << (TABLESPACE - 257)) | (1L << (TEMP - 257)) | (1L << (TEMPORARY - 257)) | (1L << (UNBOUNDED - 257)) | (1L << (UNLOGGED - 257)) | (1L << (VALID - 257)) | (1L << (VALIDATE - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (WITHIN - 321)) | (1L << (WITHOUT - 321)) | (1L << (ZONE - 321)) | (1L << (OF - 321)) | (1L << (UESCAPE - 321)) | (1L << (GROUPS - 321)) | (1L << (RECURSIVE - 321)) | (1L << (ENUM - 321)) | (1L << (XML - 321)) | (1L << (JSON - 321)) | (1L << (TABLESAMPLE - 321)) | (1L << (ORDINALITY - 321)) | (1L << (CURRENT_ROLE - 321)) | (1L << (CURRENT_CATALOG - 321)) | (1L << (CURRENT_SCHEMA - 321)) | (1L << (NORMALIZE - 321)) | (1L << (OVERLAY - 321)) | (1L << (XMLCONCAT - 321)) | (1L << (XMLELEMENT - 321)) | (1L << (XMLEXISTS - 321)) | (1L << (XMLFOREST - 321)) | (1L << (XMLPARSE - 321)) | (1L << (XMLPI - 321)) | (1L << (XMLROOT - 321)) | (1L << (XMLSERIALIZE - 321)) | (1L << (TREAT - 321)) | (1L << (NFC - 321)) | (1L << (NFD - 321)) | (1L << (NFKC - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (NFKD - 385)) | (1L << (REF - 385)) | (1L << (PASSING - 385)) | (1L << (VERSION - 385)) | (1L << (YES - 385)) | (1L << (STANDALONE - 385)) | (1L << (GREATEST - 385)) | (1L << (LEAST - 385)) | (1L << (MATERIALIZED - 385)) | (1L << (OPERATOR - 385)) | (1L << (SHARE - 385)) | (1L << (ROLLUP - 385)) | (1L << (ILIKE - 385)) | (1L << (SIMILAR - 385)) | (1L << (ISNULL - 385)) | (1L << (NOTNULL - 385)) | (1L << (DOCUMENT - 385)) | (1L << (NORMALIZED - 385)) | (1L << (NOWAIT - 385)) | (1L << (LOCKED - 385)) | (1L << (COLUMNS - 385)) | (1L << (CONTENT - 385)) | (1L << (STRIP - 385)) | (1L << (WHITESPACE - 385)) | (1L << (CONFLICT - 385)) | (1L << (OVERRIDING - 385)) | (1L << (SYSTEM - 385)) | (1L << (ABORT - 385)) | (1L << (ABSOLUTE - 385)) | (1L << (ACCESS - 385)) | (1L << (AFTER - 385)) | (1L << (AGGREGATE - 385)) | (1L << (ALSO - 385)) | (1L << (ATTACH - 385)) | (1L << (ATTRIBUTE - 385)) | (1L << (BACKWARD - 385)) | (1L << (BEFORE - 385)) | (1L << (ASSERTION - 385)) | (1L << (ASSIGNMENT - 385)) | (1L << (CONTINUE - 385)) | (1L << (CONVERSION - 385)) | (1L << (COPY - 385)) | (1L << (COST - 385)) | (1L << (CSV - 385)) | (1L << (CALLED - 385)) | (1L << (CATALOG - 385)) | (1L << (CHAIN - 385)) | (1L << (CHECKPOINT - 385)) | (1L << (CLASS - 385)) | (1L << (CONFIGURATION - 385)) | (1L << (COMMENT - 385)) | (1L << (DETACH - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (DICTIONARY - 449)) | (1L << (EXPRESSION - 449)) | (1L << (INSENSITIVE - 449)) | (1L << (DISCARD - 449)) | (1L << (OFF - 449)) | (1L << (INSTEAD - 449)) | (1L << (EXPLAIN - 449)) | (1L << (INPUT - 449)) | (1L << (INLINE - 449)) | (1L << (PARALLEL - 449)) | (1L << (LEAKPROOF - 449)) | (1L << (COMMITTED - 449)) | (1L << (ENCODING - 449)) | (1L << (IMPLICIT - 449)) | (1L << (DELIMITER - 449)) | (1L << (CURSOR - 449)) | (1L << (EACH - 449)) | (1L << (EVENT - 449)) | (1L << (DEALLOCATE - 449)) | (1L << (CONNECTION - 449)) | (1L << (DECLARE - 449)) | (1L << (FAMILY - 449)) | (1L << (FORWARD - 449)) | (1L << (EXCLUSIVE - 449)) | (1L << (FUNCTIONS - 449)) | (1L << (LOCATION - 449)) | (1L << (LABEL - 449)) | (1L << (DELIMITERS - 449)) | (1L << (HANDLER - 449)) | (1L << (HEADER - 449)) | (1L << (IMMUTABLE - 449)) | (1L << (GRANTED - 449)) | (1L << (HOLD - 449)) | (1L << (MAPPING - 449)) | (1L << (OLD - 449)) | (1L << (METHOD - 449)) | (1L << (LOAD - 449)) | (1L << (LISTEN - 449)) | (1L << (MODE - 449)) | (1L << (MOVE - 449)) | (1L << (PROCEDURAL - 449)) | (1L << (PARSER - 449)) | (1L << (PROCEDURES - 449)) | (1L << (ENCRYPTED - 449)) | (1L << (PUBLICATION - 449)) | (1L << (PROGRAM - 449)) | (1L << (REFERENCING - 449)) | (1L << (PLANS - 449)) | (1L << (REINDEX - 449)) | (1L << (PRIOR - 449)) | (1L << (PASSWORD - 449)) | (1L << (RELATIVE - 449)) | (1L << (QUOTE - 449)) | (1L << (ROUTINES - 449)) | (1L << (REPLACE - 449)) | (1L << (SNAPSHOT - 449)) | (1L << (REFRESH - 449)) | (1L << (PREPARE - 449)) | (1L << (OPTIONS - 449)) | (1L << (IMPORT - 449)) | (1L << (INVOKER - 449)) | (1L << (NEW - 449)) | (1L << (PREPARED - 449)) | (1L << (SCROLL - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SEQUENCES - 513)) | (1L << (SYSID - 513)) | (1L << (REASSIGN - 513)) | (1L << (SERVER - 513)) | (1L << (SUBSCRIPTION - 513)) | (1L << (SEARCH - 513)) | (1L << (SCHEMAS - 513)) | (1L << (RECHECK - 513)) | (1L << (POLICY - 513)) | (1L << (NOTIFY - 513)) | (1L << (LOCK - 513)) | (1L << (RELEASE - 513)) | (1L << (SERIALIZABLE - 513)) | (1L << (RETURNS - 513)) | (1L << (STATEMENT - 513)) | (1L << (STDIN - 513)) | (1L << (STDOUT - 513)) | (1L << (TABLES - 513)) | (1L << (SUPPORT - 513)) | (1L << (STABLE - 513)) | (1L << (TEMPLATE - 513)) | (1L << (UNENCRYPTED - 513)) | (1L << (VIEWS - 513)) | (1L << (UNCOMMITTED - 513)) | (1L << (TRANSFORM - 513)) | (1L << (UNLISTEN - 513)) | (1L << (TRUSTED - 513)) | (1L << (VALIDATOR - 513)) | (1L << (UNTIL - 513)) | (1L << (VACUUM - 513)) | (1L << (VOLATILE - 513)) | (1L << (STORED - 513)) | (1L << (WRITE - 513)) | (1L << (STRICT - 513)) | (1L << (TYPES - 513)) | (1L << (WRAPPER - 513)) | (1L << (WORK - 513)) | (1L << (FREEZE - 513)) | (1L << (AUTHORIZATION - 513)) | (1L << (VERBOSE - 513)) | (1L << (PARAM - 513)) | (1L << (IDENTIFIER_ - 513)) | (1L << (STRING_ - 513)) | (1L << (NUMBER_ - 513)))) != 0)) {
					{
					setState(6073);
					sliceBound();
					}
				}

				setState(6076);
				match(RBT_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SliceBoundContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SliceBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sliceBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSliceBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSliceBound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSliceBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SliceBoundContext sliceBound() throws RecognitionException {
		SliceBoundContext _localctx = new SliceBoundContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_sliceBound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6079);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InExprContext extends ParserRuleContext {
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public InExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterInExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitInExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitInExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InExprContext inExpr() throws RecognitionException {
		InExprContext _localctx = new InExprContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_inExpr);
		try {
			setState(6086);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__2:
				enterOuterAlt(_localctx, 1);
				{
				setState(6081);
				selectWithParens();
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 2);
				{
				setState(6082);
				match(LP_);
				setState(6083);
				exprList(0);
				setState(6084);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(DDLStatementParser.CASE, 0); }
		public WhenClauseListContext whenClauseList() {
			return getRuleContext(WhenClauseListContext.class,0);
		}
		public TerminalNode END() { return getToken(DDLStatementParser.END, 0); }
		public CaseArgContext caseArg() {
			return getRuleContext(CaseArgContext.class,0);
		}
		public CaseDefaultContext caseDefault() {
			return getRuleContext(CaseDefaultContext.class,0);
		}
		public CaseExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCaseExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCaseExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCaseExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExprContext caseExpr() throws RecognitionException {
		CaseExprContext _localctx = new CaseExprContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_caseExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6088);
			match(CASE);
			setState(6090);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << OR_) | (1L << PLUS_) | (1L << MINUS_) | (1L << LP_) | (1L << QUESTION_) | (1L << JSON_EXTRACT_) | (1L << JSON_EXTRACT_TEXT_) | (1L << JSON_PATH_EXTRACT_) | (1L << JSON_PATH_EXTRACT_TEXT_) | (1L << JSONB_CONTAIN_RIGHT_) | (1L << JSONB_CONTAIN_LEFT_) | (1L << JSONB_CONTAIN_ALL_TOP_KEY_) | (1L << JSONB_PATH_DELETE_) | (1L << JSONB_PATH_CONTAIN_ANY_VALUE_) | (1L << JSONB_PATH_PREDICATE_CHECK_) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (UNIQUE - 64)) | (1L << (KEY - 64)) | (1L << (POSITION - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (CASE - 64)) | (1L << (CAST - 64)) | (1L << (TRIM - 64)) | (1L << (SUBSTRING - 64)) | (1L << (NATURAL - 64)) | (1L << (JOIN - 64)) | (1L << (FULL - 64)) | (1L << (INNER - 64)) | (1L << (OUTER - 64)) | (1L << (LEFT - 64)) | (1L << (RIGHT - 64)) | (1L << (CROSS - 64)) | (1L << (IF - 64)) | (1L << (IS - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (TRUE - 64)) | (1L << (FALSE - 64)) | (1L << (EXISTS - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (LIKE - 129)) | (1L << (BY - 129)) | (1L << (BEGIN - 129)) | (1L << (COMMIT - 129)) | (1L << (ROLLBACK - 129)) | (1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (ARRAY - 129)) | (1L << (LOCALTIME - 129)) | (1L << (LOCALTIMESTAMP - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (DEFAULT - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (CURRENT_USER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (COLLATION - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (CURRENT_DATE - 129)) | (1L << (CURRENT_TIME - 129)) | (1L << (CURRENT_TIMESTAMP - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (NULLIF - 193)) | (1L << (VARYING - 193)) | (1L << (VALUE - 193)) | (1L << (COALESCE - 193)) | (1L << (TIES - 193)) | (1L << (CUBE - 193)) | (1L << (GROUPING - 193)) | (1L << (SETS - 193)) | (1L << (OTHERS - 193)) | (1L << (OVERLAPS - 193)) | (1L << (AT - 193)) | (1L << (ADMIN - 193)) | (1L << (BINARY - 193)) | (1L << (ESCAPE - 193)) | (1L << (EXCLUDE - 193)) | (1L << (PARTITION - 193)) | (1L << (ROW - 193)) | (1L << (UNKNOWN - 193)) | (1L << (ALWAYS - 193)) | (1L << (CASCADE - 193)) | (1L << (GENERATED - 193)) | (1L << (ISOLATION - 193)) | (1L << (LEVEL - 193)) | (1L << (NO - 193)) | (1L << (OPTION - 193)) | (1L << (PRIVILEGES - 193)) | (1L << (READ - 193)) | (1L << (ROLE - 193)) | (1L << (ROWS - 193)) | (1L << (START - 193)) | (1L << (TRANSACTION - 193)) | (1L << (USER - 193)) | (1L << (ACTION - 193)) | (1L << (CACHE - 193)) | (1L << (CHARACTERISTICS - 193)) | (1L << (CLUSTER - 193)) | (1L << (COMMENTS - 193)) | (1L << (CONCURRENTLY - 193)) | (1L << (CONSTRAINTS - 193)) | (1L << (CYCLE - 193)) | (1L << (DATA - 193)) | (1L << (DATABASE - 193)) | (1L << (DEFAULTS - 193)) | (1L << (DEFERRED - 193)) | (1L << (DEPENDS - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (DOMAIN - 257)) | (1L << (EXCLUDING - 257)) | (1L << (EXECUTE - 257)) | (1L << (EXTENSION - 257)) | (1L << (EXTERNAL - 257)) | (1L << (EXTRACT - 257)) | (1L << (FILTER - 257)) | (1L << (FIRST - 257)) | (1L << (FOLLOWING - 257)) | (1L << (FORCE - 257)) | (1L << (GLOBAL - 257)) | (1L << (IDENTITY - 257)) | (1L << (IMMEDIATE - 257)) | (1L << (INCLUDING - 257)) | (1L << (INCREMENT - 257)) | (1L << (INDEXES - 257)) | (1L << (INHERIT - 257)) | (1L << (INHERITS - 257)) | (1L << (INCLUDE - 257)) | (1L << (LANGUAGE - 257)) | (1L << (LARGE - 257)) | (1L << (LAST - 257)) | (1L << (LOGGED - 257)) | (1L << (MATCH - 257)) | (1L << (MAXVALUE - 257)) | (1L << (MINVALUE - 257)) | (1L << (NOTHING - 257)) | (1L << (NULLS - 257)) | (1L << (OBJECT - 257)) | (1L << (OIDS - 257)) | (1L << (OVER - 257)) | (1L << (OWNED - 257)) | (1L << (OWNER - 257)) | (1L << (PARTIAL - 257)) | (1L << (PRECEDING - 257)) | (1L << (RANGE - 257)) | (1L << (RENAME - 257)) | (1L << (REPLICA - 257)) | (1L << (RESET - 257)) | (1L << (RESTART - 257)) | (1L << (RESTRICT - 257)) | (1L << (ROUTINE - 257)) | (1L << (RULE - 257)) | (1L << (SECURITY - 257)) | (1L << (SEQUENCE - 257)) | (1L << (SESSION - 257)) | (1L << (SESSION_USER - 257)) | (1L << (SHOW - 257)) | (1L << (SIMPLE - 257)) | (1L << (STATISTICS - 257)) | (1L << (STORAGE - 257)) | (1L << (TABLESPACE - 257)) | (1L << (TEMP - 257)) | (1L << (TEMPORARY - 257)) | (1L << (UNBOUNDED - 257)) | (1L << (UNLOGGED - 257)) | (1L << (VALID - 257)) | (1L << (VALIDATE - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (WITHIN - 321)) | (1L << (WITHOUT - 321)) | (1L << (ZONE - 321)) | (1L << (OF - 321)) | (1L << (UESCAPE - 321)) | (1L << (GROUPS - 321)) | (1L << (RECURSIVE - 321)) | (1L << (ENUM - 321)) | (1L << (XML - 321)) | (1L << (JSON - 321)) | (1L << (TABLESAMPLE - 321)) | (1L << (ORDINALITY - 321)) | (1L << (CURRENT_ROLE - 321)) | (1L << (CURRENT_CATALOG - 321)) | (1L << (CURRENT_SCHEMA - 321)) | (1L << (NORMALIZE - 321)) | (1L << (OVERLAY - 321)) | (1L << (XMLCONCAT - 321)) | (1L << (XMLELEMENT - 321)) | (1L << (XMLEXISTS - 321)) | (1L << (XMLFOREST - 321)) | (1L << (XMLPARSE - 321)) | (1L << (XMLPI - 321)) | (1L << (XMLROOT - 321)) | (1L << (XMLSERIALIZE - 321)) | (1L << (TREAT - 321)) | (1L << (NFC - 321)) | (1L << (NFD - 321)) | (1L << (NFKC - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (NFKD - 385)) | (1L << (REF - 385)) | (1L << (PASSING - 385)) | (1L << (VERSION - 385)) | (1L << (YES - 385)) | (1L << (STANDALONE - 385)) | (1L << (GREATEST - 385)) | (1L << (LEAST - 385)) | (1L << (MATERIALIZED - 385)) | (1L << (OPERATOR - 385)) | (1L << (SHARE - 385)) | (1L << (ROLLUP - 385)) | (1L << (ILIKE - 385)) | (1L << (SIMILAR - 385)) | (1L << (ISNULL - 385)) | (1L << (NOTNULL - 385)) | (1L << (DOCUMENT - 385)) | (1L << (NORMALIZED - 385)) | (1L << (NOWAIT - 385)) | (1L << (LOCKED - 385)) | (1L << (COLUMNS - 385)) | (1L << (CONTENT - 385)) | (1L << (STRIP - 385)) | (1L << (WHITESPACE - 385)) | (1L << (CONFLICT - 385)) | (1L << (OVERRIDING - 385)) | (1L << (SYSTEM - 385)) | (1L << (ABORT - 385)) | (1L << (ABSOLUTE - 385)) | (1L << (ACCESS - 385)) | (1L << (AFTER - 385)) | (1L << (AGGREGATE - 385)) | (1L << (ALSO - 385)) | (1L << (ATTACH - 385)) | (1L << (ATTRIBUTE - 385)) | (1L << (BACKWARD - 385)) | (1L << (BEFORE - 385)) | (1L << (ASSERTION - 385)) | (1L << (ASSIGNMENT - 385)) | (1L << (CONTINUE - 385)) | (1L << (CONVERSION - 385)) | (1L << (COPY - 385)) | (1L << (COST - 385)) | (1L << (CSV - 385)) | (1L << (CALLED - 385)) | (1L << (CATALOG - 385)) | (1L << (CHAIN - 385)) | (1L << (CHECKPOINT - 385)) | (1L << (CLASS - 385)) | (1L << (CONFIGURATION - 385)) | (1L << (COMMENT - 385)) | (1L << (DETACH - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (DICTIONARY - 449)) | (1L << (EXPRESSION - 449)) | (1L << (INSENSITIVE - 449)) | (1L << (DISCARD - 449)) | (1L << (OFF - 449)) | (1L << (INSTEAD - 449)) | (1L << (EXPLAIN - 449)) | (1L << (INPUT - 449)) | (1L << (INLINE - 449)) | (1L << (PARALLEL - 449)) | (1L << (LEAKPROOF - 449)) | (1L << (COMMITTED - 449)) | (1L << (ENCODING - 449)) | (1L << (IMPLICIT - 449)) | (1L << (DELIMITER - 449)) | (1L << (CURSOR - 449)) | (1L << (EACH - 449)) | (1L << (EVENT - 449)) | (1L << (DEALLOCATE - 449)) | (1L << (CONNECTION - 449)) | (1L << (DECLARE - 449)) | (1L << (FAMILY - 449)) | (1L << (FORWARD - 449)) | (1L << (EXCLUSIVE - 449)) | (1L << (FUNCTIONS - 449)) | (1L << (LOCATION - 449)) | (1L << (LABEL - 449)) | (1L << (DELIMITERS - 449)) | (1L << (HANDLER - 449)) | (1L << (HEADER - 449)) | (1L << (IMMUTABLE - 449)) | (1L << (GRANTED - 449)) | (1L << (HOLD - 449)) | (1L << (MAPPING - 449)) | (1L << (OLD - 449)) | (1L << (METHOD - 449)) | (1L << (LOAD - 449)) | (1L << (LISTEN - 449)) | (1L << (MODE - 449)) | (1L << (MOVE - 449)) | (1L << (PROCEDURAL - 449)) | (1L << (PARSER - 449)) | (1L << (PROCEDURES - 449)) | (1L << (ENCRYPTED - 449)) | (1L << (PUBLICATION - 449)) | (1L << (PROGRAM - 449)) | (1L << (REFERENCING - 449)) | (1L << (PLANS - 449)) | (1L << (REINDEX - 449)) | (1L << (PRIOR - 449)) | (1L << (PASSWORD - 449)) | (1L << (RELATIVE - 449)) | (1L << (QUOTE - 449)) | (1L << (ROUTINES - 449)) | (1L << (REPLACE - 449)) | (1L << (SNAPSHOT - 449)) | (1L << (REFRESH - 449)) | (1L << (PREPARE - 449)) | (1L << (OPTIONS - 449)) | (1L << (IMPORT - 449)) | (1L << (INVOKER - 449)) | (1L << (NEW - 449)) | (1L << (PREPARED - 449)) | (1L << (SCROLL - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SEQUENCES - 513)) | (1L << (SYSID - 513)) | (1L << (REASSIGN - 513)) | (1L << (SERVER - 513)) | (1L << (SUBSCRIPTION - 513)) | (1L << (SEARCH - 513)) | (1L << (SCHEMAS - 513)) | (1L << (RECHECK - 513)) | (1L << (POLICY - 513)) | (1L << (NOTIFY - 513)) | (1L << (LOCK - 513)) | (1L << (RELEASE - 513)) | (1L << (SERIALIZABLE - 513)) | (1L << (RETURNS - 513)) | (1L << (STATEMENT - 513)) | (1L << (STDIN - 513)) | (1L << (STDOUT - 513)) | (1L << (TABLES - 513)) | (1L << (SUPPORT - 513)) | (1L << (STABLE - 513)) | (1L << (TEMPLATE - 513)) | (1L << (UNENCRYPTED - 513)) | (1L << (VIEWS - 513)) | (1L << (UNCOMMITTED - 513)) | (1L << (TRANSFORM - 513)) | (1L << (UNLISTEN - 513)) | (1L << (TRUSTED - 513)) | (1L << (VALIDATOR - 513)) | (1L << (UNTIL - 513)) | (1L << (VACUUM - 513)) | (1L << (VOLATILE - 513)) | (1L << (STORED - 513)) | (1L << (WRITE - 513)) | (1L << (STRICT - 513)) | (1L << (TYPES - 513)) | (1L << (WRAPPER - 513)) | (1L << (WORK - 513)) | (1L << (FREEZE - 513)) | (1L << (AUTHORIZATION - 513)) | (1L << (VERBOSE - 513)) | (1L << (PARAM - 513)) | (1L << (IDENTIFIER_ - 513)) | (1L << (STRING_ - 513)) | (1L << (NUMBER_ - 513)))) != 0)) {
				{
				setState(6089);
				caseArg();
				}
			}

			setState(6092);
			whenClauseList();
			setState(6094);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(6093);
				caseDefault();
				}
			}

			setState(6096);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenClauseListContext extends ParserRuleContext {
		public List<WhenClauseContext> whenClause() {
			return getRuleContexts(WhenClauseContext.class);
		}
		public WhenClauseContext whenClause(int i) {
			return getRuleContext(WhenClauseContext.class,i);
		}
		public WhenClauseListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenClauseList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWhenClauseList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWhenClauseList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWhenClauseList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenClauseListContext whenClauseList() throws RecognitionException {
		WhenClauseListContext _localctx = new WhenClauseListContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_whenClauseList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6099); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6098);
				whenClause();
				}
				}
				setState(6101); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenClauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(DDLStatementParser.WHEN, 0); }
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(DDLStatementParser.THEN, 0); }
		public WhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenClauseContext whenClause() throws RecognitionException {
		WhenClauseContext _localctx = new WhenClauseContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_whenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6103);
			match(WHEN);
			setState(6104);
			aExpr(0);
			setState(6105);
			match(THEN);
			setState(6106);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseDefaultContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(DDLStatementParser.ELSE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public CaseDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCaseDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCaseDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCaseDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseDefaultContext caseDefault() throws RecognitionException {
		CaseDefaultContext _localctx = new CaseDefaultContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_caseDefault);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6108);
			match(ELSE);
			setState(6109);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseArgContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public CaseArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCaseArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCaseArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCaseArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseArgContext caseArg() throws RecognitionException {
		CaseArgContext _localctx = new CaseArgContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_caseArg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6111);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnrefContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnrefContext columnref() throws RecognitionException {
		ColumnrefContext _localctx = new ColumnrefContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_columnref);
		try {
			setState(6117);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6113);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6114);
				colId();
				setState(6115);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualOpContext extends ParserRuleContext {
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public QualOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterQualOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitQualOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitQualOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualOpContext qualOp() throws RecognitionException {
		QualOpContext _localctx = new QualOpContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_qualOp);
		try {
			setState(6125);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OR_:
			case MINUS_:
			case QUESTION_:
			case JSON_EXTRACT_:
			case JSON_EXTRACT_TEXT_:
			case JSON_PATH_EXTRACT_:
			case JSON_PATH_EXTRACT_TEXT_:
			case JSONB_CONTAIN_RIGHT_:
			case JSONB_CONTAIN_LEFT_:
			case JSONB_CONTAIN_ALL_TOP_KEY_:
			case JSONB_PATH_DELETE_:
			case JSONB_PATH_CONTAIN_ANY_VALUE_:
			case JSONB_PATH_PREDICATE_CHECK_:
				enterOuterAlt(_localctx, 1);
				{
				setState(6119);
				jsonOperator();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(6120);
				match(OPERATOR);
				setState(6121);
				match(LP_);
				setState(6122);
				anyOperator();
				setState(6123);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryOpContext extends ParserRuleContext {
		public AllOpContext allOp() {
			return getRuleContext(AllOpContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode LIKE() { return getToken(DDLStatementParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode TILDE_() { return getToken(DDLStatementParser.TILDE_, 0); }
		public TerminalNode NOT_() { return getToken(DDLStatementParser.NOT_, 0); }
		public SubqueryOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subqueryOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSubqueryOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSubqueryOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSubqueryOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryOpContext subqueryOp() throws RecognitionException {
		SubqueryOpContext _localctx = new SubqueryOpContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_subqueryOp);
		try {
			setState(6139);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6127);
				allOp();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6128);
				match(OPERATOR);
				setState(6129);
				match(LP_);
				setState(6130);
				anyOperator();
				setState(6131);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6133);
				match(LIKE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6134);
				match(NOT);
				setState(6135);
				match(LIKE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6136);
				match(TILDE_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6137);
				match(NOT_);
				setState(6138);
				match(TILDE_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllOpContext extends ParserRuleContext {
		public OpContext op() {
			return getRuleContext(OpContext.class,0);
		}
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public AllOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAllOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAllOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAllOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllOpContext allOp() throws RecognitionException {
		AllOpContext _localctx = new AllOpContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_allOp);
		try {
			setState(6143);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6141);
				op();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6142);
				mathOperator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpContext extends ParserRuleContext {
		public List<TerminalNode> AND_() { return getTokens(DDLStatementParser.AND_); }
		public TerminalNode AND_(int i) {
			return getToken(DDLStatementParser.AND_, i);
		}
		public List<TerminalNode> OR_() { return getTokens(DDLStatementParser.OR_); }
		public TerminalNode OR_(int i) {
			return getToken(DDLStatementParser.OR_, i);
		}
		public List<TerminalNode> NOT_() { return getTokens(DDLStatementParser.NOT_); }
		public TerminalNode NOT_(int i) {
			return getToken(DDLStatementParser.NOT_, i);
		}
		public List<TerminalNode> TILDE_() { return getTokens(DDLStatementParser.TILDE_); }
		public TerminalNode TILDE_(int i) {
			return getToken(DDLStatementParser.TILDE_, i);
		}
		public List<TerminalNode> VERTICAL_BAR_() { return getTokens(DDLStatementParser.VERTICAL_BAR_); }
		public TerminalNode VERTICAL_BAR_(int i) {
			return getToken(DDLStatementParser.VERTICAL_BAR_, i);
		}
		public List<TerminalNode> AMPERSAND_() { return getTokens(DDLStatementParser.AMPERSAND_); }
		public TerminalNode AMPERSAND_(int i) {
			return getToken(DDLStatementParser.AMPERSAND_, i);
		}
		public List<TerminalNode> SIGNED_LEFT_SHIFT_() { return getTokens(DDLStatementParser.SIGNED_LEFT_SHIFT_); }
		public TerminalNode SIGNED_LEFT_SHIFT_(int i) {
			return getToken(DDLStatementParser.SIGNED_LEFT_SHIFT_, i);
		}
		public List<TerminalNode> SIGNED_RIGHT_SHIFT_() { return getTokens(DDLStatementParser.SIGNED_RIGHT_SHIFT_); }
		public TerminalNode SIGNED_RIGHT_SHIFT_(int i) {
			return getToken(DDLStatementParser.SIGNED_RIGHT_SHIFT_, i);
		}
		public List<TerminalNode> CARET_() { return getTokens(DDLStatementParser.CARET_); }
		public TerminalNode CARET_(int i) {
			return getToken(DDLStatementParser.CARET_, i);
		}
		public List<TerminalNode> MOD_() { return getTokens(DDLStatementParser.MOD_); }
		public TerminalNode MOD_(int i) {
			return getToken(DDLStatementParser.MOD_, i);
		}
		public List<TerminalNode> COLON_() { return getTokens(DDLStatementParser.COLON_); }
		public TerminalNode COLON_(int i) {
			return getToken(DDLStatementParser.COLON_, i);
		}
		public List<TerminalNode> PLUS_() { return getTokens(DDLStatementParser.PLUS_); }
		public TerminalNode PLUS_(int i) {
			return getToken(DDLStatementParser.PLUS_, i);
		}
		public List<TerminalNode> MINUS_() { return getTokens(DDLStatementParser.MINUS_); }
		public TerminalNode MINUS_(int i) {
			return getToken(DDLStatementParser.MINUS_, i);
		}
		public List<TerminalNode> ASTERISK_() { return getTokens(DDLStatementParser.ASTERISK_); }
		public TerminalNode ASTERISK_(int i) {
			return getToken(DDLStatementParser.ASTERISK_, i);
		}
		public List<TerminalNode> SLASH_() { return getTokens(DDLStatementParser.SLASH_); }
		public TerminalNode SLASH_(int i) {
			return getToken(DDLStatementParser.SLASH_, i);
		}
		public List<TerminalNode> BACKSLASH_() { return getTokens(DDLStatementParser.BACKSLASH_); }
		public TerminalNode BACKSLASH_(int i) {
			return getToken(DDLStatementParser.BACKSLASH_, i);
		}
		public List<TerminalNode> DOT_() { return getTokens(DDLStatementParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(DDLStatementParser.DOT_, i);
		}
		public List<TerminalNode> DOT_ASTERISK_() { return getTokens(DDLStatementParser.DOT_ASTERISK_); }
		public TerminalNode DOT_ASTERISK_(int i) {
			return getToken(DDLStatementParser.DOT_ASTERISK_, i);
		}
		public List<TerminalNode> SAFE_EQ_() { return getTokens(DDLStatementParser.SAFE_EQ_); }
		public TerminalNode SAFE_EQ_(int i) {
			return getToken(DDLStatementParser.SAFE_EQ_, i);
		}
		public List<TerminalNode> DEQ_() { return getTokens(DDLStatementParser.DEQ_); }
		public TerminalNode DEQ_(int i) {
			return getToken(DDLStatementParser.DEQ_, i);
		}
		public List<TerminalNode> EQ_() { return getTokens(DDLStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(DDLStatementParser.EQ_, i);
		}
		public List<TerminalNode> CQ_() { return getTokens(DDLStatementParser.CQ_); }
		public TerminalNode CQ_(int i) {
			return getToken(DDLStatementParser.CQ_, i);
		}
		public List<TerminalNode> NEQ_() { return getTokens(DDLStatementParser.NEQ_); }
		public TerminalNode NEQ_(int i) {
			return getToken(DDLStatementParser.NEQ_, i);
		}
		public List<TerminalNode> GT_() { return getTokens(DDLStatementParser.GT_); }
		public TerminalNode GT_(int i) {
			return getToken(DDLStatementParser.GT_, i);
		}
		public List<TerminalNode> GTE_() { return getTokens(DDLStatementParser.GTE_); }
		public TerminalNode GTE_(int i) {
			return getToken(DDLStatementParser.GTE_, i);
		}
		public List<TerminalNode> LT_() { return getTokens(DDLStatementParser.LT_); }
		public TerminalNode LT_(int i) {
			return getToken(DDLStatementParser.LT_, i);
		}
		public List<TerminalNode> LTE_() { return getTokens(DDLStatementParser.LTE_); }
		public TerminalNode LTE_(int i) {
			return getToken(DDLStatementParser.LTE_, i);
		}
		public List<TerminalNode> POUND_() { return getTokens(DDLStatementParser.POUND_); }
		public TerminalNode POUND_(int i) {
			return getToken(DDLStatementParser.POUND_, i);
		}
		public List<TerminalNode> LP_() { return getTokens(DDLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(DDLStatementParser.LP_, i);
		}
		public List<TerminalNode> RP_() { return getTokens(DDLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(DDLStatementParser.RP_, i);
		}
		public List<TerminalNode> LBE_() { return getTokens(DDLStatementParser.LBE_); }
		public TerminalNode LBE_(int i) {
			return getToken(DDLStatementParser.LBE_, i);
		}
		public List<TerminalNode> RBE_() { return getTokens(DDLStatementParser.RBE_); }
		public TerminalNode RBE_(int i) {
			return getToken(DDLStatementParser.RBE_, i);
		}
		public List<TerminalNode> LBT_() { return getTokens(DDLStatementParser.LBT_); }
		public TerminalNode LBT_(int i) {
			return getToken(DDLStatementParser.LBT_, i);
		}
		public List<TerminalNode> RBT_() { return getTokens(DDLStatementParser.RBT_); }
		public TerminalNode RBT_(int i) {
			return getToken(DDLStatementParser.RBT_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public List<TerminalNode> DQ_() { return getTokens(DDLStatementParser.DQ_); }
		public TerminalNode DQ_(int i) {
			return getToken(DDLStatementParser.DQ_, i);
		}
		public List<TerminalNode> SQ_() { return getTokens(DDLStatementParser.SQ_); }
		public TerminalNode SQ_(int i) {
			return getToken(DDLStatementParser.SQ_, i);
		}
		public List<TerminalNode> BQ_() { return getTokens(DDLStatementParser.BQ_); }
		public TerminalNode BQ_(int i) {
			return getToken(DDLStatementParser.BQ_, i);
		}
		public List<TerminalNode> QUESTION_() { return getTokens(DDLStatementParser.QUESTION_); }
		public TerminalNode QUESTION_(int i) {
			return getToken(DDLStatementParser.QUESTION_, i);
		}
		public List<TerminalNode> AT_() { return getTokens(DDLStatementParser.AT_); }
		public TerminalNode AT_(int i) {
			return getToken(DDLStatementParser.AT_, i);
		}
		public List<TerminalNode> SEMI_() { return getTokens(DDLStatementParser.SEMI_); }
		public TerminalNode SEMI_(int i) {
			return getToken(DDLStatementParser.SEMI_, i);
		}
		public List<TerminalNode> TILDE_TILDE_() { return getTokens(DDLStatementParser.TILDE_TILDE_); }
		public TerminalNode TILDE_TILDE_(int i) {
			return getToken(DDLStatementParser.TILDE_TILDE_, i);
		}
		public List<TerminalNode> NOT_TILDE_TILDE_() { return getTokens(DDLStatementParser.NOT_TILDE_TILDE_); }
		public TerminalNode NOT_TILDE_TILDE_(int i) {
			return getToken(DDLStatementParser.NOT_TILDE_TILDE_, i);
		}
		public List<TerminalNode> TYPE_CAST_() { return getTokens(DDLStatementParser.TYPE_CAST_); }
		public TerminalNode TYPE_CAST_(int i) {
			return getToken(DDLStatementParser.TYPE_CAST_, i);
		}
		public OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpContext op() throws RecognitionException {
		OpContext _localctx = new OpContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_op);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6146); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6145);
					_la = _input.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND_) | (1L << OR_) | (1L << NOT_) | (1L << TILDE_) | (1L << VERTICAL_BAR_) | (1L << AMPERSAND_) | (1L << SIGNED_LEFT_SHIFT_) | (1L << SIGNED_RIGHT_SHIFT_) | (1L << CARET_) | (1L << MOD_) | (1L << COLON_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << BACKSLASH_) | (1L << DOT_) | (1L << DOT_ASTERISK_) | (1L << SAFE_EQ_) | (1L << DEQ_) | (1L << EQ_) | (1L << CQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_) | (1L << POUND_) | (1L << LP_) | (1L << RP_) | (1L << LBE_) | (1L << RBE_) | (1L << LBT_) | (1L << RBT_) | (1L << COMMA_) | (1L << DQ_) | (1L << SQ_) | (1L << BQ_) | (1L << QUESTION_) | (1L << AT_) | (1L << SEMI_) | (1L << TILDE_TILDE_) | (1L << NOT_TILDE_TILDE_) | (1L << TYPE_CAST_))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6148); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,558,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode PLUS_() { return getToken(DDLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(DDLStatementParser.MINUS_, 0); }
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TerminalNode SLASH_() { return getToken(DDLStatementParser.SLASH_, 0); }
		public TerminalNode MOD_() { return getToken(DDLStatementParser.MOD_, 0); }
		public TerminalNode CARET_() { return getToken(DDLStatementParser.CARET_, 0); }
		public TerminalNode LT_() { return getToken(DDLStatementParser.LT_, 0); }
		public TerminalNode GT_() { return getToken(DDLStatementParser.GT_, 0); }
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public TerminalNode LTE_() { return getToken(DDLStatementParser.LTE_, 0); }
		public TerminalNode GTE_() { return getToken(DDLStatementParser.GTE_, 0); }
		public TerminalNode NEQ_() { return getToken(DDLStatementParser.NEQ_, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6150);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CARET_) | (1L << MOD_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOperatorContext extends ParserRuleContext {
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
	 
		public JsonOperatorContext() { }
		public void copyFrom(JsonOperatorContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class JsonPathExtractContext extends JsonOperatorContext {
		public TerminalNode JSON_PATH_EXTRACT_() { return getToken(DDLStatementParser.JSON_PATH_EXTRACT_, 0); }
		public JsonPathExtractContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJsonPathExtract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJsonPathExtract(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJsonPathExtract(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonbPathDeleteContext extends JsonOperatorContext {
		public TerminalNode JSONB_PATH_DELETE_() { return getToken(DDLStatementParser.JSONB_PATH_DELETE_, 0); }
		public JsonbPathDeleteContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJsonbPathDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJsonbPathDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJsonbPathDelete(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonbContainTopKeyContext extends JsonOperatorContext {
		public TerminalNode QUESTION_() { return getToken(DDLStatementParser.QUESTION_, 0); }
		public JsonbContainTopKeyContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJsonbContainTopKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJsonbContainTopKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJsonbContainTopKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonbConcatContext extends JsonOperatorContext {
		public TerminalNode OR_() { return getToken(DDLStatementParser.OR_, 0); }
		public JsonbConcatContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJsonbConcat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJsonbConcat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJsonbConcat(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonbContainLeftContext extends JsonOperatorContext {
		public TerminalNode JSONB_CONTAIN_LEFT_() { return getToken(DDLStatementParser.JSONB_CONTAIN_LEFT_, 0); }
		public JsonbContainLeftContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJsonbContainLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJsonbContainLeft(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJsonbContainLeft(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonbDeleteContext extends JsonOperatorContext {
		public TerminalNode MINUS_() { return getToken(DDLStatementParser.MINUS_, 0); }
		public JsonbDeleteContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJsonbDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJsonbDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJsonbDelete(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonExtractContext extends JsonOperatorContext {
		public TerminalNode JSON_EXTRACT_() { return getToken(DDLStatementParser.JSON_EXTRACT_, 0); }
		public JsonExtractContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJsonExtract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJsonExtract(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJsonExtract(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonbContainRightContext extends JsonOperatorContext {
		public TerminalNode JSONB_CONTAIN_RIGHT_() { return getToken(DDLStatementParser.JSONB_CONTAIN_RIGHT_, 0); }
		public JsonbContainRightContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJsonbContainRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJsonbContainRight(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJsonbContainRight(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonExtractTextContext extends JsonOperatorContext {
		public TerminalNode JSON_EXTRACT_TEXT_() { return getToken(DDLStatementParser.JSON_EXTRACT_TEXT_, 0); }
		public JsonExtractTextContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJsonExtractText(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJsonExtractText(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJsonExtractText(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonbPathPredicateCheckContext extends JsonOperatorContext {
		public TerminalNode JSONB_PATH_PREDICATE_CHECK_() { return getToken(DDLStatementParser.JSONB_PATH_PREDICATE_CHECK_, 0); }
		public JsonbPathPredicateCheckContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJsonbPathPredicateCheck(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJsonbPathPredicateCheck(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJsonbPathPredicateCheck(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonbPathContainAnyValueContext extends JsonOperatorContext {
		public TerminalNode JSONB_PATH_CONTAIN_ANY_VALUE_() { return getToken(DDLStatementParser.JSONB_PATH_CONTAIN_ANY_VALUE_, 0); }
		public JsonbPathContainAnyValueContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJsonbPathContainAnyValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJsonbPathContainAnyValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJsonbPathContainAnyValue(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonbContainAnyTopKeyContext extends JsonOperatorContext {
		public TerminalNode QUESTION_() { return getToken(DDLStatementParser.QUESTION_, 0); }
		public TerminalNode VERTICAL_BAR_() { return getToken(DDLStatementParser.VERTICAL_BAR_, 0); }
		public JsonbContainAnyTopKeyContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJsonbContainAnyTopKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJsonbContainAnyTopKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJsonbContainAnyTopKey(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonPathExtractTextContext extends JsonOperatorContext {
		public TerminalNode JSON_PATH_EXTRACT_TEXT_() { return getToken(DDLStatementParser.JSON_PATH_EXTRACT_TEXT_, 0); }
		public JsonPathExtractTextContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJsonPathExtractText(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJsonPathExtractText(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJsonPathExtractText(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonbContainAllTopKeyContext extends JsonOperatorContext {
		public TerminalNode JSONB_CONTAIN_ALL_TOP_KEY_() { return getToken(DDLStatementParser.JSONB_CONTAIN_ALL_TOP_KEY_, 0); }
		public JsonbContainAllTopKeyContext(JsonOperatorContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJsonbContainAllTopKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJsonbContainAllTopKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJsonbContainAllTopKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_jsonOperator);
		try {
			setState(6167);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
			case 1:
				_localctx = new JsonExtractContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(6152);
				match(JSON_EXTRACT_);
				}
				break;
			case 2:
				_localctx = new JsonExtractTextContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(6153);
				match(JSON_EXTRACT_TEXT_);
				}
				break;
			case 3:
				_localctx = new JsonPathExtractContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(6154);
				match(JSON_PATH_EXTRACT_);
				}
				break;
			case 4:
				_localctx = new JsonPathExtractTextContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(6155);
				match(JSON_PATH_EXTRACT_TEXT_);
				}
				break;
			case 5:
				_localctx = new JsonbContainRightContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(6156);
				match(JSONB_CONTAIN_RIGHT_);
				}
				break;
			case 6:
				_localctx = new JsonbContainLeftContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(6157);
				match(JSONB_CONTAIN_LEFT_);
				}
				break;
			case 7:
				_localctx = new JsonbContainTopKeyContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(6158);
				match(QUESTION_);
				}
				break;
			case 8:
				_localctx = new JsonbContainAnyTopKeyContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(6159);
				match(QUESTION_);
				setState(6160);
				match(VERTICAL_BAR_);
				}
				break;
			case 9:
				_localctx = new JsonbContainAllTopKeyContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(6161);
				match(JSONB_CONTAIN_ALL_TOP_KEY_);
				}
				break;
			case 10:
				_localctx = new JsonbConcatContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(6162);
				match(OR_);
				}
				break;
			case 11:
				_localctx = new JsonbDeleteContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(6163);
				match(MINUS_);
				}
				break;
			case 12:
				_localctx = new JsonbPathDeleteContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(6164);
				match(JSONB_PATH_DELETE_);
				}
				break;
			case 13:
				_localctx = new JsonbPathContainAnyValueContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(6165);
				match(JSONB_PATH_CONTAIN_ANY_VALUE_);
				}
				break;
			case 14:
				_localctx = new JsonbPathPredicateCheckContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(6166);
				match(JSONB_PATH_PREDICATE_CHECK_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualAllOpContext extends ParserRuleContext {
		public AllOpContext allOp() {
			return getRuleContext(AllOpContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public QualAllOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualAllOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterQualAllOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitQualAllOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitQualAllOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualAllOpContext qualAllOp() throws RecognitionException {
		QualAllOpContext _localctx = new QualAllOpContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_qualAllOp);
		try {
			setState(6175);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND_:
			case OR_:
			case NOT_:
			case TILDE_:
			case VERTICAL_BAR_:
			case AMPERSAND_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case CARET_:
			case MOD_:
			case COLON_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case BACKSLASH_:
			case DOT_:
			case DOT_ASTERISK_:
			case SAFE_EQ_:
			case DEQ_:
			case EQ_:
			case CQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case POUND_:
			case LP_:
			case RP_:
			case LBE_:
			case RBE_:
			case LBT_:
			case RBT_:
			case COMMA_:
			case DQ_:
			case SQ_:
			case BQ_:
			case QUESTION_:
			case AT_:
			case SEMI_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case TYPE_CAST_:
				enterOuterAlt(_localctx, 1);
				{
				setState(6169);
				allOp();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(6170);
				match(OPERATOR);
				setState(6171);
				match(LP_);
				setState(6172);
				anyOperator();
				setState(6173);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AscDescContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(DDLStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DDLStatementParser.DESC, 0); }
		public AscDescContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ascDesc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAscDesc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAscDesc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAscDesc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AscDescContext ascDesc() throws RecognitionException {
		AscDescContext _localctx = new AscDescContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_ascDesc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6177);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnyOperatorContext extends ParserRuleContext {
		public AllOpContext allOp() {
			return getRuleContext(AllOpContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DDLStatementParser.DOT_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public AnyOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAnyOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAnyOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAnyOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnyOperatorContext anyOperator() throws RecognitionException {
		AnyOperatorContext _localctx = new AnyOperatorContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_anyOperator);
		try {
			setState(6184);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND_:
			case OR_:
			case NOT_:
			case TILDE_:
			case VERTICAL_BAR_:
			case AMPERSAND_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case CARET_:
			case MOD_:
			case COLON_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case BACKSLASH_:
			case DOT_:
			case DOT_ASTERISK_:
			case SAFE_EQ_:
			case DEQ_:
			case EQ_:
			case CQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case POUND_:
			case LP_:
			case RP_:
			case LBE_:
			case RBE_:
			case LBT_:
			case RBT_:
			case COMMA_:
			case DQ_:
			case SQ_:
			case BQ_:
			case QUESTION_:
			case AT_:
			case SEMI_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case TYPE_CAST_:
				enterOuterAlt(_localctx, 1);
				{
				setState(6179);
				allOp();
				}
				break;
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(6180);
				colId();
				setState(6181);
				match(DOT_);
				setState(6182);
				anyOperator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameClauseContext extends ParserRuleContext {
		public FrameExtentContext frameExtent() {
			return getRuleContext(FrameExtentContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(DDLStatementParser.RANGE, 0); }
		public TerminalNode ROWS() { return getToken(DDLStatementParser.ROWS, 0); }
		public TerminalNode GROUPS() { return getToken(DDLStatementParser.GROUPS, 0); }
		public WindowExclusionClauseContext windowExclusionClause() {
			return getRuleContext(WindowExclusionClauseContext.class,0);
		}
		public FrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFrameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFrameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameClauseContext frameClause() throws RecognitionException {
		FrameClauseContext _localctx = new FrameClauseContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_frameClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6186);
			_la = _input.LA(1);
			if ( !(_la==ROWS || _la==RANGE || _la==GROUPS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6187);
			frameExtent();
			setState(6189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE) {
				{
				setState(6188);
				windowExclusionClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameExtentContext extends ParserRuleContext {
		public List<FrameBoundContext> frameBound() {
			return getRuleContexts(FrameBoundContext.class);
		}
		public FrameBoundContext frameBound(int i) {
			return getRuleContext(FrameBoundContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(DDLStatementParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DDLStatementParser.AND, 0); }
		public FrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameExtent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFrameExtent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFrameExtent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameExtentContext frameExtent() throws RecognitionException {
		FrameExtentContext _localctx = new FrameExtentContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_frameExtent);
		try {
			setState(6197);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case OR_:
			case PLUS_:
			case MINUS_:
			case LP_:
			case QUESTION_:
			case JSON_EXTRACT_:
			case JSON_EXTRACT_TEXT_:
			case JSON_PATH_EXTRACT_:
			case JSON_PATH_EXTRACT_TEXT_:
			case JSONB_CONTAIN_RIGHT_:
			case JSONB_CONTAIN_LEFT_:
			case JSONB_CONTAIN_ALL_TOP_KEY_:
			case JSONB_PATH_DELETE_:
			case JSONB_PATH_CONTAIN_ANY_VALUE_:
			case JSONB_PATH_PREDICATE_CHECK_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case UNIQUE:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(6191);
				frameBound();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(6192);
				match(BETWEEN);
				setState(6193);
				frameBound();
				setState(6194);
				match(AND);
				setState(6195);
				frameBound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBoundContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(DDLStatementParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(DDLStatementParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(DDLStatementParser.FOLLOWING, 0); }
		public TerminalNode CURRENT() { return getToken(DDLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public FrameBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFrameBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFrameBound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFrameBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBoundContext frameBound() throws RecognitionException {
		FrameBoundContext _localctx = new FrameBoundContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_frameBound);
		try {
			setState(6211);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6199);
				match(UNBOUNDED);
				setState(6200);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6201);
				match(UNBOUNDED);
				setState(6202);
				match(FOLLOWING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6203);
				match(CURRENT);
				setState(6204);
				match(ROW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6205);
				aExpr(0);
				setState(6206);
				match(PRECEDING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6208);
				aExpr(0);
				setState(6209);
				match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowExclusionClauseContext extends ParserRuleContext {
		public TerminalNode EXCLUDE() { return getToken(DDLStatementParser.EXCLUDE, 0); }
		public TerminalNode CURRENT() { return getToken(DDLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode GROUP() { return getToken(DDLStatementParser.GROUP, 0); }
		public TerminalNode TIES() { return getToken(DDLStatementParser.TIES, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(DDLStatementParser.OTHERS, 0); }
		public WindowExclusionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowExclusionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWindowExclusionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWindowExclusionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWindowExclusionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowExclusionClauseContext windowExclusionClause() throws RecognitionException {
		WindowExclusionClauseContext _localctx = new WindowExclusionClauseContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_windowExclusionClause);
		try {
			setState(6223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,565,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6213);
				match(EXCLUDE);
				setState(6214);
				match(CURRENT);
				setState(6215);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6216);
				match(EXCLUDE);
				setState(6217);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6218);
				match(EXCLUDE);
				setState(6219);
				match(TIES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6220);
				match(EXCLUDE);
				setState(6221);
				match(NO);
				setState(6222);
				match(OTHERS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public RowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowContext row() throws RecognitionException {
		RowContext _localctx = new RowContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_row);
		try {
			setState(6239);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6225);
				match(ROW);
				setState(6226);
				match(LP_);
				setState(6227);
				exprList(0);
				setState(6228);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6230);
				match(ROW);
				setState(6231);
				match(LP_);
				setState(6232);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6233);
				match(LP_);
				setState(6234);
				exprList(0);
				setState(6235);
				match(COMMA_);
				setState(6236);
				aExpr(0);
				setState(6237);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplicitRowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ExplicitRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicitRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExplicitRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExplicitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExplicitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplicitRowContext explicitRow() throws RecognitionException {
		ExplicitRowContext _localctx = new ExplicitRowContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_explicitRow);
		try {
			setState(6249);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,567,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6241);
				match(ROW);
				setState(6242);
				match(LP_);
				setState(6243);
				exprList(0);
				setState(6244);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6246);
				match(ROW);
				setState(6247);
				match(LP_);
				setState(6248);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImplicitRowContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ImplicitRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicitRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterImplicitRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitImplicitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitImplicitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImplicitRowContext implicitRow() throws RecognitionException {
		ImplicitRowContext _localctx = new ImplicitRowContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_implicitRow);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6251);
			match(LP_);
			setState(6252);
			exprList(0);
			setState(6253);
			match(COMMA_);
			setState(6254);
			aExpr(0);
			setState(6255);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubTypeContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(DDLStatementParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(DDLStatementParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public SubTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSubType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSubType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSubType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubTypeContext subType() throws RecognitionException {
		SubTypeContext _localctx = new SubTypeContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_subType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6257);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExprContext extends ParserRuleContext {
		public TerminalNode LBT_() { return getToken(DDLStatementParser.LBT_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RBT_() { return getToken(DDLStatementParser.RBT_, 0); }
		public ArrayExprListContext arrayExprList() {
			return getRuleContext(ArrayExprListContext.class,0);
		}
		public ArrayExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterArrayExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitArrayExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitArrayExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExprContext arrayExpr() throws RecognitionException {
		ArrayExprContext _localctx = new ArrayExprContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_arrayExpr);
		try {
			setState(6269);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6259);
				match(LBT_);
				setState(6260);
				exprList(0);
				setState(6261);
				match(RBT_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6263);
				match(LBT_);
				setState(6264);
				arrayExprList();
				setState(6265);
				match(RBT_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6267);
				match(LBT_);
				setState(6268);
				match(RBT_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExprListContext extends ParserRuleContext {
		public List<ArrayExprContext> arrayExpr() {
			return getRuleContexts(ArrayExprContext.class);
		}
		public ArrayExprContext arrayExpr(int i) {
			return getRuleContext(ArrayExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public ArrayExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterArrayExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitArrayExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitArrayExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExprListContext arrayExprList() throws RecognitionException {
		ArrayExprListContext _localctx = new ArrayExprListContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_arrayExprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6271);
			arrayExpr();
			setState(6276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6272);
				match(COMMA_);
				setState(6273);
				arrayExpr();
				}
				}
				setState(6278);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgListContext extends ParserRuleContext {
		public List<FuncArgExprContext> funcArgExpr() {
			return getRuleContexts(FuncArgExprContext.class);
		}
		public FuncArgExprContext funcArgExpr(int i) {
			return getRuleContext(FuncArgExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public FuncArgListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncArgList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncArgList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncArgList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgListContext funcArgList() throws RecognitionException {
		FuncArgListContext _localctx = new FuncArgListContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_funcArgList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6279);
			funcArgExpr();
			setState(6284);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,570,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6280);
					match(COMMA_);
					setState(6281);
					funcArgExpr();
					}
					} 
				}
				setState(6286);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,570,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParamNameContext extends ParserRuleContext {
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public ParamNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paramName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterParamName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitParamName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitParamName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParamNameContext paramName() throws RecognitionException {
		ParamNameContext _localctx = new ParamNameContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_paramName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6287);
			typeFunctionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgExprContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public ParamNameContext paramName() {
			return getRuleContext(ParamNameContext.class,0);
		}
		public TerminalNode CQ_() { return getToken(DDLStatementParser.CQ_, 0); }
		public TerminalNode GTE_() { return getToken(DDLStatementParser.GTE_, 0); }
		public FuncArgExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncArgExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncArgExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncArgExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgExprContext funcArgExpr() throws RecognitionException {
		FuncArgExprContext _localctx = new FuncArgExprContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_funcArgExpr);
		try {
			setState(6298);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6289);
				aExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6290);
				paramName();
				setState(6291);
				match(CQ_);
				setState(6292);
				aExpr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6294);
				paramName();
				setState(6295);
				match(GTE_);
				setState(6296);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeListContext extends ParserRuleContext {
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeListContext typeList() throws RecognitionException {
		TypeListContext _localctx = new TypeListContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_typeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6300);
			typeName();
			setState(6305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6301);
				match(COMMA_);
				setState(6302);
				typeName();
				}
				}
				setState(6307);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncApplicationContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public FuncArgListContext funcArgList() {
			return getRuleContext(FuncArgListContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public TerminalNode VARIADIC() { return getToken(DDLStatementParser.VARIADIC, 0); }
		public FuncArgExprContext funcArgExpr() {
			return getRuleContext(FuncArgExprContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(DDLStatementParser.DISTINCT, 0); }
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public FuncApplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcApplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncApplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncApplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncApplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncApplicationContext funcApplication() throws RecognitionException {
		FuncApplicationContext _localctx = new FuncApplicationContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_funcApplication);
		int _la;
		try {
			setState(6363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6308);
				funcName();
				setState(6309);
				match(LP_);
				setState(6310);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6312);
				funcName();
				setState(6313);
				match(LP_);
				setState(6314);
				funcArgList();
				setState(6316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6315);
					sortClause();
					}
				}

				setState(6318);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6320);
				funcName();
				setState(6321);
				match(LP_);
				setState(6322);
				match(VARIADIC);
				setState(6323);
				funcArgExpr();
				setState(6325);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6324);
					sortClause();
					}
				}

				setState(6327);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6329);
				funcName();
				setState(6330);
				match(LP_);
				setState(6331);
				funcArgList();
				setState(6332);
				match(COMMA_);
				setState(6333);
				match(VARIADIC);
				setState(6334);
				funcArgExpr();
				setState(6336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6335);
					sortClause();
					}
				}

				setState(6338);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6340);
				funcName();
				setState(6341);
				match(LP_);
				setState(6342);
				match(ALL);
				setState(6343);
				funcArgList();
				setState(6345);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6344);
					sortClause();
					}
				}

				setState(6347);
				match(RP_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6349);
				funcName();
				setState(6350);
				match(LP_);
				setState(6351);
				match(DISTINCT);
				setState(6352);
				funcArgList();
				setState(6354);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6353);
					sortClause();
					}
				}

				setState(6356);
				match(RP_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6358);
				funcName();
				setState(6359);
				match(LP_);
				setState(6360);
				match(ASTERISK_);
				setState(6361);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncNameContext extends ParserRuleContext {
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public FuncNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncNameContext funcName() throws RecognitionException {
		FuncNameContext _localctx = new FuncNameContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_funcName);
		try {
			setState(6369);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6365);
				typeFunctionName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6366);
				colId();
				setState(6367);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AexprConstContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public FuncArgListContext funcArgList() {
			return getRuleContext(FuncArgListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public TerminalNode TRUE() { return getToken(DDLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(DDLStatementParser.FALSE, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public AexprConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aexprConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAexprConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAexprConst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAexprConst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AexprConstContext aexprConst() throws RecognitionException {
		AexprConstContext _localctx = new AexprConstContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_aexprConst);
		int _la;
		try {
			setState(6388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,581,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6371);
				match(NUMBER_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6372);
				match(STRING_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6373);
				funcName();
				setState(6374);
				match(STRING_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6376);
				funcName();
				setState(6377);
				match(LP_);
				setState(6378);
				funcArgList();
				setState(6380);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6379);
					sortClause();
					}
				}

				setState(6382);
				match(RP_);
				setState(6383);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6385);
				match(TRUE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6386);
				match(FALSE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6387);
				match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterQualifiedName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitQualifiedName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitQualifiedName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedNameContext qualifiedName() throws RecognitionException {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_qualifiedName);
		try {
			setState(6394);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6390);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6391);
				colId();
				setState(6392);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColIdContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColIdContext colId() throws RecognitionException {
		ColIdContext _localctx = new ColIdContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_colId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6396);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeFunctionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public TypeFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTypeFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTypeFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTypeFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeFunctionNameContext typeFunctionName() throws RecognitionException {
		TypeFunctionNameContext _localctx = new TypeFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_typeFunctionName);
		try {
			setState(6401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6398);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6399);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6400);
				typeFuncNameKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionTableContext extends ParserRuleContext {
		public FunctionExprWindowlessContext functionExprWindowless() {
			return getRuleContext(FunctionExprWindowlessContext.class,0);
		}
		public OrdinalityContext ordinality() {
			return getRuleContext(OrdinalityContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(DDLStatementParser.ROWS, 0); }
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public RowsFromListContext rowsFromList() {
			return getRuleContext(RowsFromListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public FunctionTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFunctionTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFunctionTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFunctionTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionTableContext functionTable() throws RecognitionException {
		FunctionTableContext _localctx = new FunctionTableContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_functionTable);
		try {
			setState(6415);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6403);
				functionExprWindowless();
				setState(6405);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,584,_ctx) ) {
				case 1:
					{
					setState(6404);
					ordinality();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6407);
				match(ROWS);
				setState(6408);
				match(FROM);
				setState(6409);
				match(LP_);
				setState(6410);
				rowsFromList();
				setState(6411);
				match(RP_);
				setState(6413);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,585,_ctx) ) {
				case 1:
					{
					setState(6412);
					ordinality();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableContext extends ParserRuleContext {
		public TerminalNode XMLTABLE() { return getToken(DDLStatementParser.XMLTABLE, 0); }
		public List<TerminalNode> LP_() { return getTokens(DDLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(DDLStatementParser.LP_, i);
		}
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public XmlExistsArgumentContext xmlExistsArgument() {
			return getRuleContext(XmlExistsArgumentContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(DDLStatementParser.COLUMNS, 0); }
		public XmlTableColumnListContext xmlTableColumnList() {
			return getRuleContext(XmlTableColumnListContext.class,0);
		}
		public List<TerminalNode> RP_() { return getTokens(DDLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(DDLStatementParser.RP_, i);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(DDLStatementParser.XMLNAMESPACES, 0); }
		public XmlNamespaceListContext xmlNamespaceList() {
			return getRuleContext(XmlNamespaceListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public XmlTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableContext xmlTable() throws RecognitionException {
		XmlTableContext _localctx = new XmlTableContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_xmlTable);
		try {
			setState(6438);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6417);
				match(XMLTABLE);
				setState(6418);
				match(LP_);
				setState(6419);
				cExpr();
				setState(6420);
				xmlExistsArgument();
				setState(6421);
				match(COLUMNS);
				setState(6422);
				xmlTableColumnList();
				setState(6423);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6425);
				match(XMLTABLE);
				setState(6426);
				match(LP_);
				setState(6427);
				match(XMLNAMESPACES);
				setState(6428);
				match(LP_);
				setState(6429);
				xmlNamespaceList();
				setState(6430);
				match(RP_);
				setState(6431);
				match(COMMA_);
				setState(6432);
				cExpr();
				setState(6433);
				xmlExistsArgument();
				setState(6434);
				match(COLUMNS);
				setState(6435);
				xmlTableColumnList();
				setState(6436);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableColumnListContext extends ParserRuleContext {
		public List<XmlTableColumnElContext> xmlTableColumnEl() {
			return getRuleContexts(XmlTableColumnElContext.class);
		}
		public XmlTableColumnElContext xmlTableColumnEl(int i) {
			return getRuleContext(XmlTableColumnElContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public XmlTableColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlTableColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlTableColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlTableColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnListContext xmlTableColumnList() throws RecognitionException {
		XmlTableColumnListContext _localctx = new XmlTableColumnListContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_xmlTableColumnList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6440);
			xmlTableColumnEl();
			setState(6445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6441);
				match(COMMA_);
				setState(6442);
				xmlTableColumnEl();
				}
				}
				setState(6447);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableColumnElContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public XmlTableColumnOptionListContext xmlTableColumnOptionList() {
			return getRuleContext(XmlTableColumnOptionListContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(DDLStatementParser.ORDINALITY, 0); }
		public XmlTableColumnElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlTableColumnEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlTableColumnEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlTableColumnEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnElContext xmlTableColumnEl() throws RecognitionException {
		XmlTableColumnElContext _localctx = new XmlTableColumnElContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_xmlTableColumnEl);
		try {
			setState(6459);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6448);
				colId();
				setState(6449);
				typeName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6451);
				colId();
				setState(6452);
				typeName();
				setState(6453);
				xmlTableColumnOptionList(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6455);
				colId();
				setState(6456);
				match(FOR);
				setState(6457);
				match(ORDINALITY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableColumnOptionListContext extends ParserRuleContext {
		public XmlTableColumnOptionElContext xmlTableColumnOptionEl() {
			return getRuleContext(XmlTableColumnOptionElContext.class,0);
		}
		public XmlTableColumnOptionListContext xmlTableColumnOptionList() {
			return getRuleContext(XmlTableColumnOptionListContext.class,0);
		}
		public XmlTableColumnOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlTableColumnOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlTableColumnOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlTableColumnOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnOptionListContext xmlTableColumnOptionList() throws RecognitionException {
		return xmlTableColumnOptionList(0);
	}

	private XmlTableColumnOptionListContext xmlTableColumnOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		XmlTableColumnOptionListContext _localctx = new XmlTableColumnOptionListContext(_ctx, _parentState);
		XmlTableColumnOptionListContext _prevctx = _localctx;
		int _startState = 854;
		enterRecursionRule(_localctx, 854, RULE_xmlTableColumnOptionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6462);
			xmlTableColumnOptionEl();
			}
			_ctx.stop = _input.LT(-1);
			setState(6468);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,590,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new XmlTableColumnOptionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_xmlTableColumnOptionList);
					setState(6464);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6465);
					xmlTableColumnOptionEl();
					}
					} 
				}
				setState(6470);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,590,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class XmlTableColumnOptionElContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public XmlTableColumnOptionElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnOptionEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlTableColumnOptionEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlTableColumnOptionEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlTableColumnOptionEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnOptionElContext xmlTableColumnOptionEl() throws RecognitionException {
		XmlTableColumnOptionElContext _localctx = new XmlTableColumnOptionElContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_xmlTableColumnOptionEl);
		try {
			setState(6479);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(6471);
				identifier();
				setState(6472);
				bExpr(0);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6474);
				match(DEFAULT);
				setState(6475);
				bExpr(0);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 3);
				{
				setState(6476);
				match(NOT);
				setState(6477);
				match(NULL);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 4);
				{
				setState(6478);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlNamespaceListContext extends ParserRuleContext {
		public List<XmlNamespaceElContext> xmlNamespaceEl() {
			return getRuleContexts(XmlNamespaceElContext.class);
		}
		public XmlNamespaceElContext xmlNamespaceEl(int i) {
			return getRuleContext(XmlNamespaceElContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public XmlNamespaceListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlNamespaceList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlNamespaceList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlNamespaceList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlNamespaceList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlNamespaceListContext xmlNamespaceList() throws RecognitionException {
		XmlNamespaceListContext _localctx = new XmlNamespaceListContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_xmlNamespaceList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6481);
			xmlNamespaceEl();
			setState(6486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6482);
				match(COMMA_);
				setState(6483);
				xmlNamespaceEl();
				}
				}
				setState(6488);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlNamespaceElContext extends ParserRuleContext {
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public XmlNamespaceElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlNamespaceEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlNamespaceEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlNamespaceEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlNamespaceEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlNamespaceElContext xmlNamespaceEl() throws RecognitionException {
		XmlNamespaceElContext _localctx = new XmlNamespaceElContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_xmlNamespaceEl);
		try {
			setState(6495);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case OR_:
			case PLUS_:
			case MINUS_:
			case LP_:
			case QUESTION_:
			case JSON_EXTRACT_:
			case JSON_EXTRACT_TEXT_:
			case JSON_PATH_EXTRACT_:
			case JSON_PATH_EXTRACT_TEXT_:
			case JSONB_CONTAIN_RIGHT_:
			case JSONB_CONTAIN_LEFT_:
			case JSONB_CONTAIN_ALL_TOP_KEY_:
			case JSONB_PATH_DELETE_:
			case JSONB_PATH_CONTAIN_ANY_VALUE_:
			case JSONB_PATH_PREDICATE_CHECK_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(6489);
				bExpr(0);
				setState(6490);
				match(AS);
				setState(6491);
				identifier();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6493);
				match(DEFAULT);
				setState(6494);
				bExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncExprContext extends ParserRuleContext {
		public FuncApplicationContext funcApplication() {
			return getRuleContext(FuncApplicationContext.class,0);
		}
		public WithinGroupClauseContext withinGroupClause() {
			return getRuleContext(WithinGroupClauseContext.class,0);
		}
		public FilterClauseContext filterClause() {
			return getRuleContext(FilterClauseContext.class,0);
		}
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public FunctionExprCommonSubexprContext functionExprCommonSubexpr() {
			return getRuleContext(FunctionExprCommonSubexprContext.class,0);
		}
		public FuncExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncExprContext funcExpr() throws RecognitionException {
		FuncExprContext _localctx = new FuncExprContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_funcExpr);
		try {
			setState(6508);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,597,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6497);
				funcApplication();
				setState(6499);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
				case 1:
					{
					setState(6498);
					withinGroupClause();
					}
					break;
				}
				setState(6502);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
				case 1:
					{
					setState(6501);
					filterClause();
					}
					break;
				}
				setState(6505);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
				case 1:
					{
					setState(6504);
					overClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6507);
				functionExprCommonSubexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithinGroupClauseContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(DDLStatementParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(DDLStatementParser.GROUP, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public WithinGroupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withinGroupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWithinGroupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWithinGroupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWithinGroupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithinGroupClauseContext withinGroupClause() throws RecognitionException {
		WithinGroupClauseContext _localctx = new WithinGroupClauseContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_withinGroupClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6510);
			match(WITHIN);
			setState(6511);
			match(GROUP);
			setState(6512);
			match(LP_);
			setState(6513);
			sortClause();
			setState(6514);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterClauseContext extends ParserRuleContext {
		public TerminalNode FILTER() { return getToken(DDLStatementParser.FILTER, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode WHERE() { return getToken(DDLStatementParser.WHERE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public FilterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFilterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFilterClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFilterClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterClauseContext filterClause() throws RecognitionException {
		FilterClauseContext _localctx = new FilterClauseContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_filterClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6516);
			match(FILTER);
			setState(6517);
			match(LP_);
			setState(6518);
			match(WHERE);
			setState(6519);
			aExpr(0);
			setState(6520);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionExprWindowlessContext extends ParserRuleContext {
		public FuncApplicationContext funcApplication() {
			return getRuleContext(FuncApplicationContext.class,0);
		}
		public FunctionExprCommonSubexprContext functionExprCommonSubexpr() {
			return getRuleContext(FunctionExprCommonSubexprContext.class,0);
		}
		public FunctionExprWindowlessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionExprWindowless; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFunctionExprWindowless(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFunctionExprWindowless(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFunctionExprWindowless(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionExprWindowlessContext functionExprWindowless() throws RecognitionException {
		FunctionExprWindowlessContext _localctx = new FunctionExprWindowlessContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_functionExprWindowless);
		try {
			setState(6524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6522);
				funcApplication();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6523);
				functionExprCommonSubexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrdinalityContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(DDLStatementParser.ORDINALITY, 0); }
		public OrdinalityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordinality; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOrdinality(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOrdinality(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOrdinality(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrdinalityContext ordinality() throws RecognitionException {
		OrdinalityContext _localctx = new OrdinalityContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_ordinality);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6526);
			match(WITH);
			setState(6527);
			match(ORDINALITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionExprCommonSubexprContext extends ParserRuleContext {
		public TerminalNode COLLATION() { return getToken(DDLStatementParser.COLLATION, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(DDLStatementParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(DDLStatementParser.CURRENT_TIME, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DDLStatementParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(DDLStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(DDLStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(DDLStatementParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(DDLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(DDLStatementParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(DDLStatementParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(DDLStatementParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CAST() { return getToken(DDLStatementParser.CAST, 0); }
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode EXTRACT() { return getToken(DDLStatementParser.EXTRACT, 0); }
		public ExtractListContext extractList() {
			return getRuleContext(ExtractListContext.class,0);
		}
		public TerminalNode NORMALIZE() { return getToken(DDLStatementParser.NORMALIZE, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public UnicodeNormalFormContext unicodeNormalForm() {
			return getRuleContext(UnicodeNormalFormContext.class,0);
		}
		public TerminalNode OVERLAY() { return getToken(DDLStatementParser.OVERLAY, 0); }
		public OverlayListContext overlayList() {
			return getRuleContext(OverlayListContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(DDLStatementParser.POSITION, 0); }
		public PositionListContext positionList() {
			return getRuleContext(PositionListContext.class,0);
		}
		public TerminalNode SUBSTRING() { return getToken(DDLStatementParser.SUBSTRING, 0); }
		public SubstrListContext substrList() {
			return getRuleContext(SubstrListContext.class,0);
		}
		public TerminalNode TREAT() { return getToken(DDLStatementParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(DDLStatementParser.TRIM, 0); }
		public TerminalNode BOTH() { return getToken(DDLStatementParser.BOTH, 0); }
		public TrimListContext trimList() {
			return getRuleContext(TrimListContext.class,0);
		}
		public TerminalNode LEADING() { return getToken(DDLStatementParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(DDLStatementParser.TRAILING, 0); }
		public TerminalNode NULLIF() { return getToken(DDLStatementParser.NULLIF, 0); }
		public TerminalNode COALESCE() { return getToken(DDLStatementParser.COALESCE, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode GREATEST() { return getToken(DDLStatementParser.GREATEST, 0); }
		public TerminalNode LEAST() { return getToken(DDLStatementParser.LEAST, 0); }
		public TerminalNode XMLCONCAT() { return getToken(DDLStatementParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(DDLStatementParser.XMLELEMENT, 0); }
		public TerminalNode NAME() { return getToken(DDLStatementParser.NAME, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public XmlAttributesContext xmlAttributes() {
			return getRuleContext(XmlAttributesContext.class,0);
		}
		public TerminalNode XMLEXISTS() { return getToken(DDLStatementParser.XMLEXISTS, 0); }
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public XmlExistsArgumentContext xmlExistsArgument() {
			return getRuleContext(XmlExistsArgumentContext.class,0);
		}
		public TerminalNode XMLFOREST() { return getToken(DDLStatementParser.XMLFOREST, 0); }
		public XmlAttributeListContext xmlAttributeList() {
			return getRuleContext(XmlAttributeListContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(DDLStatementParser.XMLPARSE, 0); }
		public DocumentOrContentContext documentOrContent() {
			return getRuleContext(DocumentOrContentContext.class,0);
		}
		public XmlWhitespaceOptionContext xmlWhitespaceOption() {
			return getRuleContext(XmlWhitespaceOptionContext.class,0);
		}
		public TerminalNode XMLPI() { return getToken(DDLStatementParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(DDLStatementParser.XMLROOT, 0); }
		public XmlRootVersionContext xmlRootVersion() {
			return getRuleContext(XmlRootVersionContext.class,0);
		}
		public XmlRootStandaloneContext xmlRootStandalone() {
			return getRuleContext(XmlRootStandaloneContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(DDLStatementParser.XMLSERIALIZE, 0); }
		public SimpleTypeNameContext simpleTypeName() {
			return getRuleContext(SimpleTypeNameContext.class,0);
		}
		public FunctionExprCommonSubexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionExprCommonSubexpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFunctionExprCommonSubexpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFunctionExprCommonSubexpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFunctionExprCommonSubexpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionExprCommonSubexprContext functionExprCommonSubexpr() throws RecognitionException {
		FunctionExprCommonSubexprContext _localctx = new FunctionExprCommonSubexprContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_functionExprCommonSubexpr);
		int _la;
		try {
			setState(6741);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6529);
				match(COLLATION);
				setState(6530);
				match(FOR);
				setState(6531);
				match(LP_);
				setState(6532);
				aExpr(0);
				setState(6533);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6535);
				match(CURRENT_DATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6536);
				match(CURRENT_TIME);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6537);
				match(CURRENT_TIME);
				setState(6538);
				match(LP_);
				setState(6539);
				match(NUMBER_);
				setState(6540);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6541);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6542);
				match(CURRENT_TIMESTAMP);
				setState(6543);
				match(LP_);
				setState(6544);
				match(NUMBER_);
				setState(6545);
				match(RP_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6546);
				match(LOCALTIME);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6547);
				match(LOCALTIME);
				setState(6548);
				match(LP_);
				setState(6549);
				match(NUMBER_);
				setState(6550);
				match(RP_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6551);
				match(LOCALTIMESTAMP);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6552);
				match(LOCALTIMESTAMP);
				setState(6553);
				match(LP_);
				setState(6554);
				match(NUMBER_);
				setState(6555);
				match(RP_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6556);
				match(CURRENT_ROLE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6557);
				match(CURRENT_USER);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6558);
				match(SESSION_USER);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6559);
				match(USER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6560);
				match(CURRENT_CATALOG);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6561);
				match(CURRENT_SCHEMA);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6562);
				match(CAST);
				setState(6563);
				match(LP_);
				setState(6564);
				aExpr(0);
				setState(6565);
				match(AS);
				setState(6566);
				typeName();
				setState(6567);
				match(RP_);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6569);
				match(EXTRACT);
				setState(6570);
				match(LP_);
				setState(6572);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (KEY - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (IF - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (BY - 132)) | (1L << (BEGIN - 132)) | (1L << (COMMIT - 132)) | (1L << (ROLLBACK - 132)) | (1L << (SAVEPOINT - 132)) | (1L << (DOUBLE - 132)) | (1L << (YEAR - 132)) | (1L << (MONTH - 132)) | (1L << (DAY - 132)) | (1L << (HOUR - 132)) | (1L << (MINUTE - 132)) | (1L << (SECOND - 132)) | (1L << (CURRENT - 132)) | (1L << (ENABLE - 132)) | (1L << (DISABLE - 132)) | (1L << (CALL - 132)) | (1L << (PRESERVE - 132)) | (1L << (DEFINER - 132)) | (1L << (SQL - 132)) | (1L << (CASCADED - 132)) | (1L << (LOCAL - 132)) | (1L << (CLOSE - 132)) | (1L << (NEXT - 132)) | (1L << (NAME - 132)) | (1L << (NAMES - 132)) | (1L << (TYPE - 132)) | (1L << (TEXT - 132)) | (1L << (REPEATABLE - 132)) | (1L << (VARYING - 132)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (VALUE - 197)) | (1L << (TIES - 197)) | (1L << (CUBE - 197)) | (1L << (SETS - 197)) | (1L << (OTHERS - 197)) | (1L << (AT - 197)) | (1L << (ADMIN - 197)) | (1L << (ESCAPE - 197)) | (1L << (EXCLUDE - 197)) | (1L << (PARTITION - 197)) | (1L << (UNKNOWN - 197)) | (1L << (ALWAYS - 197)) | (1L << (CASCADE - 197)) | (1L << (GENERATED - 197)) | (1L << (ISOLATION - 197)) | (1L << (LEVEL - 197)) | (1L << (NO - 197)) | (1L << (OPTION - 197)) | (1L << (PRIVILEGES - 197)) | (1L << (READ - 197)) | (1L << (ROLE - 197)) | (1L << (ROWS - 197)) | (1L << (START - 197)) | (1L << (TRANSACTION - 197)) | (1L << (ACTION - 197)) | (1L << (CACHE - 197)) | (1L << (CHARACTERISTICS - 197)) | (1L << (CLUSTER - 197)) | (1L << (COMMENTS - 197)) | (1L << (CONSTRAINTS - 197)) | (1L << (CYCLE - 197)) | (1L << (DATA - 197)) | (1L << (DATABASE - 197)) | (1L << (DEFAULTS - 197)) | (1L << (DEFERRED - 197)) | (1L << (DEPENDS - 197)) | (1L << (DOMAIN - 197)) | (1L << (EXCLUDING - 197)) | (1L << (EXECUTE - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (EXTENSION - 261)) | (1L << (EXTERNAL - 261)) | (1L << (FILTER - 261)) | (1L << (FIRST - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FORCE - 261)) | (1L << (GLOBAL - 261)) | (1L << (IDENTITY - 261)) | (1L << (IMMEDIATE - 261)) | (1L << (INCLUDING - 261)) | (1L << (INCREMENT - 261)) | (1L << (INDEXES - 261)) | (1L << (INHERIT - 261)) | (1L << (INHERITS - 261)) | (1L << (INCLUDE - 261)) | (1L << (LANGUAGE - 261)) | (1L << (LARGE - 261)) | (1L << (LAST - 261)) | (1L << (LOGGED - 261)) | (1L << (MATCH - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MINVALUE - 261)) | (1L << (NOTHING - 261)) | (1L << (NULLS - 261)) | (1L << (OBJECT - 261)) | (1L << (OIDS - 261)) | (1L << (OVER - 261)) | (1L << (OWNED - 261)) | (1L << (OWNER - 261)) | (1L << (PARTIAL - 261)) | (1L << (PRECEDING - 261)) | (1L << (RANGE - 261)) | (1L << (RENAME - 261)) | (1L << (REPLICA - 261)) | (1L << (RESET - 261)) | (1L << (RESTART - 261)) | (1L << (RESTRICT - 261)) | (1L << (ROUTINE - 261)) | (1L << (RULE - 261)) | (1L << (SECURITY - 261)) | (1L << (SEQUENCE - 261)) | (1L << (SESSION - 261)) | (1L << (SHOW - 261)) | (1L << (SIMPLE - 261)) | (1L << (STATISTICS - 261)) | (1L << (STORAGE - 261)) | (1L << (TABLESPACE - 261)) | (1L << (TEMP - 261)) | (1L << (TEMPORARY - 261)) | (1L << (UNBOUNDED - 261)) | (1L << (UNLOGGED - 261)) | (1L << (VALID - 261)) | (1L << (VALIDATE - 261)) | (1L << (WITHIN - 261)) | (1L << (WITHOUT - 261)) | (1L << (ZONE - 261)) | (1L << (OF - 261)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (UESCAPE - 325)) | (1L << (GROUPS - 325)) | (1L << (RECURSIVE - 325)) | (1L << (ENUM - 325)) | (1L << (XML - 325)) | (1L << (JSON - 325)) | (1L << (ORDINALITY - 325)) | (1L << (NFC - 325)) | (1L << (NFD - 325)) | (1L << (NFKC - 325)) | (1L << (NFKD - 325)) | (1L << (REF - 325)) | (1L << (PASSING - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (VERSION - 389)) | (1L << (YES - 389)) | (1L << (STANDALONE - 389)) | (1L << (MATERIALIZED - 389)) | (1L << (OPERATOR - 389)) | (1L << (SHARE - 389)) | (1L << (ROLLUP - 389)) | (1L << (DOCUMENT - 389)) | (1L << (NORMALIZED - 389)) | (1L << (NOWAIT - 389)) | (1L << (LOCKED - 389)) | (1L << (COLUMNS - 389)) | (1L << (CONTENT - 389)) | (1L << (STRIP - 389)) | (1L << (WHITESPACE - 389)) | (1L << (CONFLICT - 389)) | (1L << (OVERRIDING - 389)) | (1L << (SYSTEM - 389)) | (1L << (ABORT - 389)) | (1L << (ABSOLUTE - 389)) | (1L << (ACCESS - 389)) | (1L << (AFTER - 389)) | (1L << (AGGREGATE - 389)) | (1L << (ALSO - 389)) | (1L << (ATTACH - 389)) | (1L << (ATTRIBUTE - 389)) | (1L << (BACKWARD - 389)) | (1L << (BEFORE - 389)) | (1L << (ASSERTION - 389)) | (1L << (ASSIGNMENT - 389)) | (1L << (CONTINUE - 389)) | (1L << (CONVERSION - 389)) | (1L << (COPY - 389)) | (1L << (COST - 389)) | (1L << (CSV - 389)) | (1L << (CALLED - 389)) | (1L << (CATALOG - 389)) | (1L << (CHAIN - 389)) | (1L << (CHECKPOINT - 389)) | (1L << (CLASS - 389)) | (1L << (CONFIGURATION - 389)) | (1L << (COMMENT - 389)) | (1L << (DETACH - 389)) | (1L << (DICTIONARY - 389)) | (1L << (EXPRESSION - 389)) | (1L << (INSENSITIVE - 389)) | (1L << (DISCARD - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (OFF - 453)) | (1L << (INSTEAD - 453)) | (1L << (EXPLAIN - 453)) | (1L << (INPUT - 453)) | (1L << (INLINE - 453)) | (1L << (PARALLEL - 453)) | (1L << (LEAKPROOF - 453)) | (1L << (COMMITTED - 453)) | (1L << (ENCODING - 453)) | (1L << (IMPLICIT - 453)) | (1L << (DELIMITER - 453)) | (1L << (CURSOR - 453)) | (1L << (EACH - 453)) | (1L << (EVENT - 453)) | (1L << (DEALLOCATE - 453)) | (1L << (CONNECTION - 453)) | (1L << (DECLARE - 453)) | (1L << (FAMILY - 453)) | (1L << (FORWARD - 453)) | (1L << (EXCLUSIVE - 453)) | (1L << (FUNCTIONS - 453)) | (1L << (LOCATION - 453)) | (1L << (LABEL - 453)) | (1L << (DELIMITERS - 453)) | (1L << (HANDLER - 453)) | (1L << (HEADER - 453)) | (1L << (IMMUTABLE - 453)) | (1L << (GRANTED - 453)) | (1L << (HOLD - 453)) | (1L << (MAPPING - 453)) | (1L << (OLD - 453)) | (1L << (METHOD - 453)) | (1L << (LOAD - 453)) | (1L << (LISTEN - 453)) | (1L << (MODE - 453)) | (1L << (MOVE - 453)) | (1L << (PROCEDURAL - 453)) | (1L << (PARSER - 453)) | (1L << (PROCEDURES - 453)) | (1L << (ENCRYPTED - 453)) | (1L << (PUBLICATION - 453)) | (1L << (PROGRAM - 453)) | (1L << (REFERENCING - 453)) | (1L << (PLANS - 453)) | (1L << (REINDEX - 453)) | (1L << (PRIOR - 453)) | (1L << (PASSWORD - 453)) | (1L << (RELATIVE - 453)) | (1L << (QUOTE - 453)) | (1L << (ROUTINES - 453)) | (1L << (REPLACE - 453)) | (1L << (SNAPSHOT - 453)) | (1L << (REFRESH - 453)) | (1L << (PREPARE - 453)) | (1L << (OPTIONS - 453)) | (1L << (IMPORT - 453)) | (1L << (INVOKER - 453)) | (1L << (NEW - 453)) | (1L << (PREPARED - 453)) | (1L << (SCROLL - 453)) | (1L << (SEQUENCES - 453)) | (1L << (SYSID - 453)) | (1L << (REASSIGN - 453)) | (1L << (SERVER - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (SUBSCRIPTION - 517)) | (1L << (SEARCH - 517)) | (1L << (SCHEMAS - 517)) | (1L << (RECHECK - 517)) | (1L << (POLICY - 517)) | (1L << (NOTIFY - 517)) | (1L << (LOCK - 517)) | (1L << (RELEASE - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (RETURNS - 517)) | (1L << (STATEMENT - 517)) | (1L << (STDIN - 517)) | (1L << (STDOUT - 517)) | (1L << (TABLES - 517)) | (1L << (SUPPORT - 517)) | (1L << (STABLE - 517)) | (1L << (TEMPLATE - 517)) | (1L << (UNENCRYPTED - 517)) | (1L << (VIEWS - 517)) | (1L << (UNCOMMITTED - 517)) | (1L << (TRANSFORM - 517)) | (1L << (UNLISTEN - 517)) | (1L << (TRUSTED - 517)) | (1L << (VALIDATOR - 517)) | (1L << (UNTIL - 517)) | (1L << (VACUUM - 517)) | (1L << (VOLATILE - 517)) | (1L << (STORED - 517)) | (1L << (WRITE - 517)) | (1L << (STRICT - 517)) | (1L << (TYPES - 517)) | (1L << (WRAPPER - 517)) | (1L << (WORK - 517)) | (1L << (IDENTIFIER_ - 517)))) != 0)) {
					{
					setState(6571);
					extractList();
					}
				}

				setState(6574);
				match(RP_);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6575);
				match(NORMALIZE);
				setState(6576);
				match(LP_);
				setState(6577);
				aExpr(0);
				setState(6578);
				match(RP_);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6580);
				match(NORMALIZE);
				setState(6581);
				match(LP_);
				setState(6582);
				aExpr(0);
				setState(6583);
				match(COMMA_);
				setState(6584);
				unicodeNormalForm();
				setState(6585);
				match(RP_);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6587);
				match(OVERLAY);
				setState(6588);
				match(LP_);
				setState(6589);
				overlayList();
				setState(6590);
				match(RP_);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6592);
				match(POSITION);
				setState(6593);
				match(LP_);
				setState(6594);
				positionList();
				setState(6595);
				match(RP_);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6597);
				match(SUBSTRING);
				setState(6598);
				match(LP_);
				setState(6599);
				substrList();
				setState(6600);
				match(RP_);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6602);
				match(TREAT);
				setState(6603);
				match(LP_);
				setState(6604);
				aExpr(0);
				setState(6605);
				match(AS);
				setState(6606);
				typeName();
				setState(6607);
				match(RP_);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6609);
				match(TRIM);
				setState(6610);
				match(LP_);
				setState(6611);
				match(BOTH);
				setState(6612);
				trimList();
				setState(6613);
				match(RP_);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6615);
				match(TRIM);
				setState(6616);
				match(LP_);
				setState(6617);
				match(LEADING);
				setState(6618);
				trimList();
				setState(6619);
				match(RP_);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6621);
				match(TRIM);
				setState(6622);
				match(LP_);
				setState(6623);
				match(TRAILING);
				setState(6624);
				trimList();
				setState(6625);
				match(RP_);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6627);
				match(TRIM);
				setState(6628);
				match(LP_);
				setState(6629);
				trimList();
				setState(6630);
				match(RP_);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6632);
				match(NULLIF);
				setState(6633);
				match(LP_);
				setState(6634);
				aExpr(0);
				setState(6635);
				match(COMMA_);
				setState(6636);
				aExpr(0);
				setState(6637);
				match(RP_);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6639);
				match(COALESCE);
				setState(6640);
				match(LP_);
				setState(6641);
				exprList(0);
				setState(6642);
				match(RP_);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6644);
				match(GREATEST);
				setState(6645);
				match(LP_);
				setState(6646);
				exprList(0);
				setState(6647);
				match(RP_);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(6649);
				match(LEAST);
				setState(6650);
				match(LP_);
				setState(6651);
				exprList(0);
				setState(6652);
				match(RP_);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(6654);
				match(XMLCONCAT);
				setState(6655);
				match(LP_);
				setState(6656);
				exprList(0);
				setState(6657);
				match(RP_);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(6659);
				match(XMLELEMENT);
				setState(6660);
				match(LP_);
				setState(6661);
				match(NAME);
				setState(6662);
				identifier();
				setState(6663);
				match(RP_);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(6665);
				match(XMLELEMENT);
				setState(6666);
				match(LP_);
				setState(6667);
				match(NAME);
				setState(6668);
				identifier();
				setState(6669);
				match(COMMA_);
				setState(6670);
				xmlAttributes();
				setState(6671);
				match(RP_);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(6673);
				match(XMLELEMENT);
				setState(6674);
				match(LP_);
				setState(6675);
				match(NAME);
				setState(6676);
				identifier();
				setState(6677);
				match(COMMA_);
				setState(6678);
				exprList(0);
				setState(6679);
				match(RP_);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(6681);
				match(XMLELEMENT);
				setState(6682);
				match(LP_);
				setState(6683);
				match(NAME);
				setState(6684);
				identifier();
				setState(6685);
				match(COMMA_);
				setState(6686);
				xmlAttributes();
				setState(6687);
				match(COMMA_);
				setState(6688);
				exprList(0);
				setState(6689);
				match(RP_);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(6691);
				match(XMLEXISTS);
				setState(6692);
				match(LP_);
				setState(6693);
				cExpr();
				setState(6694);
				xmlExistsArgument();
				setState(6695);
				match(RP_);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(6697);
				match(XMLFOREST);
				setState(6698);
				match(LP_);
				setState(6699);
				xmlAttributeList();
				setState(6700);
				match(RP_);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(6702);
				match(XMLPARSE);
				setState(6703);
				match(LP_);
				setState(6704);
				documentOrContent();
				setState(6705);
				aExpr(0);
				setState(6706);
				xmlWhitespaceOption();
				setState(6707);
				match(RP_);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(6709);
				match(XMLPI);
				setState(6710);
				match(LP_);
				setState(6711);
				match(NAME);
				setState(6712);
				identifier();
				setState(6713);
				match(RP_);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(6715);
				match(XMLPI);
				setState(6716);
				match(LP_);
				setState(6717);
				match(NAME);
				setState(6718);
				identifier();
				setState(6719);
				match(COMMA_);
				setState(6720);
				aExpr(0);
				setState(6721);
				match(RP_);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(6723);
				match(XMLROOT);
				setState(6724);
				match(LP_);
				setState(6725);
				aExpr(0);
				setState(6726);
				match(COMMA_);
				setState(6727);
				xmlRootVersion();
				setState(6729);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(6728);
					xmlRootStandalone();
					}
				}

				setState(6731);
				match(RP_);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(6733);
				match(XMLSERIALIZE);
				setState(6734);
				match(LP_);
				setState(6735);
				documentOrContent();
				setState(6736);
				aExpr(0);
				setState(6737);
				match(AS);
				setState(6738);
				simpleTypeName();
				setState(6739);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeNameContext extends ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return getRuleContext(SimpleTypeNameContext.class,0);
		}
		public OptArrayBoundsContext optArrayBounds() {
			return getRuleContext(OptArrayBoundsContext.class,0);
		}
		public TerminalNode SETOF() { return getToken(DDLStatementParser.SETOF, 0); }
		public TerminalNode ARRAY() { return getToken(DDLStatementParser.ARRAY, 0); }
		public TerminalNode LBT_() { return getToken(DDLStatementParser.LBT_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode RBT_() { return getToken(DDLStatementParser.RBT_, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeNameContext typeName() throws RecognitionException {
		TypeNameContext _localctx = new TypeNameContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_typeName);
		try {
			setState(6770);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6743);
				simpleTypeName();
				setState(6744);
				optArrayBounds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6746);
				match(SETOF);
				setState(6747);
				simpleTypeName();
				setState(6748);
				optArrayBounds(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6750);
				simpleTypeName();
				setState(6751);
				match(ARRAY);
				setState(6752);
				match(LBT_);
				setState(6753);
				match(NUMBER_);
				setState(6754);
				match(RBT_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6756);
				match(SETOF);
				setState(6757);
				simpleTypeName();
				setState(6758);
				match(ARRAY);
				setState(6759);
				match(LBT_);
				setState(6760);
				match(NUMBER_);
				setState(6761);
				match(RBT_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6763);
				simpleTypeName();
				setState(6764);
				match(ARRAY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6766);
				match(SETOF);
				setState(6767);
				simpleTypeName();
				setState(6768);
				match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleTypeNameContext extends ParserRuleContext {
		public GenericTypeContext genericType() {
			return getRuleContext(GenericTypeContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public OptIntervalContext optInterval() {
			return getRuleContext(OptIntervalContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSimpleTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSimpleTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSimpleTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleTypeNameContext simpleTypeName() throws RecognitionException {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_simpleTypeName);
		try {
			setState(6785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6772);
				genericType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6773);
				numeric();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6774);
				bit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6775);
				character();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6776);
				constDatetime();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6777);
				constInterval();
				setState(6778);
				optInterval();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6780);
				constInterval();
				setState(6781);
				match(LP_);
				setState(6782);
				match(NUMBER_);
				setState(6783);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public ExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprListContext exprList() throws RecognitionException {
		return exprList(0);
	}

	private ExprListContext exprList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprListContext _localctx = new ExprListContext(_ctx, _parentState);
		ExprListContext _prevctx = _localctx;
		int _startState = 878;
		enterRecursionRule(_localctx, 878, RULE_exprList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6788);
			aExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(6795);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,604,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_exprList);
					setState(6790);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6791);
					match(COMMA_);
					setState(6792);
					aExpr(0);
					}
					} 
				}
				setState(6797);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,604,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExtractListContext extends ParserRuleContext {
		public ExtractArgContext extractArg() {
			return getRuleContext(ExtractArgContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public ExtractListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExtractList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExtractList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExtractList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtractListContext extractList() throws RecognitionException {
		ExtractListContext _localctx = new ExtractListContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_extractList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6798);
			extractArg();
			setState(6799);
			match(FROM);
			setState(6800);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtractArgContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(DDLStatementParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(DDLStatementParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(DDLStatementParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(DDLStatementParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(DDLStatementParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(DDLStatementParser.SECOND, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExtractArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExtractArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExtractArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExtractArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtractArgContext extractArg() throws RecognitionException {
		ExtractArgContext _localctx = new ExtractArgContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_extractArg);
		try {
			setState(6809);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6802);
				match(YEAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6803);
				match(MONTH);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6804);
				match(DAY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6805);
				match(HOUR);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6806);
				match(MINUTE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6807);
				match(SECOND);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6808);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericTypeContext extends ParserRuleContext {
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public TypeModifiersContext typeModifiers() {
			return getRuleContext(TypeModifiersContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGenericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGenericType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGenericType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericTypeContext genericType() throws RecognitionException {
		GenericTypeContext _localctx = new GenericTypeContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_genericType);
		try {
			setState(6820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6811);
				typeFunctionName();
				setState(6813);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
				case 1:
					{
					setState(6812);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6815);
				typeFunctionName();
				setState(6816);
				attrs(0);
				setState(6818);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
				case 1:
					{
					setState(6817);
					typeModifiers();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeModifiersContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TypeModifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeModifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTypeModifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTypeModifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTypeModifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeModifiersContext typeModifiers() throws RecognitionException {
		TypeModifiersContext _localctx = new TypeModifiersContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_typeModifiers);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6822);
			match(LP_);
			setState(6823);
			exprList(0);
			setState(6824);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode INT() { return getToken(DDLStatementParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(DDLStatementParser.INTEGER, 0); }
		public TerminalNode SMALLINT() { return getToken(DDLStatementParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(DDLStatementParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DDLStatementParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(DDLStatementParser.FLOAT, 0); }
		public OptFloatContext optFloat() {
			return getRuleContext(OptFloatContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(DDLStatementParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(DDLStatementParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(DDLStatementParser.DECIMAL, 0); }
		public TypeModifiersContext typeModifiers() {
			return getRuleContext(TypeModifiersContext.class,0);
		}
		public TerminalNode DEC() { return getToken(DDLStatementParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DDLStatementParser.NUMERIC, 0); }
		public TerminalNode BOOLEAN() { return getToken(DDLStatementParser.BOOLEAN, 0); }
		public TerminalNode FLOAT8() { return getToken(DDLStatementParser.FLOAT8, 0); }
		public TerminalNode FLOAT4() { return getToken(DDLStatementParser.FLOAT4, 0); }
		public TerminalNode INT2() { return getToken(DDLStatementParser.INT2, 0); }
		public TerminalNode INT4() { return getToken(DDLStatementParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(DDLStatementParser.INT8, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_numeric);
		try {
			setState(6853);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6826);
				match(INT);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(6827);
				match(INTEGER);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(6828);
				match(SMALLINT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(6829);
				match(BIGINT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(6830);
				match(REAL);
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 6);
				{
				setState(6831);
				match(FLOAT);
				setState(6832);
				optFloat();
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(6833);
				match(DOUBLE);
				setState(6834);
				match(PRECISION);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 8);
				{
				setState(6835);
				match(DECIMAL);
				setState(6837);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
				case 1:
					{
					setState(6836);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 9);
				{
				setState(6839);
				match(DEC);
				setState(6841);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,610,_ctx) ) {
				case 1:
					{
					setState(6840);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 10);
				{
				setState(6843);
				match(NUMERIC);
				setState(6845);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
				case 1:
					{
					setState(6844);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 11);
				{
				setState(6847);
				match(BOOLEAN);
				}
				break;
			case FLOAT8:
				enterOuterAlt(_localctx, 12);
				{
				setState(6848);
				match(FLOAT8);
				}
				break;
			case FLOAT4:
				enterOuterAlt(_localctx, 13);
				{
				setState(6849);
				match(FLOAT4);
				}
				break;
			case INT2:
				enterOuterAlt(_localctx, 14);
				{
				setState(6850);
				match(INT2);
				}
				break;
			case INT4:
				enterOuterAlt(_localctx, 15);
				{
				setState(6851);
				match(INT4);
				}
				break;
			case INT8:
				enterOuterAlt(_localctx, 16);
				{
				setState(6852);
				match(INT8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstDatetimeContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(DDLStatementParser.TIMESTAMP, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TimezoneContext timezone() {
			return getRuleContext(TimezoneContext.class,0);
		}
		public TerminalNode TIME() { return getToken(DDLStatementParser.TIME, 0); }
		public TerminalNode DATE() { return getToken(DDLStatementParser.DATE, 0); }
		public ConstDatetimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constDatetime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConstDatetime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConstDatetime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConstDatetime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstDatetimeContext constDatetime() throws RecognitionException {
		ConstDatetimeContext _localctx = new ConstDatetimeContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_constDatetime);
		try {
			setState(6878);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,617,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6855);
				match(TIMESTAMP);
				setState(6856);
				match(LP_);
				setState(6857);
				match(NUMBER_);
				setState(6858);
				match(RP_);
				setState(6860);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
				case 1:
					{
					setState(6859);
					timezone();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6862);
				match(TIMESTAMP);
				setState(6864);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
				case 1:
					{
					setState(6863);
					timezone();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6866);
				match(TIME);
				setState(6867);
				match(LP_);
				setState(6868);
				match(NUMBER_);
				setState(6869);
				match(RP_);
				setState(6871);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
				case 1:
					{
					setState(6870);
					timezone();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6873);
				match(TIME);
				setState(6875);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,616,_ctx) ) {
				case 1:
					{
					setState(6874);
					timezone();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6877);
				match(DATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimezoneContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(DDLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(DDLStatementParser.ZONE, 0); }
		public TerminalNode WITHOUT() { return getToken(DDLStatementParser.WITHOUT, 0); }
		public TimezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timezone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTimezone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTimezone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTimezone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimezoneContext timezone() throws RecognitionException {
		TimezoneContext _localctx = new TimezoneContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_timezone);
		try {
			setState(6886);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(6880);
				match(WITH);
				setState(6881);
				match(TIME);
				setState(6882);
				match(ZONE);
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6883);
				match(WITHOUT);
				setState(6884);
				match(TIME);
				setState(6885);
				match(ZONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterContext extends ParserRuleContext {
		public CharacterWithLengthContext characterWithLength() {
			return getRuleContext(CharacterWithLengthContext.class,0);
		}
		public CharacterWithoutLengthContext characterWithoutLength() {
			return getRuleContext(CharacterWithoutLengthContext.class,0);
		}
		public CharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterContext character() throws RecognitionException {
		CharacterContext _localctx = new CharacterContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_character);
		try {
			setState(6890);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,619,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6888);
				characterWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6889);
				characterWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithLengthContext extends ParserRuleContext {
		public CharacterClauseContext characterClause() {
			return getRuleContext(CharacterClauseContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public CharacterWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCharacterWithLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCharacterWithLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCharacterWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithLengthContext characterWithLength() throws RecognitionException {
		CharacterWithLengthContext _localctx = new CharacterWithLengthContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_characterWithLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6892);
			characterClause();
			setState(6893);
			match(LP_);
			setState(6894);
			match(NUMBER_);
			setState(6895);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithoutLengthContext extends ParserRuleContext {
		public CharacterClauseContext characterClause() {
			return getRuleContext(CharacterClauseContext.class,0);
		}
		public CharacterWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithoutLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCharacterWithoutLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCharacterWithoutLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCharacterWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithoutLengthContext characterWithoutLength() throws RecognitionException {
		CharacterWithoutLengthContext _localctx = new CharacterWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_characterWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6897);
			characterClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterClauseContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(DDLStatementParser.CHARACTER, 0); }
		public TerminalNode VARYING() { return getToken(DDLStatementParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(DDLStatementParser.CHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(DDLStatementParser.VARCHAR, 0); }
		public TerminalNode NATIONAL() { return getToken(DDLStatementParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(DDLStatementParser.NCHAR, 0); }
		public CharacterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCharacterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCharacterClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCharacterClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterClauseContext characterClause() throws RecognitionException {
		CharacterClauseContext _localctx = new CharacterClauseContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_characterClause);
		try {
			setState(6922);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,625,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6899);
				match(CHARACTER);
				setState(6901);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,620,_ctx) ) {
				case 1:
					{
					setState(6900);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6903);
				match(CHAR);
				setState(6905);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
				case 1:
					{
					setState(6904);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6907);
				match(VARCHAR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6908);
				match(NATIONAL);
				setState(6909);
				match(CHARACTER);
				setState(6911);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
				case 1:
					{
					setState(6910);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6913);
				match(NATIONAL);
				setState(6914);
				match(CHAR);
				setState(6916);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
				case 1:
					{
					setState(6915);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6918);
				match(NCHAR);
				setState(6920);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,624,_ctx) ) {
				case 1:
					{
					setState(6919);
					match(VARYING);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptFloatContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public OptFloatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optFloat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptFloat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptFloat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptFloat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptFloatContext optFloat() throws RecognitionException {
		OptFloatContext _localctx = new OptFloatContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_optFloat);
		try {
			setState(6928);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,626,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6924);
				match(LP_);
				setState(6925);
				match(NUMBER_);
				setState(6926);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttrsContext extends ParserRuleContext {
		public TerminalNode DOT_() { return getToken(DDLStatementParser.DOT_, 0); }
		public AttrNameContext attrName() {
			return getRuleContext(AttrNameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAttrs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAttrs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAttrs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrsContext attrs() throws RecognitionException {
		return attrs(0);
	}

	private AttrsContext attrs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AttrsContext _localctx = new AttrsContext(_ctx, _parentState);
		AttrsContext _prevctx = _localctx;
		int _startState = 904;
		enterRecursionRule(_localctx, 904, RULE_attrs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6931);
			match(DOT_);
			setState(6932);
			attrName();
			}
			_ctx.stop = _input.LT(-1);
			setState(6939);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,627,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttrsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_attrs);
					setState(6934);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6935);
					match(DOT_);
					setState(6936);
					attrName();
					}
					} 
				}
				setState(6941);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,627,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AttrNameContext extends ParserRuleContext {
		public ColLableContext colLable() {
			return getRuleContext(ColLableContext.class,0);
		}
		public AttrNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAttrName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAttrName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAttrName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrNameContext attrName() throws RecognitionException {
		AttrNameContext _localctx = new AttrNameContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_attrName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6942);
			colLable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColLableContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public ColLableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colLable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColLable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColLable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColLable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColLableContext colLable() throws RecognitionException {
		ColLableContext _localctx = new ColLableContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_colLable);
		try {
			setState(6948);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(6944);
				identifier();
				}
				break;
			case POSITION:
			case PRECISION:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case EXISTS:
			case BETWEEN:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case NULLIF:
			case NATIONAL:
			case NCHAR:
			case COALESCE:
			case GROUPING:
			case DEC:
			case ROW:
			case EXTRACT:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BIT:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case XMLATTRIBUTES:
			case GREATEST:
			case LEAST:
			case XMLTABLE:
			case XMLNAMESPACES:
			case NONE:
			case OUT:
			case INOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6945);
				colNameKeyword();
				}
				break;
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IS:
			case LIKE:
			case COLLATION:
			case OVERLAPS:
			case BINARY:
			case CONCURRENTLY:
			case TABLESAMPLE:
			case CURRENT_SCHEMA:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6946);
				typeFuncNameKeyword();
				}
				break;
			case SELECT:
			case CREATE:
			case GRANT:
			case TABLE:
			case COLUMN:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case FOREIGN:
			case INTO:
			case WITH:
			case UNION:
			case DISTINCT:
			case CASE:
			case WHEN:
			case CAST:
			case FROM:
			case USING:
			case WHERE:
			case AS:
			case ON:
			case ELSE:
			case THEN:
			case FOR:
			case TO:
			case AND:
			case OR:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case IN:
			case ALL:
			case ANY:
			case ORDER:
			case GROUP:
			case ASC:
			case DESC:
			case HAVING:
			case LIMIT:
			case OFFSET:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case DEFAULT:
			case DO:
			case CURRENT_USER:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case BOTH:
			case LEADING:
			case TRAILING:
			case INTERSECT:
			case EXCEPT:
			case FETCH:
			case WINDOW:
			case SOME:
			case END:
			case CHECK:
			case REFERENCES:
			case USER:
			case COLLATE:
			case DEFERRABLE:
			case INITIALLY:
			case ONLY:
			case SESSION_USER:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case SYMMETRIC:
			case ASYMMETRIC:
			case VARIADIC:
			case PLACING:
			case RETURNING:
			case LATERAL:
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6947);
				reservedKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitContext extends ParserRuleContext {
		public BitWithLengthContext bitWithLength() {
			return getRuleContext(BitWithLengthContext.class,0);
		}
		public BitWithoutLengthContext bitWithoutLength() {
			return getRuleContext(BitWithoutLengthContext.class,0);
		}
		public BitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterBit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitBit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitBit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitContext bit() throws RecognitionException {
		BitContext _localctx = new BitContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_bit);
		try {
			setState(6952);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6950);
				bitWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6951);
				bitWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitWithLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(DDLStatementParser.BIT, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode VARYING() { return getToken(DDLStatementParser.VARYING, 0); }
		public BitWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterBitWithLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitBitWithLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitBitWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithLengthContext bitWithLength() throws RecognitionException {
		BitWithLengthContext _localctx = new BitWithLengthContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_bitWithLength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6954);
			match(BIT);
			setState(6956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VARYING) {
				{
				setState(6955);
				match(VARYING);
				}
			}

			setState(6958);
			match(LP_);
			setState(6959);
			exprList(0);
			setState(6960);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitWithoutLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(DDLStatementParser.BIT, 0); }
		public TerminalNode VARYING() { return getToken(DDLStatementParser.VARYING, 0); }
		public BitWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithoutLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterBitWithoutLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitBitWithoutLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitBitWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithoutLengthContext bitWithoutLength() throws RecognitionException {
		BitWithoutLengthContext _localctx = new BitWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_bitWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6962);
			match(BIT);
			setState(6964);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
			case 1:
				{
				setState(6963);
				match(VARYING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstIntervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(DDLStatementParser.INTERVAL, 0); }
		public ConstIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConstInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConstInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConstInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstIntervalContext constInterval() throws RecognitionException {
		ConstIntervalContext _localctx = new ConstIntervalContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_constInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6966);
			match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptIntervalContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(DDLStatementParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(DDLStatementParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(DDLStatementParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(DDLStatementParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(DDLStatementParser.MINUTE, 0); }
		public IntervalSecondContext intervalSecond() {
			return getRuleContext(IntervalSecondContext.class,0);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public OptIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptIntervalContext optInterval() throws RecognitionException {
		OptIntervalContext _localctx = new OptIntervalContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_optInterval);
		try {
			setState(6996);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,632,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6968);
				match(YEAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6969);
				match(MONTH);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6970);
				match(DAY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6971);
				match(HOUR);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6972);
				match(MINUTE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6973);
				intervalSecond();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6974);
				match(YEAR);
				setState(6975);
				match(TO);
				setState(6976);
				match(MONTH);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6977);
				match(DAY);
				setState(6978);
				match(TO);
				setState(6979);
				match(HOUR);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6980);
				match(DAY);
				setState(6981);
				match(TO);
				setState(6982);
				match(MINUTE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6983);
				match(DAY);
				setState(6984);
				match(TO);
				setState(6985);
				intervalSecond();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6986);
				match(HOUR);
				setState(6987);
				match(TO);
				setState(6988);
				match(MINUTE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6989);
				match(HOUR);
				setState(6990);
				match(TO);
				setState(6991);
				intervalSecond();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6992);
				match(MINUTE);
				setState(6993);
				match(TO);
				setState(6994);
				intervalSecond();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptArrayBoundsContext extends ParserRuleContext {
		public OptArrayBoundsContext optArrayBounds() {
			return getRuleContext(OptArrayBoundsContext.class,0);
		}
		public TerminalNode LBT_() { return getToken(DDLStatementParser.LBT_, 0); }
		public TerminalNode RBT_() { return getToken(DDLStatementParser.RBT_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public OptArrayBoundsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optArrayBounds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptArrayBounds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptArrayBounds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptArrayBounds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptArrayBoundsContext optArrayBounds() throws RecognitionException {
		return optArrayBounds(0);
	}

	private OptArrayBoundsContext optArrayBounds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptArrayBoundsContext _localctx = new OptArrayBoundsContext(_ctx, _parentState);
		OptArrayBoundsContext _prevctx = _localctx;
		int _startState = 920;
		enterRecursionRule(_localctx, 920, RULE_optArrayBounds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(7008);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,634,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7006);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
					case 1:
						{
						_localctx = new OptArrayBoundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_optArrayBounds);
						setState(6999);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7000);
						match(LBT_);
						setState(7001);
						match(RBT_);
						}
						break;
					case 2:
						{
						_localctx = new OptArrayBoundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_optArrayBounds);
						setState(7002);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7003);
						match(LBT_);
						setState(7004);
						match(NUMBER_);
						setState(7005);
						match(RBT_);
						}
						break;
					}
					} 
				}
				setState(7010);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,634,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class IntervalSecondContext extends ParserRuleContext {
		public TerminalNode SECOND() { return getToken(DDLStatementParser.SECOND, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public IntervalSecondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalSecond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIntervalSecond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIntervalSecond(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIntervalSecond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalSecondContext intervalSecond() throws RecognitionException {
		IntervalSecondContext _localctx = new IntervalSecondContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_intervalSecond);
		try {
			setState(7016);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,635,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7011);
				match(SECOND);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7012);
				match(SECOND);
				setState(7013);
				match(LP_);
				setState(7014);
				match(NUMBER_);
				setState(7015);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnicodeNormalFormContext extends ParserRuleContext {
		public TerminalNode NFC() { return getToken(DDLStatementParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(DDLStatementParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(DDLStatementParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(DDLStatementParser.NFKD, 0); }
		public UnicodeNormalFormContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicodeNormalForm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterUnicodeNormalForm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitUnicodeNormalForm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitUnicodeNormalForm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnicodeNormalFormContext unicodeNormalForm() throws RecognitionException {
		UnicodeNormalFormContext _localctx = new UnicodeNormalFormContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_unicodeNormalForm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7018);
			_la = _input.LA(1);
			if ( !(((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (NFC - 382)) | (1L << (NFD - 382)) | (1L << (NFKC - 382)) | (1L << (NFKD - 382)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrimListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TrimListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTrimList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTrimList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTrimList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrimListContext trimList() throws RecognitionException {
		TrimListContext _localctx = new TrimListContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_trimList);
		try {
			setState(7027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7020);
				aExpr(0);
				setState(7021);
				match(FROM);
				setState(7022);
				exprList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7024);
				match(FROM);
				setState(7025);
				exprList(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7026);
				exprList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverlayListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public OverlayPlacingContext overlayPlacing() {
			return getRuleContext(OverlayPlacingContext.class,0);
		}
		public SubstrFromContext substrFrom() {
			return getRuleContext(SubstrFromContext.class,0);
		}
		public SubstrForContext substrFor() {
			return getRuleContext(SubstrForContext.class,0);
		}
		public OverlayListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlayList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOverlayList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOverlayList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOverlayList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverlayListContext overlayList() throws RecognitionException {
		OverlayListContext _localctx = new OverlayListContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_overlayList);
		try {
			setState(7038);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7029);
				aExpr(0);
				setState(7030);
				overlayPlacing();
				setState(7031);
				substrFrom();
				setState(7032);
				substrFor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7034);
				aExpr(0);
				setState(7035);
				overlayPlacing();
				setState(7036);
				substrFrom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverlayPlacingContext extends ParserRuleContext {
		public TerminalNode PLACING() { return getToken(DDLStatementParser.PLACING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public OverlayPlacingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlayPlacing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOverlayPlacing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOverlayPlacing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOverlayPlacing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverlayPlacingContext overlayPlacing() throws RecognitionException {
		OverlayPlacingContext _localctx = new OverlayPlacingContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_overlayPlacing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7040);
			match(PLACING);
			setState(7041);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstrFromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SubstrFromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substrFrom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSubstrFrom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSubstrFrom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSubstrFrom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstrFromContext substrFrom() throws RecognitionException {
		SubstrFromContext _localctx = new SubstrFromContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_substrFrom);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7043);
			match(FROM);
			setState(7044);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstrForContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SubstrForContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substrFor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSubstrFor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSubstrFor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSubstrFor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstrForContext substrFor() throws RecognitionException {
		SubstrForContext _localctx = new SubstrForContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_substrFor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7046);
			match(FOR);
			setState(7047);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PositionListContext extends ParserRuleContext {
		public List<BExprContext> bExpr() {
			return getRuleContexts(BExprContext.class);
		}
		public BExprContext bExpr(int i) {
			return getRuleContext(BExprContext.class,i);
		}
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public PositionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPositionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPositionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPositionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionListContext positionList() throws RecognitionException {
		PositionListContext _localctx = new PositionListContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_positionList);
		try {
			setState(7054);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case OR_:
			case PLUS_:
			case MINUS_:
			case LP_:
			case QUESTION_:
			case JSON_EXTRACT_:
			case JSON_EXTRACT_TEXT_:
			case JSON_PATH_EXTRACT_:
			case JSON_PATH_EXTRACT_TEXT_:
			case JSONB_CONTAIN_RIGHT_:
			case JSONB_CONTAIN_LEFT_:
			case JSONB_CONTAIN_ALL_TOP_KEY_:
			case JSONB_PATH_DELETE_:
			case JSONB_PATH_CONTAIN_ANY_VALUE_:
			case JSONB_PATH_PREDICATE_CHECK_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(7049);
				bExpr(0);
				setState(7050);
				match(IN);
				setState(7051);
				bExpr(0);
				}
				break;
			case RP_:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstrListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SubstrFromContext substrFrom() {
			return getRuleContext(SubstrFromContext.class,0);
		}
		public SubstrForContext substrFor() {
			return getRuleContext(SubstrForContext.class,0);
		}
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public SubstrListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substrList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSubstrList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSubstrList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSubstrList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstrListContext substrList() throws RecognitionException {
		SubstrListContext _localctx = new SubstrListContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_substrList);
		try {
			setState(7072);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7056);
				aExpr(0);
				setState(7057);
				substrFrom();
				setState(7058);
				substrFor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7060);
				aExpr(0);
				setState(7061);
				substrFor();
				setState(7062);
				substrFrom();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7064);
				aExpr(0);
				setState(7065);
				substrFrom();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7067);
				aExpr(0);
				setState(7068);
				substrFor();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7070);
				exprList(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlAttributesContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(DDLStatementParser.XMLATTRIBUTES, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public XmlAttributeListContext xmlAttributeList() {
			return getRuleContext(XmlAttributeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public XmlAttributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlAttributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlAttributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlAttributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlAttributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlAttributesContext xmlAttributes() throws RecognitionException {
		XmlAttributesContext _localctx = new XmlAttributesContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_xmlAttributes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7074);
			match(XMLATTRIBUTES);
			setState(7075);
			match(LP_);
			setState(7076);
			xmlAttributeList();
			setState(7077);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlAttributeListContext extends ParserRuleContext {
		public List<XmlAttributeElContext> xmlAttributeEl() {
			return getRuleContexts(XmlAttributeElContext.class);
		}
		public XmlAttributeElContext xmlAttributeEl(int i) {
			return getRuleContext(XmlAttributeElContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public XmlAttributeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlAttributeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlAttributeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlAttributeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlAttributeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlAttributeListContext xmlAttributeList() throws RecognitionException {
		XmlAttributeListContext _localctx = new XmlAttributeListContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_xmlAttributeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7079);
			xmlAttributeEl();
			setState(7084);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7080);
				match(COMMA_);
				setState(7081);
				xmlAttributeEl();
				}
				}
				setState(7086);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlAttributeElContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public XmlAttributeElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlAttributeEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlAttributeEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlAttributeEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlAttributeEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlAttributeElContext xmlAttributeEl() throws RecognitionException {
		XmlAttributeElContext _localctx = new XmlAttributeElContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_xmlAttributeEl);
		try {
			setState(7092);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,641,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7087);
				aExpr(0);
				setState(7088);
				match(AS);
				setState(7089);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7091);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlExistsArgumentContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(DDLStatementParser.PASSING, 0); }
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public List<XmlPassingMechContext> xmlPassingMech() {
			return getRuleContexts(XmlPassingMechContext.class);
		}
		public XmlPassingMechContext xmlPassingMech(int i) {
			return getRuleContext(XmlPassingMechContext.class,i);
		}
		public XmlExistsArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlExistsArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlExistsArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlExistsArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlExistsArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlExistsArgumentContext xmlExistsArgument() throws RecognitionException {
		XmlExistsArgumentContext _localctx = new XmlExistsArgumentContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_xmlExistsArgument);
		try {
			setState(7109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,642,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7094);
				match(PASSING);
				setState(7095);
				cExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7096);
				match(PASSING);
				setState(7097);
				cExpr();
				setState(7098);
				xmlPassingMech();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7100);
				match(PASSING);
				setState(7101);
				xmlPassingMech();
				setState(7102);
				cExpr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7104);
				match(PASSING);
				setState(7105);
				xmlPassingMech();
				setState(7106);
				cExpr();
				setState(7107);
				xmlPassingMech();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlPassingMechContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public TerminalNode REF() { return getToken(DDLStatementParser.REF, 0); }
		public TerminalNode VALUE() { return getToken(DDLStatementParser.VALUE, 0); }
		public XmlPassingMechContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlPassingMech; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlPassingMech(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlPassingMech(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlPassingMech(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlPassingMechContext xmlPassingMech() throws RecognitionException {
		XmlPassingMechContext _localctx = new XmlPassingMechContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_xmlPassingMech);
		try {
			setState(7115);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7111);
				match(BY);
				setState(7112);
				match(REF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7113);
				match(BY);
				setState(7114);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DocumentOrContentContext extends ParserRuleContext {
		public TerminalNode DOCUMENT() { return getToken(DDLStatementParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(DDLStatementParser.CONTENT, 0); }
		public DocumentOrContentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_documentOrContent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDocumentOrContent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDocumentOrContent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDocumentOrContent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DocumentOrContentContext documentOrContent() throws RecognitionException {
		DocumentOrContentContext _localctx = new DocumentOrContentContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_documentOrContent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7117);
			_la = _input.LA(1);
			if ( !(_la==DOCUMENT || _la==CONTENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlWhitespaceOptionContext extends ParserRuleContext {
		public TerminalNode PRESERVE() { return getToken(DDLStatementParser.PRESERVE, 0); }
		public TerminalNode WHITESPACE() { return getToken(DDLStatementParser.WHITESPACE, 0); }
		public TerminalNode STRIP() { return getToken(DDLStatementParser.STRIP, 0); }
		public XmlWhitespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlWhitespaceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlWhitespaceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlWhitespaceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlWhitespaceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlWhitespaceOptionContext xmlWhitespaceOption() throws RecognitionException {
		XmlWhitespaceOptionContext _localctx = new XmlWhitespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_xmlWhitespaceOption);
		try {
			setState(7124);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRESERVE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7119);
				match(PRESERVE);
				setState(7120);
				match(WHITESPACE);
				}
				break;
			case STRIP:
				enterOuterAlt(_localctx, 2);
				{
				setState(7121);
				match(STRIP);
				setState(7122);
				match(WHITESPACE);
				}
				break;
			case RP_:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlRootVersionContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(DDLStatementParser.VERSION, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(DDLStatementParser.VALUE, 0); }
		public XmlRootVersionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlRootVersion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlRootVersion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlRootVersion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlRootVersion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlRootVersionContext xmlRootVersion() throws RecognitionException {
		XmlRootVersionContext _localctx = new XmlRootVersionContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_xmlRootVersion);
		try {
			setState(7131);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,645,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7126);
				match(VERSION);
				setState(7127);
				aExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7128);
				match(VERSION);
				setState(7129);
				match(NO);
				setState(7130);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlRootStandaloneContext extends ParserRuleContext {
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public TerminalNode STANDALONE() { return getToken(DDLStatementParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(DDLStatementParser.YES, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(DDLStatementParser.VALUE, 0); }
		public XmlRootStandaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlRootStandalone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlRootStandalone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlRootStandalone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlRootStandalone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlRootStandaloneContext xmlRootStandalone() throws RecognitionException {
		XmlRootStandaloneContext _localctx = new XmlRootStandaloneContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_xmlRootStandalone);
		try {
			setState(7143);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7133);
				match(COMMA_);
				setState(7134);
				match(STANDALONE);
				setState(7135);
				match(YES);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7136);
				match(COMMA_);
				setState(7137);
				match(STANDALONE);
				setState(7138);
				match(NO);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7139);
				match(COMMA_);
				setState(7140);
				match(STANDALONE);
				setState(7141);
				match(NO);
				setState(7142);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsFromItemContext extends ParserRuleContext {
		public FunctionExprWindowlessContext functionExprWindowless() {
			return getRuleContext(FunctionExprWindowlessContext.class,0);
		}
		public ColumnDefListContext columnDefList() {
			return getRuleContext(ColumnDefListContext.class,0);
		}
		public RowsFromItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsFromItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRowsFromItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRowsFromItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRowsFromItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsFromItemContext rowsFromItem() throws RecognitionException {
		RowsFromItemContext _localctx = new RowsFromItemContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_rowsFromItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7145);
			functionExprWindowless();
			setState(7146);
			columnDefList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsFromListContext extends ParserRuleContext {
		public List<RowsFromItemContext> rowsFromItem() {
			return getRuleContexts(RowsFromItemContext.class);
		}
		public RowsFromItemContext rowsFromItem(int i) {
			return getRuleContext(RowsFromItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public RowsFromListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsFromList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRowsFromList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRowsFromList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRowsFromList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsFromListContext rowsFromList() throws RecognitionException {
		RowsFromListContext _localctx = new RowsFromListContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_rowsFromList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7148);
			rowsFromItem();
			setState(7153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7149);
				match(COMMA_);
				setState(7150);
				rowsFromItem();
				}
				}
				setState(7155);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefListContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ColumnDefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnDefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnDefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnDefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefListContext columnDefList() throws RecognitionException {
		ColumnDefListContext _localctx = new ColumnDefListContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_columnDefList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7156);
			match(AS);
			setState(7157);
			match(LP_);
			setState(7158);
			tableFuncElementList();
			setState(7159);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncElementListContext extends ParserRuleContext {
		public List<TableFuncElementContext> tableFuncElement() {
			return getRuleContexts(TableFuncElementContext.class);
		}
		public TableFuncElementContext tableFuncElement(int i) {
			return getRuleContext(TableFuncElementContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TableFuncElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableFuncElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableFuncElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableFuncElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementListContext tableFuncElementList() throws RecognitionException {
		TableFuncElementListContext _localctx = new TableFuncElementListContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_tableFuncElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7161);
			tableFuncElement();
			setState(7166);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7162);
				match(COMMA_);
				setState(7163);
				tableFuncElement();
				}
				}
				setState(7168);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncElementContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public TableFuncElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableFuncElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableFuncElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableFuncElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementContext tableFuncElement() throws RecognitionException {
		TableFuncElementContext _localctx = new TableFuncElementContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_tableFuncElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7169);
			colId();
			setState(7170);
			typeName();
			setState(7172);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(7171);
				collateClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateClauseContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(DDLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public CollateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collateClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCollateClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCollateClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCollateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateClauseContext collateClause() throws RecognitionException {
		CollateClauseContext _localctx = new CollateClauseContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_collateClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7174);
			match(COLLATE);
			setState(7176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(7175);
				match(EQ_);
				}
			}

			setState(7178);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnyNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public AnyNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAnyName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAnyName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAnyName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnyNameContext anyName() throws RecognitionException {
		AnyNameContext _localctx = new AnyNameContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_anyName);
		try {
			setState(7184);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,651,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7180);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7181);
				colId();
				setState(7182);
				attrs(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public AliasClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAliasClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAliasClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAliasClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasClauseContext aliasClause() throws RecognitionException {
		AliasClauseContext _localctx = new AliasClauseContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_aliasClause);
		try {
			setState(7200);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7186);
				match(AS);
				setState(7187);
				colId();
				setState(7188);
				match(LP_);
				setState(7189);
				nameList(0);
				setState(7190);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7192);
				match(AS);
				setState(7193);
				colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7194);
				colId();
				setState(7195);
				match(LP_);
				setState(7196);
				nameList(0);
				setState(7197);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7199);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameListContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public NameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameListContext nameList() throws RecognitionException {
		return nameList(0);
	}

	private NameListContext nameList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		NameListContext _localctx = new NameListContext(_ctx, _parentState);
		NameListContext _prevctx = _localctx;
		int _startState = 974;
		enterRecursionRule(_localctx, 974, RULE_nameList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7203);
			name();
			}
			_ctx.stop = _input.LT(-1);
			setState(7210);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,653,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NameListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_nameList);
					setState(7205);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7206);
					match(COMMA_);
					setState(7207);
					name();
					}
					} 
				}
				setState(7212);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,653,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class FuncAliasClauseContext extends ParserRuleContext {
		public AliasClauseContext aliasClause() {
			return getRuleContext(AliasClauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public FuncAliasClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcAliasClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncAliasClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncAliasClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncAliasClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncAliasClauseContext funcAliasClause() throws RecognitionException {
		FuncAliasClauseContext _localctx = new FuncAliasClauseContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_funcAliasClause);
		try {
			setState(7230);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7213);
				aliasClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7214);
				match(AS);
				setState(7215);
				match(LP_);
				setState(7216);
				tableFuncElementList();
				setState(7217);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7219);
				match(AS);
				setState(7220);
				colId();
				setState(7221);
				match(LP_);
				setState(7222);
				tableFuncElementList();
				setState(7223);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7225);
				colId();
				setState(7226);
				match(LP_);
				setState(7227);
				tableFuncElementList();
				setState(7228);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesampleClauseContext extends ParserRuleContext {
		public TerminalNode TABLESAMPLE() { return getToken(DDLStatementParser.TABLESAMPLE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public RepeatableClauseContext repeatableClause() {
			return getRuleContext(RepeatableClauseContext.class,0);
		}
		public TablesampleClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablesampleClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTablesampleClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTablesampleClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTablesampleClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesampleClauseContext tablesampleClause() throws RecognitionException {
		TablesampleClauseContext _localctx = new TablesampleClauseContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_tablesampleClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7232);
			match(TABLESAMPLE);
			setState(7233);
			funcName();
			setState(7234);
			match(LP_);
			setState(7235);
			exprList(0);
			setState(7236);
			match(RP_);
			setState(7238);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
			case 1:
				{
				setState(7237);
				repeatableClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatableClauseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(DDLStatementParser.REPEATABLE, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public RepeatableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRepeatableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRepeatableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRepeatableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatableClauseContext repeatableClause() throws RecognitionException {
		RepeatableClauseContext _localctx = new RepeatableClauseContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_repeatableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7240);
			match(REPEATABLE);
			setState(7241);
			match(LP_);
			setState(7242);
			aExpr(0);
			setState(7243);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllOrDistinctContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(DDLStatementParser.DISTINCT, 0); }
		public AllOrDistinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOrDistinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAllOrDistinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAllOrDistinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAllOrDistinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllOrDistinctContext allOrDistinct() throws RecognitionException {
		AllOrDistinctContext _localctx = new AllOrDistinctContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_allOrDistinct);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7245);
			_la = _input.LA(1);
			if ( !(_la==DISTINCT || _la==ALL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(DDLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public SortbyListContext sortbyList() {
			return getRuleContext(SortbyListContext.class,0);
		}
		public SortClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSortClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSortClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSortClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortClauseContext sortClause() throws RecognitionException {
		SortClauseContext _localctx = new SortClauseContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_sortClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7247);
			match(ORDER);
			setState(7248);
			match(BY);
			setState(7249);
			sortbyList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortbyListContext extends ParserRuleContext {
		public List<SortbyContext> sortby() {
			return getRuleContexts(SortbyContext.class);
		}
		public SortbyContext sortby(int i) {
			return getRuleContext(SortbyContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public SortbyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortbyList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSortbyList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSortbyList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSortbyList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyListContext sortbyList() throws RecognitionException {
		SortbyListContext _localctx = new SortbyListContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_sortbyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7251);
			sortby();
			setState(7256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7252);
				match(COMMA_);
				setState(7253);
				sortby();
				}
				}
				setState(7258);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortbyContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public QualAllOpContext qualAllOp() {
			return getRuleContext(QualAllOpContext.class,0);
		}
		public NullsOrderContext nullsOrder() {
			return getRuleContext(NullsOrderContext.class,0);
		}
		public AscDescContext ascDesc() {
			return getRuleContext(AscDescContext.class,0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSortby(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSortby(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSortby(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyContext sortby() throws RecognitionException {
		SortbyContext _localctx = new SortbyContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_sortby);
		int _la;
		try {
			setState(7272);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,660,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7259);
				aExpr(0);
				setState(7260);
				match(USING);
				setState(7261);
				qualAllOp();
				setState(7263);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(7262);
					nullsOrder();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7265);
				aExpr(0);
				setState(7267);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(7266);
					ascDesc();
					}
				}

				setState(7270);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(7269);
					nullsOrder();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullsOrderContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(DDLStatementParser.NULLS, 0); }
		public TerminalNode FIRST() { return getToken(DDLStatementParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(DDLStatementParser.LAST, 0); }
		public NullsOrderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullsOrder; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNullsOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNullsOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNullsOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullsOrderContext nullsOrder() throws RecognitionException {
		NullsOrderContext _localctx = new NullsOrderContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_nullsOrder);
		try {
			setState(7278);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7274);
				match(NULLS);
				setState(7275);
				match(FIRST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7276);
				match(NULLS);
				setState(7277);
				match(LAST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctClauseContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(DDLStatementParser.DISTINCT, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public DistinctClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDistinctClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDistinctClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDistinctClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctClauseContext distinctClause() throws RecognitionException {
		DistinctClauseContext _localctx = new DistinctClauseContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_distinctClause);
		try {
			setState(7287);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7280);
				match(DISTINCT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7281);
				match(DISTINCT);
				setState(7282);
				match(ON);
				setState(7283);
				match(LP_);
				setState(7284);
				exprList(0);
				setState(7285);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(DDLStatementParser.DISTINCT, 0); }
		public DistinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDistinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDistinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDistinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctContext distinct() throws RecognitionException {
		DistinctContext _localctx = new DistinctContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_distinct);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7289);
			match(DISTINCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(DDLStatementParser.OVER, 0); }
		public WindowSpecificationContext windowSpecification() {
			return getRuleContext(WindowSpecificationContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOverClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOverClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOverClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_overClause);
		try {
			setState(7295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7291);
				match(OVER);
				setState(7292);
				windowSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7293);
				match(OVER);
				setState(7294);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecificationContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public FrameClauseContext frameClause() {
			return getRuleContext(FrameClauseContext.class,0);
		}
		public WindowSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWindowSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWindowSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWindowSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecificationContext windowSpecification() throws RecognitionException {
		WindowSpecificationContext _localctx = new WindowSpecificationContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_windowSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7297);
			match(LP_);
			setState(7299);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
			case 1:
				{
				setState(7298);
				windowName();
				}
				break;
			}
			setState(7302);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(7301);
				partitionClause();
				}
			}

			setState(7305);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(7304);
				sortClause();
				}
			}

			setState(7308);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS || _la==RANGE || _la==GROUPS) {
				{
				setState(7307);
				frameClause();
				}
			}

			setState(7310);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7312);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DDLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_partitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7314);
			match(PARTITION);
			setState(7315);
			match(BY);
			setState(7316);
			exprList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexParamsContext extends ParserRuleContext {
		public List<IndexElemContext> indexElem() {
			return getRuleContexts(IndexElemContext.class);
		}
		public IndexElemContext indexElem(int i) {
			return getRuleContext(IndexElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public IndexParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexParams; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexParams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexParamsContext indexParams() throws RecognitionException {
		IndexParamsContext _localctx = new IndexParamsContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_indexParams);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7318);
			indexElem();
			setState(7323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7319);
				match(COMMA_);
				setState(7320);
				indexElem();
				}
				}
				setState(7325);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexElemOptionsContext extends ParserRuleContext {
		public OptClassContext optClass() {
			return getRuleContext(OptClassContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public AscDescContext ascDesc() {
			return getRuleContext(AscDescContext.class,0);
		}
		public NullsOrderContext nullsOrder() {
			return getRuleContext(NullsOrderContext.class,0);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public IndexElemOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexElemOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexElemOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexElemOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexElemOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexElemOptionsContext indexElemOptions() throws RecognitionException {
		IndexElemOptionsContext _localctx = new IndexElemOptionsContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_indexElemOptions);
		int _la;
		try {
			setState(7347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(7326);
					collate();
					}
				}

				setState(7329);
				optClass();
				setState(7331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(7330);
					ascDesc();
					}
				}

				setState(7334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(7333);
					nullsOrder();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7337);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(7336);
					collate();
					}
				}

				setState(7339);
				anyName();
				setState(7340);
				reloptions();
				setState(7342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(7341);
					ascDesc();
					}
				}

				setState(7345);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(7344);
					nullsOrder();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndexElemOptionsContext indexElemOptions() {
			return getRuleContext(IndexElemOptionsContext.class,0);
		}
		public FunctionExprWindowlessContext functionExprWindowless() {
			return getRuleContext(FunctionExprWindowlessContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public IndexElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexElemContext indexElem() throws RecognitionException {
		IndexElemContext _localctx = new IndexElemContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_indexElem);
		try {
			setState(7360);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7349);
				colId();
				setState(7350);
				indexElemOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7352);
				functionExprWindowless();
				setState(7353);
				indexElemOptions();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7355);
				match(LP_);
				setState(7356);
				aExpr(0);
				setState(7357);
				match(RP_);
				setState(7358);
				indexElemOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(DDLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public CollateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCollate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateContext collate() throws RecognitionException {
		CollateContext _localctx = new CollateContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_collate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7362);
			match(COLLATE);
			setState(7363);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptClassContext extends ParserRuleContext {
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public OptClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptClassContext optClass() throws RecognitionException {
		OptClassContext _localctx = new OptClassContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_optClass);
		try {
			setState(7367);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7365);
				anyName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ReloptionListContext reloptionList() {
			return getRuleContext(ReloptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ReloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReloptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReloptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionsContext reloptions() throws RecognitionException {
		ReloptionsContext _localctx = new ReloptionsContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_reloptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7369);
			match(LP_);
			setState(7370);
			reloptionList();
			setState(7371);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionListContext extends ParserRuleContext {
		public List<ReloptionElemContext> reloptionElem() {
			return getRuleContexts(ReloptionElemContext.class);
		}
		public ReloptionElemContext reloptionElem(int i) {
			return getRuleContext(ReloptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public ReloptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReloptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReloptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReloptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionListContext reloptionList() throws RecognitionException {
		ReloptionListContext _localctx = new ReloptionListContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_reloptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7373);
			reloptionElem();
			setState(7378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7374);
				match(COMMA_);
				setState(7375);
				reloptionElem();
				}
				}
				setState(7380);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionElemContext extends ParserRuleContext {
		public List<AliasContext> alias() {
			return getRuleContexts(AliasContext.class);
		}
		public AliasContext alias(int i) {
			return getRuleContext(AliasContext.class,i);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public DefArgContext defArg() {
			return getRuleContext(DefArgContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DDLStatementParser.DOT_, 0); }
		public ReloptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptionElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReloptionElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReloptionElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReloptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionElemContext reloptionElem() throws RecognitionException {
		ReloptionElemContext _localctx = new ReloptionElemContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_reloptionElem);
		try {
			setState(7396);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7381);
				alias();
				setState(7382);
				match(EQ_);
				setState(7383);
				defArg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7385);
				alias();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7386);
				alias();
				setState(7387);
				match(DOT_);
				setState(7388);
				alias();
				setState(7389);
				match(EQ_);
				setState(7390);
				defArg();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7392);
				alias();
				setState(7393);
				match(DOT_);
				setState(7394);
				alias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefArgContext extends ParserRuleContext {
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public QualAllOpContext qualAllOp() {
			return getRuleContext(QualAllOpContext.class,0);
		}
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode NONE() { return getToken(DDLStatementParser.NONE, 0); }
		public DefArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefArgContext defArg() throws RecognitionException {
		DefArgContext _localctx = new DefArgContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_defArg);
		try {
			setState(7404);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7398);
				funcType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7399);
				reservedKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7400);
				qualAllOp();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7401);
				match(NUMBER_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7402);
				match(STRING_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7403);
				match(NONE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncTypeContext extends ParserRuleContext {
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public TerminalNode MOD_() { return getToken(DDLStatementParser.MOD_, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TerminalNode SETOF() { return getToken(DDLStatementParser.SETOF, 0); }
		public FuncTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncTypeContext funcType() throws RecognitionException {
		FuncTypeContext _localctx = new FuncTypeContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_funcType);
		try {
			setState(7418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7406);
				typeName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7407);
				typeFunctionName();
				setState(7408);
				attrs(0);
				setState(7409);
				match(MOD_);
				setState(7410);
				match(TYPE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7412);
				match(SETOF);
				setState(7413);
				typeFunctionName();
				setState(7414);
				attrs(0);
				setState(7415);
				match(MOD_);
				setState(7416);
				match(TYPE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectWithParensContext extends ParserRuleContext {
		public SelectWithParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectWithParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSelectWithParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSelectWithParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSelectWithParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectWithParensContext selectWithParens() throws RecognitionException {
		SelectWithParensContext _localctx = new SelectWithParensContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_selectWithParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7420);
			match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeNameContext dataTypeName() {
			return getRuleContext(DataTypeNameContext.class,0);
		}
		public DataTypeLengthContext dataTypeLength() {
			return getRuleContext(DataTypeLengthContext.class,0);
		}
		public CharacterSetContext characterSet() {
			return getRuleContext(CharacterSetContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<TerminalNode> STRING_() { return getTokens(DDLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DDLStatementParser.STRING_, i);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_dataType);
		int _la;
		try {
			setState(7449);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7422);
				dataTypeName();
				setState(7424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(7423);
					dataTypeLength();
					}
				}

				setState(7427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR || _la==CHARACTER) {
					{
					setState(7426);
					characterSet();
					}
				}

				setState(7430);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
				case 1:
					{
					setState(7429);
					collateClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7432);
				dataTypeName();
				setState(7433);
				match(LP_);
				setState(7434);
				match(STRING_);
				setState(7439);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(7435);
					match(COMMA_);
					setState(7436);
					match(STRING_);
					}
					}
					setState(7441);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7442);
				match(RP_);
				setState(7444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR || _la==CHARACTER) {
					{
					setState(7443);
					characterSet();
					}
				}

				setState(7447);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
				case 1:
					{
					setState(7446);
					collateClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeNameContext extends ParserRuleContext {
		public TerminalNode INT() { return getToken(DDLStatementParser.INT, 0); }
		public TerminalNode INT2() { return getToken(DDLStatementParser.INT2, 0); }
		public TerminalNode INT4() { return getToken(DDLStatementParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(DDLStatementParser.INT8, 0); }
		public TerminalNode SMALLINT() { return getToken(DDLStatementParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DDLStatementParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(DDLStatementParser.BIGINT, 0); }
		public TerminalNode DECIMAL() { return getToken(DDLStatementParser.DECIMAL, 0); }
		public TerminalNode NUMERIC() { return getToken(DDLStatementParser.NUMERIC, 0); }
		public TerminalNode REAL() { return getToken(DDLStatementParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(DDLStatementParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(DDLStatementParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(DDLStatementParser.FLOAT8, 0); }
		public TerminalNode DOUBLE() { return getToken(DDLStatementParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(DDLStatementParser.PRECISION, 0); }
		public TerminalNode SMALLSERIAL() { return getToken(DDLStatementParser.SMALLSERIAL, 0); }
		public TerminalNode SERIAL() { return getToken(DDLStatementParser.SERIAL, 0); }
		public TerminalNode BIGSERIAL() { return getToken(DDLStatementParser.BIGSERIAL, 0); }
		public TerminalNode MONEY() { return getToken(DDLStatementParser.MONEY, 0); }
		public TerminalNode VARCHAR() { return getToken(DDLStatementParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(DDLStatementParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DDLStatementParser.CHAR, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode NAME() { return getToken(DDLStatementParser.NAME, 0); }
		public TerminalNode BYTEA() { return getToken(DDLStatementParser.BYTEA, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DDLStatementParser.TIMESTAMP, 0); }
		public TerminalNode DATE() { return getToken(DDLStatementParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DDLStatementParser.TIME, 0); }
		public TerminalNode INTERVAL() { return getToken(DDLStatementParser.INTERVAL, 0); }
		public TerminalNode BOOLEAN() { return getToken(DDLStatementParser.BOOLEAN, 0); }
		public TerminalNode ENUM() { return getToken(DDLStatementParser.ENUM, 0); }
		public TerminalNode POINT() { return getToken(DDLStatementParser.POINT, 0); }
		public TerminalNode LINE() { return getToken(DDLStatementParser.LINE, 0); }
		public TerminalNode LSEG() { return getToken(DDLStatementParser.LSEG, 0); }
		public TerminalNode BOX() { return getToken(DDLStatementParser.BOX, 0); }
		public TerminalNode PATH() { return getToken(DDLStatementParser.PATH, 0); }
		public TerminalNode POLYGON() { return getToken(DDLStatementParser.POLYGON, 0); }
		public TerminalNode CIRCLE() { return getToken(DDLStatementParser.CIRCLE, 0); }
		public TerminalNode CIDR() { return getToken(DDLStatementParser.CIDR, 0); }
		public TerminalNode INET() { return getToken(DDLStatementParser.INET, 0); }
		public TerminalNode MACADDR() { return getToken(DDLStatementParser.MACADDR, 0); }
		public TerminalNode MACADDR8() { return getToken(DDLStatementParser.MACADDR8, 0); }
		public TerminalNode BIT() { return getToken(DDLStatementParser.BIT, 0); }
		public TerminalNode VARBIT() { return getToken(DDLStatementParser.VARBIT, 0); }
		public TerminalNode TSVECTOR() { return getToken(DDLStatementParser.TSVECTOR, 0); }
		public TerminalNode TSQUERY() { return getToken(DDLStatementParser.TSQUERY, 0); }
		public TerminalNode XML() { return getToken(DDLStatementParser.XML, 0); }
		public TerminalNode JSON() { return getToken(DDLStatementParser.JSON, 0); }
		public TerminalNode INT4RANGE() { return getToken(DDLStatementParser.INT4RANGE, 0); }
		public TerminalNode INT8RANGE() { return getToken(DDLStatementParser.INT8RANGE, 0); }
		public TerminalNode NUMRANGE() { return getToken(DDLStatementParser.NUMRANGE, 0); }
		public TerminalNode TSRANGE() { return getToken(DDLStatementParser.TSRANGE, 0); }
		public TerminalNode TSTZRANGE() { return getToken(DDLStatementParser.TSTZRANGE, 0); }
		public TerminalNode DATERANGE() { return getToken(DDLStatementParser.DATERANGE, 0); }
		public TerminalNode ARRAY() { return getToken(DDLStatementParser.ARRAY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public DataTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDataTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDataTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDataTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeNameContext dataTypeName() throws RecognitionException {
		DataTypeNameContext _localctx = new DataTypeNameContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_dataTypeName);
		try {
			setState(7509);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,689,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7451);
				match(INT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7452);
				match(INT2);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7453);
				match(INT4);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7454);
				match(INT8);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7455);
				match(SMALLINT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7456);
				match(INTEGER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7457);
				match(BIGINT);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7458);
				match(DECIMAL);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7459);
				match(NUMERIC);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7460);
				match(REAL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7461);
				match(FLOAT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7462);
				match(FLOAT4);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7463);
				match(FLOAT8);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7464);
				match(DOUBLE);
				setState(7465);
				match(PRECISION);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7466);
				match(SMALLSERIAL);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7467);
				match(SERIAL);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7468);
				match(BIGSERIAL);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7469);
				match(MONEY);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7470);
				match(VARCHAR);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7471);
				match(CHARACTER);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7472);
				match(CHAR);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7473);
				match(TEXT);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7474);
				match(NAME);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7475);
				match(BYTEA);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(7476);
				match(TIMESTAMP);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(7477);
				match(DATE);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(7478);
				match(TIME);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(7479);
				match(INTERVAL);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(7480);
				match(BOOLEAN);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(7481);
				match(ENUM);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(7482);
				match(POINT);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(7483);
				match(LINE);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(7484);
				match(LSEG);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(7485);
				match(BOX);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(7486);
				match(PATH);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(7487);
				match(POLYGON);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(7488);
				match(CIRCLE);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(7489);
				match(CIDR);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(7490);
				match(INET);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(7491);
				match(MACADDR);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(7492);
				match(MACADDR8);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(7493);
				match(BIT);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(7494);
				match(VARBIT);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(7495);
				match(TSVECTOR);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(7496);
				match(TSQUERY);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(7497);
				match(XML);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(7498);
				match(JSON);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(7499);
				match(INT4RANGE);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(7500);
				match(INT8RANGE);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(7501);
				match(NUMRANGE);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(7502);
				match(TSRANGE);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(7503);
				match(TSTZRANGE);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(7504);
				match(DATERANGE);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(7505);
				match(ARRAY);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(7506);
				identifier();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(7507);
				constDatetime();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(7508);
				typeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeLengthContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(DDLStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(DDLStatementParser.NUMBER_, i);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public DataTypeLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDataTypeLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDataTypeLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDataTypeLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeLengthContext dataTypeLength() throws RecognitionException {
		DataTypeLengthContext _localctx = new DataTypeLengthContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_dataTypeLength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7511);
			match(LP_);
			setState(7512);
			match(NUMBER_);
			setState(7515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(7513);
				match(COMMA_);
				setState(7514);
				match(NUMBER_);
				}
			}

			setState(7517);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterSetContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(DDLStatementParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DDLStatementParser.CHAR, 0); }
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public CharacterSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCharacterSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCharacterSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCharacterSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterSetContext characterSet() throws RecognitionException {
		CharacterSetContext _localctx = new CharacterSetContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_characterSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7519);
			_la = _input.LA(1);
			if ( !(_la==CHAR || _la==CHARACTER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7520);
			match(SET);
			setState(7522);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(7521);
				match(EQ_);
				}
			}

			setState(7524);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IgnoredIdentifierContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT_() { return getToken(DDLStatementParser.DOT_, 0); }
		public IgnoredIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIgnoredIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIgnoredIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIgnoredIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredIdentifierContext ignoredIdentifier() throws RecognitionException {
		IgnoredIdentifierContext _localctx = new IgnoredIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_ignoredIdentifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7526);
			identifier();
			setState(7529);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT_) {
				{
				setState(7527);
				match(DOT_);
				setState(7528);
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IgnoredIdentifiersContext extends ParserRuleContext {
		public List<IgnoredIdentifierContext> ignoredIdentifier() {
			return getRuleContexts(IgnoredIdentifierContext.class);
		}
		public IgnoredIdentifierContext ignoredIdentifier(int i) {
			return getRuleContext(IgnoredIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public IgnoredIdentifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredIdentifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIgnoredIdentifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIgnoredIdentifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIgnoredIdentifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredIdentifiersContext ignoredIdentifiers() throws RecognitionException {
		IgnoredIdentifiersContext _localctx = new IgnoredIdentifiersContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_ignoredIdentifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7531);
			ignoredIdentifier();
			setState(7536);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7532);
				match(COMMA_);
				setState(7533);
				ignoredIdentifier();
				}
				}
				setState(7538);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignedIconstContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode PLUS_() { return getToken(DDLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(DDLStatementParser.MINUS_, 0); }
		public SignedIconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedIconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSignedIconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSignedIconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSignedIconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignedIconstContext signedIconst() throws RecognitionException {
		SignedIconstContext _localctx = new SignedIconstContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_signedIconst);
		try {
			setState(7544);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(7539);
				match(NUMBER_);
				}
				break;
			case PLUS_:
				enterOuterAlt(_localctx, 2);
				{
				setState(7540);
				match(PLUS_);
				setState(7541);
				match(NUMBER_);
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 3);
				{
				setState(7542);
				match(MINUS_);
				setState(7543);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanOrStringContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(DDLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(DDLStatementParser.FALSE, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public BooleanOrStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanOrString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterBooleanOrString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitBooleanOrString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitBooleanOrString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanOrStringContext booleanOrString() throws RecognitionException {
		BooleanOrStringContext _localctx = new BooleanOrStringContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_booleanOrString);
		try {
			setState(7551);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7546);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7547);
				match(FALSE);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(7548);
				match(ON);
				}
				break;
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 4);
				{
				setState(7549);
				nonReservedWord();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 5);
				{
				setState(7550);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonReservedWordContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public NonReservedWordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReservedWord; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNonReservedWord(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNonReservedWord(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNonReservedWord(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedWordContext nonReservedWord() throws RecognitionException {
		NonReservedWordContext _localctx = new NonReservedWordContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_nonReservedWord);
		try {
			setState(7557);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7553);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7554);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7555);
				colNameKeyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7556);
				typeFuncNameKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColNameKeywordContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(DDLStatementParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(DDLStatementParser.BIGINT, 0); }
		public TerminalNode BIT() { return getToken(DDLStatementParser.BIT, 0); }
		public TerminalNode BOOLEAN() { return getToken(DDLStatementParser.BOOLEAN, 0); }
		public TerminalNode CHAR() { return getToken(DDLStatementParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(DDLStatementParser.CHARACTER, 0); }
		public TerminalNode COALESCE() { return getToken(DDLStatementParser.COALESCE, 0); }
		public TerminalNode DEC() { return getToken(DDLStatementParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(DDLStatementParser.DECIMAL, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public TerminalNode EXTRACT() { return getToken(DDLStatementParser.EXTRACT, 0); }
		public TerminalNode FLOAT() { return getToken(DDLStatementParser.FLOAT, 0); }
		public TerminalNode GREATEST() { return getToken(DDLStatementParser.GREATEST, 0); }
		public TerminalNode GROUPING() { return getToken(DDLStatementParser.GROUPING, 0); }
		public TerminalNode INOUT() { return getToken(DDLStatementParser.INOUT, 0); }
		public TerminalNode INT() { return getToken(DDLStatementParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(DDLStatementParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(DDLStatementParser.INTERVAL, 0); }
		public TerminalNode LEAST() { return getToken(DDLStatementParser.LEAST, 0); }
		public TerminalNode NATIONAL() { return getToken(DDLStatementParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(DDLStatementParser.NCHAR, 0); }
		public TerminalNode NONE() { return getToken(DDLStatementParser.NONE, 0); }
		public TerminalNode NULLIF() { return getToken(DDLStatementParser.NULLIF, 0); }
		public TerminalNode NUMERIC() { return getToken(DDLStatementParser.NUMERIC, 0); }
		public TerminalNode OUT() { return getToken(DDLStatementParser.OUT, 0); }
		public TerminalNode OVERLAY() { return getToken(DDLStatementParser.OVERLAY, 0); }
		public TerminalNode POSITION() { return getToken(DDLStatementParser.POSITION, 0); }
		public TerminalNode PRECISION() { return getToken(DDLStatementParser.PRECISION, 0); }
		public TerminalNode REAL() { return getToken(DDLStatementParser.REAL, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode SETOF() { return getToken(DDLStatementParser.SETOF, 0); }
		public TerminalNode SMALLINT() { return getToken(DDLStatementParser.SMALLINT, 0); }
		public TerminalNode SUBSTRING() { return getToken(DDLStatementParser.SUBSTRING, 0); }
		public TerminalNode TIME() { return getToken(DDLStatementParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DDLStatementParser.TIMESTAMP, 0); }
		public TerminalNode TREAT() { return getToken(DDLStatementParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(DDLStatementParser.TRIM, 0); }
		public TerminalNode VALUES() { return getToken(DDLStatementParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(DDLStatementParser.VARCHAR, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(DDLStatementParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCONCAT() { return getToken(DDLStatementParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(DDLStatementParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(DDLStatementParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(DDLStatementParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(DDLStatementParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(DDLStatementParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(DDLStatementParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(DDLStatementParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(DDLStatementParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(DDLStatementParser.XMLTABLE, 0); }
		public ColNameKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colNameKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColNameKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColNameKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColNameKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColNameKeywordContext colNameKeyword() throws RecognitionException {
		ColNameKeywordContext _localctx = new ColNameKeywordContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_colNameKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7559);
			_la = _input.LA(1);
			if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (POSITION - 83)) | (1L << (PRECISION - 83)) | (1L << (VALUES - 83)) | (1L << (TRIM - 83)) | (1L << (SUBSTRING - 83)) | (1L << (EXISTS - 83)) | (1L << (BETWEEN - 83)) | (1L << (BOOLEAN - 83)) | (1L << (CHAR - 83)) | (1L << (CHARACTER - 83)))) != 0) || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (INTERVAL - 147)) | (1L << (TIME - 147)) | (1L << (TIMESTAMP - 147)) | (1L << (INTEGER - 147)) | (1L << (REAL - 147)) | (1L << (DECIMAL - 147)) | (1L << (SMALLINT - 147)) | (1L << (BIGINT - 147)) | (1L << (NUMERIC - 147)) | (1L << (NULLIF - 147)) | (1L << (NATIONAL - 147)) | (1L << (NCHAR - 147)) | (1L << (COALESCE - 147)) | (1L << (GROUPING - 147)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (DEC - 214)) | (1L << (ROW - 214)) | (1L << (EXTRACT - 214)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (INT - 328)) | (1L << (FLOAT - 328)) | (1L << (VARCHAR - 328)) | (1L << (BIT - 328)) | (1L << (OVERLAY - 328)) | (1L << (XMLCONCAT - 328)) | (1L << (XMLELEMENT - 328)) | (1L << (XMLEXISTS - 328)) | (1L << (XMLFOREST - 328)) | (1L << (XMLPARSE - 328)) | (1L << (XMLPI - 328)) | (1L << (XMLROOT - 328)) | (1L << (XMLSERIALIZE - 328)) | (1L << (TREAT - 328)) | (1L << (SETOF - 328)) | (1L << (XMLATTRIBUTES - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (GREATEST - 392)) | (1L << (LEAST - 392)) | (1L << (XMLTABLE - 392)) | (1L << (XMLNAMESPACES - 392)) | (1L << (NONE - 392)))) != 0) || _la==OUT || _la==INOUT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatabaseNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public DatabaseNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDatabaseName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDatabaseName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDatabaseName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseNameContext databaseName() throws RecognitionException {
		DatabaseNameContext _localctx = new DatabaseNameContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_databaseName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7561);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleSpecContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(DDLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(DDLStatementParser.SESSION_USER, 0); }
		public RoleSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRoleSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRoleSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRoleSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleSpecContext roleSpec() throws RecognitionException {
		RoleSpecContext _localctx = new RoleSpecContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_roleSpec);
		try {
			setState(7567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7563);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7564);
				nonReservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7565);
				match(CURRENT_USER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7566);
				match(SESSION_USER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DDLStatementParser.DOT_, 0); }
		public VarNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterVarName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitVarName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitVarName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarNameContext varName() throws RecognitionException {
		return varName(0);
	}

	private VarNameContext varName(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		VarNameContext _localctx = new VarNameContext(_ctx, _parentState);
		VarNameContext _prevctx = _localctx;
		int _startState = 1050;
		enterRecursionRule(_localctx, 1050, RULE_varName, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7570);
			colId();
			}
			_ctx.stop = _input.LT(-1);
			setState(7577);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,698,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new VarNameContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_varName);
					setState(7572);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7573);
					match(DOT_);
					setState(7574);
					colId();
					}
					} 
				}
				setState(7579);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,698,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class VarListContext extends ParserRuleContext {
		public List<VarValueContext> varValue() {
			return getRuleContexts(VarValueContext.class);
		}
		public VarValueContext varValue(int i) {
			return getRuleContext(VarValueContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public VarListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterVarList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitVarList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitVarList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarListContext varList() throws RecognitionException {
		VarListContext _localctx = new VarListContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_varList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7580);
			varValue();
			setState(7585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7581);
				match(COMMA_);
				setState(7582);
				varValue();
				}
				}
				setState(7587);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarValueContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public VarValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterVarValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitVarValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitVarValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarValueContext varValue() throws RecognitionException {
		VarValueContext _localctx = new VarValueContext(_ctx, getState());
		enterRule(_localctx, 1054, RULE_varValue);
		try {
			setState(7590);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(7588);
				booleanOrString();
				}
				break;
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(7589);
				numericOnly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ZoneValueContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode INTERVAL() { return getToken(DDLStatementParser.INTERVAL, 0); }
		public OptIntervalContext optInterval() {
			return getRuleContext(OptIntervalContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(DDLStatementParser.LOCAL, 0); }
		public ZoneValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zoneValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterZoneValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitZoneValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitZoneValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ZoneValueContext zoneValue() throws RecognitionException {
		ZoneValueContext _localctx = new ZoneValueContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_zoneValue);
		try {
			setState(7605);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,701,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7592);
				match(STRING_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7593);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7594);
				match(INTERVAL);
				setState(7595);
				match(STRING_);
				setState(7596);
				optInterval();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7597);
				match(INTERVAL);
				setState(7598);
				match(LP_);
				setState(7599);
				match(NUMBER_);
				setState(7600);
				match(RP_);
				setState(7601);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7602);
				numericOnly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7603);
				match(DEFAULT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7604);
				match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericOnlyContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode PLUS_() { return getToken(DDLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(DDLStatementParser.MINUS_, 0); }
		public NumericOnlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericOnly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNumericOnly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNumericOnly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNumericOnly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericOnlyContext numericOnly() throws RecognitionException {
		NumericOnlyContext _localctx = new NumericOnlyContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_numericOnly);
		try {
			setState(7612);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(7607);
				match(NUMBER_);
				}
				break;
			case PLUS_:
				enterOuterAlt(_localctx, 2);
				{
				setState(7608);
				match(PLUS_);
				setState(7609);
				match(NUMBER_);
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 3);
				{
				setState(7610);
				match(MINUS_);
				setState(7611);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsoLevelContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(DDLStatementParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(DDLStatementParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(DDLStatementParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(DDLStatementParser.REPEATABLE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(DDLStatementParser.SERIALIZABLE, 0); }
		public IsoLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isoLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIsoLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIsoLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIsoLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsoLevelContext isoLevel() throws RecognitionException {
		IsoLevelContext _localctx = new IsoLevelContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_isoLevel);
		try {
			setState(7621);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,703,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7614);
				match(READ);
				setState(7615);
				match(UNCOMMITTED);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7616);
				match(READ);
				setState(7617);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7618);
				match(REPEATABLE);
				setState(7619);
				match(READ);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7620);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefContext columnDef() throws RecognitionException {
		ColumnDefContext _localctx = new ColumnDefContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_columnDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7623);
			colId();
			setState(7624);
			typeName();
			setState(7626);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(7625);
				createGenericOptions();
				}
			}

			setState(7628);
			colQualList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColConstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ColConstraintElemContext colConstraintElem() {
			return getRuleContext(ColConstraintElemContext.class,0);
		}
		public ConstraintAttrContext constraintAttr() {
			return getRuleContext(ConstraintAttrContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(DDLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public ColConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintContext colConstraint() throws RecognitionException {
		ColConstraintContext _localctx = new ColConstraintContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_colConstraint);
		try {
			setState(7638);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7630);
				match(CONSTRAINT);
				setState(7631);
				name();
				setState(7632);
				colConstraintElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7634);
				colConstraintElem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7635);
				constraintAttr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7636);
				match(COLLATE);
				setState(7637);
				anyName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttrContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(DDLStatementParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode INITIALLY() { return getToken(DDLStatementParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(DDLStatementParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(DDLStatementParser.IMMEDIATE, 0); }
		public ConstraintAttrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConstraintAttr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConstraintAttr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConstraintAttr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttrContext constraintAttr() throws RecognitionException {
		ConstraintAttrContext _localctx = new ConstraintAttrContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_constraintAttr);
		try {
			setState(7647);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7640);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7641);
				match(NOT);
				setState(7642);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7643);
				match(INITIALLY);
				setState(7644);
				match(DEFERRED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7645);
				match(INITIALLY);
				setState(7646);
				match(IMMEDIATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColConstraintElemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode UNIQUE() { return getToken(DDLStatementParser.UNIQUE, 0); }
		public ConsTableSpaceContext consTableSpace() {
			return getRuleContext(ConsTableSpaceContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(DDLStatementParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(DDLStatementParser.KEY, 0); }
		public TerminalNode CHECK() { return getToken(DDLStatementParser.CHECK, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public NoInheritContext noInherit() {
			return getRuleContext(NoInheritContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(DDLStatementParser.GENERATED, 0); }
		public GeneratedWhenContext generatedWhen() {
			return getRuleContext(GeneratedWhenContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public ParenthesizedSeqOptListContext parenthesizedSeqOptList() {
			return getRuleContext(ParenthesizedSeqOptListContext.class,0);
		}
		public TerminalNode STORED() { return getToken(DDLStatementParser.STORED, 0); }
		public TerminalNode REFERENCES() { return getToken(DDLStatementParser.REFERENCES, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public OptColumnListContext optColumnList() {
			return getRuleContext(OptColumnListContext.class,0);
		}
		public KeyMatchContext keyMatch() {
			return getRuleContext(KeyMatchContext.class,0);
		}
		public KeyActionsContext keyActions() {
			return getRuleContext(KeyActionsContext.class,0);
		}
		public ColConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraintElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColConstraintElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColConstraintElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintElemContext colConstraintElem() throws RecognitionException {
		ColConstraintElemContext _localctx = new ColConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_colConstraintElem);
		int _la;
		try {
			setState(7700);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,714,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7649);
				match(NOT);
				setState(7650);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7651);
				match(NULL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7652);
				match(UNIQUE);
				setState(7655);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7653);
					match(WITH);
					setState(7654);
					definition();
					}
				}

				setState(7657);
				consTableSpace();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7658);
				match(PRIMARY);
				setState(7659);
				match(KEY);
				setState(7662);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7660);
					match(WITH);
					setState(7661);
					definition();
					}
				}

				setState(7664);
				consTableSpace();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7665);
				match(CHECK);
				setState(7666);
				match(LP_);
				setState(7667);
				aExpr(0);
				setState(7668);
				match(RP_);
				setState(7670);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(7669);
					noInherit();
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7672);
				match(DEFAULT);
				setState(7673);
				bExpr(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7674);
				match(GENERATED);
				setState(7675);
				generatedWhen();
				setState(7676);
				match(AS);
				setState(7677);
				match(IDENTITY);
				setState(7679);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(7678);
					parenthesizedSeqOptList();
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7681);
				match(GENERATED);
				setState(7682);
				generatedWhen();
				setState(7683);
				match(AS);
				setState(7684);
				match(LP_);
				setState(7685);
				aExpr(0);
				setState(7686);
				match(RP_);
				setState(7687);
				match(STORED);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7689);
				match(REFERENCES);
				setState(7690);
				qualifiedName();
				setState(7692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(7691);
					optColumnList();
					}
				}

				setState(7695);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATCH) {
					{
					setState(7694);
					keyMatch();
					}
				}

				setState(7698);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(7697);
					keyActions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParenthesizedSeqOptListContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ParenthesizedSeqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesizedSeqOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterParenthesizedSeqOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitParenthesizedSeqOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitParenthesizedSeqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParenthesizedSeqOptListContext parenthesizedSeqOptList() throws RecognitionException {
		ParenthesizedSeqOptListContext _localctx = new ParenthesizedSeqOptListContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_parenthesizedSeqOptList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7702);
			match(LP_);
			setState(7703);
			seqOptList();
			setState(7704);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqOptListContext extends ParserRuleContext {
		public List<SeqOptElemContext> seqOptElem() {
			return getRuleContexts(SeqOptElemContext.class);
		}
		public SeqOptElemContext seqOptElem(int i) {
			return getRuleContext(SeqOptElemContext.class,i);
		}
		public SeqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSeqOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSeqOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSeqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptListContext seqOptList() throws RecognitionException {
		SeqOptListContext _localctx = new SeqOptListContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_seqOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7707); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7706);
				seqOptElem();
				}
				}
				setState(7709); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AS || ((((_la - 231)) & ~0x3f) == 0 && ((1L << (_la - 231)) & ((1L << (NO - 231)) | (1L << (START - 231)) | (1L << (CACHE - 231)) | (1L << (CYCLE - 231)) | (1L << (INCREMENT - 231)) | (1L << (MAXVALUE - 231)) | (1L << (MINVALUE - 231)) | (1L << (OWNED - 231)))) != 0) || _la==RESTART || _la==SEQUENCE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqOptElemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public SimpleTypeNameContext simpleTypeName() {
			return getRuleContext(SimpleTypeNameContext.class,0);
		}
		public TerminalNode CACHE() { return getToken(DDLStatementParser.CACHE, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode CYCLE() { return getToken(DDLStatementParser.CYCLE, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode INCREMENT() { return getToken(DDLStatementParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public TerminalNode MAXVALUE() { return getToken(DDLStatementParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(DDLStatementParser.MINVALUE, 0); }
		public TerminalNode OWNED() { return getToken(DDLStatementParser.OWNED, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(DDLStatementParser.SEQUENCE, 0); }
		public TerminalNode NAME() { return getToken(DDLStatementParser.NAME, 0); }
		public TerminalNode START() { return getToken(DDLStatementParser.START, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode RESTART() { return getToken(DDLStatementParser.RESTART, 0); }
		public SeqOptElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSeqOptElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSeqOptElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSeqOptElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptElemContext seqOptElem() throws RecognitionException {
		SeqOptElemContext _localctx = new SeqOptElemContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_seqOptElem);
		int _la;
		try {
			setState(7748);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7711);
				match(AS);
				setState(7712);
				simpleTypeName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7713);
				match(CACHE);
				setState(7714);
				numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7715);
				match(CYCLE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7716);
				match(NO);
				setState(7717);
				match(CYCLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7718);
				match(INCREMENT);
				setState(7720);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(7719);
					match(BY);
					}
				}

				setState(7722);
				numericOnly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7723);
				match(MAXVALUE);
				setState(7724);
				numericOnly();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7725);
				match(MINVALUE);
				setState(7726);
				numericOnly();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7727);
				match(NO);
				setState(7728);
				match(MAXVALUE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7729);
				match(NO);
				setState(7730);
				match(MINVALUE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7731);
				match(OWNED);
				setState(7732);
				match(BY);
				setState(7733);
				anyName();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7734);
				match(SEQUENCE);
				setState(7735);
				match(NAME);
				setState(7736);
				anyName();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7737);
				match(START);
				setState(7739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7738);
					match(WITH);
					}
				}

				setState(7741);
				numericOnly();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7742);
				match(RESTART);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7743);
				match(RESTART);
				setState(7745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7744);
					match(WITH);
					}
				}

				setState(7747);
				numericOnly();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptColumnListContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public OptColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptColumnListContext optColumnList() throws RecognitionException {
		OptColumnListContext _localctx = new OptColumnListContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_optColumnList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7750);
			match(LP_);
			setState(7751);
			columnList();
			setState(7752);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GeneratedWhenContext extends ParserRuleContext {
		public TerminalNode ALWAYS() { return getToken(DDLStatementParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public GeneratedWhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generatedWhen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGeneratedWhen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGeneratedWhen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGeneratedWhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeneratedWhenContext generatedWhen() throws RecognitionException {
		GeneratedWhenContext _localctx = new GeneratedWhenContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_generatedWhen);
		try {
			setState(7757);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALWAYS:
				enterOuterAlt(_localctx, 1);
				{
				setState(7754);
				match(ALWAYS);
				}
				break;
			case BY:
				enterOuterAlt(_localctx, 2);
				{
				setState(7755);
				match(BY);
				setState(7756);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NoInheritContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(DDLStatementParser.INHERIT, 0); }
		public NoInheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_noInherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNoInherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNoInherit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNoInherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NoInheritContext noInherit() throws RecognitionException {
		NoInheritContext _localctx = new NoInheritContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_noInherit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7759);
			match(NO);
			setState(7760);
			match(INHERIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConsTableSpaceContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConsTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_consTableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConsTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConsTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConsTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConsTableSpaceContext consTableSpace() throws RecognitionException {
		ConsTableSpaceContext _localctx = new ConsTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_consTableSpace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7762);
			match(USING);
			setState(7763);
			match(INDEX);
			setState(7764);
			match(TABLESPACE);
			setState(7765);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinitionContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public DefListContext defList() {
			return getRuleContext(DefListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinitionContext definition() throws RecognitionException {
		DefinitionContext _localctx = new DefinitionContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7767);
			match(LP_);
			setState(7768);
			defList();
			setState(7769);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefListContext extends ParserRuleContext {
		public List<DefElemContext> defElem() {
			return getRuleContexts(DefElemContext.class);
		}
		public DefElemContext defElem(int i) {
			return getRuleContext(DefElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public DefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefListContext defList() throws RecognitionException {
		DefListContext _localctx = new DefListContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_defList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7771);
			defElem();
			setState(7776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7772);
				match(COMMA_);
				setState(7773);
				defElem();
				}
				}
				setState(7778);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefElemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public DefArgContext defArg() {
			return getRuleContext(DefArgContext.class,0);
		}
		public DefElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefElemContext defElem() throws RecognitionException {
		DefElemContext _localctx = new DefElemContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_defElem);
		try {
			setState(7784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(7779);
				colLabel();
				setState(7780);
				match(EQ_);
				setState(7781);
				defArg();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7783);
				colLabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColLabelContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public ColLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColLabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColLabelContext colLabel() throws RecognitionException {
		ColLabelContext _localctx = new ColLabelContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_colLabel);
		try {
			setState(7791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7786);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7787);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7788);
				colNameKeyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7789);
				typeFuncNameKeyword();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7790);
				reservedKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyActionsContext extends ParserRuleContext {
		public KeyUpdateContext keyUpdate() {
			return getRuleContext(KeyUpdateContext.class,0);
		}
		public KeyDeleteContext keyDelete() {
			return getRuleContext(KeyDeleteContext.class,0);
		}
		public KeyActionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyActions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterKeyActions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitKeyActions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitKeyActions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyActionsContext keyActions() throws RecognitionException {
		KeyActionsContext _localctx = new KeyActionsContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_keyActions);
		try {
			setState(7801);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7793);
				keyUpdate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7794);
				keyDelete();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7795);
				keyUpdate();
				setState(7796);
				keyDelete();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7798);
				keyDelete();
				setState(7799);
				keyUpdate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyDeleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(DDLStatementParser.DELETE, 0); }
		public KeyActionContext keyAction() {
			return getRuleContext(KeyActionContext.class,0);
		}
		public KeyDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyDelete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterKeyDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitKeyDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitKeyDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyDeleteContext keyDelete() throws RecognitionException {
		KeyDeleteContext _localctx = new KeyDeleteContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_keyDelete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7803);
			match(ON);
			setState(7804);
			match(DELETE);
			setState(7805);
			keyAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyUpdateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public KeyActionContext keyAction() {
			return getRuleContext(KeyActionContext.class,0);
		}
		public KeyUpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyUpdate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterKeyUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitKeyUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitKeyUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyUpdateContext keyUpdate() throws RecognitionException {
		KeyUpdateContext _localctx = new KeyUpdateContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_keyUpdate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7807);
			match(ON);
			setState(7808);
			match(UPDATE);
			setState(7809);
			keyAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyActionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(DDLStatementParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public KeyActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterKeyAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitKeyAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitKeyAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyActionContext keyAction() throws RecognitionException {
		KeyActionContext _localctx = new KeyActionContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_keyAction);
		try {
			setState(7819);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,725,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7811);
				match(NO);
				setState(7812);
				match(ACTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7813);
				match(RESTRICT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7814);
				match(CASCADE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7815);
				match(SET);
				setState(7816);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7817);
				match(SET);
				setState(7818);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyMatchContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(DDLStatementParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(DDLStatementParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(DDLStatementParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(DDLStatementParser.SIMPLE, 0); }
		public KeyMatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyMatch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterKeyMatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitKeyMatch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitKeyMatch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyMatchContext keyMatch() throws RecognitionException {
		KeyMatchContext _localctx = new KeyMatchContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_keyMatch);
		try {
			setState(7827);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,726,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7821);
				match(MATCH);
				setState(7822);
				match(FULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7823);
				match(MATCH);
				setState(7824);
				match(PARTIAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7825);
				match(MATCH);
				setState(7826);
				match(SIMPLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateGenericOptionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(DDLStatementParser.OPTIONS, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public GenericOptionListContext genericOptionList() {
			return getRuleContext(GenericOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public CreateGenericOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGenericOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateGenericOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateGenericOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateGenericOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateGenericOptionsContext createGenericOptions() throws RecognitionException {
		CreateGenericOptionsContext _localctx = new CreateGenericOptionsContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_createGenericOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7829);
			match(OPTIONS);
			setState(7830);
			match(LP_);
			setState(7831);
			genericOptionList();
			setState(7832);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericOptionListContext extends ParserRuleContext {
		public List<GenericOptionElemContext> genericOptionElem() {
			return getRuleContexts(GenericOptionElemContext.class);
		}
		public GenericOptionElemContext genericOptionElem(int i) {
			return getRuleContext(GenericOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public GenericOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGenericOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGenericOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGenericOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionListContext genericOptionList() throws RecognitionException {
		GenericOptionListContext _localctx = new GenericOptionListContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_genericOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7834);
			genericOptionElem();
			setState(7839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7835);
				match(COMMA_);
				setState(7836);
				genericOptionElem();
				}
				}
				setState(7841);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicaIdentityContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(DDLStatementParser.NOTHING, 0); }
		public TerminalNode FULL() { return getToken(DDLStatementParser.FULL, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ReplicaIdentityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicaIdentity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReplicaIdentity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReplicaIdentity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReplicaIdentity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicaIdentityContext replicaIdentity() throws RecognitionException {
		ReplicaIdentityContext _localctx = new ReplicaIdentityContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_replicaIdentity);
		try {
			setState(7848);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOTHING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7842);
				match(NOTHING);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7843);
				match(FULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(7844);
				match(DEFAULT);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 4);
				{
				setState(7845);
				match(USING);
				setState(7846);
				match(INDEX);
				setState(7847);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperArgtypesContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public TerminalNode NONE() { return getToken(DDLStatementParser.NONE, 0); }
		public OperArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operArgtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOperArgtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOperArgtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOperArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperArgtypesContext operArgtypes() throws RecognitionException {
		OperArgtypesContext _localctx = new OperArgtypesContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_operArgtypes);
		try {
			setState(7872);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7850);
				match(LP_);
				setState(7851);
				typeName();
				setState(7852);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7854);
				match(LP_);
				setState(7855);
				typeName();
				setState(7856);
				match(COMMA_);
				setState(7857);
				typeName();
				setState(7858);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7860);
				match(LP_);
				setState(7861);
				match(NONE);
				setState(7862);
				match(COMMA_);
				setState(7863);
				typeName();
				setState(7864);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7866);
				match(LP_);
				setState(7867);
				typeName();
				setState(7868);
				match(COMMA_);
				setState(7869);
				match(NONE);
				setState(7870);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgContext extends ParserRuleContext {
		public ArgClassContext argClass() {
			return getRuleContext(ArgClassContext.class,0);
		}
		public ParamNameContext paramName() {
			return getRuleContext(ParamNameContext.class,0);
		}
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public FuncArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgContext funcArg() throws RecognitionException {
		FuncArgContext _localctx = new FuncArgContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_funcArg);
		try {
			setState(7889);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,730,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7874);
				argClass();
				setState(7875);
				paramName();
				setState(7876);
				funcType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7878);
				paramName();
				setState(7879);
				argClass();
				setState(7880);
				funcType();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7882);
				paramName();
				setState(7883);
				funcType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7885);
				argClass();
				setState(7886);
				funcType();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7888);
				funcType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgClassContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public TerminalNode OUT() { return getToken(DDLStatementParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(DDLStatementParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(DDLStatementParser.VARIADIC, 0); }
		public ArgClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterArgClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitArgClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitArgClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgClassContext argClass() throws RecognitionException {
		ArgClassContext _localctx = new ArgClassContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_argClass);
		try {
			setState(7897);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7891);
				match(IN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7892);
				match(OUT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7893);
				match(INOUT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7894);
				match(IN);
				setState(7895);
				match(OUT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7896);
				match(VARIADIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgsListContext extends ParserRuleContext {
		public List<FuncArgContext> funcArg() {
			return getRuleContexts(FuncArgContext.class);
		}
		public FuncArgContext funcArg(int i) {
			return getRuleContext(FuncArgContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public FuncArgsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncArgsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncArgsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncArgsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsListContext funcArgsList() throws RecognitionException {
		FuncArgsListContext _localctx = new FuncArgsListContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_funcArgsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7899);
			funcArg();
			setState(7904);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7900);
				match(COMMA_);
				setState(7901);
				funcArg();
				}
				}
				setState(7906);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonReservedWordOrSconstContext extends ParserRuleContext {
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public NonReservedWordOrSconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReservedWordOrSconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNonReservedWordOrSconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNonReservedWordOrSconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNonReservedWordOrSconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedWordOrSconstContext nonReservedWordOrSconst() throws RecognitionException {
		NonReservedWordOrSconstContext _localctx = new NonReservedWordOrSconstContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_nonReservedWordOrSconst);
		try {
			setState(7909);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(7907);
				nonReservedWord();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(7908);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public FileNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFileName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFileName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFileName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileNameContext fileName() throws RecognitionException {
		FileNameContext _localctx = new FileNameContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_fileName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7911);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleListContext extends ParserRuleContext {
		public List<RoleSpecContext> roleSpec() {
			return getRuleContexts(RoleSpecContext.class);
		}
		public RoleSpecContext roleSpec(int i) {
			return getRuleContext(RoleSpecContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public RoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRoleList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRoleList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleListContext roleList() throws RecognitionException {
		RoleListContext _localctx = new RoleListContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_roleList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7913);
			roleSpec();
			setState(7918);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7914);
				match(COMMA_);
				setState(7915);
				roleSpec();
				}
				}
				setState(7920);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public SetRestContext setRest() {
			return getRuleContext(SetRestContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public SetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSetResetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSetResetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetResetClauseContext setResetClause() throws RecognitionException {
		SetResetClauseContext _localctx = new SetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_setResetClause);
		try {
			setState(7924);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(7921);
				match(SET);
				setState(7922);
				setRest();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(7923);
				variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRestContext extends ParserRuleContext {
		public TerminalNode TRANSACTION() { return getToken(DDLStatementParser.TRANSACTION, 0); }
		public TransactionModeListContext transactionModeList() {
			return getRuleContext(TransactionModeListContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(DDLStatementParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(DDLStatementParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public SetRestMoreContext setRestMore() {
			return getRuleContext(SetRestMoreContext.class,0);
		}
		public SetRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSetRest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSetRest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSetRest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRestContext setRest() throws RecognitionException {
		SetRestContext _localctx = new SetRestContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_setRest);
		try {
			setState(7934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7926);
				match(TRANSACTION);
				setState(7927);
				transactionModeList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7928);
				match(SESSION);
				setState(7929);
				match(CHARACTERISTICS);
				setState(7930);
				match(AS);
				setState(7931);
				match(TRANSACTION);
				setState(7932);
				transactionModeList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7933);
				setRestMore();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeListContext extends ParserRuleContext {
		public List<TransactionModeItemContext> transactionModeItem() {
			return getRuleContexts(TransactionModeItemContext.class);
		}
		public TransactionModeItemContext transactionModeItem(int i) {
			return getRuleContext(TransactionModeItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TransactionModeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionModeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTransactionModeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTransactionModeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTransactionModeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeListContext transactionModeList() throws RecognitionException {
		TransactionModeListContext _localctx = new TransactionModeListContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_transactionModeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7936);
			transactionModeItem();
			setState(7943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_ || _la==NOT || ((((_la - 229)) & ~0x3f) == 0 && ((1L << (_la - 229)) & ((1L << (ISOLATION - 229)) | (1L << (READ - 229)) | (1L << (DEFERRABLE - 229)))) != 0)) {
				{
				{
				setState(7938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(7937);
					match(COMMA_);
					}
				}

				setState(7940);
				transactionModeItem();
				}
				}
				setState(7945);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeItemContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(DDLStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(DDLStatementParser.LEVEL, 0); }
		public IsoLevelContext isoLevel() {
			return getRuleContext(IsoLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(DDLStatementParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(DDLStatementParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(DDLStatementParser.WRITE, 0); }
		public TerminalNode DEFERRABLE() { return getToken(DDLStatementParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TransactionModeItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionModeItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTransactionModeItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTransactionModeItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTransactionModeItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeItemContext transactionModeItem() throws RecognitionException {
		TransactionModeItemContext _localctx = new TransactionModeItemContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_transactionModeItem);
		try {
			setState(7956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,739,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7946);
				match(ISOLATION);
				setState(7947);
				match(LEVEL);
				setState(7948);
				isoLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7949);
				match(READ);
				setState(7950);
				match(ONLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7951);
				match(READ);
				setState(7952);
				match(WRITE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7953);
				match(DEFERRABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7954);
				match(NOT);
				setState(7955);
				match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRestMoreContext extends ParserRuleContext {
		public GenericSetContext genericSet() {
			return getRuleContext(GenericSetContext.class,0);
		}
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode CURRENT() { return getToken(DDLStatementParser.CURRENT, 0); }
		public TerminalNode TIME() { return getToken(DDLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(DDLStatementParser.ZONE, 0); }
		public ZoneValueContext zoneValue() {
			return getRuleContext(ZoneValueContext.class,0);
		}
		public TerminalNode CATALOG() { return getToken(DDLStatementParser.CATALOG, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode NAMES() { return getToken(DDLStatementParser.NAMES, 0); }
		public EncodingContext encoding() {
			return getRuleContext(EncodingContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(DDLStatementParser.ROLE, 0); }
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(DDLStatementParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(DDLStatementParser.AUTHORIZATION, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode XML() { return getToken(DDLStatementParser.XML, 0); }
		public TerminalNode OPTION() { return getToken(DDLStatementParser.OPTION, 0); }
		public DocumentOrContentContext documentOrContent() {
			return getRuleContext(DocumentOrContentContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(DDLStatementParser.TRANSACTION, 0); }
		public TerminalNode SNAPSHOT() { return getToken(DDLStatementParser.SNAPSHOT, 0); }
		public SetRestMoreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRestMore; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSetRestMore(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSetRestMore(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSetRestMore(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRestMoreContext setRestMore() throws RecognitionException {
		SetRestMoreContext _localctx = new SetRestMoreContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_setRestMore);
		int _la;
		try {
			setState(7990);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,741,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7958);
				genericSet();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7959);
				varName(0);
				setState(7960);
				match(FROM);
				setState(7961);
				match(CURRENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7963);
				match(TIME);
				setState(7964);
				match(ZONE);
				setState(7965);
				zoneValue();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7966);
				match(CATALOG);
				setState(7967);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7968);
				match(SCHEMA);
				setState(7969);
				match(STRING_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7970);
				match(NAMES);
				setState(7972);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==STRING_) {
					{
					setState(7971);
					encoding();
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7974);
				match(ROLE);
				setState(7975);
				nonReservedWord();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7976);
				match(STRING_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7977);
				match(SESSION);
				setState(7978);
				match(AUTHORIZATION);
				setState(7979);
				nonReservedWord();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7980);
				match(STRING_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7981);
				match(SESSION);
				setState(7982);
				match(AUTHORIZATION);
				setState(7983);
				match(DEFAULT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7984);
				match(XML);
				setState(7985);
				match(OPTION);
				setState(7986);
				documentOrContent();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7987);
				match(TRANSACTION);
				setState(7988);
				match(SNAPSHOT);
				setState(7989);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EncodingContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public EncodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encoding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterEncoding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitEncoding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitEncoding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EncodingContext encoding() throws RecognitionException {
		EncodingContext _localctx = new EncodingContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_encoding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7992);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericSetContext extends ParserRuleContext {
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public VarListContext varList() {
			return getRuleContext(VarListContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public GenericSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGenericSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGenericSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGenericSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericSetContext genericSet() throws RecognitionException {
		GenericSetContext _localctx = new GenericSetContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_genericSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7994);
			varName(0);
			setState(7995);
			_la = _input.LA(1);
			if ( !(_la==EQ_ || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7998);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case PLUS_:
			case MINUS_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				{
				setState(7996);
				varList();
				}
				break;
			case DEFAULT:
				{
				setState(7997);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableResetStmtContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(DDLStatementParser.RESET, 0); }
		public ResetRestContext resetRest() {
			return getRuleContext(ResetRestContext.class,0);
		}
		public VariableResetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableResetStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterVariableResetStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitVariableResetStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitVariableResetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableResetStmtContext variableResetStmt() throws RecognitionException {
		VariableResetStmtContext _localctx = new VariableResetStmtContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_variableResetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8000);
			match(RESET);
			setState(8001);
			resetRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetRestContext extends ParserRuleContext {
		public GenericResetContext genericReset() {
			return getRuleContext(GenericResetContext.class,0);
		}
		public TerminalNode TIME() { return getToken(DDLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(DDLStatementParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(DDLStatementParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(DDLStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(DDLStatementParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(DDLStatementParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(DDLStatementParser.AUTHORIZATION, 0); }
		public ResetRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetRest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterResetRest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitResetRest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitResetRest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetRestContext resetRest() throws RecognitionException {
		ResetRestContext _localctx = new ResetRestContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_resetRest);
		try {
			setState(8011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,743,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8003);
				genericReset();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8004);
				match(TIME);
				setState(8005);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8006);
				match(TRANSACTION);
				setState(8007);
				match(ISOLATION);
				setState(8008);
				match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8009);
				match(SESSION);
				setState(8010);
				match(AUTHORIZATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericResetContext extends ParserRuleContext {
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public GenericResetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericReset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGenericReset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGenericReset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGenericReset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericResetContext genericReset() throws RecognitionException {
		GenericResetContext _localctx = new GenericResetContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_genericReset);
		try {
			setState(8015);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8013);
				varName(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8014);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationExprListContext extends ParserRuleContext {
		public List<RelationExprContext> relationExpr() {
			return getRuleContexts(RelationExprContext.class);
		}
		public RelationExprContext relationExpr(int i) {
			return getRuleContext(RelationExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public RelationExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRelationExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRelationExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRelationExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExprListContext relationExprList() throws RecognitionException {
		RelationExprListContext _localctx = new RelationExprListContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_relationExprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8017);
			relationExpr();
			setState(8022);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8018);
				match(COMMA_);
				setState(8019);
				relationExpr();
				}
				}
				setState(8024);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationExprContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TerminalNode ONLY() { return getToken(DDLStatementParser.ONLY, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public RelationExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRelationExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRelationExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRelationExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExprContext relationExpr() throws RecognitionException {
		RelationExprContext _localctx = new RelationExprContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_relationExpr);
		try {
			setState(8036);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8025);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8026);
				qualifiedName();
				setState(8027);
				match(ASTERISK_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8029);
				match(ONLY);
				setState(8030);
				qualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8031);
				match(ONLY);
				setState(8032);
				match(LP_);
				setState(8033);
				qualifiedName();
				setState(8034);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonFuncOptItemContext extends ParserRuleContext {
		public TerminalNode CALLED() { return getToken(DDLStatementParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public List<TerminalNode> NULL() { return getTokens(DDLStatementParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DDLStatementParser.NULL, i);
		}
		public TerminalNode INPUT() { return getToken(DDLStatementParser.INPUT, 0); }
		public TerminalNode RETURNS() { return getToken(DDLStatementParser.RETURNS, 0); }
		public TerminalNode STRICT() { return getToken(DDLStatementParser.STRICT, 0); }
		public TerminalNode IMMUTABLE() { return getToken(DDLStatementParser.IMMUTABLE, 0); }
		public TerminalNode STABLE() { return getToken(DDLStatementParser.STABLE, 0); }
		public TerminalNode VOLATILE() { return getToken(DDLStatementParser.VOLATILE, 0); }
		public TerminalNode EXTERNAL() { return getToken(DDLStatementParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(DDLStatementParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(DDLStatementParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(DDLStatementParser.INVOKER, 0); }
		public TerminalNode LEAKPROOF() { return getToken(DDLStatementParser.LEAKPROOF, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode COST() { return getToken(DDLStatementParser.COST, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(DDLStatementParser.ROWS, 0); }
		public TerminalNode SUPPORT() { return getToken(DDLStatementParser.SUPPORT, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public FunctionSetResetClauseContext functionSetResetClause() {
			return getRuleContext(FunctionSetResetClauseContext.class,0);
		}
		public TerminalNode PARALLEL() { return getToken(DDLStatementParser.PARALLEL, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public CommonFuncOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonFuncOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCommonFuncOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCommonFuncOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCommonFuncOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonFuncOptItemContext commonFuncOptItem() throws RecognitionException {
		CommonFuncOptItemContext _localctx = new CommonFuncOptItemContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_commonFuncOptItem);
		try {
			setState(8073);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8038);
				match(CALLED);
				setState(8039);
				match(ON);
				setState(8040);
				match(NULL);
				setState(8041);
				match(INPUT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8042);
				match(RETURNS);
				setState(8043);
				match(NULL);
				setState(8044);
				match(ON);
				setState(8045);
				match(NULL);
				setState(8046);
				match(INPUT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8047);
				match(STRICT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8048);
				match(IMMUTABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8049);
				match(STABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8050);
				match(VOLATILE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8051);
				match(EXTERNAL);
				setState(8052);
				match(SECURITY);
				setState(8053);
				match(DEFINER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8054);
				match(EXTERNAL);
				setState(8055);
				match(SECURITY);
				setState(8056);
				match(INVOKER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8057);
				match(SECURITY);
				setState(8058);
				match(DEFINER);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8059);
				match(SECURITY);
				setState(8060);
				match(INVOKER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8061);
				match(LEAKPROOF);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8062);
				match(NOT);
				setState(8063);
				match(LEAKPROOF);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8064);
				match(COST);
				setState(8065);
				numericOnly();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(8066);
				match(ROWS);
				setState(8067);
				numericOnly();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(8068);
				match(SUPPORT);
				setState(8069);
				anyName();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(8070);
				functionSetResetClause();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(8071);
				match(PARALLEL);
				setState(8072);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionSetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public SetRestMoreContext setRestMore() {
			return getRuleContext(SetRestMoreContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public FunctionSetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionSetResetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFunctionSetResetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFunctionSetResetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFunctionSetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionSetResetClauseContext functionSetResetClause() throws RecognitionException {
		FunctionSetResetClauseContext _localctx = new FunctionSetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_functionSetResetClause);
		try {
			setState(8078);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(8075);
				match(SET);
				setState(8076);
				setRestMore();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(8077);
				variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowSecurityCmdContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode SELECT() { return getToken(DDLStatementParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(DDLStatementParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(DDLStatementParser.DELETE, 0); }
		public RowSecurityCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowSecurityCmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRowSecurityCmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRowSecurityCmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRowSecurityCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowSecurityCmdContext rowSecurityCmd() throws RecognitionException {
		RowSecurityCmdContext _localctx = new RowSecurityCmdContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_rowSecurityCmd);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8080);
			_la = _input.LA(1);
			if ( !(_la==SELECT || _la==INSERT || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALL - 64)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(DDLStatementParser.SELECT, 0); }
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(DDLStatementParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(DDLStatementParser.INSERT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventContext event() throws RecognitionException {
		EventContext _localctx = new EventContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8082);
			_la = _input.LA(1);
			if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (SELECT - 62)) | (1L << (INSERT - 62)) | (1L << (UPDATE - 62)) | (1L << (DELETE - 62)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeNameListContext extends ParserRuleContext {
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TypeNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTypeNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTypeNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTypeNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeNameListContext typeNameList() throws RecognitionException {
		TypeNameListContext _localctx = new TypeNameListContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_typeNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8084);
			typeName();
			setState(8089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8085);
				match(COMMA_);
				setState(8086);
				typeName();
				}
				}
				setState(8091);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotExistClauseContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public NotExistClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notExistClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNotExistClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNotExistClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNotExistClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotExistClauseContext notExistClause() throws RecognitionException {
		NotExistClauseContext _localctx = new NotExistClauseContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_notExistClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8092);
			match(IF);
			setState(8093);
			match(NOT);
			setState(8094);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistClauseContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public ExistClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExistClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExistClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExistClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistClauseContext existClause() throws RecognitionException {
		ExistClauseContext _localctx = new ExistClauseContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_existClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8096);
			match(IF);
			setState(8097);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DDLStatementParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(DDLStatementParser.INTO, 0); }
		public InsertTargetContext insertTarget() {
			return getRuleContext(InsertTargetContext.class,0);
		}
		public InsertRestContext insertRest() {
			return getRuleContext(InsertRestContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public OptOnConflictContext optOnConflict() {
			return getRuleContext(OptOnConflictContext.class,0);
		}
		public ReturningClauseContext returningClause() {
			return getRuleContext(ReturningClauseContext.class,0);
		}
		public InsertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterInsert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitInsert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitInsert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertContext insert() throws RecognitionException {
		InsertContext _localctx = new InsertContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8099);
				withClause();
				}
			}

			setState(8102);
			match(INSERT);
			setState(8103);
			match(INTO);
			setState(8104);
			insertTarget();
			setState(8105);
			insertRest();
			setState(8107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(8106);
				optOnConflict();
				}
			}

			setState(8110);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(8109);
				returningClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertTargetContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public InsertTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterInsertTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitInsertTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitInsertTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertTargetContext insertTarget() throws RecognitionException {
		InsertTargetContext _localctx = new InsertTargetContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_insertTarget);
		try {
			setState(8117);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,753,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8112);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8113);
				qualifiedName();
				setState(8114);
				match(AS);
				setState(8115);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertRestContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode OVERRIDING() { return getToken(DDLStatementParser.OVERRIDING, 0); }
		public OverrideKindContext overrideKind() {
			return getRuleContext(OverrideKindContext.class,0);
		}
		public TerminalNode VALUE() { return getToken(DDLStatementParser.VALUE, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public InsertColumnListContext insertColumnList() {
			return getRuleContext(InsertColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(DDLStatementParser.VALUES, 0); }
		public InsertRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertRest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterInsertRest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitInsertRest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitInsertRest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertRestContext insertRest() throws RecognitionException {
		InsertRestContext _localctx = new InsertRestContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_insertRest);
		try {
			setState(8140);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8119);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8120);
				match(OVERRIDING);
				setState(8121);
				overrideKind();
				setState(8122);
				match(VALUE);
				setState(8123);
				select();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8125);
				match(LP_);
				setState(8126);
				insertColumnList(0);
				setState(8127);
				match(RP_);
				setState(8128);
				select();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8130);
				match(LP_);
				setState(8131);
				insertColumnList(0);
				setState(8132);
				match(RP_);
				setState(8133);
				match(OVERRIDING);
				setState(8134);
				overrideKind();
				setState(8135);
				match(VALUE);
				setState(8136);
				select();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8138);
				match(DEFAULT);
				setState(8139);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverrideKindContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public TerminalNode SYSTEM() { return getToken(DDLStatementParser.SYSTEM, 0); }
		public OverrideKindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overrideKind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOverrideKind(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOverrideKind(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOverrideKind(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverrideKindContext overrideKind() throws RecognitionException {
		OverrideKindContext _localctx = new OverrideKindContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_overrideKind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8142);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==SYSTEM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertColumnListContext extends ParserRuleContext {
		public InsertColumnItemContext insertColumnItem() {
			return getRuleContext(InsertColumnItemContext.class,0);
		}
		public InsertColumnListContext insertColumnList() {
			return getRuleContext(InsertColumnListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public InsertColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterInsertColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitInsertColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitInsertColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertColumnListContext insertColumnList() throws RecognitionException {
		return insertColumnList(0);
	}

	private InsertColumnListContext insertColumnList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		InsertColumnListContext _localctx = new InsertColumnListContext(_ctx, _parentState);
		InsertColumnListContext _prevctx = _localctx;
		int _startState = 1168;
		enterRecursionRule(_localctx, 1168, RULE_insertColumnList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8145);
			insertColumnItem();
			}
			_ctx.stop = _input.LT(-1);
			setState(8152);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,755,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InsertColumnListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_insertColumnList);
					setState(8147);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8148);
					match(COMMA_);
					setState(8149);
					insertColumnItem();
					}
					} 
				}
				setState(8154);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,755,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class InsertColumnItemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public InsertColumnItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertColumnItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterInsertColumnItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitInsertColumnItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitInsertColumnItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertColumnItemContext insertColumnItem() throws RecognitionException {
		InsertColumnItemContext _localctx = new InsertColumnItemContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_insertColumnItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8155);
			colId();
			setState(8156);
			optIndirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptOnConflictContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode CONFLICT() { return getToken(DDLStatementParser.CONFLICT, 0); }
		public OptConfExprContext optConfExpr() {
			return getRuleContext(OptConfExprContext.class,0);
		}
		public TerminalNode DO() { return getToken(DDLStatementParser.DO, 0); }
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public SetClauseListContext setClauseList() {
			return getRuleContext(SetClauseListContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode NOTHING() { return getToken(DDLStatementParser.NOTHING, 0); }
		public OptOnConflictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optOnConflict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptOnConflict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptOnConflict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptOnConflict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptOnConflictContext optOnConflict() throws RecognitionException {
		OptOnConflictContext _localctx = new OptOnConflictContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_optOnConflict);
		int _la;
		try {
			setState(8174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,757,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8158);
				match(ON);
				setState(8159);
				match(CONFLICT);
				setState(8160);
				optConfExpr();
				setState(8161);
				match(DO);
				setState(8162);
				match(UPDATE);
				setState(8163);
				match(SET);
				setState(8164);
				setClauseList(0);
				setState(8166);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(8165);
					whereClause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8168);
				match(ON);
				setState(8169);
				match(CONFLICT);
				setState(8170);
				optConfExpr();
				setState(8171);
				match(DO);
				setState(8172);
				match(NOTHING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptConfExprContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public IndexParamsContext indexParams() {
			return getRuleContext(IndexParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptConfExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optConfExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptConfExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptConfExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptConfExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptConfExprContext optConfExpr() throws RecognitionException {
		OptConfExprContext _localctx = new OptConfExprContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_optConfExpr);
		int _la;
		try {
			setState(8186);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8176);
				match(LP_);
				setState(8177);
				indexParams();
				setState(8178);
				match(RP_);
				setState(8180);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(8179);
					whereClause();
					}
				}

				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8182);
				match(ON);
				setState(8183);
				match(CONSTRAINT);
				setState(8184);
				name();
				}
				break;
			case DO:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public RelationExprOptAliasContext relationExprOptAlias() {
			return getRuleContext(RelationExprOptAliasContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public SetClauseListContext setClauseList() {
			return getRuleContext(SetClauseListContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereOrCurrentClauseContext whereOrCurrentClause() {
			return getRuleContext(WhereOrCurrentClauseContext.class,0);
		}
		public ReturningClauseContext returningClause() {
			return getRuleContext(ReturningClauseContext.class,0);
		}
		public UpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateContext update() throws RecognitionException {
		UpdateContext _localctx = new UpdateContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_update);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8188);
				withClause();
				}
			}

			setState(8191);
			match(UPDATE);
			setState(8192);
			relationExprOptAlias();
			setState(8193);
			match(SET);
			setState(8194);
			setClauseList(0);
			setState(8196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(8195);
				fromClause();
				}
			}

			setState(8199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(8198);
				whereOrCurrentClause();
				}
			}

			setState(8202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(8201);
				returningClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetClauseListContext extends ParserRuleContext {
		public SetClauseContext setClause() {
			return getRuleContext(SetClauseContext.class,0);
		}
		public SetClauseListContext setClauseList() {
			return getRuleContext(SetClauseListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public SetClauseListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setClauseList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSetClauseList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSetClauseList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSetClauseList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetClauseListContext setClauseList() throws RecognitionException {
		return setClauseList(0);
	}

	private SetClauseListContext setClauseList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SetClauseListContext _localctx = new SetClauseListContext(_ctx, _parentState);
		SetClauseListContext _prevctx = _localctx;
		int _startState = 1178;
		enterRecursionRule(_localctx, 1178, RULE_setClauseList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8205);
			setClause();
			}
			_ctx.stop = _input.LT(-1);
			setState(8212);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,764,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SetClauseListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_setClauseList);
					setState(8207);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8208);
					match(COMMA_);
					setState(8209);
					setClause();
					}
					} 
				}
				setState(8214);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,764,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SetClauseContext extends ParserRuleContext {
		public SetTargetContext setTarget() {
			return getRuleContext(SetTargetContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public SetTargetListContext setTargetList() {
			return getRuleContext(SetTargetListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public SetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetClauseContext setClause() throws RecognitionException {
		SetClauseContext _localctx = new SetClauseContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_setClause);
		try {
			setState(8225);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8215);
				setTarget();
				setState(8216);
				match(EQ_);
				setState(8217);
				aExpr(0);
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 2);
				{
				setState(8219);
				match(LP_);
				setState(8220);
				setTargetList(0);
				setState(8221);
				match(RP_);
				setState(8222);
				match(EQ_);
				setState(8223);
				aExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTargetContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public SetTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSetTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSetTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSetTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTargetContext setTarget() throws RecognitionException {
		SetTargetContext _localctx = new SetTargetContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_setTarget);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8227);
			colId();
			setState(8228);
			optIndirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTargetListContext extends ParserRuleContext {
		public SetTargetContext setTarget() {
			return getRuleContext(SetTargetContext.class,0);
		}
		public SetTargetListContext setTargetList() {
			return getRuleContext(SetTargetListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public SetTargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTargetList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSetTargetList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSetTargetList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSetTargetList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTargetListContext setTargetList() throws RecognitionException {
		return setTargetList(0);
	}

	private SetTargetListContext setTargetList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SetTargetListContext _localctx = new SetTargetListContext(_ctx, _parentState);
		SetTargetListContext _prevctx = _localctx;
		int _startState = 1184;
		enterRecursionRule(_localctx, 1184, RULE_setTargetList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8231);
			setTarget();
			}
			_ctx.stop = _input.LT(-1);
			setState(8238);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,766,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SetTargetListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_setTargetList);
					setState(8233);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8234);
					match(COMMA_);
					setState(8235);
					setTarget();
					}
					} 
				}
				setState(8240);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,766,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ReturningClauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(DDLStatementParser.RETURNING, 0); }
		public TargetListContext targetList() {
			return getRuleContext(TargetListContext.class,0);
		}
		public ReturningClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returningClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReturningClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReturningClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReturningClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturningClauseContext returningClause() throws RecognitionException {
		ReturningClauseContext _localctx = new ReturningClauseContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_returningClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8241);
			match(RETURNING);
			setState(8242);
			targetList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DDLStatementParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public RelationExprOptAliasContext relationExprOptAlias() {
			return getRuleContext(RelationExprOptAliasContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public UsingClauseContext usingClause() {
			return getRuleContext(UsingClauseContext.class,0);
		}
		public WhereOrCurrentClauseContext whereOrCurrentClause() {
			return getRuleContext(WhereOrCurrentClauseContext.class,0);
		}
		public ReturningClauseContext returningClause() {
			return getRuleContext(ReturningClauseContext.class,0);
		}
		public DeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteContext delete() throws RecognitionException {
		DeleteContext _localctx = new DeleteContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_delete);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8245);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8244);
				withClause();
				}
			}

			setState(8247);
			match(DELETE);
			setState(8248);
			match(FROM);
			setState(8249);
			relationExprOptAlias();
			setState(8251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(8250);
				usingClause();
				}
			}

			setState(8254);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(8253);
				whereOrCurrentClause();
				}
			}

			setState(8257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(8256);
				returningClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationExprOptAliasContext extends ParserRuleContext {
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public RelationExprOptAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExprOptAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRelationExprOptAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRelationExprOptAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRelationExprOptAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExprOptAliasContext relationExprOptAlias() throws RecognitionException {
		RelationExprOptAliasContext _localctx = new RelationExprOptAliasContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_relationExprOptAlias);
		try {
			setState(8267);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,771,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8259);
				relationExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8260);
				relationExpr();
				setState(8261);
				colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8263);
				relationExpr();
				setState(8264);
				match(AS);
				setState(8265);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public UsingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterUsingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitUsingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitUsingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingClauseContext usingClause() throws RecognitionException {
		UsingClauseContext _localctx = new UsingClauseContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_usingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8269);
			match(USING);
			setState(8270);
			fromList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectContext extends ParserRuleContext {
		public SelectNoParensContext selectNoParens() {
			return getRuleContext(SelectNoParensContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public SelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectContext select() throws RecognitionException {
		SelectContext _localctx = new SelectContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_select);
		try {
			setState(8274);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,772,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8272);
				selectNoParens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8273);
				selectWithParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectNoParensContext extends ParserRuleContext {
		public SelectClauseNContext selectClauseN() {
			return getRuleContext(SelectClauseNContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public ForLockingClauseContext forLockingClause() {
			return getRuleContext(ForLockingClauseContext.class,0);
		}
		public SelectLimitContext selectLimit() {
			return getRuleContext(SelectLimitContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public SelectNoParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectNoParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSelectNoParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSelectNoParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSelectNoParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectNoParensContext selectNoParens() throws RecognitionException {
		SelectNoParensContext _localctx = new SelectNoParensContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_selectNoParens);
		int _la;
		try {
			setState(8321);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8276);
				selectClauseN(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8277);
				selectClauseN(0);
				setState(8278);
				sortClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8280);
				selectClauseN(0);
				setState(8282);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(8281);
					sortClause();
					}
				}

				setState(8284);
				forLockingClause();
				setState(8286);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT || _la==OFFSET || _la==FETCH) {
					{
					setState(8285);
					selectLimit();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8288);
				selectClauseN(0);
				setState(8290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(8289);
					sortClause();
					}
				}

				setState(8292);
				selectLimit();
				setState(8294);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(8293);
					forLockingClause();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8296);
				withClause();
				setState(8297);
				selectClauseN(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8299);
				withClause();
				setState(8300);
				selectClauseN(0);
				setState(8301);
				sortClause();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8303);
				withClause();
				setState(8304);
				selectClauseN(0);
				setState(8306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(8305);
					sortClause();
					}
				}

				setState(8308);
				forLockingClause();
				setState(8310);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT || _la==OFFSET || _la==FETCH) {
					{
					setState(8309);
					selectLimit();
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8312);
				withClause();
				setState(8313);
				selectClauseN(0);
				setState(8315);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(8314);
					sortClause();
					}
				}

				setState(8317);
				selectLimit();
				setState(8319);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(8318);
					forLockingClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectClauseNContext extends ParserRuleContext {
		public SimpleSelectContext simpleSelect() {
			return getRuleContext(SimpleSelectContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public List<SelectClauseNContext> selectClauseN() {
			return getRuleContexts(SelectClauseNContext.class);
		}
		public SelectClauseNContext selectClauseN(int i) {
			return getRuleContext(SelectClauseNContext.class,i);
		}
		public TerminalNode UNION() { return getToken(DDLStatementParser.UNION, 0); }
		public AllOrDistinctContext allOrDistinct() {
			return getRuleContext(AllOrDistinctContext.class,0);
		}
		public TerminalNode INTERSECT() { return getToken(DDLStatementParser.INTERSECT, 0); }
		public TerminalNode EXCEPT() { return getToken(DDLStatementParser.EXCEPT, 0); }
		public SelectClauseNContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClauseN; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSelectClauseN(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSelectClauseN(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSelectClauseN(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseNContext selectClauseN() throws RecognitionException {
		return selectClauseN(0);
	}

	private SelectClauseNContext selectClauseN(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SelectClauseNContext _localctx = new SelectClauseNContext(_ctx, _parentState);
		SelectClauseNContext _prevctx = _localctx;
		int _startState = 1198;
		enterRecursionRule(_localctx, 1198, RULE_selectClauseN, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8326);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case TABLE:
			case VALUES:
				{
				setState(8324);
				simpleSelect();
				}
				break;
			case T__2:
				{
				setState(8325);
				selectWithParens();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(8348);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,787,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(8346);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
					case 1:
						{
						_localctx = new SelectClauseNContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_selectClauseN);
						setState(8328);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(8329);
						match(UNION);
						setState(8331);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==DISTINCT || _la==ALL) {
							{
							setState(8330);
							allOrDistinct();
							}
						}

						setState(8333);
						selectClauseN(4);
						}
						break;
					case 2:
						{
						_localctx = new SelectClauseNContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_selectClauseN);
						setState(8334);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(8335);
						match(INTERSECT);
						setState(8337);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==DISTINCT || _la==ALL) {
							{
							setState(8336);
							allOrDistinct();
							}
						}

						setState(8339);
						selectClauseN(3);
						}
						break;
					case 3:
						{
						_localctx = new SelectClauseNContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_selectClauseN);
						setState(8340);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(8341);
						match(EXCEPT);
						setState(8343);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==DISTINCT || _la==ALL) {
							{
							setState(8342);
							allOrDistinct();
							}
						}

						setState(8345);
						selectClauseN(2);
						}
						break;
					}
					} 
				}
				setState(8350);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,787,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SimpleSelectContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(DDLStatementParser.SELECT, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TargetListContext targetList() {
			return getRuleContext(TargetListContext.class,0);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupClauseContext groupClause() {
			return getRuleContext(GroupClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public DistinctClauseContext distinctClause() {
			return getRuleContext(DistinctClauseContext.class,0);
		}
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public SimpleSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleSelectContext simpleSelect() throws RecognitionException {
		SimpleSelectContext _localctx = new SimpleSelectContext(_ctx, getState());
		enterRule(_localctx, 1200, RULE_simpleSelect);
		try {
			setState(8400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,802,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8351);
				match(SELECT);
				setState(8353);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
				case 1:
					{
					setState(8352);
					match(ALL);
					}
					break;
				}
				setState(8356);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,789,_ctx) ) {
				case 1:
					{
					setState(8355);
					targetList(0);
					}
					break;
				}
				setState(8359);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,790,_ctx) ) {
				case 1:
					{
					setState(8358);
					intoClause();
					}
					break;
				}
				setState(8362);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
				case 1:
					{
					setState(8361);
					fromClause();
					}
					break;
				}
				setState(8365);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,792,_ctx) ) {
				case 1:
					{
					setState(8364);
					whereClause();
					}
					break;
				}
				setState(8368);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
				case 1:
					{
					setState(8367);
					groupClause();
					}
					break;
				}
				setState(8371);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,794,_ctx) ) {
				case 1:
					{
					setState(8370);
					havingClause();
					}
					break;
				}
				setState(8374);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
				case 1:
					{
					setState(8373);
					windowClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8376);
				match(SELECT);
				setState(8377);
				distinctClause();
				setState(8378);
				targetList(0);
				setState(8380);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,796,_ctx) ) {
				case 1:
					{
					setState(8379);
					intoClause();
					}
					break;
				}
				setState(8383);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,797,_ctx) ) {
				case 1:
					{
					setState(8382);
					fromClause();
					}
					break;
				}
				setState(8386);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
				case 1:
					{
					setState(8385);
					whereClause();
					}
					break;
				}
				setState(8389);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
				case 1:
					{
					setState(8388);
					groupClause();
					}
					break;
				}
				setState(8392);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
				case 1:
					{
					setState(8391);
					havingClause();
					}
					break;
				}
				setState(8395);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
				case 1:
					{
					setState(8394);
					windowClause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8397);
				valuesClause(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8398);
				match(TABLE);
				setState(8399);
				relationExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public CteListContext cteList() {
			return getRuleContext(CteListContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(DDLStatementParser.RECURSIVE, 0); }
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWithClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_withClause);
		try {
			setState(8407);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,803,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8402);
				match(WITH);
				setState(8403);
				cteList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8404);
				match(WITH);
				setState(8405);
				match(RECURSIVE);
				setState(8406);
				cteList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(DDLStatementParser.INTO, 0); }
		public OptTempTableNameContext optTempTableName() {
			return getRuleContext(OptTempTableNameContext.class,0);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIntoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIntoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntoClauseContext intoClause() throws RecognitionException {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, getState());
		enterRule(_localctx, 1204, RULE_intoClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8409);
			match(INTO);
			setState(8410);
			optTempTableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTempTableNameContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(DDLStatementParser.TEMPORARY, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TerminalNode TEMP() { return getToken(DDLStatementParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(DDLStatementParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(DDLStatementParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(DDLStatementParser.UNLOGGED, 0); }
		public OptTempTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTempTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptTempTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptTempTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptTempTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTempTableNameContext optTempTableName() throws RecognitionException {
		OptTempTableNameContext _localctx = new OptTempTableNameContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_optTempTableName);
		int _la;
		try {
			setState(8456);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,812,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8412);
				match(TEMPORARY);
				setState(8414);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8413);
					match(TABLE);
					}
				}

				setState(8416);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8417);
				match(TEMP);
				setState(8419);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8418);
					match(TABLE);
					}
				}

				setState(8421);
				qualifiedName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8422);
				match(LOCAL);
				setState(8423);
				match(TEMPORARY);
				setState(8425);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8424);
					match(TABLE);
					}
				}

				setState(8427);
				qualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8428);
				match(LOCAL);
				setState(8429);
				match(TEMP);
				setState(8431);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8430);
					match(TABLE);
					}
				}

				setState(8433);
				qualifiedName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8434);
				match(GLOBAL);
				setState(8435);
				match(TEMPORARY);
				setState(8437);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8436);
					match(TABLE);
					}
				}

				setState(8439);
				qualifiedName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8440);
				match(GLOBAL);
				setState(8441);
				match(TEMP);
				setState(8443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8442);
					match(TABLE);
					}
				}

				setState(8445);
				qualifiedName();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8446);
				match(UNLOGGED);
				setState(8448);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8447);
					match(TABLE);
					}
				}

				setState(8450);
				qualifiedName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8451);
					match(TABLE);
					}
				}

				setState(8454);
				qualifiedName();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8455);
				qualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteListContext extends ParserRuleContext {
		public CommonTableExprContext commonTableExpr() {
			return getRuleContext(CommonTableExprContext.class,0);
		}
		public CteListContext cteList() {
			return getRuleContext(CteListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public CteListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCteList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCteList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCteList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteListContext cteList() throws RecognitionException {
		return cteList(0);
	}

	private CteListContext cteList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		CteListContext _localctx = new CteListContext(_ctx, _parentState);
		CteListContext _prevctx = _localctx;
		int _startState = 1208;
		enterRecursionRule(_localctx, 1208, RULE_cteList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8459);
			commonTableExpr();
			}
			_ctx.stop = _input.LT(-1);
			setState(8466);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,813,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CteListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_cteList);
					setState(8461);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8462);
					match(COMMA_);
					setState(8463);
					commonTableExpr();
					}
					} 
				}
				setState(8468);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,813,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CommonTableExprContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptNameListContext optNameList() {
			return getRuleContext(OptNameListContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public OptMaterializedContext optMaterialized() {
			return getRuleContext(OptMaterializedContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public CommonTableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCommonTableExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCommonTableExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCommonTableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExprContext commonTableExpr() throws RecognitionException {
		CommonTableExprContext _localctx = new CommonTableExprContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_commonTableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8469);
			name();
			setState(8470);
			optNameList();
			setState(8471);
			match(AS);
			setState(8472);
			optMaterialized();
			setState(8473);
			match(LP_);
			setState(8474);
			preparableStmt();
			setState(8475);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptMaterializedContext extends ParserRuleContext {
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public OptMaterializedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optMaterialized; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptMaterialized(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptMaterialized(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptMaterialized(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptMaterializedContext optMaterialized() throws RecognitionException {
		OptMaterializedContext _localctx = new OptMaterializedContext(_ctx, getState());
		enterRule(_localctx, 1212, RULE_optMaterialized);
		try {
			setState(8481);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATERIALIZED:
				enterOuterAlt(_localctx, 1);
				{
				setState(8477);
				match(MATERIALIZED);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8478);
				match(NOT);
				setState(8479);
				match(MATERIALIZED);
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptNameListContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public OptNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptNameListContext optNameList() throws RecognitionException {
		OptNameListContext _localctx = new OptNameListContext(_ctx, getState());
		enterRule(_localctx, 1214, RULE_optNameList);
		try {
			setState(8488);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8483);
				match(LP_);
				setState(8484);
				nameList(0);
				setState(8485);
				match(RP_);
				}
				break;
			case AS:
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparableStmtContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public PreparableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparableStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPreparableStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPreparableStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPreparableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparableStmtContext preparableStmt() throws RecognitionException {
		PreparableStmtContext _localctx = new PreparableStmtContext(_ctx, getState());
		enterRule(_localctx, 1216, RULE_preparableStmt);
		try {
			setState(8494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,816,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8490);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8491);
				insert();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8492);
				update();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8493);
				delete();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForLockingClauseContext extends ParserRuleContext {
		public ForLockingItemsContext forLockingItems() {
			return getRuleContext(ForLockingItemsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode READ() { return getToken(DDLStatementParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(DDLStatementParser.ONLY, 0); }
		public ForLockingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterForLockingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitForLockingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitForLockingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingClauseContext forLockingClause() throws RecognitionException {
		ForLockingClauseContext _localctx = new ForLockingClauseContext(_ctx, getState());
		enterRule(_localctx, 1218, RULE_forLockingClause);
		try {
			setState(8500);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,817,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8496);
				forLockingItems(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8497);
				match(FOR);
				setState(8498);
				match(READ);
				setState(8499);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForLockingItemsContext extends ParserRuleContext {
		public ForLockingItemContext forLockingItem() {
			return getRuleContext(ForLockingItemContext.class,0);
		}
		public ForLockingItemsContext forLockingItems() {
			return getRuleContext(ForLockingItemsContext.class,0);
		}
		public ForLockingItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingItems; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterForLockingItems(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitForLockingItems(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitForLockingItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingItemsContext forLockingItems() throws RecognitionException {
		return forLockingItems(0);
	}

	private ForLockingItemsContext forLockingItems(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ForLockingItemsContext _localctx = new ForLockingItemsContext(_ctx, _parentState);
		ForLockingItemsContext _prevctx = _localctx;
		int _startState = 1220;
		enterRecursionRule(_localctx, 1220, RULE_forLockingItems, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8503);
			forLockingItem();
			}
			_ctx.stop = _input.LT(-1);
			setState(8509);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,818,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ForLockingItemsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_forLockingItems);
					setState(8505);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8506);
					forLockingItem();
					}
					} 
				}
				setState(8511);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,818,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ForLockingItemContext extends ParserRuleContext {
		public ForLockingStrengthContext forLockingStrength() {
			return getRuleContext(ForLockingStrengthContext.class,0);
		}
		public LockedRelsListContext lockedRelsList() {
			return getRuleContext(LockedRelsListContext.class,0);
		}
		public NowaitOrSkipContext nowaitOrSkip() {
			return getRuleContext(NowaitOrSkipContext.class,0);
		}
		public ForLockingItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterForLockingItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitForLockingItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitForLockingItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingItemContext forLockingItem() throws RecognitionException {
		ForLockingItemContext _localctx = new ForLockingItemContext(_ctx, getState());
		enterRule(_localctx, 1222, RULE_forLockingItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8512);
			forLockingStrength();
			setState(8514);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,819,_ctx) ) {
			case 1:
				{
				setState(8513);
				lockedRelsList();
				}
				break;
			}
			setState(8517);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,820,_ctx) ) {
			case 1:
				{
				setState(8516);
				nowaitOrSkip();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NowaitOrSkipContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(DDLStatementParser.NOWAIT, 0); }
		public TerminalNode LOCKED() { return getToken(DDLStatementParser.LOCKED, 0); }
		public NowaitOrSkipContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nowaitOrSkip; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNowaitOrSkip(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNowaitOrSkip(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNowaitOrSkip(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NowaitOrSkipContext nowaitOrSkip() throws RecognitionException {
		NowaitOrSkipContext _localctx = new NowaitOrSkipContext(_ctx, getState());
		enterRule(_localctx, 1224, RULE_nowaitOrSkip);
		try {
			setState(8522);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOWAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8519);
				match(NOWAIT);
				}
				break;
			case T__3:
				enterOuterAlt(_localctx, 2);
				{
				setState(8520);
				match(T__3);
				setState(8521);
				match(LOCKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForLockingStrengthContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode KEY() { return getToken(DDLStatementParser.KEY, 0); }
		public TerminalNode SHARE() { return getToken(DDLStatementParser.SHARE, 0); }
		public ForLockingStrengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingStrength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterForLockingStrength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitForLockingStrength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitForLockingStrength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingStrengthContext forLockingStrength() throws RecognitionException {
		ForLockingStrengthContext _localctx = new ForLockingStrengthContext(_ctx, getState());
		enterRule(_localctx, 1226, RULE_forLockingStrength);
		try {
			setState(8535);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,822,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8524);
				match(FOR);
				setState(8525);
				match(UPDATE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8526);
				match(FOR);
				setState(8527);
				match(NO);
				setState(8528);
				match(KEY);
				setState(8529);
				match(UPDATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8530);
				match(FOR);
				setState(8531);
				match(SHARE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8532);
				match(FOR);
				setState(8533);
				match(KEY);
				setState(8534);
				match(SHARE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockedRelsListContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public LockedRelsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockedRelsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterLockedRelsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitLockedRelsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitLockedRelsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockedRelsListContext lockedRelsList() throws RecognitionException {
		LockedRelsListContext _localctx = new LockedRelsListContext(_ctx, getState());
		enterRule(_localctx, 1228, RULE_lockedRelsList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8537);
			match(OF);
			setState(8538);
			qualifiedNameList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedNameListContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterQualifiedNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitQualifiedNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitQualifiedNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedNameListContext qualifiedNameList() throws RecognitionException {
		return qualifiedNameList(0);
	}

	private QualifiedNameListContext qualifiedNameList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		QualifiedNameListContext _localctx = new QualifiedNameListContext(_ctx, _parentState);
		QualifiedNameListContext _prevctx = _localctx;
		int _startState = 1230;
		enterRecursionRule(_localctx, 1230, RULE_qualifiedNameList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8541);
			qualifiedName();
			}
			_ctx.stop = _input.LT(-1);
			setState(8548);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,823,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_qualifiedNameList);
					setState(8543);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8544);
					match(COMMA_);
					setState(8545);
					qualifiedName();
					}
					} 
				}
				setState(8550);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,823,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SelectLimitContext extends ParserRuleContext {
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public SelectLimitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLimit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSelectLimit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSelectLimit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSelectLimit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLimitContext selectLimit() throws RecognitionException {
		SelectLimitContext _localctx = new SelectLimitContext(_ctx, getState());
		enterRule(_localctx, 1232, RULE_selectLimit);
		try {
			setState(8559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,824,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8551);
				limitClause();
				setState(8552);
				offsetClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8554);
				offsetClause();
				setState(8555);
				limitClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8557);
				limitClause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8558);
				offsetClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesClauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(DDLStatementParser.VALUES, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public ValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterValuesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitValuesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitValuesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesClauseContext valuesClause() throws RecognitionException {
		return valuesClause(0);
	}

	private ValuesClauseContext valuesClause(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ValuesClauseContext _localctx = new ValuesClauseContext(_ctx, _parentState);
		ValuesClauseContext _prevctx = _localctx;
		int _startState = 1234;
		enterRecursionRule(_localctx, 1234, RULE_valuesClause, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8562);
			match(VALUES);
			setState(8563);
			match(LP_);
			setState(8564);
			exprList(0);
			setState(8565);
			match(RP_);
			}
			_ctx.stop = _input.LT(-1);
			setState(8575);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,825,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ValuesClauseContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_valuesClause);
					setState(8567);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8568);
					match(COMMA_);
					setState(8569);
					match(LP_);
					setState(8570);
					exprList(0);
					setState(8571);
					match(RP_);
					}
					} 
				}
				setState(8577);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,825,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(DDLStatementParser.LIMIT, 0); }
		public SelectLimitValueContext selectLimitValue() {
			return getRuleContext(SelectLimitValueContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public SelectOffsetValueContext selectOffsetValue() {
			return getRuleContext(SelectOffsetValueContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(DDLStatementParser.FETCH, 0); }
		public FirstOrNextContext firstOrNext() {
			return getRuleContext(FirstOrNextContext.class,0);
		}
		public SelectFetchFirstValueContext selectFetchFirstValue() {
			return getRuleContext(SelectFetchFirstValueContext.class,0);
		}
		public RowOrRowsContext rowOrRows() {
			return getRuleContext(RowOrRowsContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(DDLStatementParser.ONLY, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(DDLStatementParser.TIES, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 1236, RULE_limitClause);
		try {
			setState(8609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,826,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8578);
				match(LIMIT);
				setState(8579);
				selectLimitValue();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8580);
				match(LIMIT);
				setState(8581);
				selectLimitValue();
				setState(8582);
				match(COMMA_);
				setState(8583);
				selectOffsetValue();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8585);
				match(FETCH);
				setState(8586);
				firstOrNext();
				setState(8587);
				selectFetchFirstValue();
				setState(8588);
				rowOrRows();
				setState(8589);
				match(ONLY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8591);
				match(FETCH);
				setState(8592);
				firstOrNext();
				setState(8593);
				selectFetchFirstValue();
				setState(8594);
				rowOrRows();
				setState(8595);
				match(WITH);
				setState(8596);
				match(TIES);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8598);
				match(FETCH);
				setState(8599);
				firstOrNext();
				setState(8600);
				rowOrRows();
				setState(8601);
				match(ONLY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8603);
				match(FETCH);
				setState(8604);
				firstOrNext();
				setState(8605);
				rowOrRows();
				setState(8606);
				match(WITH);
				setState(8607);
				match(TIES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OffsetClauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(DDLStatementParser.OFFSET, 0); }
		public SelectOffsetValueContext selectOffsetValue() {
			return getRuleContext(SelectOffsetValueContext.class,0);
		}
		public SelectFetchFirstValueContext selectFetchFirstValue() {
			return getRuleContext(SelectFetchFirstValueContext.class,0);
		}
		public RowOrRowsContext rowOrRows() {
			return getRuleContext(RowOrRowsContext.class,0);
		}
		public OffsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offsetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOffsetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOffsetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOffsetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OffsetClauseContext offsetClause() throws RecognitionException {
		OffsetClauseContext _localctx = new OffsetClauseContext(_ctx, getState());
		enterRule(_localctx, 1238, RULE_offsetClause);
		try {
			setState(8617);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,827,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8611);
				match(OFFSET);
				setState(8612);
				selectOffsetValue();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8613);
				match(OFFSET);
				setState(8614);
				selectFetchFirstValue();
				setState(8615);
				rowOrRows();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLimitValueContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public SelectLimitValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLimitValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSelectLimitValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSelectLimitValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSelectLimitValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLimitValueContext selectLimitValue() throws RecognitionException {
		SelectLimitValueContext _localctx = new SelectLimitValueContext(_ctx, getState());
		enterRule(_localctx, 1240, RULE_selectLimitValue);
		try {
			setState(8621);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case OR_:
			case PLUS_:
			case MINUS_:
			case LP_:
			case QUESTION_:
			case JSON_EXTRACT_:
			case JSON_EXTRACT_TEXT_:
			case JSON_PATH_EXTRACT_:
			case JSON_PATH_EXTRACT_TEXT_:
			case JSONB_CONTAIN_RIGHT_:
			case JSONB_CONTAIN_LEFT_:
			case JSONB_CONTAIN_ALL_TOP_KEY_:
			case JSONB_PATH_DELETE_:
			case JSONB_PATH_CONTAIN_ANY_VALUE_:
			case JSONB_PATH_PREDICATE_CHECK_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case UNIQUE:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8619);
				aExpr(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8620);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectOffsetValueContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SelectOffsetValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectOffsetValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSelectOffsetValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSelectOffsetValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSelectOffsetValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectOffsetValueContext selectOffsetValue() throws RecognitionException {
		SelectOffsetValueContext _localctx = new SelectOffsetValueContext(_ctx, getState());
		enterRule(_localctx, 1242, RULE_selectOffsetValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8623);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFetchFirstValueContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public TerminalNode PLUS_() { return getToken(DDLStatementParser.PLUS_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode MINUS_() { return getToken(DDLStatementParser.MINUS_, 0); }
		public SelectFetchFirstValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFetchFirstValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSelectFetchFirstValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSelectFetchFirstValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSelectFetchFirstValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFetchFirstValueContext selectFetchFirstValue() throws RecognitionException {
		SelectFetchFirstValueContext _localctx = new SelectFetchFirstValueContext(_ctx, getState());
		enterRule(_localctx, 1244, RULE_selectFetchFirstValue);
		try {
			setState(8630);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case LP_:
			case QUESTION_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8625);
				cExpr();
				}
				break;
			case PLUS_:
				enterOuterAlt(_localctx, 2);
				{
				setState(8626);
				match(PLUS_);
				setState(8627);
				match(NUMBER_);
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 3);
				{
				setState(8628);
				match(MINUS_);
				setState(8629);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowOrRowsContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(DDLStatementParser.ROWS, 0); }
		public RowOrRowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowOrRows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRowOrRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRowOrRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRowOrRows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowOrRowsContext rowOrRows() throws RecognitionException {
		RowOrRowsContext _localctx = new RowOrRowsContext(_ctx, getState());
		enterRule(_localctx, 1246, RULE_rowOrRows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8632);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FirstOrNextContext extends ParserRuleContext {
		public TerminalNode FIRST() { return getToken(DDLStatementParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(DDLStatementParser.NEXT, 0); }
		public FirstOrNextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_firstOrNext; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFirstOrNext(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFirstOrNext(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFirstOrNext(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FirstOrNextContext firstOrNext() throws RecognitionException {
		FirstOrNextContext _localctx = new FirstOrNextContext(_ctx, getState());
		enterRule(_localctx, 1248, RULE_firstOrNext);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8634);
			_la = _input.LA(1);
			if ( !(_la==NEXT || _la==FIRST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TargetListContext extends ParserRuleContext {
		public TargetElContext targetEl() {
			return getRuleContext(TargetElContext.class,0);
		}
		public TargetListContext targetList() {
			return getRuleContext(TargetListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public TargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTargetList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTargetList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTargetList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetListContext targetList() throws RecognitionException {
		return targetList(0);
	}

	private TargetListContext targetList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TargetListContext _localctx = new TargetListContext(_ctx, _parentState);
		TargetListContext _prevctx = _localctx;
		int _startState = 1250;
		enterRecursionRule(_localctx, 1250, RULE_targetList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8637);
			targetEl();
			}
			_ctx.stop = _input.LT(-1);
			setState(8644);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,830,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TargetListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_targetList);
					setState(8639);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8640);
					match(COMMA_);
					setState(8641);
					targetEl();
					}
					} 
				}
				setState(8646);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,830,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TargetElContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode DOT_ASTERISK_() { return getToken(DDLStatementParser.DOT_ASTERISK_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TargetElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTargetEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTargetEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTargetEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetElContext targetEl() throws RecognitionException {
		TargetElContext _localctx = new TargetElContext(_ctx, getState());
		enterRule(_localctx, 1252, RULE_targetEl);
		try {
			setState(8659);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,831,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8647);
				colId();
				setState(8648);
				match(DOT_ASTERISK_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8650);
				aExpr(0);
				setState(8651);
				match(AS);
				setState(8652);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8654);
				aExpr(0);
				setState(8655);
				identifier();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8657);
				aExpr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8658);
				match(ASTERISK_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(DDLStatementParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public GroupByListContext groupByList() {
			return getRuleContext(GroupByListContext.class,0);
		}
		public GroupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGroupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGroupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGroupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupClauseContext groupClause() throws RecognitionException {
		GroupClauseContext _localctx = new GroupClauseContext(_ctx, getState());
		enterRule(_localctx, 1254, RULE_groupClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8661);
			match(GROUP);
			setState(8662);
			match(BY);
			setState(8663);
			groupByList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByListContext extends ParserRuleContext {
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public GroupByListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGroupByList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGroupByList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGroupByList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByListContext groupByList() throws RecognitionException {
		GroupByListContext _localctx = new GroupByListContext(_ctx, getState());
		enterRule(_localctx, 1256, RULE_groupByList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8665);
			groupByItem();
			setState(8670);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,832,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8666);
					match(COMMA_);
					setState(8667);
					groupByItem();
					}
					} 
				}
				setState(8672);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,832,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public EmptyGroupingSetContext emptyGroupingSet() {
			return getRuleContext(EmptyGroupingSetContext.class,0);
		}
		public CubeClauseContext cubeClause() {
			return getRuleContext(CubeClauseContext.class,0);
		}
		public RollupClauseContext rollupClause() {
			return getRuleContext(RollupClauseContext.class,0);
		}
		public GroupingSetsClauseContext groupingSetsClause() {
			return getRuleContext(GroupingSetsClauseContext.class,0);
		}
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGroupByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 1258, RULE_groupByItem);
		try {
			setState(8678);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,833,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8673);
				aExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8674);
				emptyGroupingSet();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8675);
				cubeClause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8676);
				rollupClause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8677);
				groupingSetsClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyGroupingSetContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public EmptyGroupingSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyGroupingSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterEmptyGroupingSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitEmptyGroupingSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitEmptyGroupingSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyGroupingSetContext emptyGroupingSet() throws RecognitionException {
		EmptyGroupingSetContext _localctx = new EmptyGroupingSetContext(_ctx, getState());
		enterRule(_localctx, 1260, RULE_emptyGroupingSet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8680);
			match(LP_);
			setState(8681);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollupClauseContext extends ParserRuleContext {
		public TerminalNode ROLLUP() { return getToken(DDLStatementParser.ROLLUP, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public RollupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRollupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRollupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRollupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollupClauseContext rollupClause() throws RecognitionException {
		RollupClauseContext _localctx = new RollupClauseContext(_ctx, getState());
		enterRule(_localctx, 1262, RULE_rollupClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8683);
			match(ROLLUP);
			setState(8684);
			match(LP_);
			setState(8685);
			exprList(0);
			setState(8686);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CubeClauseContext extends ParserRuleContext {
		public TerminalNode CUBE() { return getToken(DDLStatementParser.CUBE, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public CubeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cubeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCubeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCubeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCubeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CubeClauseContext cubeClause() throws RecognitionException {
		CubeClauseContext _localctx = new CubeClauseContext(_ctx, getState());
		enterRule(_localctx, 1264, RULE_cubeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8688);
			match(CUBE);
			setState(8689);
			match(LP_);
			setState(8690);
			exprList(0);
			setState(8691);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetsClauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(DDLStatementParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(DDLStatementParser.SETS, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public GroupByListContext groupByList() {
			return getRuleContext(GroupByListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public GroupingSetsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSetsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGroupingSetsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGroupingSetsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGroupingSetsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetsClauseContext groupingSetsClause() throws RecognitionException {
		GroupingSetsClauseContext _localctx = new GroupingSetsClauseContext(_ctx, getState());
		enterRule(_localctx, 1266, RULE_groupingSetsClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8693);
			match(GROUPING);
			setState(8694);
			match(SETS);
			setState(8695);
			match(LP_);
			setState(8696);
			groupByList();
			setState(8697);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(DDLStatementParser.WINDOW, 0); }
		public WindowDefinitionListContext windowDefinitionList() {
			return getRuleContext(WindowDefinitionListContext.class,0);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWindowClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWindowClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 1268, RULE_windowClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8699);
			match(WINDOW);
			setState(8700);
			windowDefinitionList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowDefinitionListContext extends ParserRuleContext {
		public WindowDefinitionContext windowDefinition() {
			return getRuleContext(WindowDefinitionContext.class,0);
		}
		public WindowDefinitionListContext windowDefinitionList() {
			return getRuleContext(WindowDefinitionListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public WindowDefinitionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowDefinitionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWindowDefinitionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWindowDefinitionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWindowDefinitionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowDefinitionListContext windowDefinitionList() throws RecognitionException {
		return windowDefinitionList(0);
	}

	private WindowDefinitionListContext windowDefinitionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		WindowDefinitionListContext _localctx = new WindowDefinitionListContext(_ctx, _parentState);
		WindowDefinitionListContext _prevctx = _localctx;
		int _startState = 1270;
		enterRecursionRule(_localctx, 1270, RULE_windowDefinitionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8703);
			windowDefinition();
			}
			_ctx.stop = _input.LT(-1);
			setState(8710);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,834,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new WindowDefinitionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_windowDefinitionList);
					setState(8705);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8706);
					match(COMMA_);
					setState(8707);
					windowDefinition();
					}
					} 
				}
				setState(8712);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,834,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class WindowDefinitionContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public WindowSpecificationContext windowSpecification() {
			return getRuleContext(WindowSpecificationContext.class,0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWindowDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWindowDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWindowDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowDefinitionContext windowDefinition() throws RecognitionException {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(_ctx, getState());
		enterRule(_localctx, 1272, RULE_windowDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8713);
			colId();
			setState(8714);
			match(AS);
			setState(8715);
			windowSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistingWindowNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ExistingWindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existingWindowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExistingWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExistingWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExistingWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistingWindowNameContext existingWindowName() throws RecognitionException {
		ExistingWindowNameContext _localctx = new ExistingWindowNameContext(_ctx, getState());
		enterRule(_localctx, 1274, RULE_existingWindowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8717);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptWindowExclusionClauseContext extends ParserRuleContext {
		public TerminalNode EXCLUDE() { return getToken(DDLStatementParser.EXCLUDE, 0); }
		public TerminalNode CURRENT() { return getToken(DDLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode GROUP() { return getToken(DDLStatementParser.GROUP, 0); }
		public TerminalNode TIES() { return getToken(DDLStatementParser.TIES, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(DDLStatementParser.OTHERS, 0); }
		public OptWindowExclusionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optWindowExclusionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptWindowExclusionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptWindowExclusionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptWindowExclusionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptWindowExclusionClauseContext optWindowExclusionClause() throws RecognitionException {
		OptWindowExclusionClauseContext _localctx = new OptWindowExclusionClauseContext(_ctx, getState());
		enterRule(_localctx, 1276, RULE_optWindowExclusionClause);
		try {
			setState(8730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,835,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8719);
				match(EXCLUDE);
				setState(8720);
				match(CURRENT);
				setState(8721);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8722);
				match(EXCLUDE);
				setState(8723);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8724);
				match(EXCLUDE);
				setState(8725);
				match(TIES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8726);
				match(EXCLUDE);
				setState(8727);
				match(NO);
				setState(8728);
				match(OTHERS);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 1278, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8732);
			match(FROM);
			setState(8733);
			fromList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromListContext extends ParserRuleContext {
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public FromListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFromList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFromList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFromList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromListContext fromList() throws RecognitionException {
		return fromList(0);
	}

	private FromListContext fromList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		FromListContext _localctx = new FromListContext(_ctx, _parentState);
		FromListContext _prevctx = _localctx;
		int _startState = 1280;
		enterRecursionRule(_localctx, 1280, RULE_fromList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8736);
			tableReference(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(8743);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,836,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FromListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_fromList);
					setState(8738);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8739);
					match(COMMA_);
					setState(8740);
					tableReference(0);
					}
					} 
				}
				setState(8745);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,836,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableReferenceContext extends ParserRuleContext {
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public AliasClauseContext aliasClause() {
			return getRuleContext(AliasClauseContext.class,0);
		}
		public TablesampleClauseContext tablesampleClause() {
			return getRuleContext(TablesampleClauseContext.class,0);
		}
		public FunctionTableContext functionTable() {
			return getRuleContext(FunctionTableContext.class,0);
		}
		public FuncAliasClauseContext funcAliasClause() {
			return getRuleContext(FuncAliasClauseContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(DDLStatementParser.LATERAL, 0); }
		public XmlTableContext xmlTable() {
			return getRuleContext(XmlTableContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public JoinedTableContext joinedTable() {
			return getRuleContext(JoinedTableContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		return tableReference(0);
	}

	private TableReferenceContext tableReference(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, _parentState);
		TableReferenceContext _prevctx = _localctx;
		int _startState = 1282;
		enterRecursionRule(_localctx, 1282, RULE_tableReference, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,846,_ctx) ) {
			case 1:
				{
				setState(8747);
				relationExpr();
				setState(8749);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,837,_ctx) ) {
				case 1:
					{
					setState(8748);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(8751);
				relationExpr();
				setState(8753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (UPDATE - 64)) | (1L << (DELETE - 64)) | (1L << (ALTER - 64)) | (1L << (DROP - 64)) | (1L << (TRUNCATE - 64)) | (1L << (SCHEMA - 64)) | (1L << (REVOKE - 64)) | (1L << (ADD - 64)) | (1L << (SET - 64)) | (1L << (INDEX - 64)) | (1L << (KEY - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (AS - 64)) | (1L << (IF - 64)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (BY - 132)) | (1L << (BEGIN - 132)) | (1L << (COMMIT - 132)) | (1L << (ROLLBACK - 132)) | (1L << (SAVEPOINT - 132)) | (1L << (DOUBLE - 132)) | (1L << (YEAR - 132)) | (1L << (MONTH - 132)) | (1L << (DAY - 132)) | (1L << (HOUR - 132)) | (1L << (MINUTE - 132)) | (1L << (SECOND - 132)) | (1L << (CURRENT - 132)) | (1L << (ENABLE - 132)) | (1L << (DISABLE - 132)) | (1L << (CALL - 132)) | (1L << (PRESERVE - 132)) | (1L << (DEFINER - 132)) | (1L << (SQL - 132)) | (1L << (CASCADED - 132)) | (1L << (LOCAL - 132)) | (1L << (CLOSE - 132)) | (1L << (NEXT - 132)) | (1L << (NAME - 132)) | (1L << (NAMES - 132)) | (1L << (TYPE - 132)) | (1L << (TEXT - 132)) | (1L << (REPEATABLE - 132)) | (1L << (VARYING - 132)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (VALUE - 197)) | (1L << (TIES - 197)) | (1L << (CUBE - 197)) | (1L << (SETS - 197)) | (1L << (OTHERS - 197)) | (1L << (AT - 197)) | (1L << (ADMIN - 197)) | (1L << (ESCAPE - 197)) | (1L << (EXCLUDE - 197)) | (1L << (PARTITION - 197)) | (1L << (UNKNOWN - 197)) | (1L << (ALWAYS - 197)) | (1L << (CASCADE - 197)) | (1L << (GENERATED - 197)) | (1L << (ISOLATION - 197)) | (1L << (LEVEL - 197)) | (1L << (NO - 197)) | (1L << (OPTION - 197)) | (1L << (PRIVILEGES - 197)) | (1L << (READ - 197)) | (1L << (ROLE - 197)) | (1L << (ROWS - 197)) | (1L << (START - 197)) | (1L << (TRANSACTION - 197)) | (1L << (ACTION - 197)) | (1L << (CACHE - 197)) | (1L << (CHARACTERISTICS - 197)) | (1L << (CLUSTER - 197)) | (1L << (COMMENTS - 197)) | (1L << (CONSTRAINTS - 197)) | (1L << (CYCLE - 197)) | (1L << (DATA - 197)) | (1L << (DATABASE - 197)) | (1L << (DEFAULTS - 197)) | (1L << (DEFERRED - 197)) | (1L << (DEPENDS - 197)) | (1L << (DOMAIN - 197)) | (1L << (EXCLUDING - 197)) | (1L << (EXECUTE - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (EXTENSION - 261)) | (1L << (EXTERNAL - 261)) | (1L << (FILTER - 261)) | (1L << (FIRST - 261)) | (1L << (FOLLOWING - 261)) | (1L << (FORCE - 261)) | (1L << (GLOBAL - 261)) | (1L << (IDENTITY - 261)) | (1L << (IMMEDIATE - 261)) | (1L << (INCLUDING - 261)) | (1L << (INCREMENT - 261)) | (1L << (INDEXES - 261)) | (1L << (INHERIT - 261)) | (1L << (INHERITS - 261)) | (1L << (INCLUDE - 261)) | (1L << (LANGUAGE - 261)) | (1L << (LARGE - 261)) | (1L << (LAST - 261)) | (1L << (LOGGED - 261)) | (1L << (MATCH - 261)) | (1L << (MAXVALUE - 261)) | (1L << (MINVALUE - 261)) | (1L << (NOTHING - 261)) | (1L << (NULLS - 261)) | (1L << (OBJECT - 261)) | (1L << (OIDS - 261)) | (1L << (OVER - 261)) | (1L << (OWNED - 261)) | (1L << (OWNER - 261)) | (1L << (PARTIAL - 261)) | (1L << (PRECEDING - 261)) | (1L << (RANGE - 261)) | (1L << (RENAME - 261)) | (1L << (REPLICA - 261)) | (1L << (RESET - 261)) | (1L << (RESTART - 261)) | (1L << (RESTRICT - 261)) | (1L << (ROUTINE - 261)) | (1L << (RULE - 261)) | (1L << (SECURITY - 261)) | (1L << (SEQUENCE - 261)) | (1L << (SESSION - 261)) | (1L << (SHOW - 261)) | (1L << (SIMPLE - 261)) | (1L << (STATISTICS - 261)) | (1L << (STORAGE - 261)) | (1L << (TABLESPACE - 261)) | (1L << (TEMP - 261)) | (1L << (TEMPORARY - 261)) | (1L << (UNBOUNDED - 261)) | (1L << (UNLOGGED - 261)) | (1L << (VALID - 261)) | (1L << (VALIDATE - 261)) | (1L << (WITHIN - 261)) | (1L << (WITHOUT - 261)) | (1L << (ZONE - 261)) | (1L << (OF - 261)))) != 0) || ((((_la - 325)) & ~0x3f) == 0 && ((1L << (_la - 325)) & ((1L << (UESCAPE - 325)) | (1L << (GROUPS - 325)) | (1L << (RECURSIVE - 325)) | (1L << (ENUM - 325)) | (1L << (XML - 325)) | (1L << (JSON - 325)) | (1L << (ORDINALITY - 325)) | (1L << (NFC - 325)) | (1L << (NFD - 325)) | (1L << (NFKC - 325)) | (1L << (NFKD - 325)) | (1L << (REF - 325)) | (1L << (PASSING - 325)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (VERSION - 389)) | (1L << (YES - 389)) | (1L << (STANDALONE - 389)) | (1L << (MATERIALIZED - 389)) | (1L << (OPERATOR - 389)) | (1L << (SHARE - 389)) | (1L << (ROLLUP - 389)) | (1L << (DOCUMENT - 389)) | (1L << (NORMALIZED - 389)) | (1L << (NOWAIT - 389)) | (1L << (LOCKED - 389)) | (1L << (COLUMNS - 389)) | (1L << (CONTENT - 389)) | (1L << (STRIP - 389)) | (1L << (WHITESPACE - 389)) | (1L << (CONFLICT - 389)) | (1L << (OVERRIDING - 389)) | (1L << (SYSTEM - 389)) | (1L << (ABORT - 389)) | (1L << (ABSOLUTE - 389)) | (1L << (ACCESS - 389)) | (1L << (AFTER - 389)) | (1L << (AGGREGATE - 389)) | (1L << (ALSO - 389)) | (1L << (ATTACH - 389)) | (1L << (ATTRIBUTE - 389)) | (1L << (BACKWARD - 389)) | (1L << (BEFORE - 389)) | (1L << (ASSERTION - 389)) | (1L << (ASSIGNMENT - 389)) | (1L << (CONTINUE - 389)) | (1L << (CONVERSION - 389)) | (1L << (COPY - 389)) | (1L << (COST - 389)) | (1L << (CSV - 389)) | (1L << (CALLED - 389)) | (1L << (CATALOG - 389)) | (1L << (CHAIN - 389)) | (1L << (CHECKPOINT - 389)) | (1L << (CLASS - 389)) | (1L << (CONFIGURATION - 389)) | (1L << (COMMENT - 389)) | (1L << (DETACH - 389)) | (1L << (DICTIONARY - 389)) | (1L << (EXPRESSION - 389)) | (1L << (INSENSITIVE - 389)) | (1L << (DISCARD - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (OFF - 453)) | (1L << (INSTEAD - 453)) | (1L << (EXPLAIN - 453)) | (1L << (INPUT - 453)) | (1L << (INLINE - 453)) | (1L << (PARALLEL - 453)) | (1L << (LEAKPROOF - 453)) | (1L << (COMMITTED - 453)) | (1L << (ENCODING - 453)) | (1L << (IMPLICIT - 453)) | (1L << (DELIMITER - 453)) | (1L << (CURSOR - 453)) | (1L << (EACH - 453)) | (1L << (EVENT - 453)) | (1L << (DEALLOCATE - 453)) | (1L << (CONNECTION - 453)) | (1L << (DECLARE - 453)) | (1L << (FAMILY - 453)) | (1L << (FORWARD - 453)) | (1L << (EXCLUSIVE - 453)) | (1L << (FUNCTIONS - 453)) | (1L << (LOCATION - 453)) | (1L << (LABEL - 453)) | (1L << (DELIMITERS - 453)) | (1L << (HANDLER - 453)) | (1L << (HEADER - 453)) | (1L << (IMMUTABLE - 453)) | (1L << (GRANTED - 453)) | (1L << (HOLD - 453)) | (1L << (MAPPING - 453)) | (1L << (OLD - 453)) | (1L << (METHOD - 453)) | (1L << (LOAD - 453)) | (1L << (LISTEN - 453)) | (1L << (MODE - 453)) | (1L << (MOVE - 453)) | (1L << (PROCEDURAL - 453)) | (1L << (PARSER - 453)) | (1L << (PROCEDURES - 453)) | (1L << (ENCRYPTED - 453)) | (1L << (PUBLICATION - 453)) | (1L << (PROGRAM - 453)) | (1L << (REFERENCING - 453)) | (1L << (PLANS - 453)) | (1L << (REINDEX - 453)) | (1L << (PRIOR - 453)) | (1L << (PASSWORD - 453)) | (1L << (RELATIVE - 453)) | (1L << (QUOTE - 453)) | (1L << (ROUTINES - 453)) | (1L << (REPLACE - 453)) | (1L << (SNAPSHOT - 453)) | (1L << (REFRESH - 453)) | (1L << (PREPARE - 453)) | (1L << (OPTIONS - 453)) | (1L << (IMPORT - 453)) | (1L << (INVOKER - 453)) | (1L << (NEW - 453)) | (1L << (PREPARED - 453)) | (1L << (SCROLL - 453)) | (1L << (SEQUENCES - 453)) | (1L << (SYSID - 453)) | (1L << (REASSIGN - 453)) | (1L << (SERVER - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (SUBSCRIPTION - 517)) | (1L << (SEARCH - 517)) | (1L << (SCHEMAS - 517)) | (1L << (RECHECK - 517)) | (1L << (POLICY - 517)) | (1L << (NOTIFY - 517)) | (1L << (LOCK - 517)) | (1L << (RELEASE - 517)) | (1L << (SERIALIZABLE - 517)) | (1L << (RETURNS - 517)) | (1L << (STATEMENT - 517)) | (1L << (STDIN - 517)) | (1L << (STDOUT - 517)) | (1L << (TABLES - 517)) | (1L << (SUPPORT - 517)) | (1L << (STABLE - 517)) | (1L << (TEMPLATE - 517)) | (1L << (UNENCRYPTED - 517)) | (1L << (VIEWS - 517)) | (1L << (UNCOMMITTED - 517)) | (1L << (TRANSFORM - 517)) | (1L << (UNLISTEN - 517)) | (1L << (TRUSTED - 517)) | (1L << (VALIDATOR - 517)) | (1L << (UNTIL - 517)) | (1L << (VACUUM - 517)) | (1L << (VOLATILE - 517)) | (1L << (STORED - 517)) | (1L << (WRITE - 517)) | (1L << (STRICT - 517)) | (1L << (TYPES - 517)) | (1L << (WRAPPER - 517)) | (1L << (WORK - 517)) | (1L << (IDENTIFIER_ - 517)))) != 0)) {
					{
					setState(8752);
					aliasClause();
					}
				}

				setState(8755);
				tablesampleClause();
				}
				break;
			case 3:
				{
				setState(8757);
				functionTable();
				setState(8759);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,839,_ctx) ) {
				case 1:
					{
					setState(8758);
					funcAliasClause();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(8761);
				match(LATERAL);
				setState(8762);
				functionTable();
				setState(8764);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,840,_ctx) ) {
				case 1:
					{
					setState(8763);
					funcAliasClause();
					}
					break;
				}
				}
				break;
			case 5:
				{
				setState(8766);
				xmlTable();
				setState(8768);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,841,_ctx) ) {
				case 1:
					{
					setState(8767);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 6:
				{
				setState(8770);
				match(LATERAL);
				setState(8771);
				xmlTable();
				setState(8773);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,842,_ctx) ) {
				case 1:
					{
					setState(8772);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 7:
				{
				setState(8775);
				selectWithParens();
				setState(8777);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,843,_ctx) ) {
				case 1:
					{
					setState(8776);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 8:
				{
				setState(8779);
				match(LATERAL);
				setState(8780);
				selectWithParens();
				setState(8782);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,844,_ctx) ) {
				case 1:
					{
					setState(8781);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 9:
				{
				setState(8784);
				match(LP_);
				setState(8785);
				tableReference(0);
				setState(8786);
				joinedTable();
				setState(8787);
				match(RP_);
				setState(8789);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,845,_ctx) ) {
				case 1:
					{
					setState(8788);
					aliasClause();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(8797);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,847,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableReferenceContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableReference);
					setState(8793);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8794);
					joinedTable();
					}
					} 
				}
				setState(8799);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,847,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class JoinedTableContext extends ParserRuleContext {
		public TerminalNode CROSS() { return getToken(DDLStatementParser.CROSS, 0); }
		public TerminalNode JOIN() { return getToken(DDLStatementParser.JOIN, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public JoinTypeContext joinType() {
			return getRuleContext(JoinTypeContext.class,0);
		}
		public JoinQualContext joinQual() {
			return getRuleContext(JoinQualContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(DDLStatementParser.NATURAL, 0); }
		public JoinedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJoinedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJoinedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJoinedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinedTableContext joinedTable() throws RecognitionException {
		JoinedTableContext _localctx = new JoinedTableContext(_ctx, getState());
		enterRule(_localctx, 1284, RULE_joinedTable);
		try {
			setState(8820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,848,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8800);
				match(CROSS);
				setState(8801);
				match(JOIN);
				setState(8802);
				tableReference(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8803);
				joinType();
				setState(8804);
				match(JOIN);
				setState(8805);
				tableReference(0);
				setState(8806);
				joinQual();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8808);
				match(JOIN);
				setState(8809);
				tableReference(0);
				setState(8810);
				joinQual();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8812);
				match(NATURAL);
				setState(8813);
				joinType();
				setState(8814);
				match(JOIN);
				setState(8815);
				tableReference(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8817);
				match(NATURAL);
				setState(8818);
				match(JOIN);
				setState(8819);
				tableReference(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinTypeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(DDLStatementParser.FULL, 0); }
		public JoinOuterContext joinOuter() {
			return getRuleContext(JoinOuterContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(DDLStatementParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(DDLStatementParser.RIGHT, 0); }
		public TerminalNode INNER() { return getToken(DDLStatementParser.INNER, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinTypeContext joinType() throws RecognitionException {
		JoinTypeContext _localctx = new JoinTypeContext(_ctx, getState());
		enterRule(_localctx, 1286, RULE_joinType);
		int _la;
		try {
			setState(8835);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8822);
				match(FULL);
				setState(8824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(8823);
					joinOuter();
					}
				}

				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8826);
				match(LEFT);
				setState(8828);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(8827);
					joinOuter();
					}
				}

				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 3);
				{
				setState(8830);
				match(RIGHT);
				setState(8832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(8831);
					joinOuter();
					}
				}

				}
				break;
			case INNER:
				enterOuterAlt(_localctx, 4);
				{
				setState(8834);
				match(INNER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinOuterContext extends ParserRuleContext {
		public TerminalNode OUTER() { return getToken(DDLStatementParser.OUTER, 0); }
		public JoinOuterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinOuter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJoinOuter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJoinOuter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJoinOuter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinOuterContext joinOuter() throws RecognitionException {
		JoinOuterContext _localctx = new JoinOuterContext(_ctx, getState());
		enterRule(_localctx, 1288, RULE_joinOuter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8837);
			match(OUTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinQualContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public JoinQualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinQual; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJoinQual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJoinQual(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJoinQual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinQualContext joinQual() throws RecognitionException {
		JoinQualContext _localctx = new JoinQualContext(_ctx, getState());
		enterRule(_localctx, 1290, RULE_joinQual);
		try {
			setState(8846);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(8839);
				match(USING);
				setState(8840);
				match(LP_);
				setState(8841);
				nameList(0);
				setState(8842);
				match(RP_);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8844);
				match(ON);
				setState(8845);
				aExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(DDLStatementParser.WHERE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 1292, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8848);
			match(WHERE);
			setState(8849);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereOrCurrentClauseContext extends ParserRuleContext {
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DDLStatementParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(DDLStatementParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public WhereOrCurrentClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereOrCurrentClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWhereOrCurrentClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWhereOrCurrentClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWhereOrCurrentClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereOrCurrentClauseContext whereOrCurrentClause() throws RecognitionException {
		WhereOrCurrentClauseContext _localctx = new WhereOrCurrentClauseContext(_ctx, getState());
		enterRule(_localctx, 1294, RULE_whereOrCurrentClause);
		try {
			setState(8856);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,854,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8851);
				whereClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8852);
				match(WHERE);
				setState(8853);
				match(CURRENT);
				setState(8854);
				match(OF);
				setState(8855);
				cursorName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(DDLStatementParser.HAVING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 1296, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8858);
			match(HAVING);
			setState(8859);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(DDLStatementParser.DO, 0); }
		public DostmtOptListContext dostmtOptList() {
			return getRuleContext(DostmtOptListContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 1298, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8861);
			match(DO);
			setState(8862);
			dostmtOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DostmtOptListContext extends ParserRuleContext {
		public List<DostmtOptItemContext> dostmtOptItem() {
			return getRuleContexts(DostmtOptItemContext.class);
		}
		public DostmtOptItemContext dostmtOptItem(int i) {
			return getRuleContext(DostmtOptItemContext.class,i);
		}
		public DostmtOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmtOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDostmtOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDostmtOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDostmtOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DostmtOptListContext dostmtOptList() throws RecognitionException {
		DostmtOptListContext _localctx = new DostmtOptListContext(_ctx, getState());
		enterRule(_localctx, 1300, RULE_dostmtOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8865); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8864);
				dostmtOptItem();
				}
				}
				setState(8867); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==LANGUAGE || _la==STRING_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DostmtOptItemContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public DostmtOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmtOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDostmtOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDostmtOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDostmtOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DostmtOptItemContext dostmtOptItem() throws RecognitionException {
		DostmtOptItemContext _localctx = new DostmtOptItemContext(_ctx, getState());
		enterRule(_localctx, 1302, RULE_dostmtOptItem);
		try {
			setState(8872);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8869);
				match(STRING_);
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8870);
				match(LANGUAGE);
				setState(8871);
				nonReservedWordOrSconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(DDLStatementParser.LOCK, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public LockTypeContext lockType() {
			return getRuleContext(LockTypeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(DDLStatementParser.MODE, 0); }
		public TerminalNode NOWAIT() { return getToken(DDLStatementParser.NOWAIT, 0); }
		public LockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterLock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitLock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitLock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockContext lock() throws RecognitionException {
		LockContext _localctx = new LockContext(_ctx, getState());
		enterRule(_localctx, 1304, RULE_lock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8874);
			match(LOCK);
			setState(8876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(8875);
				match(TABLE);
				}
			}

			setState(8878);
			relationExprList();
			setState(8883);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(8879);
				match(IN);
				setState(8880);
				lockType();
				setState(8881);
				match(MODE);
				}
			}

			setState(8886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT) {
				{
				setState(8885);
				match(NOWAIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTypeContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(DDLStatementParser.ACCESS, 0); }
		public TerminalNode SHARE() { return getToken(DDLStatementParser.SHARE, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DDLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public LockTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterLockType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitLockType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitLockType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTypeContext lockType() throws RecognitionException {
		LockTypeContext _localctx = new LockTypeContext(_ctx, getState());
		enterRule(_localctx, 1306, RULE_lockType);
		try {
			setState(8904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,860,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8888);
				match(ACCESS);
				setState(8889);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8890);
				match(ROW);
				setState(8891);
				match(SHARE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8892);
				match(ROW);
				setState(8893);
				match(EXCLUSIVE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8894);
				match(SHARE);
				setState(8895);
				match(UPDATE);
				setState(8896);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8897);
				match(SHARE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8898);
				match(SHARE);
				setState(8899);
				match(ROW);
				setState(8900);
				match(EXCLUSIVE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8901);
				match(EXCLUSIVE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8902);
				match(ACCESS);
				setState(8903);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckpointContext extends ParserRuleContext {
		public TerminalNode CHECKPOINT() { return getToken(DDLStatementParser.CHECKPOINT, 0); }
		public CheckpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkpoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCheckpoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCheckpoint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCheckpoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckpointContext checkpoint() throws RecognitionException {
		CheckpointContext _localctx = new CheckpointContext(_ctx, getState());
		enterRule(_localctx, 1308, RULE_checkpoint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8906);
			match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(DDLStatementParser.COPY, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public CopyOptionsContext copyOptions() {
			return getRuleContext(CopyOptionsContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode STDIN() { return getToken(DDLStatementParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(DDLStatementParser.STDOUT, 0); }
		public TerminalNode BINARY() { return getToken(DDLStatementParser.BINARY, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode PROGRAM() { return getToken(DDLStatementParser.PROGRAM, 0); }
		public CopyDelimiterContext copyDelimiter() {
			return getRuleContext(CopyDelimiterContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public CopyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyContext copy() throws RecognitionException {
		CopyContext _localctx = new CopyContext(_ctx, getState());
		enterRule(_localctx, 1310, RULE_copy);
		int _la;
		try {
			setState(8948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,869,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8908);
				match(COPY);
				setState(8910);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(8909);
					match(BINARY);
					}
				}

				setState(8912);
				qualifiedName();
				setState(8917);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(8913);
					match(LP_);
					setState(8914);
					columnList();
					setState(8915);
					match(RP_);
					}
				}

				setState(8919);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==TO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8921);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROGRAM) {
					{
					setState(8920);
					match(PROGRAM);
					}
				}

				setState(8923);
				_la = _input.LA(1);
				if ( !(((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (STDIN - 528)) | (1L << (STDOUT - 528)) | (1L << (STRING_ - 528)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING || _la==DELIMITERS) {
					{
					setState(8924);
					copyDelimiter();
					}
				}

				setState(8928);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(8927);
					match(WITH);
					}
				}

				setState(8930);
				copyOptions();
				setState(8932);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(8931);
					whereClause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8934);
				match(COPY);
				setState(8935);
				match(LP_);
				setState(8936);
				preparableStmt();
				setState(8937);
				match(RP_);
				setState(8938);
				match(TO);
				setState(8940);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROGRAM) {
					{
					setState(8939);
					match(PROGRAM);
					}
				}

				setState(8942);
				_la = _input.LA(1);
				if ( !(((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (STDIN - 528)) | (1L << (STDOUT - 528)) | (1L << (STRING_ - 528)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8944);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(8943);
					match(WITH);
					}
				}

				setState(8946);
				copyOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptionsContext extends ParserRuleContext {
		public CopyOptListContext copyOptList() {
			return getRuleContext(CopyOptListContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public CopyGenericOptListContext copyGenericOptList() {
			return getRuleContext(CopyGenericOptListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public CopyOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptionsContext copyOptions() throws RecognitionException {
		CopyOptionsContext _localctx = new CopyOptionsContext(_ctx, getState());
		enterRule(_localctx, 1312, RULE_copyOptions);
		try {
			setState(8955);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case WHERE:
			case NULL:
			case BINARY:
			case ESCAPE:
			case FORCE:
			case CSV:
			case ENCODING:
			case DELIMITER:
			case HEADER:
			case QUOTE:
			case FREEZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8950);
				copyOptList();
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 2);
				{
				setState(8951);
				match(LP_);
				setState(8952);
				copyGenericOptList();
				setState(8953);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptListContext extends ParserRuleContext {
		public List<CopyGenericOptElemContext> copyGenericOptElem() {
			return getRuleContexts(CopyGenericOptElemContext.class);
		}
		public CopyGenericOptElemContext copyGenericOptElem(int i) {
			return getRuleContext(CopyGenericOptElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public CopyGenericOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyGenericOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyGenericOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyGenericOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptListContext copyGenericOptList() throws RecognitionException {
		CopyGenericOptListContext _localctx = new CopyGenericOptListContext(_ctx, getState());
		enterRule(_localctx, 1314, RULE_copyGenericOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8957);
			copyGenericOptElem();
			setState(8962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8958);
				match(COMMA_);
				setState(8959);
				copyGenericOptElem();
				}
				}
				setState(8964);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptElemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public CopyGenericOptArgContext copyGenericOptArg() {
			return getRuleContext(CopyGenericOptArgContext.class,0);
		}
		public CopyGenericOptElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyGenericOptElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyGenericOptElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyGenericOptElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptElemContext copyGenericOptElem() throws RecognitionException {
		CopyGenericOptElemContext _localctx = new CopyGenericOptElemContext(_ctx, getState());
		enterRule(_localctx, 1316, RULE_copyGenericOptElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8965);
			colLabel();
			setState(8966);
			copyGenericOptArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptArgContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public CopyGenericOptArgListContext copyGenericOptArgList() {
			return getRuleContext(CopyGenericOptArgListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public CopyGenericOptArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyGenericOptArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyGenericOptArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyGenericOptArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptArgContext copyGenericOptArg() throws RecognitionException {
		CopyGenericOptArgContext _localctx = new CopyGenericOptArgContext(_ctx, getState());
		enterRule(_localctx, 1318, RULE_copyGenericOptArg);
		try {
			setState(8975);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case JSON:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8968);
				booleanOrString();
				}
				break;
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(8969);
				numericOnly();
				}
				break;
			case ASTERISK_:
				enterOuterAlt(_localctx, 3);
				{
				setState(8970);
				match(ASTERISK_);
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 4);
				{
				setState(8971);
				match(LP_);
				setState(8972);
				copyGenericOptArgList();
				setState(8973);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptArgListContext extends ParserRuleContext {
		public List<CopyGenericOptArgListItemContext> copyGenericOptArgListItem() {
			return getRuleContexts(CopyGenericOptArgListItemContext.class);
		}
		public CopyGenericOptArgListItemContext copyGenericOptArgListItem(int i) {
			return getRuleContext(CopyGenericOptArgListItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public CopyGenericOptArgListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptArgList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyGenericOptArgList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyGenericOptArgList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyGenericOptArgList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptArgListContext copyGenericOptArgList() throws RecognitionException {
		CopyGenericOptArgListContext _localctx = new CopyGenericOptArgListContext(_ctx, getState());
		enterRule(_localctx, 1320, RULE_copyGenericOptArgList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8977);
			copyGenericOptArgListItem();
			setState(8982);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8978);
				match(COMMA_);
				setState(8979);
				copyGenericOptArgListItem();
				}
				}
				setState(8984);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptArgListItemContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public CopyGenericOptArgListItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptArgListItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyGenericOptArgListItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyGenericOptArgListItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyGenericOptArgListItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptArgListItemContext copyGenericOptArgListItem() throws RecognitionException {
		CopyGenericOptArgListItemContext _localctx = new CopyGenericOptArgListItemContext(_ctx, getState());
		enterRule(_localctx, 1322, RULE_copyGenericOptArgListItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8985);
			booleanOrString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptListContext extends ParserRuleContext {
		public List<CopyOptItemContext> copyOptItem() {
			return getRuleContexts(CopyOptItemContext.class);
		}
		public CopyOptItemContext copyOptItem(int i) {
			return getRuleContext(CopyOptItemContext.class,i);
		}
		public CopyOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptListContext copyOptList() throws RecognitionException {
		CopyOptListContext _localctx = new CopyOptListContext(_ctx, getState());
		enterRule(_localctx, 1324, RULE_copyOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NULL || ((((_la - 218)) & ~0x3f) == 0 && ((1L << (_la - 218)) & ((1L << (BINARY - 218)) | (1L << (ESCAPE - 218)) | (1L << (FORCE - 218)))) != 0) || ((((_la - 440)) & ~0x3f) == 0 && ((1L << (_la - 440)) & ((1L << (CSV - 440)) | (1L << (ENCODING - 440)) | (1L << (DELIMITER - 440)) | (1L << (HEADER - 440)) | (1L << (QUOTE - 440)))) != 0) || _la==FREEZE) {
				{
				{
				setState(8987);
				copyOptItem();
				}
				}
				setState(8992);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptItemContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(DDLStatementParser.BINARY, 0); }
		public TerminalNode FREEZE() { return getToken(DDLStatementParser.FREEZE, 0); }
		public TerminalNode DELIMITER() { return getToken(DDLStatementParser.DELIMITER, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode CSV() { return getToken(DDLStatementParser.CSV, 0); }
		public TerminalNode HEADER() { return getToken(DDLStatementParser.HEADER, 0); }
		public TerminalNode QUOTE() { return getToken(DDLStatementParser.QUOTE, 0); }
		public TerminalNode ESCAPE() { return getToken(DDLStatementParser.ESCAPE, 0); }
		public TerminalNode FORCE() { return getToken(DDLStatementParser.FORCE, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode ENCODING() { return getToken(DDLStatementParser.ENCODING, 0); }
		public CopyOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptItemContext copyOptItem() throws RecognitionException {
		CopyOptItemContext _localctx = new CopyOptItemContext(_ctx, getState());
		enterRule(_localctx, 1326, RULE_copyOptItem);
		int _la;
		try {
			setState(9032);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,879,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8993);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8994);
				match(FREEZE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8995);
				match(DELIMITER);
				setState(8997);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(8996);
					match(AS);
					}
				}

				setState(8999);
				match(STRING_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9000);
				match(NULL);
				setState(9002);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(9001);
					match(AS);
					}
				}

				setState(9004);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9005);
				match(CSV);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9006);
				match(HEADER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9007);
				match(QUOTE);
				setState(9009);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(9008);
					match(AS);
					}
				}

				setState(9011);
				match(STRING_);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9012);
				match(ESCAPE);
				setState(9014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(9013);
					match(AS);
					}
				}

				setState(9016);
				match(STRING_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9017);
				match(FORCE);
				setState(9018);
				match(QUOTE);
				setState(9019);
				columnList();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9020);
				match(FORCE);
				setState(9021);
				match(QUOTE);
				setState(9022);
				match(ASTERISK_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9023);
				match(FORCE);
				setState(9024);
				match(NOT);
				setState(9025);
				match(NULL);
				setState(9026);
				columnList();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9027);
				match(FORCE);
				setState(9028);
				match(NULL);
				setState(9029);
				columnList();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9030);
				match(ENCODING);
				setState(9031);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyDelimiterContext extends ParserRuleContext {
		public TerminalNode DELIMITERS() { return getToken(DDLStatementParser.DELIMITERS, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public CopyDelimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyDelimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyDelimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyDelimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyDelimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyDelimiterContext copyDelimiter() throws RecognitionException {
		CopyDelimiterContext _localctx = new CopyDelimiterContext(_ctx, getState());
		enterRule(_localctx, 1328, RULE_copyDelimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(9034);
				match(USING);
				}
			}

			setState(9037);
			match(DELIMITERS);
			setState(9038);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(DDLStatementParser.FETCH, 0); }
		public FetchArgsContext fetchArgs() {
			return getRuleContext(FetchArgsContext.class,0);
		}
		public FetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFetch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFetch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFetch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchContext fetch() throws RecognitionException {
		FetchContext _localctx = new FetchContext(_ctx, getState());
		enterRule(_localctx, 1330, RULE_fetch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9040);
			match(FETCH);
			setState(9041);
			fetchArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchArgsContext extends ParserRuleContext {
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public TerminalNode NEXT() { return getToken(DDLStatementParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(DDLStatementParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(DDLStatementParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(DDLStatementParser.LAST, 0); }
		public TerminalNode ABSOLUTE() { return getToken(DDLStatementParser.ABSOLUTE, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode RELATIVE() { return getToken(DDLStatementParser.RELATIVE, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(DDLStatementParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(DDLStatementParser.BACKWARD, 0); }
		public FetchArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFetchArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFetchArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFetchArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchArgsContext fetchArgs() throws RecognitionException {
		FetchArgsContext _localctx = new FetchArgsContext(_ctx, getState());
		enterRule(_localctx, 1332, RULE_fetchArgs);
		int _la;
		try {
			setState(9127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,895,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9043);
				cursorName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9044);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9045);
				cursorName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9046);
				match(NEXT);
				setState(9048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9047);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9050);
				cursorName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9051);
				match(PRIOR);
				setState(9053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9052);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9055);
				cursorName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9056);
				match(FIRST);
				setState(9058);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9057);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9060);
				cursorName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9061);
				match(LAST);
				setState(9063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9062);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9065);
				cursorName();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9066);
				match(ABSOLUTE);
				setState(9067);
				signedIconst();
				setState(9069);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9068);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9071);
				cursorName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9073);
				match(RELATIVE);
				setState(9074);
				signedIconst();
				setState(9076);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9075);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9078);
				cursorName();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9080);
				signedIconst();
				setState(9082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9081);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9084);
				cursorName();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9086);
				match(ALL);
				setState(9088);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9087);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9090);
				cursorName();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9091);
				match(FORWARD);
				setState(9093);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9092);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9095);
				cursorName();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9096);
				match(FORWARD);
				setState(9097);
				signedIconst();
				setState(9099);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9098);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9101);
				cursorName();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9103);
				match(FORWARD);
				setState(9104);
				match(ALL);
				setState(9106);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9105);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9108);
				cursorName();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(9109);
				match(BACKWARD);
				setState(9111);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9110);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9113);
				cursorName();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(9114);
				match(BACKWARD);
				setState(9115);
				signedIconst();
				setState(9117);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9116);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9119);
				cursorName();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(9121);
				match(BACKWARD);
				setState(9122);
				match(ALL);
				setState(9124);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9123);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9126);
				cursorName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 244:
			return tableLikeOptionList_sempred((TableLikeOptionListContext)_localctx, predIndex);
		case 380:
			return aExpr_sempred((AExprContext)_localctx, predIndex);
		case 381:
			return bExpr_sempred((BExprContext)_localctx, predIndex);
		case 383:
			return indirection_sempred((IndirectionContext)_localctx, predIndex);
		case 384:
			return optIndirection_sempred((OptIndirectionContext)_localctx, predIndex);
		case 427:
			return xmlTableColumnOptionList_sempred((XmlTableColumnOptionListContext)_localctx, predIndex);
		case 439:
			return exprList_sempred((ExprListContext)_localctx, predIndex);
		case 452:
			return attrs_sempred((AttrsContext)_localctx, predIndex);
		case 460:
			return optArrayBounds_sempred((OptArrayBoundsContext)_localctx, predIndex);
		case 487:
			return nameList_sempred((NameListContext)_localctx, predIndex);
		case 525:
			return varName_sempred((VarNameContext)_localctx, predIndex);
		case 584:
			return insertColumnList_sempred((InsertColumnListContext)_localctx, predIndex);
		case 589:
			return setClauseList_sempred((SetClauseListContext)_localctx, predIndex);
		case 592:
			return setTargetList_sempred((SetTargetListContext)_localctx, predIndex);
		case 599:
			return selectClauseN_sempred((SelectClauseNContext)_localctx, predIndex);
		case 604:
			return cteList_sempred((CteListContext)_localctx, predIndex);
		case 610:
			return forLockingItems_sempred((ForLockingItemsContext)_localctx, predIndex);
		case 615:
			return qualifiedNameList_sempred((QualifiedNameListContext)_localctx, predIndex);
		case 617:
			return valuesClause_sempred((ValuesClauseContext)_localctx, predIndex);
		case 625:
			return targetList_sempred((TargetListContext)_localctx, predIndex);
		case 635:
			return windowDefinitionList_sempred((WindowDefinitionListContext)_localctx, predIndex);
		case 640:
			return fromList_sempred((FromListContext)_localctx, predIndex);
		case 641:
			return tableReference_sempred((TableReferenceContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean tableLikeOptionList_sempred(TableLikeOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean aExpr_sempred(AExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 48);
		case 2:
			return precpred(_ctx, 45);
		case 3:
			return precpred(_ctx, 44);
		case 4:
			return precpred(_ctx, 43);
		case 5:
			return precpred(_ctx, 42);
		case 6:
			return precpred(_ctx, 41);
		case 7:
			return precpred(_ctx, 40);
		case 8:
			return precpred(_ctx, 39);
		case 9:
			return precpred(_ctx, 36);
		case 10:
			return precpred(_ctx, 34);
		case 11:
			return precpred(_ctx, 33);
		case 12:
			return precpred(_ctx, 21);
		case 13:
			return precpred(_ctx, 20);
		case 14:
			return precpred(_ctx, 17);
		case 15:
			return precpred(_ctx, 16);
		case 16:
			return precpred(_ctx, 15);
		case 17:
			return precpred(_ctx, 14);
		case 18:
			return precpred(_ctx, 2);
		case 19:
			return precpred(_ctx, 50);
		case 20:
			return precpred(_ctx, 49);
		case 21:
			return precpred(_ctx, 37);
		case 22:
			return precpred(_ctx, 32);
		case 23:
			return precpred(_ctx, 31);
		case 24:
			return precpred(_ctx, 30);
		case 25:
			return precpred(_ctx, 29);
		case 26:
			return precpred(_ctx, 27);
		case 27:
			return precpred(_ctx, 26);
		case 28:
			return precpred(_ctx, 25);
		case 29:
			return precpred(_ctx, 24);
		case 30:
			return precpred(_ctx, 23);
		case 31:
			return precpred(_ctx, 22);
		case 32:
			return precpred(_ctx, 19);
		case 33:
			return precpred(_ctx, 18);
		case 34:
			return precpred(_ctx, 13);
		case 35:
			return precpred(_ctx, 12);
		case 36:
			return precpred(_ctx, 11);
		case 37:
			return precpred(_ctx, 10);
		case 38:
			return precpred(_ctx, 8);
		case 39:
			return precpred(_ctx, 7);
		case 40:
			return precpred(_ctx, 6);
		case 41:
			return precpred(_ctx, 5);
		case 42:
			return precpred(_ctx, 4);
		case 43:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean bExpr_sempred(BExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44:
			return precpred(_ctx, 9);
		case 45:
			return precpred(_ctx, 6);
		case 46:
			return precpred(_ctx, 5);
		case 47:
			return precpred(_ctx, 12);
		case 48:
			return precpred(_ctx, 7);
		case 49:
			return precpred(_ctx, 4);
		case 50:
			return precpred(_ctx, 3);
		case 51:
			return precpred(_ctx, 2);
		case 52:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean indirection_sempred(IndirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean optIndirection_sempred(OptIndirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean xmlTableColumnOptionList_sempred(XmlTableColumnOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean exprList_sempred(ExprListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean attrs_sempred(AttrsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean optArrayBounds_sempred(OptArrayBoundsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58:
			return precpred(_ctx, 3);
		case 59:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean nameList_sempred(NameListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean varName_sempred(VarNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean insertColumnList_sempred(InsertColumnListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean setClauseList_sempred(SetClauseListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean setTargetList_sempred(SetTargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean selectClauseN_sempred(SelectClauseNContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65:
			return precpred(_ctx, 3);
		case 66:
			return precpred(_ctx, 2);
		case 67:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean cteList_sempred(CteListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean forLockingItems_sempred(ForLockingItemsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean qualifiedNameList_sempred(QualifiedNameListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean valuesClause_sempred(ValuesClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean targetList_sempred(TargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 72:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean windowDefinitionList_sempred(WindowDefinitionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 73:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean fromList_sempred(FromListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean tableReference_sempred(TableReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75:
			return precpred(_ctx, 2);
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0232\u23ac\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227"+
		"\4\u0228\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c"+
		"\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230\t\u0230"+
		"\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235"+
		"\t\u0235\4\u0236\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239"+
		"\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e"+
		"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241\4\u0242\t\u0242"+
		"\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247"+
		"\t\u0247\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b"+
		"\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f\4\u0250"+
		"\t\u0250\4\u0251\t\u0251\4\u0252\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254"+
		"\4\u0255\t\u0255\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259"+
		"\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c\4\u025d\t\u025d"+
		"\4\u025e\t\u025e\4\u025f\t\u025f\4\u0260\t\u0260\4\u0261\t\u0261\4\u0262"+
		"\t\u0262\4\u0263\t\u0263\4\u0264\t\u0264\4\u0265\t\u0265\4\u0266\t\u0266"+
		"\4\u0267\t\u0267\4\u0268\t\u0268\4\u0269\t\u0269\4\u026a\t\u026a\4\u026b"+
		"\t\u026b\4\u026c\t\u026c\4\u026d\t\u026d\4\u026e\t\u026e\4\u026f\t\u026f"+
		"\4\u0270\t\u0270\4\u0271\t\u0271\4\u0272\t\u0272\4\u0273\t\u0273\4\u0274"+
		"\t\u0274\4\u0275\t\u0275\4\u0276\t\u0276\4\u0277\t\u0277\4\u0278\t\u0278"+
		"\4\u0279\t\u0279\4\u027a\t\u027a\4\u027b\t\u027b\4\u027c\t\u027c\4\u027d"+
		"\t\u027d\4\u027e\t\u027e\4\u027f\t\u027f\4\u0280\t\u0280\4\u0281\t\u0281"+
		"\4\u0282\t\u0282\4\u0283\t\u0283\4\u0284\t\u0284\4\u0285\t\u0285\4\u0286"+
		"\t\u0286\4\u0287\t\u0287\4\u0288\t\u0288\4\u0289\t\u0289\4\u028a\t\u028a"+
		"\4\u028b\t\u028b\4\u028c\t\u028c\4\u028d\t\u028d\4\u028e\t\u028e\4\u028f"+
		"\t\u028f\4\u0290\t\u0290\4\u0291\t\u0291\4\u0292\t\u0292\4\u0293\t\u0293"+
		"\4\u0294\t\u0294\4\u0295\t\u0295\4\u0296\t\u0296\4\u0297\t\u0297\4\u0298"+
		"\t\u0298\4\u0299\t\u0299\4\u029a\t\u029a\4\u029b\t\u029b\4\u029c\t\u029c"+
		"\3\2\3\2\3\2\3\2\5\2\u053d\n\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u0547"+
		"\n\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u0550\n\2\3\2\3\2\5\2\u0554\n\2\3"+
		"\2\3\2\5\2\u0558\n\2\3\2\5\2\u055b\n\2\3\2\5\2\u055e\n\2\3\2\5\2\u0561"+
		"\n\2\3\2\5\2\u0564\n\2\3\2\3\2\3\2\5\2\u0569\n\2\5\2\u056b\n\2\3\2\3\2"+
		"\3\2\3\2\5\2\u0571\n\2\5\2\u0573\n\2\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\4\3\4\5\4\u0593\n\4\3\5\3\5\3\5\7\5\u0598\n\5\f\5\16\5\u059b"+
		"\13\5\3\6\3\6\3\6\3\7\3\7\3\7\7\7\u05a3\n\7\f\7\16\7\u05a6\13\7\3\b\3"+
		"\b\5\b\u05aa\n\b\3\t\3\t\3\t\5\t\u05af\n\t\3\t\3\t\3\n\7\n\u05b4\n\n\f"+
		"\n\16\n\u05b7\13\n\3\13\3\13\3\13\3\13\3\13\5\13\u05be\n\13\3\f\3\f\3"+
		"\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u05ca\n\r\3\16\3\16\3\16\3\16\5\16"+
		"\u05d0\n\16\3\17\3\17\3\17\3\20\3\20\3\20\5\20\u05d8\n\20\3\21\3\21\3"+
		"\21\3\21\3\21\5\21\u05df\n\21\3\21\5\21\u05e2\n\21\3\21\3\21\3\21\3\21"+
		"\5\21\u05e8\n\21\3\21\3\21\3\21\3\21\5\21\u05ee\n\21\3\21\3\21\5\21\u05f2"+
		"\n\21\3\21\5\21\u05f5\n\21\3\21\5\21\u05f8\n\21\3\22\3\22\3\22\3\22\3"+
		"\22\3\23\3\23\3\23\7\23\u0602\n\23\f\23\16\23\u0605\13\23\3\24\3\24\3"+
		"\24\3\25\3\25\3\25\3\25\5\25\u060e\n\25\3\25\7\25\u0611\n\25\f\25\16\25"+
		"\u0614\13\25\3\26\3\26\3\26\5\26\u0619\n\26\3\26\5\26\u061c\n\26\3\26"+
		"\5\26\u061f\n\26\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u0627\n\26\f\26\16"+
		"\26\u062a\13\26\5\26\u062c\n\26\3\26\5\26\u062f\n\26\3\26\3\26\5\26\u0633"+
		"\n\26\3\26\3\26\3\26\3\26\5\26\u0639\n\26\3\26\3\26\5\26\u063d\n\26\3"+
		"\27\3\27\3\27\7\27\u0642\n\27\f\27\16\27\u0645\13\27\3\30\3\30\3\31\3"+
		"\31\3\31\5\31\u064c\n\31\3\31\3\31\3\32\3\32\5\32\u0652\n\32\3\32\3\32"+
		"\3\32\5\32\u0657\n\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u0661"+
		"\n\33\3\34\3\34\3\34\5\34\u0666\n\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\5\34\u0673\n\34\3\34\3\34\3\34\3\34\5\34\u0679\n"+
		"\34\5\34\u067b\n\34\3\35\3\35\3\35\5\35\u0680\n\35\3\35\3\35\3\35\5\35"+
		"\u0685\n\35\3\35\3\35\3\35\3\36\3\36\3\36\5\36\u068d\n\36\3\36\3\36\5"+
		"\36\u0691\n\36\3\37\3\37\3 \3 \3 \3 \5 \u0699\n \3 \3 \5 \u069d\n \3!"+
		"\3!\3\"\3\"\5\"\u06a3\n\"\3\"\3\"\3\"\5\"\u06a8\n\"\3\"\5\"\u06ab\n\""+
		"\3#\3#\3#\3#\5#\u06b1\n#\3$\5$\u06b4\n$\3$\3$\5$\u06b8\n$\3%\3%\3%\3%"+
		"\7%\u06be\n%\f%\16%\u06c1\13%\5%\u06c3\n%\3%\3%\3&\3&\3&\3&\3&\7&\u06cc"+
		"\n&\f&\16&\u06cf\13&\5&\u06d1\n&\3\'\3\'\3\'\5\'\u06d6\n\'\3\'\7\'\u06d9"+
		"\n\'\f\'\16\'\u06dc\13\'\3(\5(\u06df\n(\3(\3(\3(\3)\3)\3)\3*\5*\u06e8"+
		"\n*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u06fa\n*\3*\3*"+
		"\3*\3*\3*\3*\5*\u0702\n*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u070c\n*\3*\3*\3*"+
		"\3*\3*\3*\5*\u0714\n*\3*\3*\3*\7*\u0719\n*\f*\16*\u071c\13*\5*\u071e\n"+
		"*\3+\3+\3+\3+\5+\u0724\n+\3,\3,\5,\u0728\n,\3-\6-\u072b\n-\r-\16-\u072c"+
		"\3.\3.\5.\u0731\n.\3.\3.\3.\5.\u0736\n.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3."+
		"\3.\3.\3.\3.\3.\3.\5.\u0748\n.\3/\3/\3/\3/\5/\u074e\n/\3/\3/\3/\3/\5/"+
		"\u0754\n/\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u075c\n\60\3\61\5\61\u075f"+
		"\n\61\3\61\5\61\u0762\n\61\3\61\3\61\5\61\u0766\n\61\3\62\3\62\3\62\3"+
		"\63\5\63\u076c\n\63\3\63\3\63\3\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\5\64\u077d\n\64\3\64\3\64\3\64\3\64\3\64\5\64"+
		"\u0784\n\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u078c\n\64\3\64\3\64\3"+
		"\64\3\64\3\64\3\64\5\64\u0794\n\64\3\64\3\64\3\64\7\64\u0799\n\64\f\64"+
		"\16\64\u079c\13\64\5\64\u079e\n\64\3\65\3\65\3\65\3\65\3\65\3\66\3\66"+
		"\3\66\7\66\u07a8\n\66\f\66\16\66\u07ab\13\66\3\67\3\67\3\67\3\67\3\67"+
		"\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u07b8\n\67\38\38\58\u07bc\n8\39\3"+
		"9\39\39\39\39\39\3:\3:\3:\7:\u07c8\n:\f:\16:\u07cb\13:\3;\3;\3;\5;\u07d0"+
		"\n;\3;\5;\u07d3\n;\3;\3;\3;\3;\3;\5;\u07da\n;\3;\5;\u07dd\n;\3;\3;\3;"+
		"\5;\u07e2\n;\3;\5;\u07e5\n;\5;\u07e7\n;\3<\3<\5<\u07eb\n<\3=\3=\5=\u07ef"+
		"\n=\3>\5>\u07f2\n>\3?\5?\u07f5\n?\3@\5@\u07f8\n@\3A\5A\u07fb\nA\3B\3B"+
		"\3B\3B\3B\3B\3B\3B\5B\u0805\nB\3C\3C\3C\3C\3C\3C\3C\3C\5C\u080f\nC\3D"+
		"\3D\3D\3D\3D\5D\u0816\nD\3E\3E\3E\3E\3F\3F\3F\3F\3G\3G\3G\3G\3G\3H\3H"+
		"\3H\5H\u0828\nH\3H\3H\3H\3H\5H\u082e\nH\3I\3I\3I\7I\u0833\nI\fI\16I\u0836"+
		"\13I\3J\3J\5J\u083a\nJ\3K\3K\3K\7K\u083f\nK\fK\16K\u0842\13K\3L\3L\3L"+
		"\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u0853\nL\3L\3L\5L\u0857\nL\3L"+
		"\3L\3L\3L\3L\5L\u085e\nL\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L"+
		"\u086e\nL\3L\5L\u0871\nL\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L"+
		"\3L\3L\3L\3L\3L\3L\3L\7L\u0889\nL\fL\16L\u088c\13L\3L\3L\3L\3L\3L\3L\3"+
		"L\7L\u0895\nL\fL\16L\u0898\13L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L"+
		"\3L\3L\3L\5L\u08aa\nL\3L\3L\3L\3L\3L\3L\3L\3L\5L\u08b4\nL\5L\u08b6\nL"+
		"\3M\3M\5M\u08ba\nM\3M\5M\u08bd\nM\3M\3M\3N\3N\5N\u08c3\nN\3N\5N\u08c6"+
		"\nN\3N\3N\5N\u08ca\nN\3O\3O\3O\5O\u08cf\nO\3O\3O\3O\5O\u08d4\nO\3O\3O"+
		"\5O\u08d8\nO\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O"+
		"\3O\5O\u08ee\nO\3O\3O\3O\3O\3O\3O\5O\u08f6\nO\3O\3O\3O\7O\u08fb\nO\fO"+
		"\16O\u08fe\13O\3O\3O\3O\3O\5O\u0904\nO\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3"+
		"O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\5O\u091c\nO\3P\3P\5P\u0920\nP\3P\3"+
		"P\3Q\3Q\3Q\3Q\3Q\5Q\u0929\nQ\3Q\5Q\u092c\nQ\3Q\3Q\5Q\u0930\nQ\3Q\5Q\u0933"+
		"\nQ\5Q\u0935\nQ\3R\3R\3R\7R\u093a\nR\fR\16R\u093d\13R\3S\3S\3S\3S\3T\3"+
		"T\3T\3T\5T\u0947\nT\3T\5T\u094a\nT\3U\3U\5U\u094e\nU\3U\3U\5U\u0952\n"+
		"U\3U\3U\3U\3U\3U\3V\3V\3V\3V\3W\3W\3X\3X\5X\u0961\nX\3X\3X\3X\3X\3Y\3"+
		"Y\3Y\3Y\3Y\3Y\3Z\3Z\3Z\3Z\3[\3[\3[\7[\u0974\n[\f[\16[\u0977\13[\3\\\3"+
		"\\\3\\\3\\\3\\\3]\5]\u097f\n]\3]\5]\u0982\n]\3]\3]\3]\3]\3]\3]\3]\3]\3"+
		"]\3]\5]\u098e\n]\3^\6^\u0991\n^\r^\16^\u0992\3_\3_\5_\u0997\n_\3_\3_\3"+
		"_\3_\5_\u099d\n_\3_\3_\3_\3_\5_\u09a3\n_\3_\3_\5_\u09a7\n_\3`\3`\3`\7"+
		"`\u09ac\n`\f`\16`\u09af\13`\3a\3a\5a\u09b3\na\3a\5a\u09b6\na\3a\3a\3a"+
		"\5a\u09bb\na\3a\3a\3a\3a\3a\5a\u09c2\na\3a\3a\3a\3a\3a\3a\3a\5a\u09cb"+
		"\na\3a\3a\3a\3a\3a\3a\3a\5a\u09d4\na\3a\3a\3a\3a\3a\3a\3a\5a\u09dd\na"+
		"\3a\3a\3a\3a\3a\3a\5a\u09e5\na\3a\3a\3a\3a\3a\3a\5a\u09ed\na\3a\3a\3a"+
		"\3a\3a\3a\5a\u09f5\na\3a\3a\3a\3a\3a\3a\3a\5a\u09fe\na\3a\3a\3a\3a\3a"+
		"\3a\3a\5a\u0a07\na\3a\3a\5a\u0a0b\na\3a\3a\3a\3a\3a\5a\u0a12\na\3a\3a"+
		"\3a\3a\3a\3a\5a\u0a1a\na\3a\3a\3a\3a\3a\3a\3a\5a\u0a23\na\3a\3a\3a\5a"+
		"\u0a28\na\3a\3a\5a\u0a2c\na\3a\3a\5a\u0a30\na\3a\3a\5a\u0a34\na\3a\3a"+
		"\5a\u0a38\na\3a\3a\3a\5a\u0a3d\na\3a\5a\u0a40\na\3a\3a\5a\u0a44\na\3a"+
		"\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\5a\u0a58\na\3a\3a"+
		"\3a\3a\5a\u0a5e\na\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a"+
		"\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a"+
		"\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a"+
		"\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a"+
		"\3a\3a\3a\3a\3a\3a\3a\5a\u0abd\na\3b\7b\u0ac0\nb\fb\16b\u0ac3\13b\3c\3"+
		"c\3c\3c\3c\3c\3c\3c\3c\3c\3c\5c\u0ad0\nc\3d\3d\3d\3d\3d\3e\3e\3e\7e\u0ada"+
		"\ne\fe\16e\u0add\13e\3f\3f\3f\3f\3f\3f\3f\5f\u0ae6\nf\3g\3g\3h\3h\3i\3"+
		"i\3i\3j\3j\3j\3k\6k\u0af3\nk\rk\16k\u0af4\3l\3l\3l\5l\u0afa\nl\3l\3l\3"+
		"l\3l\3l\3l\5l\u0b02\nl\3m\3m\3m\3m\3m\5m\u0b09\nm\3n\3n\3n\3n\3o\3o\3"+
		"o\3o\3o\3o\3o\3o\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0b20\np\3q\3q\3q\3q\3"+
		"q\3q\3q\3q\3r\3r\3r\5r\u0b2d\nr\3s\3s\3s\7s\u0b32\ns\fs\16s\u0b35\13s"+
		"\3t\3t\3t\3t\5t\u0b3b\nt\3t\5t\u0b3e\nt\3t\3t\3t\3t\5t\u0b44\nt\3t\5t"+
		"\u0b47\nt\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\5t\u0b55\nt\3u\3u\3u\3u"+
		"\3u\3u\5u\u0b5d\nu\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\5v"+
		"\u0b6f\nv\3w\3w\3w\7w\u0b74\nw\fw\16w\u0b77\13w\3x\3x\3x\3x\5x\u0b7d\n"+
		"x\3y\3y\3y\3y\3y\5y\u0b84\ny\3z\3z\3z\3{\3{\3{\3{\3{\3|\3|\3|\3}\3}\3"+
		"}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\5}\u0ba5\n}\3~\3"+
		"~\3~\7~\u0baa\n~\f~\16~\u0bad\13~\3\177\3\177\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u0bba\n\u0080"+
		"\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082\3\u0082"+
		"\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0bcc"+
		"\n\u0082\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u0bdc\n\u0084"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0be2\n\u0085\3\u0085\3\u0085"+
		"\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0bed"+
		"\n\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086"+
		"\u0bf6\n\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086"+
		"\3\u0086\3\u0086\3\u0086\5\u0086\u0c02\n\u0086\5\u0086\u0c04\n\u0086\3"+
		"\u0087\3\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088\7\u0088\u0c0d\n"+
		"\u0088\f\u0088\16\u0088\u0c10\13\u0088\3\u0089\5\u0089\u0c13\n\u0089\3"+
		"\u0089\3\u0089\3\u008a\3\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\5\u008b\u0c28\n\u008b\3\u008c\3\u008c\3\u008c\7\u008c\u0c2d\n"+
		"\u008c\f\u008c\16\u008c\u0c30\13\u008c\3\u008d\3\u008d\5\u008d\u0c34\n"+
		"\u008d\3\u008d\3\u008d\5\u008d\u0c38\n\u008d\3\u008d\3\u008d\5\u008d\u0c3c"+
		"\n\u008d\3\u008d\3\u008d\5\u008d\u0c40\n\u008d\5\u008d\u0c42\n\u008d\3"+
		"\u008e\6\u008e\u0c45\n\u008e\r\u008e\16\u008e\u0c46\3\u008f\3\u008f\3"+
		"\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u0c4f\n\u008f\3\u0090\3\u0090\3"+
		"\u0091\3\u0091\3\u0091\3\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092"+
		"\u0c64\n\u0092\3\u0092\3\u0092\5\u0092\u0c68\n\u0092\3\u0092\3\u0092\3"+
		"\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\5\u0092\u0c88\n\u0092\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\3\u0095\5\u0095\u0c9b\n\u0095\3\u0096\3\u0096\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098"+
		"\u0cc3\n\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d18\n\u0098\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0d22\n\u0099"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0d2a\n\u009a"+
		"\3\u009b\3\u009b\3\u009b\3\u009c\7\u009c\u0d30\n\u009c\f\u009c\16\u009c"+
		"\u0d33\13\u009c\3\u009d\3\u009d\3\u009d\5\u009d\u0d38\n\u009d\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009f\5\u009f\u0d42"+
		"\n\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\5\u009f\u0d4c\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1\3\u00a2"+
		"\6\u00a2\u0d54\n\u00a2\r\u00a2\16\u00a2\u0d55\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0d60\n\u00a3\3\u00a4"+
		"\3\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0d72\n\u00a6"+
		"\3\u00a7\3\u00a7\5\u00a7\u0d76\n\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0d83"+
		"\n\u00a7\5\u00a7\u0d85\n\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0d90\n\u00a8\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00aa\5\u00aa\u0d98\n\u00aa\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa"+
		"\u0da4\n\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0da9\n\u00aa\3\u00aa\3"+
		"\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0db0\n\u00aa\3\u00aa\3\u00aa\3"+
		"\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0db8\n\u00aa\3\u00aa\3\u00aa\3"+
		"\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0dcb\n\u00aa"+
		"\5\u00aa\u0dcd\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\5\u00ab\u0dd7\n\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ac"+
		"\7\u00ac\u0ddd\n\u00ac\f\u00ac\16\u00ac\u0de0\13\u00ac\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0de7\n\u00ad\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00af\3\u00af\5\u00af\u0def\n\u00af\3\u00af\3\u00af\3\u00af"+
		"\5\u00af\u0df4\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\5\u00af\u0dfe\n\u00af\3\u00b0\3\u00b0\5\u00b0\u0e02\n"+
		"\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0e07\n\u00b0\3\u00b0\3\u00b0\5"+
		"\u00b0\u0e0b\n\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0e11\n\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u0e19\n\u00b1"+
		"\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0e1e\n\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b3\3\u00b3\5\u00b3\u0e27\n\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0e2e\n\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0e36\n\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\5\u00b3\u0e3b\n\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b5"+
		"\3\u00b5\5\u00b5\u0e44\n\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\5\u00b5"+
		"\u0e4a\n\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b5\3\u00b5\5\u00b5\u0e56\n\u00b5\3\u00b6\6\u00b6\u0e59\n"+
		"\u00b6\r\u00b6\16\u00b6\u0e5a\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b8\3\u00b8\5\u00b8\u0e64\n\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\5\u00b8\u0e6a\n\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0e76\n\u00b8\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u0e86\n\u00b9\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u0e98\n\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\5\u00bd\u0ea5\n\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be"+
		"\u0eb5\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00c0\3\u00c0\3\u00c0\5\u00c0"+
		"\u0ebd\n\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u0ed3\n\u00c0\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u0ee6\n\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u0eed\n\u00c1\3\u00c1"+
		"\5\u00c1\u0ef0\n\u00c1\3\u00c2\3\u00c2\3\u00c2\7\u00c2\u0ef5\n\u00c2\f"+
		"\u00c2\16\u00c2\u0ef8\13\u00c2\3\u00c3\3\u00c3\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u0f02\n\u00c4\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\5\u00c5\u0f10\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0f27\n\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u0f2f\n\u00c7"+
		"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7"+
		"\u0f39\n\u00c7\3\u00c7\3\u00c7\5\u00c7\u0f3d\n\u00c7\3\u00c8\3\u00c8\3"+
		"\u00c8\7\u00c8\u0f42\n\u00c8\f\u00c8\16\u00c8\u0f45\13\u00c8\3\u00c9\3"+
		"\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u0f56\n\u00c9\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\5\u00ca\u0f64\n\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb"+
		"\u0f72\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\5\u00cc\u0f7d\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\5\u00cc\u0f83\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0f8e\n\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\5\u00ce\u0f93\n\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce"+
		"\u0fa3\n\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0fb0\n\u00ce\3\u00cf\3\u00cf"+
		"\3\u00cf\5\u00cf\u0fb5\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0"+
		"\u0fbb\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0fc2\n"+
		"\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0fc8\n\u00d0\3\u00d0\3"+
		"\u00d0\3\u00d0\3\u00d0\5\u00d0\u0fce\n\u00d0\3\u00d0\3\u00d0\3\u00d0\5"+
		"\u00d0\u0fd3\n\u00d0\3\u00d0\5\u00d0\u0fd6\n\u00d0\5\u00d0\u0fd8\n\u00d0"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d2\3\u00d2\5\u00d2\u0fe5\n\u00d2\3\u00d3\3\u00d3\3\u00d3\5\u00d3"+
		"\u0fea\n\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d4\3\u00d4\5\u00d4\u0ff5\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0ffe\n\u00d4\3\u00d5\3\u00d5\3\u00d5"+
		"\5\u00d5\u1003\n\u00d5\3\u00d6\3\u00d6\5\u00d6\u1007\n\u00d6\3\u00d6\3"+
		"\u00d6\5\u00d6\u100b\n\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u1011"+
		"\n\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\5\u00d9\u1089\n\u00d9\3\u00da\3\u00da\3\u00db\3\u00db"+
		"\3\u00db\3\u00db\3\u00db\5\u00db\u1092\n\u00db\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u109d\n\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u10a3\n\u00dc\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u10bc\n\u00dd\3\u00de\3\u00de\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00e0"+
		"\3\u00e0\3\u00e0\5\u00e0\u10cc\n\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\3\u00e0\3\u00e0\5\u00e0\u10d4\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e2\3\u00e2\3\u00e2\7\u00e2\u10dd\n\u00e2\f\u00e2\16\u00e2\u10e0"+
		"\13\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u10f1"+
		"\n\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u10f6\n\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\5\u00e4\u10fb\n\u00e4\5\u00e4\u10fd\n\u00e4\3\u00e5\3\u00e5\3"+
		"\u00e5\3\u00e5\5\u00e5\u1103\n\u00e5\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u1108"+
		"\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6"+
		"\u1111\n\u00e6\3\u00e7\3\u00e7\5\u00e7\u1115\n\u00e7\3\u00e7\3\u00e7\3"+
		"\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\5\u00e8\u1124\n\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u1131"+
		"\n\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00ea\3\u00ea"+
		"\3\u00ea\7\u00ea\u113c\n\u00ea\f\u00ea\16\u00ea\u113f\13\u00ea\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00ec\3\u00ec\3\u00ec\7\u00ec"+
		"\u114a\n\u00ec\f\u00ec\16\u00ec\u114d\13\u00ec\3\u00ed\3\u00ed\3\u00ed"+
		"\5\u00ed\u1152\n\u00ed\3\u00ed\3\u00ed\5\u00ed\u1156\n\u00ed\3\u00ed\3"+
		"\u00ed\3\u00ee\7\u00ee\u115b\n\u00ee\f\u00ee\16\u00ee\u115e\13\u00ee\3"+
		"\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\3\u00ef\5\u00ef\u1167\n"+
		"\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u116f\n"+
		"\u00f0\3\u00f0\5\u00f0\u1172\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1\3"+
		"\u00f1\3\u00f2\5\u00f2\u117a\n\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u117f"+
		"\n\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u1187"+
		"\n\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u118c\n\u00f2\3\u00f2\5\u00f2"+
		"\u118f\n\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\3\u00f2\5\u00f2\u1199\n\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2"+
		"\u119f\n\u00f2\5\u00f2\u11a1\n\u00f2\3\u00f3\3\u00f3\3\u00f3\7\u00f3\u11a6"+
		"\n\u00f3\f\u00f3\16\u00f3\u11a9\13\u00f3\3\u00f4\3\u00f4\3\u00f4\5\u00f4"+
		"\u11ae\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\7\u00f6\u11b8\n\u00f6\f\u00f6\16\u00f6\u11bb\13\u00f6\3\u00f7"+
		"\3\u00f7\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u11c2\n\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u11d3\n\u00f8\3\u00f9\3\u00f9"+
		"\3\u00f9\7\u00f9\u11d8\n\u00f9\f\u00f9\16\u00f9\u11db\13\u00f9\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fb\6\u00fb\u11e1\n\u00fb\r\u00fb\16\u00fb\u11e2"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc"+
		"\u11ed\n\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u11fc\n\u00fe"+
		"\5\u00fe\u11fe\n\u00fe\3\u00ff\3\u00ff\3\u0100\3\u0100\5\u0100\u1204\n"+
		"\u0100\3\u0100\3\u0100\3\u0101\3\u0101\3\u0101\7\u0101\u120b\n\u0101\f"+
		"\u0101\16\u0101\u120e\13\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u1219\n\u0102\3\u0103\3\u0103"+
		"\3\u0103\5\u0103\u121e\n\u0103\3\u0103\5\u0103\u1221\n\u0103\3\u0103\5"+
		"\u0103\u1224\n\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5"+
		"\u0103\u122c\n\u0103\3\u0103\5\u0103\u122f\n\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\5\u0103\u1235\n\u0103\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\3\u0104\3\u0104\5\u0104\u1248\n\u0104\3\u0105\3\u0105\3\u0105"+
		"\3\u0105\5\u0105\u124e\n\u0105\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\3\u0106\3\u0106\5\u0106\u1257\n\u0106\3\u0106\3\u0106\5\u0106\u125b\n"+
		"\u0106\3\u0106\3\u0106\5\u0106\u125f\n\u0106\3\u0106\3\u0106\3\u0106\3"+
		"\u0106\3\u0106\5\u0106\u1266\n\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3"+
		"\u0106\3\u0106\5\u0106\u126e\n\u0106\3\u0107\3\u0107\3\u0107\5\u0107\u1273"+
		"\n\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\5\u0108\u127e\n\u0108\3\u0108\3\u0108\5\u0108\u1282\n\u0108\3"+
		"\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u128a\n\u0109\3"+
		"\u010a\3\u010a\3\u010a\5\u010a\u128f\n\u010a\3\u010a\3\u010a\3\u010a\3"+
		"\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u129a\n\u010a\3"+
		"\u010a\3\u010a\5\u010a\u129e\n\u010a\3\u010a\3\u010a\3\u010b\3\u010b\3"+
		"\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u12a8\n\u010b\3\u010c\3\u010c\3"+
		"\u010c\3\u010c\3\u010c\5\u010c\u12af\n\u010c\3\u010d\5\u010d\u12b2\n\u010d"+
		"\3\u010d\3\u010d\5\u010d\u12b6\n\u010d\7\u010d\u12b8\n\u010d\f\u010d\16"+
		"\u010d\u12bb\13\u010d\3\u010e\3\u010e\3\u010e\3\u010e\5\u010e\u12c1\n"+
		"\u010e\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\5\u010f\u12cb\n\u010f\3\u010f\5\u010f\u12ce\n\u010f\3\u010f\5\u010f\u12d1"+
		"\n\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u12d8\n\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u12e1"+
		"\n\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u12ef\n\u010f\3\u0110\3\u0110"+
		"\3\u0110\7\u0110\u12f4\n\u0110\f\u0110\16\u0110\u12f7\13\u0110\3\u0111"+
		"\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111\u1300\n\u0111"+
		"\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112\u1306\n\u0112\3\u0113\3\u0113"+
		"\3\u0113\7\u0113\u130b\n\u0113\f\u0113\16\u0113\u130e\13\u0113\3\u0114"+
		"\3\u0114\3\u0114\5\u0114\u1313\n\u0114\3\u0115\3\u0115\3\u0115\3\u0115"+
		"\3\u0115\3\u0116\3\u0116\5\u0116\u131c\n\u0116\3\u0116\3\u0116\3\u0117"+
		"\3\u0117\3\u0117\3\u0118\6\u0118\u1324\n\u0118\r\u0118\16\u0118\u1325"+
		"\3\u0119\3\u0119\3\u0119\5\u0119\u132b\n\u0119\3\u0119\3\u0119\3\u011a"+
		"\3\u011a\3\u011b\3\u011b\3\u011c\3\u011c\3\u011d\3\u011d\5\u011d\u1337"+
		"\n\u011d\3\u011d\3\u011d\5\u011d\u133b\n\u011d\3\u011d\3\u011d\5\u011d"+
		"\u133f\n\u011d\3\u011e\5\u011e\u1342\n\u011e\3\u011e\3\u011e\5\u011e\u1346"+
		"\n\u011e\3\u011f\3\u011f\3\u011f\5\u011f\u134b\n\u011f\3\u011f\3\u011f"+
		"\3\u011f\5\u011f\u1350\n\u011f\3\u011f\5\u011f\u1353\n\u011f\3\u011f\3"+
		"\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u0120\3\u0120\3\u0120\5\u0120"+
		"\u135e\n\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121"+
		"\5\u0121\u1370\n\u0121\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122"+
		"\u1377\n\u0122\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u137d\n\u0122\3"+
		"\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0124\3\u0124"+
		"\3\u0124\5\u0124\u1389\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\3\u0124\3\u0124\3\u0124\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0126\5\u0126\u139a\n\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u139f\n"+
		"\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u13a6\n\u0126\3"+
		"\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u13ac\n\u0126\3\u0127\3\u0127\3"+
		"\u0127\7\u0127\u13b1\n\u0127\f\u0127\16\u0127\u13b4\13\u0127\3\u0128\3"+
		"\u0128\3\u0128\3\u0128\5\u0128\u13ba\n\u0128\3\u0128\3\u0128\3\u0128\3"+
		"\u0128\3\u0128\3\u0128\3\u0129\3\u0129\3\u0129\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\5\u012a\u13c9\n\u012a\3\u012a\3\u012a\5\u012a\u13cd\n\u012a\3"+
		"\u012b\3\u012b\3\u012b\5\u012b\u13d2\n\u012b\3\u012b\3\u012b\5\u012b\u13d6"+
		"\n\u012b\3\u012c\3\u012c\3\u012c\7\u012c\u13db\n\u012c\f\u012c\16\u012c"+
		"\u13de\13\u012c\3\u012d\3\u012d\3\u012d\5\u012d\u13e3\n\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u13eb\n\u012d\3\u012e"+
		"\3\u012e\3\u012e\5\u012e\u13f0\n\u012e\3\u012e\3\u012e\5\u012e\u13f4\n"+
		"\u012e\3\u012f\3\u012f\3\u012f\5\u012f\u13f9\n\u012f\3\u012f\3\u012f\5"+
		"\u012f\u13fd\n\u012f\3\u0130\3\u0130\3\u0130\5\u0130\u1402\n\u0130\3\u0130"+
		"\3\u0130\5\u0130\u1406\n\u0130\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131"+
		"\u140c\n\u0131\3\u0131\3\u0131\5\u0131\u1410\n\u0131\3\u0132\3\u0132\3"+
		"\u0132\5\u0132\u1415\n\u0132\3\u0132\3\u0132\5\u0132\u1419\n\u0132\3\u0133"+
		"\3\u0133\3\u0133\3\u0133\3\u0133\5\u0133\u1420\n\u0133\3\u0133\3\u0133"+
		"\5\u0133\u1424\n\u0133\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u142a\n"+
		"\u0134\3\u0134\3\u0134\3\u0134\7\u0134\u142f\n\u0134\f\u0134\16\u0134"+
		"\u1432\13\u0134\3\u0134\5\u0134\u1435\n\u0134\3\u0135\3\u0135\3\u0135"+
		"\5\u0135\u143a\n\u0135\3\u0135\3\u0135\5\u0135\u143e\n\u0135\3\u0136\3"+
		"\u0136\3\u0136\7\u0136\u1443\n\u0136\f\u0136\16\u0136\u1446\13\u0136\3"+
		"\u0137\3\u0137\5\u0137\u144a\n\u0137\3\u0137\3\u0137\5\u0137\u144e\n\u0137"+
		"\3\u0137\3\u0137\5\u0137\u1452\n\u0137\3\u0138\3\u0138\3\u0138\3\u0138"+
		"\5\u0138\u1458\n\u0138\3\u0138\3\u0138\5\u0138\u145c\n\u0138\3\u0139\3"+
		"\u0139\3\u0139\5\u0139\u1461\n\u0139\3\u0139\3\u0139\5\u0139\u1465\n\u0139"+
		"\3\u013a\3\u013a\3\u013a\7\u013a\u146a\n\u013a\f\u013a\16\u013a\u146d"+
		"\13\u013a\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b\u1473\n\u013b\3\u013b"+
		"\3\u013b\3\u013b\3\u013b\5\u013b\u1479\n\u013b\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\5\u013c\u147f\n\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c"+
		"\u1485\n\u013c\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u148c\n"+
		"\u013d\3\u013e\3\u013e\3\u013e\5\u013e\u1491\n\u013e\3\u013e\3\u013e\3"+
		"\u013e\3\u013e\5\u013e\u1497\n\u013e\3\u013f\3\u013f\3\u013f\5\u013f\u149c"+
		"\n\u013f\3\u013f\3\u013f\5\u013f\u14a0\n\u013f\3\u0140\3\u0140\3\u0140"+
		"\5\u0140\u14a5\n\u0140\3\u0140\3\u0140\5\u0140\u14a9\n\u0140\3\u0141\3"+
		"\u0141\3\u0141\5\u0141\u14ae\n\u0141\3\u0141\3\u0141\5\u0141\u14b2\n\u0141"+
		"\3\u0142\3\u0142\3\u0142\5\u0142\u14b7\n\u0142\3\u0142\3\u0142\3\u0142"+
		"\3\u0142\5\u0142\u14bd\n\u0142\3\u0143\3\u0143\3\u0143\5\u0143\u14c2\n"+
		"\u0143\3\u0143\3\u0143\5\u0143\u14c6\n\u0143\3\u0144\3\u0144\3\u0144\5"+
		"\u0144\u14cb\n\u0144\3\u0144\3\u0144\5\u0144\u14cf\n\u0144\3\u0145\3\u0145"+
		"\3\u0145\5\u0145\u14d4\n\u0145\3\u0145\3\u0145\3\u0146\3\u0146\3\u0146"+
		"\5\u0146\u14db\n\u0146\3\u0146\3\u0146\5\u0146\u14df\n\u0146\3\u0147\3"+
		"\u0147\3\u0147\5\u0147\u14e4\n\u0147\3\u0147\3\u0147\3\u0148\3\u0148\3"+
		"\u0148\3\u0148\3\u0148\5\u0148\u14ed\n\u0148\3\u0148\3\u0148\5\u0148\u14f1"+
		"\n\u0148\3\u0149\3\u0149\3\u0149\5\u0149\u14f6\n\u0149\3\u0149\3\u0149"+
		"\3\u0149\3\u0149\3\u0149\5\u0149\u14fd\n\u0149\3\u014a\3\u014a\3\u014a"+
		"\5\u014a\u1502\n\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u1508\n"+
		"\u014a\3\u014b\3\u014b\3\u014b\5\u014b\u150d\n\u014b\3\u014b\3\u014b\5"+
		"\u014b\u1511\n\u014b\3\u014c\3\u014c\3\u014c\3\u014c\5\u014c\u1517\n\u014c"+
		"\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014d\3\u014d\3\u014d\5\u014d"+
		"\u1521\n\u014d\3\u014d\3\u014d\5\u014d\u1525\n\u014d\3\u014e\3\u014e\3"+
		"\u014e\3\u014e\3\u014e\5\u014e\u152c\n\u014e\3\u014e\3\u014e\3\u014e\3"+
		"\u014e\3\u014e\3\u014e\5\u014e\u1534\n\u014e\3\u014f\3\u014f\3\u014f\3"+
		"\u014f\3\u014f\3\u0150\3\u0150\3\u0150\5\u0150\u153e\n\u0150\3\u0151\3"+
		"\u0151\3\u0151\3\u0152\3\u0152\3\u0152\3\u0153\3\u0153\3\u0153\5\u0153"+
		"\u1549\n\u0153\3\u0153\3\u0153\3\u0153\3\u0154\3\u0154\5\u0154\u1550\n"+
		"\u0154\3\u0154\3\u0154\5\u0154\u1554\n\u0154\3\u0155\3\u0155\3\u0155\3"+
		"\u0155\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u155e\n\u0156\3\u0156\3"+
		"\u0156\5\u0156\u1562\n\u0156\3\u0157\3\u0157\3\u0157\3\u0158\3\u0158\5"+
		"\u0158\u1569\n\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u156f\n\u0158"+
		"\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u1578"+
		"\n\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158"+
		"\u1581\n\u0158\3\u0158\3\u0158\5\u0158\u1585\n\u0158\3\u0159\3\u0159\3"+
		"\u0159\7\u0159\u158a\n\u0159\f\u0159\16\u0159\u158d\13\u0159\3\u015a\3"+
		"\u015a\3\u015b\3\u015b\3\u015c\3\u015c\3\u015d\3\u015d\3\u015d\3\u015d"+
		"\5\u015d\u1599\n\u015d\3\u015d\3\u015d\3\u015d\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\5\u015e\u15a3\n\u015e\3\u015e\3\u015e\3\u015e\3\u015e"+
		"\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u15ad\n\u015e\3\u015f\3\u015f"+
		"\3\u015f\3\u015f\3\u015f\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\5\u0160"+
		"\u15b9\n\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160"+
		"\5\u0160\u15c2\n\u0160\3\u0160\3\u0160\3\u0160\3\u0161\3\u0161\3\u0161"+
		"\3\u0161\3\u0161\3\u0161\3\u0161\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0163\3\u0163\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\5\u0164\u15e8\n\u0164\3\u0165\3\u0165\3\u0165"+
		"\5\u0165\u15ed\n\u0165\3\u0166\3\u0166\5\u0166\u15f1\n\u0166\3\u0167\3"+
		"\u0167\3\u0168\5\u0168\u15f6\n\u0168\3\u0168\3\u0168\5\u0168\u15fa\n\u0168"+
		"\3\u0169\3\u0169\3\u0169\3\u016a\5\u016a\u1600\n\u016a\3\u016a\3\u016a"+
		"\5\u016a\u1604\n\u016a\3\u016a\5\u016a\u1607\n\u016a\3\u016b\3\u016b\3"+
		"\u016b\3\u016c\3\u016c\3\u016c\3\u016d\3\u016d\3\u016e\3\u016e\3\u016f"+
		"\3\u016f\3\u0170\3\u0170\3\u0170\5\u0170\u1618\n\u0170\3\u0170\3\u0170"+
		"\3\u0171\3\u0171\3\u0171\5\u0171\u161f\n\u0171\3\u0171\3\u0171\3\u0172"+
		"\3\u0172\3\u0173\3\u0173\3\u0174\5\u0174\u1628\n\u0174\3\u0174\3\u0174"+
		"\3\u0174\7\u0174\u162d\n\u0174\f\u0174\16\u0174\u1630\13\u0174\3\u0174"+
		"\5\u0174\u1633\n\u0174\3\u0175\3\u0175\3\u0175\3\u0175\7\u0175\u1639\n"+
		"\u0175\f\u0175\16\u0175\u163c\13\u0175\3\u0175\3\u0175\3\u0176\3\u0176"+
		"\5\u0176\u1642\n\u0176\3\u0177\3\u0177\3\u0178\3\u0178\3\u0179\5\u0179"+
		"\u1649\n\u0179\3\u0179\3\u0179\3\u017a\3\u017a\3\u017b\3\u017b\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c"+
		"\3\u017c\3\u017c\3\u017c\3\u017c\5\u017c\u1668\n\u017c\3\u017d\3\u017d"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\5\u017e\u167e\n\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u16b7\n\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u16c1\n\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\7\u017e\u173d\n\u017e\f\u017e"+
		"\16\u017e\u1740\13\u017e\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\5\u017f\u174b\n\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f"+
		"\3\u017f\3\u017f\3\u017f\7\u017f\u1777\n\u017f\f\u017f\16\u017f\u177a"+
		"\13\u017f\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\5\u0180\u1781\n\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\5\u0180\u179b\n\u0180"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\7\u0181\u17a2\n\u0181\f\u0181"+
		"\16\u0181\u17a5\13\u0181\3\u0182\3\u0182\3\u0182\7\u0182\u17aa\n\u0182"+
		"\f\u0182\16\u0182\u17ad\13\u0182\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u17b9\n\u0183\3\u0183"+
		"\3\u0183\5\u0183\u17bd\n\u0183\3\u0183\5\u0183\u17c0\n\u0183\3\u0184\3"+
		"\u0184\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\5\u0185\u17c9\n\u0185\3"+
		"\u0186\3\u0186\5\u0186\u17cd\n\u0186\3\u0186\3\u0186\5\u0186\u17d1\n\u0186"+
		"\3\u0186\3\u0186\3\u0187\6\u0187\u17d6\n\u0187\r\u0187\16\u0187\u17d7"+
		"\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0189\3\u0189\3\u0189\3\u018a"+
		"\3\u018a\3\u018b\3\u018b\3\u018b\3\u018b\5\u018b\u17e8\n\u018b\3\u018c"+
		"\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u17f0\n\u018c\3\u018d"+
		"\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\5\u018d\u17fe\n\u018d\3\u018e\3\u018e\5\u018e\u1802\n"+
		"\u018e\3\u018f\6\u018f\u1805\n\u018f\r\u018f\16\u018f\u1806\3\u0190\3"+
		"\u0190\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191"+
		"\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\3\u0191\5\u0191\u181a"+
		"\n\u0191\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\3\u0192\5\u0192\u1822"+
		"\n\u0192\3\u0193\3\u0193\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\5\u0194"+
		"\u182b\n\u0194\3\u0195\3\u0195\3\u0195\5\u0195\u1830\n\u0195\3\u0196\3"+
		"\u0196\3\u0196\3\u0196\3\u0196\3\u0196\5\u0196\u1838\n\u0196\3\u0197\3"+
		"\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197\3\u0197"+
		"\3\u0197\3\u0197\5\u0197\u1846\n\u0197\3\u0198\3\u0198\3\u0198\3\u0198"+
		"\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\5\u0198\u1852\n\u0198"+
		"\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199"+
		"\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\5\u0199\u1862\n\u0199\3\u019a"+
		"\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\5\u019a\u186c"+
		"\n\u019a\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019c\3\u019c"+
		"\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d"+
		"\3\u019d\5\u019d\u1880\n\u019d\3\u019e\3\u019e\3\u019e\7\u019e\u1885\n"+
		"\u019e\f\u019e\16\u019e\u1888\13\u019e\3\u019f\3\u019f\3\u019f\7\u019f"+
		"\u188d\n\u019f\f\u019f\16\u019f\u1890\13\u019f\3\u01a0\3\u01a0\3\u01a1"+
		"\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\5\u01a1"+
		"\u189d\n\u01a1\3\u01a2\3\u01a2\3\u01a2\7\u01a2\u18a2\n\u01a2\f\u01a2\16"+
		"\u01a2\u18a5\13\u01a2\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3"+
		"\3\u01a3\3\u01a3\5\u01a3\u18af\n\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3"+
		"\3\u01a3\3\u01a3\3\u01a3\5\u01a3\u18b8\n\u01a3\3\u01a3\3\u01a3\3\u01a3"+
		"\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\5\u01a3\u18c3\n\u01a3"+
		"\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\5\u01a3\u18cc"+
		"\n\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\5\u01a3"+
		"\u18d5\n\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3"+
		"\5\u01a3\u18de\n\u01a3\3\u01a4\3\u01a4\3\u01a4\3\u01a4\5\u01a4\u18e4\n"+
		"\u01a4\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\5\u01a5\u18ef\n\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\5\u01a5\u18f7\n\u01a5\3\u01a6\3\u01a6\3\u01a6\3\u01a6\5\u01a6"+
		"\u18fd\n\u01a6\3\u01a7\3\u01a7\3\u01a8\3\u01a8\3\u01a8\5\u01a8\u1904\n"+
		"\u01a8\3\u01a9\3\u01a9\5\u01a9\u1908\n\u01a9\3\u01a9\3\u01a9\3\u01a9\3"+
		"\u01a9\3\u01a9\3\u01a9\5\u01a9\u1910\n\u01a9\5\u01a9\u1912\n\u01a9\3\u01aa"+
		"\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa"+
		"\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa\3\u01aa"+
		"\3\u01aa\3\u01aa\5\u01aa\u1929\n\u01aa\3\u01ab\3\u01ab\3\u01ab\7\u01ab"+
		"\u192e\n\u01ab\f\u01ab\16\u01ab\u1931\13\u01ab\3\u01ac\3\u01ac\3\u01ac"+
		"\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\5\u01ac"+
		"\u193e\n\u01ac\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\7\u01ad\u1945\n"+
		"\u01ad\f\u01ad\16\u01ad\u1948\13\u01ad\3\u01ae\3\u01ae\3\u01ae\3\u01ae"+
		"\3\u01ae\3\u01ae\3\u01ae\3\u01ae\5\u01ae\u1952\n\u01ae\3\u01af\3\u01af"+
		"\3\u01af\7\u01af\u1957\n\u01af\f\u01af\16\u01af\u195a\13\u01af\3\u01b0"+
		"\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\5\u01b0\u1962\n\u01b0\3\u01b1"+
		"\3\u01b1\5\u01b1\u1966\n\u01b1\3\u01b1\5\u01b1\u1969\n\u01b1\3\u01b1\5"+
		"\u01b1\u196c\n\u01b1\3\u01b1\5\u01b1\u196f\n\u01b1\3\u01b2\3\u01b2\3\u01b2"+
		"\3\u01b2\3\u01b2\3\u01b2\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b3\3\u01b3"+
		"\3\u01b4\3\u01b4\5\u01b4\u197f\n\u01b4\3\u01b5\3\u01b5\3\u01b5\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\5\u01b6\u19af\n\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\5\u01b6\u1a4c\n\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\5\u01b6\u1a58\n\u01b6"+
		"\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7"+
		"\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7"+
		"\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7\3\u01b7"+
		"\5\u01b7\u1a75\n\u01b7\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u1a84"+
		"\n\u01b8\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\7\u01b9\u1a8c"+
		"\n\u01b9\f\u01b9\16\u01b9\u1a8f\13\u01b9\3\u01ba\3\u01ba\3\u01ba\3\u01ba"+
		"\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u1a9c"+
		"\n\u01bb\3\u01bc\3\u01bc\5\u01bc\u1aa0\n\u01bc\3\u01bc\3\u01bc\3\u01bc"+
		"\5\u01bc\u1aa5\n\u01bc\5\u01bc\u1aa7\n\u01bc\3\u01bd\3\u01bd\3\u01bd\3"+
		"\u01bd\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\3\u01be\3\u01be\3\u01be\5\u01be\u1ab8\n\u01be\3\u01be\3\u01be\5\u01be"+
		"\u1abc\n\u01be\3\u01be\3\u01be\5\u01be\u1ac0\n\u01be\3\u01be\3\u01be\3"+
		"\u01be\3\u01be\3\u01be\3\u01be\5\u01be\u1ac8\n\u01be\3\u01bf\3\u01bf\3"+
		"\u01bf\3\u01bf\3\u01bf\5\u01bf\u1acf\n\u01bf\3\u01bf\3\u01bf\5\u01bf\u1ad3"+
		"\n\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\5\u01bf\u1ada\n\u01bf"+
		"\3\u01bf\3\u01bf\5\u01bf\u1ade\n\u01bf\3\u01bf\5\u01bf\u1ae1\n\u01bf\3"+
		"\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1ae9\n\u01c0\3"+
		"\u01c1\3\u01c1\5\u01c1\u1aed\n\u01c1\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3"+
		"\u01c2\3\u01c3\3\u01c3\3\u01c4\3\u01c4\5\u01c4\u1af8\n\u01c4\3\u01c4\3"+
		"\u01c4\5\u01c4\u1afc\n\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1b02"+
		"\n\u01c4\3\u01c4\3\u01c4\3\u01c4\5\u01c4\u1b07\n\u01c4\3\u01c4\3\u01c4"+
		"\5\u01c4\u1b0b\n\u01c4\5\u01c4\u1b0d\n\u01c4\3\u01c5\3\u01c5\3\u01c5\3"+
		"\u01c5\5\u01c5\u1b13\n\u01c5\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3"+
		"\u01c6\3\u01c6\7\u01c6\u1b1c\n\u01c6\f\u01c6\16\u01c6\u1b1f\13\u01c6\3"+
		"\u01c7\3\u01c7\3\u01c8\3\u01c8\3\u01c8\3\u01c8\5\u01c8\u1b27\n\u01c8\3"+
		"\u01c9\3\u01c9\5\u01c9\u1b2b\n\u01c9\3\u01ca\3\u01ca\5\u01ca\u1b2f\n\u01ca"+
		"\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01cb\3\u01cb\5\u01cb\u1b37\n\u01cb"+
		"\3\u01cc\3\u01cc\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd"+
		"\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd"+
		"\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd\3\u01cd"+
		"\3\u01cd\3\u01cd\3\u01cd\5\u01cd\u1b57\n\u01cd\3\u01ce\3\u01ce\3\u01ce"+
		"\3\u01ce\3\u01ce\3\u01ce\3\u01ce\3\u01ce\7\u01ce\u1b61\n\u01ce\f\u01ce"+
		"\16\u01ce\u1b64\13\u01ce\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\5\u01cf"+
		"\u1b6b\n\u01cf\3\u01d0\3\u01d0\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\5\u01d1\u1b76\n\u01d1\3\u01d2\3\u01d2\3\u01d2\3\u01d2"+
		"\3\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2\u1b81\n\u01d2\3\u01d3"+
		"\3\u01d3\3\u01d3\3\u01d4\3\u01d4\3\u01d4\3\u01d5\3\u01d5\3\u01d5\3\u01d6"+
		"\3\u01d6\3\u01d6\3\u01d6\3\u01d6\5\u01d6\u1b91\n\u01d6\3\u01d7\3\u01d7"+
		"\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7"+
		"\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\5\u01d7\u1ba3\n\u01d7\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d9\3\u01d9\3\u01d9\7\u01d9\u1bad"+
		"\n\u01d9\f\u01d9\16\u01d9\u1bb0\13\u01d9\3\u01da\3\u01da\3\u01da\3\u01da"+
		"\3\u01da\5\u01da\u1bb7\n\u01da\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db"+
		"\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db"+
		"\3\u01db\5\u01db\u1bc8\n\u01db\3\u01dc\3\u01dc\3\u01dc\3\u01dc\5\u01dc"+
		"\u1bce\n\u01dc\3\u01dd\3\u01dd\3\u01de\3\u01de\3\u01de\3\u01de\3\u01de"+
		"\5\u01de\u1bd7\n\u01de\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df\5\u01df"+
		"\u1bde\n\u01df\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0"+
		"\3\u01e0\3\u01e0\3\u01e0\5\u01e0\u1bea\n\u01e0\3\u01e1\3\u01e1\3\u01e1"+
		"\3\u01e2\3\u01e2\3\u01e2\7\u01e2\u1bf2\n\u01e2\f\u01e2\16\u01e2\u1bf5"+
		"\13\u01e2\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e3\3\u01e4\3\u01e4\3\u01e4"+
		"\7\u01e4\u1bff\n\u01e4\f\u01e4\16\u01e4\u1c02\13\u01e4\3\u01e5\3\u01e5"+
		"\3\u01e5\5\u01e5\u1c07\n\u01e5\3\u01e6\3\u01e6\5\u01e6\u1c0b\n\u01e6\3"+
		"\u01e6\3\u01e6\3\u01e7\3\u01e7\3\u01e7\3\u01e7\5\u01e7\u1c13\n\u01e7\3"+
		"\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8"+
		"\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8\5\u01e8\u1c23\n\u01e8\3\u01e9"+
		"\3\u01e9\3\u01e9\3\u01e9\3\u01e9\3\u01e9\7\u01e9\u1c2b\n\u01e9\f\u01e9"+
		"\16\u01e9\u1c2e\13\u01e9\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea"+
		"\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea"+
		"\3\u01ea\3\u01ea\5\u01ea\u1c41\n\u01ea\3\u01eb\3\u01eb\3\u01eb\3\u01eb"+
		"\3\u01eb\3\u01eb\5\u01eb\u1c49\n\u01eb\3\u01ec\3\u01ec\3\u01ec\3\u01ec"+
		"\3\u01ec\3\u01ed\3\u01ed\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ef\3\u01ef"+
		"\3\u01ef\7\u01ef\u1c59\n\u01ef\f\u01ef\16\u01ef\u1c5c\13\u01ef\3\u01f0"+
		"\3\u01f0\3\u01f0\3\u01f0\5\u01f0\u1c62\n\u01f0\3\u01f0\3\u01f0\5\u01f0"+
		"\u1c66\n\u01f0\3\u01f0\5\u01f0\u1c69\n\u01f0\5\u01f0\u1c6b\n\u01f0\3\u01f1"+
		"\3\u01f1\3\u01f1\3\u01f1\5\u01f1\u1c71\n\u01f1\3\u01f2\3\u01f2\3\u01f2"+
		"\3\u01f2\3\u01f2\3\u01f2\3\u01f2\5\u01f2\u1c7a\n\u01f2\3\u01f3\3\u01f3"+
		"\3\u01f4\3\u01f4\3\u01f4\3\u01f4\5\u01f4\u1c82\n\u01f4\3\u01f5\3\u01f5"+
		"\5\u01f5\u1c86\n\u01f5\3\u01f5\5\u01f5\u1c89\n\u01f5\3\u01f5\5\u01f5\u1c8c"+
		"\n\u01f5\3\u01f5\5\u01f5\u1c8f\n\u01f5\3\u01f5\3\u01f5\3\u01f6\3\u01f6"+
		"\3\u01f7\3\u01f7\3\u01f7\3\u01f7\3\u01f8\3\u01f8\3\u01f8\7\u01f8\u1c9c"+
		"\n\u01f8\f\u01f8\16\u01f8\u1c9f\13\u01f8\3\u01f9\5\u01f9\u1ca2\n\u01f9"+
		"\3\u01f9\3\u01f9\5\u01f9\u1ca6\n\u01f9\3\u01f9\5\u01f9\u1ca9\n\u01f9\3"+
		"\u01f9\5\u01f9\u1cac\n\u01f9\3\u01f9\3\u01f9\3\u01f9\5\u01f9\u1cb1\n\u01f9"+
		"\3\u01f9\5\u01f9\u1cb4\n\u01f9\5\u01f9\u1cb6\n\u01f9\3\u01fa\3\u01fa\3"+
		"\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3\u01fa"+
		"\5\u01fa\u1cc3\n\u01fa\3\u01fb\3\u01fb\3\u01fb\3\u01fc\3\u01fc\5\u01fc"+
		"\u1cca\n\u01fc\3\u01fd\3\u01fd\3\u01fd\3\u01fd\3\u01fe\3\u01fe\3\u01fe"+
		"\7\u01fe\u1cd3\n\u01fe\f\u01fe\16\u01fe\u1cd6\13\u01fe\3\u01ff\3\u01ff"+
		"\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u01ff"+
		"\3\u01ff\3\u01ff\3\u01ff\3\u01ff\5\u01ff\u1ce7\n\u01ff\3\u0200\3\u0200"+
		"\3\u0200\3\u0200\3\u0200\3\u0200\5\u0200\u1cef\n\u0200\3\u0201\3\u0201"+
		"\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201"+
		"\3\u0201\5\u0201\u1cfd\n\u0201\3\u0202\3\u0202\3\u0203\3\u0203\5\u0203"+
		"\u1d03\n\u0203\3\u0203\5\u0203\u1d06\n\u0203\3\u0203\5\u0203\u1d09\n\u0203"+
		"\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\7\u0203\u1d10\n\u0203\f\u0203"+
		"\16\u0203\u1d13\13\u0203\3\u0203\3\u0203\5\u0203\u1d17\n\u0203\3\u0203"+
		"\5\u0203\u1d1a\n\u0203\5\u0203\u1d1c\n\u0203\3\u0204\3\u0204\3\u0204\3"+
		"\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204"+
		"\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204"+
		"\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204"+
		"\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204"+
		"\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204"+
		"\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204"+
		"\3\u0204\5\u0204\u1d58\n\u0204\3\u0205\3\u0205\3\u0205\3\u0205\5\u0205"+
		"\u1d5e\n\u0205\3\u0205\3\u0205\3\u0206\3\u0206\3\u0206\5\u0206\u1d65\n"+
		"\u0206\3\u0206\3\u0206\3\u0207\3\u0207\3\u0207\5\u0207\u1d6c\n\u0207\3"+
		"\u0208\3\u0208\3\u0208\7\u0208\u1d71\n\u0208\f\u0208\16\u0208\u1d74\13"+
		"\u0208\3\u0209\3\u0209\3\u0209\3\u0209\3\u0209\5\u0209\u1d7b\n\u0209\3"+
		"\u020a\3\u020a\3\u020a\3\u020a\3\u020a\5\u020a\u1d82\n\u020a\3\u020b\3"+
		"\u020b\3\u020b\3\u020b\5\u020b\u1d88\n\u020b\3\u020c\3\u020c\3\u020d\3"+
		"\u020d\3\u020e\3\u020e\3\u020e\3\u020e\5\u020e\u1d92\n\u020e\3\u020f\3"+
		"\u020f\3\u020f\3\u020f\3\u020f\3\u020f\7\u020f\u1d9a\n\u020f\f\u020f\16"+
		"\u020f\u1d9d\13\u020f\3\u0210\3\u0210\3\u0210\7\u0210\u1da2\n\u0210\f"+
		"\u0210\16\u0210\u1da5\13\u0210\3\u0211\3\u0211\5\u0211\u1da9\n\u0211\3"+
		"\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212\3\u0212"+
		"\3\u0212\3\u0212\3\u0212\3\u0212\5\u0212\u1db8\n\u0212\3\u0213\3\u0213"+
		"\3\u0213\3\u0213\3\u0213\5\u0213\u1dbf\n\u0213\3\u0214\3\u0214\3\u0214"+
		"\3\u0214\3\u0214\3\u0214\3\u0214\5\u0214\u1dc8\n\u0214\3\u0215\3\u0215"+
		"\3\u0215\5\u0215\u1dcd\n\u0215\3\u0215\3\u0215\3\u0216\3\u0216\3\u0216"+
		"\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216\5\u0216\u1dd9\n\u0216\3\u0217"+
		"\3\u0217\3\u0217\3\u0217\3\u0217\3\u0217\3\u0217\5\u0217\u1de2\n\u0217"+
		"\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\5\u0218\u1dea\n\u0218"+
		"\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\5\u0218\u1df1\n\u0218\3\u0218"+
		"\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\5\u0218\u1df9\n\u0218\3\u0218"+
		"\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\5\u0218\u1e02\n\u0218"+
		"\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218"+
		"\3\u0218\3\u0218\5\u0218\u1e0f\n\u0218\3\u0218\5\u0218\u1e12\n\u0218\3"+
		"\u0218\5\u0218\u1e15\n\u0218\5\u0218\u1e17\n\u0218\3\u0219\3\u0219\3\u0219"+
		"\3\u0219\3\u021a\6\u021a\u1e1e\n\u021a\r\u021a\16\u021a\u1e1f\3\u021b"+
		"\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b\5\u021b"+
		"\u1e2b\n\u021b\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b"+
		"\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b"+
		"\3\u021b\5\u021b\u1e3e\n\u021b\3\u021b\3\u021b\3\u021b\3\u021b\5\u021b"+
		"\u1e44\n\u021b\3\u021b\5\u021b\u1e47\n\u021b\3\u021c\3\u021c\3\u021c\3"+
		"\u021c\3\u021d\3\u021d\3\u021d\5\u021d\u1e50\n\u021d\3\u021e\3\u021e\3"+
		"\u021e\3\u021f\3\u021f\3\u021f\3\u021f\3\u021f\3\u0220\3\u0220\3\u0220"+
		"\3\u0220\3\u0221\3\u0221\3\u0221\7\u0221\u1e61\n\u0221\f\u0221\16\u0221"+
		"\u1e64\13\u0221\3\u0222\3\u0222\3\u0222\3\u0222\3\u0222\5\u0222\u1e6b"+
		"\n\u0222\3\u0223\3\u0223\3\u0223\3\u0223\3\u0223\5\u0223\u1e72\n\u0223"+
		"\3\u0224\3\u0224\3\u0224\3\u0224\3\u0224\3\u0224\3\u0224\3\u0224\5\u0224"+
		"\u1e7c\n\u0224\3\u0225\3\u0225\3\u0225\3\u0225\3\u0226\3\u0226\3\u0226"+
		"\3\u0226\3\u0227\3\u0227\3\u0227\3\u0227\3\u0227\3\u0227\3\u0227\3\u0227"+
		"\5\u0227\u1e8e\n\u0227\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228\3\u0228"+
		"\5\u0228\u1e96\n\u0228\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u022a"+
		"\3\u022a\3\u022a\7\u022a\u1ea0\n\u022a\f\u022a\16\u022a\u1ea3\13\u022a"+
		"\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\5\u022b\u1eab\n\u022b"+
		"\3\u022c\3\u022c\3\u022c\3\u022c\3\u022c\3\u022c\3\u022c\3\u022c\3\u022c"+
		"\3\u022c\3\u022c\3\u022c\3\u022c\3\u022c\3\u022c\3\u022c\3\u022c\3\u022c"+
		"\3\u022c\3\u022c\3\u022c\3\u022c\5\u022c\u1ec3\n\u022c\3\u022d\3\u022d"+
		"\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d\3\u022d"+
		"\3\u022d\3\u022d\3\u022d\3\u022d\5\u022d\u1ed4\n\u022d\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\5\u022e\u1edc\n\u022e\3\u022f\3\u022f"+
		"\3\u022f\7\u022f\u1ee1\n\u022f\f\u022f\16\u022f\u1ee4\13\u022f\3\u0230"+
		"\3\u0230\5\u0230\u1ee8\n\u0230\3\u0231\3\u0231\3\u0232\3\u0232\3\u0232"+
		"\7\u0232\u1eef\n\u0232\f\u0232\16\u0232\u1ef2\13\u0232\3\u0233\3\u0233"+
		"\3\u0233\5\u0233\u1ef7\n\u0233\3\u0234\3\u0234\3\u0234\3\u0234\3\u0234"+
		"\3\u0234\3\u0234\3\u0234\5\u0234\u1f01\n\u0234\3\u0235\3\u0235\5\u0235"+
		"\u1f05\n\u0235\3\u0235\7\u0235\u1f08\n\u0235\f\u0235\16\u0235\u1f0b\13"+
		"\u0235\3\u0236\3\u0236\3\u0236\3\u0236\3\u0236\3\u0236\3\u0236\3\u0236"+
		"\3\u0236\3\u0236\5\u0236\u1f17\n\u0236\3\u0237\3\u0237\3\u0237\3\u0237"+
		"\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237"+
		"\3\u0237\5\u0237\u1f27\n\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237"+
		"\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237\3\u0237"+
		"\3\u0237\3\u0237\5\u0237\u1f39\n\u0237\3\u0238\3\u0238\3\u0239\3\u0239"+
		"\3\u0239\3\u0239\5\u0239\u1f41\n\u0239\3\u023a\3\u023a\3\u023a\3\u023b"+
		"\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\5\u023b\u1f4e"+
		"\n\u023b\3\u023c\3\u023c\5\u023c\u1f52\n\u023c\3\u023d\3\u023d\3\u023d"+
		"\7\u023d\u1f57\n\u023d\f\u023d\16\u023d\u1f5a\13\u023d\3\u023e\3\u023e"+
		"\3\u023e\3\u023e\3\u023e\3\u023e\3\u023e\3\u023e\3\u023e\3\u023e\3\u023e"+
		"\5\u023e\u1f67\n\u023e\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f"+
		"\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f"+
		"\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f"+
		"\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f\3\u023f"+
		"\3\u023f\3\u023f\5\u023f\u1f8c\n\u023f\3\u0240\3\u0240\3\u0240\5\u0240"+
		"\u1f91\n\u0240\3\u0241\3\u0241\3\u0242\3\u0242\3\u0243\3\u0243\3\u0243"+
		"\7\u0243\u1f9a\n\u0243\f\u0243\16\u0243\u1f9d\13\u0243\3\u0244\3\u0244"+
		"\3\u0244\3\u0244\3\u0245\3\u0245\3\u0245\3\u0246\5\u0246\u1fa7\n\u0246"+
		"\3\u0246\3\u0246\3\u0246\3\u0246\3\u0246\5\u0246\u1fae\n\u0246\3\u0246"+
		"\5\u0246\u1fb1\n\u0246\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\5\u0247"+
		"\u1fb8\n\u0247\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248"+
		"\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248"+
		"\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\5\u0248\u1fcf\n\u0248\3\u0249"+
		"\3\u0249\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\7\u024a\u1fd9"+
		"\n\u024a\f\u024a\16\u024a\u1fdc\13\u024a\3\u024b\3\u024b\3\u024b\3\u024c"+
		"\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\5\u024c\u1fe9"+
		"\n\u024c\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\5\u024c\u1ff1"+
		"\n\u024c\3\u024d\3\u024d\3\u024d\3\u024d\5\u024d\u1ff7\n\u024d\3\u024d"+
		"\3\u024d\3\u024d\3\u024d\5\u024d\u1ffd\n\u024d\3\u024e\5\u024e\u2000\n"+
		"\u024e\3\u024e\3\u024e\3\u024e\3\u024e\3\u024e\5\u024e\u2007\n\u024e\3"+
		"\u024e\5\u024e\u200a\n\u024e\3\u024e\5\u024e\u200d\n\u024e\3\u024f\3\u024f"+
		"\3\u024f\3\u024f\3\u024f\3\u024f\7\u024f\u2015\n\u024f\f\u024f\16\u024f"+
		"\u2018\13\u024f\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250"+
		"\3\u0250\3\u0250\3\u0250\5\u0250\u2024\n\u0250\3\u0251\3\u0251\3\u0251"+
		"\3\u0252\3\u0252\3\u0252\3\u0252\3\u0252\3\u0252\7\u0252\u202f\n\u0252"+
		"\f\u0252\16\u0252\u2032\13\u0252\3\u0253\3\u0253\3\u0253\3\u0254\5\u0254"+
		"\u2038\n\u0254\3\u0254\3\u0254\3\u0254\3\u0254\5\u0254\u203e\n\u0254\3"+
		"\u0254\5\u0254\u2041\n\u0254\3\u0254\5\u0254\u2044\n\u0254\3\u0255\3\u0255"+
		"\3\u0255\3\u0255\3\u0255\3\u0255\3\u0255\3\u0255\5\u0255\u204e\n\u0255"+
		"\3\u0256\3\u0256\3\u0256\3\u0257\3\u0257\5\u0257\u2055\n\u0257\3\u0258"+
		"\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\5\u0258\u205d\n\u0258\3\u0258"+
		"\3\u0258\5\u0258\u2061\n\u0258\3\u0258\3\u0258\5\u0258\u2065\n\u0258\3"+
		"\u0258\3\u0258\5\u0258\u2069\n\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3"+
		"\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\5\u0258\u2075\n\u0258\3"+
		"\u0258\3\u0258\5\u0258\u2079\n\u0258\3\u0258\3\u0258\3\u0258\5\u0258\u207e"+
		"\n\u0258\3\u0258\3\u0258\5\u0258\u2082\n\u0258\5\u0258\u2084\n\u0258\3"+
		"\u0259\3\u0259\3\u0259\5\u0259\u2089\n\u0259\3\u0259\3\u0259\3\u0259\5"+
		"\u0259\u208e\n\u0259\3\u0259\3\u0259\3\u0259\3\u0259\5\u0259\u2094\n\u0259"+
		"\3\u0259\3\u0259\3\u0259\3\u0259\5\u0259\u209a\n\u0259\3\u0259\7\u0259"+
		"\u209d\n\u0259\f\u0259\16\u0259\u20a0\13\u0259\3\u025a\3\u025a\5\u025a"+
		"\u20a4\n\u025a\3\u025a\5\u025a\u20a7\n\u025a\3\u025a\5\u025a\u20aa\n\u025a"+
		"\3\u025a\5\u025a\u20ad\n\u025a\3\u025a\5\u025a\u20b0\n\u025a\3\u025a\5"+
		"\u025a\u20b3\n\u025a\3\u025a\5\u025a\u20b6\n\u025a\3\u025a\5\u025a\u20b9"+
		"\n\u025a\3\u025a\3\u025a\3\u025a\3\u025a\5\u025a\u20bf\n\u025a\3\u025a"+
		"\5\u025a\u20c2\n\u025a\3\u025a\5\u025a\u20c5\n\u025a\3\u025a\5\u025a\u20c8"+
		"\n\u025a\3\u025a\5\u025a\u20cb\n\u025a\3\u025a\5\u025a\u20ce\n\u025a\3"+
		"\u025a\3\u025a\3\u025a\5\u025a\u20d3\n\u025a\3\u025b\3\u025b\3\u025b\3"+
		"\u025b\3\u025b\5\u025b\u20da\n\u025b\3\u025c\3\u025c\3\u025c\3\u025d\3"+
		"\u025d\5\u025d\u20e1\n\u025d\3\u025d\3\u025d\3\u025d\5\u025d\u20e6\n\u025d"+
		"\3\u025d\3\u025d\3\u025d\3\u025d\5\u025d\u20ec\n\u025d\3\u025d\3\u025d"+
		"\3\u025d\3\u025d\5\u025d\u20f2\n\u025d\3\u025d\3\u025d\3\u025d\3\u025d"+
		"\5\u025d\u20f8\n\u025d\3\u025d\3\u025d\3\u025d\3\u025d\5\u025d\u20fe\n"+
		"\u025d\3\u025d\3\u025d\3\u025d\5\u025d\u2103\n\u025d\3\u025d\3\u025d\5"+
		"\u025d\u2107\n\u025d\3\u025d\3\u025d\5\u025d\u210b\n\u025d\3\u025e\3\u025e"+
		"\3\u025e\3\u025e\3\u025e\3\u025e\7\u025e\u2113\n\u025e\f\u025e\16\u025e"+
		"\u2116\13\u025e\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f"+
		"\3\u025f\3\u0260\3\u0260\3\u0260\3\u0260\5\u0260\u2124\n\u0260\3\u0261"+
		"\3\u0261\3\u0261\3\u0261\3\u0261\5\u0261\u212b\n\u0261\3\u0262\3\u0262"+
		"\3\u0262\3\u0262\5\u0262\u2131\n\u0262\3\u0263\3\u0263\3\u0263\3\u0263"+
		"\5\u0263\u2137\n\u0263\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\7\u0264"+
		"\u213e\n\u0264\f\u0264\16\u0264\u2141\13\u0264\3\u0265\3\u0265\5\u0265"+
		"\u2145\n\u0265\3\u0265\5\u0265\u2148\n\u0265\3\u0266\3\u0266\3\u0266\5"+
		"\u0266\u214d\n\u0266\3\u0267\3\u0267\3\u0267\3\u0267\3\u0267\3\u0267\3"+
		"\u0267\3\u0267\3\u0267\3\u0267\3\u0267\5\u0267\u215a\n\u0267\3\u0268\3"+
		"\u0268\3\u0268\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\7\u0269"+
		"\u2165\n\u0269\f\u0269\16\u0269\u2168\13\u0269\3\u026a\3\u026a\3\u026a"+
		"\3\u026a\3\u026a\3\u026a\3\u026a\3\u026a\5\u026a\u2172\n\u026a\3\u026b"+
		"\3\u026b\3\u026b\3\u026b\3\u026b\3\u026b\3\u026b\3\u026b\3\u026b\3\u026b"+
		"\3\u026b\3\u026b\7\u026b\u2180\n\u026b\f\u026b\16\u026b\u2183\13\u026b"+
		"\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c"+
		"\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c"+
		"\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c"+
		"\3\u026c\3\u026c\3\u026c\3\u026c\5\u026c\u21a4\n\u026c\3\u026d\3\u026d"+
		"\3\u026d\3\u026d\3\u026d\3\u026d\5\u026d\u21ac\n\u026d\3\u026e\3\u026e"+
		"\5\u026e\u21b0\n\u026e\3\u026f\3\u026f\3\u0270\3\u0270\3\u0270\3\u0270"+
		"\3\u0270\5\u0270\u21b9\n\u0270\3\u0271\3\u0271\3\u0272\3\u0272\3\u0273"+
		"\3\u0273\3\u0273\3\u0273\3\u0273\3\u0273\7\u0273\u21c5\n\u0273\f\u0273"+
		"\16\u0273\u21c8\13\u0273\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274"+
		"\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274\5\u0274\u21d6\n\u0274"+
		"\3\u0275\3\u0275\3\u0275\3\u0275\3\u0276\3\u0276\3\u0276\7\u0276\u21df"+
		"\n\u0276\f\u0276\16\u0276\u21e2\13\u0276\3\u0277\3\u0277\3\u0277\3\u0277"+
		"\3\u0277\5\u0277\u21e9\n\u0277\3\u0278\3\u0278\3\u0278\3\u0279\3\u0279"+
		"\3\u0279\3\u0279\3\u0279\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a\3\u027b"+
		"\3\u027b\3\u027b\3\u027b\3\u027b\3\u027b\3\u027c\3\u027c\3\u027c\3\u027d"+
		"\3\u027d\3\u027d\3\u027d\3\u027d\3\u027d\7\u027d\u2207\n\u027d\f\u027d"+
		"\16\u027d\u220a\13\u027d\3\u027e\3\u027e\3\u027e\3\u027e\3\u027f\3\u027f"+
		"\3\u0280\3\u0280\3\u0280\3\u0280\3\u0280\3\u0280\3\u0280\3\u0280\3\u0280"+
		"\3\u0280\3\u0280\5\u0280\u221d\n\u0280\3\u0281\3\u0281\3\u0281\3\u0282"+
		"\3\u0282\3\u0282\3\u0282\3\u0282\3\u0282\7\u0282\u2228\n\u0282\f\u0282"+
		"\16\u0282\u222b\13\u0282\3\u0283\3\u0283\3\u0283\5\u0283\u2230\n\u0283"+
		"\3\u0283\3\u0283\5\u0283\u2234\n\u0283\3\u0283\3\u0283\3\u0283\3\u0283"+
		"\5\u0283\u223a\n\u0283\3\u0283\3\u0283\3\u0283\5\u0283\u223f\n\u0283\3"+
		"\u0283\3\u0283\5\u0283\u2243\n\u0283\3\u0283\3\u0283\3\u0283\5\u0283\u2248"+
		"\n\u0283\3\u0283\3\u0283\5\u0283\u224c\n\u0283\3\u0283\3\u0283\3\u0283"+
		"\5\u0283\u2251\n\u0283\3\u0283\3\u0283\3\u0283\3\u0283\3\u0283\5\u0283"+
		"\u2258\n\u0283\5\u0283\u225a\n\u0283\3\u0283\3\u0283\7\u0283\u225e\n\u0283"+
		"\f\u0283\16\u0283\u2261\13\u0283\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284"+
		"\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284"+
		"\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284\5\u0284\u2277\n\u0284"+
		"\3\u0285\3\u0285\5\u0285\u227b\n\u0285\3\u0285\3\u0285\5\u0285\u227f\n"+
		"\u0285\3\u0285\3\u0285\5\u0285\u2283\n\u0285\3\u0285\5\u0285\u2286\n\u0285"+
		"\3\u0286\3\u0286\3\u0287\3\u0287\3\u0287\3\u0287\3\u0287\3\u0287\3\u0287"+
		"\5\u0287\u2291\n\u0287\3\u0288\3\u0288\3\u0288\3\u0289\3\u0289\3\u0289"+
		"\3\u0289\3\u0289\5\u0289\u229b\n\u0289\3\u028a\3\u028a\3\u028a\3\u028b"+
		"\3\u028b\3\u028b\3\u028c\6\u028c\u22a4\n\u028c\r\u028c\16\u028c\u22a5"+
		"\3\u028d\3\u028d\3\u028d\5\u028d\u22ab\n\u028d\3\u028e\3\u028e\5\u028e"+
		"\u22af\n\u028e\3\u028e\3\u028e\3\u028e\3\u028e\3\u028e\5\u028e\u22b6\n"+
		"\u028e\3\u028e\5\u028e\u22b9\n\u028e\3\u028f\3\u028f\3\u028f\3\u028f\3"+
		"\u028f\3\u028f\3\u028f\3\u028f\3\u028f\3\u028f\3\u028f\3\u028f\3\u028f"+
		"\3\u028f\3\u028f\3\u028f\5\u028f\u22cb\n\u028f\3\u0290\3\u0290\3\u0291"+
		"\3\u0291\5\u0291\u22d1\n\u0291\3\u0291\3\u0291\3\u0291\3\u0291\3\u0291"+
		"\5\u0291\u22d8\n\u0291\3\u0291\3\u0291\5\u0291\u22dc\n\u0291\3\u0291\3"+
		"\u0291\5\u0291\u22e0\n\u0291\3\u0291\5\u0291\u22e3\n\u0291\3\u0291\3\u0291"+
		"\5\u0291\u22e7\n\u0291\3\u0291\3\u0291\3\u0291\3\u0291\3\u0291\3\u0291"+
		"\5\u0291\u22ef\n\u0291\3\u0291\3\u0291\5\u0291\u22f3\n\u0291\3\u0291\3"+
		"\u0291\5\u0291\u22f7\n\u0291\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\5"+
		"\u0292\u22fe\n\u0292\3\u0293\3\u0293\3\u0293\7\u0293\u2303\n\u0293\f\u0293"+
		"\16\u0293\u2306\13\u0293\3\u0294\3\u0294\3\u0294\3\u0295\3\u0295\3\u0295"+
		"\3\u0295\3\u0295\3\u0295\3\u0295\5\u0295\u2312\n\u0295\3\u0296\3\u0296"+
		"\3\u0296\7\u0296\u2317\n\u0296\f\u0296\16\u0296\u231a\13\u0296\3\u0297"+
		"\3\u0297\3\u0298\7\u0298\u231f\n\u0298\f\u0298\16\u0298\u2322\13\u0298"+
		"\3\u0299\3\u0299\3\u0299\3\u0299\5\u0299\u2328\n\u0299\3\u0299\3\u0299"+
		"\3\u0299\5\u0299\u232d\n\u0299\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299"+
		"\5\u0299\u2334\n\u0299\3\u0299\3\u0299\3\u0299\5\u0299\u2339\n\u0299\3"+
		"\u0299\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299"+
		"\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299\5\u0299\u234b"+
		"\n\u0299\3\u029a\5\u029a\u234e\n\u029a\3\u029a\3\u029a\3\u029a\3\u029b"+
		"\3\u029b\3\u029b\3\u029c\3\u029c\3\u029c\3\u029c\3\u029c\5\u029c\u235b"+
		"\n\u029c\3\u029c\3\u029c\3\u029c\5\u029c\u2360\n\u029c\3\u029c\3\u029c"+
		"\3\u029c\5\u029c\u2365\n\u029c\3\u029c\3\u029c\3\u029c\5\u029c\u236a\n"+
		"\u029c\3\u029c\3\u029c\3\u029c\3\u029c\5\u029c\u2370\n\u029c\3\u029c\3"+
		"\u029c\3\u029c\3\u029c\3\u029c\5\u029c\u2377\n\u029c\3\u029c\3\u029c\3"+
		"\u029c\3\u029c\5\u029c\u237d\n\u029c\3\u029c\3\u029c\3\u029c\3\u029c\5"+
		"\u029c\u2383\n\u029c\3\u029c\3\u029c\3\u029c\5\u029c\u2388\n\u029c\3\u029c"+
		"\3\u029c\3\u029c\3\u029c\5\u029c\u238e\n\u029c\3\u029c\3\u029c\3\u029c"+
		"\3\u029c\3\u029c\5\u029c\u2395\n\u029c\3\u029c\3\u029c\3\u029c\5\u029c"+
		"\u239a\n\u029c\3\u029c\3\u029c\3\u029c\3\u029c\5\u029c\u23a0\n\u029c\3"+
		"\u029c\3\u029c\3\u029c\3\u029c\3\u029c\5\u029c\u23a7\n\u029c\3\u029c\5"+
		"\u029c\u23aa\n\u029c\3\u029c\2\31\u01ea\u02fa\u02fc\u0300\u0302\u0358"+
		"\u0370\u038a\u039a\u03d0\u041c\u0492\u049c\u04a2\u04b0\u04ba\u04c6\u04d0"+
		"\u04d4\u04e4\u04f8\u0502\u0504\u029d\2\4\6\b\n\f\16\20\22\24\26\30\32"+
		"\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080"+
		"\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098"+
		"\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0"+
		"\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8"+
		"\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0"+
		"\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8"+
		"\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110"+
		"\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128"+
		"\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140"+
		"\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158"+
		"\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170"+
		"\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188"+
		"\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0"+
		"\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8"+
		"\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0"+
		"\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8"+
		"\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200"+
		"\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218"+
		"\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230"+
		"\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248"+
		"\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260"+
		"\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278"+
		"\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290"+
		"\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8"+
		"\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0"+
		"\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8"+
		"\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0"+
		"\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308"+
		"\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320"+
		"\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338"+
		"\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350"+
		"\u0352\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368"+
		"\u036a\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380"+
		"\u0382\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398"+
		"\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0"+
		"\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8"+
		"\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0"+
		"\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8"+
		"\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410"+
		"\u0412\u0414\u0416\u0418\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428"+
		"\u042a\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c\u043e\u0440"+
		"\u0442\u0444\u0446\u0448\u044a\u044c\u044e\u0450\u0452\u0454\u0456\u0458"+
		"\u045a\u045c\u045e\u0460\u0462\u0464\u0466\u0468\u046a\u046c\u046e\u0470"+
		"\u0472\u0474\u0476\u0478\u047a\u047c\u047e\u0480\u0482\u0484\u0486\u0488"+
		"\u048a\u048c\u048e\u0490\u0492\u0494\u0496\u0498\u049a\u049c\u049e\u04a0"+
		"\u04a2\u04a4\u04a6\u04a8\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4\u04b6\u04b8"+
		"\u04ba\u04bc\u04be\u04c0\u04c2\u04c4\u04c6\u04c8\u04ca\u04cc\u04ce\u04d0"+
		"\u04d2\u04d4\u04d6\u04d8\u04da\u04dc\u04de\u04e0\u04e2\u04e4\u04e6\u04e8"+
		"\u04ea\u04ec\u04ee\u04f0\u04f2\u04f4\u04f6\u04f8\u04fa\u04fc\u04fe\u0500"+
		"\u0502\u0504\u0506\u0508\u050a\u050c\u050e\u0510\u0512\u0514\u0516\u0518"+
		"\u051a\u051c\u051e\u0520\u0522\u0524\u0526\u0528\u052a\u052c\u052e\u0530"+
		"\u0532\u0534\u0536\2A\3\2\u013c\u013d\4\2\u00b0\u00b0\u00e4\u00e4\4\2"+
		"\u00e4\u00e4\u0130\u0130\4\2\u00b0\u00b0\u010e\u010e\3\2BC\4\2{{\u00a4"+
		"\u00a4\4\2\u0101\u0101\u0110\u0110\4\2\u0104\u0104\u0111\u0111\t\2\u0081"+
		"\u0081\u00f8\u00f8\u00fb\u00fb\u00ff\u00ff\u010f\u010f\u0113\u0113\u0139"+
		"\u013a\3\2\u00a6\u00a7\4\2\u00e3\u00e3\u012d\u012d\4\2]]\u0144\u0144\4"+
		"\2\u011b\u011b\u013f\u013f\4\2FFLL\6\2\u0106\u0106\u0108\u0108\u011c\u011c"+
		"\u0129\u0129\4\2FFKK\b\2\u01db\u01db\u01f8\u01f8\u0203\u0203\u0209\u0209"+
		"\u0214\u0214\u0225\u0225\4\2\u00ee\u00ee\u00f2\u00f2\4\2\u01bf\u01bf\u01d8"+
		"\u01d8\4\2FFKL\4\2{{\u022f\u022f\4\2EEKK\4\2\u01ad\u01ad\u01b3\u01b3\5"+
		"\2XX\u0132\u0132\u020b\u020b\4\2MMOO\4\2WWYY\n\2\u0081\u0081\u00e6\u00e6"+
		"\u00f8\u00f8\u00fb\u00fb\u00ff\u00ff\u010f\u010f\u0113\u0113\u0139\u013a"+
		"\4\2eevv\4\2\u01af\u01af\u01c8\u01c8\4\2\u00e1\u00e1\u0211\u0211\4\2M"+
		"M\u00e1\u00e1\4\2\u01e5\u01e5\u0200\u0200\6\2\u01c0\u01c0\u01c3\u01c3"+
		"\u01ec\u01ec\u0217\u0217\6\2\u0081\u0081\u013c\u013d\u01f2\u01f2\u0203"+
		"\u0203\5\2HH\u00fe\u00fe\u01a9\u01a9\4\2\u00ba\u00ba\u0103\u0103\4\2W"+
		"W\u01ae\u01ae\4\2YY\u0131\u0131)\2@@DDIIMNPS[[]beenqsxz}\u0080\u0082\u0084"+
		"\u0085\u0087\u008b\u0094\u0094\u0099\u009a\u00a4\u00a4\u00ab\u00ab\u00ad"+
		"\u00ad\u00c0\u00c2\u00c8\u00ca\u00cc\u00cd\u00cf\u00cf\u00d3\u00d3\u00d6"+
		"\u00d6\u00d9\u00d9\u00e5\u00e5\u00ed\u00ed\u00f2\u00f2\u00f7\u00f7\u0100"+
		"\u0100\u0116\u0116\u0124\u0124\u0136\u0136\u0171\u0172\u0194\u0194\u0197"+
		"\u0198\u01a1\u01a3\u01a5\u01a6\3\2\3\4:\2ACEHJLOOTTWZrr\u0086\u0086\u008c"+
		"\u008f\u0091\u0091\u009b\u009b\u009d\u009d\u009f\u00a2\u00a5\u00a8\u00aa"+
		"\u00aa\u00ac\u00ac\u00ae\u00b1\u00b3\u00b4\u00b6\u00b6\u00ba\u00ba\u00be"+
		"\u00bf\u00c4\u00c4\u00c7\u00c7\u00ce\u00ce\u00d0\u00d0\u00d2\u00d2\u00d4"+
		"\u00d4\u00d7\u00d7\u00db\u00db\u00dd\u00de\u00e0\u00e0\u00e2\u00e4\u00e6"+
		"\u00ec\u00ee\u00f1\u00f3\u00f6\u00f8\u00f8\u00fb\u00ff\u0101\u0105\u0107"+
		"\u0108\u010a\u0115\u0117\u011b\u011d\u0123\u0125\u0128\u012a\u0135\u0137"+
		"\u013f\u0141\u0149\u0157\u0157\u0167\u0168\u0170\u0170\u0180\u0183\u0185"+
		"\u0189\u018c\u018f\u0195\u0196\u0199\u019a\u019c\u019f\u01a7\u0227\r\2"+
		"fmyy\u0083\u0083\u00b5\u00b5\u00d5\u00d5\u00dc\u00dc\u00f9\u00f9\u016f"+
		"\u016f\u0173\u0173\u0190\u0193\u0228\u022a\4\2\7\bwx\4\2\33\33\35!\3\2"+
		"\7\62\6\2\17\20\22\25\33\33\35!\3\2\u0087\u0088\5\2\u00ef\u00ef\u012b"+
		"\u012b\u0148\u0148\4\2\u0081\u0082\u00d6\u00d6\3\2\u0180\u0183\4\2\u0195"+
		"\u0195\u019d\u019d\4\2__\u0081\u0081\3\2\u0092\u0093\36\2UV\\\\cd~\177"+
		"\u0090\u0090\u0092\u0093\u0095\u0095\u0097\u0098\u00b7\u00b9\u00bb\u00bd"+
		"\u00c3\u00c3\u00c5\u00c6\u00cb\u00cb\u00d1\u00d1\u00d8\u00d8\u00e1\u00e1"+
		"\u0109\u0109\u014a\u014a\u014e\u014e\u0155\u0155\u0163\u0163\u0175\u017f"+
		"\u0184\u0184\u018a\u018b\u019b\u019b\u01a0\u01a0\u01a4\u01a4\u022c\u022d"+
		"\4\2\u00a4\u00a4\u022f\u022f\4\2\33\33vv\4\2@C\u0081\u0081\3\2@C\4\2\u00f2"+
		"\u00f2\u01a9\u01a9\4\2\u00e1\u00e1\u00ef\u00ef\4\2\u00b3\u00b3\u010b\u010b"+
		"\4\2\u0212\u0213\u022f\u022f\4\2ee\u0080\u0080\2\u27a7\2\u0538\3\2\2\2"+
		"\4\u0574\3\2\2\2\6\u0592\3\2\2\2\b\u0594\3\2\2\2\n\u059c\3\2\2\2\f\u059f"+
		"\3\2\2\2\16\u05a9\3\2\2\2\20\u05ab\3\2\2\2\22\u05b5\3\2\2\2\24\u05bd\3"+
		"\2\2\2\26\u05bf\3\2\2\2\30\u05c2\3\2\2\2\32\u05cf\3\2\2\2\34\u05d1\3\2"+
		"\2\2\36\u05d7\3\2\2\2 \u05d9\3\2\2\2\"\u05f9\3\2\2\2$\u05fe\3\2\2\2&\u0606"+
		"\3\2\2\2(\u0609\3\2\2\2*\u0615\3\2\2\2,\u063e\3\2\2\2.\u0646\3\2\2\2\60"+
		"\u0648\3\2\2\2\62\u064f\3\2\2\2\64\u0660\3\2\2\2\66\u0662\3\2\2\28\u067c"+
		"\3\2\2\2:\u0689\3\2\2\2<\u0692\3\2\2\2>\u0694\3\2\2\2@\u069e\3\2\2\2B"+
		"\u06a0\3\2\2\2D\u06b0\3\2\2\2F\u06b7\3\2\2\2H\u06b9\3\2\2\2J\u06d0\3\2"+
		"\2\2L\u06d2\3\2\2\2N\u06de\3\2\2\2P\u06e3\3\2\2\2R\u071d\3\2\2\2T\u071f"+
		"\3\2\2\2V\u0727\3\2\2\2X\u072a\3\2\2\2Z\u0747\3\2\2\2\\\u0753\3\2\2\2"+
		"^\u075b\3\2\2\2`\u0761\3\2\2\2b\u0767\3\2\2\2d\u076b\3\2\2\2f\u079d\3"+
		"\2\2\2h\u079f\3\2\2\2j\u07a4\3\2\2\2l\u07b7\3\2\2\2n\u07bb\3\2\2\2p\u07bd"+
		"\3\2\2\2r\u07c4\3\2\2\2t\u07e6\3\2\2\2v\u07ea\3\2\2\2x\u07ee\3\2\2\2z"+
		"\u07f1\3\2\2\2|\u07f4\3\2\2\2~\u07f7\3\2\2\2\u0080\u07fa\3\2\2\2\u0082"+
		"\u0804\3\2\2\2\u0084\u080e\3\2\2\2\u0086\u0815\3\2\2\2\u0088\u0817\3\2"+
		"\2\2\u008a\u081b\3\2\2\2\u008c\u081f\3\2\2\2\u008e\u0827\3\2\2\2\u0090"+
		"\u082f\3\2\2\2\u0092\u0837\3\2\2\2\u0094\u083b\3\2\2\2\u0096\u08b5\3\2"+
		"\2\2\u0098\u08b7\3\2\2\2\u009a\u08c0\3\2\2\2\u009c\u091b\3\2\2\2\u009e"+
		"\u091d\3\2\2\2\u00a0\u0934\3\2\2\2\u00a2\u0936\3\2\2\2\u00a4\u093e\3\2"+
		"\2\2\u00a6\u0942\3\2\2\2\u00a8\u094d\3\2\2\2\u00aa\u0958\3\2\2\2\u00ac"+
		"\u095c\3\2\2\2\u00ae\u095e\3\2\2\2\u00b0\u0966\3\2\2\2\u00b2\u096c\3\2"+
		"\2\2\u00b4\u0970\3\2\2\2\u00b6\u0978\3\2\2\2\u00b8\u098d\3\2\2\2\u00ba"+
		"\u0990\3\2\2\2\u00bc\u09a6\3\2\2\2\u00be\u09a8\3\2\2\2\u00c0\u0abc\3\2"+
		"\2\2\u00c2\u0ac1\3\2\2\2\u00c4\u0acf\3\2\2\2\u00c6\u0ad1\3\2\2\2\u00c8"+
		"\u0ad6\3\2\2\2\u00ca\u0ae5\3\2\2\2\u00cc\u0ae7\3\2\2\2\u00ce\u0ae9\3\2"+
		"\2\2\u00d0\u0aeb\3\2\2\2\u00d2\u0aee\3\2\2\2\u00d4\u0af2\3\2\2\2\u00d6"+
		"\u0b01\3\2\2\2\u00d8\u0b08\3\2\2\2\u00da\u0b0a\3\2\2\2\u00dc\u0b0e\3\2"+
		"\2\2\u00de\u0b1f\3\2\2\2\u00e0\u0b21\3\2\2\2\u00e2\u0b2c\3\2\2\2\u00e4"+
		"\u0b2e\3\2\2\2\u00e6\u0b54\3\2\2\2\u00e8\u0b5c\3\2\2\2\u00ea\u0b6e\3\2"+
		"\2\2\u00ec\u0b70\3\2\2\2\u00ee\u0b78\3\2\2\2\u00f0\u0b83\3\2\2\2\u00f2"+
		"\u0b85\3\2\2\2\u00f4\u0b88\3\2\2\2\u00f6\u0b8d\3\2\2\2\u00f8\u0ba4\3\2"+
		"\2\2\u00fa\u0ba6\3\2\2\2\u00fc\u0bae\3\2\2\2\u00fe\u0bb9\3\2\2\2\u0100"+
		"\u0bbb\3\2\2\2\u0102\u0bcb\3\2\2\2\u0104\u0bcd\3\2\2\2\u0106\u0bdb\3\2"+
		"\2\2\u0108\u0bdd\3\2\2\2\u010a\u0c03\3\2\2\2\u010c\u0c05\3\2\2\2\u010e"+
		"\u0c09\3\2\2\2\u0110\u0c12\3\2\2\2\u0112\u0c16\3\2\2\2\u0114\u0c27\3\2"+
		"\2\2\u0116\u0c29\3\2\2\2\u0118\u0c41\3\2\2\2\u011a\u0c44\3\2\2\2\u011c"+
		"\u0c4e\3\2\2\2\u011e\u0c50\3\2\2\2\u0120\u0c52\3\2\2\2\u0122\u0c87\3\2"+
		"\2\2\u0124\u0c89\3\2\2\2\u0126\u0c8b\3\2\2\2\u0128\u0c9a\3\2\2\2\u012a"+
		"\u0c9c\3\2\2\2\u012c\u0c9e\3\2\2\2\u012e\u0d17\3\2\2\2\u0130\u0d21\3\2"+
		"\2\2\u0132\u0d29\3\2\2\2\u0134\u0d2b\3\2\2\2\u0136\u0d31\3\2\2\2\u0138"+
		"\u0d34\3\2\2\2\u013a\u0d39\3\2\2\2\u013c\u0d4b\3\2\2\2\u013e\u0d4d\3\2"+
		"\2\2\u0140\u0d50\3\2\2\2\u0142\u0d53\3\2\2\2\u0144\u0d5f\3\2\2\2\u0146"+
		"\u0d61\3\2\2\2\u0148\u0d63\3\2\2\2\u014a\u0d71\3\2\2\2\u014c\u0d73\3\2"+
		"\2\2\u014e\u0d86\3\2\2\2\u0150\u0d91\3\2\2\2\u0152\u0dcc\3\2\2\2\u0154"+
		"\u0dce\3\2\2\2\u0156\u0dde\3\2\2\2\u0158\u0de6\3\2\2\2\u015a\u0de8\3\2"+
		"\2\2\u015c\u0dec\3\2\2\2\u015e\u0dff\3\2\2\2\u0160\u0e0c\3\2\2\2\u0162"+
		"\u0e1a\3\2\2\2\u0164\u0e3a\3\2\2\2\u0166\u0e3c\3\2\2\2\u0168\u0e55\3\2"+
		"\2\2\u016a\u0e58\3\2\2\2\u016c\u0e5c\3\2\2\2\u016e\u0e75\3\2\2\2\u0170"+
		"\u0e77\3\2\2\2\u0172\u0e87\3\2\2\2\u0174\u0e8c\3\2\2\2\u0176\u0e94\3\2"+
		"\2\2\u0178\u0ea4\3\2\2\2\u017a\u0ea6\3\2\2\2\u017c\u0eb6\3\2\2\2\u017e"+
		"\u0eb9\3\2\2\2\u0180\u0ed4\3\2\2\2\u0182\u0ef1\3\2\2\2\u0184\u0ef9\3\2"+
		"\2\2\u0186\u0efb\3\2\2\2\u0188\u0f03\3\2\2\2\u018a\u0f11\3\2\2\2\u018c"+
		"\u0f3c\3\2\2\2\u018e\u0f3e\3\2\2\2\u0190\u0f46\3\2\2\2\u0192\u0f57\3\2"+
		"\2\2\u0194\u0f65\3";
	private static final String _serializedATNSegment1 =
		"\2\2\2\u0196\u0f73\3\2\2\2\u0198\u0f84\3\2\2\2\u019a\u0faf\3\2\2\2\u019c"+
		"\u0fb1\3\2\2\2\u019e\u0fd7\3\2\2\2\u01a0\u0fd9\3\2\2\2\u01a2\u0fe4\3\2"+
		"\2\2\u01a4\u0fe6\3\2\2\2\u01a6\u0ffd\3\2\2\2\u01a8\u0fff\3\2\2\2\u01aa"+
		"\u1004\3\2\2\2\u01ac\u1012\3\2\2\2\u01ae\u1015\3\2\2\2\u01b0\u1088\3\2"+
		"\2\2\u01b2\u108a\3\2\2\2\u01b4\u1091\3\2\2\2\u01b6\u10a2\3\2\2\2\u01b8"+
		"\u10bb\3\2\2\2\u01ba\u10bd\3\2\2\2\u01bc\u10bf\3\2\2\2\u01be\u10c8\3\2"+
		"\2\2\u01c0\u10d5\3\2\2\2\u01c2\u10d9\3\2\2\2\u01c4\u10e1\3\2\2\2\u01c6"+
		"\u10e5\3\2\2\2\u01c8\u1102\3\2\2\2\u01ca\u1104\3\2\2\2\u01cc\u1112\3\2"+
		"\2\2\u01ce\u111f\3\2\2\2\u01d0\u1128\3\2\2\2\u01d2\u1138\3\2\2\2\u01d4"+
		"\u1140\3\2\2\2\u01d6\u1146\3\2\2\2\u01d8\u114e\3\2\2\2\u01da\u115c\3\2"+
		"\2\2\u01dc\u1166\3\2\2\2\u01de\u1168\3\2\2\2\u01e0\u1173\3\2\2\2\u01e2"+
		"\u11a0\3\2\2\2\u01e4\u11a2\3\2\2\2\u01e6\u11ad\3\2\2\2\u01e8\u11af\3\2"+
		"\2\2\u01ea\u11b3\3\2\2\2\u01ec\u11bc\3\2\2\2\u01ee\u11be\3\2\2\2\u01f0"+
		"\u11d4\3\2\2\2\u01f2\u11dc\3\2\2\2\u01f4\u11e0\3\2\2\2\u01f6\u11ec\3\2"+
		"\2\2\u01f8\u11ee\3\2\2\2\u01fa\u11fd\3\2\2\2\u01fc\u11ff\3\2\2\2\u01fe"+
		"\u1201\3\2\2\2\u0200\u1207\3\2\2\2\u0202\u1218\3\2\2\2\u0204\u121a\3\2"+
		"\2\2\u0206\u1247\3\2\2\2\u0208\u124d\3\2\2\2\u020a\u124f\3\2\2\2\u020c"+
		"\u126f\3\2\2\2\u020e\u1279\3\2\2\2\u0210\u1289\3\2\2\2\u0212\u128b\3\2"+
		"\2\2\u0214\u12a7\3\2\2\2\u0216\u12ae\3\2\2\2\u0218\u12b1\3\2\2\2\u021a"+
		"\u12bc\3\2\2\2\u021c\u12ee\3\2\2\2\u021e\u12f0\3\2\2\2\u0220\u12ff\3\2"+
		"\2\2\u0222\u1305\3\2\2\2\u0224\u1307\3\2\2\2\u0226\u1312\3\2\2\2\u0228"+
		"\u1314\3\2\2\2\u022a\u1319\3\2\2\2\u022c\u131f\3\2\2\2\u022e\u1323\3\2"+
		"\2\2\u0230\u1327\3\2\2\2\u0232\u132e\3\2\2\2\u0234\u1330\3\2\2\2\u0236"+
		"\u1332\3\2\2\2\u0238\u1334\3\2\2\2\u023a\u1345\3\2\2\2\u023c\u1347\3\2"+
		"\2\2\u023e\u135a\3\2\2\2\u0240\u1366\3\2\2\2\u0242\u1371\3\2\2\2\u0244"+
		"\u137e\3\2\2\2\u0246\u1385\3\2\2\2\u0248\u1393\3\2\2\2\u024a\u13ab\3\2"+
		"\2\2\u024c\u13ad\3\2\2\2\u024e\u13b5\3\2\2\2\u0250\u13c1\3\2\2\2\u0252"+
		"\u13c4\3\2\2\2\u0254\u13ce\3\2\2\2\u0256\u13d7\3\2\2\2\u0258\u13df\3\2"+
		"\2\2\u025a\u13ec\3\2\2\2\u025c\u13f5\3\2\2\2\u025e\u13fe\3\2\2\2\u0260"+
		"\u1407\3\2\2\2\u0262\u1411\3\2\2\2\u0264\u141a\3\2\2\2\u0266\u1425\3\2"+
		"\2\2\u0268\u1436\3\2\2\2\u026a\u143f\3\2\2\2\u026c\u1447\3\2\2\2\u026e"+
		"\u1453\3\2\2\2\u0270\u145d\3\2\2\2\u0272\u1466\3\2\2\2\u0274\u146e\3\2"+
		"\2\2\u0276\u147a\3\2\2\2\u0278\u1486\3\2\2\2\u027a\u148d\3\2\2\2\u027c"+
		"\u1498\3\2\2\2\u027e\u14a1\3\2\2\2\u0280\u14aa\3\2\2\2\u0282\u14b3\3\2"+
		"\2\2\u0284\u14be\3\2\2\2\u0286\u14c7\3\2\2\2\u0288\u14d0\3\2\2\2\u028a"+
		"\u14d7\3\2\2\2\u028c\u14e0\3\2\2\2\u028e\u14e7\3\2\2\2\u0290\u14f2\3\2"+
		"\2\2\u0292\u14fe\3\2\2\2\u0294\u1509\3\2\2\2\u0296\u1512\3\2\2\2\u0298"+
		"\u151d\3\2\2\2\u029a\u1526\3\2\2\2\u029c\u1535\3\2\2\2\u029e\u153d\3\2"+
		"\2\2\u02a0\u153f\3\2\2\2\u02a2\u1542\3\2\2\2\u02a4\u1545\3\2\2\2\u02a6"+
		"\u154d\3\2\2\2\u02a8\u1555\3\2\2\2\u02aa\u1559\3\2\2\2\u02ac\u1563\3\2"+
		"\2\2\u02ae\u1584\3\2\2\2\u02b0\u1586\3\2\2\2\u02b2\u158e\3\2\2\2\u02b4"+
		"\u1590\3\2\2\2\u02b6\u1592\3\2\2\2\u02b8\u1594\3\2\2\2\u02ba\u15ac\3\2"+
		"\2\2\u02bc\u15ae\3\2\2\2\u02be\u15b3\3\2\2\2\u02c0\u15c6\3\2\2\2\u02c2"+
		"\u15cd\3\2\2\2\u02c4\u15d7\3\2\2\2\u02c6\u15e7\3\2\2\2\u02c8\u15e9\3\2"+
		"\2\2\u02ca\u15ee\3\2\2\2\u02cc\u15f2\3\2\2\2\u02ce\u15f5\3\2\2\2\u02d0"+
		"\u15fb\3\2\2\2\u02d2\u1606\3\2\2\2\u02d4\u1608\3\2\2\2\u02d6\u160b\3\2"+
		"\2\2\u02d8\u160e\3\2\2\2\u02da\u1610\3\2\2\2\u02dc\u1612\3\2\2\2\u02de"+
		"\u1617\3\2\2\2\u02e0\u161e\3\2\2\2\u02e2\u1622\3\2\2\2\u02e4\u1624\3\2"+
		"\2\2\u02e6\u1627\3\2\2\2\u02e8\u1634\3\2\2\2\u02ea\u1641\3\2\2\2\u02ec"+
		"\u1643\3\2\2\2\u02ee\u1645\3\2\2\2\u02f0\u1648\3\2\2\2\u02f2\u164c\3\2"+
		"\2\2\u02f4\u164e\3\2\2\2\u02f6\u1667\3\2\2\2\u02f8\u1669\3\2\2\2\u02fa"+
		"\u167d\3\2\2\2\u02fc\u174a\3\2\2\2\u02fe\u179a\3\2\2\2\u0300\u179c\3\2"+
		"\2\2\u0302\u17a6\3\2\2\2\u0304\u17bf\3\2\2\2\u0306\u17c1\3\2\2\2\u0308"+
		"\u17c8\3\2\2\2\u030a\u17ca\3\2\2\2\u030c\u17d5\3\2\2\2\u030e\u17d9\3\2"+
		"\2\2\u0310\u17de\3\2\2\2\u0312\u17e1\3\2\2\2\u0314\u17e7\3\2\2\2\u0316"+
		"\u17ef\3\2\2\2\u0318\u17fd\3\2\2\2\u031a\u1801\3\2\2\2\u031c\u1804\3\2"+
		"\2\2\u031e\u1808\3\2\2\2\u0320\u1819\3\2\2\2\u0322\u1821\3\2\2\2\u0324"+
		"\u1823\3\2\2\2\u0326\u182a\3\2\2\2\u0328\u182c\3\2\2\2\u032a\u1837\3\2"+
		"\2\2\u032c\u1845\3\2\2\2\u032e\u1851\3\2\2\2\u0330\u1861\3\2\2\2\u0332"+
		"\u186b\3\2\2\2\u0334\u186d\3\2\2\2\u0336\u1873\3\2\2\2\u0338\u187f\3\2"+
		"\2\2\u033a\u1881\3\2\2\2\u033c\u1889\3\2\2\2\u033e\u1891\3\2\2\2\u0340"+
		"\u189c\3\2\2\2\u0342\u189e\3\2\2\2\u0344\u18dd\3\2\2\2\u0346\u18e3\3\2"+
		"\2\2\u0348\u18f6\3\2\2\2\u034a\u18fc\3\2\2\2\u034c\u18fe\3\2\2\2\u034e"+
		"\u1903\3\2\2\2\u0350\u1911\3\2\2\2\u0352\u1928\3\2\2\2\u0354\u192a\3\2"+
		"\2\2\u0356\u193d\3\2\2\2\u0358\u193f\3\2\2\2\u035a\u1951\3\2\2\2\u035c"+
		"\u1953\3\2\2\2\u035e\u1961\3\2\2\2\u0360\u196e\3\2\2\2\u0362\u1970\3\2"+
		"\2\2\u0364\u1976\3\2\2\2\u0366\u197e\3\2\2\2\u0368\u1980\3\2\2\2\u036a"+
		"\u1a57\3\2\2\2\u036c\u1a74\3\2\2\2\u036e\u1a83\3\2\2\2\u0370\u1a85\3\2"+
		"\2\2\u0372\u1a90\3\2\2\2\u0374\u1a9b\3\2\2\2\u0376\u1aa6\3\2\2\2\u0378"+
		"\u1aa8\3\2\2\2\u037a\u1ac7\3\2\2\2\u037c\u1ae0\3\2\2\2\u037e\u1ae8\3\2"+
		"\2\2\u0380\u1aec\3\2\2\2\u0382\u1aee\3\2\2\2\u0384\u1af3\3\2\2\2\u0386"+
		"\u1b0c\3\2\2\2\u0388\u1b12\3\2\2\2\u038a\u1b14\3\2\2\2\u038c\u1b20\3\2"+
		"\2\2\u038e\u1b26\3\2\2\2\u0390\u1b2a\3\2\2\2\u0392\u1b2c\3\2\2\2\u0394"+
		"\u1b34\3\2\2\2\u0396\u1b38\3\2\2\2\u0398\u1b56\3\2\2\2\u039a\u1b58\3\2"+
		"\2\2\u039c\u1b6a\3\2\2\2\u039e\u1b6c\3\2\2\2\u03a0\u1b75\3\2\2\2\u03a2"+
		"\u1b80\3\2\2\2\u03a4\u1b82\3\2\2\2\u03a6\u1b85\3\2\2\2\u03a8\u1b88\3\2"+
		"\2\2\u03aa\u1b90\3\2\2\2\u03ac\u1ba2\3\2\2\2\u03ae\u1ba4\3\2\2\2\u03b0"+
		"\u1ba9\3\2\2\2\u03b2\u1bb6\3\2\2\2\u03b4\u1bc7\3\2\2\2\u03b6\u1bcd\3\2"+
		"\2\2\u03b8\u1bcf\3\2\2\2\u03ba\u1bd6\3\2\2\2\u03bc\u1bdd\3\2\2\2\u03be"+
		"\u1be9\3\2\2\2\u03c0\u1beb\3\2\2\2\u03c2\u1bee\3\2\2\2\u03c4\u1bf6\3\2"+
		"\2\2\u03c6\u1bfb\3\2\2\2\u03c8\u1c03\3\2\2\2\u03ca\u1c08\3\2\2\2\u03cc"+
		"\u1c12\3\2\2\2\u03ce\u1c22\3\2\2\2\u03d0\u1c24\3\2\2\2\u03d2\u1c40\3\2"+
		"\2\2\u03d4\u1c42\3\2\2\2\u03d6\u1c4a\3\2\2\2\u03d8\u1c4f\3\2\2\2\u03da"+
		"\u1c51\3\2\2\2\u03dc\u1c55\3\2\2\2\u03de\u1c6a\3\2\2\2\u03e0\u1c70\3\2"+
		"\2\2\u03e2\u1c79\3\2\2\2\u03e4\u1c7b\3\2\2\2\u03e6\u1c81\3\2\2\2\u03e8"+
		"\u1c83\3\2\2\2\u03ea\u1c92\3\2\2\2\u03ec\u1c94\3\2\2\2\u03ee\u1c98\3\2"+
		"\2\2\u03f0\u1cb5\3\2\2\2\u03f2\u1cc2\3\2\2\2\u03f4\u1cc4\3\2\2\2\u03f6"+
		"\u1cc9\3\2\2\2\u03f8\u1ccb\3\2\2\2\u03fa\u1ccf\3\2\2\2\u03fc\u1ce6\3\2"+
		"\2\2\u03fe\u1cee\3\2\2\2\u0400\u1cfc\3\2\2\2\u0402\u1cfe\3\2\2\2\u0404"+
		"\u1d1b\3\2\2\2\u0406\u1d57\3\2\2\2\u0408\u1d59\3\2\2\2\u040a\u1d61\3\2"+
		"\2\2\u040c\u1d68\3\2\2\2\u040e\u1d6d\3\2\2\2\u0410\u1d7a\3\2\2\2\u0412"+
		"\u1d81\3\2\2\2\u0414\u1d87\3\2\2\2\u0416\u1d89\3\2\2\2\u0418\u1d8b\3\2"+
		"\2\2\u041a\u1d91\3\2\2\2\u041c\u1d93\3\2\2\2\u041e\u1d9e\3\2\2\2\u0420"+
		"\u1da8\3\2\2\2\u0422\u1db7\3\2\2\2\u0424\u1dbe\3\2\2\2\u0426\u1dc7\3\2"+
		"\2\2\u0428\u1dc9\3\2\2\2\u042a\u1dd8\3\2\2\2\u042c\u1de1\3\2\2\2\u042e"+
		"\u1e16\3\2\2\2\u0430\u1e18\3\2\2\2\u0432\u1e1d\3\2\2\2\u0434\u1e46\3\2"+
		"\2\2\u0436\u1e48\3\2\2\2\u0438\u1e4f\3\2\2\2\u043a\u1e51\3\2\2\2\u043c"+
		"\u1e54\3\2\2\2\u043e\u1e59\3\2\2\2\u0440\u1e5d\3\2\2\2\u0442\u1e6a\3\2"+
		"\2\2\u0444\u1e71\3\2\2\2\u0446\u1e7b\3\2\2\2\u0448\u1e7d\3\2\2\2\u044a"+
		"\u1e81\3\2\2\2\u044c\u1e8d\3\2\2\2\u044e\u1e95\3\2\2\2\u0450\u1e97\3\2"+
		"\2\2\u0452\u1e9c\3\2\2\2\u0454\u1eaa\3\2\2\2\u0456\u1ec2\3\2\2\2\u0458"+
		"\u1ed3\3\2\2\2\u045a\u1edb\3\2\2\2\u045c\u1edd\3\2\2\2\u045e\u1ee7\3\2"+
		"\2\2\u0460\u1ee9\3\2\2\2\u0462\u1eeb\3\2\2\2\u0464\u1ef6\3\2\2\2\u0466"+
		"\u1f00\3\2\2\2\u0468\u1f02\3\2\2\2\u046a\u1f16\3\2\2\2\u046c\u1f38\3\2"+
		"\2\2\u046e\u1f3a\3\2\2\2\u0470\u1f3c\3\2\2\2\u0472\u1f42\3\2\2\2\u0474"+
		"\u1f4d\3\2\2\2\u0476\u1f51\3\2\2\2\u0478\u1f53\3\2\2\2\u047a\u1f66\3\2"+
		"\2\2\u047c\u1f8b\3\2\2\2\u047e\u1f90\3\2\2\2\u0480\u1f92\3\2\2\2\u0482"+
		"\u1f94\3\2\2\2\u0484\u1f96\3\2\2\2\u0486\u1f9e\3\2\2\2\u0488\u1fa2\3\2"+
		"\2\2\u048a\u1fa6\3\2\2\2\u048c\u1fb7\3\2\2\2\u048e\u1fce\3\2\2\2\u0490"+
		"\u1fd0\3\2\2\2\u0492\u1fd2\3\2\2\2\u0494\u1fdd\3\2\2\2\u0496\u1ff0\3\2"+
		"\2\2\u0498\u1ffc\3\2\2\2\u049a\u1fff\3\2\2\2\u049c\u200e\3\2\2\2\u049e"+
		"\u2023\3\2\2\2\u04a0\u2025\3\2\2\2\u04a2\u2028\3\2\2\2\u04a4\u2033\3\2"+
		"\2\2\u04a6\u2037\3\2\2\2\u04a8\u204d\3\2\2\2\u04aa\u204f\3\2\2\2\u04ac"+
		"\u2054\3\2\2\2\u04ae\u2083\3\2\2\2\u04b0\u2088\3\2\2\2\u04b2\u20d2\3\2"+
		"\2\2\u04b4\u20d9\3\2\2\2\u04b6\u20db\3\2\2\2\u04b8\u210a\3\2\2\2\u04ba"+
		"\u210c\3\2\2\2\u04bc\u2117\3\2\2\2\u04be\u2123\3\2\2\2\u04c0\u212a\3\2"+
		"\2\2\u04c2\u2130\3\2\2\2\u04c4\u2136\3\2\2\2\u04c6\u2138\3\2\2\2\u04c8"+
		"\u2142\3\2\2\2\u04ca\u214c\3\2\2\2\u04cc\u2159\3\2\2\2\u04ce\u215b\3\2"+
		"\2\2\u04d0\u215e\3\2\2\2\u04d2\u2171\3\2\2\2\u04d4\u2173\3\2\2\2\u04d6"+
		"\u21a3\3\2\2\2\u04d8\u21ab\3\2\2\2\u04da\u21af\3\2\2\2\u04dc\u21b1\3\2"+
		"\2\2\u04de\u21b8\3\2\2\2\u04e0\u21ba\3\2\2\2\u04e2\u21bc\3\2\2\2\u04e4"+
		"\u21be\3\2\2\2\u04e6\u21d5\3\2\2\2\u04e8\u21d7\3\2\2\2\u04ea\u21db\3\2"+
		"\2\2\u04ec\u21e8\3\2\2\2\u04ee\u21ea\3\2\2\2\u04f0\u21ed\3\2\2\2\u04f2"+
		"\u21f2\3\2\2\2\u04f4\u21f7\3\2\2\2\u04f6\u21fd\3\2\2\2\u04f8\u2200\3\2"+
		"\2\2\u04fa\u220b\3\2\2\2\u04fc\u220f\3\2\2\2\u04fe\u221c\3\2\2\2\u0500"+
		"\u221e\3\2\2\2\u0502\u2221\3\2\2\2\u0504\u2259\3\2\2\2\u0506\u2276\3\2"+
		"\2\2\u0508\u2285\3\2\2\2\u050a\u2287\3\2\2\2\u050c\u2290\3\2\2\2\u050e"+
		"\u2292\3\2\2\2\u0510\u229a\3\2\2\2\u0512\u229c\3\2\2\2\u0514\u229f\3\2"+
		"\2\2\u0516\u22a3\3\2\2\2\u0518\u22aa\3\2\2\2\u051a\u22ac\3\2\2\2\u051c"+
		"\u22ca\3\2\2\2\u051e\u22cc\3\2\2\2\u0520\u22f6\3\2\2\2\u0522\u22fd\3\2"+
		"\2\2\u0524\u22ff\3\2\2\2\u0526\u2307\3\2\2\2\u0528\u2311\3\2\2\2\u052a"+
		"\u2313\3\2\2\2\u052c\u231b\3\2\2\2\u052e\u2320\3\2\2\2\u0530\u234a\3\2"+
		"\2\2\u0532\u234d\3\2\2\2\u0534\u2352\3\2\2\2\u0536\u23a9\3\2\2\2\u0538"+
		"\u0539\7D\2\2\u0539\u053a\5F$\2\u053a\u053c\7M\2\2\u053b\u053d\5\u0486"+
		"\u0244\2\u053c\u053b\3\2\2\2\u053c\u053d\3\2\2\2\u053d\u053e\3\2\2\2\u053e"+
		"\u0553\5\u02de\u0170\2\u053f\u0554\5H%\2\u0540\u0541\7\u0146\2\2\u0541"+
		"\u0546\5\u03cc\u01e7\2\u0542\u0543\7#\2\2\u0543\u0544\5\f\7\2\u0544\u0545"+
		"\7$\2\2\u0545\u0547\3\2\2\2\u0546\u0542\3\2\2\2\u0546\u0547\3\2\2\2\u0547"+
		"\u0554\3\2\2\2\u0548\u0549\7\u00e0\2\2\u0549\u054a\7\u0146\2\2\u054a\u054f"+
		"\5\u034a\u01a6\2\u054b\u054c\7#\2\2\u054c\u054d\5\f\7\2\u054d\u054e\7"+
		"$\2\2\u054e\u0550\3\2\2\2\u054f\u054b\3\2\2\2\u054f\u0550\3\2\2\2\u0550"+
		"\u0551\3\2\2\2\u0551\u0552\5\6\4\2\u0552\u0554\3\2\2\2\u0553\u053f\3\2"+
		"\2\2\u0553\u0540\3\2\2\2\u0553\u0548\3\2\2\2\u0554\u0555\3\2\2\2\u0555"+
		"\u0557\5n8\2\u0556\u0558\5p9\2\u0557\u0556\3\2\2\2\u0557\u0558\3\2\2\2"+
		"\u0558\u055a\3\2\2\2\u0559\u055b\5\34\17\2\u055a\u0559\3\2\2\2\u055a\u055b"+
		"\3\2\2\2\u055b\u055d\3\2\2\2\u055c\u055e\5\32\16\2\u055d\u055c\3\2\2\2"+
		"\u055d\u055e\3\2\2\2\u055e\u0560\3\2\2\2\u055f\u0561\5\30\r\2\u0560\u055f"+
		"\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0563\3\2\2\2\u0562\u0564\5\26\f\2"+
		"\u0563\u0562\3\2\2\2\u0563\u0564\3\2\2\2\u0564\u056a\3\2\2\2\u0565\u0566"+
		"\7p\2\2\u0566\u0568\5\u04ac\u0257\2\u0567\u0569\5\24\13\2\u0568\u0567"+
		"\3\2\2\2\u0568\u0569\3\2\2\2\u0569\u056b\3\2\2\2\u056a\u0565\3\2\2\2\u056a"+
		"\u056b\3\2\2\2\u056b\u0572\3\2\2\2\u056c\u056d\7\u0105\2\2\u056d\u056e"+
		"\5\u02e4\u0173\2\u056e\u0570\5\4\3\2\u056f\u0571\5\24\13\2\u0570\u056f"+
		"\3\2\2\2\u0570\u0571\3\2\2\2\u0571\u0573\3\2\2\2\u0572\u056c\3\2\2\2\u0572"+
		"\u0573\3\2\2\2\u0573\3\3\2\2\2\u0574\u0575\7#\2\2\u0575\u0576\5\u0370"+
		"\u01b9\2\u0576\u0577\7$\2\2\u0577\5\3\2\2\2\u0578\u0579\7u\2\2\u0579\u057a"+
		"\7\\\2\2\u057a\u057b\7]\2\2\u057b\u057c\7#\2\2\u057c\u057d\5\b\5\2\u057d"+
		"\u057e\7$\2\2\u057e\u0593\3\2\2\2\u057f\u0580\7u\2\2\u0580\u0581\7\\\2"+
		"\2\u0581\u0582\7\u0080\2\2\u0582\u0583\7#\2\2\u0583\u0584\5\u0370\u01b9"+
		"\2\u0584\u0585\7$\2\2\u0585\u0593\3\2\2\2\u0586\u0587\7u\2\2\u0587\u0588"+
		"\7\\\2\2\u0588\u0589\7e\2\2\u0589\u058a\7#\2\2\u058a\u058b\5\u0370\u01b9"+
		"\2\u058b\u058c\7$\2\2\u058c\u058d\7v\2\2\u058d\u058e\7#\2\2\u058e\u058f"+
		"\5\u0370\u01b9\2\u058f\u0590\7$\2\2\u0590\u0593\3\2\2\2\u0591\u0593\7"+
		"\u00a4\2\2\u0592\u0578\3\2\2\2\u0592\u057f\3\2\2\2\u0592\u0586\3\2\2\2"+
		"\u0592\u0591\3\2\2\2\u0593\7\3\2\2\2\u0594\u0599\5\n\6\2\u0595\u0596\7"+
		")\2\2\u0596\u0598\5\n\6\2\u0597\u0595\3\2\2\2\u0598\u059b\3\2\2\2\u0599"+
		"\u0597\3\2\2\2\u0599\u059a\3\2\2\2\u059a\t\3\2\2\2\u059b\u0599\3\2\2\2"+
		"\u059c\u059d\5\u0414\u020b\2\u059d\u059e\7\u0230\2\2\u059e\13\3\2\2\2"+
		"\u059f\u05a4\5\16\b\2\u05a0\u05a1\7)\2\2\u05a1\u05a3\5\16\b\2\u05a2\u05a0"+
		"\3\2\2\2\u05a3\u05a6\3\2\2\2\u05a4\u05a2\3\2\2\2\u05a4\u05a5\3\2\2\2\u05a5"+
		"\r\3\2\2\2\u05a6\u05a4\3\2\2\2\u05a7\u05aa\5\20\t\2\u05a8\u05aa\5d\63"+
		"\2\u05a9\u05a7\3\2\2\2\u05a9\u05a8\3\2\2\2\u05aa\17\3\2\2\2\u05ab\u05ae"+
		"\5\u034c\u01a7\2\u05ac\u05ad\7]\2\2\u05ad\u05af\7\u01fd\2\2\u05ae\u05ac"+
		"\3\2\2\2\u05ae\u05af\3\2\2\2\u05af\u05b0\3\2\2\2\u05b0\u05b1\5\22\n\2"+
		"\u05b1\21\3\2\2\2\u05b2\u05b4\5N(\2\u05b3\u05b2\3\2\2\2\u05b4\u05b7\3"+
		"\2\2\2\u05b5\u05b3\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6\23\3\2\2\2\u05b7"+
		"\u05b5\3\2\2\2\u05b8\u05b9\7]\2\2\u05b9\u05be\7\u00fd\2\2\u05ba\u05bb"+
		"\7]\2\2\u05bb\u05bc\7\u00e9\2\2\u05bc\u05be\7\u00fd\2\2\u05bd\u05b8\3"+
		"\2\2\2\u05bd\u05ba\3\2\2\2\u05be\25\3\2\2\2\u05bf\u05c0\7\u013b\2\2\u05c0"+
		"\u05c1\5\u02e4\u0173\2\u05c1\27\3\2\2\2\u05c2\u05c3\7q\2\2\u05c3\u05c9"+
		"\7\u008d\2\2\u05c4\u05ca\7F\2\2\u05c5\u05c6\7C\2\2\u05c6\u05ca\7\u00ef"+
		"\2\2\u05c7\u05c8\7\u00aa\2\2\u05c8\u05ca\7\u00ef\2\2\u05c9\u05c4\3\2\2"+
		"\2\u05c9\u05c5\3\2\2\2\u05c9\u05c7\3\2\2\2\u05ca\31\3\2\2\2\u05cb\u05cc"+
		"\7]\2\2\u05cc\u05d0\5\u03f8\u01fd\2\u05cd\u05ce\7\u0144\2\2\u05ce\u05d0"+
		"\7\u0123\2\2\u05cf\u05cb\3\2\2\2\u05cf\u05cd\3\2\2\2\u05d0\33\3\2\2\2"+
		"\u05d1\u05d2\7n\2\2\u05d2\u05d3\5\36\20\2\u05d3\35\3\2\2\2\u05d4\u05d8"+
		"\5\u02d2\u016a\2\u05d5\u05d8\5\u02d8\u016d\2\u05d6\u05d8\5\u0416\u020c"+
		"\2\u05d7\u05d4\3\2\2\2\u05d7\u05d5\3\2\2\2\u05d7\u05d6\3\2\2\2\u05d8\37"+
		"\3\2\2\2\u05d9\u05da\7D\2\2\u05da\u05db\5z>\2\u05db\u05dc\7O\2\2\u05dc"+
		"\u05e1\5|?\2\u05dd\u05df\5\u0486\u0244\2\u05de\u05dd\3\2\2\2\u05de\u05df"+
		"\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e2\5\u02ec\u0177\2\u05e1\u05de\3"+
		"\2\2\2\u05e1\u05e2\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u05e4\7q\2\2\u05e4"+
		"\u05e5\5~@\2\u05e5\u05e7\5\u02de\u0170\2\u05e6\u05e8\5&\24\2\u05e7\u05e6"+
		"\3\2\2\2\u05e7\u05e8\3\2\2\2\u05e8\u05e9\3\2\2\2\u05e9\u05ea\7#\2\2\u05ea"+
		"\u05eb\5\u03ee\u01f8\2\u05eb\u05ed\7$\2\2\u05ec\u05ee\5\"\22\2\u05ed\u05ec"+
		"\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05f1\3\2\2\2\u05ef\u05f0\7]\2\2\u05f0"+
		"\u05f2\5\u03f8\u01fd\2\u05f1\u05ef\3\2\2\2\u05f1\u05f2\3\2\2\2\u05f2\u05f4"+
		"\3\2\2\2\u05f3\u05f5\5\26\f\2\u05f4\u05f3\3\2\2\2\u05f4\u05f5\3\2\2\2"+
		"\u05f5\u05f7\3\2\2\2\u05f6\u05f8\5\u050e\u0288\2\u05f7\u05f6\3\2\2\2\u05f7"+
		"\u05f8\3\2\2\2\u05f8!\3\2\2\2\u05f9\u05fa\7\u0117\2\2\u05fa\u05fb\7#\2"+
		"\2\u05fb\u05fc\5$\23\2\u05fc\u05fd\7$\2\2\u05fd#\3\2\2\2\u05fe\u0603\5"+
		"\u03f2\u01fa\2\u05ff\u0600\7)\2\2\u0600\u0602\5\u03f2\u01fa\2\u0601\u05ff"+
		"\3\2\2\2\u0602\u0605\3\2\2\2\u0603\u0601\3\2\2\2\u0603\u0604\3\2\2\2\u0604"+
		"%\3\2\2\2\u0605\u0603\3\2\2\2\u0606\u0607\7n\2\2\u0607\u0608\5\36\20\2"+
		"\u0608\'\3\2\2\2\u0609\u060a\7D\2\2\u060a\u060b\7\u00fe\2\2\u060b\u060d"+
		"\5\u02e4\u0173\2\u060c\u060e\7]\2\2\u060d\u060c\3\2\2\2\u060d\u060e\3"+
		"\2\2\2\u060e\u0612\3\2\2\2\u060f\u0611\5\62\32\2\u0610\u060f\3\2\2\2\u0611"+
		"\u0614\3\2\2\2\u0612\u0610\3\2\2\2\u0612\u0613\3\2\2\2\u0613)\3\2\2\2"+
		"\u0614\u0612\3\2\2\2\u0615\u0618\7D\2\2\u0616\u0617\7x\2\2\u0617\u0619"+
		"\7\u01f9\2\2\u0618\u0616\3\2\2\2\u0618\u0619\3\2\2\2\u0619\u061b\3\2\2"+
		"\2\u061a\u061c\t\2\2\2\u061b\u061a\3\2\2\2\u061b\u061c\3\2\2\2\u061c\u061e"+
		"\3\2\2\2\u061d\u061f\7\u0149\2\2\u061e\u061d\3\2\2\2\u061e\u061f\3\2\2"+
		"\2\u061f\u0620\3\2\2\2\u0620\u0621\7Z\2\2\u0621\u062e\5\u034a\u01a6\2"+
		"\u0622\u062b\7#\2\2\u0623\u0628\5,\27\2\u0624\u0625\7)\2\2\u0625\u0627"+
		"\5,\27\2\u0626\u0624\3\2\2\2\u0627\u062a\3\2\2\2\u0628\u0626\3\2\2\2\u0628"+
		"\u0629\3\2\2\2\u0629\u062c\3\2\2\2\u062a\u0628\3\2\2\2\u062b\u0623\3\2"+
		"\2\2\u062b\u062c\3\2\2\2\u062c\u062d\3\2\2\2\u062d\u062f\7$\2\2\u062e"+
		"\u0622\3\2\2\2\u062e\u062f\3\2\2\2\u062f\u0632\3\2\2\2\u0630\u0631\7]"+
		"\2\2\u0631\u0633\5\u03f8\u01fd\2\u0632\u0630\3\2\2\2\u0632\u0633\3\2\2"+
		"\2\u0633\u0634\3\2\2\2\u0634\u0635\7p\2\2\u0635\u063c\5\u04ac\u0257\2"+
		"\u0636\u0638\7]\2\2\u0637\u0639\t\3\2\2\u0638\u0637\3\2\2\2\u0638\u0639"+
		"\3\2\2\2\u0639\u063a\3\2\2\2\u063a\u063b\7\u00e5\2\2\u063b\u063d\7\u00ea"+
		"\2\2\u063c\u0636\3\2\2\2\u063c\u063d\3\2\2\2\u063d+\3\2\2\2\u063e\u0643"+
		"\5.\30\2\u063f\u0640\7)\2\2\u0640\u0642\5.\30\2\u0641\u063f\3\2\2\2\u0642"+
		"\u0645\3\2\2\2\u0643\u0641\3\2\2\2\u0643\u0644\3\2\2\2\u0644-\3\2\2\2"+
		"\u0645\u0643\3\2\2\2\u0646\u0647\5\u034c\u01a7\2\u0647/\3\2\2\2\u0648"+
		"\u0649\7F\2\2\u0649\u064b\7\u00fe\2\2\u064a\u064c\5\u0488\u0245\2\u064b"+
		"\u064a\3\2\2\2\u064b\u064c\3\2\2\2\u064c\u064d\3\2\2\2\u064d\u064e\5\u02e4"+
		"\u0173\2\u064e\61\3\2\2\2\u064f\u0651\5\64\33\2\u0650\u0652\7\33\2\2\u0651"+
		"\u0650\3\2\2\2\u0651\u0652\3\2\2\2\u0652\u0656\3\2\2\2\u0653\u0657\5\u0410"+
		"\u0209\2\u0654\u0657\5\u0412\u020a\2\u0655\u0657\7\u00a4\2\2\u0656\u0653"+
		"\3\2\2\2\u0656\u0654\3\2\2\2\u0656\u0655\3\2\2\2\u0657\63\3\2\2\2\u0658"+
		"\u0661\5\u02d2\u016a\2\u0659\u065a\7\u01d6\2\2\u065a\u0661\7\u008a\2\2"+
		"\u065b\u0661\7\u01cf\2\2\u065c\u0661\7\u01dc\2\2\u065d\u0661\7\u0127\2"+
		"\2\u065e\u0661\7\u013b\2\2\u065f\u0661\7\u0217\2\2\u0660\u0658\3\2\2\2"+
		"\u0660\u0659\3\2\2\2\u0660\u065b\3\2\2\2\u0660\u065c\3\2\2\2\u0660\u065d"+
		"\3\2\2\2\u0660\u065e\3\2\2\2\u0660\u065f\3\2\2\2\u0661\65\3\2\2\2\u0662"+
		"\u0663\7E\2\2\u0663\u067a\7M\2\2\u0664\u0666\5\u0488\u0245\2\u0665\u0664"+
		"\3\2\2\2\u0665\u0666\3\2\2\2\u0666\u0667\3\2\2\2\u0667\u0668\5~@\2\u0668"+
		"\u0669\5\u0092J\2\u0669\u066a\5\u0082B\2\u066a\u067b\3\2\2\2\u066b\u066c"+
		"\7\u0081\2\2\u066c\u066d\7\u0080\2\2\u066d\u066e\7\u013b\2\2\u066e\u0672"+
		"\5\u0092J\2\u066f\u0670\7\u0126\2\2\u0670\u0671\7\u0086\2\2\u0671\u0673"+
		"\5\u0462\u0232\2\u0672\u066f\3\2\2\2\u0672\u0673\3\2\2\2\u0673\u0674\3"+
		"\2\2\2\u0674\u0675\7L\2\2\u0675\u0676\7\u013b\2\2\u0676\u0678\5\u02e4"+
		"\u0173\2\u0677\u0679\7\u0199\2\2\u0678\u0677\3\2\2\2\u0678\u0679\3\2\2"+
		"\2\u0679\u067b\3\2\2\2\u067a\u0665\3\2\2\2\u067a\u066b\3\2\2\2\u067b\67"+
		"\3\2\2\2\u067c\u067d\7E\2\2\u067d\u0684\7O\2\2\u067e\u0680\5\u0488\u0245"+
		"\2\u067f\u067e\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u0685\3\2\2\2\u0681\u0682"+
		"\7\u0081\2\2\u0682\u0683\7\u0080\2\2\u0683\u0685\7\u013b\2\2\u0684\u067f"+
		"\3\2\2\2\u0684\u0681\3\2\2\2\u0685\u0686\3\2\2\2\u0686\u0687\5\u02ec\u0177"+
		"\2\u0687\u0688\5\u0086D\2\u06889\3\2\2\2\u0689\u068a\7F\2\2\u068a\u068c"+
		"\7M\2\2\u068b\u068d\5\u0488\u0245\2\u068c\u068b\3\2\2\2\u068c\u068d\3"+
		"\2\2\2\u068d\u068e\3\2\2\2\u068e\u0690\5\u02e6\u0174\2\u068f\u0691\5<"+
		"\37\2\u0690\u068f\3\2\2\2\u0690\u0691\3\2\2\2\u0691;\3\2\2\2\u0692\u0693"+
		"\t\4\2\2\u0693=\3\2\2\2\u0694\u0695\7F\2\2\u0695\u0696\7O\2\2\u0696\u0698"+
		"\5|?\2\u0697\u0699\5\u0488\u0245\2\u0698\u0697\3\2\2\2\u0698\u0699\3\2"+
		"\2\2\u0699\u069a\3\2\2\2\u069a\u069c\5\u00b4[\2\u069b\u069d\5@!\2\u069c"+
		"\u069b\3\2\2\2\u069c\u069d\3\2\2\2\u069d?\3\2\2\2\u069e\u069f\t\4\2\2"+
		"\u069fA\3\2\2\2\u06a0\u06a2\7G\2\2\u06a1\u06a3\7M\2\2\u06a2\u06a1\3\2"+
		"\2\2\u06a2\u06a3\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a5\5~@\2\u06a5\u06a7"+
		"\5\u0090I\2\u06a6\u06a8\5D#\2\u06a7\u06a6\3\2\2\2\u06a7\u06a8\3\2\2\2"+
		"\u06a8\u06aa\3\2\2\2\u06a9\u06ab\5<\37\2\u06aa\u06a9\3\2\2\2\u06aa\u06ab"+
		"\3\2\2\2\u06abC\3\2\2\2\u06ac\u06ad\7\u01b6\2\2\u06ad\u06b1\7\u010f\2"+
		"\2\u06ae\u06af\7\u012f\2\2\u06af\u06b1\7\u010f\2\2\u06b0\u06ac\3\2\2\2"+
		"\u06b0\u06ae\3\2\2\2\u06b1E\3\2\2\2\u06b2\u06b4\t\5\2\2\u06b3\u06b2\3"+
		"\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b5\3\2\2\2\u06b5\u06b8\t\2\2\2\u06b6"+
		"\u06b8\7\u013f\2\2\u06b7\u06b3\3\2\2\2\u06b7\u06b6\3\2\2\2\u06b7\u06b8"+
		"\3\2\2\2\u06b8G\3\2\2\2\u06b9\u06c2\7#\2\2\u06ba\u06bf\5J&\2\u06bb\u06bc"+
		"\7)\2\2\u06bc\u06be\5J&\2\u06bd\u06bb\3\2\2\2\u06be\u06c1\3\2\2\2\u06bf"+
		"\u06bd\3\2\2\2\u06bf\u06c0\3\2\2\2\u06c0\u06c3\3\2\2\2\u06c1\u06bf\3\2"+
		"\2\2\u06c2\u06ba\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c4\3\2\2\2\u06c4"+
		"\u06c5\7$\2\2\u06c5I\3\2\2\2\u06c6\u06d1\5L\'\2\u06c7\u06d1\5d\63\2\u06c8"+
		"\u06c9\7\u0083\2\2\u06c9\u06cd\5\u02de\u0170\2\u06ca\u06cc\5b\62\2\u06cb"+
		"\u06ca\3\2\2\2\u06cc\u06cf\3\2\2\2\u06cd\u06cb\3\2\2\2\u06cd\u06ce\3\2"+
		"\2\2\u06ce\u06d1\3\2\2\2\u06cf\u06cd\3\2\2\2\u06d0\u06c6\3\2\2\2\u06d0"+
		"\u06c7\3\2\2\2\u06d0\u06c8\3\2\2\2\u06d1K\3\2\2\2\u06d2\u06d3\5\u02e0"+
		"\u0171\2\u06d3\u06d5\5\u0404\u0203\2\u06d4\u06d6\5\u03ca\u01e6\2\u06d5"+
		"\u06d4\3\2\2\2\u06d5\u06d6\3\2\2\2\u06d6\u06da\3\2\2\2\u06d7\u06d9\5N"+
		"(\2\u06d8\u06d7\3\2\2\2\u06d9\u06dc\3\2\2\2\u06da\u06d8\3\2\2\2\u06da"+
		"\u06db\3\2\2\2\u06dbM\3\2\2\2\u06dc\u06da\3\2\2\2\u06dd\u06df\5P)\2\u06de"+
		"\u06dd\3\2\2\2\u06de\u06df\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0\u06e1\5R"+
		"*\2\u06e1\u06e2\5`\61\2\u06e2O\3\2\2\2\u06e3\u06e4\7P\2\2\u06e4\u06e5"+
		"\5\u040c\u0207\2\u06e5Q\3\2\2\2\u06e6\u06e8\7z\2\2\u06e7\u06e6\3\2\2\2"+
		"\u06e7\u06e8\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9\u071e\7{\2\2\u06ea\u071e"+
		"\5T+\2\u06eb\u06ec\7\u00a4\2\2\u06ec\u071e\5V,\2\u06ed\u06ee\7\u00e6\2"+
		"\2\u06ee\u06ef\7\u00e3\2\2\u06ef\u06f0\7p\2\2\u06f0\u06f1\7#\2\2\u06f1"+
		"\u06f2\5\u02fa\u017e\2\u06f2\u06f3\7$\2\2\u06f3\u06f4\7\u0222\2\2\u06f4"+
		"\u071e\3\2\2\2\u06f5\u06f9\7\u00e6\2\2\u06f6\u06fa\7\u00e3\2\2\u06f7\u06f8"+
		"\7\u0086\2\2\u06f8\u06fa\7\u00a4\2\2\u06f9\u06f6\3\2\2\2\u06f9\u06f7\3"+
		"\2\2\2\u06fa\u06fb\3\2\2\2\u06fb\u06fc\7p\2\2\u06fc\u0701\7\u010f\2\2"+
		"\u06fd\u06fe\7#\2\2\u06fe\u06ff\5X-\2\u06ff\u0700\7$\2\2\u0700\u0702\3"+
		"\2\2\2\u0701\u06fd\3\2\2\2\u0701\u0702\3\2\2\2\u0702\u071e\3\2\2\2\u0703"+
		"\u0704\7R\2\2\u0704\u071e\5\\/\2\u0705\u0706\5\u02f0\u0179\2\u0706\u0707"+
		"\5\\/\2\u0707\u071e\3\2\2\2\u0708\u0709\7\u00ed\2\2\u0709\u070b\5\u02de"+
		"\u0170\2\u070a\u070c\5\u02e8\u0175\2\u070b\u070a\3\2\2\2\u070b\u070c\3"+
		"\2\2\2\u070c\u0713\3\2\2\2\u070d\u070e\7\u011d\2\2\u070e\u0714\7h\2\2"+
		"\u070f\u0710\7\u011d\2\2\u0710\u0714\7\u0128\2\2\u0711\u0712\7\u011d\2"+
		"\2\u0712\u0714\7\u0138\2\2\u0713\u070d\3\2\2\2\u0713\u070f\3\2\2\2\u0713"+
		"\u0711\3\2\2\2\u0713\u0714\3\2\2\2\u0714\u071a\3\2\2\2\u0715\u0716\7q"+
		"\2\2\u0716\u0717\t\6\2\2\u0717\u0719\5^\60\2\u0718\u0715\3\2\2\2\u0719"+
		"\u071c\3\2\2\2\u071a\u0718\3\2\2\2\u071a\u071b\3\2\2\2\u071b\u071e\3\2"+
		"\2\2\u071c\u071a\3\2\2\2\u071d\u06e7\3\2\2\2\u071d\u06ea\3\2\2\2\u071d"+
		"\u06eb\3\2\2\2\u071d\u06ed\3\2\2\2\u071d\u06f5\3\2\2\2\u071d\u0703\3\2"+
		"\2\2\u071d\u0705\3\2\2\2\u071d\u0708\3\2\2\2\u071eS\3\2\2\2\u071f\u0720"+
		"\7\u00e5\2\2\u0720\u0723\5\u02fa\u017e\2\u0721\u0722\7\u00e9\2\2\u0722"+
		"\u0724\7\u0114\2\2\u0723\u0721\3\2\2\2\u0723\u0724\3\2\2\2\u0724U\3\2"+
		"\2\2\u0725\u0728\7\u00c2\2\2\u0726\u0728\5\u02fa\u017e\2\u0727\u0725\3"+
		"\2\2\2\u0727\u0726\3\2\2\2\u0728W\3\2\2\2\u0729\u072b\5Z.\2\u072a\u0729"+
		"\3\2\2\2\u072b\u072c\3\2\2\2\u072c\u072a\3\2\2\2\u072c\u072d\3\2\2\2\u072d"+
		"Y\3\2\2\2\u072e\u0730\7\u00f0\2\2\u072f\u0731\7]\2\2\u0730\u072f\3\2\2"+
		"\2\u0730\u0731\3\2\2\2\u0731\u0732\3\2\2\2\u0732\u0748\7\u0230\2\2\u0733"+
		"\u0735\7\u0112\2\2\u0734\u0736\7\u0086\2\2\u0735\u0734\3\2\2\2\u0735\u0736"+
		"\3\2\2\2\u0736\u0737\3\2\2\2\u0737\u0748\7\u0230\2\2\u0738\u0739\7\u011e"+
		"\2\2\u0739\u0748\7\u0230\2\2\u073a\u073b\7\u00e9\2\2\u073b\u0748\7\u011e"+
		"\2\2\u073c\u073d\7\u011f\2\2\u073d\u0748\7\u0230\2\2\u073e\u073f\7\u00e9"+
		"\2\2\u073f\u0748\7\u011f\2\2\u0740\u0748\7\u00fc\2\2\u0741\u0742\7\u00e9"+
		"\2\2\u0742\u0748\7\u00fc\2\2\u0743\u0744\7\u00f4\2\2\u0744\u0748\7\u0230"+
		"\2\2\u0745\u0746\7\u0126\2\2\u0746\u0748\7\u0086\2\2\u0747\u072e\3\2\2"+
		"\2\u0747\u0733\3\2\2\2\u0747\u0738\3\2\2\2\u0747\u073a\3\2\2\2\u0747\u073c"+
		"\3\2\2\2\u0747\u073e\3\2\2\2\u0747\u0740\3\2\2\2\u0747\u0741\3\2\2\2\u0747"+
		"\u0743\3\2\2\2\u0747\u0745\3\2\2\2\u0748[\3\2\2\2\u0749\u074a\7n\2\2\u074a"+
		"\u074b\7O\2\2\u074b\u074c\7\u013b\2\2\u074c\u074e\5\u040c\u0207\2\u074d"+
		"\u0749\3\2\2\2\u074d\u074e\3\2\2\2\u074e\u0754\3\2\2\2\u074f\u0750\7\u0117"+
		"\2\2\u0750\u0754\5\u02e8\u0175\2\u0751\u0752\7]\2\2\u0752\u0754\5\u043e"+
		"\u0220\2\u0753\u074d\3\2\2\2\u0753\u074f\3\2\2\2\u0753\u0751\3\2\2\2\u0754"+
		"]\3\2\2\2\u0755\u0756\7\u00e9\2\2\u0756\u075c\7\u00f3\2\2\u0757\u075c"+
		"\7\u0130\2\2\u0758\u075c\7\u00e4\2\2\u0759\u075a\7L\2\2\u075a\u075c\t"+
		"\7\2\2\u075b\u0755\3\2\2\2\u075b\u0757\3\2\2\2\u075b\u0758\3\2\2\2\u075b"+
		"\u0759\3\2\2\2\u075c_\3\2\2\2\u075d\u075f\7z\2\2\u075e\u075d\3\2\2\2\u075e"+
		"\u075f\3\2\2\2\u075f\u0760\3\2\2\2\u0760\u0762\7\u0100\2\2\u0761\u075e"+
		"\3\2\2\2\u0761\u0762\3\2\2\2\u0762\u0765\3\2\2\2\u0763\u0764\7\u0116\2"+
		"\2\u0764\u0766\t\b\2\2\u0765\u0763\3\2\2\2\u0765\u0766\3\2\2\2\u0766a"+
		"\3\2\2\2\u0767\u0768\t\t\2\2\u0768\u0769\t\n\2\2\u0769c\3\2\2\2\u076a"+
		"\u076c\5P)\2\u076b\u076a\3\2\2\2\u076b\u076c\3\2\2\2\u076c\u076d\3\2\2"+
		"\2\u076d\u076e\5f\64\2\u076e\u076f\5`\61\2\u076fe\3\2\2\2\u0770\u079e"+
		"\5T+\2\u0771\u0772\7R\2\2\u0772\u0773\5\u02e8\u0175\2\u0773\u0774\5\\"+
		"/\2\u0774\u079e\3\2\2\2\u0775\u0776\5\u02f0\u0179\2\u0776\u0777\5\u02e8"+
		"\u0175\2\u0777\u0778\5\\/\2\u0778\u079e\3\2\2\2\u0779\u077c\7\u00de\2"+
		"\2\u077a\u077b\7n\2\2\u077b\u077d\5\u040c\u0207\2\u077c\u077a\3\2\2\2"+
		"\u077c\u077d\3\2\2\2\u077d\u077e\3\2\2\2\u077e\u077f\7#\2\2\u077f\u0780"+
		"\5j\66\2\u0780\u0781\7$\2\2\u0781\u0783\5\\/\2\u0782\u0784\5h\65\2\u0783"+
		"\u0782\3\2\2\2\u0783\u0784\3\2\2\2\u0784\u079e\3\2\2\2\u0785\u0786\7S"+
		"\2\2\u0786\u0787\7T\2\2\u0787\u0788\5\u02e8\u0175\2\u0788\u0789\7\u00ed"+
		"\2\2\u0789\u078b\5\u02de\u0170\2\u078a\u078c\5\u02e8\u0175\2\u078b\u078a"+
		"\3\2\2\2\u078b\u078c\3\2\2\2\u078c\u0793\3\2\2\2\u078d\u078e\7\u011d\2"+
		"\2\u078e\u0794\7h\2\2\u078f\u0790\7\u011d\2\2\u0790\u0794\7\u0128\2\2"+
		"\u0791\u0792\7\u011d\2\2\u0792\u0794\7\u0138\2\2\u0793\u078d\3\2\2\2\u0793"+
		"\u078f\3\2\2\2\u0793\u0791\3\2\2\2\u0793\u0794\3\2\2\2\u0794\u079a\3\2"+
		"\2\2\u0795\u0796\7q\2\2\u0796\u0797\t\6\2\2\u0797\u0799\5^\60\2\u0798"+
		"\u0795\3\2\2\2\u0799\u079c\3\2\2\2\u079a\u0798\3\2\2\2\u079a\u079b\3\2"+
		"\2\2\u079b\u079e\3\2\2\2\u079c\u079a\3\2\2\2\u079d\u0770\3\2\2\2\u079d"+
		"\u0771\3\2\2\2\u079d\u0775\3\2\2\2\u079d\u0779\3\2\2\2\u079d\u0785\3\2"+
		"\2\2\u079eg\3\2\2\2\u079f\u07a0\7o\2\2\u07a0\u07a1\7#\2\2\u07a1\u07a2"+
		"\5\u02fa\u017e\2\u07a2\u07a3\7$\2\2\u07a3i\3\2\2\2\u07a4\u07a9\5l\67\2"+
		"\u07a5\u07a6\7)\2\2\u07a6\u07a8\5l\67\2\u07a7\u07a5\3\2\2\2\u07a8\u07ab"+
		"\3\2\2\2\u07a9\u07a7\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aak\3\2\2\2\u07ab"+
		"\u07a9\3\2\2\2\u07ac\u07ad\5\u03f2\u01fa\2\u07ad\u07ae\7]\2\2\u07ae\u07af"+
		"\5\u0326\u0194\2\u07af\u07b8\3\2\2\2\u07b0\u07b1\5\u03f2\u01fa\2\u07b1"+
		"\u07b2\7]\2\2\u07b2\u07b3\7\u018d\2\2\u07b3\u07b4\7#\2\2\u07b4\u07b5\5"+
		"\u0326\u0194\2\u07b5\u07b6\7$\2\2\u07b6\u07b8\3\2\2\2\u07b7\u07ac\3\2"+
		"\2\2\u07b7\u07b0\3\2\2\2\u07b8m\3\2\2\2\u07b9\u07ba\7\u0115\2\2\u07ba"+
		"\u07bc\5\u02e6\u0174\2\u07bb\u07b9\3\2\2\2\u07bb\u07bc\3\2\2\2\u07bco"+
		"\3\2\2\2\u07bd\u07be\7\u00e0\2\2\u07be\u07bf\7\u0086\2\2\u07bf\u07c0\5"+
		"x=\2\u07c0\u07c1\7#\2\2\u07c1\u07c2\5r:\2\u07c2\u07c3\7$\2\2\u07c3q\3"+
		"\2\2\2\u07c4\u07c9\5t;\2\u07c5\u07c6\7)\2\2\u07c6\u07c8\5t;\2\u07c7\u07c5"+
		"\3\2\2\2\u07c8\u07cb\3\2\2\2\u07c9\u07c7\3\2\2\2\u07c9\u07ca\3\2\2\2\u07ca"+
		"s\3\2\2\2\u07cb\u07c9\3\2\2\2\u07cc\u07cf\5\u034c\u01a7\2\u07cd\u07ce"+
		"\7\u00f7\2\2\u07ce\u07d0\5\u03cc\u01e7\2\u07cf\u07cd\3\2\2\2\u07cf\u07d0"+
		"\3\2\2\2\u07d0\u07d2\3\2\2\2\u07d1\u07d3\5\u03cc\u01e7\2\u07d2\u07d1\3"+
		"\2\2\2\u07d2\u07d3\3\2\2\2\u07d3\u07e7\3\2\2\2\u07d4\u07d5\7#\2\2\u07d5"+
		"\u07d6\5\u02fa\u017e\2\u07d6\u07d9\7$\2\2\u07d7\u07d8\7\u00f7\2\2\u07d8"+
		"\u07da\5\u03cc\u01e7\2\u07d9\u07d7\3\2\2\2\u07d9\u07da\3\2\2\2\u07da\u07dc"+
		"\3\2\2\2\u07db\u07dd\5\u03cc\u01e7\2\u07dc\u07db\3\2\2\2\u07dc\u07dd\3"+
		"\2\2\2\u07dd\u07e7\3\2\2\2\u07de\u07e1\5v<\2\u07df\u07e0\7\u00f7\2\2\u07e0"+
		"\u07e2\5\u03cc\u01e7\2\u07e1\u07df\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07e4"+
		"\3\2\2\2\u07e3\u07e5\5\u03cc\u01e7\2\u07e4\u07e3\3\2\2\2\u07e4\u07e5\3"+
		"\2\2\2\u07e5\u07e7\3\2\2\2\u07e6\u07cc\3\2\2\2\u07e6\u07d4\3\2\2\2\u07e6"+
		"\u07de\3\2\2\2\u07e7u\3\2\2\2\u07e8\u07eb\5\u0344\u01a3\2\u07e9\u07eb"+
		"\5\u036a\u01b6\2\u07ea\u07e8\3\2\2\2\u07ea\u07e9\3\2\2\2\u07ebw\3\2\2"+
		"\2\u07ec\u07ef\5\u02d2\u016a\2\u07ed\u07ef\5\u02d8\u016d\2\u07ee\u07ec"+
		"\3\2\2\2\u07ee\u07ed\3\2\2\2\u07efy\3\2\2\2\u07f0\u07f2\7R\2\2\u07f1\u07f0"+
		"\3\2\2\2\u07f1\u07f2\3\2\2\2\u07f2{\3\2\2\2\u07f3\u07f5\7\u00f9\2\2\u07f4"+
		"\u07f3\3\2\2\2\u07f4\u07f5\3\2\2\2\u07f5}\3\2\2\2\u07f6\u07f8\7\u0124"+
		"\2\2\u07f7\u07f6\3\2\2\2\u07f7\u07f8\3\2\2\2\u07f8\177\3\2\2\2\u07f9\u07fb"+
		"\7\24\2\2\u07fa\u07f9\3\2\2\2\u07fa\u07fb\3\2\2\2\u07fb\u0081\3\2\2\2"+
		"\u07fc\u0805\5\u0094K\2\u07fd\u0805\5\u00aeX\2\u07fe\u0805\5\u00b0Y\2"+
		"\u07ff\u0805\5\u00b2Z\2\u0800\u0801\7L\2\2\u0801\u0802\7H\2\2\u0802\u0805"+
		"\5\u02e4\u0173\2\u0803\u0805\5\u0084C\2\u0804\u07fc\3\2\2\2\u0804\u07fd"+
		"\3\2\2\2\u0804\u07fe\3\2\2\2\u0804\u07ff\3\2\2\2\u0804\u0800\3\2\2\2\u0804"+
		"\u0803\3\2\2\2\u0805\u0083\3\2\2\2\u0806\u0807\7\u01b0\2\2\u0807\u0808"+
		"\7\u00e0\2\2\u0808\u0809\5\u034a\u01a6\2\u0809\u080a\5\6\4\2\u080a\u080f"+
		"\3\2\2\2\u080b\u080c\7\u01c2\2\2\u080c\u080d\7\u00e0\2\2\u080d\u080f\5"+
		"\u034a\u01a6\2\u080e\u0806\3\2\2\2\u080e\u080b\3\2\2\2\u080f\u0085\3\2"+
		"\2\2\u0810\u0816\5\u008aF\2\u0811\u0816\5\u008cG\2\u0812\u0816\5\u008e"+
		"H\2\u0813\u0816\5\u00be`\2\u0814\u0816\5\u0088E\2\u0815\u0810\3\2\2\2"+
		"\u0815\u0811\3\2\2\2\u0815\u0812\3\2\2\2\u0815\u0813\3\2\2\2\u0815\u0814"+
		"\3\2\2\2\u0816\u0087\3\2\2\2\u0817\u0818\7\u01b0\2\2\u0818\u0819\7\u00e0"+
		"\2\2\u0819\u081a\5\u034a\u01a6\2\u081a\u0089\3\2\2\2\u081b\u081c\7\u012c"+
		"\2\2\u081c\u081d\7v\2\2\u081d\u081e\5\u02ec\u0177\2\u081e\u008b\3\2\2"+
		"\2\u081f\u0820\7\u0102\2\2\u0820\u0821\7q\2\2\u0821\u0822\7\u0107\2\2"+
		"\u0822\u0823\5\u040c\u0207\2\u0823\u008d\3\2\2\2\u0824\u0825\7\u0126\2"+
		"\2\u0825\u0826\7\u0086\2\2\u0826\u0828\5\u040e\u0208\2\u0827\u0824\3\2"+
		"\2\2\u0827\u0828\3\2\2\2\u0828\u0829\3\2\2\2\u0829\u082a\7L\2\2\u082a"+
		"\u082b\7\u013b\2\2\u082b\u082d\5\u02e4\u0173\2\u082c\u082e\7\u0199\2\2"+
		"\u082d\u082c\3\2\2\2\u082d\u082e\3\2\2\2\u082e\u008f\3\2\2\2\u082f\u0834"+
		"\5\u0092J\2\u0830\u0831\7)\2\2\u0831\u0833\5\u0092J\2\u0832\u0830\3\2"+
		"\2\2\u0833\u0836\3\2\2\2\u0834\u0832\3\2\2\2\u0834\u0835\3\2\2\2\u0835"+
		"\u0091\3\2\2\2\u0836\u0834\3\2\2\2\u0837\u0839\5\u02de\u0170\2\u0838\u083a"+
		"\7\24\2\2\u0839\u0838\3\2\2\2\u0839\u083a\3\2\2\2\u083a\u0093\3\2\2\2"+
		"\u083b\u0840\5\u0096L\2\u083c\u083d\7)\2\2\u083d\u083f\5\u0096L\2\u083e"+
		"\u083c\3\2\2\2\u083f\u0842\3\2\2\2\u0840\u083e\3\2\2\2\u0840\u0841\3\2"+
		"\2\2\u0841\u0095\3\2\2\2\u0842\u0840\3\2\2\2\u0843\u08b6\5\u0098M\2\u0844"+
		"\u08b6\5\u009aN\2\u0845\u08b6\5\u009cO\2\u0846\u08b6\5\u00a6T\2\u0847"+
		"\u0848\7E\2\2\u0848\u0849\7P\2\2\u0849\u084a\5\u040c\u0207\2\u084a\u084b"+
		"\5`\61\2\u084b\u08b6\3\2\2\2\u084c\u084d\7\u0142\2\2\u084d\u084e\7P\2"+
		"\2\u084e\u08b6\5\u040c\u0207\2\u084f\u0850\7F\2\2\u0850\u0852\7P\2\2\u0851"+
		"\u0853\5\u0488\u0245\2\u0852\u0851\3\2\2\2\u0852\u0853\3\2\2\2\u0853\u0854"+
		"\3\2\2\2\u0854\u0856\5\u040c\u0207\2\u0855\u0857\t\4\2\2\u0856\u0855\3"+
		"\2\2\2\u0856\u0857\3\2\2\2\u0857\u08b6\3\2\2\2\u0858\u0859\t\13\2\2\u0859"+
		"\u085d\7X\2\2\u085a\u085e\5\u040c\u0207\2\u085b\u085e\7\u0081\2\2\u085c"+
		"\u085e\7\u00f2\2\2\u085d\u085a\3\2\2\2\u085d\u085b\3\2\2\2\u085d\u085c"+
		"\3\2\2\2\u085d\u085e\3\2\2\2\u085e\u08b6\3\2\2\2\u085f\u0860\7\u00a6\2"+
		"\2\u0860\u0861\t\f\2\2\u0861\u0862\7X\2\2\u0862\u08b6\5\u040c\u0207\2"+
		"\u0863\u0864\t\13\2\2\u0864\u0865\7\u0132\2\2\u0865\u08b6\5\u040c\u0207"+
		"\2\u0866\u0867\7\u00a6\2\2\u0867\u0868\t\f\2\2\u0868\u0869\7\u0132\2\2"+
		"\u0869\u08b6\5\u040c\u0207\2\u086a\u0871\7\u00a7\2\2\u086b\u0871\7\u00a6"+
		"\2\2\u086c\u086e\7\u00e9\2\2\u086d\u086c\3\2\2\2\u086d\u086e\3\2\2\2\u086e"+
		"\u086f\3\2\2\2\u086f\u0871\7\u010d\2\2\u0870\u086a\3\2\2\2\u0870\u086b"+
		"\3\2\2\2\u0870\u086d\3\2\2\2\u0871\u0872\3\2\2\2\u0872\u0873\7\u00e1\2"+
		"\2\u0873\u0874\7\u00e8\2\2\u0874\u08b6\7\u0133\2\2\u0875\u0876\7\u00f6"+
		"\2\2\u0876\u0877\7q\2\2\u0877\u08b6\5\u02ec\u0177\2\u0878\u0879\7L\2\2"+
		"\u0879\u087a\7\u0144\2\2\u087a\u08b6\7\u00f6\2\2\u087b\u087c\7L\2\2\u087c"+
		"\u087d\t\r\2\2\u087d\u08b6\7\u0123\2\2\u087e\u087f\7L\2\2\u087f\u0880"+
		"\7\u013b\2\2\u0880\u08b6\5\u040c\u0207\2\u0881\u0882\7L\2\2\u0882\u08b6"+
		"\t\16\2\2\u0883\u0884\7L\2\2\u0884\u0885\7#\2\2\u0885\u088a\5\u00aaV\2"+
		"\u0886\u0887\7)\2\2\u0887\u0889\5\u00aaV\2\u0888\u0886\3\2\2\2\u0889\u088c"+
		"\3\2\2\2\u088a\u0888\3\2\2\2\u088a\u088b\3\2\2\2\u088b\u088d\3\2\2\2\u088c"+
		"\u088a\3\2\2\2\u088d\u088e\7$\2\2\u088e\u08b6\3\2\2\2\u088f\u0890\7\u012e"+
		"\2\2\u0890\u0891\7#\2\2\u0891\u0896\5\u00acW\2\u0892\u0893\7)\2\2\u0893"+
		"\u0895\5\u00acW\2\u0894\u0892\3\2\2\2\u0895\u0898\3\2\2\2\u0896\u0894"+
		"\3\2\2\2\u0896\u0897\3\2\2\2\u0897\u0899\3\2\2\2\u0898\u0896\3\2\2\2\u0899"+
		"\u089a\7$\2\2\u089a\u08b6\3\2\2\2\u089b\u089c\7\u0114\2\2\u089c\u08b6"+
		"\5\u02de\u0170\2\u089d\u089e\7\u00e9\2\2\u089e\u089f\7\u0114\2\2\u089f"+
		"\u08b6\5\u02de\u0170\2\u08a0\u08a1\7\u0146\2\2\u08a1\u08b6\5\u0406\u0204"+
		"\2\u08a2\u08a3\7z\2\2\u08a3\u08b6\7\u0146\2\2\u08a4\u08a5\7\u0127\2\2"+
		"\u08a5\u08a9\7v\2\2\u08a6\u08aa\5\u040c\u0207\2\u08a7\u08aa\7\u00ad\2"+
		"\2\u08a8\u08aa\7\u0136\2\2\u08a9\u08a6\3\2\2\2\u08a9\u08a7\3\2\2\2\u08a9"+
		"\u08a8\3\2\2\2\u08aa\u08b6\3\2\2\2\u08ab\u08ac\7\u012d\2\2\u08ac\u08b3"+
		"\7\u010f\2\2\u08ad\u08b4\7\u00a4\2\2\u08ae\u08af\7n\2\2\u08af\u08b0\7"+
		"O\2\2\u08b0\u08b4\5\u02ec\u0177\2\u08b1\u08b4\7h\2\2\u08b2\u08b4\7\u0120"+
		"\2\2\u08b3\u08ad\3\2\2\2\u08b3\u08ae\3\2\2\2\u08b3\u08b1\3\2\2\2\u08b3"+
		"\u08b2\3\2\2\2\u08b4\u08b6\3\2\2\2\u08b5\u0843\3\2\2\2\u08b5\u0844\3\2"+
		"\2\2\u08b5\u0845\3\2\2\2\u08b5\u0846\3\2\2\2\u08b5\u0847\3\2\2\2\u08b5"+
		"\u084c\3\2\2\2\u08b5\u084f\3\2\2\2\u08b5\u0858\3\2\2\2\u08b5\u085f\3\2"+
		"\2\2\u08b5\u0863\3\2\2\2\u08b5\u0866\3\2\2\2\u08b5\u0870\3\2\2\2\u08b5"+
		"\u0875\3\2\2\2\u08b5\u0878\3\2\2\2\u08b5\u087b\3\2\2\2\u08b5\u087e\3\2"+
		"\2\2\u08b5\u0881\3\2\2\2\u08b5\u0883\3\2\2\2\u08b5\u088f\3\2\2\2\u08b5"+
		"\u089b\3\2\2\2\u08b5\u089d\3\2\2\2\u08b5\u08a0\3\2\2\2\u08b5\u08a2\3\2"+
		"\2\2\u08b5\u08a4\3\2\2\2\u08b5\u08ab\3\2\2\2\u08b6\u0097\3\2\2\2\u08b7"+
		"\u08b9\7K\2\2\u08b8\u08ba\7N\2\2\u08b9\u08b8\3\2\2\2\u08b9\u08ba\3\2\2"+
		"\2\u08ba\u08bc\3\2\2\2\u08bb\u08bd\5\u0486\u0244\2\u08bc\u08bb\3\2\2\2"+
		"\u08bc\u08bd\3\2\2\2\u08bd\u08be\3\2\2\2\u08be\u08bf\5L\'\2\u08bf\u0099"+
		"\3\2\2\2\u08c0\u08c2\7F\2\2\u08c1\u08c3\7N\2\2\u08c2\u08c1\3\2\2\2\u08c2"+
		"\u08c3\3\2\2\2\u08c3\u08c5\3\2\2\2\u08c4\u08c6\5\u0488\u0245\2\u08c5\u08c4"+
		"\3\2\2\2\u08c5\u08c6\3\2\2\2\u08c6\u08c7\3\2\2\2\u08c7\u08c9\5\u02e0\u0171"+
		"\2\u08c8\u08ca\t\4\2\2\u08c9\u08c8\3\2\2\2\u08c9\u08ca\3\2\2\2\u08ca\u009b"+
		"\3\2\2\2\u08cb\u08ce\5\u009eP\2\u08cc\u08cd\7L\2\2\u08cd\u08cf\7\u00fd"+
		"\2\2\u08ce\u08cc\3\2\2\2\u08ce\u08cf\3\2\2\2\u08cf\u08d0\3\2\2\2\u08d0"+
		"\u08d1\7\u00ba\2\2\u08d1\u08d3\5\u0404\u0203\2\u08d2\u08d4\5\u03ca\u01e6"+
		"\2\u08d3\u08d2\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4\u08d7\3\2\2\2\u08d5\u08d6"+
		"\7n\2\2\u08d6\u08d8\5\u02fa\u017e\2\u08d7\u08d5\3\2\2\2\u08d7\u08d8\3"+
		"\2\2\2\u08d8\u091c\3\2\2\2\u08d9\u08da\5\u009eP\2\u08da\u08db\7L\2\2\u08db"+
		"\u08dc\7\u00a4\2\2\u08dc\u08dd\5\u02fa\u017e\2\u08dd\u091c\3\2\2\2\u08de"+
		"\u08df\5\u009eP\2\u08df\u08e0\7F\2\2\u08e0\u08e1\7\u00a4\2\2\u08e1\u091c"+
		"\3\2\2\2\u08e2\u08e3\5\u009eP\2\u08e3\u08e4\t\17\2\2\u08e4\u08e5\7z\2"+
		"\2\u08e5\u08e6\7{\2\2\u08e6\u091c\3\2\2\2\u08e7\u08e8\5\u009eP\2\u08e8"+
		"\u08e9\7K\2\2\u08e9\u08ed\7\u00e6\2\2\u08ea\u08ee\7\u00e3\2\2\u08eb\u08ec"+
		"\7\u0086\2\2\u08ec\u08ee\7\u00a4\2\2\u08ed\u08ea\3\2\2\2\u08ed\u08eb\3"+
		"\2\2\2\u08ee\u08ef\3\2\2\2\u08ef\u08f0\7p\2\2\u08f0\u08f5\7\u010f\2\2"+
		"\u08f1\u08f2\7#\2\2\u08f2\u08f3\5X-\2\u08f3\u08f4\7$\2\2\u08f4\u08f6\3"+
		"\2\2\2\u08f5\u08f1\3\2\2\2\u08f5\u08f6\3\2\2\2\u08f6\u091c\3\2\2\2\u08f7"+
		"\u08f8\5\u009eP\2\u08f8\u08fc\5\u00a0Q\2\u08f9\u08fb\5\u00a0Q\2\u08fa"+
		"\u08f9\3\2\2\2\u08fb\u08fe\3\2\2\2\u08fc\u08fa\3\2\2\2\u08fc\u08fd\3\2"+
		"\2\2\u08fd\u091c\3\2\2\2\u08fe\u08fc\3\2\2\2\u08ff\u0900\5\u009eP\2\u0900"+
		"\u0901\7F\2\2\u0901\u0903\7\u010f\2\2\u0902\u0904\5\u0488\u0245\2\u0903"+
		"\u0902\3\2\2\2\u0903\u0904\3\2\2\2\u0904\u091c\3\2\2\2\u0905\u0906\5\u009e"+
		"P\2\u0906\u0907\7L\2\2\u0907\u0908\7\u0139\2\2\u0908\u0909\7\u0230\2\2"+
		"\u0909\u091c\3\2\2\2\u090a\u090b\5\u009eP\2\u090b\u090c\7L\2\2\u090c\u090d"+
		"\7#\2\2\u090d\u090e\5\u00a2R\2\u090e\u090f\7$\2\2\u090f\u091c\3\2\2\2"+
		"\u0910\u0911\5\u009eP\2\u0911\u0912\7\u012e\2\2\u0912\u0913\7#\2\2\u0913"+
		"\u0914\5\u00a2R\2\u0914\u0915\7$\2\2\u0915\u091c\3\2\2\2\u0916\u0917\5"+
		"\u009eP\2\u0917\u0918\7L\2\2\u0918\u0919\7\u013a\2\2\u0919\u091a\t\20"+
		"\2\2\u091a\u091c\3\2\2\2\u091b\u08cb\3\2\2\2\u091b\u08d9\3\2\2\2\u091b"+
		"\u08de\3\2\2\2\u091b\u08e2\3\2\2\2\u091b\u08e7\3\2\2\2\u091b\u08f7\3\2"+
		"\2\2\u091b\u08ff\3\2\2\2\u091b\u0905\3\2\2\2\u091b\u090a\3\2\2\2\u091b"+
		"\u0910\3\2\2\2\u091b\u0916\3\2\2\2\u091c\u009d\3\2\2\2\u091d\u091f\7E"+
		"\2\2\u091e\u0920\7N\2\2\u091f\u091e\3\2\2\2\u091f\u0920\3\2\2\2\u0920"+
		"\u0921\3\2\2\2\u0921\u0922\5\u02e0\u0171\2\u0922\u009f\3\2\2\2\u0923\u092b"+
		"\7L\2\2\u0924\u0928\7\u00e6\2\2\u0925\u0929\7\u00e3\2\2\u0926\u0927\7"+
		"\u0086\2\2\u0927\u0929\7\u00a4\2\2\u0928\u0925\3\2\2\2\u0928\u0926\3\2"+
		"\2\2\u0929\u092c\3\2\2\2\u092a\u092c\5Z.\2\u092b\u0924\3\2\2\2\u092b\u092a"+
		"\3\2\2\2\u092c\u0935\3\2\2\2\u092d\u0932\7\u012f\2\2\u092e\u0930\7]\2"+
		"\2\u092f\u092e\3\2\2\2\u092f\u0930\3\2\2\2\u0930\u0931\3\2\2\2\u0931\u0933"+
		"\7\u0230\2\2\u0932\u092f\3\2\2\2\u0932\u0933\3\2\2\2\u0933\u0935\3\2\2"+
		"\2\u0934\u0923\3\2\2\2\u0934\u092d\3\2\2\2\u0935\u00a1\3\2\2\2\u0936\u093b"+
		"\5\u00a4S\2\u0937\u0938\7)\2\2\u0938\u093a\5\u00a4S\2\u0939\u0937\3\2"+
		"\2\2\u093a\u093d\3\2\2\2\u093b\u0939\3\2\2\2\u093b\u093c\3\2\2\2\u093c"+
		"\u00a3\3\2\2\2\u093d\u093b\3\2\2\2\u093e\u093f\7\u022e\2\2\u093f\u0940"+
		"\7\33\2\2\u0940\u0941\5\u02fa\u017e\2\u0941\u00a5\3\2\2\2\u0942\u0949"+
		"\7K\2\2\u0943\u0946\5d\63\2\u0944\u0945\7z\2\2\u0945\u0947\7\u0141\2\2"+
		"\u0946\u0944\3\2\2\2\u0946\u0947\3\2\2\2\u0947\u094a\3\2\2\2\u0948\u094a"+
		"\5\u00a8U\2\u0949\u0943\3\2\2\2\u0949\u0948\3\2\2\2\u094a\u00a7\3\2\2"+
		"\2\u094b\u094c\7P\2\2\u094c\u094e\5\u040c\u0207\2\u094d\u094b\3\2\2\2"+
		"\u094d\u094e\3\2\2\2\u094e\u0951\3\2\2\2\u094f\u0952\7R\2\2\u0950\u0952"+
		"\5\u02f0\u0179\2\u0951\u094f\3\2\2\2\u0951\u0950\3\2\2\2\u0952\u0953\3"+
		"\2\2\2\u0953\u0954\7n\2\2\u0954\u0955\7O\2\2\u0955\u0956\5\u02ec\u0177"+
		"\2\u0956\u0957\5`\61\2\u0957\u00a9\3\2\2\2\u0958\u0959\5\u00acW\2\u0959"+
		"\u095a\7\33\2\2\u095a\u095b\5\u02fa\u017e\2\u095b\u00ab\3\2\2\2\u095c"+
		"\u095d\7\u022e\2\2\u095d\u00ad\3\2\2\2\u095e\u0960\7\u012c\2\2\u095f\u0961"+
		"\7N\2\2\u0960\u095f\3\2\2\2\u0960\u0961\3\2\2\2\u0961\u0962\3\2\2\2\u0962"+
		"\u0963\5\u02e0\u0171\2\u0963\u0964\7v\2\2\u0964\u0965\5\u02e0\u0171\2"+
		"\u0965\u00af\3\2\2\2\u0966\u0967\7\u012c\2\2\u0967\u0968\7P\2\2\u0968"+
		"\u0969\5\u040c\u0207\2\u0969\u096a\7v\2\2\u096a\u096b\5\u040c\u0207\2"+
		"\u096b\u00b1\3\2\2\2\u096c\u096d\7\u012c\2\2\u096d\u096e\7v\2\2\u096e"+
		"\u096f\5\u02d2\u016a\2\u096f\u00b3\3\2\2\2\u0970\u0975\5\u02ec\u0177\2"+
		"\u0971\u0972\7)\2\2\u0972\u0974\5\u02ec\u0177\2\u0973\u0971\3\2\2\2\u0974"+
		"\u0977\3\2\2\2\u0975\u0973\3\2\2\2\u0975\u0976\3\2\2\2\u0976\u00b5\3\2"+
		"\2\2\u0977\u0975\3\2\2\2\u0978\u0979\7E\2\2\u0979\u097a\7\u00fe\2\2\u097a"+
		"\u097b\5\u0418\u020d\2\u097b\u097c\5\u00b8]\2\u097c\u00b7\3\2\2\2\u097d"+
		"\u097f\7]\2\2\u097e\u097d\3\2\2\2\u097e\u097f\3\2\2\2\u097f\u0981\3\2"+
		"\2\2\u0980\u0982\5\u00ba^\2\u0981\u0980\3\2\2\2\u0981\u0982\3\2\2\2\u0982"+
		"\u098e\3\2\2\2\u0983\u0984\7\u012c\2\2\u0984\u0985\7v\2\2\u0985\u098e"+
		"\5\u0418\u020d\2\u0986\u0987\7\u0127\2\2\u0987\u0988\7v\2\2\u0988\u098e"+
		"\5\u041a\u020e\2\u0989\u098a\7L\2\2\u098a\u098b\7\u013b\2\2\u098b\u098e"+
		"\5\u02e4\u0173\2\u098c\u098e\5\u0464\u0233\2\u098d\u097e\3\2\2\2\u098d"+
		"\u0983\3\2\2\2\u098d\u0986\3\2\2\2\u098d\u0989\3\2\2\2\u098d\u098c\3\2"+
		"\2\2\u098e\u00b9\3\2\2\2\u098f\u0991\5\u00bc_\2\u0990\u098f\3\2\2\2\u0991"+
		"\u0992\3\2\2\2\u0992\u0990\3\2\2\2\u0992\u0993\3\2\2\2\u0993\u00bb\3\2"+
		"\2\2\u0994\u0996\5\64\33\2\u0995\u0997\7\33\2\2\u0996\u0995\3\2\2\2\u0996"+
		"\u0997\3\2\2\2\u0997\u0998\3\2\2\2\u0998\u0999\5\u0410\u0209\2\u0999\u09a7"+
		"\3\2\2\2\u099a\u099c\5\64\33\2\u099b\u099d\7\33\2\2\u099c\u099b\3\2\2"+
		"\2\u099c\u099d\3\2\2\2\u099d\u099e\3\2\2\2\u099e\u099f\5\u0412\u020a\2"+
		"\u099f\u09a7\3\2\2\2\u09a0\u09a2\5\64\33\2\u09a1\u09a3\7\33\2\2\u09a2"+
		"\u09a1\3\2\2\2\u09a2\u09a3\3\2\2\2\u09a3\u09a4\3\2\2\2\u09a4\u09a5\7\u00a4"+
		"\2\2\u09a5\u09a7\3\2\2\2\u09a6\u0994\3\2\2\2\u09a6\u099a\3\2\2\2\u09a6"+
		"\u09a0\3\2\2\2\u09a7\u00bd\3\2\2\2\u09a8\u09ad\5\u00c0a\2\u09a9\u09aa"+
		"\7)\2\2\u09aa\u09ac\5\u00c0a\2\u09ab\u09a9\3\2\2\2\u09ac\u09af\3\2\2\2"+
		"\u09ad\u09ab\3\2\2\2\u09ad\u09ae\3\2\2\2\u09ae\u00bf\3\2\2\2\u09af\u09ad"+
		"\3\2\2\2\u09b0\u09b2\7K\2\2\u09b1\u09b3\7N\2\2\u09b2\u09b1\3\2\2\2\u09b2"+
		"\u09b3\3\2\2\2\u09b3\u09b5\3\2\2\2\u09b4\u09b6\5\u0486\u0244\2\u09b5\u09b4"+
		"\3\2\2\2\u09b5\u09b6\3\2\2\2\u09b6\u09b7\3\2\2\2\u09b7\u0abd\5\u0428\u0215"+
		"\2\u09b8\u09ba\7E\2\2\u09b9\u09bb\7N\2\2\u09ba\u09b9\3\2\2\2\u09ba\u09bb"+
		"\3\2\2\2\u09bb\u09bc\3\2\2\2\u09bc\u09bd\5\u034c\u01a7\2\u09bd\u09be\5"+
		"\u00d8m\2\u09be\u0abd\3\2\2\2\u09bf\u09c1\7E\2\2\u09c0\u09c2\7N\2\2\u09c1"+
		"\u09c0\3\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u09c3\3\2\2\2\u09c3\u09c4\5\u034c"+
		"\u01a7\2\u09c4\u09c5\7F\2\2\u09c5\u09c6\7z\2\2\u09c6\u09c7\7{\2\2\u09c7"+
		"\u0abd\3\2\2\2\u09c8\u09ca\7E\2\2\u09c9\u09cb\7N\2\2\u09ca\u09c9\3\2\2"+
		"\2\u09ca\u09cb\3\2\2\2\u09cb\u09cc\3\2\2\2\u09cc\u09cd\5\u034c\u01a7\2"+
		"\u09cd\u09ce\7L\2\2\u09ce\u09cf\7z\2\2\u09cf\u09d0\7{\2\2\u09d0\u0abd"+
		"\3\2\2\2\u09d1\u09d3\7E\2\2\u09d2\u09d4\7N\2\2\u09d3\u09d2\3\2\2\2\u09d3"+
		"\u09d4\3\2\2\2\u09d4\u09d5\3\2\2\2\u09d5\u09d6\5\u034c\u01a7\2\u09d6\u09d7"+
		"\7L\2\2\u09d7\u09d8\7\u0139\2\2\u09d8\u09d9\5\u0410\u0209\2\u09d9\u0abd"+
		"\3\2\2\2\u09da\u09dc\7E\2\2\u09db\u09dd\7N\2\2\u09dc\u09db\3\2\2\2\u09dc"+
		"\u09dd\3\2\2\2\u09dd\u09de\3\2\2\2\u09de\u09df\7\u0230\2\2\u09df\u09e0"+
		"\7L\2\2\u09e0\u09e1\7\u0139\2\2\u09e1\u0abd\5\u0410\u0209\2\u09e2\u09e4"+
		"\7E\2\2\u09e3\u09e5\7N\2\2\u09e4\u09e3\3\2\2\2\u09e4\u09e5\3\2\2\2\u09e5"+
		"\u09e6\3\2\2\2\u09e6\u09e7\5\u034c\u01a7\2\u09e7\u09e8\7L\2\2\u09e8\u09e9"+
		"\5\u03f8\u01fd\2\u09e9\u0abd\3\2\2\2\u09ea\u09ec\7E\2\2\u09eb\u09ed\7"+
		"N\2\2\u09ec\u09eb\3\2\2\2\u09ec\u09ed\3\2\2\2\u09ed\u09ee\3\2\2\2\u09ee"+
		"\u09ef\5\u034c\u01a7\2\u09ef\u09f0\7\u012e\2\2\u09f0\u09f1\5\u03f8\u01fd"+
		"\2\u09f1\u0abd\3\2\2\2\u09f2\u09f4\7E\2\2\u09f3\u09f5\7N\2\2\u09f4\u09f3"+
		"\3\2\2\2\u09f4\u09f5\3\2\2\2\u09f5\u09f6\3\2\2\2\u09f6\u09f7\5\u034c\u01a7"+
		"\2\u09f7\u09f8\7L\2\2\u09f8\u09f9\7\u013a\2\2\u09f9\u09fa\5\u034c\u01a7"+
		"\2\u09fa\u0abd\3\2\2\2\u09fb\u09fd\7E\2\2\u09fc\u09fe\7N\2\2\u09fd\u09fc"+
		"\3\2\2\2\u09fd\u09fe\3\2\2\2\u09fe\u09ff\3\2\2\2\u09ff\u0a00\5\u034c\u01a7"+
		"\2\u0a00\u0a01\7K\2\2\u0a01\u0a02\7\u00e6\2\2\u0a02\u0a03\5\u0438\u021d"+
		"\2\u0a03\u0a04\7p\2\2\u0a04\u0a06\7\u010f\2\2\u0a05\u0a07\5\u0430\u0219"+
		"\2\u0a06\u0a05\3\2\2\2\u0a06\u0a07\3\2\2\2\u0a07\u0abd\3\2\2\2\u0a08\u0a0a"+
		"\7E\2\2\u0a09\u0a0b\7N\2\2\u0a0a\u0a09\3\2\2\2\u0a0a\u0a0b\3\2\2\2\u0a0b"+
		"\u0a0c\3\2\2\2\u0a0c\u0a0d\5\u034c\u01a7\2\u0a0d\u0a0e\5\u00d4k\2\u0a0e"+
		"\u0abd\3\2\2\2\u0a0f\u0a11\7E\2\2\u0a10\u0a12\7N\2\2\u0a11\u0a10\3\2\2"+
		"\2\u0a11\u0a12\3\2\2\2\u0a12\u0a13\3\2\2\2\u0a13\u0a14\5\u034c\u01a7\2"+
		"\u0a14\u0a15\7F\2\2\u0a15\u0a16\7\u010f\2\2\u0a16\u0abd\3\2\2\2\u0a17"+
		"\u0a19\7E\2\2\u0a18\u0a1a\7N\2\2\u0a19\u0a18\3\2\2\2\u0a19\u0a1a\3\2\2"+
		"\2\u0a1a\u0a1b\3\2\2\2\u0a1b\u0a1c\5\u034c\u01a7\2\u0a1c\u0a1d\7F\2\2"+
		"\u0a1d\u0a1e\7\u010f\2\2\u0a1e\u0a1f\5\u0488\u0245\2\u0a1f\u0abd\3\2\2"+
		"\2\u0a20\u0a22\7F\2\2\u0a21\u0a23\7N\2\2\u0a22\u0a21\3\2\2\2\u0a22\u0a23"+
		"\3\2\2\2\u0a23\u0a24\3\2\2\2\u0a24\u0a25\5\u0488\u0245\2\u0a25\u0a27\5"+
		"\u034c\u01a7\2\u0a26\u0a28\5\u00ceh\2\u0a27\u0a26\3\2\2\2\u0a27\u0a28"+
		"\3\2\2\2\u0a28\u0abd\3\2\2\2\u0a29\u0a2b\7F\2\2\u0a2a\u0a2c\7N\2\2\u0a2b"+
		"\u0a2a\3\2\2\2\u0a2b\u0a2c\3\2\2\2\u0a2c\u0a2d\3\2\2\2\u0a2d\u0a2f\5\u034c"+
		"\u01a7\2\u0a2e\u0a30\5\u00ceh\2\u0a2f\u0a2e\3\2\2\2\u0a2f\u0a30\3\2\2"+
		"\2\u0a30\u0abd\3\2\2\2\u0a31\u0a33\7E\2\2\u0a32\u0a34\7N\2\2\u0a33\u0a32"+
		"\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u0a37\5\u034c\u01a7"+
		"\2\u0a36\u0a38\5\u00d2j\2\u0a37\u0a36\3\2\2\2\u0a37\u0a38\3\2\2\2\u0a38"+
		"\u0a39\3\2\2\2\u0a39\u0a3a\7\u00ba\2\2\u0a3a\u0a3c\5\u036c\u01b7\2\u0a3b"+
		"\u0a3d\5\u03ca\u01e6\2\u0a3c\u0a3b\3\2\2\2\u0a3c\u0a3d\3\2\2\2\u0a3d\u0a3f"+
		"\3\2\2\2\u0a3e\u0a40\5\u00d0i\2\u0a3f\u0a3e\3\2\2\2\u0a3f\u0a40\3\2\2"+
		"\2\u0a40\u0abd\3\2\2\2\u0a41\u0a43\7E\2\2\u0a42\u0a44\7N\2\2\u0a43\u0a42"+
		"\3\2\2\2\u0a43\u0a44\3\2\2\2\u0a44\u0a45\3\2\2\2\u0a45\u0a46\5\u034c\u01a7"+
		"\2\u0a46\u0a47\5\u00c6d\2\u0a47\u0abd\3\2\2\2\u0a48\u0a49\7K\2\2\u0a49"+
		"\u0abd\5d\63\2\u0a4a\u0a4b\7E\2\2\u0a4b\u0a4c\7P\2\2\u0a4c\u0a4d\5\u02e4"+
		"\u0173\2\u0a4d\u0a4e\5\u00c2b\2\u0a4e\u0abd\3\2\2\2\u0a4f\u0a50\7\u0142"+
		"\2\2\u0a50\u0a51\7P\2\2\u0a51\u0abd\5\u02e4\u0173\2\u0a52\u0a53\7F\2\2"+
		"\u0a53\u0a54\7P\2\2\u0a54\u0a55\5\u0488\u0245\2\u0a55\u0a57\5\u02e4\u0173"+
		"\2\u0a56\u0a58\5\u00ceh\2\u0a57\u0a56\3\2\2\2\u0a57\u0a58\3\2\2\2\u0a58"+
		"\u0abd\3\2\2\2\u0a59\u0a5a\7F\2\2\u0a5a\u0a5b\7P\2\2\u0a5b\u0a5d\5\u02e4"+
		"\u0173\2\u0a5c\u0a5e\5\u00ceh\2\u0a5d\u0a5c\3\2\2\2\u0a5d\u0a5e\3\2\2"+
		"\2\u0a5e\u0abd\3\2\2\2\u0a5f\u0a60\7L\2\2\u0a60\u0a61\7\u0144\2\2\u0a61"+
		"\u0abd\7\u0123\2\2\u0a62\u0a63\7\u00f6\2\2\u0a63\u0a64\7q\2\2\u0a64\u0abd"+
		"\5\u02e4\u0173\2\u0a65\u0a66\7L\2\2\u0a66\u0a67\7\u0144\2\2\u0a67\u0abd"+
		"\7\u00f6\2\2\u0a68\u0a69\7L\2\2\u0a69\u0abd\7\u011b\2\2\u0a6a\u0a6b\7"+
		"L\2\2\u0a6b\u0abd\7\u013f\2\2\u0a6c\u0a6d\7\u00a6\2\2\u0a6d\u0a6e\7X\2"+
		"\2\u0a6e\u0abd\5\u02e4\u0173\2\u0a6f\u0a70\7\u00a6\2\2\u0a70\u0a71\7\u00e3"+
		"\2\2\u0a71\u0a72\7X\2\2\u0a72\u0abd\5\u02e4\u0173\2\u0a73\u0a74\7\u00a6"+
		"\2\2\u0a74\u0a75\7\u012d\2\2\u0a75\u0a76\7X\2\2\u0a76\u0abd\5\u02e4\u0173"+
		"\2\u0a77\u0a78\7\u00a6\2\2\u0a78\u0a79\7X\2\2\u0a79\u0abd\7\u0081\2\2"+
		"\u0a7a\u0a7b\7\u00a6\2\2\u0a7b\u0a7c\7X\2\2\u0a7c\u0abd\7\u00f2\2\2\u0a7d"+
		"\u0a7e\7\u00a7\2\2\u0a7e\u0a7f\7X\2\2\u0a7f\u0abd\5\u02e4\u0173\2\u0a80"+
		"\u0a81\7\u00a7\2\2\u0a81\u0a82\7X\2\2\u0a82\u0abd\7\u0081\2\2\u0a83\u0a84"+
		"\7\u00a7\2\2\u0a84\u0a85\7X\2\2\u0a85\u0abd\7\u00f2\2\2\u0a86\u0a87\7"+
		"\u00a6\2\2\u0a87\u0a88\7\u0132\2\2\u0a88\u0abd\5\u02e4\u0173\2\u0a89\u0a8a"+
		"\7\u00a6\2\2\u0a8a\u0a8b\7\u00e3\2\2\u0a8b\u0a8c\7\u0132\2\2\u0a8c\u0abd"+
		"\5\u02e4\u0173\2\u0a8d\u0a8e\7\u00a6\2\2\u0a8e\u0a8f\7\u012d\2\2\u0a8f"+
		"\u0a90\7\u0132\2\2\u0a90\u0abd\5\u02e4\u0173\2\u0a91\u0a92\7\u00a7\2\2"+
		"\u0a92\u0a93\7\u0132\2\2\u0a93\u0abd\5\u02e4\u0173\2\u0a94\u0a95\7\u0114"+
		"\2\2\u0a95\u0abd\5\u034a\u01a6\2\u0a96\u0a97\7\u00e9\2\2\u0a97\u0a98\7"+
		"\u0114\2\2\u0a98\u0abd\5\u034a\u01a6\2\u0a99\u0a9a\7\u0146\2\2\u0a9a\u0abd"+
		"\5\u03cc\u01e7\2\u0a9b\u0a9c\7z\2\2\u0a9c\u0abd\7\u0146\2\2\u0a9d\u0a9e"+
		"\7\u0127\2\2\u0a9e\u0a9f\7v\2\2\u0a9f\u0abd\5\u041a\u020e\2\u0aa0\u0aa1"+
		"\7L\2\2\u0aa1\u0aa2\7\u013b\2\2\u0aa2\u0abd\5\u02e4\u0173\2\u0aa3\u0aa4"+
		"\7L\2\2\u0aa4\u0abd\5\u03f8\u01fd\2\u0aa5\u0aa6\7\u012e\2\2\u0aa6\u0abd"+
		"\5\u03f8\u01fd\2\u0aa7\u0aa8\7\u012d\2\2\u0aa8\u0aa9\7\u010f\2\2\u0aa9"+
		"\u0abd\5\u0454\u022b\2\u0aaa\u0aab\7\u00a6\2\2\u0aab\u0aac\7\u00e1\2\2"+
		"\u0aac\u0aad\7\u00e8\2\2\u0aad\u0abd\7\u0133\2\2\u0aae\u0aaf\7\u00a7\2"+
		"\2\u0aaf\u0ab0\7\u00e1\2\2\u0ab0\u0ab1\7\u00e8\2\2\u0ab1\u0abd\7\u0133"+
		"\2\2\u0ab2\u0ab3\7\u010d\2\2\u0ab3\u0ab4\7\u00e1\2\2\u0ab4\u0ab5\7\u00e8"+
		"\2\2\u0ab5\u0abd\7\u0133\2\2\u0ab6\u0ab7\7\u00e9\2\2\u0ab7\u0ab8\7\u010d"+
		"\2\2\u0ab8\u0ab9\7\u00e1\2\2\u0ab9\u0aba\7\u00e8\2\2\u0aba\u0abd\7\u0133"+
		"\2\2\u0abb\u0abd\5\u00c6d\2\u0abc\u09b0\3\2\2\2\u0abc\u09b8\3\2\2\2\u0abc"+
		"\u09bf\3\2\2\2\u0abc\u09c8\3\2\2\2\u0abc\u09d1\3\2\2\2\u0abc\u09da\3\2"+
		"\2\2\u0abc\u09e2\3\2\2\2\u0abc\u09ea\3\2\2\2\u0abc\u09f2\3\2\2\2\u0abc"+
		"\u09fb\3\2\2\2\u0abc\u0a08\3\2\2\2\u0abc\u0a0f\3\2\2\2\u0abc\u0a17\3\2"+
		"\2\2\u0abc\u0a20\3\2\2\2\u0abc\u0a29\3\2\2\2\u0abc\u0a31\3\2\2\2\u0abc"+
		"\u0a41\3\2\2\2\u0abc\u0a48\3\2\2\2\u0abc\u0a4a\3\2\2\2\u0abc\u0a4f\3\2"+
		"\2\2\u0abc\u0a52\3\2\2\2\u0abc\u0a59\3\2\2\2\u0abc\u0a5f\3\2\2\2\u0abc"+
		"\u0a62\3\2\2\2\u0abc\u0a65\3\2\2\2\u0abc\u0a68\3\2\2\2\u0abc\u0a6a\3\2"+
		"\2\2\u0abc\u0a6c\3\2\2\2\u0abc\u0a6f\3\2\2\2\u0abc\u0a73\3\2\2\2\u0abc"+
		"\u0a77\3\2\2\2\u0abc\u0a7a\3\2\2\2\u0abc\u0a7d\3\2\2\2\u0abc\u0a80\3\2"+
		"\2\2\u0abc\u0a83\3\2\2\2\u0abc\u0a86\3\2\2\2\u0abc\u0a89\3\2\2\2\u0abc"+
		"\u0a8d\3\2\2\2\u0abc\u0a91\3\2\2\2\u0abc\u0a94\3\2\2\2\u0abc\u0a96\3\2"+
		"\2\2\u0abc\u0a99\3\2\2\2\u0abc\u0a9b\3\2\2\2\u0abc\u0a9d\3\2\2\2\u0abc"+
		"\u0aa0\3\2\2\2\u0abc\u0aa3\3\2\2\2\u0abc\u0aa5\3\2\2\2\u0abc\u0aa7\3\2"+
		"\2\2\u0abc\u0aaa\3\2\2\2\u0abc\u0aae\3\2\2\2\u0abc\u0ab2\3\2\2\2\u0abc"+
		"\u0ab6\3\2\2\2\u0abc\u0abb\3\2\2\2\u0abd\u00c1\3\2\2\2\u0abe\u0ac0\5\u00c4"+
		"c\2\u0abf\u0abe\3\2\2\2\u0ac0\u0ac3\3\2\2\2\u0ac1\u0abf\3\2\2\2\u0ac1"+
		"\u0ac2\3\2\2\2\u0ac2\u00c3\3\2\2\2\u0ac3\u0ac1\3\2\2\2\u0ac4\u0ac5\7z"+
		"\2\2\u0ac5\u0ad0\7\u0100\2\2\u0ac6\u0ad0\7\u0100\2\2\u0ac7\u0ac8\7\u0116"+
		"\2\2\u0ac8\u0ad0\7\u0110\2\2\u0ac9\u0aca\7\u0116\2\2\u0aca\u0ad0\7\u0101"+
		"\2\2\u0acb\u0acc\7z\2\2\u0acc\u0ad0\7\u0141\2\2\u0acd\u0ace\7\u00e9\2"+
		"\2\u0ace\u0ad0\7\u0114\2\2\u0acf\u0ac4\3\2\2\2\u0acf\u0ac6\3\2\2\2\u0acf"+
		"\u0ac7\3\2\2\2\u0acf\u0ac9\3\2\2\2\u0acf\u0acb\3\2\2\2\u0acf\u0acd\3\2"+
		"\2\2\u0ad0\u00c5\3\2\2\2\u0ad1\u0ad2\7\u01fd\2\2\u0ad2\u0ad3\7#\2\2\u0ad3"+
		"\u0ad4\5\u00c8e\2\u0ad4\u0ad5\7$\2\2\u0ad5\u00c7\3\2\2\2\u0ad6\u0adb\5"+
		"\u00caf\2\u0ad7\u0ad8\7)\2\2\u0ad8\u0ada\5\u00caf\2\u0ad9\u0ad7\3\2\2"+
		"\2\u0ada\u0add\3\2\2\2\u0adb\u0ad9\3\2\2\2\u0adb\u0adc\3\2\2\2\u0adc\u00c9"+
		"\3\2\2\2\u0add\u0adb\3\2\2\2\u0ade\u0ae6\5\u013e\u00a0\2\u0adf\u0ae0\7"+
		"L\2\2\u0ae0\u0ae6\5\u013e\u00a0\2\u0ae1\u0ae2\7K\2\2\u0ae2\u0ae6\5\u013e"+
		"\u00a0\2\u0ae3\u0ae4\7F\2\2\u0ae4\u0ae6\5\u00ccg\2\u0ae5\u0ade\3\2\2\2"+
		"\u0ae5\u0adf\3\2\2\2\u0ae5\u0ae1\3\2\2\2\u0ae5\u0ae3\3\2\2\2\u0ae6\u00cb"+
		"\3\2\2\2\u0ae7\u0ae8\5\u038e\u01c8\2\u0ae8\u00cd\3\2\2\2\u0ae9\u0aea\t"+
		"\4\2\2\u0aea\u00cf\3\2\2\2\u0aeb\u0aec\7n\2\2\u0aec\u0aed\5\u02fa\u017e"+
		"\2\u0aed\u00d1\3\2\2\2\u0aee\u0aef\7L\2\2\u0aef\u0af0\7\u00fd\2\2\u0af0"+
		"\u00d3\3\2\2\2\u0af1\u0af3\5\u00d6l\2\u0af2\u0af1\3\2\2\2\u0af3\u0af4"+
		"\3\2\2\2\u0af4\u0af2\3\2\2\2\u0af4\u0af5\3\2\2\2\u0af5\u00d5\3\2\2\2\u0af6"+
		"\u0b02\7\u012f\2\2\u0af7\u0af9\7\u012f\2\2\u0af8\u0afa\7]\2\2\u0af9\u0af8"+
		"\3\2\2\2\u0af9\u0afa\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb\u0b02\5\u0424\u0213"+
		"\2\u0afc\u0afd\7L\2\2\u0afd\u0b02\5\u0434\u021b\2\u0afe\u0aff\7L\2\2\u0aff"+
		"\u0b00\7\u00e6\2\2\u0b00\u0b02\5\u0438\u021d\2\u0b01\u0af6\3\2\2\2\u0b01"+
		"\u0af7\3\2\2\2\u0b01\u0afc\3\2\2\2\u0b01\u0afe\3\2\2\2\u0b02\u00d7\3\2"+
		"\2\2\u0b03\u0b04\7L\2\2\u0b04\u0b05\7\u00a4\2\2\u0b05\u0b09\5\u02fa\u017e"+
		"\2\u0b06\u0b07\7F\2\2\u0b07\u0b09\7\u00a4\2\2\u0b08\u0b03\3\2\2\2\u0b08"+
		"\u0b06\3\2\2\2\u0b09\u00d9\3\2\2\2\u0b0a\u0b0b\7E\2\2\u0b0b\u0b0c\7\u018d"+
		"\2\2\u0b0c\u0b0d\5\u00eav\2\u0b0d\u00db\3\2\2\2\u0b0e\u0b0f\7E\2\2\u0b0f"+
		"\u0b10\7\u018d\2\2\u0b10\u0b11\7\u01bf\2\2\u0b11\u0b12\5\u03cc\u01e7\2"+
		"\u0b12\u0b13\7n\2\2\u0b13\u0b14\5\u02e4\u0173\2\u0b14\u0b15\5\u00dep\2"+
		"\u0b15\u00dd\3\2\2\2\u0b16\u0b17\7\u012c\2\2\u0b17\u0b18\7v\2\2\u0b18"+
		"\u0b20\5\u02e4\u0173\2\u0b19\u0b1a\7L\2\2\u0b1a\u0b1b\7H\2\2\u0b1b\u0b20"+
		"\5\u02e4\u0173\2\u0b1c\u0b1d\7\u0127\2\2\u0b1d\u0b1e\7v\2\2\u0b1e\u0b20"+
		"\5\u041a\u020e\2\u0b1f\u0b16\3\2\2\2\u0b1f\u0b19\3\2\2\2\u0b1f\u0b1c\3"+
		"\2\2\2\u0b20\u00df\3\2\2\2\u0b21\u0b22\7E\2\2\u0b22\u0b23\7\u018d\2\2"+
		"\u0b23\u0b24\7\u01d8\2\2\u0b24\u0b25\5\u03cc\u01e7\2\u0b25\u0b26\7n\2"+
		"\2\u0b26\u0b27\5\u02e4\u0173\2\u0b27\u0b28\5\u00e2r\2\u0b28\u00e1\3\2"+
		"\2\2\u0b29\u0b2a\t\21\2\2\u0b2a\u0b2d\5\u00e4s\2\u0b2b\u0b2d\5\u00dep"+
		"\2\u0b2c\u0b29\3\2\2\2\u0b2c\u0b2b\3\2\2\2\u0b2d\u00e3\3\2\2\2\u0b2e\u0b33"+
		"\5\u00e6t\2\u0b2f\u0b30\7)\2\2\u0b30\u0b32\5\u00e6t\2\u0b31\u0b2f\3\2"+
		"\2\2\u0b32\u0b35\3\2\2\2\u0b33\u0b31\3\2\2\2\u0b33\u0b34\3\2\2\2\u0b34"+
		"\u00e5\3\2\2\2\u0b35\u0b33\3\2\2\2\u0b36\u0b37\7\u018d\2\2\u0b37\u0b38"+
		"\7\u0230\2\2\u0b38\u0b3a\5\u0326\u0194\2\u0b39\u0b3b\5\u00e8u\2\u0b3a"+
		"\u0b39\3\2\2\2\u0b3a\u0b3b\3\2\2\2\u0b3b\u0b3d\3\2\2\2\u0b3c\u0b3e\7\u020a"+
		"\2\2\u0b3d\u0b3c\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0b55\3\2\2\2\u0b3f"+
		"\u0b40\7\u018d\2\2\u0b40\u0b41\7\u0230\2\2\u0b41\u0b43\5\u00f2z\2\u0b42"+
		"\u0b44\5\u00e8u\2\u0b43\u0b42\3\2\2\2\u0b43\u0b44\3\2\2\2\u0b44\u0b46"+
		"\3\2\2\2\u0b45\u0b47\7\u020a\2\2\u0b46\u0b45\3\2\2\2\u0b46\u0b47\3\2\2"+
		"\2\u0b47\u0b55\3\2\2\2\u0b48\u0b49\7W\2\2\u0b49\u0b4a\7\u0230\2\2\u0b4a"+
		"\u0b55\5\u0130\u0099\2\u0b4b\u0b4c\7W\2\2\u0b4c\u0b4d\7\u0230\2\2\u0b4d"+
		"\u0b4e\7#\2\2\u0b4e\u0b4f\5\u0342\u01a2\2\u0b4f\u0b50\7$\2\2\u0b50\u0b51"+
		"\5\u0130\u0099\2\u0b51\u0b55\3\2\2\2\u0b52\u0b53\7\u013a\2\2\u0b53\u0b55"+
		"\5\u036c\u01b7\2\u0b54\u0b36\3\2\2\2\u0b54\u0b3f\3\2\2\2\u0b54\u0b48\3"+
		"\2\2\2\u0b54\u0b4b\3\2\2\2\u0b54\u0b52\3\2\2\2\u0b55\u00e7\3\2\2\2\u0b56"+
		"\u0b57\7u\2\2\u0b57\u0b5d\7\u0208\2\2\u0b58\u0b59\7u\2\2\u0b59\u0b5a\7"+
		"\u0084\2\2\u0b5a\u0b5b\7\u0086\2\2\u0b5b\u0b5d\5\u03cc\u01e7\2\u0b5c\u0b56"+
		"\3\2\2\2\u0b5c\u0b58\3\2\2\2\u0b5d\u00e9\3\2\2\2\u0b5e\u0b5f\5\u00f2z"+
		"\2\u0b5f\u0b60\7L\2\2\u0b60\u0b61\7H\2\2\u0b61\u0b62\5\u02e4\u0173\2\u0b62"+
		"\u0b6f\3\2\2\2\u0b63\u0b64\5\u00f2z\2\u0b64\u0b65\7L\2\2\u0b65\u0b66\7"+
		"#\2\2\u0b66\u0b67\5\u00ecw\2\u0b67\u0b68\7$\2\2\u0b68\u0b6f\3\2\2\2\u0b69"+
		"\u0b6a\5\u00f2z\2\u0b6a\u0b6b\7\u0127\2\2\u0b6b\u0b6c\7v\2\2\u0b6c\u0b6d"+
		"\5\u041a\u020e\2\u0b6d\u0b6f\3\2\2\2\u0b6e\u0b5e\3\2\2\2\u0b6e\u0b63\3"+
		"\2\2\2\u0b6e\u0b69\3\2\2\2\u0b6f\u00eb\3\2\2\2\u0b70\u0b75\5\u00eex\2"+
		"\u0b71\u0b72\7)\2\2\u0b72\u0b74\5\u00eex\2\u0b73\u0b71\3\2\2\2\u0b74\u0b77"+
		"\3\2\2\2\u0b75\u0b73\3\2\2\2\u0b75\u0b76\3\2\2\2\u0b76\u00ed\3\2\2\2\u0b77"+
		"\u0b75\3\2\2\2\u0b78\u0b79\5\u0444\u0223\2\u0b79\u0b7c\7\33\2\2\u0b7a"+
		"\u0b7d\7\u01a4\2\2\u0b7b\u0b7d\5\u00f0y\2\u0b7c\u0b7a\3\2\2\2\u0b7c\u0b7b"+
		"\3\2\2\2\u0b7d\u00ef\3\2\2\2\u0b7e\u0b84\5\u0400\u0201\2\u0b7f\u0b84\5"+
		"\u02cc\u0167\2\u0b80\u0b84\5\u0322\u0192\2\u0b81\u0b84\5\u0424\u0213\2"+
		"\u0b82\u0b84\7\u022f\2\2\u0b83\u0b7e\3\2\2\2\u0b83\u0b7f\3\2\2\2\u0b83"+
		"\u0b80\3\2\2\2\u0b83\u0b81\3\2\2\2\u0b83\u0b82\3\2\2\2\u0b84\u00f1\3\2"+
		"\2\2\u0b85\u0b86\5\u0326\u0194\2\u0b86\u0b87\5\u0456\u022c\2\u0b87\u00f3"+
		"\3\2\2\2\u0b88\u0b89\7E\2\2\u0b89\u0b8a\7\u01ae\2\2\u0b8a\u0b8b\5\u00f6"+
		"|\2\u0b8b\u0b8c\5\u00fe\u0080\2\u0b8c\u00f5\3\2\2\2\u0b8d\u0b8e\5\u0346"+
		"\u01a4\2\u0b8e\u0b8f\5\u00f8}\2\u0b8f\u00f7\3\2\2\2\u0b90\u0b91\7#\2\2"+
		"\u0b91\u0b92\7\24\2\2\u0b92\u0ba5\7$\2\2\u0b93\u0b94\7#\2\2\u0b94\u0b95"+
		"\5\u00fa~\2\u0b95\u0b96\7$\2\2\u0b96\u0ba5\3\2\2\2\u0b97\u0b98\7#\2\2"+
		"\u0b98\u0b99\7\u0084\2\2\u0b99\u0b9a\7\u0086\2\2\u0b9a\u0b9b\5\u00fa~"+
		"\2\u0b9b\u0b9c\7$\2\2\u0b9c\u0ba5\3\2\2\2\u0b9d\u0b9e\7#\2\2\u0b9e\u0b9f"+
		"\5\u00fa~\2\u0b9f\u0ba0\7\u0084\2\2\u0ba0\u0ba1\7\u0086\2\2\u0ba1\u0ba2"+
		"\5\u00fa~\2\u0ba2\u0ba3\7$\2\2\u0ba3\u0ba5\3\2\2\2\u0ba4\u0b90\3\2\2\2"+
		"\u0ba4\u0b93\3\2\2\2\u0ba4\u0b97\3\2\2\2\u0ba4\u0b9d\3\2\2\2\u0ba5\u00f9"+
		"\3\2\2\2\u0ba6\u0bab\5\u00fc\177\2\u0ba7\u0ba8\7)\2\2\u0ba8\u0baa\5\u00fc"+
		"\177\2\u0ba9\u0ba7\3\2\2\2\u0baa\u0bad\3\2\2\2\u0bab\u0ba9\3\2\2\2\u0bab"+
		"\u0bac\3\2\2\2\u0bac\u00fb\3\2\2\2\u0bad\u0bab\3\2\2\2\u0bae\u0baf\5\u0458"+
		"\u022d\2\u0baf\u00fd\3\2\2\2\u0bb0\u0bb1\7\u012c\2\2\u0bb1\u0bb2\7v\2"+
		"\2\u0bb2\u0bba\5\u02e4\u0173\2\u0bb3\u0bb4\7\u0127\2\2\u0bb4\u0bb5\7v"+
		"\2\2\u0bb5\u0bba\5\u041a\u020e\2\u0bb6\u0bb7\7L\2\2\u0bb7\u0bb8\7H\2\2"+
		"\u0bb8\u0bba\5\u02dc\u016f\2\u0bb9\u0bb0\3\2\2\2\u0bb9\u0bb3\3\2\2\2\u0bb9"+
		"\u0bb6\3\2\2\2\u0bba\u00ff\3\2\2\2\u0bbb\u0bbc\7E\2\2\u0bbc\u0bbd\7\u00b5"+
		"\2\2\u0bbd\u0bbe\5\u03cc\u01e7\2\u0bbe\u0bbf\5\u0102\u0082\2\u0bbf\u0101"+
		"\3\2\2\2\u0bc0\u0bc1\7\u01fb\2\2\u0bc1\u0bcc\7\u0187\2\2\u0bc2\u0bc3\7"+
		"\u012c\2\2\u0bc3\u0bc4\7v\2\2\u0bc4\u0bcc\5\u02e4\u0173\2\u0bc5\u0bc6"+
		"\7\u0127\2\2\u0bc6\u0bc7\7v\2\2\u0bc7\u0bcc\5\u041a\u020e\2\u0bc8\u0bc9"+
		"\7L\2\2\u0bc9\u0bca\7H\2\2\u0bca\u0bcc\5\u02dc\u016f\2\u0bcb\u0bc0\3\2"+
		"\2\2\u0bcb\u0bc2\3\2\2\2\u0bcb\u0bc5\3\2\2\2\u0bcb\u0bc8\3\2\2\2\u0bcc"+
		"\u0103\3\2\2\2\u0bcd\u0bce\7E\2\2\u0bce\u0bcf\7\u01b7\2\2\u0bcf\u0bd0"+
		"\5\u03cc\u01e7\2\u0bd0\u0bd1\5\u0106\u0084\2\u0bd1\u0105\3\2\2\2\u0bd2"+
		"\u0bd3\7\u012c\2\2\u0bd3\u0bd4\7v\2\2\u0bd4\u0bdc\5\u02e4\u0173\2\u0bd5"+
		"\u0bd6\7\u0127\2\2\u0bd6\u0bd7\7v\2\2\u0bd7\u0bdc\5\u041a\u020e\2\u0bd8"+
		"\u0bd9\7L\2\2\u0bd9\u0bda\7H\2\2\u0bda\u0bdc\5\u02dc\u016f\2\u0bdb\u0bd2"+
		"\3\2\2\2\u0bdb\u0bd5\3\2\2\2\u0bdb\u0bd8\3\2\2\2\u0bdc\u0107\3\2\2\2\u0bdd"+
		"\u0bde\7E\2\2\u0bde\u0bdf\7\u00a4\2\2\u0bdf\u0be1\7\u00eb\2\2\u0be0\u0be2"+
		"\5\u011a\u008e\2\u0be1\u0be0\3\2\2\2\u0be1\u0be2\3\2\2\2\u0be2\u0be3\3"+
		"\2\2\2\u0be3\u0be4\5\u010a\u0086\2\u0be4\u0109\3\2\2\2\u0be5\u0be6\7I"+
		"\2\2\u0be6\u0be7\5\u0114\u008b\2\u0be7\u0be8\7q\2\2\u0be8\u0be9\5\u0112"+
		"\u008a\2\u0be9\u0bea\7v\2\2\u0bea\u0bec\5\u010e\u0088\2\u0beb\u0bed\5"+
		"\u010c\u0087\2\u0bec\u0beb\3\2\2\2\u0bec\u0bed\3\2\2\2\u0bed\u0c04\3\2"+
		"\2\2\u0bee\u0bef\7J\2\2\u0bef\u0bf0\5\u0114\u008b\2\u0bf0\u0bf1\7q\2\2"+
		"\u0bf1\u0bf2\5\u0112\u008a\2\u0bf2\u0bf3\7e\2\2\u0bf3\u0bf5\5\u010e\u0088"+
		"\2\u0bf4\u0bf6\5\u00ceh\2\u0bf5\u0bf4\3\2\2\2\u0bf5\u0bf6\3\2\2\2\u0bf6"+
		"\u0c04\3\2\2\2\u0bf7\u0bf8\7J\2\2\u0bf8\u0bf9\7I\2\2\u0bf9\u0bfa\7\u00ea"+
		"\2\2\u0bfa\u0bfb\7u\2\2\u0bfb\u0bfc\5\u0114\u008b\2\u0bfc\u0bfd\7q\2\2"+
		"\u0bfd\u0bfe\5\u0112\u008a\2\u0bfe\u0bff\7e\2\2\u0bff\u0c01\5\u010e\u0088"+
		"\2\u0c00\u0c02\5\u00ceh\2\u0c01\u0c00\3\2\2\2\u0c01\u0c02\3\2\2\2\u0c02"+
		"\u0c04\3\2\2\2\u0c03\u0be5\3\2\2\2\u0c03\u0bee\3\2\2\2\u0c03\u0bf7\3\2"+
		"\2\2\u0c04\u010b\3\2\2\2\u0c05\u0c06\7]\2\2\u0c06\u0c07\7I\2\2\u0c07\u0c08"+
		"\7\u00ea\2\2\u0c08\u010d\3\2\2\2\u0c09\u0c0e\5\u0110\u0089\2\u0c0a\u0c0b"+
		"\7)\2\2\u0c0b\u0c0d\5\u0110\u0089\2\u0c0c\u0c0a\3\2\2\2\u0c0d\u0c10\3"+
		"\2\2\2\u0c0e\u0c0c\3\2\2\2\u0c0e\u0c0f\3\2\2\2\u0c0f\u010f\3\2\2\2\u0c10"+
		"\u0c0e\3\2\2\2\u0c11\u0c13\7\u0085\2\2\u0c12\u0c11\3\2\2\2\u0c12\u0c13"+
		"\3\2\2\2\u0c13\u0c14\3\2\2\2\u0c14\u0c15\5\u041a\u020e\2\u0c15\u0111\3"+
		"\2\2\2\u0c16\u0c17\t\22\2\2\u0c17\u0113\3\2\2\2\u0c18\u0c28\5\u0116\u008c"+
		"\2\u0c19\u0c28\7\u0081\2\2\u0c1a\u0c1b\7\u0081\2\2\u0c1b\u0c28\7\u00eb"+
		"\2\2\u0c1c\u0c1d\7\u0081\2\2\u0c1d\u0c1e\7#\2\2\u0c1e\u0c1f\5,\27\2\u0c1f"+
		"\u0c20\7$\2\2\u0c20\u0c28\3\2\2\2\u0c21\u0c22\7\u0081\2\2\u0c22\u0c23"+
		"\7\u00eb\2\2\u0c23\u0c24\7#\2\2\u0c24\u0c25\5,\27\2\u0c25\u0c26\7$\2\2"+
		"\u0c26\u0c28\3\2\2\2\u0c27\u0c18\3\2\2\2\u0c27\u0c19\3\2\2\2\u0c27\u0c1a"+
		"\3\2\2\2\u0c27\u0c1c\3\2\2\2\u0c27\u0c21\3\2\2\2\u0c28\u0115\3\2\2\2\u0c29"+
		"\u0c2e\5\u0118\u008d\2\u0c2a\u0c2b\7)\2\2\u0c2b\u0c2d\5\u0118\u008d\2"+
		"\u0c2c\u0c2a\3\2\2\2\u0c2d\u0c30\3\2\2\2\u0c2e\u0c2c\3\2\2\2\u0c2e\u0c2f"+
		"\3\2\2\2\u0c2f\u0117\3\2\2\2\u0c30\u0c2e\3\2\2\2\u0c31\u0c33\7@\2\2\u0c32"+
		"\u0c34\5\u0436\u021c\2\u0c33\u0c32\3\2\2\2\u0c33\u0c34\3\2\2\2\u0c34\u0c42"+
		"\3\2\2\2\u0c35\u0c37\7\u00ed\2\2\u0c36\u0c38\5\u0436\u021c\2\u0c37\u0c36"+
		"\3\2\2\2\u0c37\u0c38\3\2\2\2\u0c38\u0c42\3\2\2\2\u0c39\u0c3b\7D\2\2\u0c3a"+
		"\u0c3c\5\u0436\u021c\2\u0c3b\u0c3a\3\2\2\2\u0c3b\u0c3c\3\2\2\2\u0c3c\u0c42"+
		"\3\2\2\2\u0c3d\u0c3f\5\u034c\u01a7\2\u0c3e\u0c40\5\u0436\u021c\2\u0c3f"+
		"\u0c3e\3\2\2\2\u0c3f\u0c40\3\2\2\2\u0c40\u0c42\3\2\2\2\u0c41\u0c31\3\2"+
		"\2\2\u0c41\u0c35\3\2\2\2\u0c41\u0c39\3\2\2\2\u0c41\u0c3d\3\2\2\2\u0c42"+
		"\u0119\3\2\2\2\u0c43\u0c45\5\u011c\u008f\2\u0c44\u0c43\3\2\2\2\u0c45\u0c46"+
		"\3\2\2\2\u0c46\u0c44\3\2\2\2\u0c46\u0c47\3\2\2\2\u0c47\u011b\3\2\2\2\u0c48"+
		"\u0c49\7\u0080\2\2\u0c49\u0c4a\7H\2\2\u0c4a\u0c4f\5\u011e\u0090\2\u0c4b"+
		"\u0c4c\7u\2\2\u0c4c\u0c4d\t\23\2\2\u0c4d\u0c4f\5\u0462\u0232\2\u0c4e\u0c48"+
		"\3\2\2\2\u0c4e\u0c4b\3\2\2\2\u0c4f\u011d\3\2\2\2\u0c50\u0c51\5\u03d0\u01e9"+
		"\2\u0c51\u011f\3\2\2\2\u0c52\u0c53\7E\2\2\u0c53\u0c54\7\u0103\2\2\u0c54"+
		"\u0c55\5\u0122\u0092\2\u0c55\u0121\3\2\2\2\u0c56\u0c57\5\u03cc\u01e7\2"+
		"\u0c57\u0c58\t\17\2\2\u0c58\u0c59\7z\2\2\u0c59\u0c5a\7{\2\2\u0c5a\u0c88"+
		"\3\2\2\2\u0c5b\u0c5c\5\u03cc\u01e7\2\u0c5c\u0c5d\7K\2\2\u0c5d\u0c5e\5"+
		"d\63\2\u0c5e\u0c88\3\2\2\2\u0c5f\u0c60\5\u03cc\u01e7\2\u0c60\u0c61\7F"+
		"\2\2\u0c61\u0c63\7P\2\2\u0c62\u0c64\5\u0488\u0245\2\u0c63\u0c62\3\2\2"+
		"\2\u0c63\u0c64\3\2\2\2\u0c64\u0c65\3\2\2\2\u0c65\u0c67\5\u02e4\u0173\2"+
		"\u0c66\u0c68\5\u00ceh\2\u0c67\u0c66\3\2\2\2\u0c67\u0c68\3\2\2\2\u0c68"+
		"\u0c88\3\2\2\2\u0c69\u0c6a\5\u03cc\u01e7\2\u0c6a\u0c6b\7\u0142\2\2\u0c6b"+
		"\u0c6c\7P\2\2\u0c6c\u0c6d\5\u02e4\u0173\2\u0c6d\u0c88\3\2\2\2\u0c6e\u0c6f"+
		"\5\u03cc\u01e7\2\u0c6f\u0c70\7\u012c\2\2\u0c70\u0c71\7P\2\2\u0c71\u0c72"+
		"\5\u0124\u0093\2\u0c72\u0c73\7v\2\2\u0c73\u0c74\5\u0124\u0093\2\u0c74"+
		"\u0c88\3\2\2\2\u0c75\u0c76\5\u03cc\u01e7\2\u0c76\u0c77\7\u0127\2\2\u0c77"+
		"\u0c78\7v\2\2\u0c78\u0c79\5\u041a\u020e\2\u0c79\u0c88\3\2\2\2\u0c7a\u0c7b"+
		"\5\u03cc\u01e7\2\u0c7b\u0c7c\7\u012c\2\2\u0c7c\u0c7d\7v\2\2\u0c7d\u0c7e"+
		"\5\u03cc\u01e7\2\u0c7e\u0c88\3\2\2\2\u0c7f\u0c80\5\u03cc\u01e7\2\u0c80"+
		"\u0c81\7L\2\2\u0c81\u0c82\7H\2\2\u0c82\u0c83\5\u02e4\u0173\2\u0c83\u0c88"+
		"\3\2\2\2\u0c84\u0c85\5\u03cc\u01e7\2\u0c85\u0c86\5\u00d8m\2\u0c86\u0c88"+
		"\3\2\2\2\u0c87\u0c56\3\2\2\2\u0c87\u0c5b\3\2\2\2\u0c87\u0c5f\3\2\2\2\u0c87"+
		"\u0c69\3\2\2\2\u0c87\u0c6e\3\2\2\2\u0c87\u0c75\3\2\2\2\u0c87\u0c7a\3\2"+
		"\2\2\u0c87\u0c7f\3\2\2\2\u0c87\u0c84\3\2\2\2\u0c88\u0123\3\2\2\2\u0c89"+
		"\u0c8a\5\u034c\u01a7\2\u0c8a\u0125\3\2\2\2\u0c8b\u0c8c\7E\2\2\u0c8c\u0c8d"+
		"\7\u01d4\2\2\u0c8d\u0c8e\7X\2\2\u0c8e\u0c8f\5\u012a\u0096\2\u0c8f\u0c90"+
		"\5\u0128\u0095\2\u0c90\u0127\3\2\2\2\u0c91\u0c9b\7\u00a7\2\2\u0c92\u0c93"+
		"\7\u00a6\2\2\u0c93\u0c9b\t\f\2\2\u0c94\u0c95\7\u0127\2\2\u0c95\u0c96\7"+
		"v\2\2\u0c96\u0c9b\5\u041a\u020e\2\u0c97\u0c98\7\u012c\2\2\u0c98\u0c99"+
		"\7v\2\2\u0c99\u0c9b\5\u012a\u0096\2\u0c9a\u0c91\3\2\2\2\u0c9a\u0c92\3"+
		"\2\2\2\u0c9a\u0c94\3\2\2\2\u0c9a\u0c97\3\2\2\2\u0c9b\u0129\3\2\2\2\u0c9c"+
		"\u0c9d\5\u034c\u01a7\2\u0c9d\u012b\3\2\2\2\u0c9e\u0c9f\7E\2\2\u0c9f\u0ca0"+
		"\7\u0107\2\2\u0ca0\u0ca1\5\u02e4\u0173\2\u0ca1\u0ca2\5\u012e\u0098\2\u0ca2"+
		"\u012d\3\2\2\2\u0ca3\u0ca4\7B\2\2\u0ca4\u0d18\5\u0136\u009c\2\u0ca5\u0ca6"+
		"\t\21\2\2\u0ca6\u0ca7\7\u01ac\2\2\u0ca7\u0ca8\7\u01e6\2\2\u0ca8\u0d18"+
		"\5\u02e4\u0173\2\u0ca9\u0caa\t\21\2\2\u0caa\u0cab\7\u01ae\2\2\u0cab\u0d18"+
		"\5\u0134\u009b\2\u0cac\u0cad\t\21\2\2\u0cad\u0cae\7b\2\2\u0cae\u0caf\7"+
		"#\2\2\u0caf\u0cb0\5\u036c\u01b7\2\u0cb0\u0cb1\7p\2\2\u0cb1\u0cb2\5\u036c"+
		"\u01b7\2\u0cb2\u0cb3\7$\2\2\u0cb3\u0d18\3\2\2\2\u0cb4\u0cb5\t\21\2\2\u0cb5"+
		"\u0cb6\7\u00b5\2\2\u0cb6\u0d18\5\u03cc\u01e7\2\u0cb7\u0cb8\t\21\2\2\u0cb8"+
		"\u0cb9\7\u01b7\2\2\u0cb9\u0d18\5\u03cc\u01e7\2\u0cba\u0cbb\t\21\2\2\u0cbb"+
		"\u0cbc\7\u0103\2\2\u0cbc\u0d18\5\u036c\u01b7\2\u0cbd\u0cbe\t\21\2\2\u0cbe"+
		"\u0cbf\7W\2\2\u0cbf\u0d18\5\u0130\u0099\2\u0cc0\u0cc2\t\21\2\2\u0cc1\u0cc3"+
		"\7\u01eb\2\2\u0cc2\u0cc1\3\2\2\2\u0cc2\u0cc3\3\2\2\2\u0cc3\u0cc4\3\2\2"+
		"\2\u0cc4\u0cc5\7\u0118\2\2\u0cc5\u0d18\5\u02e4\u0173\2\u0cc6\u0cc7\t\21"+
		"\2\2\u0cc7\u0cc8\7\u018d\2\2\u0cc8\u0d18\5\u00f2z\2\u0cc9\u0cca\t\21\2"+
		"\2\u0cca\u0ccb\7\u018d\2\2\u0ccb\u0ccc\t\24\2\2\u0ccc\u0ccd\5\u03cc\u01e7"+
		"\2\u0ccd\u0cce\7n\2\2\u0cce\u0ccf\5\36\20\2\u0ccf\u0d18\3\2\2\2\u0cd0"+
		"\u0cd1\t\21\2\2\u0cd1\u0cd2\7Y\2\2\u0cd2\u0d18\5\u0130\u0099\2\u0cd3\u0cd4"+
		"\t\21\2\2\u0cd4\u0cd5\7\u0131\2\2\u0cd5\u0d18\5\u0130\u0099\2\u0cd6\u0cd7"+
		"\t\21\2\2\u0cd7\u0cd8\7H\2\2\u0cd8\u0d18\5\u02e4\u0173\2\u0cd9\u0cda\t"+
		"\21\2\2\u0cda\u0cdb\7\u01d4\2\2\u0cdb\u0cdc\7X\2\2\u0cdc\u0d18\5\u02e4"+
		"\u0173\2\u0cdd\u0cde\t\21\2\2\u0cde\u0cdf\7M\2\2\u0cdf\u0d18\5\u03cc\u01e7"+
		"\2\u0ce0\u0ce1\t\21\2\2\u0ce1\u0ce2\7\u00be\2\2\u0ce2\u0ce3\7\u0208\2"+
		"\2\u0ce3\u0ce4\7\u01ec\2\2\u0ce4\u0d18\5\u03cc\u01e7\2\u0ce5\u0ce6\t\21"+
		"\2\2\u0ce6\u0ce7\7\u00be\2\2\u0ce7\u0ce8\7\u0208\2\2\u0ce8\u0ce9\7\u01c3"+
		"\2\2\u0ce9\u0d18\5\u03cc\u01e7\2\u0cea\u0ceb\t\21\2\2\u0ceb\u0cec\7\u00be"+
		"\2\2\u0cec\u0ced\7\u0208\2\2\u0ced\u0cee\7\u0217\2\2\u0cee\u0d18\5\u03cc"+
		"\u01e7\2\u0cef\u0cf0\t\21\2\2\u0cf0\u0cf1\7\u00be\2\2\u0cf1\u0cf2\7\u0208"+
		"\2\2\u0cf2\u0cf3\7\u01c0\2\2\u0cf3\u0d18\5\u03cc\u01e7\2\u0cf4\u0cf5\t"+
		"\21\2\2\u0cf5\u0cf6\7\u0134\2\2\u0cf6\u0d18\5\u03cc\u01e7\2\u0cf7\u0cf8"+
		"\t\21\2\2\u0cf8\u0cf9\7Z\2\2\u0cf9\u0d18\5\u03cc\u01e7\2\u0cfa\u0cfb\t"+
		"\21\2\2\u0cfb\u0cfc\7\u018c\2\2\u0cfc\u0cfd\7Z\2\2\u0cfd\u0d18\5\u03cc"+
		"\u01e7\2\u0cfe\u0cff\t\21\2\2\u0cff\u0d00\7S\2\2\u0d00\u0d01\7M\2\2\u0d01"+
		"\u0d18\5\u03cc\u01e7\2\u0d02\u0d03\t\21\2\2\u0d03\u0d04\7S\2\2\u0d04\u0d05"+
		"\7\u00fd\2\2\u0d05\u0d06\7\u0226\2\2\u0d06\u0d18\5\u02e4\u0173\2\u0d07"+
		"\u0d08\t\21\2\2\u0d08\u0d09\7\u0206\2\2\u0d09\u0d18\5\u02e4\u0173\2\u0d0a"+
		"\u0d0b\t\21\2\2\u0d0b\u0d0c\7\u021b\2\2\u0d0c\u0d0d\7u\2\2\u0d0d\u0d0e"+
		"\5\u036c\u01b7\2\u0d0e\u0d0f\7\u0118\2\2\u0d0f\u0d10\5\u02e4\u0173\2\u0d10"+
		"\u0d18\3\2\2\2\u0d11\u0d12\t\21\2\2\u0d12\u0d13\7\u00ba\2\2\u0d13\u0d18"+
		"\5\u036c\u01b7\2\u0d14\u0d15\7L\2\2\u0d15\u0d16\7H\2\2\u0d16\u0d18\5\u02e4"+
		"\u0173\2\u0d17\u0ca3\3\2\2\2\u0d17\u0ca5\3\2\2\2\u0d17\u0ca9\3\2\2\2\u0d17"+
		"\u0cac\3\2\2\2\u0d17\u0cb4\3\2\2\2\u0d17\u0cb7\3\2\2\2\u0d17\u0cba\3\2"+
		"\2\2\u0d17\u0cbd\3\2\2\2\u0d17\u0cc0\3\2\2\2\u0d17\u0cc6\3\2\2\2\u0d17"+
		"\u0cc9\3\2\2\2\u0d17\u0cd0\3\2\2\2\u0d17\u0cd3\3\2\2\2\u0d17\u0cd6\3\2"+
		"\2\2\u0d17\u0cd9\3\2\2\2\u0d17\u0cdd\3\2\2\2\u0d17\u0ce0\3\2\2\2\u0d17"+
		"\u0ce5\3\2\2\2\u0d17\u0cea\3\2\2\2\u0d17\u0cef\3\2\2\2\u0d17\u0cf4\3\2"+
		"\2\2\u0d17\u0cf7\3\2\2\2\u0d17\u0cfa\3\2\2\2\u0d17\u0cfe\3\2\2\2\u0d17"+
		"\u0d02\3\2\2\2\u0d17\u0d07\3\2\2\2\u0d17\u0d0a\3\2\2\2\u0d17\u0d11\3\2"+
		"\2\2\u0d17\u0d14\3\2\2\2\u0d18\u012f\3\2\2\2\u0d19\u0d1a\5\u0346\u01a4"+
		"\2\u0d1a\u0d1b\5\u0132\u009a\2\u0d1b\u0d22\3\2\2\2\u0d1c\u0d22\5\u02da"+
		"\u016e\2\u0d1d\u0d22\5\u034c\u01a7\2\u0d1e\u0d1f\5\u034c\u01a7\2\u0d1f"+
		"\u0d20\5\u0300\u0181\2\u0d20\u0d22\3\2\2\2\u0d21\u0d19\3\2\2\2\u0d21\u0d1c"+
		"\3\2\2\2\u0d21\u0d1d\3\2\2\2\u0d21\u0d1e\3\2\2\2\u0d22\u0131\3\2\2\2\u0d23"+
		"\u0d24\7#\2\2\u0d24\u0d25\5\u045c\u022f\2\u0d25\u0d26\7$\2\2\u0d26\u0d2a"+
		"\3\2\2\2\u0d27\u0d28\7#\2\2\u0d28\u0d2a\7$\2\2\u0d29\u0d23\3\2\2\2\u0d29"+
		"\u0d27\3\2\2\2\u0d2a\u0133\3\2\2\2\u0d2b\u0d2c\5\u0346\u01a4\2\u0d2c\u0d2d"+
		"\5\u00f8}\2\u0d2d\u0135\3\2\2\2\u0d2e\u0d30\5\u0138\u009d\2\u0d2f\u0d2e"+
		"\3\2\2\2\u0d30\u0d33\3\2\2\2\u0d31\u0d2f\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32"+
		"\u0137\3\2\2\2\u0d33\u0d31\3\2\2\2\u0d34\u0d37\7v\2\2\u0d35\u0d38\5\u0414"+
		"\u020b\2\u0d36\u0d38\7\u022f\2\2\u0d37\u0d35\3\2\2\2\u0d37\u0d36\3\2\2"+
		"\2\u0d38\u0139\3\2\2\2\u0d39\u0d3a\7E\2\2\u0d3a\u0d3b\7S\2\2\u0d3b\u0d3c"+
		"\7\u00fd\2\2\u0d3c\u0d3d\7\u0226\2\2\u0d3d\u0d3e\5\u034c\u01a7\2\u0d3e"+
		"\u0d3f\5\u013c\u009f\2\u0d3f\u013b\3\2\2\2\u0d40\u0d42\5\u0142\u00a2\2"+
		"\u0d41\u0d40\3\2\2\2\u0d41\u0d42\3\2\2\2\u0d42\u0d43\3\2\2\2\u0d43\u0d4c"+
		"\5\u00c6d\2\u0d44\u0d4c\5\u0142\u00a2\2\u0d45\u0d46\7\u012c\2\2\u0d46"+
		"\u0d47\7v\2\2\u0d47\u0d4c\5\u02e4\u0173\2\u0d48\u0d49\7\u0127\2\2\u0d49"+
		"\u0d4a\7v\2\2\u0d4a\u0d4c\5\u041a\u020e\2\u0d4b\u0d41\3\2\2\2\u0d4b\u0d44"+
		"\3\2\2\2\u0d4b\u0d45\3\2\2\2\u0d4b\u0d48\3\2\2\2\u0d4c\u013d\3\2\2\2\u0d4d"+
		"\u0d4e\5\u00ccg\2\u0d4e\u0d4f\5\u0140\u00a1\2\u0d4f\u013f\3\2\2\2\u0d50"+
		"\u0d51\5\u0348\u01a5\2\u0d51\u0141\3\2\2\2\u0d52\u0d54\5\u0144\u00a3\2"+
		"\u0d53\u0d52\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55\u0d53\3\2\2\2\u0d55\u0d56"+
		"\3\2\2\2\u0d56\u0143\3\2\2\2\u0d57\u0d58\7\u01df\2\2\u0d58\u0d60\5\u0146"+
		"\u00a4\2\u0d59\u0d5a\7\u00e9\2\2\u0d5a\u0d60\7\u01df\2\2\u0d5b\u0d5c\7"+
		"\u021e\2\2\u0d5c\u0d60\5\u0146\u00a4\2\u0d5d\u0d5e\7\u00e9\2\2\u0d5e\u0d60"+
		"\7\u021e\2\2\u0d5f\u0d57\3\2\2\2\u0d5f\u0d59\3\2\2\2\u0d5f\u0d5b\3\2\2"+
		"\2\u0d5f\u0d5d\3\2\2\2\u0d60\u0145\3\2\2\2\u0d61\u0d62\5\u03cc\u01e7\2"+
		"\u0d62\u0147\3\2\2\2\u0d63\u0d64\7E\2\2\u0d64\u0d65\7\u0085\2\2\u0d65"+
		"\u0d66\5\u014a\u00a6\2\u0d66\u0149\3\2\2\2\u0d67\u0d68\5\u041a\u020e\2"+
		"\u0d68\u0d69\t\21\2\2\u0d69\u0d6a\7\u00f2\2\2\u0d6a\u0d6b\5\u0462\u0232"+
		"\2\u0d6b\u0d72\3\2\2\2\u0d6c\u0d6d\5\u041a\u020e\2\u0d6d\u0d6e\7\u012c"+
		"\2\2\u0d6e\u0d6f\7v\2\2\u0d6f\u0d70\5\u041a\u020e\2\u0d70\u0d72\3\2\2"+
		"\2\u0d71\u0d67\3\2\2\2\u0d71\u0d6c\3\2\2\2\u0d72\u014b\3\2\2\2\u0d73\u0d75"+
		"\7E\2\2\u0d74\u0d76\7\u01eb\2\2\u0d75\u0d74\3\2\2\2\u0d75\u0d76\3\2\2"+
		"\2\u0d76\u0d77\3\2\2\2\u0d77\u0d84\7\u0118\2\2\u0d78\u0d79\5\u034c\u01a7"+
		"\2\u0d79\u0d7a\7\u012c\2\2\u0d7a\u0d7b\7v\2\2\u0d7b\u0d7c\5\u034c\u01a7"+
		"\2\u0d7c\u0d85\3\2\2\2\u0d7d\u0d7e\7\u0127\2\2\u0d7e\u0d82\7v\2\2\u0d7f"+
		"\u0d83\5\u040c\u0207\2\u0d80\u0d83\7\u00ad\2\2\u0d81\u0d83\7\u0136\2\2"+
		"\u0d82\u0d7f\3\2\2\2\u0d82\u0d80\3\2\2\2\u0d82\u0d81\3\2\2\2\u0d83\u0d85"+
		"\3\2\2\2\u0d84\u0d78\3\2\2\2\u0d84\u0d7d\3\2\2\2\u0d85\u014d\3\2\2\2\u0d86"+
		"\u0d87\7E\2\2\u0d87\u0d88\7\u0119\2\2\u0d88\u0d89\7\u0122\2\2\u0d89\u0d8a"+
		"\5\u0424\u0213\2\u0d8a\u0d8b\7\u0127\2\2\u0d8b\u0d8f\7v\2\2\u0d8c\u0d90"+
		"\5\u040c\u0207\2\u0d8d\u0d90\7\u00ad\2\2\u0d8e\u0d90\7\u0136\2\2\u0d8f"+
		"\u0d8c\3\2\2\2\u0d8f\u0d8d\3\2\2\2\u0d8f\u0d8e\3\2\2\2\u0d90\u014f\3\2"+
		"\2\2\u0d91\u0d92\7E\2\2\u0d92\u0d93\7\u018c\2\2\u0d93\u0d94\7Z\2\2\u0d94"+
		"\u0d95\5\u0152\u00aa\2\u0d95\u0151\3\2\2\2\u0d96\u0d98\5\u0488\u0245\2"+
		"\u0d97\u0d96\3\2\2\2\u0d97\u0d98\3\2\2\2\u0d98\u0d99\3\2\2\2\u0d99\u0d9a"+
		"\5\u034a\u01a6\2\u0d9a\u0d9b\5\u00be`\2\u0d9b\u0dcd\3\2\2\2\u0d9c\u0d9d"+
		"\5\u034a\u01a6\2\u0d9d\u0d9e\7\u0102\2\2\u0d9e\u0d9f\7q\2\2\u0d9f\u0da0"+
		"\7\u0107\2\2\u0da0\u0da1\5\u02e4\u0173\2\u0da1\u0dcd\3\2\2\2\u0da2\u0da4"+
		"\5\u0488\u0245\2\u0da3\u0da2\3\2\2\2\u0da3\u0da4\3\2\2\2\u0da4\u0da5\3"+
		"\2\2\2\u0da5\u0da6\5\u034a\u01a6\2\u0da6\u0da8\7\u012c\2\2\u0da7\u0da9"+
		"\7N\2\2\u0da8\u0da7\3\2\2\2\u0da8\u0da9\3\2\2\2\u0da9\u0daa\3\2\2\2\u0daa"+
		"\u0dab\5\u02e0\u0171\2\u0dab\u0dac\7v\2\2\u0dac\u0dad\5\u02e0\u0171\2"+
		"\u0dad\u0dcd\3\2\2\2\u0dae\u0db0\5\u0488\u0245\2\u0daf\u0dae\3\2\2\2\u0daf"+
		"\u0db0\3\2\2\2\u0db0\u0db1\3\2\2\2\u0db1\u0db2\5\u034a\u01a6\2\u0db2\u0db3"+
		"\7\u012c\2\2\u0db3\u0db4\7v\2\2\u0db4\u0db5\5\u034a\u01a6\2\u0db5\u0dcd"+
		"\3\2\2\2\u0db6\u0db8\5\u0488\u0245\2\u0db7\u0db6\3\2\2\2\u0db7\u0db8\3"+
		"\2\2\2\u0db8\u0db9\3\2\2\2\u0db9\u0dba\5\u034a\u01a6\2\u0dba\u0dbb\7L"+
		"\2\2\u0dbb\u0dbc\7H\2\2\u0dbc\u0dbd\5\u02dc\u016f\2\u0dbd\u0dcd\3\2\2"+
		"\2\u0dbe\u0dbf\7\u0081\2\2\u0dbf\u0dc0\7\u0080\2\2\u0dc0\u0dc1\7\u013b"+
		"\2\2\u0dc1\u0dc2\5\u02e4\u0173\2\u0dc2\u0dc3\7\u0126\2\2\u0dc3\u0dc4\7"+
		"\u0086\2\2\u0dc4\u0dc5\5\u0462\u0232\2\u0dc5\u0dc6\3\2\2\2\u0dc6\u0dc7"+
		"\7L\2\2\u0dc7\u0dc8\7\u013b\2\2\u0dc8\u0dca\5\u02e4\u0173\2\u0dc9\u0dcb"+
		"\7\u0199\2\2\u0dca\u0dc9\3\2\2\2\u0dca\u0dcb\3\2\2\2\u0dcb\u0dcd\3\2\2"+
		"\2\u0dcc\u0d97\3\2\2\2\u0dcc\u0d9c\3\2\2\2\u0dcc\u0da3\3\2\2\2\u0dcc\u0daf"+
		"\3\2\2\2\u0dcc\u0db7\3\2\2\2\u0dcc\u0dbe\3\2\2\2\u0dcd\u0153\3\2\2\2\u0dce"+
		"\u0dcf\7\u01d7\2\2\u0dcf\u0dd0\5\u02e4\u0173\2\u0dd0\u0dd1\5\u0156\u00ac"+
		"\2\u0dd1\u0dd6\7\u01d2\2\2\u0dd2\u0dd3\7]\2\2\u0dd3\u0dd7\7\u01e3\2\2"+
		"\u0dd4\u0dd5\7\u0144\2\2\u0dd5\u0dd7\7\u01e3\2\2\u0dd6\u0dd2\3\2\2\2\u0dd6"+
		"\u0dd4\3\2\2\2\u0dd6\u0dd7\3\2\2\2\u0dd7\u0dd8\3\2\2\2\u0dd8\u0dd9\7u"+
		"\2\2\u0dd9\u0dda\5\u04ac\u0257\2\u0dda\u0155\3\2\2\2\u0ddb\u0ddd\5\u0158"+
		"\u00ad\2\u0ddc\u0ddb\3\2\2\2\u0ddd\u0de0\3\2\2\2\u0dde\u0ddc\3\2\2\2\u0dde"+
		"\u0ddf\3\2\2\2\u0ddf\u0157\3\2\2\2\u0de0\u0dde\3\2\2\2\u0de1\u0de2\7\u00e9"+
		"\2\2\u0de2\u0de7\7\u0202\2\2\u0de3\u0de7\7\u0202\2\2\u0de4\u0de7\7\u00dc"+
		"\2\2\u0de5\u0de7\7\u01c5\2\2\u0de6\u0de1\3\2\2\2\u0de6\u0de3\3\2\2\2\u0de6"+
		"\u0de4\3\2\2\2\u0de6\u0de5\3\2\2\2\u0de7\u0159\3\2\2\2\u0de8\u0de9\7\u0105"+
		"\2\2\u0de9\u0dea\5\u02e4\u0173\2\u0dea\u0deb\5\4\3\2\u0deb\u015b\3\2\2"+
		"\2\u0dec\u0dee\7D\2\2\u0ded\u0def\7\u013f\2\2\u0dee\u0ded\3\2\2\2\u0dee"+
		"\u0def\3\2\2\2\u0def\u0df0\3\2\2\2\u0df0\u0df1\7\u018c\2\2\u0df1\u0df3"+
		"\7Z\2\2\u0df2\u0df4\5\u0486\u0244\2\u0df3\u0df2\3\2\2\2\u0df3\u0df4\3"+
		"\2\2\2\u0df4\u0df5\3\2\2\2\u0df5\u0df6\5\u015e\u00b0\2\u0df6\u0df7\7p"+
		"\2\2\u0df7\u0dfd\5\u04ac\u0257\2\u0df8\u0df9\7]\2\2\u0df9\u0dfe\7\u00fd"+
		"\2\2\u0dfa\u0dfb\7]\2\2\u0dfb\u0dfc\7\u00e9\2\2\u0dfc\u0dfe\7\u00fd\2"+
		"\2\u0dfd\u0df8\3\2\2\2\u0dfd\u0dfa\3\2\2\2\u0dfd\u0dfe\3\2\2\2\u0dfe\u015d"+
		"\3\2\2\2\u0dff\u0e01\5\u034a\u01a6\2\u0e00\u0e02\5\u0436\u021c\2\u0e01"+
		"\u0e00\3\2\2\2\u0e01\u0e02\3\2\2\2\u0e02\u0e03\3\2\2\2\u0e03\u0e06\5\34"+
		"\17\2\u0e04\u0e05\7]\2\2\u0e05\u0e07\5\u03f8\u01fd\2\u0e06\u0e04\3\2\2"+
		"\2\u0e06\u0e07\3\2\2\2\u0e07\u0e0a\3\2\2\2\u0e08\u0e09\7\u013b\2\2\u0e09"+
		"\u0e0b\5\u02e4\u0173\2\u0e0a\u0e08\3\2\2\2\u0e0a\u0e0b\3\2\2\2\u0e0b\u015f"+
		"\3\2\2\2\u0e0c\u0e0d\7\u01fb\2\2\u0e0d\u0e0e\7\u018c\2\2\u0e0e\u0e10\7"+
		"Z\2\2\u0e0f\u0e11\7\u00f9\2\2\u0e10\u0e0f\3\2\2\2\u0e10\u0e11\3\2\2\2"+
		"\u0e11\u0e12\3\2\2\2\u0e12\u0e18\5\u034a\u01a6\2\u0e13\u0e14\7]\2\2\u0e14"+
		"\u0e19\7\u00fd\2\2\u0e15\u0e16\7]\2\2\u0e16\u0e17\7\u00e9\2\2\u0e17\u0e19"+
		"\7\u00fd\2\2\u0e18\u0e13\3\2\2\2\u0e18\u0e15\3\2\2\2\u0e18\u0e19\3\2\2"+
		"\2\u0e19\u0161\3\2\2\2\u0e1a\u0e1b\7E\2\2\u0e1b\u0e1d\7\u020b\2\2\u0e1c"+
		"\u0e1e\5\u0488\u0245\2\u0e1d\u0e1c\3\2\2\2\u0e1d\u0e1e\3\2\2\2\u0e1e\u0e1f"+
		"\3\2\2\2\u0e1f\u0e20\5\u02e4\u0173\2\u0e20\u0e21\7q\2\2\u0e21\u0e22\5"+
		"\u034a\u01a6\2\u0e22\u0e23\5\u0164\u00b3\2\u0e23\u0163\3\2\2\2\u0e24\u0e25"+
		"\7v\2\2\u0e25\u0e27\5\u0462\u0232\2\u0e26\u0e24\3\2\2\2\u0e26\u0e27\3"+
		"\2\2\2\u0e27\u0e2d\3\2\2\2\u0e28\u0e29\7n\2\2\u0e29\u0e2a\7#\2\2\u0e2a"+
		"\u0e2b\5\u02fa\u017e\2\u0e2b\u0e2c\7$\2\2\u0e2c\u0e2e\3\2\2\2\u0e2d\u0e28"+
		"\3\2\2\2\u0e2d\u0e2e\3\2\2\2\u0e2e\u0e35\3\2\2\2\u0e2f\u0e30\7]\2\2\u0e30"+
		"\u0e31\7\u00e5\2\2\u0e31\u0e32\7#\2\2\u0e32\u0e33\5\u02fa\u017e\2\u0e33"+
		"\u0e34\7$\2\2\u0e34\u0e36\3\2\2\2\u0e35\u0e2f\3\2\2\2\u0e35\u0e36\3\2"+
		"\2\2\u0e36\u0e3b\3\2\2\2\u0e37\u0e38\7\u012c\2\2\u0e38\u0e39\7v\2\2\u0e39"+
		"\u0e3b\5\u02e4\u0173\2\u0e3a\u0e26\3\2\2\2\u0e3a\u0e37\3\2\2\2\u0e3b\u0165"+
		"\3\2\2\2\u0e3c\u0e3d\7E\2\2\u0e3d\u0e3e\7Y\2\2\u0e3e\u0e3f\5\u0130\u0099"+
		"\2\u0e3f\u0e40\5\u0168\u00b5\2\u0e40\u0167\3\2\2\2\u0e41\u0e43\5\u016a"+
		"\u00b6\2\u0e42\u0e44\7\u0130\2\2\u0e43\u0e42\3\2\2\2\u0e43\u0e44\3\2\2"+
		"\2\u0e44\u0e56\3\2\2\2\u0e45\u0e46\7\u012c\2\2\u0e46\u0e47\7v\2\2\u0e47"+
		"\u0e56\5\u02e4\u0173\2\u0e48\u0e4a\7\u00e9\2\2\u0e49\u0e48\3\2\2\2\u0e49"+
		"\u0e4a\3\2\2\2\u0e4a\u0e4b\3\2\2\2\u0e4b\u0e4c\7\u0102\2\2\u0e4c\u0e4d"+
		"\7q\2\2\u0e4d\u0e4e\7\u0107\2\2\u0e4e\u0e56\5\u02e4\u0173\2\u0e4f\u0e50"+
		"\7L\2\2\u0e50\u0e51\7H\2\2\u0e51\u0e56\5\u02e4\u0173\2\u0e52\u0e53\7\u0127"+
		"\2\2\u0e53\u0e54\7v\2\2\u0e54\u0e56\5\u041a\u020e\2\u0e55\u0e41\3\2\2"+
		"\2\u0e55\u0e45\3\2\2\2\u0e55\u0e49\3\2\2\2\u0e55\u0e4f\3\2\2\2\u0e55\u0e52"+
		"\3\2\2\2\u0e56\u0169\3\2\2\2\u0e57\u0e59\5\u047c\u023f\2\u0e58\u0e57\3"+
		"\2\2\2\u0e59\u0e5a\3\2\2\2\u0e5a\u0e58\3\2\2\2\u0e5a\u0e5b\3\2\2\2\u0e5b"+
		"\u016b\3\2\2\2\u0e5c\u0e5d\7E\2\2\u0e5d\u0e5e\7W\2\2\u0e5e\u0e5f\5\u0130"+
		"\u0099\2\u0e5f\u0e60\5\u016e\u00b8\2\u0e60\u016d\3\2\2\2\u0e61\u0e63\5"+
		"\u016a\u00b6\2\u0e62\u0e64\7\u0130\2\2\u0e63\u0e62\3\2\2\2\u0e63\u0e64"+
		"\3\2\2\2\u0e64\u0e76\3\2\2\2\u0e65\u0e66\7\u012c\2\2\u0e66\u0e67\7v\2"+
		"\2\u0e67\u0e76\5\u02e4\u0173\2\u0e68\u0e6a\7\u00e9\2\2\u0e69\u0e68\3\2"+
		"\2\2\u0e69\u0e6a\3\2\2\2\u0e6a\u0e6b\3\2\2\2\u0e6b\u0e6c\7\u0102\2\2\u0e6c"+
		"\u0e6d\7q\2\2\u0e6d\u0e6e\7\u0107\2\2\u0e6e\u0e76\5\u02e4\u0173\2\u0e6f"+
		"\u0e70\7L\2\2\u0e70\u0e71\7H\2\2\u0e71\u0e76\5\u02e4\u0173\2\u0e72\u0e73"+
		"\7\u0127\2\2\u0e73\u0e74\7v\2\2\u0e74\u0e76\5\u041a\u020e\2\u0e75\u0e61"+
		"\3\2\2\2\u0e75\u0e65\3\2\2\2\u0e75\u0e69\3\2\2\2\u0e75\u0e6f\3\2\2\2\u0e75"+
		"\u0e72\3\2\2\2\u0e76\u016f\3\2\2\2\u0e77\u0e78\7E\2\2\u0e78\u0e79\7\u01ef"+
		"\2\2\u0e79\u0e85\5\u02e4\u0173\2\u0e7a\u0e7b\7\u012c\2\2\u0e7b\u0e7c\7"+
		"v\2\2\u0e7c\u0e86\5\u02e4\u0173\2\u0e7d\u0e7e\7\u0127\2\2\u0e7e\u0e7f"+
		"\7v\2\2\u0e7f\u0e86\5\u041a\u020e\2\u0e80\u0e81\7L\2\2\u0e81\u0e86\5\u043e"+
		"\u0220\2\u0e82\u0e83\t\25\2\2\u0e83\u0e84\7M\2\2\u0e84\u0e86\5\u0478\u023d"+
		"\2\u0e85\u0e7a\3\2\2\2\u0e85\u0e7d\3\2\2\2\u0e85\u0e80\3\2\2\2\u0e85\u0e82"+
		"\3\2\2\2\u0e86\u0171\3\2\2\2\u0e87\u0e88\7E\2\2\u0e88\u0e89\7\u0131\2"+
		"\2\u0e89\u0e8a\5\u0130\u0099\2\u0e8a\u0e8b\5\u0168\u00b5\2\u0e8b\u0173"+
		"\3\2\2\2\u0e8c\u0e8d\7E\2\2\u0e8d\u0e8e\7\u0132\2\2\u0e8e\u0e8f\7q\2\2"+
		"\u0e8f\u0e90\5\u034a\u01a6\2\u0e90\u0e91\7\u012c\2\2\u0e91\u0e92\7v\2"+
		"\2\u0e92\u0e93\5\u02e4\u0173\2\u0e93\u0175\3\2\2\2\u0e94\u0e95\7E\2\2"+
		"\u0e95\u0e97\7\u0134\2\2\u0e96\u0e98\5\u0488\u0245\2\u0e97\u0e96\3\2\2"+
		"\2\u0e97\u0e98\3\2\2\2\u0e98\u0e99\3\2\2\2\u0e99\u0e9a\5\u034a\u01a6\2"+
		"\u0e9a\u0e9b\5\u0178\u00bd\2\u0e9b\u0177\3\2\2\2\u0e9c\u0ea5\5\u00be`"+
		"\2\u0e9d\u0ea5\5\u0432\u021a\2\u0e9e\u0e9f\7\u012c\2\2\u0e9f\u0ea0\7v"+
		"\2\2\u0ea0\u0ea5\5\u02e4\u0173\2\u0ea1\u0ea2\7L\2\2\u0ea2\u0ea3\7H\2\2"+
		"\u0ea3\u0ea5\5\u02e4\u0173\2\u0ea4\u0e9c\3\2\2\2\u0ea4\u0e9d\3\2\2\2\u0ea4"+
		"\u0e9e\3\2\2\2\u0ea4\u0ea1\3\2\2\2\u0ea5\u0179\3\2\2\2\u0ea6\u0ea7\7E"+
		"\2\2\u0ea7\u0ea8\7\u0206\2\2\u0ea8\u0eb4\5\u02e4\u0173\2\u0ea9\u0eaa\5"+
		"\u017c\u00bf\2\u0eaa\u0eab\5\u00c6d\2\u0eab\u0eb5\3\2\2\2\u0eac\u0eb5"+
		"\5\u017c\u00bf\2\u0ead\u0eb5\5\u00c6d\2\u0eae\u0eaf\7\u012c\2\2\u0eaf"+
		"\u0eb0\7v\2\2\u0eb0\u0eb5\5\u02e4\u0173\2\u0eb1\u0eb2\7\u0127\2\2\u0eb2"+
		"\u0eb3\7v\2\2\u0eb3\u0eb5\5\u041a\u020e\2\u0eb4\u0ea9\3\2\2\2\u0eb4\u0eac"+
		"\3\2\2\2\u0eb4\u0ead\3\2\2\2\u0eb4\u0eae\3\2\2\2\u0eb4\u0eb1\3\2\2\2\u0eb5"+
		"\u017b\3\2\2\2\u0eb6\u0eb7\7\u0187\2\2\u0eb7\u0eb8\t\26\2\2\u0eb8\u017d"+
		"\3\2\2\2\u0eb9\u0eba\7E\2\2\u0eba\u0ed2\7\u0139\2\2\u0ebb\u0ebd\5\u0488"+
		"\u0245\2\u0ebc\u0ebb\3\2\2\2\u0ebc\u0ebd\3\2\2\2\u0ebd\u0ebe\3\2\2\2\u0ebe"+
		"\u0ebf\5\u03cc\u01e7\2\u0ebf\u0ec0\7L\2\2\u0ec0\u0ec1\7\u0139\2\2\u0ec1"+
		"\u0ec2\5\u0410\u0209\2\u0ec2\u0ed3\3\2\2\2\u0ec3\u0ec4\5\u03cc\u01e7\2"+
		"\u0ec4\u0ec5\7\u012c\2\2\u0ec5\u0ec6\7v\2\2\u0ec6\u0ec7\5\u02e4\u0173"+
		"\2\u0ec7\u0ed3\3\2\2\2\u0ec8\u0ec9\5\u03cc\u01e7\2\u0ec9\u0eca\7L\2\2"+
		"\u0eca\u0ecb\7H\2\2\u0ecb\u0ecc\5\u02e4\u0173\2\u0ecc\u0ed3\3\2\2\2\u0ecd"+
		"\u0ece\5\u03cc\u01e7\2\u0ece\u0ecf\7\u0127\2\2\u0ecf\u0ed0\7v\2\2\u0ed0"+
		"\u0ed1\5\u041a\u020e\2\u0ed1\u0ed3\3\2\2\2\u0ed2\u0ebc\3\2\2\2\u0ed2\u0ec3"+
		"\3\2\2\2\u0ed2\u0ec8\3\2\2\2\u0ed2\u0ecd\3\2\2\2\u0ed3\u017f\3\2\2\2\u0ed4"+
		"\u0ed5\7E\2\2\u0ed5\u0ed6\7\u0207\2\2\u0ed6\u0eef\5\u02e4\u0173\2\u0ed7"+
		"\u0ed8\7\u012c\2\2\u0ed8\u0ed9\7v\2\2\u0ed9\u0ef0\5\u02e4\u0173\2\u0eda"+
		"\u0edb\7\u0127\2\2\u0edb\u0edc\7v\2\2\u0edc\u0ef0\5\u041a\u020e\2\u0edd"+
		"\u0ede\7L\2\2\u0ede\u0ef0\5\u043e\u0220\2\u0edf\u0ee0\7\u01d6\2\2\u0ee0"+
		"\u0ef0\7\u022f\2\2\u0ee1\u0ee2\7\u01fb\2\2\u0ee2\u0ee5\7\u01ef\2\2\u0ee3"+
		"\u0ee4\7]\2\2\u0ee4\u0ee6\5\u043e\u0220\2\u0ee5\u0ee3\3\2\2\2\u0ee5\u0ee6"+
		"\3\2\2\2\u0ee6\u0ef0\3\2\2\2\u0ee7\u0ee8\7L\2\2\u0ee8\u0ee9\7\u01ef\2"+
		"\2\u0ee9\u0eec\5\u0182\u00c2\2\u0eea\u0eeb\7]\2\2\u0eeb\u0eed\5\u043e"+
		"\u0220\2\u0eec\u0eea\3\2\2\2\u0eec\u0eed\3\2\2\2\u0eed\u0ef0\3\2\2\2\u0eee"+
		"\u0ef0\t\13\2\2\u0eef\u0ed7\3\2\2\2\u0eef\u0eda\3\2\2\2\u0eef\u0edd\3"+
		"\2\2\2\u0eef\u0edf\3\2\2\2\u0eef\u0ee1\3\2\2\2\u0eef\u0ee7\3\2\2\2\u0eef"+
		"\u0eee\3\2\2\2\u0ef0\u0181\3\2\2\2\u0ef1\u0ef6\5\u0184\u00c3\2\u0ef2\u0ef3"+
		"\7)\2\2\u0ef3\u0ef5\5\u0184\u00c3\2\u0ef4\u0ef2\3\2\2\2\u0ef5\u0ef8\3"+
		"\2\2\2\u0ef6\u0ef4\3\2\2\2\u0ef6\u0ef7\3\2\2\2\u0ef7\u0183\3\2\2\2\u0ef8"+
		"\u0ef6\3\2\2\2\u0ef9\u0efa\5\u0444\u0223\2\u0efa\u0185\3\2\2\2\u0efb\u0efc"+
		"\7E\2\2\u0efc\u0f01\7\u01a9\2\2\u0efd\u0efe\7L\2\2\u0efe\u0f02\5\u0470"+
		"\u0239\2\u0eff\u0f00\7\u012e\2\2\u0f00\u0f02\5\u0476\u023c\2\u0f01\u0efd"+
		"\3\2\2\2\u0f01\u0eff\3\2\2\2\u0f02\u0187\3\2\2\2\u0f03\u0f04\7E\2\2\u0f04"+
		"\u0f05\7\u013b\2\2\u0f05\u0f0f\5\u02e4\u0173\2\u0f06\u0f10\7L\2\2\u0f07"+
		"\u0f08\7\u012e\2\2\u0f08\u0f10\5\u03f8\u01fd\2\u0f09\u0f0a\7\u012c\2\2"+
		"\u0f0a\u0f0b\7v\2\2\u0f0b\u0f10\5\u02e4\u0173\2\u0f0c\u0f0d\7\u0127\2"+
		"\2\u0f0d\u0f0e\7v\2\2\u0f0e\u0f10\5\u041a\u020e\2\u0f0f\u0f06\3\2\2\2"+
		"\u0f0f\u0f07\3\2\2\2\u0f0f\u0f09\3\2\2\2\u0f0f\u0f0c\3\2\2\2\u0f10\u0189"+
		"\3\2\2\2\u0f11\u0f12\7E\2\2\u0f12\u0f13\7\u00be\2\2\u0f13\u0f14\7\u0208"+
		"\2\2\u0f14\u0f15\7\u01c0\2\2\u0f15\u0f16\5\u03cc\u01e7\2\u0f16\u0f17\5"+
		"\u018c\u00c7\2\u0f17\u018b\3\2\2\2\u0f18\u0f19\7\u012c\2\2\u0f19\u0f1a"+
		"\7v\2\2\u0f1a\u0f3d\5\u02e4\u0173\2\u0f1b\u0f1c\7L\2\2\u0f1c\u0f1d\7H"+
		"\2\2\u0f1d\u0f3d\5\u02e4\u0173\2\u0f1e\u0f1f\7\u0127\2\2\u0f1f\u0f20\7"+
		"v\2\2\u0f20\u0f3d\5\u041a\u020e\2\u0f21\u0f22\t\27\2\2\u0f22\u0f23\7\u01e4"+
		"\2\2\u0f23\u0f24\7u\2\2\u0f24\u0f26\5\u03d0\u01e9\2\u0f25\u0f27\7]\2\2"+
		"\u0f26\u0f25\3\2\2\2\u0f26\u0f27\3\2\2\2\u0f27\u0f28\3\2\2\2\u0f28\u0f29"+
		"\5\u018e\u00c8\2\u0f29\u0f3d\3\2\2\2\u0f2a\u0f2b\7E\2\2\u0f2b\u0f2e\7"+
		"\u01e4\2\2\u0f2c\u0f2d\7u\2\2\u0f2d\u0f2f\5\u03d0\u01e9\2\u0f2e\u0f2c"+
		"\3\2\2\2\u0f2e\u0f2f\3\2\2\2\u0f2f\u0f30\3\2\2\2\u0f30\u0f31\7\u01f9\2"+
		"\2\u0f31\u0f32\5\u03cc\u01e7\2\u0f32\u0f33\7]\2\2\u0f33\u0f34\5\u03cc"+
		"\u01e7\2\u0f34\u0f3d\3\2\2\2\u0f35\u0f36\7F\2\2\u0f36\u0f38\7\u01e4\2"+
		"\2\u0f37\u0f39\5\u0488\u0245\2\u0f38\u0f37\3\2\2\2\u0f38\u0f39\3\2\2\2"+
		"\u0f39\u0f3a\3\2\2\2\u0f3a\u0f3b\7u\2\2\u0f3b\u0f3d\5\u03d0\u01e9\2\u0f3c"+
		"\u0f18\3\2\2\2\u0f3c\u0f1b\3\2\2\2\u0f3c\u0f1e\3\2\2\2\u0f3c\u0f21\3\2"+
		"\2\2\u0f3c\u0f2a\3\2\2\2\u0f3c\u0f35\3\2\2\2\u0f3d\u018d\3\2\2\2\u0f3e"+
		"\u0f43\5\u03cc\u01e7\2\u0f3f\u0f40\7)\2\2\u0f40\u0f42\5\u03cc\u01e7\2"+
		"\u0f41\u0f3f\3\2\2\2\u0f42\u0f45\3\2\2\2\u0f43\u0f41\3\2\2\2\u0f43\u0f44"+
		"\3\2\2\2\u0f44\u018f\3\2\2\2\u0f45\u0f43\3\2\2\2\u0f46\u0f47\7E\2\2\u0f47"+
		"\u0f48\7\u00be\2\2\u0f48\u0f49\7\u0208\2\2\u0f49\u0f4a\7\u01c3\2\2\u0f4a"+
		"\u0f55\5\u03cc\u01e7\2\u0f4b\u0f4c\7\u012c\2\2\u0f4c\u0f4d\7v\2\2\u0f4d"+
		"\u0f56\5\u02e4\u0173\2\u0f4e\u0f4f\7L\2\2\u0f4f\u0f50\7H\2\2\u0f50\u0f56"+
		"\5\u02e4\u0173\2\u0f51\u0f52\7\u0127\2\2\u0f52\u0f53\7v\2\2\u0f53\u0f56"+
		"\5\u041a\u020e\2\u0f54\u0f56\5\u043e\u0220\2\u0f55\u0f4b\3\2\2\2\u0f55"+
		"\u0f4e\3\2\2\2\u0f55\u0f51\3\2\2\2\u0f55\u0f54\3\2\2\2\u0f56\u0191\3\2"+
		"\2\2\u0f57\u0f58\7E\2\2\u0f58\u0f59\7\u00be\2\2\u0f59\u0f5a\7\u0208\2"+
		"\2\u0f5a\u0f63\7\u01ec\2\2\u0f5b\u0f5c\5\u03cc\u01e7\2\u0f5c\u0f5d\7\u012c"+
		"\2\2\u0f5d\u0f5e\7v\2\2\u0f5e\u0f5f\5\u02e4\u0173\2\u0f5f\u0f64\3\2\2"+
		"\2\u0f60\u0f61\7L\2\2\u0f61\u0f62\7H\2\2\u0f62\u0f64\5\u02e4\u0173\2\u0f63"+
		"\u0f5b\3\2\2\2\u0f63\u0f60\3\2\2\2\u0f64\u0193\3\2\2\2\u0f65\u0f66\7E"+
		"\2\2\u0f66\u0f67\7\u00be\2\2\u0f67\u0f68\7\u0208\2\2\u0f68\u0f71\7\u0217"+
		"\2\2\u0f69\u0f6a\5\u03cc\u01e7\2\u0f6a\u0f6b\7\u012c\2\2\u0f6b\u0f6c\7"+
		"v\2\2\u0f6c\u0f6d\5\u02e4\u0173\2\u0f6d\u0f72\3\2\2\2\u0f6e\u0f6f\7L\2"+
		"\2\u0f6f\u0f70\7H\2\2\u0f70\u0f72\5\u02e4\u0173\2\u0f71\u0f69\3\2\2\2"+
		"\u0f71\u0f6e\3\2\2\2\u0f72\u0195\3\2\2\2\u0f73\u0f74\7E\2\2\u0f74\u0f75"+
		"\7X\2\2\u0f75\u0f76\5\u02e4\u0173\2\u0f76\u0f77\7q\2\2\u0f77\u0f82\5\u034a"+
		"\u01a6\2\u0f78\u0f79";
	private static final String _serializedATNSegment2 =
		"\7\u012c\2\2\u0f79\u0f7a\7v\2\2\u0f7a\u0f83\5\u02e4\u0173\2\u0f7b\u0f7d"+
		"\7\u00e9\2\2\u0f7c\u0f7b\3\2\2\2\u0f7c\u0f7d\3\2\2\2\u0f7d\u0f7e\3\2\2"+
		"\2\u0f7e\u0f7f\7\u0102\2\2\u0f7f\u0f80\7q\2\2\u0f80\u0f81\7\u0107\2\2"+
		"\u0f81\u0f83\5\u02e4\u0173\2\u0f82\u0f78\3\2\2\2\u0f82\u0f7c\3\2\2\2\u0f83"+
		"\u0197\3\2\2\2\u0f84\u0f85\7E\2\2\u0f85\u0f86\7\u00ba\2\2\u0f86\u0f87"+
		"\5\u03cc\u01e7\2\u0f87\u0f88\5\u019a\u00ce\2\u0f88\u0199\3\2\2\2\u0f89"+
		"\u0fb0\5\u019c\u00cf\2\u0f8a\u0f8b\7K\2\2\u0f8b\u0f8d\7\u00c7\2\2\u0f8c"+
		"\u0f8e\5\u0486\u0244\2\u0f8d\u0f8c\3\2\2\2\u0f8d\u0f8e\3\2\2\2\u0f8e\u0f8f"+
		"\3\2\2\2\u0f8f\u0f92\7\u022f\2\2\u0f90\u0f91\t\30\2\2\u0f91\u0f93\7\u022f"+
		"\2\2\u0f92\u0f90\3\2\2\2\u0f92\u0f93\3\2\2\2\u0f93\u0fb0\3\2\2\2\u0f94"+
		"\u0f95\7\u012c\2\2\u0f95\u0f96\7\u00c7\2\2\u0f96\u0f97\7\u022f\2\2\u0f97"+
		"\u0f98\7v\2\2\u0f98\u0fb0\7\u022f\2\2\u0f99\u0f9a\7\u012c\2\2\u0f9a\u0f9b"+
		"\7v\2\2\u0f9b\u0fb0\5\u02e4\u0173\2\u0f9c\u0f9d\7\u012c\2\2\u0f9d\u0f9e"+
		"\7\u01b1\2\2\u0f9e\u0f9f\5\u02e4\u0173\2\u0f9f\u0fa0\7v\2\2\u0fa0\u0fa2"+
		"\5\u02e4\u0173\2\u0fa1\u0fa3\5\u00ceh\2\u0fa2\u0fa1\3\2\2\2\u0fa2\u0fa3"+
		"\3\2\2\2\u0fa3\u0fb0\3\2\2\2\u0fa4\u0fa5\7L\2\2\u0fa5\u0fa6\7H\2\2\u0fa6"+
		"\u0fb0\5\u02e4\u0173\2\u0fa7\u0fa8\7L\2\2\u0fa8\u0fa9\7#\2\2\u0fa9\u0faa"+
		"\5\u00ecw\2\u0faa\u0fab\7$\2\2\u0fab\u0fb0\3\2\2\2\u0fac\u0fad\7\u0127"+
		"\2\2\u0fad\u0fae\7v\2\2\u0fae\u0fb0\5\u041a\u020e\2\u0faf\u0f89\3\2\2"+
		"\2\u0faf\u0f8a\3\2\2\2\u0faf\u0f94\3\2\2\2\u0faf\u0f99\3\2\2\2\u0faf\u0f9c"+
		"\3\2\2\2\u0faf\u0fa4\3\2\2\2\u0faf\u0fa7\3\2\2\2\u0faf\u0fac\3\2\2\2\u0fb0"+
		"\u019b\3\2\2\2\u0fb1\u0fb4\5\u019e\u00d0\2\u0fb2\u0fb3\7)\2\2\u0fb3\u0fb5"+
		"\5\u019e\u00d0\2\u0fb4\u0fb2\3\2\2\2\u0fb4\u0fb5\3\2\2\2\u0fb5\u019d\3"+
		"\2\2\2\u0fb6\u0fb7\7K\2\2\u0fb7\u0fb8\7\u01b1\2\2\u0fb8\u0fba\5\u03c8"+
		"\u01e5\2\u0fb9\u0fbb\5\u00ceh\2\u0fba\u0fb9\3\2\2\2\u0fba\u0fbb\3\2\2"+
		"\2\u0fbb\u0fd8\3\2\2\2\u0fbc\u0fbd\7F\2\2\u0fbd\u0fbe\7\u01b1\2\2\u0fbe"+
		"\u0fbf\5\u0488\u0245\2\u0fbf\u0fc1\5\u034c\u01a7\2\u0fc0\u0fc2\5\u00ce"+
		"h\2\u0fc1\u0fc0\3\2\2\2\u0fc1\u0fc2\3\2\2\2\u0fc2\u0fd8\3\2\2\2\u0fc3"+
		"\u0fc4\7F\2\2\u0fc4\u0fc5\7\u01b1\2\2\u0fc5\u0fc7\5\u034c\u01a7\2\u0fc6"+
		"\u0fc8\5\u00ceh\2\u0fc7\u0fc6\3\2\2\2\u0fc7\u0fc8\3\2\2\2\u0fc8\u0fd8"+
		"\3\2\2\2\u0fc9\u0fca\7E\2\2\u0fca\u0fcb\7\u01b1\2\2\u0fcb\u0fcd\5\u034c"+
		"\u01a7\2\u0fcc\u0fce\5\u00d2j\2\u0fcd\u0fcc\3\2\2\2\u0fcd\u0fce\3\2\2"+
		"\2\u0fce\u0fcf\3\2\2\2\u0fcf\u0fd0\7\u00ba\2\2\u0fd0\u0fd2\5\u036c\u01b7"+
		"\2\u0fd1\u0fd3\5\u03ca\u01e6\2\u0fd2\u0fd1\3\2\2\2\u0fd2\u0fd3\3\2\2\2"+
		"\u0fd3\u0fd5\3\2\2\2\u0fd4\u0fd6\5\u00ceh\2\u0fd5\u0fd4\3\2\2\2\u0fd5"+
		"\u0fd6\3\2\2\2\u0fd6\u0fd8\3\2\2\2\u0fd7\u0fb6\3\2\2\2\u0fd7\u0fbc\3\2"+
		"\2\2\u0fd7\u0fc3\3\2\2\2\u0fd7\u0fc9\3\2\2\2\u0fd8\u019f\3\2\2\2\u0fd9"+
		"\u0fda\7E\2\2\u0fda\u0fdb\7\u00f2\2\2\u0fdb\u0fdc\7\u01e4\2\2\u0fdc\u0fdd"+
		"\7u\2\2\u0fdd\u0fde\5\u01a2\u00d2\2\u0fde\u0fdf\7\u0206\2\2\u0fdf\u0fe0"+
		"\5\u02e4\u0173\2\u0fe0\u0fe1\5\u00c6d\2\u0fe1\u01a1\3\2\2\2\u0fe2\u0fe5"+
		"\5\u041a\u020e\2\u0fe3\u0fe5\7\u00f2\2\2\u0fe4\u0fe2\3\2\2\2\u0fe4\u0fe3"+
		"\3\2\2\2\u0fe5\u01a3\3\2\2\2\u0fe6\u0fe7\7E\2\2\u0fe7\u0fe9\7Z\2\2\u0fe8"+
		"\u0fea\5\u0488\u0245\2\u0fe9\u0fe8\3\2\2\2\u0fe9\u0fea\3\2\2\2\u0fea\u0feb"+
		"\3\2\2\2\u0feb\u0fec\5\u034a\u01a6\2\u0fec\u0fed\5\u01a6\u00d4\2\u0fed"+
		"\u01a5\3\2\2\2\u0fee\u0ffe\5\u00be`\2\u0fef\u0ff0\7\u012c\2\2\u0ff0\u0ff1"+
		"\7v\2\2\u0ff1\u0ffe\5\u02e4\u0173\2\u0ff2\u0ff4\7\u012c\2\2\u0ff3\u0ff5"+
		"\7N\2\2\u0ff4\u0ff3\3\2\2\2\u0ff4\u0ff5\3\2\2\2\u0ff5\u0ff6\3\2\2\2\u0ff6"+
		"\u0ff7\5\u02e4\u0173\2\u0ff7\u0ff8\7v\2\2\u0ff8\u0ff9\5\u02e4\u0173\2"+
		"\u0ff9\u0ffe\3\2\2\2\u0ffa\u0ffb\7L\2\2\u0ffb\u0ffc\7H\2\2\u0ffc\u0ffe"+
		"\5\u02e4\u0173\2\u0ffd\u0fee\3\2\2\2\u0ffd\u0fef\3\2\2\2\u0ffd\u0ff2\3"+
		"\2\2\2\u0ffd\u0ffa\3\2\2\2\u0ffe\u01a7\3\2\2\2\u0fff\u1002\7\u00b1\2\2"+
		"\u1000\u1003\5\u02f8\u017d\2\u1001\u1003\7\u0081\2\2\u1002\u1000\3\2\2"+
		"\2\u1002\u1001\3\2\2\2\u1003\u01a9\3\2\2\2\u1004\u1006\7\u00f6\2\2\u1005"+
		"\u1007\7\u022a\2\2\u1006\u1005\3\2\2\2\u1006\u1007\3\2\2\2\u1007\u1010"+
		"\3\2\2\2\u1008\u100a\5\u034a\u01a6\2\u1009\u100b\5\u01ac\u00d7\2\u100a"+
		"\u1009\3\2\2\2\u100a\u100b\3\2\2\2\u100b\u1011\3\2\2\2\u100c\u100d\5\u02e4"+
		"\u0173\2\u100d\u100e\7q\2\2\u100e\u100f\5\u034a\u01a6\2\u100f\u1011\3"+
		"\2\2\2\u1010\u1008\3\2\2\2\u1010\u100c\3\2\2\2\u1010\u1011\3\2\2\2\u1011"+
		"\u01ab\3\2\2\2\u1012\u1013\7n\2\2\u1013\u1014\5\u02e4\u0173\2\u1014\u01ad"+
		"\3\2\2\2\u1015\u1016\7\u01c1\2\2\u1016\u1017\7q\2\2\u1017\u1018\5\u01b0"+
		"\u00d9\2\u1018\u01af\3\2\2\2\u1019\u101a\5\u01b8\u00dd\2\u101a\u101b\5"+
		"\u03cc\u01e7\2\u101b\u101c\7y\2\2\u101c\u101d\5\u01ba\u00de\2\u101d\u1089"+
		"\3\2\2\2\u101e\u101f\7N\2\2\u101f\u1020\5\u03cc\u01e7\2\u1020\u1021\7"+
		"y\2\2\u1021\u1022\5\u01ba\u00de\2\u1022\u1089\3\2\2\2\u1023\u1024\5\u01b4"+
		"\u00db\2\u1024\u1025\5\u02e4\u0173\2\u1025\u1026\7y\2\2\u1026\u1027\5"+
		"\u01ba\u00de\2\u1027\u1089\3\2\2\2\u1028\u1029\7\u00ba\2\2\u1029\u102a"+
		"\5\u036c\u01b7\2\u102a\u102b\7y\2\2\u102b\u102c\5\u01ba\u00de\2\u102c"+
		"\u1089\3\2\2\2\u102d\u102e\7\u0103\2\2\u102e\u102f\5\u036c\u01b7\2\u102f"+
		"\u1030\7y\2\2\u1030\u1031\5\u01ba\u00de\2\u1031\u1089\3\2\2\2\u1032\u1033"+
		"\7\u01ae\2\2\u1033\u1034\5\u0134\u009b\2\u1034\u1035\7y\2\2\u1035\u1036"+
		"\5\u01ba\u00de\2\u1036\u1089\3\2\2\2\u1037\u1038\7W\2\2\u1038\u1039\5"+
		"\u0130\u0099\2\u1039\u103a\7y\2\2\u103a\u103b\5\u01ba\u00de\2\u103b\u1089"+
		"\3\2\2\2\u103c\u103d\7\u018d\2\2\u103d\u103e\5\u00f2z\2\u103e\u103f\7"+
		"y\2\2\u103f\u1040\5\u01ba\u00de\2\u1040\u1089\3\2\2\2\u1041\u1042\7P\2"+
		"\2\u1042\u1043\5\u02e4\u0173\2\u1043\u1044\7q\2\2\u1044\u1045\5\u03cc"+
		"\u01e7\2\u1045\u1046\7y\2\2\u1046\u1047\5\u01ba\u00de\2\u1047\u1089\3"+
		"\2\2\2\u1048\u1049\7P\2\2\u1049\u104a\5\u02e4\u0173\2\u104a\u104b\7q\2"+
		"\2\u104b\u104c\7\u0103\2\2\u104c\u104d\5\u03cc\u01e7\2\u104d\u104e\7y"+
		"\2\2\u104e\u104f\5\u01ba\u00de\2\u104f\u1089\3\2\2\2\u1050\u1051\5\u01b2"+
		"\u00da\2\u1051\u1052\5\u02e4\u0173\2\u1052\u1053\7q\2\2\u1053\u1054\5"+
		"\u03cc\u01e7\2\u1054\u1055\7y\2\2\u1055\u1056\5\u01ba\u00de\2\u1056\u1089"+
		"\3\2\2\2\u1057\u1058\7Y\2\2\u1058\u1059\5\u0130\u0099\2\u1059\u105a\7"+
		"y\2\2\u105a\u105b\5\u01ba\u00de\2\u105b\u1089\3\2\2\2\u105c\u105d\7\u0131"+
		"\2\2\u105d\u105e\5\u0130\u0099\2\u105e\u105f\7y\2\2\u105f\u1060\5\u01ba"+
		"\u00de\2\u1060\u1089\3\2\2\2\u1061\u1062\7\u021b\2\2\u1062\u1063\7u\2"+
		"\2\u1063\u1064\5\u036c\u01b7\2\u1064\u1065\7\u0118\2\2\u1065\u1066\5\u02e4"+
		"\u0173\2\u1066\u1067\7y\2\2\u1067\u1068\5\u01ba\u00de\2\u1068\u1089\3"+
		"\2\2\2\u1069\u106a\7\u018d\2\2\u106a\u106b\7\u01bf\2\2\u106b\u106c\5\u03cc"+
		"\u01e7\2\u106c\u106d\7n\2\2\u106d\u106e\5\u02e4\u0173\2\u106e\u106f\7"+
		"y\2\2\u106f\u1070\5\u01ba\u00de\2\u1070\u1089\3\2\2\2\u1071\u1072\7\u018d"+
		"\2\2\u1072\u1073\7\u01d8\2\2\u1073\u1074\5\u03cc\u01e7\2\u1074\u1075\7"+
		"n\2\2\u1075\u1076\5\u02e4\u0173\2\u1076\u1077\7y\2\2\u1077\u1078\5\u01ba"+
		"\u00de\2\u1078\u1089\3\2\2\2\u1079\u107a\7\u0119\2\2\u107a\u107b\7\u0122"+
		"\2\2\u107b\u107c\5\u0424\u0213\2\u107c\u107d\7y\2\2\u107d\u107e\5\u01ba"+
		"\u00de\2\u107e\u1089\3\2\2\2\u107f\u1080\7b\2\2\u1080\u1081\7#\2\2\u1081"+
		"\u1082\5\u036c\u01b7\2\u1082\u1083\7p\2\2\u1083\u1084\5\u036c\u01b7\2"+
		"\u1084\u1085\7$\2\2\u1085\u1086\7y\2\2\u1086\u1087\5\u01ba\u00de\2\u1087"+
		"\u1089\3\2\2\2\u1088\u1019\3\2\2\2\u1088\u101e\3\2\2\2\u1088\u1023\3\2"+
		"\2\2\u1088\u1028\3\2\2\2\u1088\u102d\3\2\2\2\u1088\u1032\3\2\2\2\u1088"+
		"\u1037\3\2\2\2\u1088\u103c\3\2\2\2\u1088\u1041\3\2\2\2\u1088\u1048\3\2"+
		"\2\2\u1088\u1050\3\2\2\2\u1088\u1057\3\2\2\2\u1088\u105c\3\2\2\2\u1088"+
		"\u1061\3\2\2\2\u1088\u1069\3\2\2\2\u1088\u1071\3\2\2\2\u1088\u1079\3\2"+
		"\2\2\u1088\u107f\3\2\2\2\u1089\u01b1\3\2\2\2\u108a\u108b\t\31\2\2\u108b"+
		"\u01b3\3\2\2\2\u108c\u1092\5\u01b6\u00dc\2\u108d\u1092\7\u00fe\2\2\u108e"+
		"\u1092\7\u00ee\2\2\u108f\u1092\7\u0207\2\2\u1090\u1092\7\u013b\2\2\u1091"+
		"\u108c\3\2\2\2\u1091\u108d\3\2\2\2\u1091\u108e\3\2\2\2\u1091\u108f\3\2"+
		"\2\2\u1091\u1090\3\2\2\2\u1092\u01b5\3\2\2\2\u1093\u1094\7\u01ac\2\2\u1094"+
		"\u10a3\7\u01e6\2\2\u1095\u1096\7\u01d4\2\2\u1096\u10a3\7X\2\2\u1097\u10a3"+
		"\7\u0107\2\2\u1098\u1099\7S\2\2\u1099\u109a\7\u00fd\2\2\u109a\u10a3\7"+
		"\u0226\2\2\u109b\u109d\7\u01eb\2\2\u109c\u109b\3\2\2\2\u109c\u109d\3\2"+
		"\2\2\u109d\u109e\3\2\2\2\u109e\u10a3\7\u0118\2\2\u109f\u10a3\7\u01ef\2"+
		"\2\u10a0\u10a3\7H\2\2\u10a1\u10a3\7\u0206\2\2\u10a2\u1093\3\2\2\2\u10a2"+
		"\u1095\3\2\2\2\u10a2\u1097\3\2\2\2\u10a2\u1098\3\2\2\2\u10a2\u109c\3\2"+
		"\2\2\u10a2\u109f\3\2\2\2\u10a2\u10a0\3\2\2\2\u10a2\u10a1\3\2\2\2\u10a3"+
		"\u01b7\3\2\2\2\u10a4\u10bc\7M\2\2\u10a5\u10bc\7\u0134\2\2\u10a6\u10bc"+
		"\7Z\2\2\u10a7\u10a8\7\u018c\2\2\u10a8\u10bc\7Z\2\2\u10a9\u10bc\7O\2\2"+
		"\u10aa\u10ab\7S\2\2\u10ab\u10bc\7M\2\2\u10ac\u10bc\7\u00b5\2\2\u10ad\u10bc"+
		"\7\u01b7\2\2\u10ae\u10bc\7\u0139\2\2\u10af\u10b0\7\u00be\2\2\u10b0\u10b1"+
		"\7\u0208\2\2\u10b1\u10bc\7\u01ec\2\2\u10b2\u10b3\7\u00be\2\2\u10b3\u10b4"+
		"\7\u0208\2\2\u10b4\u10bc\7\u01c3\2\2\u10b5\u10b6\7\u00be\2\2\u10b6\u10b7"+
		"\7\u0208\2\2\u10b7\u10bc\7\u0217\2\2\u10b8\u10b9\7\u00be\2\2\u10b9\u10ba"+
		"\7\u0208\2\2\u10ba\u10bc\7\u01c0\2\2\u10bb\u10a4\3\2\2\2\u10bb\u10a5\3"+
		"\2\2\2\u10bb\u10a6\3\2\2\2\u10bb\u10a7\3\2\2\2\u10bb\u10a9\3\2\2\2\u10bb"+
		"\u10aa\3\2\2\2\u10bb\u10ac\3\2\2\2\u10bb\u10ad\3\2\2\2\u10bb\u10ae\3\2"+
		"\2\2\u10bb\u10af\3\2\2\2\u10bb\u10b2\3\2\2\2\u10bb\u10b5\3\2\2\2\u10bb"+
		"\u10b8\3\2\2\2\u10bc\u01b9\3\2\2\2\u10bd\u10be\t\26\2\2\u10be\u01bb\3"+
		"\2\2\2\u10bf\u10c0\7D\2\2\u10c0\u10c1\7\u01ac\2\2\u10c1\u10c2\7\u01e6"+
		"\2\2\u10c2\u10c3\5\u02e4\u0173\2\u10c3\u10c4\7\u00ba\2\2\u10c4\u10c5\t"+
		"\32\2\2\u10c5\u10c6\7\u01df\2\2\u10c6\u10c7\5\u0146\u00a4\2\u10c7\u01bd"+
		"\3\2\2\2\u10c8\u10cb\7D\2\2\u10c9\u10ca\7x\2\2\u10ca\u10cc\7\u01f9\2\2"+
		"\u10cb\u10c9\3\2\2\2\u10cb\u10cc\3\2\2\2\u10cc\u10cd\3\2\2\2\u10cd\u10ce"+
		"\7\u01ae\2\2\u10ce\u10d3\5\u0346\u01a4\2\u10cf\u10d0\5\u00f8}\2\u10d0"+
		"\u10d1\5\u043e\u0220\2\u10d1\u10d4\3\2\2\2\u10d2\u10d4\5\u01c0\u00e1\2"+
		"\u10d3\u10cf\3\2\2\2\u10d3\u10d2\3\2\2\2\u10d4\u01bf\3\2\2\2\u10d5\u10d6"+
		"\7#\2\2\u10d6\u10d7\5\u01c2\u00e2\2\u10d7\u10d8\7$\2\2\u10d8\u01c1\3\2"+
		"\2\2\u10d9\u10de\5\u01c4\u00e3\2\u10da\u10db\7)\2\2\u10db\u10dd\5\u01c4"+
		"\u00e3\2\u10dc\u10da\3\2\2\2\u10dd\u10e0\3\2\2\2\u10de\u10dc\3\2\2\2\u10de"+
		"\u10df\3\2\2\2\u10df\u01c3\3\2\2\2\u10e0\u10de\3\2\2\2\u10e1\u10e2\5\u02d2"+
		"\u016a\2\u10e2\u10e3\7\33\2\2\u10e3\u10e4\5\u03fe\u0200\2\u10e4\u01c5"+
		"\3\2\2\2\u10e5\u10e6\7D\2\2\u10e6\u10e7\7b\2\2\u10e7\u10e8\7#\2\2\u10e8"+
		"\u10e9\5\u036c\u01b7\2\u10e9\u10ea\7p\2\2\u10ea\u10eb\5\u036c\u01b7\2"+
		"\u10eb\u10fc\7$\2\2\u10ec\u10ed\7]\2\2\u10ed\u10ee\7W\2\2\u10ee\u10f0"+
		"\5\u0130\u0099\2\u10ef\u10f1\5\u01c8\u00e5\2\u10f0\u10ef\3\2\2\2\u10f0"+
		"\u10f1\3\2\2\2\u10f1\u10fd\3\2\2\2\u10f2\u10f3\7\u0144\2\2\u10f3\u10f5"+
		"\7W\2\2\u10f4\u10f6\5\u01c8\u00e5\2\u10f5\u10f4\3\2\2\2\u10f5\u10f6\3"+
		"\2\2\2\u10f6\u10fd\3\2\2\2\u10f7\u10f8\7]\2\2\u10f8\u10fa\7\u022d\2\2"+
		"\u10f9\u10fb\5\u01c8\u00e5\2\u10fa\u10f9\3\2\2\2\u10fa\u10fb\3\2\2\2\u10fb"+
		"\u10fd\3\2\2\2\u10fc\u10ec\3\2\2\2\u10fc\u10f2\3\2\2\2\u10fc\u10f7\3\2"+
		"\2\2\u10fd\u01c7\3\2\2\2\u10fe\u10ff\7p\2\2\u10ff\u1103\7\u01d0\2\2\u1100"+
		"\u1101\7p\2\2\u1101\u1103\7\u01b5\2\2\u1102\u10fe\3\2\2\2\u1102\u1100"+
		"\3\2\2\2\u1103\u01c9\3\2\2\2\u1104\u1105\7D\2\2\u1105\u1107\7\u00b5\2"+
		"\2\u1106\u1108\5\u0486\u0244\2\u1107\u1106\3\2\2\2\u1107\u1108\3\2\2\2"+
		"\u1108\u1110\3\2\2\2\u1109\u110a\5\u03cc\u01e7\2\u110a\u110b\5\u043e\u0220"+
		"\2\u110b\u1111\3\2\2\2\u110c\u110d\5\u03cc\u01e7\2\u110d\u110e\7e\2\2"+
		"\u110e\u110f\5\u03cc\u01e7\2\u110f\u1111\3\2\2\2\u1110\u1109\3\2\2\2\u1110"+
		"\u110c\3\2\2\2\u1111\u01cb\3\2\2\2\u1112\u1114\7D\2\2\u1113\u1115\7\u00a4"+
		"\2\2\u1114\u1113\3\2\2\2\u1114\u1115\3\2\2\2\u1115\u1116\3\2\2\2\u1116"+
		"\u1117\7\u01b7\2\2\u1117\u1118\5\u03cc\u01e7\2\u1118\u1119\7u\2\2\u1119"+
		"\u111a\7\u022f\2\2\u111a\u111b\7v\2\2\u111b\u111c\7\u022f\2\2\u111c\u111d"+
		"\7e\2\2\u111d\u111e\5\u03cc\u01e7\2\u111e\u01cd\3\2\2\2\u111f\u1120\7"+
		"D\2\2\u1120\u1121\7\u0103\2\2\u1121\u1123\5\u03cc\u01e7\2\u1122\u1124"+
		"\7p\2\2\u1123\u1122\3\2\2\2\u1123\u1124\3\2\2\2\u1124\u1125\3\2\2\2\u1125"+
		"\u1126\5\u036c\u01b7\2\u1126\u1127\5\22\n\2\u1127\u01cf\3\2\2\2\u1128"+
		"\u1129\7D\2\2\u1129\u112a\7\u01d4\2\2\u112a\u112b\7X\2\2\u112b\u112c\5"+
		"\u02e4\u0173\2\u112c\u112d\7q\2\2\u112d\u1130\5\u0444\u0223\2\u112e\u112f"+
		"\7a\2\2\u112f\u1131\5\u01d2\u00ea\2\u1130\u112e\3\2\2\2\u1130\u1131\3"+
		"\2\2\2\u1131\u1132\3\2\2\2\u1132\u1133\7\u0105\2\2\u1133\u1134\t\33\2"+
		"\2\u1134\u1135\5\u0346\u01a4\2\u1135\u1136\7#\2\2\u1136\u1137\7$\2\2\u1137"+
		"\u01d1\3\2\2\2\u1138\u113d\5\u01d4\u00eb\2\u1139\u113a\7w\2\2\u113a\u113c"+
		"\5\u01d4\u00eb\2\u113b\u1139\3\2\2\2\u113c\u113f\3\2\2\2\u113d\u113b\3"+
		"\2\2\2\u113d\u113e\3\2\2\2\u113e\u01d3\3\2\2\2\u113f\u113d\3\2\2\2\u1140"+
		"\u1141\5\u034c\u01a7\2\u1141\u1142\7\u0080\2\2\u1142\u1143\7#\2\2\u1143"+
		"\u1144\5\u01d6\u00ec\2\u1144\u1145\7$\2\2\u1145\u01d5\3\2\2\2\u1146\u114b"+
		"\7\u022f\2\2\u1147\u1148\7)\2\2\u1148\u114a\7\u022f\2\2\u1149\u1147\3"+
		"\2\2\2\u114a\u114d\3\2\2\2\u114b\u1149\3\2\2\2\u114b\u114c\3\2\2\2\u114c"+
		"\u01d7\3\2\2\2\u114d\u114b\3\2\2\2\u114e\u114f\7D\2\2\u114f\u1151\7\u0107"+
		"\2\2\u1150\u1152\5\u0486\u0244\2\u1151\u1150\3\2\2\2\u1151\u1152\3\2\2"+
		"\2\u1152\u1153\3\2\2\2\u1153\u1155\5\u02e4\u0173\2\u1154\u1156\7]\2\2"+
		"\u1155\u1154\3\2\2\2\u1155\u1156\3\2\2\2\u1156\u1157\3\2\2\2\u1157\u1158"+
		"\5\u01da\u00ee\2\u1158\u01d9\3\2\2\2\u1159\u115b\5\u01dc\u00ef\2\u115a"+
		"\u1159\3\2\2\2\u115b\u115e\3\2\2\2\u115c\u115a\3\2\2\2\u115c\u115d\3\2"+
		"\2\2\u115d\u01db\3\2\2\2\u115e\u115c\3\2\2\2\u115f\u1160\7H\2\2\u1160"+
		"\u1167\5\u02e4\u0173\2\u1161\u1162\7\u0187\2\2\u1162\u1167\5\u045e\u0230"+
		"\2\u1163\u1164\7e\2\2\u1164\u1167\5\u045e\u0230\2\u1165\u1167\7\u00e4"+
		"\2\2\u1166\u115f\3\2\2\2\u1166\u1161\3\2\2\2\u1166\u1163\3\2\2\2\u1166"+
		"\u1165\3\2\2\2\u1167\u01dd\3\2\2\2\u1168\u1169\7D\2\2\u1169\u116a\7S\2"+
		"\2\u116a\u116b\7\u00fd\2\2\u116b\u116c\7\u0226\2\2\u116c\u116e\5\u02e4"+
		"\u0173\2\u116d\u116f\5\u0142\u00a2\2\u116e\u116d\3\2\2\2\u116e\u116f\3"+
		"\2\2\2\u116f\u1171\3\2\2\2\u1170\u1172\5\u0450\u0229\2\u1171\u1170\3\2"+
		"\2\2\u1171\u1172\3\2\2\2\u1172\u01df\3\2\2\2\u1173\u1174\7D\2\2\u1174"+
		"\u1175\7S\2\2\u1175\u1176\7M\2\2\u1176\u1177\5\u01e2\u00f2\2\u1177\u01e1"+
		"\3\2\2\2\u1178\u117a\5\u0486\u0244\2\u1179\u1178\3\2\2\2\u1179\u117a\3"+
		"\2\2\2\u117a\u117b\3\2\2\2\u117b\u117c\5\u034a\u01a6\2\u117c\u117e\7#"+
		"\2\2\u117d\u117f\5\u01e4\u00f3\2\u117e\u117d\3\2\2\2\u117e\u117f\3\2\2"+
		"\2\u117f\u1180\3\2\2\2\u1180\u1186\7$\2\2\u1181\u1182\7\u0115\2\2\u1182"+
		"\u1183\7#\2\2\u1183\u1184\5\u04d0\u0269\2\u1184\u1185\7$\2\2\u1185\u1187"+
		"\3\2\2\2\u1186\u1181\3\2\2\2\u1186\u1187\3\2\2\2\u1187\u1188\3\2\2\2\u1188"+
		"\u1189\7\u0206\2\2\u1189\u118b\5\u02e4\u0173\2\u118a\u118c\5\u0450\u0229"+
		"\2\u118b\u118a\3\2\2\2\u118b\u118c\3\2\2\2\u118c\u11a1\3\2\2\2\u118d\u118f"+
		"\5\u0486\u0244\2\u118e\u118d\3\2\2\2\u118e\u118f\3\2\2\2\u118f\u1190\3"+
		"\2\2\2\u1190\u1191\5\u034a\u01a6\2\u1191\u1192\7\u00e0\2\2\u1192\u1193"+
		"\7\u0146\2\2\u1193\u1198\5\u034a\u01a6\2\u1194\u1195\7#\2\2\u1195\u1196"+
		"\5\f\7\2\u1196\u1197\7$\2\2\u1197\u1199\3\2\2\2\u1198\u1194\3\2\2\2\u1198"+
		"\u1199\3\2\2\2\u1199\u119a\3\2\2\2\u119a\u119b\5\6\4\2\u119b\u119c\7\u0206"+
		"\2\2\u119c\u119e\5\u02e4\u0173\2\u119d\u119f\5\u0450\u0229\2\u119e\u119d"+
		"\3\2\2\2\u119e\u119f\3\2\2\2\u119f\u11a1\3\2\2\2\u11a0\u1179\3\2\2\2\u11a0"+
		"\u118e\3\2\2\2\u11a1\u01e3\3\2\2\2\u11a2\u11a7\5\u01e6\u00f4\2\u11a3\u11a4"+
		"\7)\2\2\u11a4\u11a6\5\u01e6\u00f4\2\u11a5\u11a3\3\2\2\2\u11a6\u11a9\3"+
		"\2\2\2\u11a7\u11a5\3\2\2\2\u11a7\u11a8\3\2\2\2\u11a8\u01e5\3\2\2\2\u11a9"+
		"\u11a7\3\2\2\2\u11aa\u11ae\5\u0428\u0215\2\u11ab\u11ae\5\u01e8\u00f5\2"+
		"\u11ac\u11ae\5d\63\2\u11ad\u11aa\3\2\2\2\u11ad\u11ab\3\2\2\2\u11ad\u11ac"+
		"\3\2\2\2\u11ae\u01e7\3\2\2\2\u11af\u11b0\7\u0083\2\2\u11b0\u11b1\5\u034a"+
		"\u01a6\2\u11b1\u11b2\5\u01ea\u00f6\2\u11b2\u01e9\3\2\2\2\u11b3\u11b9\b"+
		"\u00f6\1\2\u11b4\u11b5\f\4\2\2\u11b5\u11b6\t\t\2\2\u11b6\u11b8\5\u01ec"+
		"\u00f7\2\u11b7\u11b4\3\2\2\2\u11b8\u11bb\3\2\2\2\u11b9\u11b7\3\2\2\2\u11b9"+
		"\u11ba\3\2\2\2\u11ba\u01eb\3\2\2\2\u11bb\u11b9\3\2\2\2\u11bc\u11bd\t\34"+
		"\2\2\u11bd\u01ed\3\2\2\2\u11be\u11c1\7D\2\2\u11bf\u11c0\7x\2\2\u11c0\u11c2"+
		"\7\u01f9\2\2\u11c1\u11bf\3\2\2\2\u11c1\u11c2\3\2\2\2\u11c2\u11c3\3\2\2"+
		"\2\u11c3\u11c4\7W\2\2\u11c4\u11c5\5\u0346\u01a4\2\u11c5\u11d2\5\u01fe"+
		"\u0100\2\u11c6\u11c7\7\u0210\2\2\u11c7\u11c8\5\u01fc\u00ff\2\u11c8\u11c9"+
		"\5\u01f4\u00fb\2\u11c9\u11d3\3\2\2\2\u11ca\u11cb\7\u0210\2\2\u11cb\u11cc"+
		"\7M\2\2\u11cc\u11cd\7#\2\2\u11cd\u11ce\5\u01f0\u00f9\2\u11ce\u11cf\7$"+
		"\2\2\u11cf\u11d0\5\u01f4\u00fb\2\u11d0\u11d3\3\2\2\2\u11d1\u11d3\5\u01f4"+
		"\u00fb\2\u11d2\u11c6\3\2\2\2\u11d2\u11ca\3\2\2\2\u11d2\u11d1\3\2\2\2\u11d3"+
		"\u01ef\3\2\2\2\u11d4\u11d9\5\u01f2\u00fa\2\u11d5\u11d6\7)\2\2\u11d6\u11d8"+
		"\5\u01f2\u00fa\2\u11d7\u11d5\3\2\2\2\u11d8\u11db\3\2\2\2\u11d9\u11d7\3"+
		"\2\2\2\u11d9\u11da\3\2\2\2\u11da\u01f1\3\2\2\2\u11db\u11d9\3\2\2\2\u11dc"+
		"\u11dd\5\u033e\u01a0\2\u11dd\u11de\5\u0400\u0201\2\u11de\u01f3\3\2\2\2"+
		"\u11df\u11e1\5\u01f6\u00fc\2\u11e0\u11df\3\2\2\2\u11e1\u11e2\3\2\2\2\u11e2"+
		"\u11e0\3\2\2\2\u11e2\u11e3\3\2\2\2\u11e3\u01f5\3\2\2\2\u11e4\u11e5\7p"+
		"\2\2\u11e5\u11ed\5\u01fa\u00fe\2\u11e6\u11e7\7\u0118\2\2\u11e7\u11ed\5"+
		"\u045e\u0230\2\u11e8\u11e9\7\u021b\2\2\u11e9\u11ed\5\u01f8\u00fd\2\u11ea"+
		"\u11ed\7\u00d3\2\2\u11eb\u11ed\5\u047c\u023f\2\u11ec\u11e4\3\2\2\2\u11ec"+
		"\u11e6\3\2\2\2\u11ec\u11e8\3\2\2\2\u11ec\u11ea\3\2\2\2\u11ec\u11eb\3\2"+
		"\2\2\u11ed\u01f7\3\2\2\2\u11ee\u11ef\7u\2\2\u11ef\u11f0\7\u00ba\2\2\u11f0"+
		"\u11f1\5\u036c\u01b7\2\u11f1\u11f2\7)\2\2\u11f2\u11f3\7u\2\2\u11f3\u11f4"+
		"\7\u00ba\2\2\u11f4\u11f5\5\u036c\u01b7\2\u11f5\u01f9\3\2\2\2\u11f6\u11fe"+
		"\5\u02d2\u016a\2\u11f7\u11fb\7\u022f\2\2\u11f8\u11f9\7)\2\2\u11f9\u11fc"+
		"\5\u02d2\u016a\2\u11fa\u11fc\7\u022f\2\2\u11fb\u11f8\3\2\2\2\u11fb\u11fa"+
		"\3\2\2\2\u11fb\u11fc\3\2\2\2\u11fc\u11fe\3\2\2\2\u11fd\u11f6\3\2\2\2\u11fd"+
		"\u11f7\3\2\2\2\u11fe\u01fb\3\2\2\2\u11ff\u1200\5\u0400\u0201\2\u1200\u01fd"+
		"\3\2\2\2\u1201\u1203\7#\2\2\u1202\u1204\5\u0200\u0101\2\u1203\u1202\3"+
		"\2\2\2\u1203\u1204\3\2\2\2\u1204\u1205\3\2\2\2\u1205\u1206\7$\2\2\u1206"+
		"\u01ff\3\2\2\2\u1207\u120c\5\u0202\u0102\2\u1208\u1209\7)\2\2\u1209\u120b"+
		"\5\u0202\u0102\2\u120a\u1208\3\2\2\2\u120b\u120e\3\2\2\2\u120c\u120a\3"+
		"\2\2\2\u120c\u120d\3\2\2\2\u120d\u0201\3\2\2\2\u120e\u120c\3\2\2\2\u120f"+
		"\u1219\5\u0458\u022d\2\u1210\u1211\5\u0458\u022d\2\u1211\u1212\7\u00a4"+
		"\2\2\u1212\u1213\5\u02fa\u017e\2\u1213\u1219\3\2\2\2\u1214\u1215\5\u0458"+
		"\u022d\2\u1215\u1216\7\33\2\2\u1216\u1217\5\u02fa\u017e\2\u1217\u1219"+
		"\3\2\2\2\u1218\u120f\3\2\2\2\u1218\u1210\3\2\2\2\u1218\u1214\3\2\2\2\u1219"+
		"\u0203\3\2\2\2\u121a\u121d\7D\2\2\u121b\u121c\7x\2\2\u121c\u121e\7\u01f9"+
		"\2\2\u121d\u121b\3\2\2\2\u121d\u121e\3\2\2\2\u121e\u1220\3\2\2\2\u121f"+
		"\u1221\7\u021d\2\2\u1220\u121f\3\2\2\2\u1220\u1221\3\2\2\2\u1221\u1223"+
		"\3\2\2\2\u1222\u1224\7\u01eb\2\2\u1223\u1222\3\2\2\2\u1223\u1224\3\2\2"+
		"\2\u1224\u1225\3\2\2\2\u1225\u1226\7\u0118\2\2\u1226\u1234\5\u02e4\u0173"+
		"\2\u1227\u1228\7\u01df\2\2\u1228\u122b\5\u0146\u00a4\2\u1229\u122a\7\u01cb"+
		"\2\2\u122a\u122c\5\u0146\u00a4\2\u122b\u1229\3\2\2\2\u122b\u122c\3\2\2"+
		"\2\u122c\u122e\3\2\2\2\u122d\u122f\5\u0208\u0105\2\u122e\u122d\3\2\2\2"+
		"\u122e\u122f\3\2\2\2\u122f\u1235\3\2\2\2\u1230\u1231\7#\2\2\u1231\u1232"+
		"\5\u0206\u0104\2\u1232\u1233\7$\2\2\u1233\u1235\3\2\2\2\u1234\u1227\3"+
		"\2\2\2\u1234\u1230\3\2\2\2\u1234\u1235\3\2\2\2\u1235\u0205\3\2\2\2\u1236"+
		"\u1237\7e\2\2\u1237\u1238\7\u00ae\2\2\u1238\u1239\7]\2\2\u1239\u123a\7"+
		"W\2\2\u123a\u123b\5\u0130\u0099\2\u123b\u123c\7)\2\2\u123c\u123d\t\35"+
		"\2\2\u123d\u123e\7\u00ae\2\2\u123e\u123f\7]\2\2\u123f\u1240\7W\2\2\u1240"+
		"\u1241\5\u0130\u0099\2\u1241\u1248\3\2\2\2\u1242\u1243\t\35\2\2\u1243"+
		"\u1244\7\u00ae\2\2\u1244\u1245\7]\2\2\u1245\u1246\7W\2\2\u1246\u1248\5"+
		"\u0130\u0099\2\u1247\u1236\3\2\2\2\u1247\u1242\3\2\2\2\u1248\u0207\3\2"+
		"\2\2\u1249\u124a\7\u021e\2\2\u124a\u124e\5\u0146\u00a4\2\u124b\u124c\7"+
		"\u00e9\2\2\u124c\u124e\7\u021e\2\2\u124d\u1249\3\2\2\2\u124d\u124b\3\2"+
		"\2\2\u124e\u0209\3\2\2\2\u124f\u1250\7D\2\2\u1250\u1251\7\u020b\2\2\u1251"+
		"\u1252\5\u02e4\u0173\2\u1252\u1253\7q\2\2\u1253\u1256\5\u034a\u01a6\2"+
		"\u1254\u1255\7p\2\2\u1255\u1257\5\u02d2\u016a\2\u1256\u1254\3\2\2\2\u1256"+
		"\u1257\3\2\2\2\u1257\u125a\3\2\2\2\u1258\u1259\7u\2\2\u1259\u125b\5\u0480"+
		"\u0241\2\u125a\u1258\3\2\2\2\u125a\u125b\3\2\2\2\u125b\u125e\3\2\2\2\u125c"+
		"\u125d\7v\2\2\u125d\u125f\5\u0462\u0232\2\u125e\u125c\3\2\2\2\u125e\u125f"+
		"\3\2\2\2\u125f\u1265\3\2\2\2\u1260\u1261\7n\2\2\u1261\u1262\7#\2\2\u1262"+
		"\u1263\5\u02fa\u017e\2\u1263\u1264\7$\2\2\u1264\u1266\3\2\2\2\u1265\u1260"+
		"\3\2\2\2\u1265\u1266\3\2\2\2\u1266\u126d\3\2\2\2\u1267\u1268\7]\2\2\u1268"+
		"\u1269\7\u00e5\2\2\u1269\u126a\7#\2\2\u126a\u126b\5\u02fa\u017e\2\u126b"+
		"\u126c\7$\2\2\u126c\u126e\3\2\2\2\u126d\u1267\3\2\2\2\u126d\u126e\3\2"+
		"\2\2\u126e\u020b\3\2\2\2\u126f\u1272\7D\2\2\u1270\u1271\7x\2\2\u1271\u1273"+
		"\7\u01f9\2\2\u1272\u1270\3\2\2\2\u1272\u1273\3\2\2\2\u1273\u1274\3\2\2"+
		"\2\u1274\u1275\7Y\2\2\u1275\u1276\5\u0346\u01a4\2\u1276\u1277\5\u01fe"+
		"\u0100\2\u1277\u1278\5\u01f4\u00fb\2\u1278\u020d\3\2\2\2\u1279\u127a\7"+
		"D\2\2\u127a\u127b\7\u01ef\2\2\u127b\u127d\5\u02e4\u0173\2\u127c\u127e"+
		"\5\u0210\u0109\2\u127d\u127c\3\2\2\2\u127d\u127e\3\2\2\2\u127e\u1281\3"+
		"\2\2\2\u127f\u1280\7]\2\2\u1280\u1282\5\u043e\u0220\2\u1281\u127f\3\2"+
		"\2\2\u1281\u1282\3\2\2\2\u1282\u020f\3\2\2\2\u1283\u1284\7u\2\2\u1284"+
		"\u1285\7M\2\2\u1285\u128a\5\u0478\u023d\2\u1286\u1287\7u\2\2\u1287\u1288"+
		"\7\u0081\2\2\u1288\u128a\7\u0214\2\2\u1289\u1283\3\2\2\2\u1289\u1286\3"+
		"\2\2\2\u128a\u0211\3\2\2\2\u128b\u128e\7D\2\2\u128c\u128d\7x\2\2\u128d"+
		"\u128f\7\u01f9\2\2\u128e\u128c\3\2\2\2\u128e\u128f\3\2\2\2\u128f\u1290"+
		"\3\2\2\2\u1290\u1291\7\u0132\2\2\u1291\u1292\5\u02e4\u0173\2\u1292\u1293"+
		"\7p\2\2\u1293\u1294\7q\2\2\u1294\u1295\5\u0482\u0242\2\u1295\u1296\7v"+
		"\2\2\u1296\u1299\5\u034a\u01a6\2\u1297\u1298\7o\2\2\u1298\u129a\5\u02fa"+
		"\u017e\2\u1299\u1297\3\2\2\2\u1299\u129a\3\2\2\2\u129a\u129b\3\2\2\2\u129b"+
		"\u129d\7\u00ab\2\2\u129c\u129e\t\36\2\2\u129d\u129c\3\2\2\2\u129d\u129e"+
		"\3\2\2\2\u129e\u129f\3\2\2\2\u129f\u12a0\5\u0214\u010b\2\u12a0\u0213\3"+
		"\2\2\2\u12a1\u12a8\7\u0120\2\2\u12a2\u12a8\5\u0216\u010c\2\u12a3\u12a4"+
		"\7#\2\2\u12a4\u12a5\5\u0218\u010d\2\u12a5\u12a6\7$\2\2\u12a6\u12a8\3\2"+
		"\2\2\u12a7\u12a1\3\2\2\2\u12a7\u12a2\3\2\2\2\u12a7\u12a3\3\2\2\2\u12a8"+
		"\u0215\3\2\2\2\u12a9\u12af\5\u04ac\u0257\2\u12aa\u12af\5\u048a\u0246\2"+
		"\u12ab\u12af\5\u049a\u024e\2\u12ac\u12af\5\u04a6\u0254\2\u12ad\u12af\5"+
		"\u021a\u010e\2\u12ae\u12a9\3\2\2\2\u12ae\u12aa\3\2\2\2\u12ae\u12ab\3\2"+
		"\2\2\u12ae\u12ac\3\2\2\2\u12ae\u12ad\3\2\2\2\u12af\u0217\3\2\2\2\u12b0"+
		"\u12b2\5\u0216\u010c\2\u12b1\u12b0\3\2\2\2\u12b1\u12b2\3\2\2\2\u12b2\u12b9"+
		"\3\2\2\2\u12b3\u12b5\7/\2\2\u12b4\u12b6\5\u0216\u010c\2\u12b5\u12b4\3"+
		"\2\2\2\u12b5\u12b6\3\2\2\2\u12b6\u12b8\3\2\2\2\u12b7\u12b3\3\2\2\2\u12b8"+
		"\u12bb\3\2\2\2\u12b9\u12b7\3\2\2\2\u12b9\u12ba\3\2\2\2\u12ba\u0219\3\2"+
		"\2\2\u12bb\u12b9\3\2\2\2\u12bc\u12bd\7\u020c\2\2\u12bd\u12c0\5\u034c\u01a7"+
		"\2\u12be\u12bf\7)\2\2\u12bf\u12c1\7\u022f\2\2\u12c0\u12be\3\2\2\2\u12c0"+
		"\u12c1\3\2\2\2\u12c1\u021b\3\2\2\2\u12c2\u12c3\7D\2\2\u12c3\u12c4\7X\2"+
		"\2\u12c4\u12c5\5\u02e4\u0173\2\u12c5\u12c6\5\u0222\u0112\2\u12c6\u12c7"+
		"\5\u021e\u0110\2\u12c7\u12c8\7q\2\2\u12c8\u12ca\5\u034a\u01a6\2\u12c9"+
		"\u12cb\5\u022c\u0117\2\u12ca\u12c9\3\2\2\2\u12ca\u12cb\3\2\2\2\u12cb\u12cd"+
		"\3\2\2\2\u12cc\u12ce\5\u022a\u0116\2\u12cd\u12cc\3\2\2\2\u12cd\u12ce\3"+
		"\2\2\2\u12ce\u12d0\3\2\2\2\u12cf\u12d1\5\u0228\u0115\2\u12d0\u12cf\3\2"+
		"\2\2\u12d0\u12d1\3\2\2\2\u12d1\u12d2\3\2\2\2\u12d2\u12d3\7\u0105\2\2\u12d3"+
		"\u12d4\t\33\2\2\u12d4\u12d5\5\u0346\u01a4\2\u12d5\u12d7\7#\2\2\u12d6\u12d8"+
		"\5\u0224\u0113\2\u12d7\u12d6\3\2\2\2\u12d7\u12d8\3\2\2\2\u12d8\u12d9\3"+
		"\2\2\2\u12d9\u12da\7$\2\2\u12da\u12ef\3\2\2\2\u12db\u12dc\7D\2\2\u12dc"+
		"\u12dd\7P\2\2\u12dd\u12e0\7X\2\2\u12de\u12df\7e\2\2\u12df\u12e1\5\u034a"+
		"\u01a6\2\u12e0\u12de\3\2\2\2\u12e0\u12e1\3\2\2\2\u12e1\u12e2\3\2\2\2\u12e2"+
		"\u12e3\5\u00c2b\2\u12e3\u12e4\7u\2\2\u12e4\u12e5\7\u01d3\2\2\u12e5\u12e6"+
		"\7\u00e1\2\2\u12e6\u12e7\5\u0228\u0115\2\u12e7\u12e8\7\u0105\2\2\u12e8"+
		"\u12e9\t\33\2\2\u12e9\u12ea\5\u0346\u01a4\2\u12ea\u12eb\7#\2\2\u12eb\u12ec"+
		"\5\u0224\u0113\2\u12ec\u12ed\7$\2\2\u12ed\u12ef\3\2\2\2\u12ee\u12c2\3"+
		"\2\2\2\u12ee\u12db\3\2\2\2\u12ef\u021d\3\2\2\2\u12f0\u12f5\5\u0220\u0111"+
		"\2\u12f1\u12f2\7x\2\2\u12f2\u12f4\5\u0220\u0111\2\u12f3\u12f1\3\2\2\2"+
		"\u12f4\u12f7\3\2\2\2\u12f5\u12f3\3\2\2\2\u12f5\u12f6\3\2\2\2\u12f6\u021f"+
		"\3\2\2\2\u12f7\u12f5\3\2\2\2\u12f8\u1300\7A\2\2\u12f9\u1300\7C\2\2\u12fa"+
		"\u1300\7B\2\2\u12fb\u12fc\7B\2\2\u12fc\u12fd\7\u0146\2\2\u12fd\u1300\5"+
		",\27\2\u12fe\u1300\7G\2\2\u12ff\u12f8\3\2\2\2\u12ff\u12f9\3\2\2\2\u12ff"+
		"\u12fa\3\2\2\2\u12ff\u12fb\3\2\2\2\u12ff\u12fe\3\2\2\2\u1300\u0221\3\2"+
		"\2\2\u1301\u1306\7\u01b3\2\2\u1302\u1306\7\u01ad\2\2\u1303\u1304\7\u01c8"+
		"\2\2\u1304\u1306\7\u0146\2\2\u1305\u1301\3\2\2\2\u1305\u1302\3\2\2\2\u1305"+
		"\u1303\3\2\2\2\u1306\u0223\3\2\2\2\u1307\u130c\5\u0226\u0114\2\u1308\u1309"+
		"\7)\2\2\u1309\u130b\5\u0226\u0114\2\u130a\u1308\3\2\2\2\u130b\u130e\3"+
		"\2\2\2\u130c\u130a\3\2\2\2\u130c\u130d\3\2\2\2\u130d\u0225\3\2\2\2\u130e"+
		"\u130c\3\2\2\2\u130f\u1313\7\u0230\2\2\u1310\u1313\7\u022f\2\2\u1311\u1313"+
		"\5\u0444\u0223\2\u1312\u130f\3\2\2\2\u1312\u1310\3\2\2\2\u1312\u1311\3"+
		"\2\2\2\u1313\u0227\3\2\2\2\u1314\u1315\7a\2\2\u1315\u1316\7#\2\2\u1316"+
		"\u1317\5\u02fa\u017e\2\u1317\u1318\7$\2\2\u1318\u0229\3\2\2\2\u1319\u131b"+
		"\7u\2\2\u131a\u131c\7\u01d3\2\2\u131b\u131a\3\2\2\2\u131b\u131c\3\2\2"+
		"\2\u131c\u131d\3\2\2\2\u131d\u131e\t\37\2\2\u131e\u022b\3\2\2\2\u131f"+
		"\u1320\7\u01f1\2\2\u1320\u1321\5\u022e\u0118\2\u1321\u022d\3\2\2\2\u1322"+
		"\u1324\5\u0230\u0119\2\u1323\u1322\3\2\2\2\u1324\u1325\3\2\2\2\u1325\u1323"+
		"\3\2\2\2\u1325\u1326\3\2\2\2\u1326\u022f\3\2\2\2\u1327\u1328\5\u0236\u011c"+
		"\2\u1328\u132a\5\u0234\u011b\2\u1329\u132b\7p\2\2\u132a\u1329\3\2\2\2"+
		"\u132a\u132b\3\2\2\2\u132b\u132c\3\2\2\2\u132c\u132d\5\u0232\u011a\2\u132d"+
		"\u0231\3\2\2\2\u132e\u132f\5\u034c\u01a7\2\u132f\u0233\3\2\2\2\u1330\u1331"+
		"\t \2\2\u1331\u0235\3\2\2\2\u1332\u1333\t!\2\2\u1333\u0237\3\2\2\2\u1334"+
		"\u1336\7D\2\2\u1335\u1337\5\u023a\u011e\2\u1336\u1335\3\2\2\2\u1336\u1337"+
		"\3\2\2\2\u1337\u1338\3\2\2\2\u1338\u133a\7\u0134\2\2\u1339\u133b\5\u0486"+
		"\u0244\2\u133a\u1339\3\2\2\2\u133a\u133b\3\2\2\2\u133b\u133c\3\2\2\2\u133c"+
		"\u133e\5\u034a\u01a6\2\u133d\u133f\5\u0432\u021a\2\u133e\u133d\3\2\2\2"+
		"\u133e\u133f\3\2\2\2\u133f\u0239\3\2\2\2\u1340\u1342\t\5\2\2\u1341\u1340"+
		"\3\2\2\2\u1341\u1342\3\2\2\2\u1342\u1343\3\2\2\2\u1343\u1346\t\2\2\2\u1344"+
		"\u1346\7\u013f\2\2\u1345\u1341\3\2\2\2\u1345\u1344\3\2\2\2\u1346\u023b"+
		"\3\2\2\2\u1347\u1348\7D\2\2\u1348\u134a\7\u0206\2\2\u1349\u134b\5\u0486"+
		"\u0244\2\u134a\u1349\3\2\2\2\u134a\u134b\3\2\2\2\u134b\u134c\3\2\2\2\u134c"+
		"\u134f\5\u02e4\u0173\2\u134d\u134e\7\u00ba\2\2\u134e\u1350\7\u022f\2\2"+
		"\u134f\u134d\3\2\2\2\u134f\u1350\3\2\2\2\u1350\u1352\3\2\2\2\u1351\u1353"+
		"\5\u017c\u00bf\2\u1352\u1351\3\2\2\2\u1352\u1353\3\2\2\2\u1353\u1354\3"+
		"\2\2\2\u1354\u1355\7S\2\2\u1355\u1356\7\u00fd\2\2\u1356\u1357\7\u0226"+
		"\2\2\u1357\u1358\5\u02e4\u0173\2\u1358\u1359\5\u0450\u0229\2\u1359\u023d"+
		"\3\2\2\2\u135a\u135b\7D\2\2\u135b\u135d\7\u0139\2\2\u135c\u135e\5\u0486"+
		"\u0244\2\u135d\u135c\3\2\2\2\u135d\u135e\3\2\2\2\u135e\u135f\3\2\2\2\u135f"+
		"\u1360\5\u03cc\u01e7\2\u1360\u1361\5\u04c0\u0261\2\u1361\u1362\7q\2\2"+
		"\u1362\u1363\5\u0370\u01b9\2\u1363\u1364\7e\2\2\u1364\u1365\5\u0502\u0282"+
		"\2\u1365\u023f\3\2\2\2\u1366\u1367\7D\2\2\u1367\u1368\7\u0207\2\2\u1368"+
		"\u1369\5\u02e4\u0173\2\u1369\u136a\7\u01d6\2\2\u136a\u136b\7\u022f\2\2"+
		"\u136b\u136c\7\u01ef\2\2\u136c\u136f\5\u0182\u00c2\2\u136d\u136e\7]\2"+
		"\2\u136e\u1370\5\u043e\u0220\2\u136f\u136d\3\2\2\2\u136f\u1370\3\2\2\2"+
		"\u1370\u0241\3\2\2\2\u1371\u1372\7D\2\2\u1372\u1373\7\u013b\2\2\u1373"+
		"\u1376\5\u02e4\u0173\2\u1374\u1375\7\u0127\2\2\u1375\u1377\5\u041a\u020e"+
		"\2\u1376\u1374\3\2\2\2\u1376\u1377\3\2\2\2\u1377\u1378\3\2\2\2\u1378\u1379"+
		"\7\u01dc\2\2\u1379\u137c\7\u022f\2\2\u137a\u137b\7]\2\2\u137b\u137d\5"+
		"\u03f8\u01fd\2\u137c\u137a\3\2\2\2\u137c\u137d\3\2\2\2\u137d\u0243\3\2"+
		"\2\2\u137e\u137f\7D\2\2\u137f\u1380\7\u00be\2\2\u1380\u1381\7\u0208\2"+
		"\2\u1381\u1382\t\"\2\2\u1382\u1383\5\u03cc\u01e7\2\u1383\u1384\5\u043e"+
		"\u0220\2\u1384\u0245\3\2\2\2\u1385\u1388\7D\2\2\u1386\u1387\7x\2\2\u1387"+
		"\u1389\7\u01f9\2\2\u1388\u1386\3\2\2\2\u1388\u1389\3\2\2\2\u1389\u138a"+
		"\3\2\2\2\u138a\u138b\7\u021b\2\2\u138b\u138c\7u\2\2\u138c\u138d\5\u036c"+
		"\u01b7\2\u138d\u138e\7\u0118\2\2\u138e\u138f\5\u02e4\u0173\2\u138f\u1390"+
		"\7#\2\2\u1390\u1391\5\u0206\u0104\2\u1391\u1392\7$\2\2\u1392\u0247\3\2"+
		"\2\2\u1393\u1394\7D\2\2\u1394\u1395\7\u00ba\2\2\u1395\u1396\5\u03cc\u01e7"+
		"\2\u1396\u1397\5\u024a\u0126\2\u1397\u0249\3\2\2\2\u1398\u139a\5\u043e"+
		"\u0220\2\u1399\u1398\3\2\2\2\u1399\u139a\3\2\2\2\u139a\u13ac\3\2\2\2\u139b"+
		"\u139c\7p\2\2\u139c\u139e\7#\2\2\u139d\u139f\5\u03c6\u01e4\2\u139e\u139d"+
		"\3\2\2\2\u139e\u139f\3\2\2\2\u139f\u13a0\3\2\2\2\u13a0\u13ac\7$\2\2\u13a1"+
		"\u13a2\7p\2\2\u13a2\u13a3\7\u0157\2\2\u13a3\u13a5\7#\2\2\u13a4\u13a6\5"+
		"\u024c\u0127\2\u13a5\u13a4\3\2\2\2\u13a5\u13a6\3\2\2\2\u13a6\u13a7\3\2"+
		"\2\2\u13a7\u13ac\7$\2\2\u13a8\u13a9\7p\2\2\u13a9\u13aa\7\u012b\2\2\u13aa"+
		"\u13ac\5\u043e\u0220\2\u13ab\u1399\3\2\2\2\u13ab\u139b\3\2\2\2\u13ab\u13a1"+
		"\3\2\2\2\u13ab\u13a8\3\2\2\2\u13ac\u024b\3\2\2\2\u13ad\u13b2\7\u022f\2"+
		"\2\u13ae\u13af\7)\2\2\u13af\u13b1\7\u022f\2\2\u13b0\u13ae\3\2\2\2\u13b1"+
		"\u13b4\3\2\2\2\u13b2\u13b0\3\2\2\2\u13b2\u13b3\3\2\2\2\u13b3\u024d\3\2"+
		"\2\2\u13b4\u13b2\3\2\2\2\u13b5\u13b6\7D\2\2\u13b6\u13b7\7\u00f2\2\2\u13b7"+
		"\u13b9\7\u01e4\2\2\u13b8\u13ba\5\u0486\u0244\2\u13b9\u13b8\3\2\2\2\u13b9"+
		"\u13ba\3\2\2\2\u13ba\u13bb\3\2\2\2\u13bb\u13bc\7u\2\2\u13bc\u13bd\5\u01a2"+
		"\u00d2\2\u13bd\u13be\7\u0206\2\2\u13be\u13bf\5\u02e4\u0173\2\u13bf\u13c0"+
		"\5\u0450\u0229\2\u13c0\u024f\3\2\2\2\u13c1\u13c2\7\u01c6\2\2\u13c2\u13c3"+
		"\t#\2\2\u13c3\u0251\3\2\2\2\u13c4\u13c5\7F\2\2\u13c5\u13c6\7\u01ac\2\2"+
		"\u13c6\u13c8\7\u01e6\2\2\u13c7\u13c9\5\u0488\u0245\2\u13c8\u13c7\3\2\2"+
		"\2\u13c8\u13c9\3\2\2\2\u13c9\u13ca\3\2\2\2\u13ca\u13cc\5\u02e4\u0173\2"+
		"\u13cb\u13cd\5\u00ceh\2\u13cc\u13cb\3\2\2\2\u13cc\u13cd\3\2\2\2\u13cd"+
		"\u0253\3\2\2\2\u13ce\u13cf\7F\2\2\u13cf\u13d1\7\u01ae\2\2\u13d0\u13d2"+
		"\5\u0488\u0245\2\u13d1\u13d0\3\2\2\2\u13d1\u13d2\3\2\2\2\u13d2\u13d3\3"+
		"\2\2\2\u13d3\u13d5\5\u0256\u012c\2\u13d4\u13d6\5\u00ceh\2\u13d5\u13d4"+
		"\3\2\2\2\u13d5\u13d6\3\2\2\2\u13d6\u0255\3\2\2\2\u13d7\u13dc\5\u0134\u009b"+
		"\2\u13d8\u13d9\7)\2\2\u13d9\u13db\5\u0134\u009b\2\u13da\u13d8\3\2\2\2"+
		"\u13db\u13de\3\2\2\2\u13dc\u13da\3\2\2\2\u13dc\u13dd\3\2\2\2\u13dd\u0257"+
		"\3\2\2\2\u13de\u13dc\3\2\2\2\u13df\u13e0\7F\2\2\u13e0\u13e2\7b\2\2\u13e1"+
		"\u13e3\5\u0488\u0245\2\u13e2\u13e1\3\2\2\2\u13e2\u13e3\3\2\2\2\u13e3\u13e4"+
		"\3\2\2\2\u13e4\u13e5\7#\2\2\u13e5\u13e6\5\u036c\u01b7\2\u13e6\u13e7\7"+
		"p\2\2\u13e7\u13e8\5\u036c\u01b7\2\u13e8\u13ea\7$\2\2\u13e9\u13eb\5\u00ce"+
		"h\2\u13ea\u13e9\3\2\2\2\u13ea\u13eb\3\2\2\2\u13eb\u0259\3\2\2\2\u13ec"+
		"\u13ed\7F\2\2\u13ed\u13ef\7\u00b5\2\2\u13ee\u13f0\5\u0488\u0245\2\u13ef"+
		"\u13ee\3\2\2\2\u13ef\u13f0\3\2\2\2\u13f0\u13f1\3\2\2\2\u13f1\u13f3\5\u02e4"+
		"\u0173\2\u13f2\u13f4\5\u00ceh\2\u13f3\u13f2\3\2\2\2\u13f3\u13f4\3\2\2"+
		"\2\u13f4\u025b\3\2\2\2\u13f5\u13f6\7F\2\2\u13f6\u13f8\7\u01b7\2\2\u13f7"+
		"\u13f9\5\u0488\u0245\2\u13f8\u13f7\3\2\2\2\u13f8\u13f9\3\2\2\2\u13f9\u13fa"+
		"\3\2\2\2\u13fa\u13fc\5\u02e4\u0173\2\u13fb\u13fd\5\u00ceh\2\u13fc\u13fb"+
		"\3\2\2\2\u13fc\u13fd\3\2\2\2\u13fd\u025d\3\2\2\2\u13fe\u13ff\7F\2\2\u13ff"+
		"\u1401\7\u0103\2\2\u1400\u1402\5\u0488\u0245\2\u1401\u1400\3\2\2\2\u1401"+
		"\u1402\3\2\2\2\u1402\u1403\3\2\2\2\u1403\u1405\5\u03d0\u01e9\2\u1404\u1406"+
		"\5\u00ceh\2\u1405\u1404\3\2\2\2\u1405\u1406\3\2\2\2\u1406\u025f\3\2\2"+
		"\2\u1407\u1408\7F\2\2\u1408\u1409\7\u01d4\2\2\u1409\u140b\7X\2\2\u140a"+
		"\u140c\5\u0488\u0245\2\u140b\u140a\3\2\2\2\u140b\u140c\3\2\2\2\u140c\u140d"+
		"\3\2\2\2\u140d\u140f\5\u02e4\u0173\2\u140e\u1410\5\u00ceh\2\u140f\u140e"+
		"\3\2\2\2\u140f\u1410\3\2\2\2\u1410\u0261\3\2\2\2\u1411\u1412\7F\2\2\u1412"+
		"\u1414\7\u0107\2\2\u1413\u1415\5\u0488\u0245\2\u1414\u1413\3\2\2\2\u1414"+
		"\u1415\3\2\2\2\u1415\u1416\3\2\2\2\u1416\u1418\5\u03d0\u01e9\2\u1417\u1419"+
		"\5\u00ceh\2\u1418\u1417\3\2\2\2\u1418\u1419\3\2\2\2\u1419\u0263\3\2\2"+
		"\2\u141a\u141b\7F\2\2\u141b\u141c\7S\2\2\u141c\u141d\7\u00fd\2\2\u141d"+
		"\u141f\7\u0226\2\2\u141e\u1420\5\u0488\u0245\2\u141f\u141e\3\2\2\2\u141f"+
		"\u1420\3\2\2\2\u1420\u1421\3\2\2\2\u1421\u1423\5\u03d0\u01e9\2\u1422\u1424"+
		"\5\u00ceh\2\u1423\u1422\3\2\2\2\u1423\u1424\3\2\2\2\u1424\u0265\3\2\2"+
		"\2\u1425\u1426\7F\2\2\u1426\u1427\7S\2\2\u1427\u1429\7M\2\2\u1428\u142a"+
		"\5\u0488\u0245\2\u1429\u1428\3\2\2\2\u1429\u142a\3\2\2\2\u142a\u142b\3"+
		"\2\2\2\u142b\u1430\5\u02de\u0170\2\u142c\u142d\7)\2\2\u142d\u142f\5\u02de"+
		"\u0170\2\u142e\u142c\3\2\2\2\u142f\u1432\3\2\2\2\u1430\u142e\3\2\2\2\u1430"+
		"\u1431\3\2\2\2\u1431\u1434\3\2\2\2\u1432\u1430\3\2\2\2\u1433\u1435\5\u00ce"+
		"h\2\u1434\u1433\3\2\2\2\u1434\u1435\3\2\2\2\u1435\u0267\3\2\2\2\u1436"+
		"\u1437\7F\2\2\u1437\u1439\7W\2\2\u1438\u143a\5\u0488\u0245\2\u1439\u1438"+
		"\3\2\2\2\u1439\u143a\3\2\2\2\u143a\u143b\3\2\2\2\u143b\u143d\5\u026a\u0136"+
		"\2\u143c\u143e\5\u00ceh\2\u143d\u143c\3\2\2\2\u143d\u143e\3\2\2\2\u143e"+
		"\u0269\3\2\2\2\u143f\u1444\5\u0130\u0099\2\u1440\u1441\7)\2\2\u1441\u1443"+
		"\5\u0130\u0099\2\u1442\u1440\3\2\2\2\u1443\u1446\3\2\2\2\u1444\u1442\3"+
		"\2\2\2\u1444\u1445\3\2\2\2\u1445\u026b\3\2\2\2\u1446\u1444\3\2\2\2\u1447"+
		"\u1449\7F\2\2\u1448\u144a\7\u01eb\2\2\u1449\u1448\3\2\2\2\u1449\u144a"+
		"\3\2\2\2\u144a\u144b\3\2\2\2\u144b\u144d\7\u0118\2\2\u144c\u144e\5\u0488"+
		"\u0245\2\u144d\u144c\3\2\2\2\u144d\u144e\3\2\2\2\u144e\u144f\3\2\2\2\u144f"+
		"\u1451\5\u02e4\u0173\2\u1450\u1452\5\u00ceh\2\u1451\u1450\3\2\2\2\u1451"+
		"\u1452\3\2\2\2\u1452\u026d\3\2\2\2\u1453\u1454\7F\2\2\u1454\u1455\7\u018c"+
		"\2\2\u1455\u1457\7Z\2\2\u1456\u1458\5\u0488\u0245\2\u1457\u1456\3\2\2"+
		"\2\u1457\u1458\3\2\2\2\u1458\u1459\3\2\2\2\u1459\u145b\5\u018e\u00c8\2"+
		"\u145a\u145c\5\u00ceh\2\u145b\u145a\3\2\2\2\u145b\u145c\3\2\2\2\u145c"+
		"\u026f\3\2\2\2\u145d\u145e\7F\2\2\u145e\u1460\7\u018d\2\2\u145f\u1461"+
		"\5\u0488\u0245\2\u1460\u145f\3\2\2\2\u1460\u1461\3\2\2\2\u1461\u1462\3"+
		"\2\2\2\u1462\u1464\5\u0272\u013a\2\u1463\u1465\5\u00ceh\2\u1464\u1463"+
		"\3\2\2\2\u1464\u1465\3\2\2\2\u1465\u0271\3\2\2\2\u1466\u146b\5\u00f2z"+
		"\2\u1467\u1468\7)\2\2\u1468\u146a\5\u00f2z\2\u1469\u1467\3\2\2\2\u146a"+
		"\u146d\3\2\2\2\u146b\u1469\3\2\2\2\u146b\u146c\3\2\2\2\u146c\u0273\3\2"+
		"\2\2\u146d\u146b\3\2\2\2\u146e\u146f\7F\2\2\u146f\u1470\7\u018d\2\2\u1470"+
		"\u1472\7\u01bf\2\2\u1471\u1473\5\u0488\u0245\2\u1472\u1471\3\2\2\2\u1472"+
		"\u1473\3\2\2\2\u1473\u1474\3\2\2\2\u1474\u1475\5\u03cc\u01e7\2\u1475\u1476"+
		"\7n\2\2\u1476\u1478\5\u02e4\u0173\2\u1477\u1479\5\u00ceh\2\u1478\u1477"+
		"\3\2\2\2\u1478\u1479\3\2\2\2\u1479\u0275\3\2\2\2\u147a\u147b\7F\2\2\u147b"+
		"\u147c\7\u018d\2\2\u147c\u147e\7\u01d8\2\2\u147d\u147f\5\u0488\u0245\2"+
		"\u147e\u147d\3\2\2\2\u147e\u147f\3\2\2\2\u147f\u1480\3\2\2\2\u1480\u1481"+
		"\5\u03cc\u01e7\2\u1481\u1482\7n\2\2\u1482\u1484\5\u02e4\u0173\2\u1483"+
		"\u1485\5\u00ceh\2\u1484\u1483\3\2\2\2\u1484\u1485\3\2\2\2\u1485\u0277"+
		"\3\2\2\2\u1486\u1487\7F\2\2\u1487\u1488\7\u0126\2\2\u1488\u1489\7\u0086"+
		"\2\2\u1489\u148b\5\u0462\u0232\2\u148a\u148c\5\u00ceh\2\u148b\u148a\3"+
		"\2\2\2\u148b\u148c\3\2\2\2\u148c\u0279\3\2\2\2\u148d\u148e\7F\2\2\u148e"+
		"\u1490\7\u020b\2\2\u148f\u1491\5\u0488\u0245\2\u1490\u148f\3\2\2\2\u1490"+
		"\u1491\3\2\2\2\u1491\u1492\3\2\2\2\u1492\u1493\5\u02e4\u0173\2\u1493\u1494"+
		"\7q\2\2\u1494\u1496\5\u02de\u0170\2\u1495\u1497\5\u00ceh\2\u1496\u1495"+
		"\3\2\2\2\u1496\u1497\3\2\2\2\u1497\u027b\3\2\2\2\u1498\u1499\7F\2\2\u1499"+
		"\u149b\7Y\2\2\u149a\u149c\5\u0488\u0245\2\u149b\u149a\3\2\2\2\u149b\u149c"+
		"\3\2\2\2\u149c\u149d\3\2\2\2\u149d\u149f\5\u026a\u0136\2\u149e\u14a0\5"+
		"\u00ceh\2\u149f\u149e\3\2\2\2\u149f\u14a0\3\2\2\2\u14a0\u027d\3\2\2\2"+
		"\u14a1\u14a2\7F\2\2\u14a2\u14a4\7\u01ef\2\2\u14a3\u14a5\5\u0488\u0245"+
		"\2\u14a4\u14a3\3\2\2\2\u14a4\u14a5\3\2\2\2\u14a5\u14a6\3\2\2\2\u14a6\u14a8"+
		"\5\u018e\u00c8\2\u14a7\u14a9\5\u00ceh\2\u14a8\u14a7\3\2\2\2\u14a8\u14a9"+
		"\3\2\2\2\u14a9\u027f\3\2\2\2\u14aa\u14ab\7F\2\2\u14ab\u14ad\7\u0131\2"+
		"\2\u14ac\u14ae\5\u0488\u0245\2\u14ad\u14ac\3\2\2\2\u14ad\u14ae\3\2\2\2"+
		"\u14ae\u14af\3\2\2\2\u14af\u14b1\5\u026a\u0136\2\u14b0\u14b2\5\u00ceh"+
		"\2\u14b1\u14b0\3\2\2\2\u14b1\u14b2\3\2\2\2\u14b2\u0281\3\2\2\2\u14b3\u14b4"+
		"\7F\2\2\u14b4\u14b6\7\u0132\2\2\u14b5\u14b7\5\u0488\u0245\2\u14b6\u14b5"+
		"\3\2\2\2\u14b6\u14b7\3\2\2\2\u14b7\u14b8\3\2\2\2\u14b8\u14b9\5\u02e4\u0173"+
		"\2\u14b9\u14ba\7q\2\2\u14ba\u14bc\5\u02de\u0170\2\u14bb\u14bd\5\u00ce"+
		"h\2\u14bc\u14bb\3\2\2\2\u14bc\u14bd\3\2\2\2\u14bd\u0283\3\2\2\2\u14be"+
		"\u14bf\7F\2\2\u14bf\u14c1\7\u0134\2\2\u14c0\u14c2\5\u0488\u0245\2\u14c1"+
		"\u14c0\3\2\2\2\u14c1\u14c2\3\2\2\2\u14c2\u14c3\3\2\2\2\u14c3\u14c5\5\u04d0"+
		"\u0269\2\u14c4\u14c6\5\u00ceh\2\u14c5\u14c4\3\2\2\2\u14c5\u14c6\3\2\2"+
		"\2\u14c6\u0285\3\2\2\2\u14c7\u14c8\7F\2\2\u14c8\u14ca\7\u0206\2\2\u14c9"+
		"\u14cb\5\u0488\u0245\2\u14ca\u14c9\3\2\2\2\u14ca\u14cb\3\2\2\2\u14cb\u14cc"+
		"\3\2\2\2\u14cc\u14ce\5\u04d0\u0269\2\u14cd\u14cf\5\u00ceh\2\u14ce\u14cd"+
		"\3\2\2\2\u14ce\u14cf\3\2\2\2\u14cf\u0287\3\2\2\2\u14d0\u14d1\7F\2\2\u14d1"+
		"\u14d3\7\u0139\2\2\u14d2\u14d4\5\u0488\u0245\2\u14d3\u14d2\3\2\2\2\u14d3"+
		"\u14d4\3\2\2\2\u14d4\u14d5\3\2\2\2\u14d5\u14d6\5\u04d0\u0269\2\u14d6\u0289"+
		"\3\2\2\2\u14d7\u14d8\7F\2\2\u14d8\u14da\7\u0207\2\2\u14d9\u14db\5\u0488"+
		"\u0245\2\u14da\u14d9\3\2\2\2\u14da\u14db\3\2\2\2\u14db\u14dc\3\2\2\2\u14dc"+
		"\u14de\5\u034a\u01a6\2\u14dd\u14df\5\u00ceh\2\u14de\u14dd\3\2\2\2\u14de"+
		"\u14df\3\2\2\2\u14df\u028b\3\2\2\2\u14e0\u14e1\7F\2\2\u14e1\u14e3\7\u013b"+
		"\2\2\u14e2\u14e4\5\u0488\u0245\2\u14e3\u14e2\3\2\2\2\u14e3\u14e4\3\2\2"+
		"\2\u14e4\u14e5\3\2\2\2\u14e5\u14e6\5\u034a\u01a6\2\u14e6\u028d\3\2\2\2"+
		"\u14e7\u14e8\7F\2\2\u14e8\u14e9\7\u00be\2\2\u14e9\u14ea\7\u0208\2\2\u14ea"+
		"\u14ec\t\"\2\2\u14eb\u14ed\5\u0488\u0245\2\u14ec\u14eb\3\2\2\2\u14ec\u14ed"+
		"\3\2\2\2\u14ed\u14ee\3\2\2\2\u14ee\u14f0\5\u02e4\u0173\2\u14ef\u14f1\5"+
		"\u00ceh\2\u14f0\u14ef\3\2\2\2\u14f0\u14f1\3\2\2\2\u14f1\u028f\3\2\2\2"+
		"\u14f2\u14f3\7F\2\2\u14f3\u14f5\7\u021b\2\2\u14f4\u14f6\5\u0488\u0245"+
		"\2\u14f5\u14f4\3\2\2\2\u14f5\u14f6\3\2\2\2\u14f6\u14f7\3\2\2\2\u14f7\u14f8"+
		"\7u\2\2\u14f8\u14f9\5\u036c\u01b7\2\u14f9\u14fa\7\u0118\2\2\u14fa\u14fc"+
		"\5\u02e4\u0173\2\u14fb\u14fd\5\u00ceh\2\u14fc\u14fb\3\2\2\2\u14fc\u14fd"+
		"\3\2\2\2\u14fd\u0291\3\2\2\2\u14fe\u14ff\7F\2\2\u14ff\u1501\7X\2\2\u1500"+
		"\u1502\5\u0488\u0245\2\u1501\u1500\3\2\2\2\u1501\u1502\3\2\2\2\u1502\u1503"+
		"\3\2\2\2\u1503\u1504\5\u034a\u01a6\2\u1504\u1505\7q\2\2\u1505\u1507\5"+
		"\u02de\u0170\2\u1506\u1508\5\u00ceh\2\u1507\u1506\3\2\2\2\u1507\u1508"+
		"\3\2\2\2\u1508\u0293\3\2\2\2\u1509\u150a\7F\2\2\u150a\u150c\7\u00ba\2"+
		"\2\u150b\u150d\5\u0488\u0245\2\u150c\u150b\3\2\2\2\u150c\u150d\3\2\2\2"+
		"\u150d\u150e\3\2\2\2\u150e\u1510\5\u018e\u00c8\2\u150f\u1511\5\u00ceh"+
		"\2\u1510\u150f\3\2\2\2\u1510\u1511\3\2\2\2\u1511\u0295\3\2\2\2\u1512\u1513"+
		"\7F\2\2\u1513\u1514\7\u00f2\2\2\u1514\u1516\7\u01e4\2\2\u1515\u1517\5"+
		"\u0488\u0245\2\u1516\u1515\3\2\2\2\u1516\u1517\3\2\2\2\u1517\u1518\3\2"+
		"\2\2\u1518\u1519\7u\2\2\u1519\u151a\5\u01a2\u00d2\2\u151a\u151b\7\u0206"+
		"\2\2\u151b\u151c\5\u02e4\u0173\2\u151c\u0297\3\2\2\2\u151d\u151e\7F\2"+
		"\2\u151e\u1520\7Z\2\2\u151f\u1521\5\u0488\u0245\2\u1520\u151f\3\2\2\2"+
		"\u1520\u1521\3\2\2\2\u1521\u1522\3\2\2\2\u1522\u1524\5\u03d0\u01e9\2\u1523"+
		"\u1525\5\u00ceh\2\u1524\u1523\3\2\2\2\u1524\u1525\3\2\2\2\u1525\u0299"+
		"\3\2\2\2\u1526\u1527\7\u01fe\2\2\u1527\u1528\7S\2\2\u1528\u1529\7H\2\2"+
		"\u1529\u152b\5\u02e4\u0173\2\u152a\u152c\5\u029c\u014f\2\u152b\u152a\3"+
		"\2\2\2\u152b\u152c\3\2\2\2\u152c\u152d\3\2\2\2\u152d\u152e\7e\2\2\u152e"+
		"\u152f\7\u0206\2\2\u152f\u1530\5\u02e4\u0173\2\u1530\u1531\7[\2\2\u1531"+
		"\u1533\5\u02e4\u0173\2\u1532\u1534\5\u0450\u0229\2\u1533\u1532\3\2\2\2"+
		"\u1533\u1534\3\2\2\2\u1534\u029b\3\2\2\2\u1535\u1536\5\u029e\u0150\2\u1536"+
		"\u1537\7#\2\2\u1537\u1538\5\u0478\u023d\2\u1538\u1539\7$\2\2\u1539\u029d"+
		"\3\2\2\2\u153a\u153b\7\u008a\2\2\u153b\u153e\7v\2\2\u153c\u153e\7\u00cd"+
		"\2\2\u153d\u153a\3\2\2\2\u153d\u153c\3\2\2\2\u153e\u029f\3\2\2\2\u153f"+
		"\u1540\7\u01e8\2\2\u1540\u1541\5\u034c\u01a7\2\u1541\u02a1\3\2\2\2\u1542"+
		"\u1543\7\u01ea\2\2\u1543\u1544\5\u0536\u029c\2\u1544\u02a3\3\2\2\2\u1545"+
		"\u1546\7\u01fc\2\2\u1546\u1548\5\u02e4\u0173\2\u1547\u1549\5\u02a8\u0155"+
		"\2\u1548\u1547\3\2\2\2\u1548\u1549\3\2\2\2\u1549\u154a\3\2\2\2\u154a\u154b"+
		"\7p\2\2\u154b\u154c\5\u04c2\u0262\2\u154c\u02a5\3\2\2\2\u154d\u154f\7"+
		"\u01d5\2\2\u154e\u1550\7\u01fc\2\2\u154f\u154e\3\2\2\2\u154f\u1550\3\2"+
		"\2\2\u1550\u1553\3\2\2\2\u1551\u1554\5\u02e4\u0173\2\u1552\u1554\7\u0081"+
		"\2\2\u1553\u1551\3\2\2\2\u1553\u1552\3\2\2\2\u1554\u02a7\3\2\2\2\u1555"+
		"\u1556\7#\2\2\u1556\u1557\5\u0342\u01a2\2\u1557\u1558\7$\2\2\u1558\u02a9"+
		"\3\2\2\2\u1559\u155a\7\u01fb\2\2\u155a\u155b\7\u018c\2\2\u155b\u155d\7"+
		"Z\2\2\u155c\u155e\7\u00f9\2\2\u155d\u155c\3\2\2\2\u155d\u155e\3\2\2\2"+
		"\u155e\u155f\3\2\2\2\u155f\u1561\5\u034a\u01a6\2\u1560\u1562\5\24\13\2"+
		"\u1561\u1560\3\2\2\2\u1561\u1562\3\2\2\2\u1562\u02ab\3\2\2\2\u1563\u1564"+
		"\7\u01f3\2\2\u1564\u1565\5\u02ae\u0158\2\u1565\u02ad\3\2\2\2\u1566\u1568"+
		"\5\u02b6\u015c\2\u1567\u1569\7\u00f9\2\2\u1568\u1567\3\2\2\2\u1568\u1569"+
		"\3\2\2\2\u1569\u156a\3\2\2\2\u156a\u156b\5\u034a\u01a6\2\u156b\u1585\3"+
		"\2\2\2\u156c\u156e\5\u02b4\u015b\2\u156d\u156f\7\u00f9\2\2\u156e\u156d"+
		"\3\2\2\2\u156e\u156f\3\2\2\2\u156f\u1570\3\2\2\2\u1570\u1571\5\u02e4\u0173"+
		"\2\u1571\u1585\3\2\2\2\u1572\u1573\7#\2\2\u1573\u1574\5\u02b0\u0159\2"+
		"\u1574\u1575\7$\2\2\u1575\u1577\5\u02b6\u015c\2\u1576\u1578\7\u00f9\2"+
		"\2\u1577\u1576\3\2\2\2\u1577\u1578\3\2\2\2\u1578\u1579\3\2\2\2\u1579\u157a"+
		"\5\u034a\u01a6\2\u157a\u1585\3\2\2\2\u157b\u157c\7#\2\2\u157c\u157d\5"+
		"\u02b0\u0159\2\u157d\u157e\7$\2\2\u157e\u1580\5\u02b4\u015b\2\u157f\u1581"+
		"\7\u00f9\2\2\u1580\u157f\3\2\2\2\u1580\u1581\3\2\2\2\u1581\u1582\3\2\2"+
		"\2\u1582\u1583\5\u02e4\u0173\2\u1583\u1585\3\2\2\2\u1584\u1566\3\2\2\2"+
		"\u1584\u156c\3\2\2\2\u1584\u1572\3\2\2\2\u1584\u157b\3\2\2\2\u1585\u02af"+
		"\3\2\2\2\u1586\u158b\5\u02b2\u015a\2\u1587\u1588\7)\2\2\u1588\u158a\5"+
		"\u02b2\u015a\2\u1589\u1587\3\2\2\2\u158a\u158d\3\2\2\2\u158b\u1589\3\2"+
		"\2\2\u158b\u158c\3\2\2\2\u158c\u02b1\3\2\2\2\u158d\u158b\3\2\2\2\u158e"+
		"\u158f\7\u022a\2\2\u158f\u02b3\3\2\2\2\u1590\u1591\t$\2\2\u1591\u02b5"+
		"\3\2\2\2\u1592\u1593\t\32\2\2\u1593\u02b7\3\2\2\2\u1594\u1595\7E\2\2\u1595"+
		"\u1596\7S\2\2\u1596\u1598\7M\2\2\u1597\u1599\5\u0488\u0245\2\u1598\u1597"+
		"\3\2\2\2\u1598\u1599\3\2\2\2\u1599\u159a\3\2\2\2\u159a\u159b\5\u047a\u023e"+
		"\2\u159b\u159c\5\u02ba\u015e\2\u159c\u02b9\3\2\2\2\u159d\u159e\7\u012c"+
		"\2\2\u159e\u159f\7v\2\2\u159f\u15ad\5\u02e4\u0173\2\u15a0\u15a2\7\u012c"+
		"\2\2\u15a1\u15a3\7N\2\2\u15a2\u15a1\3\2\2\2\u15a2\u15a3\3\2\2\2\u15a3"+
		"\u15a4\3\2\2\2\u15a4\u15a5\5\u02e4\u0173\2\u15a5\u15a6\7v\2\2\u15a6\u15a7"+
		"\5\u02e4\u0173\2\u15a7\u15ad\3\2\2\2\u15a8\u15ad\5\u00be`\2\u15a9\u15aa"+
		"\7L\2\2\u15aa\u15ab\7H\2\2\u15ab\u15ad\5\u02e4\u0173\2\u15ac\u159d\3\2"+
		"\2\2\u15ac\u15a0\3\2\2\2\u15ac\u15a8\3\2\2\2\u15ac\u15a9\3\2\2\2\u15ad"+
		"\u02bb\3\2\2\2\u15ae\u15af\7D\2\2\u15af\u15b0\7\u018d\2\2\u15b0\u15b1"+
		"\5\u0326\u0194\2\u15b1\u15b2\5\u043e\u0220\2\u15b2\u02bd\3\2\2\2\u15b3"+
		"\u15b4\7D\2\2\u15b4\u15b5\7\u018d\2\2\u15b5\u15b6\7\u01bf\2\2\u15b6\u15b8"+
		"\5\u03cc\u01e7\2\u15b7\u15b9\7\u00a4\2\2\u15b8\u15b7\3\2\2\2\u15b8\u15b9"+
		"\3\2\2\2\u15b9\u15ba\3\2\2\2\u15ba\u15bb\7u\2\2\u15bb\u15bc\7\u00ba\2"+
		"\2\u15bc\u15bd\5\u036c\u01b7\2\u15bd\u15be\7n\2\2\u15be\u15c1\5\u02e4"+
		"\u0173\2\u15bf\u15c0\7\u01d8\2\2\u15c0\u15c2\5\u03cc\u01e7\2\u15c1\u15bf"+
		"\3\2\2\2\u15c1\u15c2\3\2\2\2\u15c2\u15c3\3\2\2\2\u15c3\u15c4\7p\2\2\u15c4"+
		"\u15c5\5\u00e4s\2\u15c5\u02bf\3\2\2\2\u15c6\u15c7\7D\2\2\u15c7\u15c8\7"+
		"\u018d\2\2\u15c8\u15c9\7\u01d8\2\2\u15c9\u15ca\5\u03cc\u01e7\2\u15ca\u15cb"+
		"\7n\2\2\u15cb\u15cc\5\u02e4\u0173\2\u15cc\u02c1\3\2\2\2\u15cd\u15ce\7"+
		"\u0133\2\2\u15ce\u15cf\7\u01dd\2\2\u15cf\u15d0\7u\2\2\u15d0\u15d1\5\u045e"+
		"\u0230\2\u15d1\u15d2\3\2\2\2\u15d2\u15d3\7q\2\2\u15d3\u15d4\5\u02c6\u0164"+
		"\2\u15d4\u15d5\7y\2\2\u15d5\u15d6\5\u02c4\u0163\2\u15d6\u02c3\3\2\2\2"+
		"\u15d7\u15d8\t\26\2\2\u15d8\u02c5\3\2\2\2\u15d9\u15da\5\u01b8\u00dd\2"+
		"\u15da\u15db\5\u03cc\u01e7\2\u15db\u15e8\3\2\2\2\u15dc\u15dd\7N\2\2\u15dd"+
		"\u15e8\5\u03cc\u01e7\2\u15de\u15df\t%\2\2\u15df\u15e8\5\u036c\u01b7\2"+
		"\u15e0\u15e1\t&\2\2\u15e1\u15e8\5\u0134\u009b\2\u15e2\u15e3\7\u0119\2"+
		"\2\u15e3\u15e4\7\u0122\2\2\u15e4\u15e8\5\u0424\u0213\2\u15e5\u15e6\t\'"+
		"\2\2\u15e6\u15e8\5\u0130\u0099\2\u15e7\u15d9\3\2\2\2\u15e7\u15dc\3\2\2"+
		"\2\u15e7\u15de\3\2\2\2\u15e7\u15e0\3\2\2\2\u15e7\u15e2\3\2\2\2\u15e7\u15e5"+
		"\3\2\2\2\u15e8\u02c7\3\2\2\2\u15e9\u15ec\7\u021c\2\2\u15ea\u15ed\5\u034c"+
		"\u01a7\2\u15eb\u15ed\7\24\2\2\u15ec\u15ea\3\2\2\2\u15ec\u15eb\3\2\2\2"+
		"\u15ed\u02c9\3\2\2\2\u15ee\u15f0\7-\2\2\u15ef\u15f1\5\u02d0\u0169\2\u15f0"+
		"\u15ef\3\2\2\2\u15f0\u15f1\3\2\2\2\u15f1\u02cb\3\2\2\2\u15f2\u15f3\t("+
		"\2\2\u15f3\u02cd\3\2\2\2\u15f4\u15f6\7\23\2\2\u15f5\u15f4\3\2\2\2\u15f5"+
		"\u15f6\3\2\2\2\u15f6\u15f7\3\2\2\2\u15f7\u15f9\7\u0230\2\2\u15f8\u15fa"+
		"\5\u02d0\u0169\2\u15f9\u15f8\3\2\2\2\u15f9\u15fa\3\2\2\2\u15fa\u02cf\3"+
		"\2\2\2\u15fb\u15fc\7\62\2\2\u15fc\u15fd\7\u022e\2\2\u15fd\u02d1\3\2\2"+
		"\2\u15fe\u1600\5\u02d4\u016b\2\u15ff\u15fe\3\2\2\2\u15ff\u1600\3\2\2\2"+
		"\u1600\u1601\3\2\2\2\u1601\u1603\7\u022e\2\2\u1602\u1604\5\u02d6\u016c"+
		"\2\u1603\u1602\3\2\2\2\u1603\u1604\3\2\2\2\u1604\u1607\3\2\2\2\u1605\u1607"+
		"\5\u02d8\u016d\2\u1606\u15ff\3\2\2\2\u1606\u1605\3\2\2\2\u1607\u02d3\3"+
		"\2\2\2\u1608\u1609\t)\2\2\u1609\u160a\7\f\2\2\u160a\u02d5\3\2\2\2\u160b"+
		"\u160c\7\u0147\2\2\u160c\u160d\7\u022f\2\2\u160d\u02d7\3\2\2\2\u160e\u160f"+
		"\t*\2\2\u160f\u02d9\3\2\2\2\u1610\u1611\t+\2\2\u1611\u02db\3\2\2\2\u1612"+
		"\u1613\5\u02d2\u016a\2\u1613\u02dd\3\2\2\2\u1614\u1615\5\u02e2\u0172\2"+
		"\u1615\u1616\7\27\2\2\u1616\u1618\3\2\2\2\u1617\u1614\3\2\2\2\u1617\u1618"+
		"\3\2\2\2\u1618\u1619\3\2\2\2\u1619\u161a\5\u02e4\u0173\2\u161a\u02df\3"+
		"\2\2\2\u161b\u161c\5\u02e2\u0172\2\u161c\u161d\7\27\2\2\u161d\u161f\3"+
		"\2\2\2\u161e\u161b\3\2\2\2\u161e\u161f\3\2\2\2\u161f\u1620\3\2\2\2\u1620"+
		"\u1621\5\u02e4\u0173\2\u1621\u02e1\3\2\2\2\u1622\u1623\5\u02d2\u016a\2"+
		"\u1623\u02e3\3\2\2\2\u1624\u1625\5\u02d2\u016a\2\u1625\u02e5\3\2\2\2\u1626"+
		"\u1628\7#\2\2\u1627\u1626\3\2\2\2\u1627\u1628\3\2\2\2\u1628\u1629\3\2"+
		"\2\2\u1629\u162e\5\u02de\u0170\2\u162a\u162b\7)\2\2\u162b\u162d\5\u02de"+
		"\u0170\2\u162c\u162a\3\2\2\2\u162d\u1630\3\2\2\2\u162e\u162c\3\2\2\2\u162e"+
		"\u162f\3\2\2\2\u162f\u1632\3\2\2\2\u1630\u162e\3\2\2\2\u1631\u1633\7$"+
		"\2\2\u1632\u1631\3\2\2\2\u1632\u1633\3\2\2\2\u1633\u02e7\3\2\2\2\u1634"+
		"\u1635\7#\2\2\u1635\u163a\5\u02e0\u0171\2\u1636\u1637\7)\2\2\u1637\u1639"+
		"\5\u02e0\u0171\2\u1638\u1636\3\2\2\2\u1639\u163c\3\2\2\2\u163a\u1638\3"+
		"\2\2\2\u163a\u163b\3\2\2\2\u163b\u163d\3\2\2\2\u163c\u163a\3\2\2\2\u163d"+
		"\u163e\7$\2\2\u163e\u02e9\3\2\2\2\u163f\u1642\7\u022f\2\2\u1640\u1642"+
		"\5\u02d2\u016a\2\u1641\u163f\3\2\2\2\u1641\u1640\3\2\2\2\u1642\u02eb\3"+
		"\2\2\2\u1643\u1644\5\u02d2\u016a\2\u1644\u02ed\3\2\2\2\u1645\u1646\5\u02d2"+
		"\u016a\2\u1646\u02ef\3\2\2\2\u1647\u1649\7Q\2\2\u1648\u1647\3\2\2\2\u1648"+
		"\u1649\3\2\2\2\u1649\u164a\3\2\2\2\u164a\u164b\7T\2\2\u164b\u02f1\3\2"+
		"\2\2\u164c\u164d\t,\2\2\u164d\u02f3\3\2\2\2\u164e\u164f\t-\2\2\u164f\u02f5"+
		"\3\2\2\2\u1650\u1668\7\u0083\2\2\u1651\u1668\7\60\2\2\u1652\u1653\7z\2"+
		"\2\u1653\u1668\7\u0083\2\2\u1654\u1668\7\61\2\2\u1655\u1668\7\u0190\2"+
		"\2\u1656\u1668\7\63\2\2\u1657\u1658\7z\2\2\u1658\u1668\7\u0190\2\2\u1659"+
		"\u1668\7\64\2\2\u165a\u165b\7\u0191\2\2\u165b\u1668\7v\2\2\u165c\u165d"+
		"\7z\2\2\u165d\u165e\7\u0191\2\2\u165e\u1668\7v\2\2\u165f\u1668\7\n\2\2"+
		"\u1660\u1661\7\t\2\2\u1661\u1668\7\n\2\2\u1662\u1663\7\n\2\2\u1663\u1668"+
		"\7\24\2\2\u1664\u1665\7\t\2\2\u1665\u1666\7\n\2\2\u1666\u1668\7\24\2\2"+
		"\u1667\u1650\3\2\2\2\u1667\u1651\3\2\2\2\u1667\u1652\3\2\2\2\u1667\u1654"+
		"\3\2\2\2\u1667\u1655\3\2\2\2\u1667\u1656\3\2\2\2\u1667\u1657\3\2\2\2\u1667"+
		"\u1659\3\2\2\2\u1667\u165a\3\2\2\2\u1667\u165c\3\2\2\2\u1667\u165f\3\2"+
		"\2\2\u1667\u1660\3\2\2\2\u1667\u1662\3\2\2\2\u1667\u1664\3\2\2\2\u1668"+
		"\u02f7\3\2\2\2\u1669\u166a\5\u02e4\u0173\2\u166a\u02f9\3\2\2\2\u166b\u166c"+
		"\b\u017e\1\2\u166c\u167e\5\u02fe\u0180\2\u166d\u166e\7\22\2\2\u166e\u167e"+
		"\5\u02fa\u017e\61\u166f\u1670\7\23\2\2\u1670\u167e\5\u02fa\u017e\60\u1671"+
		"\u1672\5\u0316\u018c\2\u1672\u1673\5\u02fa\u017e(\u1673\u167e\3\2\2\2"+
		"\u1674\u1675\7z\2\2\u1675\u167e\5\u02fa\u017e%\u1676\u1677\5\u0330\u0199"+
		"\2\u1677\u1678\7\u00d5\2\2\u1678\u1679\5\u0330\u0199\2\u1679\u167e\3\2"+
		"\2\2\u167a\u167b\7R\2\2\u167b\u167e\5\u0402\u0202\2\u167c\u167e\7\u00a4"+
		"\2\2\u167d\u166b\3\2\2\2\u167d\u166d\3\2\2\2\u167d\u166f\3\2\2\2\u167d"+
		"\u1671\3\2\2\2\u167d\u1674\3\2\2\2\u167d\u1676\3\2\2\2\u167d\u167a\3\2"+
		"\2\2\u167d\u167c\3\2\2\2\u167e\u173e\3\2\2\2\u167f\u1680\f\62\2\2\u1680"+
		"\u1681\7\u00d7\2\2\u1681\u1682\7\u0097\2\2\u1682\u1683\7\u0145\2\2\u1683"+
		"\u173d\5\u02fa\u017e\63\u1684\u1685\f/\2\2\u1685\u1686\7\22\2\2\u1686"+
		"\u173d\5\u02fa\u017e\60\u1687\u1688\f.\2\2\u1688\u1689\7\23\2\2\u1689"+
		"\u173d\5\u02fa\u017e/\u168a\u168b\f-\2\2\u168b\u168c\7\24\2\2\u168c\u173d"+
		"\5\u02fa\u017e.\u168d\u168e\f,\2\2\u168e\u168f\7\25\2\2\u168f\u173d\5"+
		"\u02fa\u017e-\u1690\u1691\f+\2\2\u1691\u1692\7\20\2\2\u1692\u173d\5\u02fa"+
		"\u017e,\u1693\u1694\f*\2\2\u1694\u1695\7\17\2\2\u1695\u173d\5\u02fa\u017e"+
		"+\u1696\u1697\f)\2\2\u1697\u1698\5\u0316\u018c\2\u1698\u1699\5\u02fa\u017e"+
		"*\u1699\u173d\3\2\2\2\u169a\u169b\f&\2\2\u169b\u169c\5\u02f4\u017b\2\u169c"+
		"\u169d\5\u02fa\u017e\'\u169d\u173d\3\2\2\2\u169e\u169f\f$\2\2\u169f\u16a0"+
		"\5\u02f6\u017c\2\u16a0\u16a1\5\u02fa\u017e%\u16a1\u173d\3\2\2\2\u16a2"+
		"\u16a3\f#\2\2\u16a3\u16a4\5\u02f6\u017c\2\u16a4\u16a5\5\u02fa\u017e\2"+
		"\u16a5\u16a6\7\u00dd\2\2\u16a6\u16a7\5\u02fa\u017e$\u16a7\u173d\3\2\2"+
		"\2\u16a8\u16a9\f\27\2\2\u16a9\u16aa\7y\2\2\u16aa\u16ab\7_\2\2\u16ab\u16ac"+
		"\7e\2\2\u16ac\u173d\5\u02fa\u017e\30\u16ad\u16ae\f\26\2\2\u16ae\u16af"+
		"\7y\2\2\u16af\u16b0\7z\2\2\u16b0\u16b1\7_\2\2\u16b1\u16b2\7e\2\2\u16b2"+
		"\u173d\5\u02fa\u017e\27\u16b3\u16b4\f\23\2\2\u16b4\u16b6\7\177\2\2\u16b5"+
		"\u16b7\7\u0197\2\2\u16b6\u16b5\3\2\2\2\u16b6\u16b7\3\2\2\2\u16b7\u16b8"+
		"\3\2\2\2\u16b8\u16b9\5\u02fc\u017f\2\u16b9\u16ba\7w\2\2\u16ba\u16bb\5"+
		"\u02fa\u017e\24\u16bb\u173d\3\2\2\2\u16bc\u16bd\f\22\2\2\u16bd\u16be\7"+
		"z\2\2\u16be\u16c0\7\177\2\2\u16bf\u16c1\7\u0197\2\2\u16c0\u16bf\3\2\2"+
		"\2\u16c0\u16c1\3\2\2\2\u16c1\u16c2\3\2\2\2\u16c2\u16c3\5\u02fc\u017f\2"+
		"\u16c3\u16c4\7w\2\2\u16c4\u16c5\5\u02fa\u017e\23\u16c5\u173d\3\2\2\2\u16c6"+
		"\u16c7\f\21\2\2\u16c7\u16c8\7\177\2\2\u16c8\u16c9\7\u0194\2\2\u16c9\u16ca"+
		"\5\u02fc\u017f\2\u16ca\u16cb\7w\2\2\u16cb\u16cc\5\u02fa\u017e\22\u16cc"+
		"\u173d\3\2\2\2\u16cd\u16ce\f\20\2\2\u16ce\u16cf\7z\2\2\u16cf\u16d0\7\177"+
		"\2\2\u16d0\u16d1\7\u0194\2\2\u16d1\u16d2\5\u02fc\u017f\2\u16d2\u16d3\7"+
		"w\2\2\u16d3\u16d4\5\u02fa\u017e\21\u16d4\u173d\3\2\2\2\u16d5\u16d6\f\4"+
		"\2\2\u16d6\u16d7\5\u02f2\u017a\2\u16d7\u16d8\5\u02fa\u017e\5\u16d8\u173d"+
		"\3\2\2\2\u16d9\u16da\f\64\2\2\u16da\u16db\7\62\2\2\u16db\u173d\5\u036c"+
		"\u01b7\2\u16dc\u16dd\f\63\2\2\u16dd\u16de\7\u00f7\2\2\u16de\u173d\5\u03cc"+
		"\u01e7\2\u16df\u16e0\f\'\2\2\u16e0\u173d\5\u0316\u018c\2\u16e1\u16e2\f"+
		"\"\2\2\u16e2\u16e3\7y\2\2\u16e3\u173d\7{\2\2\u16e4\u16e5\f!\2\2\u16e5"+
		"\u173d\7\u0192\2\2\u16e6\u16e7\f \2\2\u16e7\u16e8\7y\2\2\u16e8\u16e9\7"+
		"z\2\2\u16e9\u173d\7{\2\2\u16ea\u16eb\f\37\2\2\u16eb\u173d\7\u0193\2\2"+
		"\u16ec\u16ed\f\35\2\2\u16ed\u16ee\7y\2\2\u16ee\u173d\7|\2\2\u16ef\u16f0"+
		"\f\34\2\2\u16f0\u16f1\7y\2\2\u16f1\u16f2\7z\2\2\u16f2\u173d\7|\2\2\u16f3"+
		"\u16f4\f\33\2\2\u16f4\u16f5\7y\2\2\u16f5\u173d\7}\2\2\u16f6\u16f7\f\32"+
		"\2\2\u16f7\u16f8\7y\2\2\u16f8\u16f9\7z\2\2\u16f9\u173d\7}\2\2\u16fa\u16fb"+
		"\f\31\2\2\u16fb\u16fc\7y\2\2\u16fc\u173d\7\u00e2\2\2\u16fd\u16fe\f\30"+
		"\2\2\u16fe\u16ff\7y\2\2\u16ff\u1700\7z\2\2\u1700\u173d\7\u00e2\2\2\u1701"+
		"\u1702\f\25\2\2\u1702\u1703\7y\2\2\u1703\u1704\7\u0146\2\2\u1704\u1705"+
		"\7#\2\2\u1705\u1706\5\u0342\u01a2\2\u1706\u1707\7$\2\2\u1707\u173d\3\2"+
		"\2\2\u1708\u1709\f\24\2\2\u1709\u170a\7y\2\2\u170a\u170b\7z\2\2\u170b"+
		"\u170c\7\u0146\2\2\u170c\u170d\7#\2\2\u170d\u170e\5\u0342\u01a2\2\u170e"+
		"\u170f\7$\2\2\u170f\u173d\3\2\2\2\u1710\u1711\f\17\2\2\u1711\u1712\7\u0080"+
		"\2\2\u1712\u173d\5\u0308\u0185\2\u1713\u1714\f\16\2\2\u1714\u1715\7z\2"+
		"\2\u1715\u1716\7\u0080\2\2\u1716\u173d\5\u0308\u0185\2\u1717\u1718\f\r"+
		"\2\2\u1718\u1719\5\u0318\u018d\2\u1719\u171a\5\u0336\u019c\2\u171a\u171b"+
		"\5\u0402\u0202\2\u171b\u173d\3\2\2\2\u171c\u171d\f\f\2\2\u171d\u171e\5"+
		"\u0318\u018d\2\u171e\u171f\5\u0336\u019c\2\u171f\u1720\7#\2\2\u1720\u1721"+
		"\5\u02fa\u017e\2\u1721\u1722\7$\2\2\u1722\u173d\3\2\2\2\u1723\u1724\f"+
		"\n\2\2\u1724\u1725\7y\2\2\u1725\u173d\7\u0195\2\2\u1726\u1727\f\t\2\2"+
		"\u1727\u1728\7y\2\2\u1728\u1729\7z\2\2\u1729\u173d\7\u0195\2\2\u172a\u172b"+
		"\f\b\2\2\u172b\u172c\7y\2\2\u172c\u173d\7\u0196\2\2\u172d\u172e\f\7\2"+
		"\2\u172e\u172f\7y\2\2\u172f\u1730\5\u039e\u01d0\2\u1730\u1731\7\u0196"+
		"\2\2\u1731\u173d\3\2\2\2\u1732\u1733\f\6\2\2\u1733\u1734\7y\2\2\u1734"+
		"\u1735\7z\2\2\u1735\u173d\7\u0196\2\2\u1736\u1737\f\5\2\2\u1737\u1738"+
		"\7y\2\2\u1738\u1739\7z\2\2\u1739\u173a\5\u039e\u01d0\2\u173a\u173b\7\u0196"+
		"\2\2\u173b\u173d\3\2\2\2\u173c\u167f\3\2\2\2\u173c\u1684\3\2\2\2\u173c"+
		"\u1687\3\2\2\2\u173c\u168a\3\2\2\2\u173c\u168d\3\2\2\2\u173c\u1690\3\2"+
		"\2\2\u173c\u1693\3\2\2\2\u173c\u1696\3\2\2\2\u173c\u169a\3\2\2\2\u173c"+
		"\u169e\3\2\2\2\u173c\u16a2\3\2\2\2\u173c\u16a8\3\2\2\2\u173c\u16ad\3\2"+
		"\2\2\u173c\u16b3\3\2\2\2\u173c\u16bc\3\2\2\2\u173c\u16c6\3\2\2\2\u173c"+
		"\u16cd\3\2\2\2\u173c\u16d5\3\2\2\2\u173c\u16d9\3\2\2\2\u173c\u16dc\3\2"+
		"\2\2\u173c\u16df\3\2\2\2\u173c\u16e1\3\2\2\2\u173c\u16e4\3\2\2\2\u173c"+
		"\u16e6\3\2\2\2\u173c\u16ea\3\2\2\2\u173c\u16ec\3\2\2\2\u173c\u16ef\3\2"+
		"\2\2\u173c\u16f3\3\2\2\2\u173c\u16f6\3\2\2\2\u173c\u16fa\3\2\2\2\u173c"+
		"\u16fd\3\2\2\2\u173c\u1701\3\2\2\2\u173c\u1708\3\2\2\2\u173c\u1710\3\2"+
		"\2\2\u173c\u1713\3\2\2\2\u173c\u1717\3\2\2\2\u173c\u171c\3\2\2\2\u173c"+
		"\u1723\3\2\2\2\u173c\u1726\3\2\2\2\u173c\u172a\3\2\2\2\u173c\u172d\3\2"+
		"\2\2\u173c\u1732\3\2\2\2\u173c\u1736\3\2\2\2\u173d\u1740\3\2\2\2\u173e"+
		"\u173c\3\2\2\2\u173e\u173f\3\2\2\2\u173f\u02fb\3\2\2\2\u1740\u173e\3\2"+
		"\2\2\u1741\u1742\b\u017f\1\2\u1742\u174b\5\u02fe\u0180\2\u1743\u1744\7"+
		"\22\2\2\u1744\u174b\5\u02fc\u017f\r\u1745\u1746\7\23\2\2\u1746\u174b\5"+
		"\u02fc\u017f\f\u1747\u1748\5\u0316\u018c\2\u1748\u1749\5\u02fc\u017f\n"+
		"\u1749\u174b\3\2\2\2\u174a\u1741\3\2\2\2\u174a\u1743\3\2\2\2\u174a\u1745"+
		"\3\2\2\2\u174a\u1747\3\2\2\2\u174b\u1778\3\2\2\2\u174c\u174d\f\13\2\2"+
		"\u174d\u174e\5\u0316\u018c\2\u174e\u174f\5\u02fc\u017f\f\u174f\u1777\3"+
		"\2\2\2\u1750\u1751\f\b\2\2\u1751\u1752\7y\2\2\u1752\u1753\7_\2\2\u1753"+
		"\u1754\7e\2\2\u1754\u1777\5\u02fc\u017f\t\u1755\u1756\f\7\2\2\u1756\u1757"+
		"\7y\2\2\u1757\u1758\7z\2\2\u1758\u1759\7_\2\2\u1759\u175a\7e\2\2\u175a"+
		"\u1777\5\u02fc\u017f\b\u175b\u175c\f\16\2\2\u175c\u175d\7\62\2\2\u175d"+
		"\u1777\5\u036c\u01b7\2\u175e\u175f\f\t\2\2\u175f\u1777\5\u0316\u018c\2"+
		"\u1760\u1761\f\6\2\2\u1761\u1762\7y\2\2\u1762\u1763\7\u0146\2\2\u1763"+
		"\u1764\7#\2\2\u1764\u1765\5\u0342\u01a2\2\u1765\u1766\7$\2\2\u1766\u1777"+
		"\3\2\2\2\u1767\u1768\f\5\2\2\u1768\u1769\7y\2\2\u1769\u176a\7z\2\2\u176a"+
		"\u176b\7\u0146\2\2\u176b\u176c\7#\2\2\u176c\u176d\5\u0342\u01a2\2\u176d"+
		"\u176e\7$\2\2\u176e\u1777\3\2\2\2\u176f\u1770\f\4\2\2\u1770\u1771\7y\2"+
		"\2\u1771\u1777\7\u0195\2\2\u1772\u1773\f\3\2\2\u1773\u1774\7y\2\2\u1774"+
		"\u1775\7z\2\2\u1775\u1777\7\u0195\2\2\u1776\u174c\3\2\2\2\u1776\u1750"+
		"\3\2\2\2\u1776\u1755\3\2\2\2\u1776\u175b\3\2\2\2\u1776\u175e\3\2\2\2\u1776"+
		"\u1760\3\2\2\2\u1776\u1767\3\2\2\2\u1776\u176f\3\2\2\2\u1776\u1772\3\2"+
		"\2\2\u1777\u177a\3\2\2\2\u1778\u1776\3\2\2\2\u1778\u1779\3\2\2\2\u1779"+
		"\u02fd\3\2\2\2\u177a\u1778\3\2\2\2\u177b\u179b\5\u02ca\u0166\2\u177c\u179b"+
		"\5\u0314\u018b\2\u177d\u179b\5\u0348\u01a5\2\u177e\u1780\7\u022b\2\2\u177f"+
		"\u1781\5\u0304\u0183\2\u1780\u177f\3\2\2\2\u1780\u1781\3\2\2\2\u1781\u179b"+
		"\3\2\2\2\u1782\u1783\7#\2\2\u1783\u1784\5\u02fa\u017e\2\u1784\u1785\7"+
		"$\2\2\u1785\u1786\5\u0302\u0182\2\u1786\u179b\3\2\2\2\u1787\u179b\5\u030a"+
		"\u0186\2\u1788\u179b\5\u0360\u01b1\2\u1789\u179b\5\u0402\u0202\2\u178a"+
		"\u178b\5\u0402\u0202\2\u178b\u178c\5\u0300\u0181\2\u178c\u179b\3\2\2\2"+
		"\u178d\u178e\7~\2\2\u178e\u179b\5\u0402\u0202\2\u178f\u1790\7\u0094\2"+
		"\2\u1790\u179b\5\u0402\u0202\2\u1791\u1792\7\u0094\2\2\u1792\u179b\5\u0338"+
		"\u019d\2\u1793\u179b\5\u0332\u019a\2\u1794\u179b\5\u0334\u019b\2\u1795"+
		"\u1796\7\u00d1\2\2\u1796\u1797\7#\2\2\u1797\u1798\5\u0370\u01b9\2\u1798"+
		"\u1799\7$\2\2\u1799\u179b\3\2\2\2\u179a\u177b\3\2\2\2\u179a\u177c\3\2"+
		"\2\2\u179a\u177d\3\2\2\2\u179a\u177e\3\2\2\2\u179a\u1782\3\2\2\2\u179a"+
		"\u1787\3\2\2\2\u179a\u1788\3\2\2\2\u179a\u1789\3\2\2\2\u179a\u178a\3\2"+
		"\2\2\u179a\u178d\3\2\2\2\u179a\u178f\3\2\2\2\u179a\u1791\3\2\2\2\u179a"+
		"\u1793\3\2\2\2\u179a\u1794\3\2\2\2\u179a\u1795\3\2\2\2\u179b\u02ff\3\2"+
		"\2\2\u179c\u179d\b\u0181\1\2\u179d\u179e\5\u0304\u0183\2\u179e\u17a3\3"+
		"\2\2\2\u179f\u17a0\f\3\2\2\u17a0\u17a2\5\u0304\u0183\2\u17a1\u179f\3\2"+
		"\2\2\u17a2\u17a5\3\2\2\2\u17a3\u17a1\3\2\2\2\u17a3\u17a4\3\2\2\2\u17a4"+
		"\u0301\3\2\2\2\u17a5\u17a3\3\2\2\2\u17a6\u17ab\b\u0182\1\2\u17a7\u17a8"+
		"\f\4\2\2\u17a8\u17aa\5\u0304\u0183\2\u17a9\u17a7\3\2\2\2\u17aa\u17ad\3"+
		"\2\2\2\u17ab\u17a9\3\2\2\2\u17ab\u17ac\3\2\2\2\u17ac\u0303\3\2\2\2\u17ad"+
		"\u17ab\3\2\2\2\u17ae\u17af\7\27\2\2\u17af\u17c0\5\u038c\u01c7\2\u17b0"+
		"\u17b1\7\27\2\2\u17b1\u17c0\7\24\2\2\u17b2\u17b3\7\'\2\2\u17b3\u17b4\5"+
		"\u02fa\u017e\2\u17b4\u17b5\7(\2\2\u17b5\u17c0\3\2\2\2\u17b6\u17b8\7\'"+
		"\2\2\u17b7\u17b9\5\u0306\u0184\2\u17b8\u17b7\3\2\2\2\u17b8\u17b9\3\2\2"+
		"\2\u17b9\u17ba\3\2\2\2\u17ba\u17bc\7\21\2\2\u17bb\u17bd\5\u0306\u0184"+
		"\2\u17bc\u17bb\3\2\2\2\u17bc\u17bd\3\2\2\2\u17bd\u17be\3\2\2\2\u17be\u17c0"+
		"\7(\2\2\u17bf\u17ae\3\2\2\2\u17bf\u17b0\3\2\2\2\u17bf\u17b2\3\2\2\2\u17bf"+
		"\u17b6\3\2\2\2\u17c0\u0305\3\2\2\2\u17c1\u17c2\5\u02fa\u017e\2\u17c2\u0307"+
		"\3\2\2\2\u17c3\u17c9\5\u0402\u0202\2\u17c4\u17c5\7#\2\2\u17c5\u17c6\5"+
		"\u0370\u01b9\2\u17c6\u17c7\7$\2\2\u17c7\u17c9\3\2\2\2\u17c8\u17c3\3\2"+
		"\2\2\u17c8\u17c4\3\2\2\2\u17c9\u0309\3\2\2\2\u17ca\u17cc\7`\2\2\u17cb"+
		"\u17cd\5\u0312\u018a\2\u17cc\u17cb\3\2\2\2\u17cc\u17cd\3\2\2\2\u17cd\u17ce"+
		"\3\2\2\2\u17ce\u17d0\5\u030c\u0187\2\u17cf\u17d1\5\u0310\u0189\2\u17d0"+
		"\u17cf\3\2\2\2\u17d0\u17d1\3\2\2\2\u17d1\u17d2\3\2\2\2\u17d2\u17d3\7\u00d9"+
		"\2\2\u17d3\u030b\3\2\2\2\u17d4\u17d6\5\u030e\u0188\2\u17d5\u17d4\3\2\2"+
		"\2\u17d6\u17d7\3\2\2\2\u17d7\u17d5\3\2\2\2\u17d7\u17d8\3\2\2\2\u17d8\u030d"+
		"\3\2\2\2\u17d9\u17da\7a\2\2\u17da\u17db\5\u02fa\u017e\2\u17db\u17dc\7"+
		"t\2\2\u17dc\u17dd\5\u02fa\u017e\2\u17dd\u030f\3\2\2\2\u17de\u17df\7s\2"+
		"\2\u17df\u17e0\5\u02fa\u017e\2\u17e0\u0311\3\2\2\2\u17e1\u17e2\5\u02fa"+
		"\u017e\2\u17e2\u0313\3\2\2\2\u17e3\u17e8\5\u034c\u01a7\2\u17e4\u17e5\5"+
		"\u034c\u01a7\2\u17e5\u17e6\5\u0300\u0181\2\u17e6\u17e8\3\2\2\2\u17e7\u17e3"+
		"\3\2\2\2\u17e7\u17e4\3\2\2\2\u17e8\u0315\3\2\2\2\u17e9\u17f0\5\u0320\u0191"+
		"\2\u17ea\u17eb\7\u018d\2\2\u17eb\u17ec\7#\2\2\u17ec\u17ed\5\u0326\u0194"+
		"\2\u17ed\u17ee\7$\2\2\u17ee\u17f0\3\2\2\2\u17ef\u17e9\3\2\2\2\u17ef\u17ea"+
		"\3\2\2\2\u17f0\u0317\3\2\2\2\u17f1\u17fe\5\u031a\u018e\2\u17f2\u17f3\7"+
		"\u018d\2\2\u17f3\u17f4\7#\2\2\u17f4\u17f5\5\u0326\u0194\2\u17f5\u17f6"+
		"\7$\2\2\u17f6\u17fe\3\2\2\2\u17f7\u17fe\7\u0083\2\2\u17f8\u17f9\7z\2\2"+
		"\u17f9\u17fe\7\u0083\2\2\u17fa\u17fe\7\n\2\2\u17fb\u17fc\7\t\2\2\u17fc"+
		"\u17fe\7\n\2\2\u17fd\u17f1\3\2\2\2\u17fd\u17f2\3\2\2\2\u17fd\u17f7\3\2"+
		"\2\2\u17fd\u17f8\3\2\2\2\u17fd\u17fa\3\2\2\2\u17fd\u17fb\3\2\2\2\u17fe"+
		"\u0319\3\2\2\2\u17ff\u1802\5\u031c\u018f\2\u1800\u1802\5\u031e\u0190\2"+
		"\u1801\u17ff\3\2\2\2\u1801\u1800\3\2\2\2\u1802\u031b\3\2\2\2\u1803\u1805"+
		"\t.\2\2\u1804\u1803\3\2\2\2\u1805\u1806\3\2\2\2\u1806\u1804\3\2\2\2\u1806"+
		"\u1807\3\2\2\2\u1807\u031d\3\2\2\2\u1808\u1809\t/\2\2\u1809\u031f\3\2"+
		"\2\2\u180a\u181a\7\65\2\2\u180b\u181a\7\66\2\2\u180c\u181a\7\67\2\2\u180d"+
		"\u181a\78\2\2\u180e\u181a\79\2\2\u180f\u181a\7:\2\2\u1810\u181a\7-\2\2"+
		"\u1811\u1812\7-\2\2\u1812\u181a\7\13\2\2\u1813\u181a\7;\2\2\u1814\u181a"+
		"\7\b\2\2\u1815\u181a\7\23\2\2\u1816\u181a\7<\2\2\u1817\u181a\7=\2\2\u1818"+
		"\u181a\7>\2\2\u1819\u180a\3\2\2\2\u1819\u180b\3\2\2\2\u1819\u180c\3\2"+
		"\2\2\u1819\u180d\3\2\2\2\u1819\u180e\3\2\2\2\u1819\u180f\3\2\2\2\u1819"+
		"\u1810\3\2\2\2\u1819\u1811\3\2\2\2\u1819\u1813\3\2\2\2\u1819\u1814\3\2"+
		"\2\2\u1819\u1815\3\2\2\2\u1819\u1816\3\2\2\2\u1819\u1817\3\2\2\2\u1819"+
		"\u1818\3\2\2\2\u181a\u0321\3\2\2\2\u181b\u1822\5\u031a\u018e\2\u181c\u181d"+
		"\7\u018d\2\2\u181d\u181e\7#\2\2\u181e\u181f\5\u0326\u0194\2\u181f\u1820"+
		"\7$\2\2\u1820\u1822\3\2\2\2\u1821\u181b\3\2\2\2\u1821\u181c\3\2\2\2\u1822"+
		"\u0323\3\2\2\2\u1823\u1824\t\60\2\2\u1824\u0325\3\2\2\2\u1825\u182b\5"+
		"\u031a\u018e\2\u1826\u1827\5\u034c\u01a7\2\u1827\u1828\7\27\2\2\u1828"+
		"\u1829\5\u0326\u0194\2\u1829\u182b\3\2\2\2\u182a\u1825\3\2\2\2\u182a\u1826"+
		"\3\2\2\2\u182b\u0327\3\2\2\2\u182c\u182d\t\61\2\2\u182d\u182f\5\u032a"+
		"\u0196\2\u182e\u1830\5\u032e\u0198\2\u182f\u182e\3\2\2\2\u182f\u1830\3"+
		"\2\2\2\u1830\u0329\3\2\2\2\u1831\u1838\5\u032c\u0197\2\u1832\u1833\7\177"+
		"\2\2\u1833\u1834\5\u032c\u0197\2\u1834\u1835\7w\2\2\u1835\u1836\5\u032c"+
		"\u0197\2\u1836\u1838\3\2\2\2\u1837\u1831\3\2\2\2\u1837\u1832\3\2\2\2\u1838"+
		"\u032b\3\2\2\2\u1839\u183a\7\u013e\2\2\u183a\u1846\7\u012a\2\2\u183b\u183c"+
		"\7\u013e\2\2\u183c\u1846\7\u010c\2\2\u183d\u183e\7\u00a5\2\2\u183e\u1846"+
		"\7\u00e1\2\2\u183f\u1840\5\u02fa\u017e\2\u1840\u1841\7\u012a\2\2\u1841"+
		"\u1846\3\2\2\2\u1842\u1843\5\u02fa\u017e\2\u1843\u1844\7\u010c\2\2\u1844"+
		"\u1846\3\2\2\2\u1845\u1839\3\2\2\2\u1845\u183b\3\2\2\2\u1845\u183d\3\2"+
		"\2\2\u1845\u183f\3\2\2\2\u1845\u1842\3\2\2\2\u1846\u032d\3\2\2\2\u1847"+
		"\u1848\7\u00de\2\2\u1848\u1849\7\u00a5\2\2\u1849\u1852\7\u00e1\2\2\u184a"+
		"\u184b\7\u00de\2\2\u184b\u1852\7\u0085\2\2\u184c\u184d\7\u00de\2\2\u184d"+
		"\u1852\7\u00ce\2\2\u184e\u184f\7\u00de\2\2\u184f\u1850\7\u00e9\2\2\u1850"+
		"\u1852\7\u00d4\2\2\u1851\u1847\3\2\2\2\u1851\u184a\3\2\2\2\u1851\u184c"+
		"\3\2\2\2\u1851\u184e\3\2\2\2\u1852\u032f\3\2\2\2\u1853\u1854\7\u00e1\2"+
		"\2\u1854\u1855\7#\2\2\u1855\u1856\5\u0370\u01b9\2\u1856\u1857\7$\2\2\u1857"+
		"\u1862\3\2\2\2\u1858\u1859\7\u00e1\2\2\u1859\u185a\7#\2\2\u185a\u1862"+
		"\7$\2\2\u185b\u185c\7#\2\2\u185c\u185d\5\u0370\u01b9\2\u185d\u185e\7)"+
		"\2\2\u185e\u185f\5\u02fa\u017e\2\u185f\u1860\7$\2\2\u1860\u1862\3\2\2"+
		"\2\u1861\u1853\3\2\2\2\u1861\u1858\3\2\2\2\u1861\u185b\3\2\2\2\u1862\u0331"+
		"\3\2\2\2\u1863\u1864\7\u00e1\2\2\u1864\u1865\7#\2\2\u1865\u1866\5\u0370"+
		"\u01b9\2\u1866\u1867\7$\2\2\u1867\u186c\3\2\2\2\u1868\u1869\7\u00e1\2"+
		"\2\u1869\u186a\7#\2\2\u186a\u186c\7$\2\2\u186b\u1863\3\2\2\2\u186b\u1868"+
		"\3\2\2\2\u186c\u0333\3\2\2\2\u186d\u186e\7#\2\2\u186e\u186f\5\u0370\u01b9"+
		"\2\u186f\u1870\7)\2\2\u1870\u1871\5\u02fa\u017e\2\u1871\u1872\7$\2\2\u1872"+
		"\u0335\3\2\2\2\u1873\u1874\t\62\2\2\u1874\u0337\3\2\2\2\u1875\u1876\7"+
		"\'\2\2\u1876\u1877\5\u0370\u01b9\2\u1877\u1878\7(\2\2\u1878\u1880\3\2"+
		"\2\2\u1879\u187a\7\'\2\2\u187a\u187b\5\u033a\u019e\2\u187b\u187c\7(\2"+
		"\2\u187c\u1880\3\2\2\2\u187d\u187e\7\'\2\2\u187e\u1880\7(\2\2\u187f\u1875"+
		"\3\2\2\2\u187f\u1879\3\2\2\2\u187f\u187d\3\2\2\2\u1880\u0339\3\2\2\2\u1881"+
		"\u1886\5\u0338\u019d\2\u1882\u1883\7)\2\2\u1883\u1885\5\u0338\u019d\2"+
		"\u1884\u1882\3\2\2\2\u1885\u1888\3\2\2\2\u1886\u1884\3\2\2\2\u1886\u1887"+
		"\3\2\2\2\u1887\u033b\3\2\2\2\u1888\u1886\3\2\2\2\u1889\u188e\5\u0340\u01a1"+
		"\2\u188a\u188b\7)\2\2\u188b\u188d\5\u0340\u01a1\2\u188c\u188a\3\2\2\2"+
		"\u188d\u1890\3\2\2\2\u188e\u188c\3\2\2\2\u188e\u188f\3\2\2\2\u188f\u033d"+
		"\3\2\2\2\u1890\u188e\3\2\2\2\u1891\u1892\5\u034e\u01a8\2\u1892\u033f\3"+
		"\2\2\2\u1893\u189d\5\u02fa\u017e\2\u1894\u1895\5\u033e\u01a0\2\u1895\u1896"+
		"\7\34\2\2\u1896\u1897\5\u02fa\u017e\2\u1897\u189d\3\2\2\2\u1898\u1899"+
		"\5\u033e\u01a0\2\u1899\u189a\7\37\2\2\u189a\u189b\5\u02fa\u017e\2\u189b"+
		"\u189d\3\2\2\2\u189c\u1893\3\2\2\2\u189c\u1894\3\2\2\2\u189c\u1898\3\2"+
		"\2\2\u189d\u0341\3\2\2\2\u189e\u18a3\5\u036c\u01b7\2\u189f\u18a0\7)\2"+
		"\2\u18a0\u18a2\5\u036c\u01b7\2\u18a1\u189f\3\2\2\2\u18a2\u18a5\3\2\2\2"+
		"\u18a3\u18a1\3\2\2\2\u18a3\u18a4\3\2\2\2\u18a4\u0343\3\2\2\2\u18a5\u18a3"+
		"\3\2\2\2\u18a6\u18a7\5\u0346\u01a4\2\u18a7\u18a8\7#\2\2\u18a8\u18a9\7"+
		"$\2\2\u18a9\u18de\3\2\2\2\u18aa\u18ab\5\u0346\u01a4\2\u18ab\u18ac\7#\2"+
		"\2\u18ac\u18ae\5\u033c\u019f\2\u18ad\u18af\5\u03da\u01ee\2\u18ae\u18ad"+
		"\3\2\2\2\u18ae\u18af\3\2\2\2\u18af\u18b0\3\2\2\2\u18b0\u18b1\7$\2\2\u18b1"+
		"\u18de\3\2\2\2\u18b2\u18b3\5\u0346\u01a4\2\u18b3\u18b4\7#\2\2\u18b4\u18b5"+
		"\7\u0198\2\2\u18b5\u18b7\5\u0340\u01a1\2\u18b6\u18b8\5\u03da\u01ee\2\u18b7"+
		"\u18b6\3\2\2\2\u18b7\u18b8\3\2\2\2\u18b8\u18b9\3\2\2\2\u18b9\u18ba\7$"+
		"\2\2\u18ba\u18de\3\2\2\2\u18bb\u18bc\5\u0346\u01a4\2\u18bc\u18bd\7#\2"+
		"\2\u18bd\u18be\5\u033c\u019f\2\u18be\u18bf\7)\2\2\u18bf\u18c0\7\u0198"+
		"\2\2\u18c0\u18c2\5\u0340\u01a1\2\u18c1\u18c3\5\u03da\u01ee\2\u18c2\u18c1"+
		"\3\2\2\2\u18c2\u18c3\3\2\2\2\u18c3\u18c4\3\2\2\2\u18c4\u18c5\7$\2\2\u18c5"+
		"\u18de\3\2\2\2\u18c6\u18c7\5\u0346\u01a4\2\u18c7\u18c8\7#\2\2\u18c8\u18c9"+
		"\7\u0081\2\2\u18c9\u18cb\5\u033c\u019f\2\u18ca\u18cc\5\u03da\u01ee\2\u18cb"+
		"\u18ca\3\2\2\2\u18cb\u18cc\3\2\2\2\u18cc\u18cd\3\2\2\2\u18cd\u18ce\7$"+
		"\2\2\u18ce\u18de\3\2\2\2\u18cf\u18d0\5\u0346\u01a4\2\u18d0\u18d1\7#\2"+
		"\2\u18d1\u18d2\7_\2\2\u18d2\u18d4\5\u033c\u019f\2\u18d3\u18d5\5\u03da"+
		"\u01ee\2\u18d4\u18d3\3\2\2\2\u18d4\u18d5\3\2\2\2\u18d5\u18d6\3\2\2\2\u18d6"+
		"\u18d7\7$\2\2\u18d7\u18de\3\2\2\2\u18d8\u18d9\5\u0346\u01a4\2\u18d9\u18da"+
		"\7#\2\2\u18da\u18db\7\24\2\2\u18db\u18dc\7$\2\2\u18dc\u18de\3\2\2\2\u18dd"+
		"\u18a6\3\2\2\2\u18dd\u18aa\3\2\2\2\u18dd\u18b2\3\2\2\2\u18dd\u18bb\3\2"+
		"\2\2\u18dd\u18c6\3\2\2\2\u18dd\u18cf\3\2\2\2\u18dd\u18d8\3\2\2\2\u18de"+
		"\u0345\3\2\2\2\u18df\u18e4\5\u034e\u01a8\2\u18e0\u18e1\5\u034c\u01a7\2"+
		"\u18e1\u18e2\5\u0300\u0181\2\u18e2\u18e4\3\2\2\2\u18e3\u18df\3\2\2\2\u18e3"+
		"\u18e0\3\2\2\2\u18e4\u0347\3\2\2\2\u18e5\u18f7\7\u0230\2\2\u18e6\u18f7"+
		"\7\u022f\2\2\u18e7\u18e8\5\u0346\u01a4\2\u18e8\u18e9\7\u022f\2\2\u18e9"+
		"\u18f7\3\2\2\2\u18ea\u18eb\5\u0346\u01a4\2\u18eb\u18ec\7#\2\2\u18ec\u18ee"+
		"\5\u033c\u019f\2\u18ed\u18ef\5\u03da\u01ee\2\u18ee\u18ed\3\2\2\2\u18ee"+
		"\u18ef\3\2\2\2\u18ef\u18f0\3\2\2\2\u18f0\u18f1\7$\2\2\u18f1\u18f2\7\u022f"+
		"\2\2\u18f2\u18f7\3\2\2\2\u18f3\u18f7\7|\2\2\u18f4\u18f7\7}\2\2\u18f5\u18f7"+
		"\7{\2\2\u18f6\u18e5\3\2\2\2\u18f6\u18e6\3\2\2\2\u18f6\u18e7\3\2\2\2\u18f6"+
		"\u18ea\3\2\2\2\u18f6\u18f3\3\2\2\2\u18f6\u18f4\3\2\2\2\u18f6\u18f5\3\2"+
		"\2\2\u18f7\u0349\3\2\2\2\u18f8\u18fd\5\u034c\u01a7\2\u18f9\u18fa\5\u034c"+
		"\u01a7\2\u18fa\u18fb\5\u0300\u0181\2\u18fb\u18fd\3\2\2\2\u18fc\u18f8\3"+
		"\2\2\2\u18fc\u18f9\3\2\2\2\u18fd\u034b\3\2\2\2\u18fe\u18ff\5\u02d2\u016a"+
		"\2\u18ff\u034d\3\2\2\2\u1900\u1904\5\u02d2\u016a\2\u1901\u1904\5\u02d8"+
		"\u016d\2\u1902\u1904\5\u02da\u016e\2\u1903\u1900\3\2\2\2\u1903\u1901\3"+
		"\2\2\2\u1903\u1902\3\2\2\2\u1904\u034f\3\2\2\2\u1905\u1907\5\u0366\u01b4"+
		"\2\u1906\u1908\5\u0368\u01b5\2\u1907\u1906\3\2\2\2\u1907\u1908\3\2\2\2"+
		"\u1908\u1912\3\2\2\2\u1909\u190a\7\u00ef\2\2\u190a\u190b\7e\2\2\u190b"+
		"\u190c\7#\2\2\u190c\u190d\5\u03c2\u01e2\2\u190d\u190f\7$\2\2\u190e\u1910"+
		"\5\u0368\u01b5\2\u190f\u190e\3\2\2\2\u190f\u1910\3\2\2\2\u1910\u1912\3"+
		"\2\2\2\u1911\u1905\3\2\2\2\u1911\u1909\3\2\2\2\u1912\u0351\3\2\2\2\u1913"+
		"\u1914\7\u019b\2\2\u1914\u1915\7#\2\2\u1915\u1916\5\u02fe\u0180\2\u1916"+
		"\u1917\5\u03b4\u01db\2\u1917\u1918\7\u019c\2\2\u1918\u1919\5\u0354\u01ab"+
		"\2\u1919\u191a\7$\2\2\u191a\u1929\3\2\2\2\u191b\u191c\7\u019b\2\2\u191c"+
		"\u191d\7#\2\2\u191d\u191e\7\u01a0\2\2\u191e\u191f\7#\2\2\u191f\u1920\5"+
		"\u035c\u01af\2\u1920\u1921\7$\2\2\u1921\u1922\7)\2\2\u1922\u1923\5\u02fe"+
		"\u0180\2\u1923\u1924\5\u03b4\u01db\2\u1924\u1925\7\u019c\2\2\u1925\u1926"+
		"\5\u0354\u01ab\2\u1926\u1927\7$\2\2\u1927\u1929\3\2\2\2\u1928\u1913\3"+
		"\2\2\2\u1928\u191b\3\2\2\2\u1929\u0353\3\2\2\2\u192a\u192f\5\u0356\u01ac"+
		"\2\u192b\u192c\7)\2\2\u192c\u192e\5\u0356\u01ac\2\u192d\u192b\3\2\2\2"+
		"\u192e\u1931\3\2\2\2\u192f\u192d\3\2\2\2\u192f\u1930\3\2\2\2\u1930\u0355"+
		"\3\2\2\2\u1931\u192f\3\2\2\2\u1932\u1933\5\u034c\u01a7\2\u1933\u1934\5"+
		"\u036c\u01b7\2\u1934\u193e\3\2\2\2\u1935\u1936\5\u034c\u01a7\2\u1936\u1937"+
		"\5\u036c\u01b7\2\u1937\u1938\5\u0358\u01ad\2\u1938\u193e\3\2\2\2\u1939"+
		"\u193a\5\u034c\u01a7\2\u193a\u193b\7u\2\2\u193b\u193c\7\u0170\2\2\u193c"+
		"\u193e\3\2\2\2\u193d\u1932\3\2\2\2\u193d\u1935\3\2\2\2\u193d\u1939\3\2"+
		"\2\2\u193e\u0357\3\2\2\2\u193f\u1940\b\u01ad\1\2\u1940\u1941\5\u035a\u01ae"+
		"\2\u1941\u1946\3\2\2\2\u1942\u1943\f\3\2\2\u1943\u1945\5\u035a\u01ae\2"+
		"\u1944\u1942\3\2\2\2\u1945\u1948\3\2\2\2\u1946\u1944\3\2\2\2\u1946\u1947"+
		"\3\2\2\2\u1947\u0359\3\2\2\2\u1948\u1946\3\2\2\2\u1949\u194a\5\u02d2\u016a"+
		"\2\u194a\u194b\5\u02fc\u017f\2\u194b\u1952\3\2\2\2\u194c\u194d\7\u00a4"+
		"\2\2\u194d\u1952\5\u02fc\u017f\2\u194e\u194f\7z\2\2\u194f\u1952\7{\2\2"+
		"\u1950\u1952\7{\2\2\u1951\u1949\3\2\2\2\u1951\u194c\3\2\2\2\u1951\u194e"+
		"\3\2\2\2\u1951\u1950\3\2\2\2\u1952\u035b\3\2\2\2\u1953\u1958\5\u035e\u01b0"+
		"\2\u1954\u1955\7)\2\2\u1955\u1957\5\u035e\u01b0\2\u1956\u1954\3\2\2\2"+
		"\u1957\u195a\3\2\2\2\u1958\u1956\3\2\2\2\u1958\u1959\3\2\2\2\u1959\u035d"+
		"\3\2\2\2\u195a\u1958\3\2\2\2\u195b\u195c\5\u02fc\u017f\2\u195c\u195d\7"+
		"p\2\2\u195d\u195e\5\u02d2\u016a\2\u195e\u1962\3\2\2\2\u195f\u1960\7\u00a4"+
		"\2\2\u1960\u1962\5\u02fc\u017f\2\u1961\u195b\3\2\2\2\u1961\u195f\3\2\2"+
		"\2\u1962\u035f\3\2\2\2\u1963\u1965\5\u0344\u01a3\2\u1964\u1966\5\u0362"+
		"\u01b2\2\u1965\u1964\3\2\2\2\u1965\u1966\3\2\2\2\u1966\u1968\3\2\2\2\u1967"+
		"\u1969\5\u0364\u01b3\2\u1968\u1967\3\2\2\2\u1968\u1969\3\2\2\2\u1969\u196b"+
		"\3\2\2\2\u196a\u196c\5\u03e6\u01f4\2\u196b\u196a\3\2\2\2\u196b\u196c\3"+
		"\2\2\2\u196c\u196f\3\2\2\2\u196d\u196f\5\u036a\u01b6\2\u196e\u1963\3\2"+
		"\2\2\u196e\u196d\3\2\2\2\u196f\u0361\3\2\2\2\u1970\u1971\7\u0143\2\2\u1971"+
		"\u1972\7\u0085\2\2\u1972\u1973\7#\2\2\u1973\u1974\5\u03da\u01ee\2\u1974"+
		"\u1975\7$\2\2\u1975\u0363\3\2\2\2\u1976\u1977\7\u010a\2\2\u1977\u1978"+
		"\7#\2\2\u1978\u1979\7o\2\2\u1979\u197a\5\u02fa\u017e\2\u197a\u197b\7$"+
		"\2\2\u197b\u0365\3\2\2\2\u197c\u197f\5\u0344\u01a3\2\u197d\u197f\5\u036a"+
		"\u01b6\2\u197e\u197c\3\2\2\2\u197e\u197d\3\2\2\2\u197f\u0367\3\2\2\2\u1980"+
		"\u1981\7]\2\2\u1981\u1982\7\u0170\2\2\u1982\u0369\3\2\2\2\u1983\u1984"+
		"\7\u00b5\2\2\u1984\u1985\7u\2\2\u1985\u1986\7#\2\2\u1986\u1987\5\u02fa"+
		"\u017e\2\u1987\u1988\7$\2\2\u1988\u1a58\3\2\2\2\u1989\u1a58\7\u00c0\2"+
		"\2\u198a\u1a58\7\u00c1\2\2\u198b\u198c\7\u00c1\2\2\u198c\u198d\7#\2\2"+
		"\u198d\u198e\7\u0230\2\2\u198e\u1a58\7$\2\2\u198f\u1a58\7\u00c2\2\2\u1990"+
		"\u1991\7\u00c2\2\2\u1991\u1992\7#\2\2\u1992\u1993\7\u0230\2\2\u1993\u1a58"+
		"\7$\2\2\u1994\u1a58\7\u0099\2\2\u1995\u1996\7\u0099\2\2\u1996\u1997\7"+
		"#\2\2\u1997\u1998\7\u0230\2\2\u1998\u1a58\7$\2\2\u1999\u1a58\7\u009a\2"+
		"\2\u199a\u199b\7\u009a\2\2\u199b\u199c\7#\2\2\u199c\u199d\7\u0230\2\2"+
		"\u199d\u1a58\7$\2\2\u199e\u1a58\7\u0171\2\2\u199f\u1a58\7\u00ad\2\2\u19a0"+
		"\u1a58\7\u0136\2\2\u19a1\u1a58\7\u00f2\2\2\u19a2\u1a58\7\u0172\2\2\u19a3"+
		"\u1a58\7\u0173\2\2\u19a4\u19a5\7b\2\2\u19a5\u19a6\7#\2\2\u19a6\u19a7\5"+
		"\u02fa\u017e\2\u19a7\u19a8\7p\2\2\u19a8\u19a9\5\u036c\u01b7\2\u19a9\u19aa"+
		"\7$\2\2\u19aa\u1a58\3\2\2\2\u19ab\u19ac\7\u0109\2\2\u19ac\u19ae\7#\2\2"+
		"\u19ad\u19af\5\u0372\u01ba\2\u19ae\u19ad\3\2\2\2\u19ae\u19af\3\2\2\2\u19af"+
		"\u19b0\3\2\2\2\u19b0\u1a58\7$\2\2\u19b1\u19b2\7\u0174\2\2\u19b2\u19b3"+
		"\7#\2\2\u19b3\u19b4\5\u02fa\u017e\2\u19b4\u19b5\7$\2\2\u19b5\u1a58\3\2"+
		"\2\2\u19b6\u19b7\7\u0174\2\2\u19b7\u19b8\7#\2\2\u19b8\u19b9\5\u02fa\u017e"+
		"\2\u19b9\u19ba\7)\2\2\u19ba\u19bb\5\u039e\u01d0\2\u19bb\u19bc\7$\2\2\u19bc"+
		"\u1a58\3\2\2\2\u19bd\u19be\7\u0175\2\2\u19be\u19bf\7#\2\2\u19bf\u19c0"+
		"\5\u03a2\u01d2\2\u19c0\u19c1\7$\2\2\u19c1\u1a58\3\2\2\2\u19c2\u19c3\7"+
		"U\2\2\u19c3\u19c4\7#\2\2\u19c4\u19c5\5\u03aa\u01d6\2\u19c5\u19c6\7$\2"+
		"\2\u19c6\u1a58\3\2\2\2\u19c7\u19c8\7d\2\2\u19c8\u19c9\7#\2\2\u19c9\u19ca"+
		"\5\u03ac\u01d7\2\u19ca\u19cb\7$\2\2\u19cb\u1a58\3\2\2\2\u19cc\u19cd\7"+
		"\u017e\2\2\u19cd\u19ce\7#\2\2\u19ce\u19cf\5\u02fa\u017e\2\u19cf\u19d0"+
		"\7p\2\2\u19d0\u19d1\5\u036c\u01b7\2\u19d1\u19d2\7$\2\2\u19d2\u1a58\3\2"+
		"\2\2\u19d3\u19d4\7c\2\2\u19d4\u19d5\7#\2\2\u19d5\u19d6\7\u00c8\2\2\u19d6"+
		"\u19d7\5\u03a0\u01d1\2\u19d7\u19d8\7$\2\2\u19d8\u1a58\3\2\2\2\u19d9\u19da"+
		"\7c\2\2\u19da\u19db\7#\2\2\u19db\u19dc\7\u00c9\2\2\u19dc\u19dd\5\u03a0"+
		"\u01d1\2\u19dd\u19de\7$\2\2\u19de\u1a58\3\2\2\2\u19df\u19e0\7c\2\2\u19e0"+
		"\u19e1\7#\2\2\u19e1\u19e2\7\u00ca\2\2\u19e2\u19e3\5\u03a0\u01d1\2\u19e3"+
		"\u19e4\7$\2\2\u19e4\u1a58\3\2\2\2\u19e5\u19e6\7c\2\2\u19e6\u19e7\7#\2"+
		"\2\u19e7\u19e8\5\u03a0\u01d1\2\u19e8\u19e9\7$\2\2\u19e9\u1a58\3\2\2\2"+
		"\u19ea\u19eb\7\u00c3\2\2\u19eb\u19ec\7#\2\2\u19ec\u19ed\5\u02fa\u017e"+
		"\2\u19ed\u19ee\7)\2\2\u19ee\u19ef\5\u02fa\u017e\2\u19ef\u19f0\7$\2\2\u19f0"+
		"\u1a58\3\2\2\2\u19f1\u19f2\7\u00cb\2\2\u19f2\u19f3\7#\2\2\u19f3\u19f4"+
		"\5\u0370\u01b9\2\u19f4\u19f5\7$\2\2\u19f5\u1a58\3\2\2\2\u19f6\u19f7\7"+
		"\u018a\2\2\u19f7\u19f8\7#\2\2\u19f8\u19f9\5\u0370\u01b9\2\u19f9\u19fa"+
		"\7$\2\2\u19fa\u1a58\3\2\2\2\u19fb\u19fc\7\u018b\2\2\u19fc\u19fd\7#\2\2"+
		"\u19fd\u19fe\5\u0370\u01b9\2\u19fe\u19ff\7$\2\2\u19ff\u1a58\3\2\2\2\u1a00"+
		"\u1a01\7\u0176\2\2\u1a01\u1a02\7#\2\2\u1a02\u1a03\5\u0370\u01b9\2\u1a03"+
		"\u1a04\7$\2\2\u1a04\u1a58\3\2\2\2\u1a05\u1a06\7\u0177\2\2\u1a06\u1a07"+
		"\7#\2\2\u1a07\u1a08\7\u00b4\2\2\u1a08\u1a09\5\u02d2\u016a\2\u1a09\u1a0a"+
		"\7$\2\2\u1a0a\u1a58\3\2\2\2\u1a0b\u1a0c\7\u0177\2\2\u1a0c\u1a0d\7#\2\2"+
		"\u1a0d\u1a0e\7\u00b4\2\2\u1a0e\u1a0f\5\u02d2\u016a\2\u1a0f\u1a10\7)\2"+
		"\2\u1a10\u1a11\5\u03ae\u01d8\2\u1a11\u1a12\7$\2\2\u1a12\u1a58\3\2\2\2"+
		"\u1a13\u1a14\7\u0177\2\2\u1a14\u1a15\7#\2\2\u1a15\u1a16\7\u00b4\2\2\u1a16"+
		"\u1a17\5\u02d2\u016a\2\u1a17\u1a18\7)\2\2\u1a18\u1a19\5\u0370\u01b9\2"+
		"\u1a19\u1a1a\7$\2\2\u1a1a\u1a58\3\2\2\2\u1a1b\u1a1c\7\u0177\2\2\u1a1c"+
		"\u1a1d\7#\2\2\u1a1d\u1a1e\7\u00b4\2\2\u1a1e\u1a1f\5\u02d2\u016a\2\u1a1f"+
		"\u1a20\7)\2\2\u1a20\u1a21\5\u03ae\u01d8\2\u1a21\u1a22\7)\2\2\u1a22\u1a23"+
		"\5\u0370\u01b9\2\u1a23\u1a24\7$\2\2\u1a24\u1a58\3\2\2\2\u1a25\u1a26\7"+
		"\u0178\2\2\u1a26\u1a27\7#\2\2\u1a27\u1a28\5\u02fe\u0180\2\u1a28\u1a29"+
		"\5\u03b4\u01db\2\u1a29\u1a2a\7$\2\2\u1a2a\u1a58\3\2\2\2\u1a2b\u1a2c\7"+
		"\u0179\2\2\u1a2c\u1a2d\7#\2\2\u1a2d\u1a2e\5\u03b0\u01d9\2\u1a2e\u1a2f"+
		"\7$\2\2\u1a2f\u1a58\3\2\2\2\u1a30\u1a31\7\u017a\2\2\u1a31\u1a32\7#\2\2"+
		"\u1a32\u1a33\5\u03b8\u01dd\2\u1a33\u1a34\5\u02fa\u017e\2\u1a34\u1a35\5"+
		"\u03ba\u01de\2\u1a35\u1a36\7$\2\2\u1a36\u1a58\3\2\2\2\u1a37\u1a38\7\u017b"+
		"\2\2\u1a38\u1a39\7#\2\2\u1a39\u1a3a\7\u00b4\2\2\u1a3a\u1a3b\5\u02d2\u016a"+
		"\2\u1a3b\u1a3c\7$\2\2\u1a3c\u1a58\3\2\2\2\u1a3d\u1a3e\7\u017b\2\2\u1a3e"+
		"\u1a3f\7#\2\2\u1a3f\u1a40\7\u00b4\2\2\u1a40\u1a41\5\u02d2\u016a\2\u1a41"+
		"\u1a42\7)\2\2\u1a42\u1a43\5\u02fa\u017e\2\u1a43\u1a44\7$\2\2\u1a44\u1a58"+
		"\3\2\2\2\u1a45\u1a46\7\u017c\2\2\u1a46\u1a47\7#\2\2\u1a47\u1a48\5\u02fa"+
		"\u017e\2\u1a48\u1a49\7)\2\2\u1a49\u1a4b\5\u03bc\u01df\2\u1a4a\u1a4c\5"+
		"\u03be\u01e0\2\u1a4b\u1a4a\3\2\2\2\u1a4b\u1a4c\3\2\2\2\u1a4c\u1a4d\3\2"+
		"\2\2\u1a4d\u1a4e\7$\2\2\u1a4e\u1a58\3\2\2\2\u1a4f\u1a50\7\u017d\2\2\u1a50"+
		"\u1a51\7#\2\2\u1a51\u1a52\5\u03b8\u01dd\2\u1a52\u1a53\5\u02fa\u017e\2"+
		"\u1a53\u1a54\7p\2\2\u1a54\u1a55\5\u036e\u01b8\2\u1a55\u1a56\7$\2\2\u1a56"+
		"\u1a58\3\2\2\2\u1a57\u1983\3\2\2\2\u1a57\u1989\3\2\2\2\u1a57\u198a\3\2"+
		"\2\2\u1a57\u198b\3\2\2\2\u1a57\u198f\3\2\2\2\u1a57\u1990\3\2\2\2\u1a57"+
		"\u1994\3\2\2\2\u1a57\u1995\3\2\2\2\u1a57\u1999\3\2\2\2\u1a57\u199a\3\2"+
		"\2\2\u1a57\u199e\3\2\2\2\u1a57\u199f\3\2\2\2\u1a57\u19a0\3\2\2\2\u1a57"+
		"\u19a1\3\2\2\2\u1a57\u19a2\3\2\2\2\u1a57\u19a3\3\2\2\2\u1a57\u19a4\3\2"+
		"\2\2\u1a57\u19ab\3\2\2\2\u1a57\u19b1\3\2\2\2\u1a57\u19b6\3\2\2\2\u1a57"+
		"\u19bd\3\2\2\2\u1a57\u19c2\3\2\2\2\u1a57\u19c7\3\2\2\2\u1a57\u19cc\3\2"+
		"\2\2\u1a57\u19d3\3\2\2\2\u1a57\u19d9\3\2\2\2\u1a57\u19df\3\2\2\2\u1a57"+
		"\u19e5\3\2\2\2\u1a57\u19ea\3\2\2\2\u1a57\u19f1\3\2\2\2\u1a57\u19f6\3\2"+
		"\2\2\u1a57\u19fb\3\2\2\2\u1a57\u1a00\3\2\2\2\u1a57\u1a05\3\2\2\2\u1a57"+
		"\u1a0b\3\2\2\2\u1a57\u1a13\3\2\2\2\u1a57\u1a1b\3\2\2\2\u1a57\u1a25\3\2"+
		"\2\2\u1a57\u1a2b\3\2\2\2\u1a57\u1a30\3\2\2\2\u1a57\u1a37\3\2\2\2\u1a57"+
		"\u1a3d\3\2\2\2\u1a57\u1a45\3\2\2\2\u1a57\u1a4f\3\2\2\2\u1a58\u036b\3\2"+
		"\2\2\u1a59\u1a5a\5\u036e\u01b8\2\u1a5a\u1a5b\5\u039a\u01ce\2\u1a5b\u1a75"+
		"\3\2\2\2\u1a5c\u1a5d\7\u017f\2\2\u1a5d\u1a5e\5\u036e\u01b8\2\u1a5e\u1a5f"+
		"\5\u039a\u01ce\2\u1a5f\u1a75\3\2\2\2\u1a60\u1a61\5\u036e\u01b8\2\u1a61"+
		"\u1a62\7\u0094\2\2\u1a62\u1a63\7\'\2\2\u1a63\u1a64\7\u0230\2\2\u1a64\u1a65"+
		"\7(\2\2\u1a65\u1a75\3\2\2\2\u1a66\u1a67\7\u017f\2\2\u1a67\u1a68\5\u036e"+
		"\u01b8\2\u1a68\u1a69\7\u0094\2\2\u1a69\u1a6a\7\'\2\2\u1a6a\u1a6b\7\u0230"+
		"\2\2\u1a6b\u1a6c\7(\2\2\u1a6c\u1a75\3\2\2\2\u1a6d\u1a6e\5\u036e\u01b8"+
		"\2\u1a6e\u1a6f\7\u0094\2\2\u1a6f\u1a75\3\2\2\2\u1a70\u1a71\7\u017f\2\2"+
		"\u1a71\u1a72\5\u036e\u01b8\2\u1a72\u1a73\7\u0094\2\2\u1a73\u1a75\3\2\2"+
		"\2\u1a74\u1a59\3\2\2\2\u1a74\u1a5c\3\2\2\2\u1a74\u1a60\3\2\2\2\u1a74\u1a66"+
		"\3\2\2\2\u1a74\u1a6d\3\2\2\2\u1a74\u1a70\3\2\2\2\u1a75\u036d\3\2\2\2\u1a76"+
		"\u1a84\5\u0376\u01bc\2\u1a77\u1a84\5\u037a\u01be\2\u1a78\u1a84\5\u0390"+
		"\u01c9\2\u1a79\u1a84\5\u0380\u01c1\2\u1a7a\u1a84\5\u037c\u01bf\2\u1a7b"+
		"\u1a7c\5\u0396\u01cc\2\u1a7c\u1a7d\5\u0398\u01cd\2\u1a7d\u1a84\3\2\2\2"+
		"\u1a7e\u1a7f\5\u0396\u01cc\2\u1a7f\u1a80\7#\2\2\u1a80\u1a81\7\u0230\2"+
		"\2\u1a81\u1a82\7$\2\2\u1a82\u1a84\3\2\2\2\u1a83\u1a76\3\2\2\2\u1a83\u1a77"+
		"\3\2\2\2\u1a83\u1a78\3\2\2\2\u1a83\u1a79\3\2\2\2\u1a83\u1a7a\3\2\2\2\u1a83"+
		"\u1a7b\3\2\2\2\u1a83\u1a7e\3\2\2\2\u1a84\u036f\3\2\2\2\u1a85\u1a86\b\u01b9"+
		"\1\2\u1a86\u1a87\5\u02fa\u017e\2\u1a87\u1a8d\3\2\2\2\u1a88\u1a89\f\3\2"+
		"\2\u1a89\u1a8a\7)\2\2\u1a8a\u1a8c\5\u02fa\u017e\2\u1a8b\u1a88\3\2\2\2"+
		"\u1a8c\u1a8f\3\2\2\2\u1a8d\u1a8b\3\2\2\2\u1a8d\u1a8e\3\2\2\2\u1a8e\u0371"+
		"\3\2\2\2\u1a8f\u1a8d\3\2\2\2\u1a90\u1a91\5\u0374\u01bb\2\u1a91\u1a92\7"+
		"e\2\2\u1a92\u1a93\5\u02fa\u017e\2\u1a93\u0373\3\2\2\2\u1a94\u1a9c\7\u009b"+
		"\2\2\u1a95\u1a9c\7\u009d\2\2\u1a96\u1a9c\7\u009f\2\2\u1a97\u1a9c\7\u00a0"+
		"\2\2\u1a98\u1a9c\7\u00a1\2\2\u1a99\u1a9c\7\u00a2\2\2\u1a9a\u1a9c\5\u02d2"+
		"\u016a\2\u1a9b\u1a94\3\2\2\2\u1a9b\u1a95\3\2\2\2\u1a9b\u1a96\3\2\2\2\u1a9b"+
		"\u1a97\3\2\2\2\u1a9b\u1a98\3\2\2\2\u1a9b\u1a99\3\2\2\2\u1a9b\u1a9a\3\2"+
		"\2\2\u1a9c\u0375\3\2\2\2\u1a9d\u1a9f\5\u034e\u01a8\2\u1a9e\u1aa0\5\u0378"+
		"\u01bd\2\u1a9f\u1a9e\3\2\2\2\u1a9f\u1aa0\3\2\2\2\u1aa0\u1aa7\3\2\2\2\u1aa1"+
		"\u1aa2\5\u034e\u01a8\2\u1aa2\u1aa4\5\u038a\u01c6\2\u1aa3\u1aa5\5\u0378"+
		"\u01bd\2\u1aa4\u1aa3\3\2\2\2\u1aa4\u1aa5\3\2\2\2\u1aa5\u1aa7\3\2\2\2\u1aa6"+
		"\u1a9d\3\2\2\2\u1aa6\u1aa1\3\2\2\2\u1aa7\u0377\3\2\2\2\u1aa8\u1aa9\7#"+
		"\2\2\u1aa9\u1aaa\5\u0370\u01b9\2\u1aaa\u1aab\7$\2\2\u1aab\u0379\3\2\2"+
		"\2\u1aac\u1ac8\7\u014a\2\2\u1aad\u1ac8\7\u00b7\2\2\u1aae\u1ac8\7\u00bb"+
		"\2\2\u1aaf\u1ac8\7\u00bc\2\2\u1ab0\u1ac8\7\u00b8\2\2\u1ab1\u1ab2\7\u014e"+
		"\2\2\u1ab2\u1ac8\5\u0388\u01c5\2\u1ab3\u1ab4\7\u0091\2\2\u1ab4\u1ac8\7"+
		"V\2\2\u1ab5\u1ab7\7\u00b9\2\2\u1ab6\u1ab8\5\u0378\u01bd\2\u1ab7\u1ab6"+
		"\3\2\2\2\u1ab7\u1ab8\3\2\2\2\u1ab8\u1ac8\3\2\2\2\u1ab9\u1abb\7\u00d8\2"+
		"\2\u1aba\u1abc\5\u0378\u01bd\2\u1abb\u1aba\3\2\2\2\u1abb\u1abc\3\2\2\2"+
		"\u1abc\u1ac8\3\2\2\2\u1abd\u1abf\7\u00bd\2\2\u1abe\u1ac0\5\u0378\u01bd"+
		"\2\u1abf\u1abe\3\2\2\2\u1abf\u1ac0\3\2\2\2\u1ac0\u1ac8\3\2\2\2\u1ac1\u1ac8"+
		"\7\u0090\2\2\u1ac2\u1ac8\7\u0150\2\2\u1ac3\u1ac8\7\u014f\2\2\u1ac4\u1ac8"+
		"\7\u014b\2\2\u1ac5\u1ac8\7\u014c\2\2\u1ac6\u1ac8\7\u014d\2\2\u1ac7\u1aac"+
		"\3\2\2\2\u1ac7\u1aad\3\2\2\2\u1ac7\u1aae\3\2\2\2\u1ac7\u1aaf\3\2\2\2\u1ac7"+
		"\u1ab0\3\2\2\2\u1ac7\u1ab1\3\2\2\2\u1ac7\u1ab3\3\2\2\2\u1ac7\u1ab5\3\2"+
		"\2\2\u1ac7\u1ab9\3\2\2\2\u1ac7\u1abd\3\2\2\2\u1ac7\u1ac1\3\2\2\2\u1ac7"+
		"\u1ac2\3\2\2\2\u1ac7\u1ac3\3\2\2\2\u1ac7\u1ac4\3\2\2\2\u1ac7\u1ac5\3\2"+
		"\2\2\u1ac7\u1ac6\3\2\2\2\u1ac8\u037b\3\2\2\2\u1ac9\u1aca\7\u0098\2\2\u1aca"+
		"\u1acb\7#\2\2\u1acb\u1acc\7\u0230\2\2\u1acc\u1ace\7$\2\2\u1acd\u1acf\5"+
		"\u037e\u01c0\2\u1ace\u1acd\3\2\2\2\u1ace\u1acf\3\2\2\2\u1acf\u1ae1\3\2"+
		"\2\2\u1ad0\u1ad2\7\u0098\2\2\u1ad1\u1ad3\5\u037e\u01c0\2\u1ad2\u1ad1\3"+
		"\2\2\2\u1ad2\u1ad3\3\2\2\2\u1ad3\u1ae1\3\2\2\2\u1ad4\u1ad5\7\u0097\2\2"+
		"\u1ad5\u1ad6\7#\2\2\u1ad6\u1ad7\7\u0230\2\2\u1ad7\u1ad9\7$\2\2\u1ad8\u1ada"+
		"\5\u037e\u01c0\2\u1ad9\u1ad8\3\2\2\2\u1ad9\u1ada\3\2\2\2\u1ada\u1ae1\3"+
		"\2\2\2\u1adb\u1add\7\u0097\2\2\u1adc\u1ade\5\u037e\u01c0\2\u1add\u1adc"+
		"\3\2\2\2\u1add\u1ade\3\2\2\2\u1ade\u1ae1\3\2\2\2\u1adf\u1ae1\7\u0096\2"+
		"\2\u1ae0\u1ac9\3\2\2\2\u1ae0\u1ad0\3\2\2\2\u1ae0\u1ad4\3\2\2\2\u1ae0\u1adb"+
		"\3\2\2\2\u1ae0\u1adf\3\2\2\2\u1ae1\u037d\3\2\2\2\u1ae2\u1ae3\7]\2\2\u1ae3"+
		"\u1ae4\7\u0097\2\2\u1ae4\u1ae9\7\u0145\2\2\u1ae5\u1ae6\7\u0144\2\2\u1ae6"+
		"\u1ae7\7\u0097\2\2\u1ae7\u1ae9\7\u0145\2\2\u1ae8\u1ae2\3\2\2\2\u1ae8\u1ae5"+
		"\3\2\2\2\u1ae9\u037f\3\2\2\2\u1aea\u1aed\5\u0382\u01c2\2\u1aeb\u1aed\5"+
		"\u0384\u01c3\2\u1aec\u1aea\3\2\2\2\u1aec\u1aeb\3\2\2\2\u1aed\u0381\3\2"+
		"\2\2\u1aee\u1aef\5\u0386\u01c4\2\u1aef\u1af0\7#\2\2\u1af0\u1af1\7\u0230"+
		"\2\2\u1af1\u1af2\7$\2\2\u1af2\u0383\3\2\2\2\u1af3\u1af4\5\u0386\u01c4"+
		"\2\u1af4\u0385\3\2\2\2\u1af5\u1af7\7\u0093\2\2\u1af6\u1af8\7\u00c4\2\2"+
		"\u1af7\u1af6\3\2\2\2\u1af7\u1af8\3\2\2\2\u1af8\u1b0d\3\2\2\2\u1af9\u1afb"+
		"\7\u0092\2\2\u1afa\u1afc\7\u00c4\2\2\u1afb\u1afa\3\2\2\2\u1afb\u1afc\3"+
		"\2\2\2\u1afc\u1b0d\3\2\2\2\u1afd\u1b0d\7\u0155\2\2\u1afe\u1aff\7\u00c5"+
		"\2\2\u1aff\u1b01\7\u0093\2\2\u1b00\u1b02\7\u00c4\2\2\u1b01\u1b00\3\2\2"+
		"\2\u1b01\u1b02\3\2\2\2\u1b02\u1b0d\3\2\2\2\u1b03\u1b04\7\u00c5\2\2\u1b04"+
		"\u1b06\7\u0092\2\2\u1b05\u1b07\7\u00c4\2\2\u1b06\u1b05\3\2\2\2\u1b06\u1b07"+
		"\3\2\2\2\u1b07\u1b0d\3\2\2\2\u1b08\u1b0a\7\u00c6\2\2\u1b09\u1b0b\7\u00c4"+
		"\2\2\u1b0a\u1b09\3\2\2\2\u1b0a\u1b0b\3\2\2\2\u1b0b\u1b0d\3\2\2\2\u1b0c"+
		"\u1af5\3\2\2\2\u1b0c\u1af9\3\2\2\2\u1b0c\u1afd\3\2\2\2\u1b0c\u1afe\3\2"+
		"\2\2\u1b0c\u1b03\3\2\2\2\u1b0c\u1b08\3\2\2\2\u1b0d\u0387\3\2\2\2\u1b0e"+
		"\u1b0f\7#\2\2\u1b0f\u1b10\7\u0230\2\2\u1b10\u1b13\7$\2\2\u1b11\u1b13\3"+
		"\2\2\2\u1b12\u1b0e\3\2\2\2\u1b12\u1b11\3\2\2\2\u1b13\u0389\3\2\2\2\u1b14"+
		"\u1b15\b\u01c6\1\2\u1b15\u1b16\7\27\2\2\u1b16\u1b17\5\u038c\u01c7\2\u1b17"+
		"\u1b1d\3\2\2\2\u1b18\u1b19\f\3\2\2\u1b19\u1b1a\7\27\2\2\u1b1a\u1b1c\5"+
		"\u038c\u01c7\2\u1b1b\u1b18\3\2\2\2\u1b1c\u1b1f\3\2\2\2\u1b1d\u1b1b\3\2"+
		"\2\2\u1b1d\u1b1e\3\2\2\2\u1b1e\u038b\3\2\2\2\u1b1f\u1b1d\3\2\2\2\u1b20"+
		"\u1b21\5\u038e\u01c8\2\u1b21\u038d\3\2\2\2\u1b22\u1b27\5\u02d2\u016a\2"+
		"\u1b23\u1b27\5\u0416\u020c\2\u1b24\u1b27\5\u02da\u016e\2\u1b25\u1b27\5"+
		"\u02cc\u0167\2\u1b26\u1b22\3\2\2\2\u1b26\u1b23\3\2\2\2\u1b26\u1b24\3\2"+
		"\2\2\u1b26\u1b25\3\2\2\2\u1b27\u038f\3\2\2\2\u1b28\u1b2b\5\u0392\u01ca"+
		"\2\u1b29\u1b2b\5\u0394\u01cb\2\u1b2a\u1b28\3\2\2\2\u1b2a\u1b29\3\2\2\2"+
		"\u1b2b\u0391\3\2\2\2\u1b2c\u1b2e\7\u0163\2\2\u1b2d\u1b2f\7\u00c4\2\2\u1b2e"+
		"\u1b2d\3\2\2\2\u1b2e\u1b2f\3\2\2\2\u1b2f\u1b30\3\2\2\2\u1b30\u1b31\7#"+
		"\2\2\u1b31\u1b32\5\u0370\u01b9\2\u1b32\u1b33\7$\2\2\u1b33\u0393\3\2\2"+
		"\2\u1b34\u1b36\7\u0163\2\2\u1b35\u1b37\7\u00c4\2\2\u1b36\u1b35\3\2\2\2"+
		"\u1b36\u1b37\3\2\2\2\u1b37\u0395\3\2\2\2\u1b38\u1b39\7\u0095\2\2\u1b39"+
		"\u0397\3\2\2\2\u1b3a\u1b57\7\u009b\2\2\u1b3b\u1b57\7\u009d\2\2\u1b3c\u1b57"+
		"\7\u009f\2\2\u1b3d\u1b57\7\u00a0\2\2\u1b3e\u1b57\7\u00a1\2\2\u1b3f\u1b57"+
		"\5\u039c\u01cf\2\u1b40\u1b41\7\u009b\2\2\u1b41\u1b42\7v\2\2\u1b42\u1b57"+
		"\7\u009d\2\2\u1b43\u1b44\7\u009f\2\2\u1b44\u1b45\7v\2\2\u1b45\u1b57\7"+
		"\u00a0\2\2\u1b46\u1b47\7\u009f\2\2\u1b47\u1b48\7v\2\2\u1b48\u1b57\7\u00a1"+
		"\2\2\u1b49\u1b4a\7\u009f\2\2\u1b4a\u1b4b\7v\2\2\u1b4b\u1b57\5\u039c\u01cf"+
		"\2\u1b4c\u1b4d\7\u00a0\2\2\u1b4d\u1b4e\7v\2\2\u1b4e\u1b57\7\u00a1\2\2"+
		"\u1b4f\u1b50\7\u00a0\2\2\u1b50\u1b51\7v\2\2\u1b51\u1b57\5\u039c\u01cf"+
		"\2\u1b52\u1b53\7\u00a1\2\2\u1b53\u1b54\7v\2\2\u1b54";
	private static final String _serializedATNSegment3 =
		"\u1b57\5\u039c\u01cf\2\u1b55\u1b57\3\2\2\2\u1b56\u1b3a\3\2\2\2\u1b56\u1b3b"+
		"\3\2\2\2\u1b56\u1b3c\3\2\2\2\u1b56\u1b3d\3\2\2\2\u1b56\u1b3e\3\2\2\2\u1b56"+
		"\u1b3f\3\2\2\2\u1b56\u1b40\3\2\2\2\u1b56\u1b43\3\2\2\2\u1b56\u1b46\3\2"+
		"\2\2\u1b56\u1b49\3\2\2\2\u1b56\u1b4c\3\2\2\2\u1b56\u1b4f\3\2\2\2\u1b56"+
		"\u1b52\3\2\2\2\u1b56\u1b55\3\2\2\2\u1b57\u0399\3\2\2\2\u1b58\u1b62\b\u01ce"+
		"\1\2\u1b59\u1b5a\f\5\2\2\u1b5a\u1b5b\7\'\2\2\u1b5b\u1b61\7(\2\2\u1b5c"+
		"\u1b5d\f\4\2\2\u1b5d\u1b5e\7\'\2\2\u1b5e\u1b5f\7\u0230\2\2\u1b5f\u1b61"+
		"\7(\2\2\u1b60\u1b59\3\2\2\2\u1b60\u1b5c\3\2\2\2\u1b61\u1b64\3\2\2\2\u1b62"+
		"\u1b60\3\2\2\2\u1b62\u1b63\3\2\2\2\u1b63\u039b\3\2\2\2\u1b64\u1b62\3\2"+
		"\2\2\u1b65\u1b6b\7\u00a2\2\2\u1b66\u1b67\7\u00a2\2\2\u1b67\u1b68\7#\2"+
		"\2\u1b68\u1b69\7\u0230\2\2\u1b69\u1b6b\7$\2\2\u1b6a\u1b65\3\2\2\2\u1b6a"+
		"\u1b66\3\2\2\2\u1b6b\u039d\3\2\2\2\u1b6c\u1b6d\t\63\2\2\u1b6d\u039f\3"+
		"\2\2\2\u1b6e\u1b6f\5\u02fa\u017e\2\u1b6f\u1b70\7e\2\2\u1b70\u1b71\5\u0370"+
		"\u01b9\2\u1b71\u1b76\3\2\2\2\u1b72\u1b73\7e\2\2\u1b73\u1b76\5\u0370\u01b9"+
		"\2\u1b74\u1b76\5\u0370\u01b9\2\u1b75\u1b6e\3\2\2\2\u1b75\u1b72\3\2\2\2"+
		"\u1b75\u1b74\3\2\2\2\u1b76\u03a1\3\2\2\2\u1b77\u1b78\5\u02fa\u017e\2\u1b78"+
		"\u1b79\5\u03a4\u01d3\2\u1b79\u1b7a\5\u03a6\u01d4\2\u1b7a\u1b7b\5\u03a8"+
		"\u01d5\2\u1b7b\u1b81\3\2\2\2\u1b7c\u1b7d\5\u02fa\u017e\2\u1b7d\u1b7e\5"+
		"\u03a4\u01d3\2\u1b7e\u1b7f\5\u03a6\u01d4\2\u1b7f\u1b81\3\2\2\2\u1b80\u1b77"+
		"\3\2\2\2\u1b80\u1b7c\3\2\2\2\u1b81\u03a3\3\2\2\2\u1b82\u1b83\7\u01a1\2"+
		"\2\u1b83\u1b84\5\u02fa\u017e\2\u1b84\u03a5\3\2\2\2\u1b85\u1b86\7e\2\2"+
		"\u1b86\u1b87\5\u02fa\u017e\2\u1b87\u03a7\3\2\2\2\u1b88\u1b89\7u\2\2\u1b89"+
		"\u1b8a\5\u02fa\u017e\2\u1b8a\u03a9\3\2\2\2\u1b8b\u1b8c\5\u02fc\u017f\2"+
		"\u1b8c\u1b8d\7\u0080\2\2\u1b8d\u1b8e\5\u02fc\u017f\2\u1b8e\u1b91\3\2\2"+
		"\2\u1b8f\u1b91\3\2\2\2\u1b90\u1b8b\3\2\2\2\u1b90\u1b8f\3\2\2\2\u1b91\u03ab"+
		"\3\2\2\2\u1b92\u1b93\5\u02fa\u017e\2\u1b93\u1b94\5\u03a6\u01d4\2\u1b94"+
		"\u1b95\5\u03a8\u01d5\2\u1b95\u1ba3\3\2\2\2\u1b96\u1b97\5\u02fa\u017e\2"+
		"\u1b97\u1b98\5\u03a8\u01d5\2\u1b98\u1b99\5\u03a6\u01d4\2\u1b99\u1ba3\3"+
		"\2\2\2\u1b9a\u1b9b\5\u02fa\u017e\2\u1b9b\u1b9c\5\u03a6\u01d4\2\u1b9c\u1ba3"+
		"\3\2\2\2\u1b9d\u1b9e\5\u02fa\u017e\2\u1b9e\u1b9f\5\u03a8\u01d5\2\u1b9f"+
		"\u1ba3\3\2\2\2\u1ba0\u1ba3\5\u0370\u01b9\2\u1ba1\u1ba3\3\2\2\2\u1ba2\u1b92"+
		"\3\2\2\2\u1ba2\u1b96\3\2\2\2\u1ba2\u1b9a\3\2\2\2\u1ba2\u1b9d\3\2\2\2\u1ba2"+
		"\u1ba0\3\2\2\2\u1ba2\u1ba1\3\2\2\2\u1ba3\u03ad\3\2\2\2\u1ba4\u1ba5\7\u0184"+
		"\2\2\u1ba5\u1ba6\7#\2\2\u1ba6\u1ba7\5\u03b0\u01d9\2\u1ba7\u1ba8\7$\2\2"+
		"\u1ba8\u03af\3\2\2\2\u1ba9\u1bae\5\u03b2\u01da\2\u1baa\u1bab\7)\2\2\u1bab"+
		"\u1bad\5\u03b2\u01da\2\u1bac\u1baa\3\2\2\2\u1bad\u1bb0\3\2\2\2\u1bae\u1bac"+
		"\3\2\2\2\u1bae\u1baf\3\2\2\2\u1baf\u03b1\3\2\2\2\u1bb0\u1bae\3\2\2\2\u1bb1"+
		"\u1bb2\5\u02fa\u017e\2\u1bb2\u1bb3\7p\2\2\u1bb3\u1bb4\5\u02d2\u016a\2"+
		"\u1bb4\u1bb7\3\2\2\2\u1bb5\u1bb7\5\u02fa\u017e\2\u1bb6\u1bb1\3\2\2\2\u1bb6"+
		"\u1bb5\3\2\2\2\u1bb7\u03b3\3\2\2\2\u1bb8\u1bb9\7\u0186\2\2\u1bb9\u1bc8"+
		"\5\u02fe\u0180\2\u1bba\u1bbb\7\u0186\2\2\u1bbb\u1bbc\5\u02fe\u0180\2\u1bbc"+
		"\u1bbd\5\u03b6\u01dc\2\u1bbd\u1bc8\3\2\2\2\u1bbe\u1bbf\7\u0186\2\2\u1bbf"+
		"\u1bc0\5\u03b6\u01dc\2\u1bc0\u1bc1\5\u02fe\u0180\2\u1bc1\u1bc8\3\2\2\2"+
		"\u1bc2\u1bc3\7\u0186\2\2\u1bc3\u1bc4\5\u03b6\u01dc\2\u1bc4\u1bc5\5\u02fe"+
		"\u0180\2\u1bc5\u1bc6\5\u03b6\u01dc\2\u1bc6\u1bc8\3\2\2\2\u1bc7\u1bb8\3"+
		"\2\2\2\u1bc7\u1bba\3\2\2\2\u1bc7\u1bbe\3\2\2\2\u1bc7\u1bc2\3\2\2\2\u1bc8"+
		"\u03b5\3\2\2\2\u1bc9\u1bca\7\u0086\2\2\u1bca\u1bce\7\u0185\2\2\u1bcb\u1bcc"+
		"\7\u0086\2\2\u1bcc\u1bce\7\u00c7\2\2\u1bcd\u1bc9\3\2\2\2\u1bcd\u1bcb\3"+
		"\2\2\2\u1bce\u03b7\3\2\2\2\u1bcf\u1bd0\t\64\2\2\u1bd0\u03b9\3\2\2\2\u1bd1"+
		"\u1bd2\7\u00aa\2\2\u1bd2\u1bd7\7\u019f\2\2\u1bd3\u1bd4\7\u019e\2\2\u1bd4"+
		"\u1bd7\7\u019f\2\2\u1bd5\u1bd7\3\2\2\2\u1bd6\u1bd1\3\2\2\2\u1bd6\u1bd3"+
		"\3\2\2\2\u1bd6\u1bd5\3\2\2\2\u1bd7\u03bb\3\2\2\2\u1bd8\u1bd9\7\u0187\2"+
		"\2\u1bd9\u1bde\5\u02fa\u017e\2\u1bda\u1bdb\7\u0187\2\2\u1bdb\u1bdc\7\u00e9"+
		"\2\2\u1bdc\u1bde\7\u00c7\2\2\u1bdd\u1bd8\3\2\2\2\u1bdd\u1bda\3\2\2\2\u1bde"+
		"\u03bd\3\2\2\2\u1bdf\u1be0\7)\2\2\u1be0\u1be1\7\u0189\2\2\u1be1\u1bea"+
		"\7\u0188\2\2\u1be2\u1be3\7)\2\2\u1be3\u1be4\7\u0189\2\2\u1be4\u1bea\7"+
		"\u00e9\2\2\u1be5\u1be6\7)\2\2\u1be6\u1be7\7\u0189\2\2\u1be7\u1be8\7\u00e9"+
		"\2\2\u1be8\u1bea\7\u00c7\2\2\u1be9\u1bdf\3\2\2\2\u1be9\u1be2\3\2\2\2\u1be9"+
		"\u1be5\3\2\2\2\u1bea\u03bf\3\2\2\2\u1beb\u1bec\5\u0366\u01b4\2\u1bec\u1bed"+
		"\5\u03c4\u01e3\2\u1bed\u03c1\3\2\2\2\u1bee\u1bf3\5\u03c0\u01e1\2\u1bef"+
		"\u1bf0\7)\2\2\u1bf0\u1bf2\5\u03c0\u01e1\2\u1bf1\u1bef\3\2\2\2\u1bf2\u1bf5"+
		"\3\2\2\2\u1bf3\u1bf1\3\2\2\2\u1bf3\u1bf4\3\2\2\2\u1bf4\u03c3\3\2\2\2\u1bf5"+
		"\u1bf3\3\2\2\2\u1bf6\u1bf7\7p\2\2\u1bf7\u1bf8\7#\2\2\u1bf8\u1bf9\5\u03c6"+
		"\u01e4\2\u1bf9\u1bfa\7$\2\2\u1bfa\u03c5\3\2\2\2\u1bfb\u1c00\5\u03c8\u01e5"+
		"\2\u1bfc\u1bfd\7)\2\2\u1bfd\u1bff\5\u03c8\u01e5\2\u1bfe\u1bfc\3\2\2\2"+
		"\u1bff\u1c02\3\2\2\2\u1c00\u1bfe\3\2\2\2\u1c00\u1c01\3\2\2\2\u1c01\u03c7"+
		"\3\2\2\2\u1c02\u1c00\3\2\2\2\u1c03\u1c04\5\u034c\u01a7\2\u1c04\u1c06\5"+
		"\u036c\u01b7\2\u1c05\u1c07\5\u03ca\u01e6\2\u1c06\u1c05\3\2\2\2\u1c06\u1c07"+
		"\3\2\2\2\u1c07\u03c9\3\2\2\2\u1c08\u1c0a\7\u00f7\2\2\u1c09\u1c0b\7\33"+
		"\2\2\u1c0a\u1c09\3\2\2\2\u1c0a\u1c0b\3\2\2\2\u1c0b\u1c0c\3\2\2\2\u1c0c"+
		"\u1c0d\5\u03cc\u01e7\2\u1c0d\u03cb\3\2\2\2\u1c0e\u1c13\5\u034c\u01a7\2"+
		"\u1c0f\u1c10\5\u034c\u01a7\2\u1c10\u1c11\5\u038a\u01c6\2\u1c11\u1c13\3"+
		"\2\2\2\u1c12\u1c0e\3\2\2\2\u1c12\u1c0f\3\2\2\2\u1c13\u03cd\3\2\2\2\u1c14"+
		"\u1c15\7p\2\2\u1c15\u1c16\5\u034c\u01a7\2\u1c16\u1c17\7#\2\2\u1c17\u1c18"+
		"\5\u03d0\u01e9\2\u1c18\u1c19\7$\2\2\u1c19\u1c23\3\2\2\2\u1c1a\u1c1b\7"+
		"p\2\2\u1c1b\u1c23\5\u034c\u01a7\2\u1c1c\u1c1d\5\u034c\u01a7\2\u1c1d\u1c1e"+
		"\7#\2\2\u1c1e\u1c1f\5\u03d0\u01e9\2\u1c1f\u1c20\7$\2\2\u1c20\u1c23\3\2"+
		"\2\2\u1c21\u1c23\5\u034c\u01a7\2\u1c22\u1c14\3\2\2\2\u1c22\u1c1a\3\2\2"+
		"\2\u1c22\u1c1c\3\2\2\2\u1c22\u1c21\3\2\2\2\u1c23\u03cf\3\2\2\2\u1c24\u1c25"+
		"\b\u01e9\1\2\u1c25\u1c26\5\u02e4\u0173\2\u1c26\u1c2c\3\2\2\2\u1c27\u1c28"+
		"\f\3\2\2\u1c28\u1c29\7)\2\2\u1c29\u1c2b\5\u02e4\u0173\2\u1c2a\u1c27\3"+
		"\2\2\2\u1c2b\u1c2e\3\2\2\2\u1c2c\u1c2a\3\2\2\2\u1c2c\u1c2d\3\2\2\2\u1c2d"+
		"\u03d1\3\2\2\2\u1c2e\u1c2c\3\2\2\2\u1c2f\u1c41\5\u03ce\u01e8\2\u1c30\u1c31"+
		"\7p\2\2\u1c31\u1c32\7#\2\2\u1c32\u1c33\5\u03c6\u01e4\2\u1c33\u1c34\7$"+
		"\2\2\u1c34\u1c41\3\2\2\2\u1c35\u1c36\7p\2\2\u1c36\u1c37\5\u034c\u01a7"+
		"\2\u1c37\u1c38\7#\2\2\u1c38\u1c39\5\u03c6\u01e4\2\u1c39\u1c3a\7$\2\2\u1c3a"+
		"\u1c41\3\2\2\2\u1c3b\u1c3c\5\u034c\u01a7\2\u1c3c\u1c3d\7#\2\2\u1c3d\u1c3e"+
		"\5\u03c6\u01e4\2\u1c3e\u1c3f\7$\2\2\u1c3f\u1c41\3\2\2\2\u1c40\u1c2f\3"+
		"\2\2\2\u1c40\u1c30\3\2\2\2\u1c40\u1c35\3\2\2\2\u1c40\u1c3b\3\2\2\2\u1c41"+
		"\u03d3\3\2\2\2\u1c42\u1c43\7\u016f\2\2\u1c43\u1c44\5\u0346\u01a4\2\u1c44"+
		"\u1c45\7#\2\2\u1c45\u1c46\5\u0370\u01b9\2\u1c46\u1c48\7$\2\2\u1c47\u1c49"+
		"\5\u03d6\u01ec\2\u1c48\u1c47\3\2\2\2\u1c48\u1c49\3\2\2\2\u1c49\u03d5\3"+
		"\2\2\2\u1c4a\u1c4b\7\u00bf\2\2\u1c4b\u1c4c\7#\2\2\u1c4c\u1c4d\5\u02fa"+
		"\u017e\2\u1c4d\u1c4e\7$\2\2\u1c4e\u03d7\3\2\2\2\u1c4f\u1c50\t\65\2\2\u1c50"+
		"\u03d9\3\2\2\2\u1c51\u1c52\7\u0084\2\2\u1c52\u1c53\7\u0086\2\2\u1c53\u1c54"+
		"\5\u03dc\u01ef\2\u1c54\u03db\3\2\2\2\u1c55\u1c5a\5\u03de\u01f0\2\u1c56"+
		"\u1c57\7)\2\2\u1c57\u1c59\5\u03de\u01f0\2\u1c58\u1c56\3\2\2\2\u1c59\u1c5c"+
		"\3\2\2\2\u1c5a\u1c58\3\2\2\2\u1c5a\u1c5b\3\2\2\2\u1c5b\u03dd\3\2\2\2\u1c5c"+
		"\u1c5a\3\2\2\2\u1c5d\u1c5e\5\u02fa\u017e\2\u1c5e\u1c5f\7n\2\2\u1c5f\u1c61"+
		"\5\u0322\u0192\2\u1c60\u1c62\5\u03e0\u01f1\2\u1c61\u1c60\3\2\2\2\u1c61"+
		"\u1c62\3\2\2\2\u1c62\u1c6b\3\2\2\2\u1c63\u1c65\5\u02fa\u017e\2\u1c64\u1c66"+
		"\5\u0324\u0193\2\u1c65\u1c64\3\2\2\2\u1c65\u1c66\3\2\2\2\u1c66\u1c68\3"+
		"\2\2\2\u1c67\u1c69\5\u03e0\u01f1\2\u1c68\u1c67\3\2\2\2\u1c68\u1c69\3\2"+
		"\2\2\u1c69\u1c6b\3\2\2\2\u1c6a\u1c5d\3\2\2\2\u1c6a\u1c63\3\2\2\2\u1c6b"+
		"\u03df\3\2\2\2\u1c6c\u1c6d\7\u0121\2\2\u1c6d\u1c71\7\u010b\2\2\u1c6e\u1c6f"+
		"\7\u0121\2\2\u1c6f\u1c71\7\u011a\2\2\u1c70\u1c6c\3\2\2\2\u1c70\u1c6e\3"+
		"\2\2\2\u1c71\u03e1\3\2\2\2\u1c72\u1c7a\7_\2\2\u1c73\u1c74\7_\2\2\u1c74"+
		"\u1c75\7q\2\2\u1c75\u1c76\7#\2\2\u1c76\u1c77\5\u0370\u01b9\2\u1c77\u1c78"+
		"\7$\2\2\u1c78\u1c7a\3\2\2\2\u1c79\u1c72\3\2\2\2\u1c79\u1c73\3\2\2\2\u1c7a"+
		"\u03e3\3\2\2\2\u1c7b\u1c7c\7_\2\2\u1c7c\u03e5\3\2\2\2\u1c7d\u1c7e\7\u0125"+
		"\2\2\u1c7e\u1c82\5\u03e8\u01f5\2\u1c7f\u1c80\7\u0125\2\2\u1c80\u1c82\5"+
		"\u034c\u01a7\2\u1c81\u1c7d\3\2\2\2\u1c81\u1c7f\3\2\2\2\u1c82\u03e7\3\2"+
		"\2\2\u1c83\u1c85\7#\2\2\u1c84\u1c86\5\u03ea\u01f6\2\u1c85\u1c84\3\2\2"+
		"\2\u1c85\u1c86\3\2\2\2\u1c86\u1c88\3\2\2\2\u1c87\u1c89\5\u03ec\u01f7\2"+
		"\u1c88\u1c87\3\2\2\2\u1c88\u1c89\3\2\2\2\u1c89\u1c8b\3\2\2\2\u1c8a\u1c8c"+
		"\5\u03da\u01ee\2\u1c8b\u1c8a\3\2\2\2\u1c8b\u1c8c\3\2\2\2\u1c8c\u1c8e\3"+
		"\2\2\2\u1c8d\u1c8f\5\u0328\u0195\2\u1c8e\u1c8d\3\2\2\2\u1c8e\u1c8f\3\2"+
		"\2\2\u1c8f\u1c90\3\2\2\2\u1c90\u1c91\7$\2\2\u1c91\u03e9\3\2\2\2\u1c92"+
		"\u1c93\5\u034c\u01a7\2\u1c93\u03eb\3\2\2\2\u1c94\u1c95\7\u00e0\2\2\u1c95"+
		"\u1c96\7\u0086\2\2\u1c96\u1c97\5\u0370\u01b9\2\u1c97\u03ed\3\2\2\2\u1c98"+
		"\u1c9d\5\u03f2\u01fa\2\u1c99\u1c9a\7)\2\2\u1c9a\u1c9c\5\u03f2\u01fa\2"+
		"\u1c9b\u1c99\3\2\2\2\u1c9c\u1c9f\3\2\2\2\u1c9d\u1c9b\3\2\2\2\u1c9d\u1c9e"+
		"\3\2\2\2\u1c9e\u03ef\3\2\2\2\u1c9f\u1c9d\3\2\2\2\u1ca0\u1ca2\5\u03f4\u01fb"+
		"\2\u1ca1\u1ca0\3\2\2\2\u1ca1\u1ca2\3\2\2\2\u1ca2\u1ca3\3\2\2\2\u1ca3\u1ca5"+
		"\5\u03f6\u01fc\2\u1ca4\u1ca6\5\u0324\u0193\2\u1ca5\u1ca4\3\2\2\2\u1ca5"+
		"\u1ca6\3\2\2\2\u1ca6\u1ca8\3\2\2\2\u1ca7\u1ca9\5\u03e0\u01f1\2\u1ca8\u1ca7"+
		"\3\2\2\2\u1ca8\u1ca9\3\2\2\2\u1ca9\u1cb6\3\2\2\2\u1caa\u1cac\5\u03f4\u01fb"+
		"\2\u1cab\u1caa\3\2\2\2\u1cab\u1cac\3\2\2\2\u1cac\u1cad\3\2\2\2\u1cad\u1cae"+
		"\5\u03cc\u01e7\2\u1cae\u1cb0\5\u03f8\u01fd\2\u1caf\u1cb1\5\u0324\u0193"+
		"\2\u1cb0\u1caf\3\2\2\2\u1cb0\u1cb1\3\2\2\2\u1cb1\u1cb3\3\2\2\2\u1cb2\u1cb4"+
		"\5\u03e0\u01f1\2\u1cb3\u1cb2\3\2\2\2\u1cb3\u1cb4\3\2\2\2\u1cb4\u1cb6\3"+
		"\2\2\2\u1cb5\u1ca1\3\2\2\2\u1cb5\u1cab\3\2\2\2\u1cb6\u03f1\3\2\2\2\u1cb7"+
		"\u1cb8\5\u034c\u01a7\2\u1cb8\u1cb9\5\u03f0\u01f9\2\u1cb9\u1cc3\3\2\2\2"+
		"\u1cba\u1cbb\5\u0366\u01b4\2\u1cbb\u1cbc\5\u03f0\u01f9\2\u1cbc\u1cc3\3"+
		"\2\2\2\u1cbd\u1cbe\7#\2\2\u1cbe\u1cbf\5\u02fa\u017e\2\u1cbf\u1cc0\7$\2"+
		"\2\u1cc0\u1cc1\5\u03f0\u01f9\2\u1cc1\u1cc3\3\2\2\2\u1cc2\u1cb7\3\2\2\2"+
		"\u1cc2\u1cba\3\2\2\2\u1cc2\u1cbd\3\2\2\2\u1cc3\u03f3\3\2\2\2\u1cc4\u1cc5"+
		"\7\u00f7\2\2\u1cc5\u1cc6\5\u03cc\u01e7\2\u1cc6\u03f5\3\2\2\2\u1cc7\u1cca"+
		"\5\u03cc\u01e7\2\u1cc8\u1cca\3\2\2\2\u1cc9\u1cc7\3\2\2\2\u1cc9\u1cc8\3"+
		"\2\2\2\u1cca\u03f7\3\2\2\2\u1ccb\u1ccc\7#\2\2\u1ccc\u1ccd\5\u03fa\u01fe"+
		"\2\u1ccd\u1cce\7$\2\2\u1cce\u03f9\3\2\2\2\u1ccf\u1cd4\5\u03fc\u01ff\2"+
		"\u1cd0\u1cd1\7)\2\2\u1cd1\u1cd3\5\u03fc\u01ff\2\u1cd2\u1cd0\3\2\2\2\u1cd3"+
		"\u1cd6\3\2\2\2\u1cd4\u1cd2\3\2\2\2\u1cd4\u1cd5\3\2\2\2\u1cd5\u03fb\3\2"+
		"\2\2\u1cd6\u1cd4\3\2\2\2\u1cd7\u1cd8\5\u02ee\u0178\2\u1cd8\u1cd9\7\33"+
		"\2\2\u1cd9\u1cda\5\u03fe\u0200\2\u1cda\u1ce7\3\2\2\2\u1cdb\u1ce7\5\u02ee"+
		"\u0178\2\u1cdc\u1cdd\5\u02ee\u0178\2\u1cdd\u1cde\7\27\2\2\u1cde\u1cdf"+
		"\5\u02ee\u0178\2\u1cdf\u1ce0\7\33\2\2\u1ce0\u1ce1\5\u03fe\u0200\2\u1ce1"+
		"\u1ce7\3\2\2\2\u1ce2\u1ce3\5\u02ee\u0178\2\u1ce3\u1ce4\7\27\2\2\u1ce4"+
		"\u1ce5\5\u02ee\u0178\2\u1ce5\u1ce7\3\2\2\2\u1ce6\u1cd7\3\2\2\2\u1ce6\u1cdb"+
		"\3\2\2\2\u1ce6\u1cdc\3\2\2\2\u1ce6\u1ce2\3\2\2\2\u1ce7\u03fd\3\2\2\2\u1ce8"+
		"\u1cef\5\u0400\u0201\2\u1ce9\u1cef\5\u02cc\u0167\2\u1cea\u1cef\5\u0322"+
		"\u0192\2\u1ceb\u1cef\7\u0230\2\2\u1cec\u1cef\7\u022f\2\2\u1ced\u1cef\7"+
		"\u01a4\2\2\u1cee\u1ce8\3\2\2\2\u1cee\u1ce9\3\2\2\2\u1cee\u1cea\3\2\2\2"+
		"\u1cee\u1ceb\3\2\2\2\u1cee\u1cec\3\2\2\2\u1cee\u1ced\3\2\2\2\u1cef\u03ff"+
		"\3\2\2\2\u1cf0\u1cfd\5\u036c\u01b7\2\u1cf1\u1cf2\5\u034e\u01a8\2\u1cf2"+
		"\u1cf3\5\u038a\u01c6\2\u1cf3\u1cf4\7\20\2\2\u1cf4\u1cf5\7\u00ba\2\2\u1cf5"+
		"\u1cfd\3\2\2\2\u1cf6\u1cf7\7\u017f\2\2\u1cf7\u1cf8\5\u034e\u01a8\2\u1cf8"+
		"\u1cf9\5\u038a\u01c6\2\u1cf9\u1cfa\7\20\2\2\u1cfa\u1cfb\7\u00ba\2\2\u1cfb"+
		"\u1cfd\3\2\2\2\u1cfc\u1cf0\3\2\2\2\u1cfc\u1cf1\3\2\2\2\u1cfc\u1cf6\3\2"+
		"\2\2\u1cfd\u0401\3\2\2\2\u1cfe\u1cff\7\5\2\2\u1cff\u0403\3\2\2\2\u1d00"+
		"\u1d02\5\u0406\u0204\2\u1d01\u1d03\5\u0408\u0205\2\u1d02\u1d01\3\2\2\2"+
		"\u1d02\u1d03\3\2\2\2\u1d03\u1d05\3\2\2\2\u1d04\u1d06\5\u040a\u0206\2\u1d05"+
		"\u1d04\3\2\2\2\u1d05\u1d06\3\2\2\2\u1d06\u1d08\3\2\2\2\u1d07\u1d09\5\u03ca"+
		"\u01e6\2\u1d08\u1d07\3\2\2\2\u1d08\u1d09\3\2\2\2\u1d09\u1d1c\3\2\2\2\u1d0a"+
		"\u1d0b\5\u0406\u0204\2\u1d0b\u1d0c\7#\2\2\u1d0c\u1d11\7\u022f\2\2\u1d0d"+
		"\u1d0e\7)\2\2\u1d0e\u1d10\7\u022f\2\2\u1d0f\u1d0d\3\2\2\2\u1d10\u1d13"+
		"\3\2\2\2\u1d11\u1d0f\3\2\2\2\u1d11\u1d12\3\2\2\2\u1d12\u1d14\3\2\2\2\u1d13"+
		"\u1d11\3\2\2\2\u1d14\u1d16\7$\2\2\u1d15\u1d17\5\u040a\u0206\2\u1d16\u1d15"+
		"\3\2\2\2\u1d16\u1d17\3\2\2\2\u1d17\u1d19\3\2\2\2\u1d18\u1d1a\5\u03ca\u01e6"+
		"\2\u1d19\u1d18\3\2\2\2\u1d19\u1d1a\3\2\2\2\u1d1a\u1d1c\3\2\2\2\u1d1b\u1d00"+
		"\3\2\2\2\u1d1b\u1d0a\3\2\2\2\u1d1c\u0405\3\2\2\2\u1d1d\u1d58\7\u014a\2"+
		"\2\u1d1e\u1d58\7\u014b\2\2\u1d1f\u1d58\7\u014c\2\2\u1d20\u1d58\7\u014d"+
		"\2\2\u1d21\u1d58\7\u00bb\2\2\u1d22\u1d58\7\u00b7\2\2\u1d23\u1d58\7\u00bc"+
		"\2\2\u1d24\u1d58\7\u00b9\2\2\u1d25\u1d58\7\u00bd\2\2\u1d26\u1d58\7\u00b8"+
		"\2\2\u1d27\u1d58\7\u014e\2\2\u1d28\u1d58\7\u014f\2\2\u1d29\u1d58\7\u0150"+
		"\2\2\u1d2a\u1d2b\7\u0091\2\2\u1d2b\u1d58\7V\2\2\u1d2c\u1d58\7\u0151\2"+
		"\2\u1d2d\u1d58\7\u0152\2\2\u1d2e\u1d58\7\u0153\2\2\u1d2f\u1d58\7\u0154"+
		"\2\2\u1d30\u1d58\7\u0155\2\2\u1d31\u1d58\7\u0093\2\2\u1d32\u1d58\7\u0092"+
		"\2\2\u1d33\u1d58\7\u00be\2\2\u1d34\u1d58\7\u00b4\2\2\u1d35\u1d58\7\u0156"+
		"\2\2\u1d36\u1d58\7\u0098\2\2\u1d37\u1d58\7\u0096\2\2\u1d38\u1d58\7\u0097"+
		"\2\2\u1d39\u1d58\7\u0095\2\2\u1d3a\u1d58\7\u0090\2\2\u1d3b\u1d58\7\u0157"+
		"\2\2\u1d3c\u1d58\7\u0158\2\2\u1d3d\u1d58\7\u0159\2\2\u1d3e\u1d58\7\u015a"+
		"\2\2\u1d3f\u1d58\7\u015b\2\2\u1d40\u1d58\7\u015c\2\2\u1d41\u1d58\7\u015d"+
		"\2\2\u1d42\u1d58\7\u015e\2\2\u1d43\u1d58\7\u015f\2\2\u1d44\u1d58\7\u0160"+
		"\2\2\u1d45\u1d58\7\u0161\2\2\u1d46\u1d58\7\u0162\2\2\u1d47\u1d58\7\u0163"+
		"\2\2\u1d48\u1d58\7\u0164\2\2\u1d49\u1d58\7\u0165\2\2\u1d4a\u1d58\7\u0166"+
		"\2\2\u1d4b\u1d58\7\u0167\2\2\u1d4c\u1d58\7\u0168\2\2\u1d4d\u1d58\7\u0169"+
		"\2\2\u1d4e\u1d58\7\u016a\2\2\u1d4f\u1d58\7\u016b\2\2\u1d50\u1d58\7\u016c"+
		"\2\2\u1d51\u1d58\7\u016d\2\2\u1d52\u1d58\7\u016e\2\2\u1d53\u1d58\7\u0094"+
		"\2\2\u1d54\u1d58\5\u02d2\u016a\2\u1d55\u1d58\5\u037c\u01bf\2\u1d56\u1d58"+
		"\5\u036c\u01b7\2\u1d57\u1d1d\3\2\2\2\u1d57\u1d1e\3\2\2\2\u1d57\u1d1f\3"+
		"\2\2\2\u1d57\u1d20\3\2\2\2\u1d57\u1d21\3\2\2\2\u1d57\u1d22\3\2\2\2\u1d57"+
		"\u1d23\3\2\2\2\u1d57\u1d24\3\2\2\2\u1d57\u1d25\3\2\2\2\u1d57\u1d26\3\2"+
		"\2\2\u1d57\u1d27\3\2\2\2\u1d57\u1d28\3\2\2\2\u1d57\u1d29\3\2\2\2\u1d57"+
		"\u1d2a\3\2\2\2\u1d57\u1d2c\3\2\2\2\u1d57\u1d2d\3\2\2\2\u1d57\u1d2e\3\2"+
		"\2\2\u1d57\u1d2f\3\2\2\2\u1d57\u1d30\3\2\2\2\u1d57\u1d31\3\2\2\2\u1d57"+
		"\u1d32\3\2\2\2\u1d57\u1d33\3\2\2\2\u1d57\u1d34\3\2\2\2\u1d57\u1d35\3\2"+
		"\2\2\u1d57\u1d36\3\2\2\2\u1d57\u1d37\3\2\2\2\u1d57\u1d38\3\2\2\2\u1d57"+
		"\u1d39\3\2\2\2\u1d57\u1d3a\3\2\2\2\u1d57\u1d3b\3\2\2\2\u1d57\u1d3c\3\2"+
		"\2\2\u1d57\u1d3d\3\2\2\2\u1d57\u1d3e\3\2\2\2\u1d57\u1d3f\3\2\2\2\u1d57"+
		"\u1d40\3\2\2\2\u1d57\u1d41\3\2\2\2\u1d57\u1d42\3\2\2\2\u1d57\u1d43\3\2"+
		"\2\2\u1d57\u1d44\3\2\2\2\u1d57\u1d45\3\2\2\2\u1d57\u1d46\3\2\2\2\u1d57"+
		"\u1d47\3\2\2\2\u1d57\u1d48\3\2\2\2\u1d57\u1d49\3\2\2\2\u1d57\u1d4a\3\2"+
		"\2\2\u1d57\u1d4b\3\2\2\2\u1d57\u1d4c\3\2\2\2\u1d57\u1d4d\3\2\2\2\u1d57"+
		"\u1d4e\3\2\2\2\u1d57\u1d4f\3\2\2\2\u1d57\u1d50\3\2\2\2\u1d57\u1d51\3\2"+
		"\2\2\u1d57\u1d52\3\2\2\2\u1d57\u1d53\3\2\2\2\u1d57\u1d54\3\2\2\2\u1d57"+
		"\u1d55\3\2\2\2\u1d57\u1d56\3\2\2\2\u1d58\u0407\3\2\2\2\u1d59\u1d5a\7#"+
		"\2\2\u1d5a\u1d5d\7\u0230\2\2\u1d5b\u1d5c\7)\2\2\u1d5c\u1d5e\7\u0230\2"+
		"\2\u1d5d\u1d5b\3\2\2\2\u1d5d\u1d5e\3\2\2\2\u1d5e\u1d5f\3\2\2\2\u1d5f\u1d60"+
		"\7$\2\2\u1d60\u0409\3\2\2\2\u1d61\u1d62\t\66\2\2\u1d62\u1d64\7L\2\2\u1d63"+
		"\u1d65\7\33\2\2\u1d64\u1d63\3\2\2\2\u1d64\u1d65\3\2\2\2\u1d65\u1d66\3"+
		"\2\2\2\u1d66\u1d67\5\u040c\u0207\2\u1d67\u040b\3\2\2\2\u1d68\u1d6b\5\u02d2"+
		"\u016a\2\u1d69\u1d6a\7\27\2\2\u1d6a\u1d6c\5\u02d2\u016a\2\u1d6b\u1d69"+
		"\3\2\2\2\u1d6b\u1d6c\3\2\2\2\u1d6c\u040d\3\2\2\2\u1d6d\u1d72\5\u040c\u0207"+
		"\2\u1d6e\u1d6f\7)\2\2\u1d6f\u1d71\5\u040c\u0207\2\u1d70\u1d6e\3\2\2\2"+
		"\u1d71\u1d74\3\2\2\2\u1d72\u1d70\3\2\2\2\u1d72\u1d73\3\2\2\2\u1d73\u040f"+
		"\3\2\2\2\u1d74\u1d72\3\2\2\2\u1d75\u1d7b\7\u0230\2\2\u1d76\u1d77\7\22"+
		"\2\2\u1d77\u1d7b\7\u0230\2\2\u1d78\u1d79\7\23\2\2\u1d79\u1d7b\7\u0230"+
		"\2\2\u1d7a\u1d75\3\2\2\2\u1d7a\u1d76\3\2\2\2\u1d7a\u1d78\3\2\2\2\u1d7b"+
		"\u0411\3\2\2\2\u1d7c\u1d82\7|\2\2\u1d7d\u1d82\7}\2\2\u1d7e\u1d82\7q\2"+
		"\2\u1d7f\u1d82\5\u0414\u020b\2\u1d80\u1d82\7\u022f\2\2\u1d81\u1d7c\3\2"+
		"\2\2\u1d81\u1d7d\3\2\2\2\u1d81\u1d7e\3\2\2\2\u1d81\u1d7f\3\2\2\2\u1d81"+
		"\u1d80\3\2\2\2\u1d82\u0413\3\2\2\2\u1d83\u1d88\5\u02d2\u016a\2\u1d84\u1d88"+
		"\5\u02d8\u016d\2\u1d85\u1d88\5\u0416\u020c\2\u1d86\u1d88\5\u02da\u016e"+
		"\2\u1d87\u1d83\3\2\2\2\u1d87\u1d84\3\2\2\2\u1d87\u1d85\3\2\2\2\u1d87\u1d86"+
		"\3\2\2\2\u1d88\u0415\3\2\2\2\u1d89\u1d8a\t\67\2\2\u1d8a\u0417\3\2\2\2"+
		"\u1d8b\u1d8c\5\u034c\u01a7\2\u1d8c\u0419\3\2\2\2\u1d8d\u1d92\5\u02d2\u016a"+
		"\2\u1d8e\u1d92\5\u0414\u020b\2\u1d8f\u1d92\7\u00ad\2\2\u1d90\u1d92\7\u0136"+
		"\2\2\u1d91\u1d8d\3\2\2\2\u1d91\u1d8e\3\2\2\2\u1d91\u1d8f\3\2\2\2\u1d91"+
		"\u1d90\3\2\2\2\u1d92\u041b\3\2\2\2\u1d93\u1d94\b\u020f\1\2\u1d94\u1d95"+
		"\5\u034c\u01a7\2\u1d95\u1d9b\3\2\2\2\u1d96\u1d97\f\3\2\2\u1d97\u1d98\7"+
		"\27\2\2\u1d98\u1d9a\5\u034c\u01a7\2\u1d99\u1d96\3\2\2\2\u1d9a\u1d9d\3"+
		"\2\2\2\u1d9b\u1d99\3\2\2\2\u1d9b\u1d9c\3\2\2\2\u1d9c\u041d\3\2\2\2\u1d9d"+
		"\u1d9b\3\2\2\2\u1d9e\u1da3\5\u0420\u0211\2\u1d9f\u1da0\7)\2\2\u1da0\u1da2"+
		"\5\u0420\u0211\2\u1da1\u1d9f\3\2\2\2\u1da2\u1da5\3\2\2\2\u1da3\u1da1\3"+
		"\2\2\2\u1da3\u1da4\3\2\2\2\u1da4\u041f\3\2\2\2\u1da5\u1da3\3\2\2\2\u1da6"+
		"\u1da9\5\u0412\u020a\2\u1da7\u1da9\5\u0424\u0213\2\u1da8\u1da6\3\2\2\2"+
		"\u1da8\u1da7\3\2\2\2\u1da9\u0421\3\2\2\2\u1daa\u1db8\7\u022f\2\2\u1dab"+
		"\u1db8\5\u02d2\u016a\2\u1dac\u1dad\7\u0095\2\2\u1dad\u1dae\7\u022f\2\2"+
		"\u1dae\u1db8\5\u0398\u01cd\2\u1daf\u1db0\7\u0095\2\2\u1db0\u1db1\7#\2"+
		"\2\u1db1\u1db2\7\u0230\2\2\u1db2\u1db3\7$\2\2\u1db3\u1db8\7\u022f\2\2"+
		"\u1db4\u1db8\5\u0424\u0213\2\u1db5\u1db8\7\u00a4\2\2\u1db6\u1db8\7\u00b0"+
		"\2\2\u1db7\u1daa\3\2\2\2\u1db7\u1dab\3\2\2\2\u1db7\u1dac\3\2\2\2\u1db7"+
		"\u1daf\3\2\2\2\u1db7\u1db4\3\2\2\2\u1db7\u1db5\3\2\2\2\u1db7\u1db6\3\2"+
		"\2\2\u1db8\u0423\3\2\2\2\u1db9\u1dbf\7\u0230\2\2\u1dba\u1dbb\7\22\2\2"+
		"\u1dbb\u1dbf\7\u0230\2\2\u1dbc\u1dbd\7\23\2\2\u1dbd\u1dbf\7\u0230\2\2"+
		"\u1dbe\u1db9\3\2\2\2\u1dbe\u1dba\3\2\2\2\u1dbe\u1dbc\3\2\2\2\u1dbf\u0425"+
		"\3\2\2\2\u1dc0\u1dc1\7\u00ec\2\2\u1dc1\u1dc8\7\u021a\2\2\u1dc2\u1dc3\7"+
		"\u00ec\2\2\u1dc3\u1dc8\7\u01ce\2\2\u1dc4\u1dc5\7\u00bf\2\2\u1dc5\u1dc8"+
		"\7\u00ec\2\2\u1dc6\u1dc8\7\u020f\2\2\u1dc7\u1dc0\3\2\2\2\u1dc7\u1dc2\3"+
		"\2\2\2\u1dc7\u1dc4\3\2\2\2\u1dc7\u1dc6\3\2\2\2\u1dc8\u0427\3\2\2\2\u1dc9"+
		"\u1dca\5\u034c\u01a7\2\u1dca\u1dcc\5\u036c\u01b7\2\u1dcb\u1dcd\5\u0450"+
		"\u0229\2\u1dcc\u1dcb\3\2\2\2\u1dcc\u1dcd\3\2\2\2\u1dcd\u1dce\3\2\2\2\u1dce"+
		"\u1dcf\5\22\n\2\u1dcf\u0429\3\2\2\2\u1dd0\u1dd1\7P\2\2\u1dd1\u1dd2\5\u02e4"+
		"\u0173\2\u1dd2\u1dd3\5\u042e\u0218\2\u1dd3\u1dd9\3\2\2\2\u1dd4\u1dd9\5"+
		"\u042e\u0218\2\u1dd5\u1dd9\5\u042c\u0217\2\u1dd6\u1dd7\7\u00f7\2\2\u1dd7"+
		"\u1dd9\5\u03cc\u01e7\2\u1dd8\u1dd0\3\2\2\2\u1dd8\u1dd4\3\2\2\2\u1dd8\u1dd5"+
		"\3\2\2\2\u1dd8\u1dd6\3\2\2\2\u1dd9\u042b\3\2\2\2\u1dda\u1de2\7\u0100\2"+
		"\2\u1ddb\u1ddc\7z\2\2\u1ddc\u1de2\7\u0100\2\2\u1ddd\u1dde\7\u0116\2\2"+
		"\u1dde\u1de2\7\u0101\2\2\u1ddf\u1de0\7\u0116\2\2\u1de0\u1de2\7\u0110\2"+
		"\2\u1de1\u1dda\3\2\2\2\u1de1\u1ddb\3\2\2\2\u1de1\u1ddd\3\2\2\2\u1de1\u1ddf"+
		"\3\2\2\2\u1de2\u042d\3\2\2\2\u1de3\u1de4\7z\2\2\u1de4\u1e17\7{\2\2\u1de5"+
		"\u1e17\7{\2\2\u1de6\u1de9\7R\2\2\u1de7\u1de8\7]\2\2\u1de8\u1dea\5\u043e"+
		"\u0220\2\u1de9\u1de7\3\2\2\2\u1de9\u1dea\3\2\2\2\u1dea\u1deb\3\2\2\2\u1deb"+
		"\u1e17\5\u043c\u021f\2\u1dec\u1ded\7Q\2\2\u1ded\u1df0\7T\2\2\u1dee\u1def"+
		"\7]\2\2\u1def\u1df1\5\u043e\u0220\2\u1df0\u1dee\3\2\2\2\u1df0\u1df1\3"+
		"\2\2\2\u1df1\u1df2\3\2\2\2\u1df2\u1e17\5\u043c\u021f\2\u1df3\u1df4\7\u00e5"+
		"\2\2\u1df4\u1df5\7#\2\2\u1df5\u1df6\5\u02fa\u017e\2\u1df6\u1df8\7$\2\2"+
		"\u1df7\u1df9\5\u043a\u021e\2\u1df8\u1df7\3\2\2\2\u1df8\u1df9\3\2\2\2\u1df9"+
		"\u1e17\3\2\2\2\u1dfa\u1dfb\7\u00a4\2\2\u1dfb\u1e17\5\u02fc\u017f\2\u1dfc"+
		"\u1dfd\7\u00e6\2\2\u1dfd\u1dfe\5\u0438\u021d\2\u1dfe\u1dff\7p\2\2\u1dff"+
		"\u1e01\7\u010f\2\2\u1e00\u1e02\5\u0430\u0219\2\u1e01\u1e00\3\2\2\2\u1e01"+
		"\u1e02\3\2\2\2\u1e02\u1e17\3\2\2\2\u1e03\u1e04\7\u00e6\2\2\u1e04\u1e05"+
		"\5\u0438\u021d\2\u1e05\u1e06\7p\2\2\u1e06\u1e07\7#\2\2\u1e07\u1e08\5\u02fa"+
		"\u017e\2\u1e08\u1e09\7$\2\2\u1e09\u1e0a\7\u0222\2\2\u1e0a\u1e17\3\2\2"+
		"\2\u1e0b\u1e0c\7\u00ed\2\2\u1e0c\u1e0e\5\u034a\u01a6\2\u1e0d\u1e0f\5\u0436"+
		"\u021c\2\u1e0e\u1e0d\3\2\2\2\u1e0e\u1e0f\3\2\2\2\u1e0f\u1e11\3\2\2\2\u1e10"+
		"\u1e12\5\u044e\u0228\2\u1e11\u1e10\3\2\2\2\u1e11\u1e12\3\2\2\2\u1e12\u1e14"+
		"\3\2\2\2\u1e13\u1e15\5\u0446\u0224\2\u1e14\u1e13\3\2\2\2\u1e14\u1e15\3"+
		"\2\2\2\u1e15\u1e17\3\2\2\2\u1e16\u1de3\3\2\2\2\u1e16\u1de5\3\2\2\2\u1e16"+
		"\u1de6\3\2\2\2\u1e16\u1dec\3\2\2\2\u1e16\u1df3\3\2\2\2\u1e16\u1dfa\3\2"+
		"\2\2\u1e16\u1dfc\3\2\2\2\u1e16\u1e03\3\2\2\2\u1e16\u1e0b\3\2\2\2\u1e17"+
		"\u042f\3\2\2\2\u1e18\u1e19\7#\2\2\u1e19\u1e1a\5\u0432\u021a\2\u1e1a\u1e1b"+
		"\7$\2\2\u1e1b\u0431\3\2\2\2\u1e1c\u1e1e\5\u0434\u021b\2\u1e1d\u1e1c\3"+
		"\2\2\2\u1e1e\u1e1f\3\2\2\2\u1e1f\u1e1d\3\2\2\2\u1e1f\u1e20\3\2\2\2\u1e20"+
		"\u0433\3\2\2\2\u1e21\u1e22\7p\2\2\u1e22\u1e47\5\u036e\u01b8\2\u1e23\u1e24"+
		"\7\u00f4\2\2\u1e24\u1e47\5\u0424\u0213\2\u1e25\u1e47\7\u00fc\2\2\u1e26"+
		"\u1e27\7\u00e9\2\2\u1e27\u1e47\7\u00fc\2\2\u1e28\u1e2a\7\u0112\2\2\u1e29"+
		"\u1e2b\7\u0086\2\2\u1e2a\u1e29\3\2\2\2\u1e2a\u1e2b\3\2\2\2\u1e2b\u1e2c"+
		"\3\2\2\2\u1e2c\u1e47\5\u0424\u0213\2\u1e2d\u1e2e\7\u011e\2\2\u1e2e\u1e47"+
		"\5\u0424\u0213\2\u1e2f\u1e30\7\u011f\2\2\u1e30\u1e47\5\u0424\u0213\2\u1e31"+
		"\u1e32\7\u00e9\2\2\u1e32\u1e47\7\u011e\2\2\u1e33\u1e34\7\u00e9\2\2\u1e34"+
		"\u1e47\7\u011f\2\2\u1e35\u1e36\7\u0126\2\2\u1e36\u1e37\7\u0086\2\2\u1e37"+
		"\u1e47\5\u03cc\u01e7\2\u1e38\u1e39\7\u0134\2\2\u1e39\u1e3a\7\u00b4\2\2"+
		"\u1e3a\u1e47\5\u03cc\u01e7\2\u1e3b\u1e3d\7\u00f0\2\2\u1e3c\u1e3e\7]\2"+
		"\2\u1e3d\u1e3c\3\2\2\2\u1e3d\u1e3e\3\2\2\2\u1e3e\u1e3f\3\2\2\2\u1e3f\u1e47"+
		"\5\u0424\u0213\2\u1e40\u1e47\7\u012f\2\2\u1e41\u1e43\7\u012f\2\2\u1e42"+
		"\u1e44\7]\2\2\u1e43\u1e42\3\2\2\2\u1e43\u1e44\3\2\2\2\u1e44\u1e45\3\2"+
		"\2\2\u1e45\u1e47\5\u0424\u0213\2\u1e46\u1e21\3\2\2\2\u1e46\u1e23\3\2\2"+
		"\2\u1e46\u1e25\3\2\2\2\u1e46\u1e26\3\2\2\2\u1e46\u1e28\3\2\2\2\u1e46\u1e2d"+
		"\3\2\2\2\u1e46\u1e2f\3\2\2\2\u1e46\u1e31\3\2\2\2\u1e46\u1e33\3\2\2\2\u1e46"+
		"\u1e35\3\2\2\2\u1e46\u1e38\3\2\2\2\u1e46\u1e3b\3\2\2\2\u1e46\u1e40\3\2"+
		"\2\2\u1e46\u1e41\3\2\2\2\u1e47\u0435\3\2\2\2\u1e48\u1e49\7#\2\2\u1e49"+
		"\u1e4a\5,\27\2\u1e4a\u1e4b\7$\2\2\u1e4b\u0437\3\2\2\2\u1e4c\u1e50\7\u00e3"+
		"\2\2\u1e4d\u1e4e\7\u0086\2\2\u1e4e\u1e50\7\u00a4\2\2\u1e4f\u1e4c\3\2\2"+
		"\2\u1e4f\u1e4d\3\2\2\2\u1e50\u0439\3\2\2\2\u1e51\u1e52\7\u00e9\2\2\u1e52"+
		"\u1e53\7\u0114\2\2\u1e53\u043b\3\2\2\2\u1e54\u1e55\7n\2\2\u1e55\u1e56"+
		"\7O\2\2\u1e56\u1e57\7\u013b\2\2\u1e57\u1e58\5\u02e4\u0173\2\u1e58\u043d"+
		"\3\2\2\2\u1e59\u1e5a\7#\2\2\u1e5a\u1e5b\5\u0440\u0221\2\u1e5b\u1e5c\7"+
		"$\2\2\u1e5c\u043f\3\2\2\2\u1e5d\u1e62\5\u0442\u0222\2\u1e5e\u1e5f\7)\2"+
		"\2\u1e5f\u1e61\5\u0442\u0222\2\u1e60\u1e5e\3\2\2\2\u1e61\u1e64\3\2\2\2"+
		"\u1e62\u1e60\3\2\2\2\u1e62\u1e63\3\2\2\2\u1e63\u0441\3\2\2\2\u1e64\u1e62"+
		"\3\2\2\2\u1e65\u1e66\5\u0444\u0223\2\u1e66\u1e67\7\33\2\2\u1e67\u1e68"+
		"\5\u03fe\u0200\2\u1e68\u1e6b\3\2\2\2\u1e69\u1e6b\5\u0444\u0223\2\u1e6a"+
		"\u1e65\3\2\2\2\u1e6a\u1e69\3\2\2\2\u1e6b\u0443\3\2\2\2\u1e6c\u1e72\5\u02d2"+
		"\u016a\2\u1e6d\u1e72\5\u02d8\u016d\2\u1e6e\u1e72\5\u0416\u020c\2\u1e6f"+
		"\u1e72\5\u02da\u016e\2\u1e70\u1e72\5\u02cc\u0167\2\u1e71\u1e6c\3\2\2\2"+
		"\u1e71\u1e6d\3\2\2\2\u1e71\u1e6e\3\2\2\2\u1e71\u1e6f\3\2\2\2\u1e71\u1e70"+
		"\3\2\2\2\u1e72\u0445\3\2\2\2\u1e73\u1e7c\5\u044a\u0226\2\u1e74\u1e7c\5"+
		"\u0448\u0225\2\u1e75\u1e76\5\u044a\u0226\2\u1e76\u1e77\5\u0448\u0225\2"+
		"\u1e77\u1e7c\3\2\2\2\u1e78\u1e79\5\u0448\u0225\2\u1e79\u1e7a\5\u044a\u0226"+
		"\2\u1e7a\u1e7c\3\2\2\2\u1e7b\u1e73\3\2\2\2\u1e7b\u1e74\3\2\2\2\u1e7b\u1e75"+
		"\3\2\2\2\u1e7b\u1e78\3\2\2\2\u1e7c\u0447\3\2\2\2\u1e7d\u1e7e\7q\2\2\u1e7e"+
		"\u1e7f\7C\2\2\u1e7f\u1e80\5\u044c\u0227\2\u1e80\u0449\3\2\2\2\u1e81\u1e82"+
		"\7q\2\2\u1e82\u1e83\7B\2\2\u1e83\u1e84\5\u044c\u0227\2\u1e84\u044b\3\2"+
		"\2\2\u1e85\u1e86\7\u00e9\2\2\u1e86\u1e8e\7\u00f3\2\2\u1e87\u1e8e\7\u0130"+
		"\2\2\u1e88\u1e8e\7\u00e4\2\2\u1e89\u1e8a\7L\2\2\u1e8a\u1e8e\7{\2\2\u1e8b"+
		"\u1e8c\7L\2\2\u1e8c\u1e8e\7\u00a4\2\2\u1e8d\u1e85\3\2\2\2\u1e8d\u1e87"+
		"\3\2\2\2\u1e8d\u1e88\3\2\2\2\u1e8d\u1e89\3\2\2\2\u1e8d\u1e8b\3\2\2\2\u1e8e"+
		"\u044d\3\2\2\2\u1e8f\u1e90\7\u011d\2\2\u1e90\u1e96\7h\2\2\u1e91\u1e92"+
		"\7\u011d\2\2\u1e92\u1e96\7\u0128\2\2\u1e93\u1e94\7\u011d\2\2\u1e94\u1e96"+
		"\7\u0138\2\2\u1e95\u1e8f\3\2\2\2\u1e95\u1e91\3\2\2\2\u1e95\u1e93\3\2\2"+
		"\2\u1e96\u044f\3\2\2\2\u1e97\u1e98\7\u01fd\2\2\u1e98\u1e99\7#\2\2\u1e99"+
		"\u1e9a\5\u0452\u022a\2\u1e9a\u1e9b\7$\2\2\u1e9b\u0451\3\2\2\2\u1e9c\u1ea1"+
		"\5\u013e\u00a0\2\u1e9d\u1e9e\7)\2\2\u1e9e\u1ea0\5\u013e\u00a0\2\u1e9f"+
		"\u1e9d\3\2\2\2\u1ea0\u1ea3\3\2\2\2\u1ea1\u1e9f\3\2\2\2\u1ea1\u1ea2\3\2"+
		"\2\2\u1ea2\u0453\3\2\2\2\u1ea3\u1ea1\3\2\2\2\u1ea4\u1eab\7\u0120\2\2\u1ea5"+
		"\u1eab\7h\2\2\u1ea6\u1eab\7\u00a4\2\2\u1ea7\u1ea8\7n\2\2\u1ea8\u1ea9\7"+
		"O\2\2\u1ea9\u1eab\5\u02e4\u0173\2\u1eaa\u1ea4\3\2\2\2\u1eaa\u1ea5\3\2"+
		"\2\2\u1eaa\u1ea6\3\2\2\2\u1eaa\u1ea7\3\2\2\2\u1eab\u0455\3\2\2\2\u1eac"+
		"\u1ead\7#\2\2\u1ead\u1eae\5\u036c\u01b7\2\u1eae\u1eaf\7$\2\2\u1eaf\u1ec3"+
		"\3\2\2\2\u1eb0\u1eb1\7#\2\2\u1eb1\u1eb2\5\u036c\u01b7\2\u1eb2\u1eb3\7"+
		")\2\2\u1eb3\u1eb4\5\u036c\u01b7\2\u1eb4\u1eb5\7$\2\2\u1eb5\u1ec3\3\2\2"+
		"\2\u1eb6\u1eb7\7#\2\2\u1eb7\u1eb8\7\u01a4\2\2\u1eb8\u1eb9\7)\2\2\u1eb9"+
		"\u1eba\5\u036c\u01b7\2\u1eba\u1ebb\7$\2\2\u1ebb\u1ec3\3\2\2\2\u1ebc\u1ebd"+
		"\7#\2\2\u1ebd\u1ebe\5\u036c\u01b7\2\u1ebe\u1ebf\7)\2\2\u1ebf\u1ec0\7\u01a4"+
		"\2\2\u1ec0\u1ec1\7$\2\2\u1ec1\u1ec3\3\2\2\2\u1ec2\u1eac\3\2\2\2\u1ec2"+
		"\u1eb0\3\2\2\2\u1ec2\u1eb6\3\2\2\2\u1ec2\u1ebc\3\2\2\2\u1ec3\u0457\3\2"+
		"\2\2\u1ec4\u1ec5\5\u045a\u022e\2\u1ec5\u1ec6\5\u033e\u01a0\2\u1ec6\u1ec7"+
		"\5\u0400\u0201\2\u1ec7\u1ed4\3\2\2\2\u1ec8\u1ec9\5\u033e\u01a0\2\u1ec9"+
		"\u1eca\5\u045a\u022e\2\u1eca\u1ecb\5\u0400\u0201\2\u1ecb\u1ed4\3\2\2\2"+
		"\u1ecc\u1ecd\5\u033e\u01a0\2\u1ecd\u1ece\5\u0400\u0201\2\u1ece\u1ed4\3"+
		"\2\2\2\u1ecf\u1ed0\5\u045a\u022e\2\u1ed0\u1ed1\5\u0400\u0201\2\u1ed1\u1ed4"+
		"\3\2\2\2\u1ed2\u1ed4\5\u0400\u0201\2\u1ed3\u1ec4\3\2\2\2\u1ed3\u1ec8\3"+
		"\2\2\2\u1ed3\u1ecc\3\2\2\2\u1ed3\u1ecf\3\2\2\2\u1ed3\u1ed2\3\2\2\2\u1ed4"+
		"\u0459\3\2\2\2\u1ed5\u1edc\7\u0080\2\2\u1ed6\u1edc\7\u022c\2\2\u1ed7\u1edc"+
		"\7\u022d\2\2\u1ed8\u1ed9\7\u0080\2\2\u1ed9\u1edc\7\u022c\2\2\u1eda\u1edc"+
		"\7\u0198\2\2\u1edb\u1ed5\3\2\2\2\u1edb\u1ed6\3\2\2\2\u1edb\u1ed7\3\2\2"+
		"\2\u1edb\u1ed8\3\2\2\2\u1edb\u1eda\3\2\2\2\u1edc\u045b\3\2\2\2\u1edd\u1ee2"+
		"\5\u0458\u022d\2\u1ede\u1edf\7)\2\2\u1edf\u1ee1\5\u0458\u022d\2\u1ee0"+
		"\u1ede\3\2\2\2\u1ee1\u1ee4\3\2\2\2\u1ee2\u1ee0\3\2\2\2\u1ee2\u1ee3\3\2"+
		"\2\2\u1ee3\u045d\3\2\2\2\u1ee4\u1ee2\3\2\2\2\u1ee5\u1ee8\5\u0414\u020b"+
		"\2\u1ee6\u1ee8\7\u022f\2\2\u1ee7\u1ee5\3\2\2\2\u1ee7\u1ee6\3\2\2\2\u1ee8"+
		"\u045f\3\2\2\2\u1ee9\u1eea\7\u022f\2\2\u1eea\u0461\3\2\2\2\u1eeb\u1ef0"+
		"\5\u041a\u020e\2\u1eec\u1eed\7)\2\2\u1eed\u1eef\5\u041a\u020e\2\u1eee"+
		"\u1eec\3\2\2\2\u1eef\u1ef2\3\2\2\2\u1ef0\u1eee\3\2\2\2\u1ef0\u1ef1\3\2"+
		"\2\2\u1ef1\u0463\3\2\2\2\u1ef2\u1ef0\3\2\2\2\u1ef3\u1ef4\7L\2\2\u1ef4"+
		"\u1ef7\5\u0466\u0234\2\u1ef5\u1ef7\5\u0472\u023a\2\u1ef6\u1ef3\3\2\2\2"+
		"\u1ef6\u1ef5\3\2\2\2\u1ef7\u0465\3\2\2\2\u1ef8\u1ef9\7\u00f1\2\2\u1ef9"+
		"\u1f01\5\u0468\u0235\2\u1efa\u1efb\7\u0135\2\2\u1efb\u1efc\7\u00f5\2\2"+
		"\u1efc\u1efd\7p\2\2\u1efd\u1efe\7\u00f1\2\2\u1efe\u1f01\5\u0468\u0235"+
		"\2\u1eff\u1f01\5\u046c\u0237\2\u1f00\u1ef8\3\2\2\2\u1f00\u1efa\3\2\2\2"+
		"\u1f00\u1eff\3\2\2\2\u1f01\u0467\3\2\2\2\u1f02\u1f09\5\u046a\u0236\2\u1f03"+
		"\u1f05\7)\2\2\u1f04\u1f03\3\2\2\2\u1f04\u1f05\3\2\2\2\u1f05\u1f06\3\2"+
		"\2\2\u1f06\u1f08\5\u046a\u0236\2\u1f07\u1f04\3\2\2\2\u1f08\u1f0b\3\2\2"+
		"\2\u1f09\u1f07\3\2\2\2\u1f09\u1f0a\3\2\2\2\u1f0a\u0469\3\2\2\2\u1f0b\u1f09"+
		"\3\2\2\2\u1f0c\u1f0d\7\u00e7\2\2\u1f0d\u1f0e\7\u00e8\2\2\u1f0e\u1f17\5"+
		"\u0426\u0214\2\u1f0f\u1f10\7\u00ec\2\2\u1f10\u1f17\7\u0124\2\2\u1f11\u1f12"+
		"\7\u00ec\2\2\u1f12\u1f17\7\u0223\2\2\u1f13\u1f17\7\u0100\2\2\u1f14\u1f15"+
		"\7z\2\2\u1f15\u1f17\7\u0100\2\2\u1f16\u1f0c\3\2\2\2\u1f16\u1f0f\3\2\2"+
		"\2\u1f16\u1f11\3\2\2\2\u1f16\u1f13\3\2\2\2\u1f16\u1f14\3\2\2\2\u1f17\u046b"+
		"\3\2\2\2\u1f18\u1f39\5\u0470\u0239\2\u1f19\u1f1a\5\u041c\u020f\2\u1f1a"+
		"\u1f1b\7e\2\2\u1f1b\u1f1c\7\u00a5\2\2\u1f1c\u1f39\3\2\2\2\u1f1d\u1f1e"+
		"\7\u0097\2\2\u1f1e\u1f1f\7\u0145\2\2\u1f1f\u1f39\5\u0422\u0212\2\u1f20"+
		"\u1f21\7\u01bc\2\2\u1f21\u1f39\7\u022f\2\2\u1f22\u1f23\7H\2\2\u1f23\u1f39"+
		"\7\u022f\2\2\u1f24\u1f26\7\u00b6\2\2\u1f25\u1f27\5\u046e\u0238\2\u1f26"+
		"\u1f25\3\2\2\2\u1f26\u1f27\3\2\2\2\u1f27\u1f39\3\2\2\2\u1f28\u1f29\7\u00ee"+
		"\2\2\u1f29\u1f39\5\u0414\u020b\2\u1f2a\u1f39\7\u022f\2\2\u1f2b\u1f2c\7"+
		"\u0135\2\2\u1f2c\u1f2d\7\u0229\2\2\u1f2d\u1f39\5\u0414\u020b\2\u1f2e\u1f39"+
		"\7\u022f\2\2\u1f2f\u1f30\7\u0135\2\2\u1f30\u1f31\7\u0229\2\2\u1f31\u1f39"+
		"\7\u00a4\2\2\u1f32\u1f33\7\u0167\2\2\u1f33\u1f34\7\u00ea\2\2\u1f34\u1f39"+
		"\5\u03b8\u01dd\2\u1f35\u1f36\7\u00f1\2\2\u1f36\u1f37\7\u01fa\2\2\u1f37"+
		"\u1f39\7\u022f\2\2\u1f38\u1f18\3\2\2\2\u1f38\u1f19\3\2\2\2\u1f38\u1f1d"+
		"\3\2\2\2\u1f38\u1f20\3\2\2\2\u1f38\u1f22\3\2\2\2\u1f38\u1f24\3\2\2\2\u1f38"+
		"\u1f28\3\2\2\2\u1f38\u1f2a\3\2\2\2\u1f38\u1f2b\3\2\2\2\u1f38\u1f2e\3\2"+
		"\2\2\u1f38\u1f2f\3\2\2\2\u1f38\u1f32\3\2\2\2\u1f38\u1f35\3\2\2\2\u1f39"+
		"\u046d\3\2\2\2\u1f3a\u1f3b\t8\2\2\u1f3b\u046f\3\2\2\2\u1f3c\u1f3d\5\u041c"+
		"\u020f\2\u1f3d\u1f40\t9\2\2\u1f3e\u1f41\5\u041e\u0210\2\u1f3f\u1f41\7"+
		"\u00a4\2\2\u1f40\u1f3e\3\2\2\2\u1f40\u1f3f\3\2\2\2\u1f41\u0471\3\2\2\2"+
		"\u1f42\u1f43\7\u012e\2\2\u1f43\u1f44\5\u0474\u023b\2\u1f44\u0473\3\2\2"+
		"\2\u1f45\u1f4e\5\u0476\u023c\2\u1f46\u1f47\7\u0097\2\2\u1f47\u1f4e\7\u0145"+
		"\2\2\u1f48\u1f49\7\u00f1\2\2\u1f49\u1f4a\7\u00e7\2\2\u1f4a\u1f4e\7\u00e8"+
		"\2\2\u1f4b\u1f4c\7\u0135\2\2\u1f4c\u1f4e\7\u0229\2\2\u1f4d\u1f45\3\2\2"+
		"\2\u1f4d\u1f46\3\2\2\2\u1f4d\u1f48\3\2\2\2\u1f4d\u1f4b\3\2\2\2\u1f4e\u0475"+
		"\3\2\2\2\u1f4f\u1f52\5\u041c\u020f\2\u1f50\u1f52\7\u0081\2\2\u1f51\u1f4f"+
		"\3\2\2\2\u1f51\u1f50\3\2\2\2\u1f52\u0477\3\2\2\2\u1f53\u1f58\5\u047a\u023e"+
		"\2\u1f54\u1f55\7)\2\2\u1f55\u1f57\5\u047a\u023e\2\u1f56\u1f54\3\2\2\2"+
		"\u1f57\u1f5a\3\2\2\2\u1f58\u1f56\3\2\2\2\u1f58\u1f59\3\2\2\2\u1f59\u0479"+
		"\3\2\2\2\u1f5a\u1f58\3\2\2\2\u1f5b\u1f67\5\u034a\u01a6\2\u1f5c\u1f5d\5"+
		"\u034a\u01a6\2\u1f5d\u1f5e\7\24\2\2\u1f5e\u1f67\3\2\2\2\u1f5f\u1f60\7"+
		"\u0124\2\2\u1f60\u1f67\5\u034a\u01a6\2\u1f61\u1f62\7\u0124\2\2\u1f62\u1f63"+
		"\7#\2\2\u1f63\u1f64\5\u034a\u01a6\2\u1f64\u1f65\7$\2\2\u1f65\u1f67\3\2"+
		"\2\2\u1f66\u1f5b\3\2\2\2\u1f66\u1f5c\3\2\2\2\u1f66\u1f5f\3\2\2\2\u1f66"+
		"\u1f61\3\2\2\2\u1f67\u047b\3\2\2\2\u1f68\u1f69\7\u01bb\2\2\u1f69\u1f6a"+
		"\7q\2\2\u1f6a\u1f6b\7{\2\2\u1f6b\u1f8c\7\u01ca\2\2\u1f6c\u1f6d\7\u0210"+
		"\2\2\u1f6d\u1f6e\7{\2\2\u1f6e\u1f6f\7q\2\2\u1f6f\u1f70\7{\2\2\u1f70\u1f8c"+
		"\7\u01ca\2\2\u1f71\u1f8c\7\u0224\2\2\u1f72\u1f8c\7\u01e1\2\2\u1f73\u1f8c"+
		"\7\u0216\2\2\u1f74\u1f8c\7\u0221\2\2\u1f75\u1f76\7\u0108\2\2\u1f76\u1f77"+
		"\7\u0133\2\2\u1f77\u1f8c\7\u00ac\2\2\u1f78\u1f79\7\u0108\2\2\u1f79\u1f7a"+
		"\7\u0133\2\2\u1f7a\u1f8c\7\u01ff\2\2\u1f7b\u1f7c\7\u0133\2\2\u1f7c\u1f8c"+
		"\7\u00ac\2\2\u1f7d\u1f7e\7\u0133\2\2\u1f7e\u1f8c\7\u01ff\2\2\u1f7f\u1f8c"+
		"\7\u01cd\2\2\u1f80\u1f81\7z\2\2\u1f81\u1f8c\7\u01cd\2\2\u1f82\u1f83\7"+
		"\u01b9\2\2\u1f83\u1f8c\5\u0424\u0213\2\u1f84\u1f85\7\u00ef\2\2\u1f85\u1f8c"+
		"\5\u0424\u0213\2\u1f86\u1f87\7\u0215\2\2\u1f87\u1f8c\5\u03cc\u01e7\2\u1f88"+
		"\u1f8c\5\u047e\u0240\2\u1f89\u1f8a\7\u01cc\2\2\u1f8a\u1f8c\5\u034c\u01a7"+
		"\2\u1f8b\u1f68\3\2\2\2\u1f8b\u1f6c\3\2\2\2\u1f8b\u1f71\3\2\2\2\u1f8b\u1f72"+
		"\3\2\2\2\u1f8b\u1f73\3\2\2\2\u1f8b\u1f74\3\2\2\2\u1f8b\u1f75\3\2\2\2\u1f8b"+
		"\u1f78\3\2\2\2\u1f8b\u1f7b\3\2\2\2\u1f8b\u1f7d\3\2\2\2\u1f8b\u1f7f\3\2"+
		"\2\2\u1f8b\u1f80\3\2\2\2\u1f8b\u1f82\3\2\2\2\u1f8b\u1f84\3\2\2\2\u1f8b"+
		"\u1f86\3\2\2\2\u1f8b\u1f88\3\2\2\2\u1f8b\u1f89\3\2\2\2\u1f8c\u047d\3\2"+
		"\2\2\u1f8d\u1f8e\7L\2\2\u1f8e\u1f91\5\u046c\u0237\2\u1f8f\u1f91\5\u0472"+
		"\u023a\2\u1f90\u1f8d\3\2\2\2\u1f90\u1f8f\3\2\2\2\u1f91\u047f\3\2\2\2\u1f92"+
		"\u1f93\t:\2\2\u1f93\u0481\3\2\2\2\u1f94\u1f95\t;\2\2\u1f95\u0483\3\2\2"+
		"\2\u1f96\u1f9b\5\u036c\u01b7\2\u1f97\u1f98\7)\2\2\u1f98\u1f9a\5\u036c"+
		"\u01b7\2\u1f99\u1f97\3\2\2\2\u1f9a\u1f9d\3\2\2\2\u1f9b\u1f99\3\2\2\2\u1f9b"+
		"\u1f9c\3\2\2\2\u1f9c\u0485\3\2\2\2\u1f9d\u1f9b\3\2\2\2\u1f9e\u1f9f\7r"+
		"\2\2\u1f9f\u1fa0\7z\2\2\u1fa0\u1fa1\7~\2\2\u1fa1\u0487\3\2\2\2\u1fa2\u1fa3"+
		"\7r\2\2\u1fa3\u1fa4\7~\2\2\u1fa4\u0489\3\2\2\2\u1fa5\u1fa7\5\u04b4\u025b"+
		"\2\u1fa6\u1fa5\3\2\2\2\u1fa6\u1fa7\3\2\2\2\u1fa7\u1fa8\3\2\2\2\u1fa8\u1fa9"+
		"\7A\2\2\u1fa9\u1faa\7[\2\2\u1faa\u1fab\5\u048c\u0247\2\u1fab\u1fad\5\u048e"+
		"\u0248\2\u1fac\u1fae\5\u0496\u024c\2\u1fad\u1fac\3\2\2\2\u1fad\u1fae\3"+
		"\2\2\2\u1fae\u1fb0\3\2\2\2\u1faf\u1fb1\5\u04a4\u0253\2\u1fb0\u1faf\3\2"+
		"\2\2\u1fb0\u1fb1\3\2\2\2\u1fb1\u048b\3\2\2\2\u1fb2\u1fb8\5\u034a\u01a6"+
		"\2\u1fb3\u1fb4\5\u034a\u01a6\2\u1fb4\u1fb5\7p\2\2\u1fb5\u1fb6\5\u034c"+
		"\u01a7\2\u1fb6\u1fb8\3\2\2\2\u1fb7\u1fb2\3\2\2\2\u1fb7\u1fb3\3\2\2\2\u1fb8"+
		"\u048d\3\2\2\2\u1fb9\u1fcf\5\u04ac\u0257\2\u1fba\u1fbb\7\u01a8\2\2\u1fbb"+
		"\u1fbc\5\u0490\u0249\2\u1fbc\u1fbd\7\u00c7\2\2\u1fbd\u1fbe\5\u04ac\u0257"+
		"\2\u1fbe\u1fcf\3\2\2\2\u1fbf\u1fc0\7#\2\2\u1fc0\u1fc1\5\u0492\u024a\2"+
		"\u1fc1\u1fc2\7$\2\2\u1fc2\u1fc3\5\u04ac\u0257\2\u1fc3\u1fcf\3\2\2\2\u1fc4"+
		"\u1fc5\7#\2\2\u1fc5\u1fc6\5\u0492\u024a\2\u1fc6\u1fc7\7$\2\2\u1fc7\u1fc8"+
		"\7\u01a8\2\2\u1fc8\u1fc9\5\u0490\u0249\2\u1fc9\u1fca\7\u00c7\2\2\u1fca"+
		"\u1fcb\5\u04ac\u0257\2\u1fcb\u1fcf\3\2\2\2\u1fcc\u1fcd\7\u00a4\2\2\u1fcd"+
		"\u1fcf\7\\\2\2\u1fce\u1fb9\3\2\2\2\u1fce\u1fba\3\2\2\2\u1fce\u1fbf\3\2"+
		"\2\2\u1fce\u1fc4\3\2\2\2\u1fce\u1fcc\3\2\2\2\u1fcf\u048f\3\2\2\2\u1fd0"+
		"\u1fd1\t<\2\2\u1fd1\u0491\3\2\2\2\u1fd2\u1fd3\b\u024a\1\2\u1fd3\u1fd4"+
		"\5\u0494\u024b\2\u1fd4\u1fda\3\2\2\2\u1fd5\u1fd6\f\3\2\2\u1fd6\u1fd7\7"+
		")\2\2\u1fd7\u1fd9\5\u0494\u024b\2\u1fd8\u1fd5\3\2\2\2\u1fd9\u1fdc\3\2"+
		"\2\2\u1fda\u1fd8\3\2\2\2\u1fda\u1fdb\3\2\2\2\u1fdb\u0493\3\2\2\2\u1fdc"+
		"\u1fda\3\2\2\2\u1fdd\u1fde\5\u034c\u01a7\2\u1fde\u1fdf\5\u0302\u0182\2"+
		"\u1fdf\u0495\3\2\2\2\u1fe0\u1fe1\7q\2\2\u1fe1\u1fe2\7\u01a7\2\2\u1fe2"+
		"\u1fe3\5\u0498\u024d\2\u1fe3\u1fe4\7\u00ab\2\2\u1fe4\u1fe5\7B\2\2\u1fe5"+
		"\u1fe6\7L\2\2\u1fe6\u1fe8\5\u049c\u024f\2\u1fe7\u1fe9\5\u050e\u0288\2"+
		"\u1fe8\u1fe7\3\2\2\2\u1fe8\u1fe9\3\2\2\2\u1fe9\u1ff1\3\2\2\2\u1fea\u1feb"+
		"\7q\2\2\u1feb\u1fec\7\u01a7\2\2\u1fec\u1fed\5\u0498\u024d\2\u1fed\u1fee"+
		"\7\u00ab\2\2\u1fee\u1fef\7\u0120\2\2\u1fef\u1ff1\3\2\2\2\u1ff0\u1fe0\3"+
		"\2\2\2\u1ff0\u1fea\3\2\2\2\u1ff1\u0497\3\2\2\2\u1ff2\u1ff3\7#\2\2\u1ff3"+
		"\u1ff4\5\u03ee\u01f8\2\u1ff4\u1ff6\7$\2\2\u1ff5\u1ff7\5\u050e\u0288\2"+
		"\u1ff6\u1ff5\3\2\2\2\u1ff6\u1ff7\3\2\2\2\u1ff7\u1ffd\3\2\2\2\u1ff8\u1ff9"+
		"\7q\2\2\u1ff9\u1ffa\7P\2\2\u1ffa\u1ffd\5\u02e4\u0173\2\u1ffb\u1ffd\3\2"+
		"\2\2\u1ffc\u1ff2\3\2\2\2\u1ffc\u1ff8\3\2\2\2\u1ffc\u1ffb\3\2\2\2\u1ffd"+
		"\u0499\3\2\2\2\u1ffe\u2000\5\u04b4\u025b\2\u1fff\u1ffe\3\2\2\2\u1fff\u2000"+
		"\3\2\2\2\u2000\u2001\3\2\2\2\u2001\u2002\7B\2\2\u2002\u2003\5\u04a8\u0255"+
		"\2\u2003\u2004\7L\2\2\u2004\u2006\5\u049c\u024f\2\u2005\u2007\5\u0500"+
		"\u0281\2\u2006\u2005\3\2\2\2\u2006\u2007\3\2\2\2\u2007\u2009\3\2\2\2\u2008"+
		"\u200a\5\u0510\u0289\2\u2009\u2008\3\2\2\2\u2009\u200a\3\2\2\2\u200a\u200c"+
		"\3\2\2\2\u200b\u200d\5\u04a4\u0253\2\u200c\u200b\3\2\2\2\u200c\u200d\3"+
		"\2\2\2\u200d\u049b\3\2\2\2\u200e\u200f\b\u024f\1\2\u200f\u2010\5\u049e"+
		"\u0250\2\u2010\u2016\3\2\2\2\u2011\u2012\f\3\2\2\u2012\u2013\7)\2\2\u2013"+
		"\u2015\5\u049e\u0250\2\u2014\u2011\3\2\2\2\u2015\u2018\3\2\2\2\u2016\u2014"+
		"\3\2\2\2\u2016\u2017\3\2\2\2\u2017\u049d\3\2\2\2\u2018\u2016\3\2\2\2\u2019"+
		"\u201a\5\u04a0\u0251\2\u201a\u201b\7\33\2\2\u201b\u201c\5\u02fa\u017e"+
		"\2\u201c\u2024\3\2\2\2\u201d\u201e\7#\2\2\u201e\u201f\5\u04a2\u0252\2"+
		"\u201f\u2020\7$\2\2\u2020\u2021\7\33\2\2\u2021\u2022\5\u02fa\u017e\2\u2022"+
		"\u2024\3\2\2\2\u2023\u2019\3\2\2\2\u2023\u201d\3\2\2\2\u2024\u049f\3\2"+
		"\2\2\u2025\u2026\5\u034c\u01a7\2\u2026\u2027\5\u0302\u0182\2\u2027\u04a1"+
		"\3\2\2\2\u2028\u2029\b\u0252\1\2\u2029\u202a\5\u04a0\u0251\2\u202a\u2030"+
		"\3\2\2\2\u202b\u202c\f\3\2\2\u202c\u202d\7)\2\2\u202d\u202f\5\u04a0\u0251"+
		"\2\u202e\u202b\3\2\2\2\u202f\u2032\3\2\2\2\u2030\u202e\3\2\2\2\u2030\u2031"+
		"\3\2\2\2\u2031\u04a3\3\2\2\2\u2032\u2030\3\2\2\2\u2033\u2034\7\u01a2\2"+
		"\2\u2034\u2035\5\u04e4\u0273\2\u2035\u04a5\3\2\2\2\u2036\u2038\5\u04b4"+
		"\u025b\2\u2037\u2036\3\2\2\2\u2037\u2038\3\2\2\2\u2038\u2039\3\2\2\2\u2039"+
		"\u203a\7C\2\2\u203a\u203b\7e\2\2\u203b\u203d\5\u04a8\u0255\2\u203c\u203e"+
		"\5\u04aa\u0256\2\u203d\u203c\3\2\2\2\u203d\u203e\3\2\2\2\u203e\u2040\3"+
		"\2\2\2\u203f\u2041\5\u0510\u0289\2\u2040\u203f\3\2\2\2\u2040\u2041\3\2"+
		"\2\2\u2041\u2043\3\2\2\2\u2042\u2044\5\u04a4\u0253\2\u2043\u2042\3\2\2"+
		"\2\u2043\u2044\3\2\2\2\u2044\u04a7\3\2\2\2\u2045\u204e\5\u047a\u023e\2"+
		"\u2046\u2047\5\u047a\u023e\2\u2047\u2048\5\u034c\u01a7\2\u2048\u204e\3"+
		"\2\2\2\u2049\u204a\5\u047a\u023e\2\u204a\u204b\7p\2\2\u204b\u204c\5\u034c"+
		"\u01a7\2\u204c\u204e\3\2\2\2\u204d\u2045\3\2\2\2\u204d\u2046\3\2\2\2\u204d"+
		"\u2049\3\2\2\2\u204e\u04a9\3\2\2\2\u204f\u2050\7n\2\2\u2050\u2051\5\u0502"+
		"\u0282\2\u2051\u04ab\3\2\2\2\u2052\u2055\5\u04ae\u0258\2\u2053\u2055\5"+
		"\u0402\u0202\2\u2054\u2052\3\2\2\2\u2054\u2053\3\2\2\2\u2055\u04ad\3\2"+
		"\2\2\u2056\u2084\5\u04b0\u0259\2\u2057\u2058\5\u04b0\u0259\2\u2058\u2059"+
		"\5\u03da\u01ee\2\u2059\u2084\3\2\2\2\u205a\u205c\5\u04b0\u0259\2\u205b"+
		"\u205d\5\u03da\u01ee\2\u205c\u205b\3\2\2\2\u205c\u205d\3\2\2\2\u205d\u205e"+
		"\3\2\2\2\u205e\u2060\5\u04c4\u0263\2\u205f\u2061\5\u04d2\u026a\2\u2060"+
		"\u205f\3\2\2\2\u2060\u2061\3\2\2\2\u2061\u2084\3\2\2\2\u2062\u2064\5\u04b0"+
		"\u0259\2\u2063\u2065\5\u03da\u01ee\2\u2064\u2063\3\2\2\2\u2064\u2065\3"+
		"\2\2\2\u2065\u2066\3\2\2\2\u2066\u2068\5\u04d2\u026a\2\u2067\u2069\5\u04c4"+
		"\u0263\2\u2068\u2067\3\2\2\2\u2068\u2069\3\2\2\2\u2069\u2084\3\2\2\2\u206a"+
		"\u206b\5\u04b4\u025b\2\u206b\u206c\5\u04b0\u0259\2\u206c\u2084\3\2\2\2"+
		"\u206d\u206e\5\u04b4\u025b\2\u206e\u206f\5\u04b0\u0259\2\u206f\u2070\5"+
		"\u03da\u01ee\2\u2070\u2084\3\2\2\2\u2071\u2072\5\u04b4\u025b\2\u2072\u2074"+
		"\5\u04b0\u0259\2\u2073\u2075\5\u03da\u01ee\2\u2074\u2073\3\2\2\2\u2074"+
		"\u2075\3\2\2\2\u2075\u2076\3\2\2\2\u2076\u2078\5\u04c4\u0263\2\u2077\u2079"+
		"\5\u04d2\u026a\2\u2078\u2077\3\2\2\2\u2078\u2079\3\2\2\2\u2079\u2084\3"+
		"\2\2\2\u207a\u207b\5\u04b4\u025b\2\u207b\u207d\5\u04b0\u0259\2\u207c\u207e"+
		"\5\u03da\u01ee\2\u207d\u207c\3\2\2\2\u207d\u207e\3\2\2\2\u207e\u207f\3"+
		"\2\2\2\u207f\u2081\5\u04d2\u026a\2\u2080\u2082\5\u04c4\u0263\2\u2081\u2080"+
		"\3\2\2\2\u2081\u2082\3\2\2\2\u2082\u2084\3\2\2\2\u2083\u2056\3\2\2\2\u2083"+
		"\u2057\3\2\2\2\u2083\u205a\3\2\2\2\u2083\u2062\3\2\2\2\u2083\u206a\3\2"+
		"\2\2\u2083\u206d\3\2\2\2\u2083\u2071\3\2\2\2\u2083\u207a\3\2\2\2\u2084"+
		"\u04af\3\2\2\2\u2085\u2086\b\u0259\1\2\u2086\u2089\5\u04b2\u025a\2\u2087"+
		"\u2089\5\u0402\u0202\2\u2088\u2085\3\2\2\2\u2088\u2087\3\2\2\2\u2089\u209e"+
		"\3\2\2\2\u208a\u208b\f\5\2\2\u208b\u208d\7^\2\2\u208c\u208e\5\u03d8\u01ed"+
		"\2\u208d\u208c\3\2\2\2\u208d\u208e\3\2\2\2\u208e\u208f\3\2\2\2\u208f\u209d"+
		"\5\u04b0\u0259\6\u2090\u2091\f\4\2\2\u2091\u2093\7\u00cc\2\2\u2092\u2094"+
		"\5\u03d8\u01ed\2\u2093\u2092\3\2\2\2\u2093\u2094\3\2\2\2\u2094\u2095\3"+
		"\2\2\2\u2095\u209d\5\u04b0\u0259\5\u2096\u2097\f\3\2\2\u2097\u2099\7\u00cd"+
		"\2\2\u2098\u209a\5\u03d8\u01ed\2\u2099\u2098\3\2\2\2\u2099\u209a\3\2\2"+
		"\2\u209a\u209b\3\2\2\2\u209b\u209d\5\u04b0\u0259\4\u209c\u208a\3\2\2\2"+
		"\u209c\u2090\3\2\2\2\u209c\u2096\3\2\2\2\u209d\u20a0\3\2\2\2\u209e\u209c"+
		"\3\2\2\2\u209e\u209f\3\2\2\2\u209f\u04b1\3\2\2\2\u20a0\u209e\3\2\2\2\u20a1"+
		"\u20a3\7@\2\2\u20a2\u20a4\7\u0081\2\2\u20a3\u20a2\3\2\2\2\u20a3\u20a4"+
		"\3\2\2\2\u20a4\u20a6\3\2\2\2\u20a5\u20a7\5\u04e4\u0273\2\u20a6\u20a5\3"+
		"\2\2\2\u20a6\u20a7\3\2\2\2\u20a7\u20a9\3\2\2\2\u20a8\u20aa\5\u04b6\u025c"+
		"\2\u20a9\u20a8\3\2\2\2\u20a9\u20aa\3\2\2\2\u20aa\u20ac\3\2\2\2\u20ab\u20ad"+
		"\5\u0500\u0281\2\u20ac\u20ab\3\2\2\2\u20ac\u20ad\3\2\2\2\u20ad\u20af\3"+
		"\2\2\2\u20ae\u20b0\5\u050e\u0288\2\u20af\u20ae\3\2\2\2\u20af\u20b0\3\2"+
		"\2\2\u20b0\u20b2\3\2\2\2\u20b1\u20b3\5\u04e8\u0275\2\u20b2\u20b1\3\2\2"+
		"\2\u20b2\u20b3\3\2\2\2\u20b3\u20b5\3\2\2\2\u20b4\u20b6\5\u0512\u028a\2"+
		"\u20b5\u20b4\3\2\2\2\u20b5\u20b6\3\2\2\2\u20b6\u20b8\3\2\2\2\u20b7\u20b9"+
		"\5\u04f6\u027c\2\u20b8\u20b7\3\2\2\2\u20b8\u20b9\3\2\2\2\u20b9\u20d3\3"+
		"\2\2\2\u20ba\u20bb\7@\2\2\u20bb\u20bc\5\u03e2\u01f2\2\u20bc\u20be\5\u04e4"+
		"\u0273\2\u20bd\u20bf\5\u04b6\u025c\2\u20be\u20bd\3\2\2\2\u20be\u20bf\3"+
		"\2\2\2\u20bf\u20c1\3\2\2\2\u20c0\u20c2\5\u0500\u0281\2\u20c1\u20c0\3\2"+
		"\2\2\u20c1\u20c2\3\2\2\2\u20c2\u20c4\3\2\2\2\u20c3\u20c5\5\u050e\u0288"+
		"\2\u20c4\u20c3\3\2\2\2\u20c4\u20c5\3\2\2\2\u20c5\u20c7\3\2\2\2\u20c6\u20c8"+
		"\5\u04e8\u0275\2\u20c7\u20c6\3\2\2\2\u20c7\u20c8\3\2\2\2\u20c8\u20ca\3"+
		"\2\2\2\u20c9\u20cb\5\u0512\u028a\2\u20ca\u20c9\3\2\2\2\u20ca\u20cb\3\2"+
		"\2\2\u20cb\u20cd\3\2\2\2\u20cc\u20ce\5\u04f6\u027c\2\u20cd\u20cc\3\2\2"+
		"\2\u20cd\u20ce\3\2\2\2\u20ce\u20d3\3\2\2\2\u20cf\u20d3\5\u04d4\u026b\2"+
		"\u20d0\u20d1\7M\2\2\u20d1\u20d3\5\u047a\u023e\2\u20d2\u20a1\3\2\2\2\u20d2"+
		"\u20ba\3\2\2\2\u20d2\u20cf\3\2\2\2\u20d2\u20d0\3\2\2\2\u20d3\u04b3\3\2"+
		"\2\2\u20d4\u20d5\7]\2\2\u20d5\u20da\5\u04ba\u025e\2\u20d6\u20d7\7]\2\2"+
		"\u20d7\u20d8\7\u0149\2\2\u20d8\u20da\5\u04ba\u025e\2\u20d9\u20d4\3\2\2"+
		"\2\u20d9\u20d6\3\2\2\2\u20da\u04b5\3\2\2\2\u20db\u20dc\7[\2\2\u20dc\u20dd"+
		"\5\u04b8\u025d\2\u20dd\u04b7\3\2\2\2\u20de\u20e0\7\u013d\2\2\u20df\u20e1"+
		"\7M\2\2\u20e0\u20df\3\2\2\2\u20e0\u20e1\3\2\2\2\u20e1\u20e2\3\2\2\2\u20e2"+
		"\u210b\5\u034a\u01a6\2\u20e3\u20e5\7\u013c\2\2\u20e4\u20e6\7M\2\2\u20e5"+
		"\u20e4\3\2\2\2\u20e5\u20e6\3\2\2\2\u20e6\u20e7\3\2\2\2\u20e7\u210b\5\u034a"+
		"\u01a6\2\u20e8\u20e9\7\u00b0\2\2\u20e9\u20eb\7\u013d\2\2\u20ea\u20ec\7"+
		"M\2\2\u20eb\u20ea\3\2\2\2\u20eb\u20ec\3\2\2\2\u20ec\u20ed\3\2\2\2\u20ed"+
		"\u210b\5\u034a\u01a6\2\u20ee\u20ef\7\u00b0\2\2\u20ef\u20f1\7\u013c\2\2"+
		"\u20f0\u20f2\7M\2\2\u20f1\u20f0\3\2\2\2\u20f1\u20f2\3\2\2\2\u20f2\u20f3"+
		"\3\2\2\2\u20f3\u210b\5\u034a\u01a6\2\u20f4\u20f5\7\u010e\2\2\u20f5\u20f7"+
		"\7\u013d\2\2\u20f6\u20f8\7M\2\2\u20f7\u20f6\3\2\2\2\u20f7\u20f8\3\2\2"+
		"\2\u20f8\u20f9\3\2\2\2\u20f9\u210b\5\u034a\u01a6\2\u20fa\u20fb\7\u010e"+
		"\2\2\u20fb\u20fd\7\u013c\2\2\u20fc\u20fe\7M\2\2\u20fd\u20fc\3\2\2\2\u20fd"+
		"\u20fe\3\2\2\2\u20fe\u20ff\3\2\2\2\u20ff\u210b\5\u034a\u01a6\2\u2100\u2102"+
		"\7\u013f\2\2\u2101\u2103\7M\2\2\u2102\u2101\3\2\2\2\u2102\u2103\3\2\2"+
		"\2\u2103\u2104\3\2\2\2\u2104\u210b\5\u034a\u01a6\2\u2105\u2107\7M\2\2"+
		"\u2106\u2105\3\2\2\2\u2106\u2107\3\2\2\2\u2107\u2108\3\2\2\2\u2108\u210b"+
		"\5\u034a\u01a6\2\u2109\u210b\5\u034a\u01a6\2\u210a\u20de\3\2\2\2\u210a"+
		"\u20e3\3\2\2\2\u210a\u20e8\3\2\2\2\u210a\u20ee\3\2\2\2\u210a\u20f4\3\2"+
		"\2\2\u210a\u20fa\3\2\2\2\u210a\u2100\3\2\2\2\u210a\u2106\3\2\2\2\u210a"+
		"\u2109\3\2\2\2\u210b\u04b9\3\2\2\2\u210c\u210d\b\u025e\1\2\u210d\u210e"+
		"\5\u04bc\u025f\2\u210e\u2114\3\2\2\2\u210f\u2110\f\3\2\2\u2110\u2111\7"+
		")\2\2\u2111\u2113\5\u04bc\u025f\2\u2112\u210f\3\2\2\2\u2113\u2116\3\2"+
		"\2\2\u2114\u2112\3\2\2\2\u2114\u2115\3\2\2\2\u2115\u04bb\3\2\2\2\u2116"+
		"\u2114\3\2\2\2\u2117\u2118\5\u02e4\u0173\2\u2118\u2119\5\u04c0\u0261\2"+
		"\u2119\u211a\7p\2\2\u211a\u211b\5\u04be\u0260\2\u211b\u211c\7#\2\2\u211c"+
		"\u211d\5\u04c2\u0262\2\u211d\u211e\7$\2\2\u211e\u04bd\3\2\2\2\u211f\u2124"+
		"\7\u018c\2\2\u2120\u2121\7z\2\2\u2121\u2124\7\u018c\2\2\u2122\u2124\3"+
		"\2\2\2\u2123\u211f\3\2\2\2\u2123\u2120\3\2\2\2\u2123\u2122\3\2\2\2\u2124"+
		"\u04bf\3\2\2\2\u2125\u2126\7#\2\2\u2126\u2127\5\u03d0\u01e9\2\u2127\u2128"+
		"\7$\2\2\u2128\u212b\3\2\2\2\u2129\u212b\3\2\2\2\u212a\u2125\3\2\2\2\u212a"+
		"\u2129\3\2\2\2\u212b\u04c1\3\2\2\2\u212c\u2131\5\u04ac\u0257\2\u212d\u2131"+
		"\5\u048a\u0246\2\u212e\u2131\5\u049a\u024e\2\u212f\u2131\5\u04a6\u0254"+
		"\2\u2130\u212c\3\2\2\2\u2130\u212d\3\2\2\2\u2130\u212e\3\2\2\2\u2130\u212f"+
		"\3\2\2\2\u2131\u04c3\3\2\2\2\u2132\u2137\5\u04c6\u0264\2\u2133\u2134\7"+
		"u\2\2\u2134\u2135\7\u00ec\2\2\u2135\u2137\7\u0124\2\2\u2136\u2132\3\2"+
		"\2\2\u2136\u2133\3\2\2\2\u2137\u04c5\3\2\2\2\u2138\u2139\b\u0264\1\2\u2139"+
		"\u213a\5\u04c8\u0265\2\u213a\u213f\3\2\2\2\u213b\u213c\f\3\2\2\u213c\u213e"+
		"\5\u04c8\u0265\2\u213d\u213b\3\2\2\2\u213e\u2141\3\2\2\2\u213f\u213d\3"+
		"\2\2\2\u213f\u2140\3\2\2\2\u2140\u04c7\3\2\2\2\u2141\u213f\3\2\2\2\u2142"+
		"\u2144\5\u04cc\u0267\2\u2143\u2145\5\u04ce\u0268\2\u2144\u2143\3\2\2\2"+
		"\u2144\u2145\3\2\2\2\u2145\u2147\3\2\2\2\u2146\u2148\5\u04ca\u0266\2\u2147"+
		"\u2146\3\2\2\2\u2147\u2148\3\2\2\2\u2148\u04c9\3\2\2\2\u2149\u214d\7\u0199"+
		"\2\2\u214a\u214b\7\6\2\2\u214b\u214d\7\u019a\2\2\u214c\u2149\3\2\2\2\u214c"+
		"\u214a\3\2\2\2\u214d\u04cb\3\2\2\2\u214e\u214f\7u\2\2\u214f\u215a\7B\2"+
		"\2\u2150\u2151\7u\2\2\u2151\u2152\7\u00e9\2\2\u2152\u2153\7T\2\2\u2153"+
		"\u215a\7B\2\2\u2154\u2155\7u\2\2\u2155\u215a\7\u018e\2\2\u2156\u2157\7"+
		"u\2\2\u2157\u2158\7T\2\2\u2158\u215a\7\u018e\2\2\u2159\u214e\3\2\2\2\u2159"+
		"\u2150\3\2\2\2\u2159\u2154\3\2\2\2\u2159\u2156\3\2\2\2\u215a\u04cd\3\2"+
		"\2\2\u215b\u215c\7\u0146\2\2\u215c\u215d\5\u04d0\u0269\2\u215d\u04cf\3"+
		"\2\2\2\u215e\u215f\b\u0269\1\2\u215f\u2160\5\u034a\u01a6\2\u2160\u2166"+
		"\3\2\2\2\u2161\u2162\f\3\2\2\u2162\u2163\7)\2\2\u2163\u2165\5\u034a\u01a6"+
		"\2\u2164\u2161\3\2\2\2\u2165\u2168\3\2\2\2\u2166\u2164\3\2\2\2\u2166\u2167"+
		"\3\2\2\2\u2167\u04d1\3\2\2\2\u2168\u2166\3\2\2\2\u2169\u216a\5\u04d6\u026c"+
		"\2\u216a\u216b\5\u04d8\u026d\2\u216b\u2172\3\2\2\2\u216c\u216d\5\u04d8"+
		"\u026d\2\u216d\u216e\5\u04d6\u026c\2\u216e\u2172\3\2\2\2\u216f\u2172\5"+
		"\u04d6\u026c\2\u2170\u2172\5\u04d8\u026d\2\u2171\u2169\3\2\2\2\u2171\u216c"+
		"\3\2\2\2\u2171\u216f\3\2\2\2\u2171\u2170\3\2\2\2\u2172\u04d3\3\2\2\2\u2173"+
		"\u2174\b\u026b\1\2\u2174\u2175\7\\\2\2\u2175\u2176\7#\2\2\u2176\u2177"+
		"\5\u0370\u01b9\2\u2177\u2178\7$\2\2\u2178\u2181\3\2\2\2\u2179\u217a\f"+
		"\3\2\2\u217a\u217b\7)\2\2\u217b\u217c\7#\2\2\u217c\u217d\5\u0370\u01b9"+
		"\2\u217d\u217e\7$\2\2\u217e\u2180\3\2\2\2\u217f\u2179\3\2\2\2\u2180\u2183"+
		"\3\2\2\2\u2181\u217f\3\2\2\2\u2181\u2182\3\2\2\2\u2182\u04d5\3\2\2\2\u2183"+
		"\u2181\3\2\2\2\u2184\u2185\7\u008a\2\2\u2185\u21a4\5\u04da\u026e\2\u2186"+
		"\u2187\7\u008a\2\2\u2187\u2188\5\u04da\u026e\2\u2188\u2189\7)\2\2\u2189"+
		"\u218a\5\u04dc\u026f\2\u218a\u21a4\3\2\2\2\u218b\u218c\7\u00cf\2\2\u218c"+
		"\u218d\5\u04e2\u0272\2\u218d\u218e\5\u04de\u0270\2\u218e\u218f\5\u04e0"+
		"\u0271\2\u218f\u2190\7\u0124\2\2\u2190\u21a4\3\2\2\2\u2191\u2192\7\u00cf"+
		"\2\2\u2192\u2193\5\u04e2\u0272\2\u2193\u2194\5\u04de\u0270\2\u2194\u2195"+
		"\5\u04e0\u0271\2\u2195\u2196\7]\2\2\u2196\u2197\7\u00ce\2\2\u2197\u21a4"+
		"\3\2\2\2\u2198\u2199\7\u00cf\2\2\u2199\u219a\5\u04e2\u0272\2\u219a\u219b"+
		"\5\u04e0\u0271\2\u219b\u219c\7\u0124\2\2\u219c\u21a4\3\2\2\2\u219d\u219e"+
		"\7\u00cf\2\2\u219e\u219f\5\u04e2\u0272\2\u219f\u21a0\5\u04e0\u0271\2\u21a0"+
		"\u21a1\7]\2\2\u21a1\u21a2\7\u00ce\2\2\u21a2\u21a4\3\2\2\2\u21a3\u2184"+
		"\3\2\2\2\u21a3\u2186\3\2\2\2\u21a3\u218b\3\2\2\2\u21a3\u2191\3\2\2\2\u21a3"+
		"\u2198\3\2\2\2\u21a3\u219d\3\2\2\2\u21a4\u04d7\3\2\2\2\u21a5\u21a6\7\u008b"+
		"\2\2\u21a6\u21ac\5\u04dc\u026f\2\u21a7\u21a8\7\u008b\2\2\u21a8\u21a9\5"+
		"\u04de\u0270\2\u21a9\u21aa\5\u04e0\u0271\2\u21aa\u21ac\3\2\2\2\u21ab\u21a5"+
		"\3\2\2\2\u21ab\u21a7\3\2\2\2\u21ac\u04d9\3\2\2\2\u21ad\u21b0\5\u02fa\u017e"+
		"\2\u21ae\u21b0\7\u0081\2\2\u21af\u21ad\3\2\2\2\u21af\u21ae\3\2\2\2\u21b0"+
		"\u04db\3\2\2\2\u21b1\u21b2\5\u02fa\u017e\2\u21b2\u04dd\3\2\2\2\u21b3\u21b9"+
		"\5\u02fe\u0180\2\u21b4\u21b5\7\22\2\2\u21b5\u21b9\7\u0230\2\2\u21b6\u21b7"+
		"\7\23\2\2\u21b7\u21b9\7\u0230\2\2\u21b8\u21b3\3\2\2\2\u21b8\u21b4\3\2"+
		"\2\2\u21b8\u21b6\3\2\2\2\u21b9\u04df\3\2\2\2\u21ba\u21bb\t=\2\2\u21bb"+
		"\u04e1\3\2\2\2\u21bc\u21bd\t>\2\2\u21bd\u04e3\3\2\2\2\u21be\u21bf\b\u0273"+
		"\1\2\u21bf\u21c0\5\u04e6\u0274\2\u21c0\u21c6\3\2\2\2\u21c1\u21c2\f\3\2"+
		"\2\u21c2\u21c3\7)\2\2\u21c3\u21c5\5\u04e6\u0274\2\u21c4\u21c1\3\2\2\2"+
		"\u21c5\u21c8\3\2\2\2\u21c6\u21c4\3\2\2\2\u21c6\u21c7\3\2\2\2\u21c7\u04e5"+
		"\3\2\2\2\u21c8\u21c6\3\2\2\2\u21c9\u21ca\5\u034c\u01a7\2\u21ca\u21cb\7"+
		"\30\2\2\u21cb\u21d6\3\2\2\2\u21cc\u21cd\5\u02fa\u017e\2\u21cd\u21ce\7"+
		"p\2\2\u21ce\u21cf\5\u02d2\u016a\2\u21cf\u21d6\3\2\2\2\u21d0\u21d1\5\u02fa"+
		"\u017e\2\u21d1\u21d2\5\u02d2\u016a\2\u21d2\u21d6\3\2\2\2\u21d3\u21d6\5"+
		"\u02fa\u017e\2\u21d4\u21d6\7\24\2\2\u21d5\u21c9\3\2\2\2\u21d5\u21cc\3"+
		"\2\2\2\u21d5\u21d0\3\2\2\2\u21d5\u21d3\3\2\2\2\u21d5\u21d4\3\2\2\2\u21d6"+
		"\u04e7\3\2\2\2\u21d7\u21d8\7\u0085\2\2\u21d8\u21d9\7\u0086\2\2\u21d9\u21da"+
		"\5\u04ea\u0276\2\u21da\u04e9\3\2\2\2\u21db\u21e0\5\u04ec\u0277\2\u21dc"+
		"\u21dd\7)\2\2\u21dd\u21df\5\u04ec\u0277\2\u21de\u21dc\3\2\2\2\u21df\u21e2"+
		"\3\2\2\2\u21e0\u21de\3\2\2\2\u21e0\u21e1\3\2\2\2\u21e1\u04eb\3\2\2\2\u21e2"+
		"\u21e0\3\2\2\2\u21e3\u21e9\5\u02fa\u017e\2\u21e4\u21e9\5\u04ee\u0278\2"+
		"\u21e5\u21e9\5\u04f2\u027a\2\u21e6\u21e9\5\u04f0\u0279\2\u21e7\u21e9\5"+
		"\u04f4\u027b\2\u21e8\u21e3\3\2\2\2\u21e8\u21e4\3\2\2\2\u21e8\u21e5\3\2"+
		"\2\2\u21e8\u21e6\3\2\2\2\u21e8\u21e7\3\2\2\2\u21e9\u04ed\3\2\2\2\u21ea"+
		"\u21eb\7#\2\2\u21eb\u21ec\7$\2\2\u21ec\u04ef\3\2\2\2\u21ed\u21ee\7\u018f"+
		"\2\2\u21ee\u21ef\7#\2\2\u21ef\u21f0\5\u0370\u01b9\2\u21f0\u21f1\7$\2\2"+
		"\u21f1\u04f1\3\2\2\2\u21f2\u21f3\7\u00d0\2\2\u21f3\u21f4\7#\2\2\u21f4"+
		"\u21f5\5\u0370\u01b9\2\u21f5\u21f6\7$\2\2\u21f6\u04f3\3\2\2\2\u21f7\u21f8"+
		"\7\u00d1\2\2\u21f8\u21f9\7\u00d2\2\2\u21f9\u21fa\7#\2\2\u21fa\u21fb\5"+
		"\u04ea\u0276\2\u21fb\u21fc\7$\2\2\u21fc\u04f5\3\2\2\2\u21fd\u21fe\7\u00d3"+
		"\2\2\u21fe\u21ff\5\u04f8\u027d\2\u21ff\u04f7\3\2\2\2\u2200\u2201\b\u027d"+
		"\1\2\u2201\u2202\5\u04fa\u027e\2\u2202\u2208\3\2\2\2\u2203\u2204\f\3\2"+
		"\2\u2204\u2205\7)\2\2\u2205\u2207\5\u04fa\u027e\2\u2206\u2203\3\2\2\2"+
		"\u2207\u220a\3\2\2\2\u2208\u2206\3\2\2\2\u2208\u2209\3\2\2\2\u2209\u04f9"+
		"\3\2\2\2\u220a\u2208\3\2\2\2\u220b\u220c\5\u034c\u01a7\2\u220c\u220d\7"+
		"p\2\2\u220d\u220e\5\u03e8\u01f5\2\u220e\u04fb\3\2\2\2\u220f\u2210\5\u034c"+
		"\u01a7\2\u2210\u04fd\3\2\2\2\u2211\u2212\7\u00de\2\2\u2212\u2213\7\u00a5"+
		"\2\2\u2213\u221d\7\u00e1\2\2\u2214\u2215\7\u00de\2\2\u2215\u221d\7\u0085"+
		"\2\2\u2216\u2217\7\u00de\2\2\u2217\u221d\7\u00ce\2\2\u2218\u2219\7\u00de"+
		"\2\2\u2219\u221a\7\u00e9\2\2\u221a\u221d\7\u00d4\2\2\u221b\u221d\3\2\2"+
		"\2\u221c\u2211\3\2\2\2\u221c\u2214\3\2\2\2\u221c\u2216\3\2\2\2\u221c\u2218"+
		"\3\2\2\2\u221c\u221b\3\2\2\2\u221d\u04ff\3\2\2\2\u221e\u221f\7e\2\2\u221f"+
		"\u2220\5\u0502\u0282\2\u2220\u0501\3\2\2\2\u2221\u2222\b\u0282\1\2\u2222"+
		"\u2223\5\u0504\u0283\2\u2223\u2229\3\2\2\2\u2224\u2225\f\3\2\2\u2225\u2226"+
		"\7)\2\2\u2226\u2228\5\u0504\u0283\2\u2227\u2224\3\2\2\2\u2228\u222b\3"+
		"\2\2\2\u2229\u2227\3\2\2\2\u2229\u222a\3\2\2\2\u222a\u0503\3\2\2\2\u222b"+
		"\u2229\3\2\2\2\u222c\u222d\b\u0283\1\2\u222d\u222f\5\u047a\u023e\2\u222e"+
		"\u2230\5\u03ce\u01e8\2\u222f\u222e\3\2\2\2\u222f\u2230\3\2\2\2\u2230\u225a"+
		"\3\2\2\2\u2231\u2233\5\u047a\u023e\2\u2232\u2234\5\u03ce\u01e8\2\u2233"+
		"\u2232\3\2\2\2\u2233\u2234\3\2\2\2\u2234\u2235\3\2\2\2\u2235\u2236\5\u03d4"+
		"\u01eb\2\u2236\u225a\3\2\2\2\u2237\u2239\5\u0350\u01a9\2\u2238\u223a\5"+
		"\u03d2\u01ea\2\u2239\u2238\3\2\2\2\u2239\u223a\3\2\2\2\u223a\u225a\3\2"+
		"\2\2\u223b\u223c\7\u01a3\2\2\u223c\u223e\5\u0350\u01a9\2\u223d\u223f\5"+
		"\u03d2\u01ea\2\u223e\u223d\3\2\2\2\u223e\u223f\3\2\2\2\u223f\u225a\3\2"+
		"\2\2\u2240\u2242\5\u0352\u01aa\2\u2241\u2243\5\u03ce\u01e8\2\u2242\u2241"+
		"\3\2\2\2\u2242\u2243\3\2\2\2\u2243\u225a\3\2\2\2\u2244\u2245\7\u01a3\2"+
		"\2\u2245\u2247\5\u0352\u01aa\2\u2246\u2248\5\u03ce\u01e8\2\u2247\u2246"+
		"\3\2\2\2\u2247\u2248\3\2\2\2\u2248\u225a\3\2\2\2\u2249\u224b\5\u0402\u0202"+
		"\2\u224a\u224c\5\u03ce\u01e8\2\u224b\u224a\3\2\2\2\u224b\u224c\3\2\2\2"+
		"\u224c\u225a\3\2\2\2\u224d\u224e\7\u01a3\2\2\u224e\u2250\5\u0402\u0202"+
		"\2\u224f\u2251\5\u03ce\u01e8\2\u2250\u224f\3\2\2\2\u2250\u2251\3\2\2\2"+
		"\u2251\u225a\3\2\2\2\u2252\u2253\7#\2\2\u2253\u2254\5\u0504\u0283\2\u2254"+
		"\u2255\5\u0506\u0284\2\u2255\u2257\7$\2\2\u2256\u2258\5\u03ce\u01e8\2"+
		"\u2257\u2256\3\2\2\2\u2257\u2258\3\2\2\2\u2258\u225a\3\2\2\2\u2259\u222c"+
		"\3\2\2\2\u2259\u2231\3\2\2\2\u2259\u2237\3\2\2\2\u2259\u223b\3\2\2\2\u2259"+
		"\u2240\3\2\2\2\u2259\u2244\3\2\2\2\u2259\u2249\3\2\2\2\u2259\u224d\3\2"+
		"\2\2\u2259\u2252\3\2\2\2\u225a\u225f\3\2\2\2\u225b\u225c\f\4\2\2\u225c"+
		"\u225e\5\u0506\u0284\2\u225d\u225b\3\2\2\2\u225e\u2261\3\2\2\2\u225f\u225d"+
		"\3\2\2\2\u225f\u2260\3\2\2\2\u2260\u0505\3\2\2\2\u2261\u225f\3\2\2\2\u2262"+
		"\u2263\7m\2\2\u2263\u2264\7g\2\2\u2264\u2277\5\u0504\u0283\2\u2265\u2266"+
		"\5\u0508\u0285\2\u2266\u2267\7g\2\2\u2267\u2268\5\u0504\u0283\2\u2268"+
		"\u2269\5\u050c\u0287\2\u2269\u2277\3\2\2\2\u226a\u226b\7g\2\2\u226b\u226c"+
		"\5\u0504\u0283\2\u226c\u226d\5\u050c\u0287\2\u226d\u2277\3\2\2\2\u226e"+
		"\u226f\7f\2\2\u226f\u2270\5\u0508\u0285\2\u2270\u2271\7g\2\2\u2271\u2272"+
		"\5\u0504\u0283\2\u2272\u2277\3\2\2\2\u2273\u2274\7f\2\2\u2274\u2275\7"+
		"g\2\2\u2275\u2277\5\u0504\u0283\2\u2276\u2262\3\2\2\2\u2276\u2265\3\2"+
		"\2\2\u2276\u226a\3\2\2\2\u2276\u226e\3\2\2\2\u2276\u2273\3\2\2\2\u2277"+
		"\u0507\3\2\2\2\u2278\u227a\7h\2\2\u2279\u227b\5\u050a\u0286\2\u227a\u2279"+
		"\3\2\2\2\u227a\u227b\3\2\2\2\u227b\u2286\3\2\2\2\u227c\u227e\7k\2\2\u227d"+
		"\u227f\5\u050a\u0286\2\u227e\u227d\3\2\2\2\u227e\u227f\3\2\2\2\u227f\u2286"+
		"\3\2\2\2\u2280\u2282\7l\2\2\u2281\u2283\5\u050a\u0286\2\u2282\u2281\3"+
		"\2\2\2\u2282\u2283\3\2\2\2\u2283\u2286\3\2\2\2\u2284\u2286\7i\2\2\u2285"+
		"\u2278\3\2\2\2\u2285\u227c\3\2\2\2\u2285\u2280\3\2\2\2\u2285\u2284\3\2"+
		"\2\2\u2286\u0509\3\2\2\2\u2287\u2288\7j\2\2\u2288\u050b\3\2\2\2\u2289"+
		"\u228a\7n\2\2\u228a\u228b\7#\2\2\u228b\u228c\5\u03d0\u01e9\2\u228c\u228d"+
		"\7$\2\2\u228d\u2291\3\2\2\2\u228e\u228f\7q\2\2\u228f\u2291\5\u02fa\u017e"+
		"\2\u2290\u2289\3\2\2\2\u2290\u228e\3\2\2\2\u2291\u050d\3\2\2\2\u2292\u2293"+
		"\7o\2\2\u2293\u2294\5\u02fa\u017e\2\u2294\u050f\3\2\2\2\u2295\u229b\5"+
		"\u050e\u0288\2\u2296\u2297\7o\2\2\u2297\u2298\7\u00a5\2\2\u2298\u2299"+
		"\7\u0146\2\2\u2299\u229b\5\u02f8\u017d\2\u229a\u2295\3\2\2\2\u229a\u2296"+
		"\3\2\2\2\u229b\u0511\3\2\2\2\u229c\u229d\7\u0089\2\2\u229d\u229e\5\u02fa"+
		"\u017e\2\u229e\u0513\3\2\2\2\u229f\u22a0\7\u00ab\2\2\u22a0\u22a1\5\u0516"+
		"\u028c\2\u22a1\u0515\3\2\2\2\u22a2\u22a4\5\u0518\u028d\2\u22a3\u22a2\3"+
		"\2\2\2\u22a4\u22a5\3\2\2\2\u22a5\u22a3\3\2\2\2\u22a5\u22a6\3\2\2\2\u22a6"+
		"\u0517\3\2\2\2\u22a7\u22ab\7\u022f\2\2\u22a8\u22a9\7\u0118\2\2\u22a9\u22ab"+
		"\5\u045e\u0230\2\u22aa\u22a7\3\2\2\2\u22aa\u22a8\3\2\2\2\u22ab\u0519\3"+
		"\2\2\2\u22ac\u22ae\7\u020d\2\2\u22ad\u22af\7M\2\2\u22ae\u22ad\3\2\2\2"+
		"\u22ae\u22af\3\2\2\2\u22af\u22b0\3\2\2\2\u22b0\u22b5\5\u0478\u023d\2\u22b1"+
		"\u22b2\7\u0080\2\2\u22b2\u22b3\5\u051c\u028f\2\u22b3\u22b4\7\u01e9\2\2"+
		"\u22b4\u22b6\3\2\2\2\u22b5\u22b1\3\2\2\2\u22b5\u22b6\3\2\2\2\u22b6\u22b8"+
		"\3\2\2\2\u22b7\u22b9\7\u0199\2\2\u22b8\u22b7\3\2\2\2\u22b8\u22b9\3\2\2"+
		"\2\u22b9\u051b\3\2\2\2\u22ba\u22bb\7\u01ac\2\2\u22bb\u22cb\7\u018e\2\2"+
		"\u22bc\u22bd\7\u00e1\2\2\u22bd\u22cb\7\u018e\2\2\u22be\u22bf\7\u00e1\2"+
		"\2\u22bf\u22cb\7\u01da\2\2\u22c0\u22c1\7\u018e\2\2\u22c1\u22c2\7B\2\2"+
		"\u22c2\u22cb\7\u01da\2\2\u22c3\u22cb\7\u018e\2\2\u22c4\u22c5\7\u018e\2"+
		"\2\u22c5\u22c6\7\u00e1\2\2\u22c6\u22cb\7\u01da\2\2\u22c7\u22cb\7\u01da"+
		"\2\2\u22c8\u22c9\7\u01ac\2\2\u22c9\u22cb\7\u01da\2\2\u22ca\u22ba\3\2\2"+
		"\2\u22ca\u22bc\3\2\2\2\u22ca\u22be\3\2\2\2\u22ca\u22c0\3\2\2\2\u22ca\u22c3"+
		"\3\2\2\2\u22ca\u22c4\3\2\2\2\u22ca\u22c7\3\2\2\2\u22ca\u22c8\3\2\2\2\u22cb"+
		"\u051d\3\2\2\2\u22cc\u22cd\7\u01be\2\2\u22cd\u051f\3\2\2\2\u22ce\u22d0"+
		"\7\u01b8\2\2\u22cf\u22d1\7\u00dc\2\2\u22d0\u22cf\3\2\2\2\u22d0\u22d1\3"+
		"\2\2\2\u22d1\u22d2\3\2\2\2\u22d2\u22d7\5\u034a\u01a6\2\u22d3\u22d4\7#"+
		"\2\2\u22d4\u22d5\5,\27\2\u22d5\u22d6\7$\2\2\u22d6\u22d8\3\2\2\2\u22d7"+
		"\u22d3\3\2\2\2\u22d7\u22d8\3\2\2\2\u22d8\u22d9\3\2\2\2\u22d9\u22db\t\35"+
		"\2\2\u22da\u22dc\7\u01f0\2\2\u22db\u22da\3\2\2\2\u22db\u22dc\3\2\2\2\u22dc"+
		"\u22dd\3\2\2\2\u22dd\u22df\t?\2\2\u22de\u22e0\5\u0532\u029a\2\u22df\u22de"+
		"\3\2\2\2\u22df\u22e0\3\2\2\2\u22e0\u22e2\3\2\2\2\u22e1\u22e3\7]\2\2\u22e2"+
		"\u22e1\3\2\2\2\u22e2\u22e3\3\2\2\2\u22e3\u22e4\3\2\2\2\u22e4\u22e6\5\u0522"+
		"\u0292\2\u22e5\u22e7\5\u050e\u0288\2\u22e6\u22e5\3\2\2\2\u22e6\u22e7\3"+
		"\2\2\2\u22e7\u22f7\3\2\2\2\u22e8\u22e9\7\u01b8\2\2\u22e9\u22ea\7#\2\2"+
		"\u22ea\u22eb\5\u04c2\u0262\2\u22eb\u22ec\7$\2\2\u22ec\u22ee\7v\2\2\u22ed"+
		"\u22ef\7\u01f0\2\2\u22ee\u22ed\3\2\2\2\u22ee\u22ef\3\2\2\2\u22ef\u22f0"+
		"\3\2\2\2\u22f0\u22f2\t?\2\2\u22f1\u22f3\7]\2\2\u22f2\u22f1\3\2\2\2\u22f2"+
		"\u22f3\3\2\2\2\u22f3\u22f4\3\2\2\2\u22f4\u22f5\5\u0522\u0292\2\u22f5\u22f7"+
		"\3\2\2\2\u22f6\u22ce\3\2\2\2\u22f6\u22e8\3\2\2\2\u22f7\u0521\3\2\2\2\u22f8"+
		"\u22fe\5\u052e\u0298\2\u22f9\u22fa\7#\2\2\u22fa\u22fb\5\u0524\u0293\2"+
		"\u22fb\u22fc\7$\2\2\u22fc\u22fe\3\2\2\2\u22fd\u22f8\3\2\2\2\u22fd\u22f9"+
		"\3\2\2\2\u22fe\u0523\3\2\2\2\u22ff\u2304\5\u0526\u0294\2\u2300\u2301\7"+
		")\2\2\u2301\u2303\5\u0526\u0294\2\u2302\u2300\3\2\2\2\u2303\u2306\3\2"+
		"\2\2\u2304\u2302\3\2\2\2\u2304\u2305\3\2\2\2\u2305\u0525\3\2\2\2\u2306"+
		"\u2304\3\2\2\2\u2307\u2308\5\u0444\u0223\2\u2308\u2309\5\u0528\u0295\2"+
		"\u2309\u0527\3\2\2\2\u230a\u2312\5\u0412\u020a\2\u230b\u2312\5\u0424\u0213"+
		"\2\u230c\u2312\7\24\2\2\u230d\u230e\7#\2\2\u230e\u230f\5\u052a\u0296\2"+
		"\u230f\u2310\7$\2\2\u2310\u2312\3\2\2\2\u2311\u230a\3\2\2\2\u2311\u230b"+
		"\3\2\2\2\u2311\u230c\3\2\2\2\u2311\u230d\3\2\2\2\u2312\u0529\3\2\2\2\u2313"+
		"\u2318\5\u052c\u0297\2\u2314\u2315\7)\2\2\u2315\u2317\5\u052c\u0297\2"+
		"\u2316\u2314\3\2\2\2\u2317\u231a\3\2\2\2\u2318\u2316\3\2\2\2\u2318\u2319"+
		"\3\2\2\2\u2319\u052b\3\2\2\2\u231a\u2318\3\2\2\2\u231b\u231c\5\u0412\u020a"+
		"\2\u231c\u052d\3\2\2\2\u231d\u231f\5\u0530\u0299\2\u231e\u231d\3\2\2\2"+
		"\u231f\u2322\3\2\2\2\u2320\u231e\3\2\2\2\u2320\u2321\3\2\2\2\u2321\u052f"+
		"\3\2\2\2\u2322\u2320\3\2\2\2\u2323\u234b\7\u00dc\2\2\u2324\u234b\7\u0228"+
		"\2\2\u2325\u2327\7\u01d1\2\2\u2326\u2328\7p\2\2\u2327\u2326\3\2\2\2\u2327"+
		"\u2328\3\2\2\2\u2328\u2329\3\2\2\2\u2329\u234b\7\u022f\2\2\u232a\u232c"+
		"\7{\2\2\u232b\u232d\7p\2\2\u232c\u232b\3\2\2\2\u232c\u232d\3\2\2\2\u232d"+
		"\u232e\3\2\2\2\u232e\u234b\7\u022f\2\2\u232f\u234b\7\u01ba\2\2\u2330\u234b"+
		"\7\u01e0\2\2\u2331\u2333\7\u01f7\2\2\u2332\u2334\7p\2\2\u2333\u2332\3"+
		"\2\2\2\u2333\u2334\3\2\2\2\u2334\u2335\3\2\2\2\u2335\u234b\7\u022f\2\2"+
		"\u2336\u2338\7\u00dd\2\2\u2337\u2339\7p\2\2\u2338\u2337\3\2\2\2\u2338"+
		"\u2339\3\2\2\2\u2339\u233a\3\2\2\2\u233a\u234b\7\u022f\2\2\u233b\u233c"+
		"\7\u010d\2\2\u233c\u233d\7\u01f7\2\2\u233d\u234b\5,\27\2\u233e\u233f\7"+
		"\u010d\2\2\u233f\u2340\7\u01f7\2\2\u2340\u234b\7\24\2\2\u2341\u2342\7"+
		"\u010d\2\2\u2342\u2343\7z\2\2\u2343\u2344\7{\2\2\u2344\u234b\5,\27\2\u2345"+
		"\u2346\7\u010d\2\2\u2346\u2347\7{\2\2\u2347\u234b\5,\27\2\u2348\u2349"+
		"\7\u01cf\2\2\u2349\u234b\7\u022f\2\2\u234a\u2323\3\2\2\2\u234a\u2324\3"+
		"\2\2\2\u234a\u2325\3\2\2\2\u234a\u232a\3\2\2\2\u234a\u232f\3\2\2\2\u234a"+
		"\u2330\3\2\2\2\u234a\u2331\3\2\2\2\u234a\u2336\3\2\2\2\u234a\u233b\3\2"+
		"\2\2\u234a\u233e\3\2\2\2\u234a\u2341\3\2\2\2\u234a\u2345\3\2\2\2\u234a"+
		"\u2348\3\2\2\2\u234b\u0531\3\2\2\2\u234c\u234e\7n\2\2\u234d\u234c\3\2"+
		"\2\2\u234d\u234e\3\2\2\2\u234e\u234f\3\2\2\2\u234f\u2350\7\u01de\2\2\u2350"+
		"\u2351\7\u022f\2\2\u2351\u0533\3\2\2\2\u2352\u2353\7\u00cf\2\2\u2353\u2354"+
		"\5\u0536\u029c\2\u2354\u0535\3\2\2\2\u2355\u23aa\5\u02f8\u017d\2\u2356"+
		"\u2357\t@\2\2\u2357\u23aa\5\u02f8\u017d\2\u2358\u235a\7\u00b3\2\2\u2359"+
		"\u235b\t@\2\2\u235a\u2359\3\2\2\2\u235a\u235b\3\2\2\2\u235b\u235c\3\2"+
		"\2\2\u235c\u23aa\5\u02f8\u017d\2\u235d\u235f\7\u01f4\2\2\u235e\u2360\t"+
		"@\2\2\u235f\u235e\3\2\2\2\u235f\u2360\3\2\2\2\u2360\u2361\3\2\2\2\u2361"+
		"\u23aa\5\u02f8\u017d\2\u2362\u2364\7\u010b\2\2\u2363\u2365\t@\2\2\u2364"+
		"\u2363\3\2\2\2\u2364\u2365\3\2\2\2\u2365\u2366\3\2\2\2\u2366\u23aa\5\u02f8"+
		"\u017d\2\u2367\u2369\7\u011a\2\2\u2368\u236a\t@\2\2\u2369\u2368\3\2\2"+
		"\2\u2369\u236a\3\2\2\2\u236a\u236b\3\2\2\2\u236b\u23aa\5\u02f8\u017d\2"+
		"\u236c\u236d\7\u01ab\2\2\u236d\u236f\5\u0410\u0209\2\u236e\u2370\t@\2"+
		"\2\u236f\u236e\3\2\2\2\u236f\u2370\3\2\2\2\u2370\u2371\3\2\2\2\u2371\u2372"+
		"\5\u02f8\u017d\2\u2372\u23aa\3\2\2\2\u2373\u2374\7\u01f6\2\2\u2374\u2376"+
		"\5\u0410\u0209\2\u2375\u2377\t@\2\2\u2376\u2375\3\2\2\2\u2376\u2377\3"+
		"\2\2\2\u2377\u2378\3\2\2\2\u2378\u2379\5\u02f8\u017d\2\u2379\u23aa\3\2"+
		"\2\2\u237a\u237c\5\u0410\u0209\2\u237b\u237d\t@\2\2\u237c\u237b\3\2\2"+
		"\2\u237c\u237d\3\2\2\2\u237d\u237e\3\2\2\2\u237e\u237f\5\u02f8\u017d\2"+
		"\u237f\u23aa\3\2\2\2\u2380\u2382\7\u0081\2\2\u2381\u2383\t@\2\2\u2382"+
		"\u2381\3\2\2\2\u2382\u2383\3\2\2\2\u2383\u2384\3\2\2\2\u2384\u23aa\5\u02f8"+
		"\u017d\2\u2385\u2387\7\u01d9\2\2\u2386\u2388\t@\2\2\u2387\u2386\3\2\2"+
		"\2\u2387\u2388\3\2\2\2\u2388\u2389\3\2\2\2\u2389\u23aa\5\u02f8\u017d\2"+
		"\u238a\u238b\7\u01d9\2\2\u238b\u238d\5\u0410\u0209\2\u238c\u238e\t@\2"+
		"\2\u238d\u238c\3\2\2\2\u238d\u238e\3\2\2\2\u238e\u238f\3\2\2\2\u238f\u2390"+
		"\5\u02f8\u017d\2\u2390\u23aa\3\2\2\2\u2391\u2392\7\u01d9\2\2\u2392\u2394"+
		"\7\u0081\2\2\u2393\u2395\t@\2\2\u2394\u2393\3\2\2\2\u2394\u2395\3\2\2"+
		"\2\u2395\u2396\3\2\2\2\u2396\u23aa\5\u02f8\u017d\2\u2397\u2399\7\u01b2"+
		"\2\2\u2398\u239a\t@\2\2\u2399\u2398\3\2\2\2\u2399\u239a\3\2\2\2\u239a"+
		"\u239b\3\2\2\2\u239b\u23aa\5\u02f8\u017d\2\u239c\u239d\7\u01b2\2\2\u239d"+
		"\u239f\5\u0410\u0209\2\u239e\u23a0\t@\2\2\u239f\u239e\3\2\2\2\u239f\u23a0"+
		"\3\2\2\2\u23a0\u23a1\3\2\2\2\u23a1\u23a2\5\u02f8\u017d\2\u23a2\u23aa\3"+
		"\2\2\2\u23a3\u23a4\7\u01b2\2\2\u23a4\u23a6\7\u0081\2\2\u23a5\u23a7\t@"+
		"\2\2\u23a6\u23a5\3\2\2\2\u23a6\u23a7\3\2\2\2\u23a7\u23a8\3\2\2\2\u23a8"+
		"\u23aa\5\u02f8\u017d\2\u23a9\u2355\3\2\2\2\u23a9\u2356\3\2\2\2\u23a9\u2358"+
		"\3\2\2\2\u23a9\u235d\3\2\2\2\u23a9\u2362\3\2\2\2\u23a9\u2367\3\2\2\2\u23a9"+
		"\u236c\3\2\2\2\u23a9\u2373\3\2\2\2\u23a9\u237a\3\2\2\2\u23a9\u2380\3\2"+
		"\2\2\u23a9\u2385\3\2\2\2\u23a9\u238a\3\2\2\2\u23a9\u2391\3\2\2\2\u23a9"+
		"\u2397\3\2\2\2\u23a9\u239c\3\2\2\2\u23a9\u23a3\3\2\2\2\u23aa\u0537\3\2"+
		"\2\2\u0382\u053c\u0546\u054f\u0553\u0557\u055a\u055d\u0560\u0563\u0568"+
		"\u056a\u0570\u0572\u0592\u0599\u05a4\u05a9\u05ae\u05b5\u05bd\u05c9\u05cf"+
		"\u05d7\u05de\u05e1\u05e7\u05ed\u05f1\u05f4\u05f7\u0603\u060d\u0612\u0618"+
		"\u061b\u061e\u0628\u062b\u062e\u0632\u0638\u063c\u0643\u064b\u0651\u0656"+
		"\u0660\u0665\u0672\u0678\u067a\u067f\u0684\u068c\u0690\u0698\u069c\u06a2"+
		"\u06a7\u06aa\u06b0\u06b3\u06b7\u06bf\u06c2\u06cd\u06d0\u06d5\u06da\u06de"+
		"\u06e7\u06f9\u0701\u070b\u0713\u071a\u071d\u0723\u0727\u072c\u0730\u0735"+
		"\u0747\u074d\u0753\u075b\u075e\u0761\u0765\u076b\u077c\u0783\u078b\u0793"+
		"\u079a\u079d\u07a9\u07b7\u07bb\u07c9\u07cf\u07d2\u07d9\u07dc\u07e1\u07e4"+
		"\u07e6\u07ea\u07ee\u07f1\u07f4\u07f7\u07fa\u0804\u080e\u0815\u0827\u082d"+
		"\u0834\u0839\u0840\u0852\u0856\u085d\u086d\u0870\u088a\u0896\u08a9\u08b3"+
		"\u08b5\u08b9\u08bc\u08c2\u08c5\u08c9\u08ce\u08d3\u08d7\u08ed\u08f5\u08fc"+
		"\u0903\u091b\u091f\u0928\u092b\u092f\u0932\u0934\u093b\u0946\u0949\u094d"+
		"\u0951\u0960\u0975\u097e\u0981\u098d\u0992\u0996\u099c\u09a2\u09a6\u09ad"+
		"\u09b2\u09b5\u09ba\u09c1\u09ca\u09d3\u09dc\u09e4\u09ec\u09f4\u09fd\u0a06"+
		"\u0a0a\u0a11\u0a19\u0a22\u0a27\u0a2b\u0a2f\u0a33\u0a37\u0a3c\u0a3f\u0a43"+
		"\u0a57\u0a5d\u0abc\u0ac1\u0acf\u0adb\u0ae5\u0af4\u0af9\u0b01\u0b08\u0b1f"+
		"\u0b2c\u0b33\u0b3a\u0b3d\u0b43\u0b46\u0b54\u0b5c\u0b6e\u0b75\u0b7c\u0b83"+
		"\u0ba4\u0bab\u0bb9\u0bcb\u0bdb\u0be1\u0bec\u0bf5\u0c01\u0c03\u0c0e\u0c12"+
		"\u0c27\u0c2e\u0c33\u0c37\u0c3b\u0c3f\u0c41\u0c46\u0c4e\u0c63\u0c67\u0c87"+
		"\u0c9a\u0cc2\u0d17\u0d21\u0d29\u0d31\u0d37\u0d41\u0d4b\u0d55\u0d5f\u0d71"+
		"\u0d75\u0d82\u0d84\u0d8f\u0d97\u0da3\u0da8\u0daf\u0db7\u0dca\u0dcc\u0dd6"+
		"\u0dde\u0de6\u0dee\u0df3\u0dfd\u0e01\u0e06\u0e0a\u0e10\u0e18\u0e1d\u0e26"+
		"\u0e2d\u0e35\u0e3a\u0e43\u0e49\u0e55\u0e5a\u0e63\u0e69\u0e75\u0e85\u0e97"+
		"\u0ea4\u0eb4\u0ebc\u0ed2\u0ee5\u0eec\u0eef\u0ef6\u0f01\u0f0f\u0f26\u0f2e"+
		"\u0f38\u0f3c\u0f43\u0f55\u0f63\u0f71\u0f7c\u0f82\u0f8d\u0f92\u0fa2\u0faf"+
		"\u0fb4\u0fba\u0fc1\u0fc7\u0fcd\u0fd2\u0fd5\u0fd7\u0fe4\u0fe9\u0ff4\u0ffd"+
		"\u1002\u1006\u100a\u1010\u1088\u1091\u109c\u10a2\u10bb\u10cb\u10d3\u10de"+
		"\u10f0\u10f5\u10fa\u10fc\u1102\u1107\u1110\u1114\u1123\u1130\u113d\u114b"+
		"\u1151\u1155\u115c\u1166\u116e\u1171\u1179\u117e\u1186\u118b\u118e\u1198"+
		"\u119e\u11a0\u11a7\u11ad\u11b9\u11c1\u11d2\u11d9\u11e2\u11ec\u11fb\u11fd"+
		"\u1203\u120c\u1218\u121d\u1220\u1223\u122b\u122e\u1234\u1247\u124d\u1256"+
		"\u125a\u125e\u1265\u126d\u1272\u127d\u1281\u1289\u128e\u1299\u129d\u12a7"+
		"\u12ae\u12b1\u12b5\u12b9\u12c0\u12ca\u12cd\u12d0\u12d7\u12e0\u12ee\u12f5"+
		"\u12ff\u1305\u130c\u1312\u131b\u1325\u132a\u1336\u133a\u133e\u1341\u1345"+
		"\u134a\u134f\u1352\u135d\u136f\u1376\u137c\u1388\u1399\u139e\u13a5\u13ab"+
		"\u13b2\u13b9\u13c8\u13cc\u13d1\u13d5\u13dc\u13e2\u13ea\u13ef\u13f3\u13f8"+
		"\u13fc\u1401\u1405\u140b\u140f\u1414\u1418\u141f\u1423\u1429\u1430\u1434"+
		"\u1439\u143d\u1444\u1449\u144d\u1451\u1457\u145b\u1460\u1464\u146b\u1472"+
		"\u1478\u147e\u1484\u148b\u1490\u1496\u149b\u149f\u14a4\u14a8\u14ad\u14b1"+
		"\u14b6\u14bc\u14c1\u14c5\u14ca\u14ce\u14d3\u14da\u14de\u14e3\u14ec\u14f0"+
		"\u14f5\u14fc\u1501\u1507\u150c\u1510\u1516\u1520\u1524\u152b\u1533\u153d"+
		"\u1548\u154f\u1553\u155d\u1561\u1568\u156e\u1577\u1580\u1584\u158b\u1598"+
		"\u15a2\u15ac\u15b8\u15c1\u15e7\u15ec\u15f0\u15f5\u15f9\u15ff\u1603\u1606"+
		"\u1617\u161e\u1627\u162e\u1632\u163a\u1641\u1648\u1667\u167d\u16b6\u16c0"+
		"\u173c\u173e\u174a\u1776\u1778\u1780\u179a\u17a3\u17ab\u17b8\u17bc\u17bf"+
		"\u17c8\u17cc\u17d0\u17d7\u17e7\u17ef\u17fd\u1801\u1806\u1819\u1821\u182a"+
		"\u182f\u1837\u1845\u1851\u1861\u186b\u187f\u1886\u188e\u189c\u18a3\u18ae"+
		"\u18b7\u18c2\u18cb\u18d4\u18dd\u18e3\u18ee\u18f6\u18fc\u1903\u1907\u190f"+
		"\u1911\u1928\u192f\u193d\u1946\u1951\u1958\u1961\u1965\u1968\u196b\u196e"+
		"\u197e\u19ae\u1a4b\u1a57\u1a74\u1a83\u1a8d\u1a9b\u1a9f\u1aa4\u1aa6\u1ab7"+
		"\u1abb\u1abf\u1ac7\u1ace\u1ad2\u1ad9\u1add\u1ae0\u1ae8\u1aec\u1af7\u1afb"+
		"\u1b01\u1b06\u1b0a\u1b0c\u1b12\u1b1d\u1b26\u1b2a\u1b2e\u1b36\u1b56\u1b60"+
		"\u1b62\u1b6a\u1b75\u1b80\u1b90\u1ba2\u1bae\u1bb6\u1bc7\u1bcd\u1bd6\u1bdd"+
		"\u1be9\u1bf3\u1c00\u1c06\u1c0a\u1c12\u1c22\u1c2c\u1c40\u1c48\u1c5a\u1c61"+
		"\u1c65\u1c68\u1c6a\u1c70\u1c79\u1c81\u1c85\u1c88\u1c8b\u1c8e\u1c9d\u1ca1"+
		"\u1ca5\u1ca8\u1cab\u1cb0\u1cb3\u1cb5\u1cc2\u1cc9\u1cd4\u1ce6\u1cee\u1cfc"+
		"\u1d02\u1d05\u1d08\u1d11\u1d16\u1d19\u1d1b\u1d57\u1d5d\u1d64\u1d6b\u1d72"+
		"\u1d7a\u1d81\u1d87\u1d91\u1d9b\u1da3\u1da8\u1db7\u1dbe\u1dc7\u1dcc\u1dd8"+
		"\u1de1\u1de9\u1df0\u1df8\u1e01\u1e0e\u1e11\u1e14\u1e16\u1e1f\u1e2a\u1e3d"+
		"\u1e43\u1e46\u1e4f\u1e62\u1e6a\u1e71\u1e7b\u1e8d\u1e95\u1ea1\u1eaa\u1ec2"+
		"\u1ed3\u1edb\u1ee2\u1ee7\u1ef0\u1ef6\u1f00\u1f04\u1f09\u1f16\u1f26\u1f38"+
		"\u1f40\u1f4d\u1f51\u1f58\u1f66\u1f8b\u1f90\u1f9b\u1fa6\u1fad\u1fb0\u1fb7"+
		"\u1fce\u1fda\u1fe8\u1ff0\u1ff6\u1ffc\u1fff\u2006\u2009\u200c\u2016\u2023"+
		"\u2030\u2037\u203d\u2040\u2043\u204d\u2054\u205c\u2060\u2064\u2068\u2074"+
		"\u2078\u207d\u2081\u2083\u2088\u208d\u2093\u2099\u209c\u209e\u20a3\u20a6"+
		"\u20a9\u20ac\u20af\u20b2\u20b5\u20b8\u20be\u20c1\u20c4\u20c7\u20ca\u20cd"+
		"\u20d2\u20d9\u20e0\u20e5\u20eb\u20f1\u20f7\u20fd\u2102\u2106\u210a\u2114"+
		"\u2123\u212a\u2130\u2136\u213f\u2144\u2147\u214c\u2159\u2166\u2171\u2181"+
		"\u21a3\u21ab\u21af\u21b8\u21c6\u21d5\u21e0\u21e8\u2208\u221c\u2229\u222f"+
		"\u2233\u2239\u223e\u2242\u2247\u224b\u2250\u2257\u2259\u225f\u2276\u227a"+
		"\u227e\u2282\u2285\u2290\u229a\u22a5\u22aa\u22ae\u22b5\u22b8\u22ca\u22d0"+
		"\u22d7\u22db\u22df\u22e2\u22e6\u22ee\u22f2\u22f6\u22fd\u2304\u2311\u2318"+
		"\u2320\u2327\u232c\u2333\u2338\u234a\u234d\u235a\u235f\u2364\u2369\u236f"+
		"\u2376\u237c\u2382\u2387\u238d\u2394\u2399\u239f\u23a6\u23a9";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}