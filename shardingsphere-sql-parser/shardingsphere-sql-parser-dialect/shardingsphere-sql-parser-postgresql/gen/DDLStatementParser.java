// Generated from /home/guimy/github/shardingsphere/shardingsphere-sql-parser/shardingsphere-sql-parser-dialect/shardingsphere-sql-parser-postgresql/src/main/antlr4/imports/postgresql/DDLStatement.g4 by ANTLR 4.9.1
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DDLStatementParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.9.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, AND_=5, OR_=6, NOT_=7, TILDE_=8, VERTICAL_BAR_=9, 
		AMPERSAND_=10, SIGNED_LEFT_SHIFT_=11, SIGNED_RIGHT_SHIFT_=12, CARET_=13, 
		MOD_=14, COLON_=15, PLUS_=16, MINUS_=17, ASTERISK_=18, SLASH_=19, BACKSLASH_=20, 
		DOT_=21, DOT_ASTERISK_=22, SAFE_EQ_=23, DEQ_=24, EQ_=25, CQ_=26, NEQ_=27, 
		GT_=28, GTE_=29, LT_=30, LTE_=31, POUND_=32, LP_=33, RP_=34, LBE_=35, 
		RBE_=36, LBT_=37, RBT_=38, COMMA_=39, DQ_=40, SQ_=41, BQ_=42, QUESTION_=43, 
		AT_=44, SEMI_=45, TILDE_TILDE_=46, NOT_TILDE_TILDE_=47, TYPE_CAST_=48, 
		WS=49, SELECT=50, INSERT=51, UPDATE=52, DELETE=53, CREATE=54, ALTER=55, 
		DROP=56, TRUNCATE=57, SCHEMA=58, GRANT=59, REVOKE=60, ADD=61, SET=62, 
		TABLE=63, COLUMN=64, INDEX=65, CONSTRAINT=66, PRIMARY=67, UNIQUE=68, FOREIGN=69, 
		KEY=70, POSITION=71, PRECISION=72, FUNCTION=73, TRIGGER=74, PROCEDURE=75, 
		VIEW=76, INTO=77, VALUES=78, WITH=79, UNION=80, DISTINCT=81, CASE=82, 
		WHEN=83, CAST=84, TRIM=85, SUBSTRING=86, FROM=87, NATURAL=88, JOIN=89, 
		FULL=90, INNER=91, OUTER=92, LEFT=93, RIGHT=94, CROSS=95, USING=96, WHERE=97, 
		AS=98, ON=99, IF=100, ELSE=101, THEN=102, FOR=103, TO=104, AND=105, OR=106, 
		IS=107, NOT=108, NULL=109, TRUE=110, FALSE=111, EXISTS=112, BETWEEN=113, 
		IN=114, ALL=115, ANY=116, LIKE=117, ORDER=118, GROUP=119, BY=120, ASC=121, 
		DESC=122, HAVING=123, LIMIT=124, OFFSET=125, BEGIN=126, COMMIT=127, ROLLBACK=128, 
		SAVEPOINT=129, BOOLEAN=130, DOUBLE=131, CHAR=132, CHARACTER=133, ARRAY=134, 
		INTERVAL=135, DATE=136, TIME=137, TIMESTAMP=138, LOCALTIME=139, LOCALTIMESTAMP=140, 
		YEAR=141, QUARTER=142, MONTH=143, WEEK=144, DAY=145, HOUR=146, MINUTE=147, 
		SECOND=148, MICROSECOND=149, DEFAULT=150, CURRENT=151, ENABLE=152, DISABLE=153, 
		CALL=154, INSTANCE=155, PRESERVE=156, DO=157, DEFINER=158, CURRENT_USER=159, 
		SQL=160, CASCADED=161, LOCAL=162, CLOSE=163, OPEN=164, NEXT=165, NAME=166, 
		COLLATION=167, NAMES=168, INTEGER=169, REAL=170, DECIMAL=171, TYPE=172, 
		SMALLINT=173, BIGINT=174, NUMERIC=175, TEXT=176, REPEATABLE=177, CURRENT_DATE=178, 
		CURRENT_TIME=179, CURRENT_TIMESTAMP=180, NULLIF=181, VARYING=182, NATIONAL=183, 
		NCHAR=184, VALUE=185, BOTH=186, LEADING=187, TRAILING=188, COALESCE=189, 
		INTERSECT=190, EXCEPT=191, TIES=192, FETCH=193, CUBE=194, GROUPING=195, 
		SETS=196, WINDOW=197, OTHERS=198, OVERLAPS=199, SOME=200, AT=201, DEC=202, 
		END=203, FOR_GENERATOR=204, ADMIN=205, BINARY=206, ESCAPE=207, EXCLUDE=208, 
		MOD=209, PARTITION=210, ROW=211, UNKNOWN=212, ALWAYS=213, CASCADE=214, 
		CHECK=215, GENERATED=216, ISOLATION=217, LEVEL=218, NO=219, OPTION=220, 
		PRIVILEGES=221, READ=222, REFERENCES=223, ROLE=224, ROWS=225, START=226, 
		TRANSACTION=227, USER=228, ACTION=229, CACHE=230, CHARACTERISTICS=231, 
		CLUSTER=232, COLLATE=233, COMMENTS=234, CONCURRENTLY=235, CONNECT=236, 
		CONSTRAINTS=237, CYCLE=238, DATA=239, DATABASE=240, DEFAULTS=241, DEFERRABLE=242, 
		DEFERRED=243, DEPENDS=244, DOMAIN=245, EXCLUDING=246, EXECUTE=247, EXTENDED=248, 
		EXTENSION=249, EXTERNAL=250, EXTRACT=251, FILTER=252, FIRST=253, FOLLOWING=254, 
		FORCE=255, GLOBAL=256, IDENTITY=257, IMMEDIATE=258, INCLUDING=259, INCREMENT=260, 
		INDEXES=261, INHERIT=262, INHERITS=263, INITIALLY=264, INCLUDE=265, LANGUAGE=266, 
		LARGE=267, LAST=268, LOGGED=269, MAIN=270, MATCH=271, MAXVALUE=272, MINVALUE=273, 
		NOTHING=274, NULLS=275, OBJECT=276, OIDS=277, ONLY=278, OVER=279, OWNED=280, 
		OWNER=281, PARTIAL=282, PLAIN=283, PRECEDING=284, RANGE=285, RENAME=286, 
		REPLICA=287, RESET=288, RESTART=289, RESTRICT=290, ROUTINE=291, RULE=292, 
		SECURITY=293, SEQUENCE=294, SESSION=295, SESSION_USER=296, SHOW=297, SIMPLE=298, 
		STATISTICS=299, STORAGE=300, TABLESPACE=301, TEMP=302, TEMPORARY=303, 
		UNBOUNDED=304, UNLOGGED=305, USAGE=306, VALID=307, VALIDATE=308, WITHIN=309, 
		WITHOUT=310, ZONE=311, OF=312, UESCAPE=313, GROUPS=314, RECURSIVE=315, 
		INT=316, INT2=317, INT4=318, INT8=319, FLOAT=320, FLOAT4=321, FLOAT8=322, 
		SMALLSERIAL=323, SERIAL=324, BIGSERIAL=325, MONEY=326, VARCHAR=327, BYTEA=328, 
		ENUM=329, POINT=330, LINE=331, LSEG=332, BOX=333, PATH=334, POLYGON=335, 
		CIRCLE=336, CIDR=337, INET=338, MACADDR=339, MACADDR8=340, BIT=341, VARBIT=342, 
		TSVECTOR=343, TSQUERY=344, XML=345, JSON=346, INT4RANGE=347, INT8RANGE=348, 
		NUMRANGE=349, TSRANGE=350, TSTZRANGE=351, DATERANGE=352, TABLESAMPLE=353, 
		ORDINALITY=354, CURRENT_ROLE=355, CURRENT_CATALOG=356, CURRENT_SCHEMA=357, 
		NORMALIZE=358, OVERLAY=359, XMLCONCAT=360, XMLELEMENT=361, XMLEXISTS=362, 
		XMLFOREST=363, XMLPARSE=364, XMLPI=365, XMLROOT=366, XMLSERIALIZE=367, 
		TREAT=368, SETOF=369, NFC=370, NFD=371, NFKC=372, NFKD=373, XMLATTRIBUTES=374, 
		REF=375, PASSING=376, VERSION=377, YES=378, STANDALONE=379, GREATEST=380, 
		LEAST=381, MATERIALIZED=382, OPERATOR=383, SHARE=384, ROLLUP=385, ILIKE=386, 
		SIMILAR=387, ISNULL=388, NOTNULL=389, SYMMETRIC=390, DOCUMENT=391, NORMALIZED=392, 
		ASYMMETRIC=393, VARIADIC=394, NOWAIT=395, LOCKED=396, XMLTABLE=397, COLUMNS=398, 
		CONTENT=399, STRIP=400, WHITESPACE=401, XMLNAMESPACES=402, PLACING=403, 
		RETURNING=404, LATERAL=405, NONE=406, ANALYSE=407, ANALYZE=408, CONFLICT=409, 
		OVERRIDING=410, SYSTEM=411, ABORT=412, ABSOLUTE=413, ACCESS=414, AFTER=415, 
		AGGREGATE=416, ALSO=417, ATTACH=418, ATTRIBUTE=419, BACKWARD=420, BEFORE=421, 
		ASSERTION=422, ASSIGNMENT=423, CONTINUE=424, CONVERSION=425, COPY=426, 
		COST=427, CSV=428, CALLED=429, CATALOG=430, CHAIN=431, CHECKPOINT=432, 
		CLASS=433, CONFIGURATION=434, COMMENT=435, DETACH=436, DICTIONARY=437, 
		EXPRESSION=438, INSENSITIVE=439, DISCARD=440, OFF=441, INSTEAD=442, EXPLAIN=443, 
		INPUT=444, INLINE=445, PARALLEL=446, LEAKPROOF=447, COMMITTED=448, ENCODING=449, 
		IMPLICIT=450, DELIMITER=451, CURSOR=452, EACH=453, EVENT=454, DEALLOCATE=455, 
		CONNECTION=456, DECLARE=457, FAMILY=458, FORWARD=459, EXCLUSIVE=460, FUNCTIONS=461, 
		LOCATION=462, LABEL=463, DELIMITERS=464, HANDLER=465, HEADER=466, IMMUTABLE=467, 
		GRANTED=468, HOLD=469, MAPPING=470, OLD=471, METHOD=472, LOAD=473, LISTEN=474, 
		MODE=475, MOVE=476, PROCEDURAL=477, PARSER=478, PROCEDURES=479, ENCRYPTED=480, 
		PUBLICATION=481, PROGRAM=482, REFERENCING=483, PLANS=484, REINDEX=485, 
		PRIOR=486, PASSWORD=487, RELATIVE=488, QUOTE=489, ROUTINES=490, REPLACE=491, 
		SNAPSHOT=492, REFRESH=493, PREPARE=494, OPTIONS=495, IMPORT=496, INVOKER=497, 
		NEW=498, PREPARED=499, SCROLL=500, SEQUENCES=501, SYSID=502, REASSIGN=503, 
		SERVER=504, SUBSCRIPTION=505, SEARCH=506, SCHEMAS=507, RECHECK=508, POLICY=509, 
		NOTIFY=510, LOCK=511, RELEASE=512, SERIALIZABLE=513, RETURNS=514, STATEMENT=515, 
		STDIN=516, STDOUT=517, TABLES=518, SUPPORT=519, STABLE=520, TEMPLATE=521, 
		UNENCRYPTED=522, VIEWS=523, UNCOMMITTED=524, TRANSFORM=525, UNLISTEN=526, 
		TRUSTED=527, VALIDATOR=528, UNTIL=529, VACUUM=530, VOLATILE=531, STORED=532, 
		WRITE=533, STRICT=534, TYPES=535, WRAPPER=536, WORK=537, FREEZE=538, AUTHORIZATION=539, 
		VERBOSE=540, PARAM=541, OUT=542, INOUT=543, IDENTIFIER_=544, STRING_=545, 
		NUMBER_=546, HEX_DIGIT_=547, BIT_NUM_=548;
	public static final int
		RULE_createTable = 0, RULE_executeParamClause = 1, RULE_partitionBoundSpec = 2, 
		RULE_hashPartbound = 3, RULE_hashPartboundElem = 4, RULE_typedTableElementList = 5, 
		RULE_typedTableElement = 6, RULE_columnOptions = 7, RULE_colQualList = 8, 
		RULE_withData = 9, RULE_tableSpace = 10, RULE_onCommitOption = 11, RULE_withOption = 12, 
		RULE_tableAccessMethodClause = 13, RULE_accessMethod = 14, RULE_createIndex = 15, 
		RULE_include = 16, RULE_indexIncludingParams = 17, RULE_accessMethodClause = 18, 
		RULE_createDatabase = 19, RULE_createView = 20, RULE_columnList = 21, 
		RULE_columnElem = 22, RULE_dropDatabase = 23, RULE_createDatabaseSpecification = 24, 
		RULE_createdbOptName = 25, RULE_alterTable = 26, RULE_alterIndex = 27, 
		RULE_dropTable = 28, RULE_dropTableOpt = 29, RULE_dropIndex = 30, RULE_dropIndexOpt = 31, 
		RULE_truncateTable = 32, RULE_restartSeqs = 33, RULE_createTableSpecification = 34, 
		RULE_tableNotExistClause = 35, RULE_createDefinitionClause = 36, RULE_createDefinition = 37, 
		RULE_columnDefinition = 38, RULE_columnConstraint = 39, RULE_constraintClause = 40, 
		RULE_columnConstraintOption = 41, RULE_checkOption = 42, RULE_defaultExpr = 43, 
		RULE_sequenceOptions = 44, RULE_sequenceOption = 45, RULE_indexParameters = 46, 
		RULE_action = 47, RULE_constraintOptionalParam = 48, RULE_likeOption = 49, 
		RULE_tableConstraint = 50, RULE_tableConstraintOption = 51, RULE_exclusionWhereClause = 52, 
		RULE_exclusionConstraintList = 53, RULE_exclusionConstraintElem = 54, 
		RULE_inheritClause = 55, RULE_partitionSpec = 56, RULE_partParams = 57, 
		RULE_partElem = 58, RULE_funcExprWindowless = 59, RULE_partStrategy = 60, 
		RULE_createIndexSpecification = 61, RULE_concurrentlyClause = 62, RULE_indexNotExistClause = 63, 
		RULE_onlyClause = 64, RULE_tableExistClause = 65, RULE_asteriskClause = 66, 
		RULE_alterDefinitionClause = 67, RULE_partitionCmd = 68, RULE_alterIndexDefinitionClause = 69, 
		RULE_indexPartitionCmd = 70, RULE_renameIndexSpecification = 71, RULE_alterIndexDependsOnExtension = 72, 
		RULE_alterIndexSetTableSpace = 73, RULE_tableNamesClause = 74, RULE_tableNameClause = 75, 
		RULE_alterTableActions = 76, RULE_alterTableAction = 77, RULE_addColumnSpecification = 78, 
		RULE_dropColumnSpecification = 79, RULE_columnExistClause = 80, RULE_modifyColumnSpecification = 81, 
		RULE_modifyColumn = 82, RULE_alterColumnSetOption = 83, RULE_attributeOptions = 84, 
		RULE_attributeOption = 85, RULE_addConstraintSpecification = 86, RULE_tableConstraintUsingIndex = 87, 
		RULE_storageParameterWithValue = 88, RULE_storageParameter = 89, RULE_renameColumnSpecification = 90, 
		RULE_renameConstraint = 91, RULE_renameTableSpecification = 92, RULE_indexExistClause = 93, 
		RULE_indexNames = 94, RULE_alterDatabase = 95, RULE_alterDatabaseClause = 96, 
		RULE_createdbOptItems = 97, RULE_createdbOptItem = 98, RULE_alterTableCmds = 99, 
		RULE_alterTableCmd = 100, RULE_constraintAttributeSpec = 101, RULE_constraintAttributeElem = 102, 
		RULE_alterGenericOptions = 103, RULE_alterGenericOptionList = 104, RULE_alterGenericOptionElem = 105, 
		RULE_genericOptionName = 106, RULE_dropBehavior = 107, RULE_alterUsing = 108, 
		RULE_setData = 109, RULE_alterIdentityColumnOptionList = 110, RULE_alterIdentityColumnOption = 111, 
		RULE_alterColumnDefault = 112, RULE_alterOperator = 113, RULE_alterOperatorClass = 114, 
		RULE_alterOperatorClassClauses = 115, RULE_alterOperatorFamily = 116, 
		RULE_alterOperatorFamilyClauses = 117, RULE_opclassItemList = 118, RULE_opclassItem = 119, 
		RULE_opclassPurpose = 120, RULE_alterOperatorClauses = 121, RULE_operatorDefList = 122, 
		RULE_operatorDefElem = 123, RULE_operatorDefArg = 124, RULE_operatorWithArgtypes = 125, 
		RULE_alterAggregate = 126, RULE_aggregateSignature = 127, RULE_aggrArgs = 128, 
		RULE_aggrArgsList = 129, RULE_aggrArg = 130, RULE_alterAggregateDefinitionClause = 131, 
		RULE_alterCollation = 132, RULE_alterCollationClause = 133, RULE_alterConversion = 134, 
		RULE_alterConversionClause = 135, RULE_alterDefaultPrivileges = 136, RULE_defACLAction = 137, 
		RULE_grantGrantOption = 138, RULE_granteeList = 139, RULE_grantee = 140, 
		RULE_defaclPrivilegeTarget = 141, RULE_privileges = 142, RULE_privilegeList = 143, 
		RULE_privilege = 144, RULE_defACLOptionList = 145, RULE_defACLOption = 146, 
		RULE_schemaNameList = 147, RULE_alterDomain = 148, RULE_alterDomainClause = 149, 
		RULE_constraintName = 150, RULE_alterEventTrigger = 151, RULE_alterEventTriggerClause = 152, 
		RULE_tiggerName = 153, RULE_alterExtension = 154, RULE_alterExtensionClauses = 155, 
		RULE_functionWithArgtypes = 156, RULE_funcArgs = 157, RULE_aggregateWithArgtypes = 158, 
		RULE_alterExtensionOptList = 159, RULE_alterExtensionOptItem = 160, RULE_alterForeignDataWrapper = 161, 
		RULE_alterForeignDataWrapperClauses = 162, RULE_genericOptionElem = 163, 
		RULE_genericOptionArg = 164, RULE_fdwOptions = 165, RULE_fdwOption = 166, 
		RULE_handlerName = 167, RULE_alterGroup = 168, RULE_alterGroupClauses = 169, 
		RULE_alterLanguage = 170, RULE_alterLargeObject = 171, RULE_alterMaterializedView = 172, 
		RULE_alterMaterializedViewClauses = 173, RULE_declare = 174, RULE_cursorOptions = 175, 
		RULE_cursorOption = 176, RULE_execute = 177, RULE_createMaterializedView = 178, 
		RULE_createMvTarget = 179, RULE_refreshMatViewStmt = 180, RULE_alterPolicy = 181, 
		RULE_alterPolicyClauses = 182, RULE_alterProcedure = 183, RULE_alterProcedureClauses = 184, 
		RULE_alterfuncOptList = 185, RULE_alterFunction = 186, RULE_alterFunctionClauses = 187, 
		RULE_alterPublication = 188, RULE_alterRoutine = 189, RULE_alterRule = 190, 
		RULE_alterSequence = 191, RULE_alterSequenceClauses = 192, RULE_alterServer = 193, 
		RULE_foreignServerVersion = 194, RULE_alterStatistics = 195, RULE_alterSubscription = 196, 
		RULE_publicationNameList = 197, RULE_publicationNameItem = 198, RULE_alterSystem = 199, 
		RULE_alterTablespace = 200, RULE_alterTextSearchConfiguration = 201, RULE_alterTextSearchConfigurationClauses = 202, 
		RULE_anyNameList = 203, RULE_alterTextSearchDictionary = 204, RULE_alterTextSearchParser = 205, 
		RULE_alterTextSearchTemplate = 206, RULE_alterTrigger = 207, RULE_alterType = 208, 
		RULE_alterTypeClauses = 209, RULE_alterTypeCmds = 210, RULE_alterTypeCmd = 211, 
		RULE_alterUserMapping = 212, RULE_authIdent = 213, RULE_alterView = 214, 
		RULE_alterViewClauses = 215, RULE_close = 216, RULE_cluster = 217, RULE_clusterIndexSpecification = 218, 
		RULE_comment = 219, RULE_commentClauses = 220, RULE_objectTypeNameOnAnyName = 221, 
		RULE_objectTypeName = 222, RULE_dropTypeName = 223, RULE_objectTypeAnyName = 224, 
		RULE_commentText = 225, RULE_createAccessMethod = 226, RULE_createAggregate = 227, 
		RULE_oldAggrDefinition = 228, RULE_oldAggrList = 229, RULE_oldAggrElem = 230, 
		RULE_createCast = 231, RULE_castContext = 232, RULE_createCollation = 233, 
		RULE_createConversion = 234, RULE_createDomain = 235, RULE_createEventTrigger = 236, 
		RULE_eventTriggerWhenList = 237, RULE_eventTriggerWhenItem = 238, RULE_eventTriggerValueList = 239, 
		RULE_createExtension = 240, RULE_createExtensionOptList = 241, RULE_createExtensionOptItem = 242, 
		RULE_createForeignDataWrapper = 243, RULE_createForeignTable = 244, RULE_createForeignTableClauses = 245, 
		RULE_tableElementList = 246, RULE_tableElement = 247, RULE_tableLikeClause = 248, 
		RULE_tableLikeOptionList = 249, RULE_tableLikeOption = 250, RULE_createFunction = 251, 
		RULE_tableFuncColumnList = 252, RULE_tableFuncColumn = 253, RULE_createfuncOptList = 254, 
		RULE_createfuncOptItem = 255, RULE_transformTypeList = 256, RULE_funcAs = 257, 
		RULE_funcReturn = 258, RULE_funcArgsWithDefaults = 259, RULE_funcArgsWithDefaultsList = 260, 
		RULE_funcArgWithDefault = 261, RULE_createLanguage = 262, RULE_transformElementList = 263, 
		RULE_validatorClause = 264, RULE_createPolicy = 265, RULE_createProcedure = 266, 
		RULE_createPublication = 267, RULE_publicationForTables = 268, RULE_createRule = 269, 
		RULE_ruleActionList = 270, RULE_ruleActionStmt = 271, RULE_ruleActionMulti = 272, 
		RULE_notifyStmt = 273, RULE_createTrigger = 274, RULE_triggerEvents = 275, 
		RULE_triggerOneEvent = 276, RULE_triggerActionTime = 277, RULE_triggerFuncArgs = 278, 
		RULE_triggerFuncArg = 279, RULE_triggerWhen = 280, RULE_triggerForSpec = 281, 
		RULE_triggerReferencing = 282, RULE_triggerTransitions = 283, RULE_triggerTransition = 284, 
		RULE_transitionRelName = 285, RULE_transitionRowOrTable = 286, RULE_transitionOldOrNew = 287, 
		RULE_createSequence = 288, RULE_tempOption = 289, RULE_createServer = 290, 
		RULE_createStatistics = 291, RULE_createSubscription = 292, RULE_createTablespace = 293, 
		RULE_createTextSearch = 294, RULE_createTransform = 295, RULE_createType = 296, 
		RULE_createTypeClauses = 297, RULE_enumValList = 298, RULE_createUserMapping = 299, 
		RULE_discard = 300, RULE_dropAccessMethod = 301, RULE_dropAggregate = 302, 
		RULE_aggregateWithArgtypesList = 303, RULE_dropCast = 304, RULE_dropCollation = 305, 
		RULE_dropConversion = 306, RULE_dropDomain = 307, RULE_dropEventTrigger = 308, 
		RULE_dropExtension = 309, RULE_dropForeignDataWrapper = 310, RULE_dropForeignTable = 311, 
		RULE_dropFunction = 312, RULE_functionWithArgtypesList = 313, RULE_dropLanguage = 314, 
		RULE_dropMaterializedView = 315, RULE_dropOperator = 316, RULE_operatorWithArgtypesList = 317, 
		RULE_dropOperatorClass = 318, RULE_dropOperatorFamily = 319, RULE_dropOwned = 320, 
		RULE_dropPolicy = 321, RULE_dropProcedure = 322, RULE_dropPublication = 323, 
		RULE_dropRoutine = 324, RULE_dropRule = 325, RULE_dropSequence = 326, 
		RULE_dropServer = 327, RULE_dropStatistics = 328, RULE_dropSubscription = 329, 
		RULE_dropTablespace = 330, RULE_dropTextSearch = 331, RULE_dropTransform = 332, 
		RULE_dropTrigger = 333, RULE_dropType = 334, RULE_dropUserMapping = 335, 
		RULE_dropView = 336, RULE_importForeignSchema = 337, RULE_importQualification = 338, 
		RULE_importQualificationType = 339, RULE_listen = 340, RULE_move = 341, 
		RULE_prepare = 342, RULE_prepTypeClause = 343, RULE_refreshMaterializedView = 344, 
		RULE_reIndex = 345, RULE_reIndexClauses = 346, RULE_reindexOptionList = 347, 
		RULE_reindexOptionElem = 348, RULE_reindexTargetMultitable = 349, RULE_reindexTargetType = 350, 
		RULE_alterForeignTable = 351, RULE_alterForeignTableClauses = 352, RULE_createOperator = 353, 
		RULE_createOperatorClass = 354, RULE_createOperatorFamily = 355, RULE_securityLabelStmt = 356, 
		RULE_securityLabel = 357, RULE_securityLabelClausces = 358, RULE_unlisten = 359, 
		RULE_parameterMarker = 360, RULE_reservedKeyword = 361, RULE_numberLiterals = 362, 
		RULE_literalsType = 363, RULE_identifier = 364, RULE_unicodeEscapes = 365, 
		RULE_uescape = 366, RULE_unreservedWord = 367, RULE_typeFuncNameKeyword = 368, 
		RULE_schemaName = 369, RULE_tableName = 370, RULE_columnName = 371, RULE_owner = 372, 
		RULE_name = 373, RULE_tableNames = 374, RULE_columnNames = 375, RULE_collationName = 376, 
		RULE_indexName = 377, RULE_alias = 378, RULE_primaryKey = 379, RULE_logicalOperator = 380, 
		RULE_comparisonOperator = 381, RULE_cursorName = 382, RULE_aExpr = 383, 
		RULE_bExpr = 384, RULE_cExpr = 385, RULE_indirection = 386, RULE_optIndirection = 387, 
		RULE_indirectionEl = 388, RULE_sliceBound = 389, RULE_inExpr = 390, RULE_caseExpr = 391, 
		RULE_whenClauseList = 392, RULE_whenClause = 393, RULE_caseDefault = 394, 
		RULE_caseArg = 395, RULE_columnref = 396, RULE_qualOp = 397, RULE_subqueryOp = 398, 
		RULE_allOp = 399, RULE_op = 400, RULE_mathOperator = 401, RULE_qualAllOp = 402, 
		RULE_ascDesc = 403, RULE_anyOperator = 404, RULE_frameClause = 405, RULE_frameExtent = 406, 
		RULE_frameBound = 407, RULE_windowExclusionClause = 408, RULE_row = 409, 
		RULE_explicitRow = 410, RULE_implicitRow = 411, RULE_subType = 412, RULE_arrayExpr = 413, 
		RULE_arrayExprList = 414, RULE_funcArgList = 415, RULE_paramName = 416, 
		RULE_funcArgExpr = 417, RULE_typeList = 418, RULE_funcApplication = 419, 
		RULE_funcName = 420, RULE_aexprConst = 421, RULE_qualifiedName = 422, 
		RULE_colId = 423, RULE_typeFunctionName = 424, RULE_functionTable = 425, 
		RULE_xmlTable = 426, RULE_xmlTableColumnList = 427, RULE_xmlTableColumnEl = 428, 
		RULE_xmlTableColumnOptionList = 429, RULE_xmlTableColumnOptionEl = 430, 
		RULE_xmlNamespaceList = 431, RULE_xmlNamespaceEl = 432, RULE_funcExpr = 433, 
		RULE_withinGroupClause = 434, RULE_filterClause = 435, RULE_functionExprWindowless = 436, 
		RULE_ordinality = 437, RULE_functionExprCommonSubexpr = 438, RULE_typeName = 439, 
		RULE_simpleTypeName = 440, RULE_exprList = 441, RULE_extractList = 442, 
		RULE_extractArg = 443, RULE_genericType = 444, RULE_typeModifiers = 445, 
		RULE_numeric = 446, RULE_constDatetime = 447, RULE_timezone = 448, RULE_character = 449, 
		RULE_characterWithLength = 450, RULE_characterWithoutLength = 451, RULE_characterClause = 452, 
		RULE_optFloat = 453, RULE_attrs = 454, RULE_attrName = 455, RULE_colLable = 456, 
		RULE_bit = 457, RULE_bitWithLength = 458, RULE_bitWithoutLength = 459, 
		RULE_constInterval = 460, RULE_optInterval = 461, RULE_optArrayBounds = 462, 
		RULE_intervalSecond = 463, RULE_unicodeNormalForm = 464, RULE_trimList = 465, 
		RULE_overlayList = 466, RULE_overlayPlacing = 467, RULE_substrFrom = 468, 
		RULE_substrFor = 469, RULE_positionList = 470, RULE_substrList = 471, 
		RULE_xmlAttributes = 472, RULE_xmlAttributeList = 473, RULE_xmlAttributeEl = 474, 
		RULE_xmlExistsArgument = 475, RULE_xmlPassingMech = 476, RULE_documentOrContent = 477, 
		RULE_xmlWhitespaceOption = 478, RULE_xmlRootVersion = 479, RULE_xmlRootStandalone = 480, 
		RULE_rowsFromItem = 481, RULE_rowsFromList = 482, RULE_columnDefList = 483, 
		RULE_tableFuncElementList = 484, RULE_tableFuncElement = 485, RULE_collateClause = 486, 
		RULE_anyName = 487, RULE_aliasClause = 488, RULE_nameList = 489, RULE_funcAliasClause = 490, 
		RULE_tablesampleClause = 491, RULE_repeatableClause = 492, RULE_allOrDistinct = 493, 
		RULE_sortClause = 494, RULE_sortbyList = 495, RULE_sortby = 496, RULE_nullsOrder = 497, 
		RULE_distinctClause = 498, RULE_distinct = 499, RULE_overClause = 500, 
		RULE_windowSpecification = 501, RULE_windowName = 502, RULE_partitionClause = 503, 
		RULE_indexParams = 504, RULE_indexElemOptions = 505, RULE_indexElem = 506, 
		RULE_collate = 507, RULE_optClass = 508, RULE_reloptions = 509, RULE_reloptionList = 510, 
		RULE_reloptionElem = 511, RULE_defArg = 512, RULE_funcType = 513, RULE_selectWithParens = 514, 
		RULE_dataType = 515, RULE_dataTypeName = 516, RULE_dataTypeLength = 517, 
		RULE_characterSet = 518, RULE_ignoredIdentifier = 519, RULE_ignoredIdentifiers = 520, 
		RULE_signedIconst = 521, RULE_booleanOrString = 522, RULE_nonReservedWord = 523, 
		RULE_colNameKeyword = 524, RULE_databaseName = 525, RULE_roleSpec = 526, 
		RULE_varName = 527, RULE_varList = 528, RULE_varValue = 529, RULE_zoneValue = 530, 
		RULE_numericOnly = 531, RULE_isoLevel = 532, RULE_columnDef = 533, RULE_colConstraint = 534, 
		RULE_constraintAttr = 535, RULE_colConstraintElem = 536, RULE_parenthesizedSeqOptList = 537, 
		RULE_seqOptList = 538, RULE_seqOptElem = 539, RULE_optColumnList = 540, 
		RULE_generatedWhen = 541, RULE_noInherit = 542, RULE_consTableSpace = 543, 
		RULE_definition = 544, RULE_defList = 545, RULE_defElem = 546, RULE_colLabel = 547, 
		RULE_keyActions = 548, RULE_keyDelete = 549, RULE_keyUpdate = 550, RULE_keyAction = 551, 
		RULE_keyMatch = 552, RULE_createGenericOptions = 553, RULE_genericOptionList = 554, 
		RULE_replicaIdentity = 555, RULE_operArgtypes = 556, RULE_funcArg = 557, 
		RULE_argClass = 558, RULE_funcArgsList = 559, RULE_nonReservedWordOrSconst = 560, 
		RULE_fileName = 561, RULE_roleList = 562, RULE_setResetClause = 563, RULE_setRest = 564, 
		RULE_transactionModeList = 565, RULE_transactionModeItem = 566, RULE_setRestMore = 567, 
		RULE_encoding = 568, RULE_genericSet = 569, RULE_variableResetStmt = 570, 
		RULE_resetRest = 571, RULE_genericReset = 572, RULE_relationExprList = 573, 
		RULE_relationExpr = 574, RULE_commonFuncOptItem = 575, RULE_functionSetResetClause = 576, 
		RULE_rowSecurityCmd = 577, RULE_event = 578, RULE_typeNameList = 579, 
		RULE_insert = 580, RULE_insertTarget = 581, RULE_insertRest = 582, RULE_overrideKind = 583, 
		RULE_insertColumnList = 584, RULE_insertColumnItem = 585, RULE_optOnConflict = 586, 
		RULE_optConfExpr = 587, RULE_update = 588, RULE_setClauseList = 589, RULE_setClause = 590, 
		RULE_setTarget = 591, RULE_setTargetList = 592, RULE_returningClause = 593, 
		RULE_delete = 594, RULE_relationExprOptAlias = 595, RULE_usingClause = 596, 
		RULE_select = 597, RULE_selectNoParens = 598, RULE_selectClauseN = 599, 
		RULE_simpleSelect = 600, RULE_withClause = 601, RULE_intoClause = 602, 
		RULE_optTempTableName = 603, RULE_cteList = 604, RULE_commonTableExpr = 605, 
		RULE_optMaterialized = 606, RULE_optNameList = 607, RULE_preparableStmt = 608, 
		RULE_forLockingClause = 609, RULE_forLockingItems = 610, RULE_forLockingItem = 611, 
		RULE_nowaitOrSkip = 612, RULE_forLockingStrength = 613, RULE_lockedRelsList = 614, 
		RULE_qualifiedNameList = 615, RULE_selectLimit = 616, RULE_valuesClause = 617, 
		RULE_limitClause = 618, RULE_offsetClause = 619, RULE_selectLimitValue = 620, 
		RULE_selectOffsetValue = 621, RULE_selectFetchFirstValue = 622, RULE_rowOrRows = 623, 
		RULE_firstOrNext = 624, RULE_targetList = 625, RULE_targetEl = 626, RULE_groupClause = 627, 
		RULE_groupByList = 628, RULE_groupByItem = 629, RULE_emptyGroupingSet = 630, 
		RULE_rollupClause = 631, RULE_cubeClause = 632, RULE_groupingSetsClause = 633, 
		RULE_windowClause = 634, RULE_windowDefinitionList = 635, RULE_windowDefinition = 636, 
		RULE_existingWindowName = 637, RULE_optWindowExclusionClause = 638, RULE_fromClause = 639, 
		RULE_fromList = 640, RULE_tableReference = 641, RULE_joinedTable = 642, 
		RULE_joinType = 643, RULE_joinOuter = 644, RULE_joinQual = 645, RULE_whereClause = 646, 
		RULE_whereOrCurrentClause = 647, RULE_havingClause = 648, RULE_doStatement = 649, 
		RULE_dostmtOptList = 650, RULE_dostmtOptItem = 651, RULE_lock = 652, RULE_lockType = 653, 
		RULE_checkpoint = 654, RULE_copy = 655, RULE_copyOptions = 656, RULE_copyGenericOptList = 657, 
		RULE_copyGenericOptElem = 658, RULE_copyGenericOptArg = 659, RULE_copyGenericOptArgList = 660, 
		RULE_copyGenericOptArgListItem = 661, RULE_copyOptList = 662, RULE_copyOptItem = 663, 
		RULE_copyDelimiter = 664, RULE_deallocate = 665, RULE_fetch = 666, RULE_fetchArgs = 667;
	private static String[] makeRuleNames() {
		return new String[] {
			"createTable", "executeParamClause", "partitionBoundSpec", "hashPartbound", 
			"hashPartboundElem", "typedTableElementList", "typedTableElement", "columnOptions", 
			"colQualList", "withData", "tableSpace", "onCommitOption", "withOption", 
			"tableAccessMethodClause", "accessMethod", "createIndex", "include", 
			"indexIncludingParams", "accessMethodClause", "createDatabase", "createView", 
			"columnList", "columnElem", "dropDatabase", "createDatabaseSpecification", 
			"createdbOptName", "alterTable", "alterIndex", "dropTable", "dropTableOpt", 
			"dropIndex", "dropIndexOpt", "truncateTable", "restartSeqs", "createTableSpecification", 
			"tableNotExistClause", "createDefinitionClause", "createDefinition", 
			"columnDefinition", "columnConstraint", "constraintClause", "columnConstraintOption", 
			"checkOption", "defaultExpr", "sequenceOptions", "sequenceOption", "indexParameters", 
			"action", "constraintOptionalParam", "likeOption", "tableConstraint", 
			"tableConstraintOption", "exclusionWhereClause", "exclusionConstraintList", 
			"exclusionConstraintElem", "inheritClause", "partitionSpec", "partParams", 
			"partElem", "funcExprWindowless", "partStrategy", "createIndexSpecification", 
			"concurrentlyClause", "indexNotExistClause", "onlyClause", "tableExistClause", 
			"asteriskClause", "alterDefinitionClause", "partitionCmd", "alterIndexDefinitionClause", 
			"indexPartitionCmd", "renameIndexSpecification", "alterIndexDependsOnExtension", 
			"alterIndexSetTableSpace", "tableNamesClause", "tableNameClause", "alterTableActions", 
			"alterTableAction", "addColumnSpecification", "dropColumnSpecification", 
			"columnExistClause", "modifyColumnSpecification", "modifyColumn", "alterColumnSetOption", 
			"attributeOptions", "attributeOption", "addConstraintSpecification", 
			"tableConstraintUsingIndex", "storageParameterWithValue", "storageParameter", 
			"renameColumnSpecification", "renameConstraint", "renameTableSpecification", 
			"indexExistClause", "indexNames", "alterDatabase", "alterDatabaseClause", 
			"createdbOptItems", "createdbOptItem", "alterTableCmds", "alterTableCmd", 
			"constraintAttributeSpec", "constraintAttributeElem", "alterGenericOptions", 
			"alterGenericOptionList", "alterGenericOptionElem", "genericOptionName", 
			"dropBehavior", "alterUsing", "setData", "alterIdentityColumnOptionList", 
			"alterIdentityColumnOption", "alterColumnDefault", "alterOperator", "alterOperatorClass", 
			"alterOperatorClassClauses", "alterOperatorFamily", "alterOperatorFamilyClauses", 
			"opclassItemList", "opclassItem", "opclassPurpose", "alterOperatorClauses", 
			"operatorDefList", "operatorDefElem", "operatorDefArg", "operatorWithArgtypes", 
			"alterAggregate", "aggregateSignature", "aggrArgs", "aggrArgsList", "aggrArg", 
			"alterAggregateDefinitionClause", "alterCollation", "alterCollationClause", 
			"alterConversion", "alterConversionClause", "alterDefaultPrivileges", 
			"defACLAction", "grantGrantOption", "granteeList", "grantee", "defaclPrivilegeTarget", 
			"privileges", "privilegeList", "privilege", "defACLOptionList", "defACLOption", 
			"schemaNameList", "alterDomain", "alterDomainClause", "constraintName", 
			"alterEventTrigger", "alterEventTriggerClause", "tiggerName", "alterExtension", 
			"alterExtensionClauses", "functionWithArgtypes", "funcArgs", "aggregateWithArgtypes", 
			"alterExtensionOptList", "alterExtensionOptItem", "alterForeignDataWrapper", 
			"alterForeignDataWrapperClauses", "genericOptionElem", "genericOptionArg", 
			"fdwOptions", "fdwOption", "handlerName", "alterGroup", "alterGroupClauses", 
			"alterLanguage", "alterLargeObject", "alterMaterializedView", "alterMaterializedViewClauses", 
			"declare", "cursorOptions", "cursorOption", "execute", "createMaterializedView", 
			"createMvTarget", "refreshMatViewStmt", "alterPolicy", "alterPolicyClauses", 
			"alterProcedure", "alterProcedureClauses", "alterfuncOptList", "alterFunction", 
			"alterFunctionClauses", "alterPublication", "alterRoutine", "alterRule", 
			"alterSequence", "alterSequenceClauses", "alterServer", "foreignServerVersion", 
			"alterStatistics", "alterSubscription", "publicationNameList", "publicationNameItem", 
			"alterSystem", "alterTablespace", "alterTextSearchConfiguration", "alterTextSearchConfigurationClauses", 
			"anyNameList", "alterTextSearchDictionary", "alterTextSearchParser", 
			"alterTextSearchTemplate", "alterTrigger", "alterType", "alterTypeClauses", 
			"alterTypeCmds", "alterTypeCmd", "alterUserMapping", "authIdent", "alterView", 
			"alterViewClauses", "close", "cluster", "clusterIndexSpecification", 
			"comment", "commentClauses", "objectTypeNameOnAnyName", "objectTypeName", 
			"dropTypeName", "objectTypeAnyName", "commentText", "createAccessMethod", 
			"createAggregate", "oldAggrDefinition", "oldAggrList", "oldAggrElem", 
			"createCast", "castContext", "createCollation", "createConversion", "createDomain", 
			"createEventTrigger", "eventTriggerWhenList", "eventTriggerWhenItem", 
			"eventTriggerValueList", "createExtension", "createExtensionOptList", 
			"createExtensionOptItem", "createForeignDataWrapper", "createForeignTable", 
			"createForeignTableClauses", "tableElementList", "tableElement", "tableLikeClause", 
			"tableLikeOptionList", "tableLikeOption", "createFunction", "tableFuncColumnList", 
			"tableFuncColumn", "createfuncOptList", "createfuncOptItem", "transformTypeList", 
			"funcAs", "funcReturn", "funcArgsWithDefaults", "funcArgsWithDefaultsList", 
			"funcArgWithDefault", "createLanguage", "transformElementList", "validatorClause", 
			"createPolicy", "createProcedure", "createPublication", "publicationForTables", 
			"createRule", "ruleActionList", "ruleActionStmt", "ruleActionMulti", 
			"notifyStmt", "createTrigger", "triggerEvents", "triggerOneEvent", "triggerActionTime", 
			"triggerFuncArgs", "triggerFuncArg", "triggerWhen", "triggerForSpec", 
			"triggerReferencing", "triggerTransitions", "triggerTransition", "transitionRelName", 
			"transitionRowOrTable", "transitionOldOrNew", "createSequence", "tempOption", 
			"createServer", "createStatistics", "createSubscription", "createTablespace", 
			"createTextSearch", "createTransform", "createType", "createTypeClauses", 
			"enumValList", "createUserMapping", "discard", "dropAccessMethod", "dropAggregate", 
			"aggregateWithArgtypesList", "dropCast", "dropCollation", "dropConversion", 
			"dropDomain", "dropEventTrigger", "dropExtension", "dropForeignDataWrapper", 
			"dropForeignTable", "dropFunction", "functionWithArgtypesList", "dropLanguage", 
			"dropMaterializedView", "dropOperator", "operatorWithArgtypesList", "dropOperatorClass", 
			"dropOperatorFamily", "dropOwned", "dropPolicy", "dropProcedure", "dropPublication", 
			"dropRoutine", "dropRule", "dropSequence", "dropServer", "dropStatistics", 
			"dropSubscription", "dropTablespace", "dropTextSearch", "dropTransform", 
			"dropTrigger", "dropType", "dropUserMapping", "dropView", "importForeignSchema", 
			"importQualification", "importQualificationType", "listen", "move", "prepare", 
			"prepTypeClause", "refreshMaterializedView", "reIndex", "reIndexClauses", 
			"reindexOptionList", "reindexOptionElem", "reindexTargetMultitable", 
			"reindexTargetType", "alterForeignTable", "alterForeignTableClauses", 
			"createOperator", "createOperatorClass", "createOperatorFamily", "securityLabelStmt", 
			"securityLabel", "securityLabelClausces", "unlisten", "parameterMarker", 
			"reservedKeyword", "numberLiterals", "literalsType", "identifier", "unicodeEscapes", 
			"uescape", "unreservedWord", "typeFuncNameKeyword", "schemaName", "tableName", 
			"columnName", "owner", "name", "tableNames", "columnNames", "collationName", 
			"indexName", "alias", "primaryKey", "logicalOperator", "comparisonOperator", 
			"cursorName", "aExpr", "bExpr", "cExpr", "indirection", "optIndirection", 
			"indirectionEl", "sliceBound", "inExpr", "caseExpr", "whenClauseList", 
			"whenClause", "caseDefault", "caseArg", "columnref", "qualOp", "subqueryOp", 
			"allOp", "op", "mathOperator", "qualAllOp", "ascDesc", "anyOperator", 
			"frameClause", "frameExtent", "frameBound", "windowExclusionClause", 
			"row", "explicitRow", "implicitRow", "subType", "arrayExpr", "arrayExprList", 
			"funcArgList", "paramName", "funcArgExpr", "typeList", "funcApplication", 
			"funcName", "aexprConst", "qualifiedName", "colId", "typeFunctionName", 
			"functionTable", "xmlTable", "xmlTableColumnList", "xmlTableColumnEl", 
			"xmlTableColumnOptionList", "xmlTableColumnOptionEl", "xmlNamespaceList", 
			"xmlNamespaceEl", "funcExpr", "withinGroupClause", "filterClause", "functionExprWindowless", 
			"ordinality", "functionExprCommonSubexpr", "typeName", "simpleTypeName", 
			"exprList", "extractList", "extractArg", "genericType", "typeModifiers", 
			"numeric", "constDatetime", "timezone", "character", "characterWithLength", 
			"characterWithoutLength", "characterClause", "optFloat", "attrs", "attrName", 
			"colLable", "bit", "bitWithLength", "bitWithoutLength", "constInterval", 
			"optInterval", "optArrayBounds", "intervalSecond", "unicodeNormalForm", 
			"trimList", "overlayList", "overlayPlacing", "substrFrom", "substrFor", 
			"positionList", "substrList", "xmlAttributes", "xmlAttributeList", "xmlAttributeEl", 
			"xmlExistsArgument", "xmlPassingMech", "documentOrContent", "xmlWhitespaceOption", 
			"xmlRootVersion", "xmlRootStandalone", "rowsFromItem", "rowsFromList", 
			"columnDefList", "tableFuncElementList", "tableFuncElement", "collateClause", 
			"anyName", "aliasClause", "nameList", "funcAliasClause", "tablesampleClause", 
			"repeatableClause", "allOrDistinct", "sortClause", "sortbyList", "sortby", 
			"nullsOrder", "distinctClause", "distinct", "overClause", "windowSpecification", 
			"windowName", "partitionClause", "indexParams", "indexElemOptions", "indexElem", 
			"collate", "optClass", "reloptions", "reloptionList", "reloptionElem", 
			"defArg", "funcType", "selectWithParens", "dataType", "dataTypeName", 
			"dataTypeLength", "characterSet", "ignoredIdentifier", "ignoredIdentifiers", 
			"signedIconst", "booleanOrString", "nonReservedWord", "colNameKeyword", 
			"databaseName", "roleSpec", "varName", "varList", "varValue", "zoneValue", 
			"numericOnly", "isoLevel", "columnDef", "colConstraint", "constraintAttr", 
			"colConstraintElem", "parenthesizedSeqOptList", "seqOptList", "seqOptElem", 
			"optColumnList", "generatedWhen", "noInherit", "consTableSpace", "definition", 
			"defList", "defElem", "colLabel", "keyActions", "keyDelete", "keyUpdate", 
			"keyAction", "keyMatch", "createGenericOptions", "genericOptionList", 
			"replicaIdentity", "operArgtypes", "funcArg", "argClass", "funcArgsList", 
			"nonReservedWordOrSconst", "fileName", "roleList", "setResetClause", 
			"setRest", "transactionModeList", "transactionModeItem", "setRestMore", 
			"encoding", "genericSet", "variableResetStmt", "resetRest", "genericReset", 
			"relationExprList", "relationExpr", "commonFuncOptItem", "functionSetResetClause", 
			"rowSecurityCmd", "event", "typeNameList", "insert", "insertTarget", 
			"insertRest", "overrideKind", "insertColumnList", "insertColumnItem", 
			"optOnConflict", "optConfExpr", "update", "setClauseList", "setClause", 
			"setTarget", "setTargetList", "returningClause", "delete", "relationExprOptAlias", 
			"usingClause", "select", "selectNoParens", "selectClauseN", "simpleSelect", 
			"withClause", "intoClause", "optTempTableName", "cteList", "commonTableExpr", 
			"optMaterialized", "optNameList", "preparableStmt", "forLockingClause", 
			"forLockingItems", "forLockingItem", "nowaitOrSkip", "forLockingStrength", 
			"lockedRelsList", "qualifiedNameList", "selectLimit", "valuesClause", 
			"limitClause", "offsetClause", "selectLimitValue", "selectOffsetValue", 
			"selectFetchFirstValue", "rowOrRows", "firstOrNext", "targetList", "targetEl", 
			"groupClause", "groupByList", "groupByItem", "emptyGroupingSet", "rollupClause", 
			"cubeClause", "groupingSetsClause", "windowClause", "windowDefinitionList", 
			"windowDefinition", "existingWindowName", "optWindowExclusionClause", 
			"fromClause", "fromList", "tableReference", "joinedTable", "joinType", 
			"joinOuter", "joinQual", "whereClause", "whereOrCurrentClause", "havingClause", 
			"doStatement", "dostmtOptList", "dostmtOptItem", "lock", "lockType", 
			"checkpoint", "copy", "copyOptions", "copyGenericOptList", "copyGenericOptElem", 
			"copyGenericOptArg", "copyGenericOptArgList", "copyGenericOptArgListItem", 
			"copyOptList", "copyOptItem", "copyDelimiter", "deallocate", "fetch", 
			"fetchArgs"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'U'", "'u'", "'Default does not match anything'", "'skip'", "'&&'", 
			"'||'", "'!'", "'~'", "'|'", "'&'", "'<<'", "'>>'", "'^'", "'%'", "':'", 
			"'+'", "'-'", "'*'", "'/'", "'\\'", "'.'", "'.*'", "'<=>'", "'=='", "'='", 
			"':='", null, "'>'", "'>='", "'<'", "'<='", "'#'", "'('", "')'", "'{'", 
			"'}'", "'['", "']'", "','", "'\"'", "'''", "'`'", "'?'", "'@'", "';'", 
			"'~~'", "'!~~'", "'::'", null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, "'DO NOT MATCH ANY THING, JUST FOR GENERATOR'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, "AND_", "OR_", "NOT_", "TILDE_", "VERTICAL_BAR_", 
			"AMPERSAND_", "SIGNED_LEFT_SHIFT_", "SIGNED_RIGHT_SHIFT_", "CARET_", 
			"MOD_", "COLON_", "PLUS_", "MINUS_", "ASTERISK_", "SLASH_", "BACKSLASH_", 
			"DOT_", "DOT_ASTERISK_", "SAFE_EQ_", "DEQ_", "EQ_", "CQ_", "NEQ_", "GT_", 
			"GTE_", "LT_", "LTE_", "POUND_", "LP_", "RP_", "LBE_", "RBE_", "LBT_", 
			"RBT_", "COMMA_", "DQ_", "SQ_", "BQ_", "QUESTION_", "AT_", "SEMI_", "TILDE_TILDE_", 
			"NOT_TILDE_TILDE_", "TYPE_CAST_", "WS", "SELECT", "INSERT", "UPDATE", 
			"DELETE", "CREATE", "ALTER", "DROP", "TRUNCATE", "SCHEMA", "GRANT", "REVOKE", 
			"ADD", "SET", "TABLE", "COLUMN", "INDEX", "CONSTRAINT", "PRIMARY", "UNIQUE", 
			"FOREIGN", "KEY", "POSITION", "PRECISION", "FUNCTION", "TRIGGER", "PROCEDURE", 
			"VIEW", "INTO", "VALUES", "WITH", "UNION", "DISTINCT", "CASE", "WHEN", 
			"CAST", "TRIM", "SUBSTRING", "FROM", "NATURAL", "JOIN", "FULL", "INNER", 
			"OUTER", "LEFT", "RIGHT", "CROSS", "USING", "WHERE", "AS", "ON", "IF", 
			"ELSE", "THEN", "FOR", "TO", "AND", "OR", "IS", "NOT", "NULL", "TRUE", 
			"FALSE", "EXISTS", "BETWEEN", "IN", "ALL", "ANY", "LIKE", "ORDER", "GROUP", 
			"BY", "ASC", "DESC", "HAVING", "LIMIT", "OFFSET", "BEGIN", "COMMIT", 
			"ROLLBACK", "SAVEPOINT", "BOOLEAN", "DOUBLE", "CHAR", "CHARACTER", "ARRAY", 
			"INTERVAL", "DATE", "TIME", "TIMESTAMP", "LOCALTIME", "LOCALTIMESTAMP", 
			"YEAR", "QUARTER", "MONTH", "WEEK", "DAY", "HOUR", "MINUTE", "SECOND", 
			"MICROSECOND", "DEFAULT", "CURRENT", "ENABLE", "DISABLE", "CALL", "INSTANCE", 
			"PRESERVE", "DO", "DEFINER", "CURRENT_USER", "SQL", "CASCADED", "LOCAL", 
			"CLOSE", "OPEN", "NEXT", "NAME", "COLLATION", "NAMES", "INTEGER", "REAL", 
			"DECIMAL", "TYPE", "SMALLINT", "BIGINT", "NUMERIC", "TEXT", "REPEATABLE", 
			"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "NULLIF", "VARYING", 
			"NATIONAL", "NCHAR", "VALUE", "BOTH", "LEADING", "TRAILING", "COALESCE", 
			"INTERSECT", "EXCEPT", "TIES", "FETCH", "CUBE", "GROUPING", "SETS", "WINDOW", 
			"OTHERS", "OVERLAPS", "SOME", "AT", "DEC", "END", "FOR_GENERATOR", "ADMIN", 
			"BINARY", "ESCAPE", "EXCLUDE", "MOD", "PARTITION", "ROW", "UNKNOWN", 
			"ALWAYS", "CASCADE", "CHECK", "GENERATED", "ISOLATION", "LEVEL", "NO", 
			"OPTION", "PRIVILEGES", "READ", "REFERENCES", "ROLE", "ROWS", "START", 
			"TRANSACTION", "USER", "ACTION", "CACHE", "CHARACTERISTICS", "CLUSTER", 
			"COLLATE", "COMMENTS", "CONCURRENTLY", "CONNECT", "CONSTRAINTS", "CYCLE", 
			"DATA", "DATABASE", "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEPENDS", 
			"DOMAIN", "EXCLUDING", "EXECUTE", "EXTENDED", "EXTENSION", "EXTERNAL", 
			"EXTRACT", "FILTER", "FIRST", "FOLLOWING", "FORCE", "GLOBAL", "IDENTITY", 
			"IMMEDIATE", "INCLUDING", "INCREMENT", "INDEXES", "INHERIT", "INHERITS", 
			"INITIALLY", "INCLUDE", "LANGUAGE", "LARGE", "LAST", "LOGGED", "MAIN", 
			"MATCH", "MAXVALUE", "MINVALUE", "NOTHING", "NULLS", "OBJECT", "OIDS", 
			"ONLY", "OVER", "OWNED", "OWNER", "PARTIAL", "PLAIN", "PRECEDING", "RANGE", 
			"RENAME", "REPLICA", "RESET", "RESTART", "RESTRICT", "ROUTINE", "RULE", 
			"SECURITY", "SEQUENCE", "SESSION", "SESSION_USER", "SHOW", "SIMPLE", 
			"STATISTICS", "STORAGE", "TABLESPACE", "TEMP", "TEMPORARY", "UNBOUNDED", 
			"UNLOGGED", "USAGE", "VALID", "VALIDATE", "WITHIN", "WITHOUT", "ZONE", 
			"OF", "UESCAPE", "GROUPS", "RECURSIVE", "INT", "INT2", "INT4", "INT8", 
			"FLOAT", "FLOAT4", "FLOAT8", "SMALLSERIAL", "SERIAL", "BIGSERIAL", "MONEY", 
			"VARCHAR", "BYTEA", "ENUM", "POINT", "LINE", "LSEG", "BOX", "PATH", "POLYGON", 
			"CIRCLE", "CIDR", "INET", "MACADDR", "MACADDR8", "BIT", "VARBIT", "TSVECTOR", 
			"TSQUERY", "XML", "JSON", "INT4RANGE", "INT8RANGE", "NUMRANGE", "TSRANGE", 
			"TSTZRANGE", "DATERANGE", "TABLESAMPLE", "ORDINALITY", "CURRENT_ROLE", 
			"CURRENT_CATALOG", "CURRENT_SCHEMA", "NORMALIZE", "OVERLAY", "XMLCONCAT", 
			"XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLPARSE", "XMLPI", "XMLROOT", 
			"XMLSERIALIZE", "TREAT", "SETOF", "NFC", "NFD", "NFKC", "NFKD", "XMLATTRIBUTES", 
			"REF", "PASSING", "VERSION", "YES", "STANDALONE", "GREATEST", "LEAST", 
			"MATERIALIZED", "OPERATOR", "SHARE", "ROLLUP", "ILIKE", "SIMILAR", "ISNULL", 
			"NOTNULL", "SYMMETRIC", "DOCUMENT", "NORMALIZED", "ASYMMETRIC", "VARIADIC", 
			"NOWAIT", "LOCKED", "XMLTABLE", "COLUMNS", "CONTENT", "STRIP", "WHITESPACE", 
			"XMLNAMESPACES", "PLACING", "RETURNING", "LATERAL", "NONE", "ANALYSE", 
			"ANALYZE", "CONFLICT", "OVERRIDING", "SYSTEM", "ABORT", "ABSOLUTE", "ACCESS", 
			"AFTER", "AGGREGATE", "ALSO", "ATTACH", "ATTRIBUTE", "BACKWARD", "BEFORE", 
			"ASSERTION", "ASSIGNMENT", "CONTINUE", "CONVERSION", "COPY", "COST", 
			"CSV", "CALLED", "CATALOG", "CHAIN", "CHECKPOINT", "CLASS", "CONFIGURATION", 
			"COMMENT", "DETACH", "DICTIONARY", "EXPRESSION", "INSENSITIVE", "DISCARD", 
			"OFF", "INSTEAD", "EXPLAIN", "INPUT", "INLINE", "PARALLEL", "LEAKPROOF", 
			"COMMITTED", "ENCODING", "IMPLICIT", "DELIMITER", "CURSOR", "EACH", "EVENT", 
			"DEALLOCATE", "CONNECTION", "DECLARE", "FAMILY", "FORWARD", "EXCLUSIVE", 
			"FUNCTIONS", "LOCATION", "LABEL", "DELIMITERS", "HANDLER", "HEADER", 
			"IMMUTABLE", "GRANTED", "HOLD", "MAPPING", "OLD", "METHOD", "LOAD", "LISTEN", 
			"MODE", "MOVE", "PROCEDURAL", "PARSER", "PROCEDURES", "ENCRYPTED", "PUBLICATION", 
			"PROGRAM", "REFERENCING", "PLANS", "REINDEX", "PRIOR", "PASSWORD", "RELATIVE", 
			"QUOTE", "ROUTINES", "REPLACE", "SNAPSHOT", "REFRESH", "PREPARE", "OPTIONS", 
			"IMPORT", "INVOKER", "NEW", "PREPARED", "SCROLL", "SEQUENCES", "SYSID", 
			"REASSIGN", "SERVER", "SUBSCRIPTION", "SEARCH", "SCHEMAS", "RECHECK", 
			"POLICY", "NOTIFY", "LOCK", "RELEASE", "SERIALIZABLE", "RETURNS", "STATEMENT", 
			"STDIN", "STDOUT", "TABLES", "SUPPORT", "STABLE", "TEMPLATE", "UNENCRYPTED", 
			"VIEWS", "UNCOMMITTED", "TRANSFORM", "UNLISTEN", "TRUSTED", "VALIDATOR", 
			"UNTIL", "VACUUM", "VOLATILE", "STORED", "WRITE", "STRICT", "TYPES", 
			"WRAPPER", "WORK", "FREEZE", "AUTHORIZATION", "VERBOSE", "PARAM", "OUT", 
			"INOUT", "IDENTIFIER_", "STRING_", "NUMBER_", "HEX_DIGIT_", "BIT_NUM_"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "DDLStatement.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public DDLStatementParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class CreateTableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public CreateTableSpecificationContext createTableSpecification() {
			return getRuleContext(CreateTableSpecificationContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InheritClauseContext inheritClause() {
			return getRuleContext(InheritClauseContext.class,0);
		}
		public CreateDefinitionClauseContext createDefinitionClause() {
			return getRuleContext(CreateDefinitionClauseContext.class,0);
		}
		public TableNotExistClauseContext tableNotExistClause() {
			return getRuleContext(TableNotExistClauseContext.class,0);
		}
		public PartitionSpecContext partitionSpec() {
			return getRuleContext(PartitionSpecContext.class,0);
		}
		public TableAccessMethodClauseContext tableAccessMethodClause() {
			return getRuleContext(TableAccessMethodClauseContext.class,0);
		}
		public WithOptionContext withOption() {
			return getRuleContext(WithOptionContext.class,0);
		}
		public OnCommitOptionContext onCommitOption() {
			return getRuleContext(OnCommitOptionContext.class,0);
		}
		public TableSpaceContext tableSpace() {
			return getRuleContext(TableSpaceContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(DDLStatementParser.EXECUTE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExecuteParamClauseContext executeParamClause() {
			return getRuleContext(ExecuteParamClauseContext.class,0);
		}
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(DDLStatementParser.PARTITION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public PartitionBoundSpecContext partitionBoundSpec() {
			return getRuleContext(PartitionBoundSpecContext.class,0);
		}
		public List<WithDataContext> withData() {
			return getRuleContexts(WithDataContext.class);
		}
		public WithDataContext withData(int i) {
			return getRuleContext(WithDataContext.class,i);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TypedTableElementListContext typedTableElementList() {
			return getRuleContext(TypedTableElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public CreateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableContext createTable() throws RecognitionException {
		CreateTableContext _localctx = new CreateTableContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_createTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1336);
			match(CREATE);
			setState(1337);
			createTableSpecification();
			setState(1338);
			match(TABLE);
			setState(1340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,0,_ctx) ) {
			case 1:
				{
				setState(1339);
				tableNotExistClause();
				}
				break;
			}
			setState(1342);
			tableName();
			setState(1363);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				{
				setState(1343);
				createDefinitionClause();
				}
				break;
			case OF:
				{
				{
				setState(1344);
				match(OF);
				setState(1345);
				anyName();
				setState(1350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(1346);
					match(LP_);
					setState(1347);
					typedTableElementList();
					setState(1348);
					match(RP_);
					}
				}

				}
				}
				break;
			case PARTITION:
				{
				{
				setState(1352);
				match(PARTITION);
				setState(1353);
				match(OF);
				setState(1354);
				qualifiedName();
				setState(1359);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(1355);
					match(LP_);
					setState(1356);
					typedTableElementList();
					setState(1357);
					match(RP_);
					}
				}

				setState(1361);
				partitionBoundSpec();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1365);
			inheritClause();
			setState(1367);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1366);
				partitionSpec();
				}
			}

			setState(1370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1369);
				tableAccessMethodClause();
				}
			}

			setState(1373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH || _la==WITHOUT) {
				{
				setState(1372);
				withOption();
				}
			}

			setState(1376);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(1375);
				onCommitOption();
				}
			}

			setState(1379);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(1378);
				tableSpace();
				}
			}

			setState(1386);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1381);
				match(AS);
				setState(1382);
				select();
				setState(1384);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1383);
					withData();
					}
				}

				}
			}

			setState(1394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXECUTE) {
				{
				setState(1388);
				match(EXECUTE);
				setState(1389);
				name();
				setState(1390);
				executeParamClause();
				setState(1392);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1391);
					withData();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteParamClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ExecuteParamClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeParamClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExecuteParamClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExecuteParamClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExecuteParamClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteParamClauseContext executeParamClause() throws RecognitionException {
		ExecuteParamClauseContext _localctx = new ExecuteParamClauseContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_executeParamClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1396);
			match(LP_);
			setState(1397);
			exprList(0);
			setState(1398);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionBoundSpecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode VALUES() { return getToken(DDLStatementParser.VALUES, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public List<TerminalNode> LP_() { return getTokens(DDLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(DDLStatementParser.LP_, i);
		}
		public HashPartboundContext hashPartbound() {
			return getRuleContext(HashPartboundContext.class,0);
		}
		public List<TerminalNode> RP_() { return getTokens(DDLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(DDLStatementParser.RP_, i);
		}
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public List<ExprListContext> exprList() {
			return getRuleContexts(ExprListContext.class);
		}
		public ExprListContext exprList(int i) {
			return getRuleContext(ExprListContext.class,i);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public PartitionBoundSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionBoundSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPartitionBoundSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPartitionBoundSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPartitionBoundSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionBoundSpecContext partitionBoundSpec() throws RecognitionException {
		PartitionBoundSpecContext _localctx = new PartitionBoundSpecContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_partitionBoundSpec);
		try {
			setState(1426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1400);
				match(FOR);
				setState(1401);
				match(VALUES);
				setState(1402);
				match(WITH);
				setState(1403);
				match(LP_);
				setState(1404);
				hashPartbound();
				setState(1405);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1407);
				match(FOR);
				setState(1408);
				match(VALUES);
				setState(1409);
				match(IN);
				setState(1410);
				match(LP_);
				setState(1411);
				exprList(0);
				setState(1412);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1414);
				match(FOR);
				setState(1415);
				match(VALUES);
				setState(1416);
				match(FROM);
				setState(1417);
				match(LP_);
				setState(1418);
				exprList(0);
				setState(1419);
				match(RP_);
				setState(1420);
				match(TO);
				setState(1421);
				match(LP_);
				setState(1422);
				exprList(0);
				setState(1423);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1425);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HashPartboundContext extends ParserRuleContext {
		public List<HashPartboundElemContext> hashPartboundElem() {
			return getRuleContexts(HashPartboundElemContext.class);
		}
		public HashPartboundElemContext hashPartboundElem(int i) {
			return getRuleContext(HashPartboundElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public HashPartboundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hashPartbound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterHashPartbound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitHashPartbound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitHashPartbound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HashPartboundContext hashPartbound() throws RecognitionException {
		HashPartboundContext _localctx = new HashPartboundContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_hashPartbound);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1428);
			hashPartboundElem();
			setState(1433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1429);
				match(COMMA_);
				setState(1430);
				hashPartboundElem();
				}
				}
				setState(1435);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HashPartboundElemContext extends ParserRuleContext {
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public HashPartboundElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hashPartboundElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterHashPartboundElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitHashPartboundElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitHashPartboundElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HashPartboundElemContext hashPartboundElem() throws RecognitionException {
		HashPartboundElemContext _localctx = new HashPartboundElemContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_hashPartboundElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1436);
			nonReservedWord();
			setState(1437);
			match(NUMBER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedTableElementListContext extends ParserRuleContext {
		public List<TypedTableElementContext> typedTableElement() {
			return getRuleContexts(TypedTableElementContext.class);
		}
		public TypedTableElementContext typedTableElement(int i) {
			return getRuleContext(TypedTableElementContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TypedTableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedTableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTypedTableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTypedTableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTypedTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedTableElementListContext typedTableElementList() throws RecognitionException {
		TypedTableElementListContext _localctx = new TypedTableElementListContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_typedTableElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1439);
			typedTableElement();
			setState(1444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1440);
				match(COMMA_);
				setState(1441);
				typedTableElement();
				}
				}
				setState(1446);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypedTableElementContext extends ParserRuleContext {
		public ColumnOptionsContext columnOptions() {
			return getRuleContext(ColumnOptionsContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TypedTableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typedTableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTypedTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTypedTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTypedTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypedTableElementContext typedTableElement() throws RecognitionException {
		TypedTableElementContext _localctx = new TypedTableElementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_typedTableElement);
		try {
			setState(1449);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1447);
				columnOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1448);
				tableConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnOptionsContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode OPTIONS() { return getToken(DDLStatementParser.OPTIONS, 0); }
		public ColumnOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnOptionsContext columnOptions() throws RecognitionException {
		ColumnOptionsContext _localctx = new ColumnOptionsContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_columnOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1451);
			colId();
			setState(1454);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1452);
				match(WITH);
				setState(1453);
				match(OPTIONS);
				}
			}

			setState(1456);
			colQualList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColQualListContext extends ParserRuleContext {
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColQualListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colQualList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColQualList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColQualList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColQualList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColQualListContext colQualList() throws RecognitionException {
		ColQualListContext _localctx = new ColQualListContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_colQualList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1461);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTRAINT - 66)) | (1L << (PRIMARY - 66)) | (1L << (UNIQUE - 66)) | (1L << (KEY - 66)) | (1L << (NOT - 66)) | (1L << (NULL - 66)))) != 0) || _la==DEFAULT || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (CHECK - 215)) | (1L << (GENERATED - 215)) | (1L << (REFERENCES - 215)))) != 0)) {
				{
				{
				setState(1458);
				columnConstraint();
				}
				}
				setState(1463);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithDataContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public WithDataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withData; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWithData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWithData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWithData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithDataContext withData() throws RecognitionException {
		WithDataContext _localctx = new WithDataContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_withData);
		try {
			setState(1469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1464);
				match(WITH);
				setState(1465);
				match(DATA);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1466);
				match(WITH);
				setState(1467);
				match(NO);
				setState(1468);
				match(DATA);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSpaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSpaceContext tableSpace() throws RecognitionException {
		TableSpaceContext _localctx = new TableSpaceContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_tableSpace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1471);
			match(TABLESPACE);
			setState(1472);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnCommitOptionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(DDLStatementParser.COMMIT, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode DELETE() { return getToken(DDLStatementParser.DELETE, 0); }
		public TerminalNode ROWS() { return getToken(DDLStatementParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(DDLStatementParser.PRESERVE, 0); }
		public OnCommitOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onCommitOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOnCommitOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOnCommitOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOnCommitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnCommitOptionContext onCommitOption() throws RecognitionException {
		OnCommitOptionContext _localctx = new OnCommitOptionContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_onCommitOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1474);
			match(ON);
			setState(1475);
			match(COMMIT);
			setState(1481);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DROP:
				{
				setState(1476);
				match(DROP);
				}
				break;
			case DELETE:
				{
				setState(1477);
				match(DELETE);
				setState(1478);
				match(ROWS);
				}
				break;
			case PRESERVE:
				{
				setState(1479);
				match(PRESERVE);
				setState(1480);
				match(ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(DDLStatementParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(DDLStatementParser.OIDS, 0); }
		public WithOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWithOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWithOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWithOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithOptionContext withOption() throws RecognitionException {
		WithOptionContext _localctx = new WithOptionContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_withOption);
		try {
			setState(1487);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1483);
				match(WITH);
				setState(1484);
				reloptions();
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1485);
				match(WITHOUT);
				setState(1486);
				match(OIDS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableAccessMethodClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public AccessMethodContext accessMethod() {
			return getRuleContext(AccessMethodContext.class,0);
		}
		public TableAccessMethodClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAccessMethodClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableAccessMethodClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableAccessMethodClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableAccessMethodClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableAccessMethodClauseContext tableAccessMethodClause() throws RecognitionException {
		TableAccessMethodClauseContext _localctx = new TableAccessMethodClauseContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_tableAccessMethodClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1489);
			match(USING);
			setState(1490);
			accessMethod();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AccessMethodContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public AccessMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accessMethod; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAccessMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAccessMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAccessMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AccessMethodContext accessMethod() throws RecognitionException {
		AccessMethodContext _localctx = new AccessMethodContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_accessMethod);
		try {
			setState(1495);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1492);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1493);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1494);
				colNameKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public CreateIndexSpecificationContext createIndexSpecification() {
			return getRuleContext(CreateIndexSpecificationContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public ConcurrentlyClauseContext concurrentlyClause() {
			return getRuleContext(ConcurrentlyClauseContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public OnlyClauseContext onlyClause() {
			return getRuleContext(OnlyClauseContext.class,0);
		}
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public IndexParamsContext indexParams() {
			return getRuleContext(IndexParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public IndexNotExistClauseContext indexNotExistClause() {
			return getRuleContext(IndexNotExistClauseContext.class,0);
		}
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public AccessMethodClauseContext accessMethodClause() {
			return getRuleContext(AccessMethodClauseContext.class,0);
		}
		public IncludeContext include() {
			return getRuleContext(IncludeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TableSpaceContext tableSpace() {
			return getRuleContext(TableSpaceContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexContext createIndex() throws RecognitionException {
		CreateIndexContext _localctx = new CreateIndexContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_createIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1497);
			match(CREATE);
			setState(1498);
			createIndexSpecification();
			setState(1499);
			match(INDEX);
			setState(1500);
			concurrentlyClause();
			setState(1504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (KEY - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (IF - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (VARYING - 129)) | (1L << (VALUE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (ENUM - 329)) | (1L << (XML - 329)) | (1L << (ORDINALITY - 329)) | (1L << (NFC - 329)) | (1L << (NFD - 329)) | (1L << (NFKC - 329)) | (1L << (NFKD - 329)) | (1L << (REF - 329)) | (1L << (PASSING - 329)) | (1L << (VERSION - 329)) | (1L << (YES - 329)) | (1L << (STANDALONE - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OPERATOR - 329)) | (1L << (SHARE - 329)) | (1L << (ROLLUP - 329)) | (1L << (DOCUMENT - 329)) | (1L << (NORMALIZED - 329)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)) | (1L << (FAMILY - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)) | (1L << (UNENCRYPTED - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (IDENTIFIER_ - 523)))) != 0)) {
				{
				setState(1501);
				indexNotExistClause();
				setState(1502);
				indexName();
				}
			}

			setState(1506);
			match(ON);
			setState(1507);
			onlyClause();
			setState(1508);
			tableName();
			setState(1510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1509);
				accessMethodClause();
				}
			}

			setState(1512);
			match(LP_);
			setState(1513);
			indexParams();
			setState(1514);
			match(RP_);
			setState(1516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(1515);
				include();
				}
			}

			setState(1520);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1518);
				match(WITH);
				setState(1519);
				reloptions();
				}
			}

			setState(1523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(1522);
				tableSpace();
				}
			}

			setState(1526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1525);
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludeContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(DDLStatementParser.INCLUDE, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public IndexIncludingParamsContext indexIncludingParams() {
			return getRuleContext(IndexIncludingParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_include; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterInclude(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitInclude(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitInclude(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IncludeContext include() throws RecognitionException {
		IncludeContext _localctx = new IncludeContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_include);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1528);
			match(INCLUDE);
			setState(1529);
			match(LP_);
			setState(1530);
			indexIncludingParams();
			setState(1531);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexIncludingParamsContext extends ParserRuleContext {
		public List<IndexElemContext> indexElem() {
			return getRuleContexts(IndexElemContext.class);
		}
		public IndexElemContext indexElem(int i) {
			return getRuleContext(IndexElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public IndexIncludingParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexIncludingParams; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexIncludingParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexIncludingParams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexIncludingParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexIncludingParamsContext indexIncludingParams() throws RecognitionException {
		IndexIncludingParamsContext _localctx = new IndexIncludingParamsContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_indexIncludingParams);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1533);
			indexElem();
			setState(1538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1534);
				match(COMMA_);
				setState(1535);
				indexElem();
				}
				}
				setState(1540);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AccessMethodClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public AccessMethodContext accessMethod() {
			return getRuleContext(AccessMethodContext.class,0);
		}
		public AccessMethodClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accessMethodClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAccessMethodClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAccessMethodClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAccessMethodClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AccessMethodClauseContext accessMethodClause() throws RecognitionException {
		AccessMethodClauseContext _localctx = new AccessMethodClauseContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_accessMethodClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1541);
			match(USING);
			setState(1542);
			accessMethod();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(DDLStatementParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public List<CreateDatabaseSpecificationContext> createDatabaseSpecification() {
			return getRuleContexts(CreateDatabaseSpecificationContext.class);
		}
		public CreateDatabaseSpecificationContext createDatabaseSpecification(int i) {
			return getRuleContext(CreateDatabaseSpecificationContext.class,i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1544);
			match(CREATE);
			setState(1545);
			match(DATABASE);
			setState(1546);
			name();
			setState(1548);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1547);
				match(WITH);
				}
			}

			setState(1553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (KEY - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (IF - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (VARYING - 129)) | (1L << (VALUE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (ENUM - 329)) | (1L << (XML - 329)) | (1L << (ORDINALITY - 329)) | (1L << (NFC - 329)) | (1L << (NFD - 329)) | (1L << (NFKC - 329)) | (1L << (NFKD - 329)) | (1L << (REF - 329)) | (1L << (PASSING - 329)) | (1L << (VERSION - 329)) | (1L << (YES - 329)) | (1L << (STANDALONE - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OPERATOR - 329)) | (1L << (SHARE - 329)) | (1L << (ROLLUP - 329)) | (1L << (DOCUMENT - 329)) | (1L << (NORMALIZED - 329)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)) | (1L << (FAMILY - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)) | (1L << (UNENCRYPTED - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (IDENTIFIER_ - 523)))) != 0)) {
				{
				{
				setState(1550);
				createDatabaseSpecification();
				}
				}
				setState(1555);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public TerminalNode RECURSIVE() { return getToken(DDLStatementParser.RECURSIVE, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public List<TerminalNode> WITH() { return getTokens(DDLStatementParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(DDLStatementParser.WITH, i);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(DDLStatementParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(DDLStatementParser.OPTION, 0); }
		public TerminalNode TEMP() { return getToken(DDLStatementParser.TEMP, 0); }
		public TerminalNode TEMPORARY() { return getToken(DDLStatementParser.TEMPORARY, 0); }
		public List<ColumnListContext> columnList() {
			return getRuleContexts(ColumnListContext.class);
		}
		public ColumnListContext columnList(int i) {
			return getRuleContext(ColumnListContext.class,i);
		}
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public TerminalNode LOCAL() { return getToken(DDLStatementParser.LOCAL, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public CreateViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewContext createView() throws RecognitionException {
		CreateViewContext _localctx = new CreateViewContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_createView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1556);
			match(CREATE);
			setState(1559);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1557);
				match(OR);
				setState(1558);
				match(REPLACE);
				}
			}

			setState(1562);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(1561);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1565);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECURSIVE) {
				{
				setState(1564);
				match(RECURSIVE);
				}
			}

			setState(1567);
			match(VIEW);
			setState(1568);
			qualifiedName();
			setState(1581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(1569);
				match(LP_);
				setState(1578);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (KEY - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (IF - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (VARYING - 129)) | (1L << (VALUE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (ENUM - 329)) | (1L << (XML - 329)) | (1L << (ORDINALITY - 329)) | (1L << (NFC - 329)) | (1L << (NFD - 329)) | (1L << (NFKC - 329)) | (1L << (NFKD - 329)) | (1L << (REF - 329)) | (1L << (PASSING - 329)) | (1L << (VERSION - 329)) | (1L << (YES - 329)) | (1L << (STANDALONE - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OPERATOR - 329)) | (1L << (SHARE - 329)) | (1L << (ROLLUP - 329)) | (1L << (DOCUMENT - 329)) | (1L << (NORMALIZED - 329)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)) | (1L << (FAMILY - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)) | (1L << (UNENCRYPTED - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (IDENTIFIER_ - 523)))) != 0)) {
					{
					setState(1570);
					columnList();
					setState(1575);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA_) {
						{
						{
						setState(1571);
						match(COMMA_);
						setState(1572);
						columnList();
						}
						}
						setState(1577);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(1580);
				match(RP_);
				}
			}

			setState(1585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1583);
				match(WITH);
				setState(1584);
				reloptions();
				}
			}

			setState(1587);
			match(AS);
			setState(1588);
			select();
			setState(1595);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1589);
				match(WITH);
				setState(1591);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==CASCADE) {
					{
					setState(1590);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==CASCADE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1593);
				match(CHECK);
				setState(1594);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnListContext extends ParserRuleContext {
		public List<ColumnElemContext> columnElem() {
			return getRuleContexts(ColumnElemContext.class);
		}
		public ColumnElemContext columnElem(int i) {
			return getRuleContext(ColumnElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public ColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnListContext columnList() throws RecognitionException {
		ColumnListContext _localctx = new ColumnListContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_columnList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1597);
			columnElem();
			setState(1602);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,41,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1598);
					match(COMMA_);
					setState(1599);
					columnElem();
					}
					} 
				}
				setState(1604);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,41,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ColumnElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnElemContext columnElem() throws RecognitionException {
		ColumnElemContext _localctx = new ColumnElemContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_columnElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1605);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(DDLStatementParser.DATABASE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_dropDatabase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1607);
			match(DROP);
			setState(1608);
			match(DATABASE);
			setState(1611);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				setState(1609);
				match(IF);
				setState(1610);
				match(EXISTS);
				}
				break;
			}
			setState(1613);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseSpecificationContext extends ParserRuleContext {
		public CreatedbOptNameContext createdbOptName() {
			return getRuleContext(CreatedbOptNameContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public CreateDatabaseSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabaseSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateDatabaseSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateDatabaseSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateDatabaseSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseSpecificationContext createDatabaseSpecification() throws RecognitionException {
		CreateDatabaseSpecificationContext _localctx = new CreateDatabaseSpecificationContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_createDatabaseSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1615);
			createdbOptName();
			setState(1617);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(1616);
				match(EQ_);
				}
			}

			setState(1622);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				{
				setState(1619);
				signedIconst();
				}
				break;
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
				{
				setState(1620);
				booleanOrString();
				}
				break;
			case DEFAULT:
				{
				setState(1621);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedbOptNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(DDLStatementParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(DDLStatementParser.LIMIT, 0); }
		public TerminalNode ENCODING() { return getToken(DDLStatementParser.ENCODING, 0); }
		public TerminalNode LOCATION() { return getToken(DDLStatementParser.LOCATION, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public TerminalNode TEMPLATE() { return getToken(DDLStatementParser.TEMPLATE, 0); }
		public CreatedbOptNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbOptName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreatedbOptName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreatedbOptName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreatedbOptName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbOptNameContext createdbOptName() throws RecognitionException {
		CreatedbOptNameContext _localctx = new CreatedbOptNameContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_createdbOptName);
		try {
			setState(1632);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1624);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1625);
				match(CONNECTION);
				setState(1626);
				match(LIMIT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1627);
				match(ENCODING);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1628);
				match(LOCATION);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1629);
				match(OWNER);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1630);
				match(TABLESPACE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1631);
				match(TEMPLATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TableExistClauseContext tableExistClause() {
			return getRuleContext(TableExistClauseContext.class,0);
		}
		public OnlyClauseContext onlyClause() {
			return getRuleContext(OnlyClauseContext.class,0);
		}
		public TableNameClauseContext tableNameClause() {
			return getRuleContext(TableNameClauseContext.class,0);
		}
		public AlterDefinitionClauseContext alterDefinitionClause() {
			return getRuleContext(AlterDefinitionClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(DDLStatementParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(DDLStatementParser.TABLESPACE, i);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNED() { return getToken(DDLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(DDLStatementParser.NOWAIT, 0); }
		public AlterTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableContext alterTable() throws RecognitionException {
		AlterTableContext _localctx = new AlterTableContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_alterTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1634);
			match(ALTER);
			setState(1635);
			match(TABLE);
			setState(1656);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case ONLY:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(1636);
				tableExistClause();
				setState(1637);
				onlyClause();
				setState(1638);
				tableNameClause();
				setState(1639);
				alterDefinitionClause();
				}
				break;
			case ALL:
				{
				setState(1641);
				match(ALL);
				setState(1642);
				match(IN);
				setState(1643);
				match(TABLESPACE);
				setState(1644);
				tableNameClause();
				setState(1648);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(1645);
					match(OWNED);
					setState(1646);
					match(BY);
					setState(1647);
					roleList();
					}
				}

				setState(1650);
				match(SET);
				setState(1651);
				match(TABLESPACE);
				setState(1652);
				name();
				setState(1654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOWAIT) {
					{
					setState(1653);
					match(NOWAIT);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public AlterIndexDefinitionClauseContext alterIndexDefinitionClause() {
			return getRuleContext(AlterIndexDefinitionClauseContext.class,0);
		}
		public IndexExistClauseContext indexExistClause() {
			return getRuleContext(IndexExistClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public AlterIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexContext alterIndex() throws RecognitionException {
		AlterIndexContext _localctx = new AlterIndexContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_alterIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1658);
			match(ALTER);
			setState(1659);
			match(INDEX);
			setState(1664);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(1660);
				indexExistClause();
				}
				break;
			case ALL:
				{
				setState(1661);
				match(ALL);
				setState(1662);
				match(IN);
				setState(1663);
				match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1666);
			indexName();
			setState(1667);
			alterIndexDefinitionClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TableExistClauseContext tableExistClause() {
			return getRuleContext(TableExistClauseContext.class,0);
		}
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public DropTableOptContext dropTableOpt() {
			return getRuleContext(DropTableOptContext.class,0);
		}
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1669);
			match(DROP);
			setState(1670);
			match(TABLE);
			setState(1671);
			tableExistClause();
			setState(1672);
			tableNames();
			setState(1674);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(1673);
				dropTableOpt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableOptContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public DropTableOptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTableOpt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropTableOpt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropTableOpt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropTableOpt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableOptContext dropTableOpt() throws RecognitionException {
		DropTableOptContext _localctx = new DropTableOptContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_dropTableOpt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1676);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public ConcurrentlyClauseContext concurrentlyClause() {
			return getRuleContext(ConcurrentlyClauseContext.class,0);
		}
		public IndexExistClauseContext indexExistClause() {
			return getRuleContext(IndexExistClauseContext.class,0);
		}
		public IndexNamesContext indexNames() {
			return getRuleContext(IndexNamesContext.class,0);
		}
		public DropIndexOptContext dropIndexOpt() {
			return getRuleContext(DropIndexOptContext.class,0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexContext dropIndex() throws RecognitionException {
		DropIndexContext _localctx = new DropIndexContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_dropIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1678);
			match(DROP);
			setState(1679);
			match(INDEX);
			setState(1680);
			concurrentlyClause();
			setState(1681);
			indexExistClause();
			setState(1682);
			indexNames();
			setState(1684);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(1683);
				dropIndexOpt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropIndexOptContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public DropIndexOptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropIndexOpt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropIndexOpt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropIndexOpt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropIndexOpt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropIndexOptContext dropIndexOpt() throws RecognitionException {
		DropIndexOptContext _localctx = new DropIndexOptContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_dropIndexOpt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1686);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(DDLStatementParser.TRUNCATE, 0); }
		public OnlyClauseContext onlyClause() {
			return getRuleContext(OnlyClauseContext.class,0);
		}
		public TableNamesClauseContext tableNamesClause() {
			return getRuleContext(TableNamesClauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public RestartSeqsContext restartSeqs() {
			return getRuleContext(RestartSeqsContext.class,0);
		}
		public DropTableOptContext dropTableOpt() {
			return getRuleContext(DropTableOptContext.class,0);
		}
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1688);
			match(TRUNCATE);
			setState(1690);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(1689);
				match(TABLE);
				}
			}

			setState(1692);
			onlyClause();
			setState(1693);
			tableNamesClause();
			setState(1695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESTART || _la==CONTINUE) {
				{
				setState(1694);
				restartSeqs();
				}
			}

			setState(1698);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(1697);
				dropTableOpt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RestartSeqsContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(DDLStatementParser.CONTINUE, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public TerminalNode RESTART() { return getToken(DDLStatementParser.RESTART, 0); }
		public RestartSeqsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_restartSeqs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRestartSeqs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRestartSeqs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRestartSeqs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RestartSeqsContext restartSeqs() throws RecognitionException {
		RestartSeqsContext _localctx = new RestartSeqsContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_restartSeqs);
		try {
			setState(1704);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTINUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1700);
				match(CONTINUE);
				setState(1701);
				match(IDENTITY);
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 2);
				{
				setState(1702);
				match(RESTART);
				setState(1703);
				match(IDENTITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableSpecificationContext extends ParserRuleContext {
		public TerminalNode UNLOGGED() { return getToken(DDLStatementParser.UNLOGGED, 0); }
		public TerminalNode TEMPORARY() { return getToken(DDLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(DDLStatementParser.TEMP, 0); }
		public TerminalNode GLOBAL() { return getToken(DDLStatementParser.GLOBAL, 0); }
		public TerminalNode LOCAL() { return getToken(DDLStatementParser.LOCAL, 0); }
		public CreateTableSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateTableSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateTableSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateTableSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableSpecificationContext createTableSpecification() throws RecognitionException {
		CreateTableSpecificationContext _localctx = new CreateTableSpecificationContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_createTableSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1711);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL:
			case GLOBAL:
			case TEMP:
			case TEMPORARY:
				{
				setState(1707);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==GLOBAL) {
					{
					setState(1706);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==GLOBAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1709);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNLOGGED:
				{
				setState(1710);
				match(UNLOGGED);
				}
				break;
			case TABLE:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNotExistClauseContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public TableNotExistClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNotExistClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableNotExistClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableNotExistClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableNotExistClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNotExistClauseContext tableNotExistClause() throws RecognitionException {
		TableNotExistClauseContext _localctx = new TableNotExistClauseContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_tableNotExistClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1713);
			match(IF);
			setState(1714);
			match(NOT);
			setState(1715);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public CreateDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateDefinitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateDefinitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionClauseContext createDefinitionClause() throws RecognitionException {
		CreateDefinitionClauseContext _localctx = new CreateDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_createDefinitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1717);
			match(LP_);
			setState(1726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (PRIMARY - 65)) | (1L << (UNIQUE - 65)) | (1L << (FOREIGN - 65)) | (1L << (KEY - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (IF - 65)) | (1L << (LIKE - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (VARYING - 129)) | (1L << (VALUE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (CHECK - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (ENUM - 329)) | (1L << (XML - 329)) | (1L << (ORDINALITY - 329)) | (1L << (NFC - 329)) | (1L << (NFD - 329)) | (1L << (NFKC - 329)) | (1L << (NFKD - 329)) | (1L << (REF - 329)) | (1L << (PASSING - 329)) | (1L << (VERSION - 329)) | (1L << (YES - 329)) | (1L << (STANDALONE - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OPERATOR - 329)) | (1L << (SHARE - 329)) | (1L << (ROLLUP - 329)) | (1L << (DOCUMENT - 329)) | (1L << (NORMALIZED - 329)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)) | (1L << (FAMILY - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)) | (1L << (UNENCRYPTED - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (IDENTIFIER_ - 523)))) != 0)) {
				{
				setState(1718);
				createDefinition();
				setState(1723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(1719);
					match(COMMA_);
					setState(1720);
					createDefinition();
					}
					}
					setState(1725);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1728);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(DDLStatementParser.LIKE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<LikeOptionContext> likeOption() {
			return getRuleContexts(LikeOptionContext.class);
		}
		public LikeOptionContext likeOption(int i) {
			return getRuleContext(LikeOptionContext.class,i);
		}
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_createDefinition);
		int _la;
		try {
			setState(1740);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1730);
				columnDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1731);
				tableConstraint();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1732);
				match(LIKE);
				setState(1733);
				tableName();
				setState(1737);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXCLUDING || _la==INCLUDING) {
					{
					{
					setState(1734);
					likeOption();
					}
					}
					setState(1739);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_columnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1742);
			columnName();
			setState(1743);
			dataType();
			setState(1745);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(1744);
				collateClause();
				}
			}

			setState(1750);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTRAINT - 66)) | (1L << (PRIMARY - 66)) | (1L << (UNIQUE - 66)) | (1L << (KEY - 66)) | (1L << (NOT - 66)) | (1L << (NULL - 66)))) != 0) || _la==DEFAULT || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (CHECK - 215)) | (1L << (GENERATED - 215)) | (1L << (REFERENCES - 215)))) != 0)) {
				{
				{
				setState(1747);
				columnConstraint();
				}
				}
				setState(1752);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintOptionContext columnConstraintOption() {
			return getRuleContext(ColumnConstraintOptionContext.class,0);
		}
		public ConstraintOptionalParamContext constraintOptionalParam() {
			return getRuleContext(ConstraintOptionalParamContext.class,0);
		}
		public ConstraintClauseContext constraintClause() {
			return getRuleContext(ConstraintClauseContext.class,0);
		}
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_columnConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1754);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1753);
				constraintClause();
				}
			}

			setState(1756);
			columnConstraintOption();
			setState(1757);
			constraintOptionalParam();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintClauseContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public ConstraintClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConstraintClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConstraintClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConstraintClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintClauseContext constraintClause() throws RecognitionException {
		ConstraintClauseContext _localctx = new ConstraintClauseContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_constraintClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1759);
			match(CONSTRAINT);
			setState(1760);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintOptionContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public CheckOptionContext checkOption() {
			return getRuleContext(CheckOptionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public DefaultExprContext defaultExpr() {
			return getRuleContext(DefaultExprContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(DDLStatementParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(DDLStatementParser.ALWAYS, 0); }
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode STORED() { return getToken(DDLStatementParser.STORED, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public SequenceOptionsContext sequenceOptions() {
			return getRuleContext(SequenceOptionsContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(DDLStatementParser.UNIQUE, 0); }
		public IndexParametersContext indexParameters() {
			return getRuleContext(IndexParametersContext.class,0);
		}
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(DDLStatementParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(DDLStatementParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(DDLStatementParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(DDLStatementParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(DDLStatementParser.SIMPLE, 0); }
		public List<TerminalNode> ON() { return getTokens(DDLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(DDLStatementParser.ON, i);
		}
		public List<ActionContext> action() {
			return getRuleContexts(ActionContext.class);
		}
		public ActionContext action(int i) {
			return getRuleContext(ActionContext.class,i);
		}
		public List<TerminalNode> DELETE() { return getTokens(DDLStatementParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(DDLStatementParser.DELETE, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(DDLStatementParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(DDLStatementParser.UPDATE, i);
		}
		public ColumnConstraintOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraintOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnConstraintOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnConstraintOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnConstraintOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintOptionContext columnConstraintOption() throws RecognitionException {
		ColumnConstraintOptionContext _localctx = new ColumnConstraintOptionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_columnConstraintOption);
		int _la;
		try {
			setState(1817);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,71,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1763);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1762);
					match(NOT);
					}
				}

				setState(1765);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1766);
				checkOption();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1767);
				match(DEFAULT);
				setState(1768);
				defaultExpr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1769);
				match(GENERATED);
				setState(1770);
				match(ALWAYS);
				setState(1771);
				match(AS);
				setState(1772);
				match(LP_);
				setState(1773);
				aExpr(0);
				setState(1774);
				match(RP_);
				setState(1775);
				match(STORED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1777);
				match(GENERATED);
				setState(1781);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(1778);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					setState(1779);
					match(BY);
					setState(1780);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1783);
				match(AS);
				setState(1784);
				match(IDENTITY);
				setState(1789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(1785);
					match(LP_);
					setState(1786);
					sequenceOptions();
					setState(1787);
					match(RP_);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1791);
				match(UNIQUE);
				setState(1792);
				indexParameters();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1793);
				primaryKey();
				setState(1794);
				indexParameters();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1796);
				match(REFERENCES);
				setState(1797);
				tableName();
				setState(1799);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(1798);
					columnNames();
					}
				}

				setState(1807);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
				case 1:
					{
					setState(1801);
					match(MATCH);
					setState(1802);
					match(FULL);
					}
					break;
				case 2:
					{
					setState(1803);
					match(MATCH);
					setState(1804);
					match(PARTIAL);
					}
					break;
				case 3:
					{
					setState(1805);
					match(MATCH);
					setState(1806);
					match(SIMPLE);
					}
					break;
				}
				setState(1814);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ON) {
					{
					{
					setState(1809);
					match(ON);
					setState(1810);
					_la = _input.LA(1);
					if ( !(_la==UPDATE || _la==DELETE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1811);
					action();
					}
					}
					setState(1816);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckOptionContext extends ParserRuleContext {
		public TerminalNode CHECK() { return getToken(DDLStatementParser.CHECK, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(DDLStatementParser.INHERIT, 0); }
		public CheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCheckOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCheckOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCheckOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckOptionContext checkOption() throws RecognitionException {
		CheckOptionContext _localctx = new CheckOptionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_checkOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1819);
			match(CHECK);
			setState(1820);
			aExpr(0);
			setState(1823);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO) {
				{
				setState(1821);
				match(NO);
				setState(1822);
				match(INHERIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultExprContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DDLStatementParser.CURRENT_TIMESTAMP, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public DefaultExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefaultExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefaultExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefaultExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultExprContext defaultExpr() throws RecognitionException {
		DefaultExprContext _localctx = new DefaultExprContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_defaultExpr);
		try {
			setState(1827);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1825);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1826);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceOptionsContext extends ParserRuleContext {
		public List<SequenceOptionContext> sequenceOption() {
			return getRuleContexts(SequenceOptionContext.class);
		}
		public SequenceOptionContext sequenceOption(int i) {
			return getRuleContext(SequenceOptionContext.class,i);
		}
		public SequenceOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSequenceOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSequenceOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSequenceOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceOptionsContext sequenceOptions() throws RecognitionException {
		SequenceOptionsContext _localctx = new SequenceOptionsContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_sequenceOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1830); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1829);
				sequenceOption();
				}
				}
				setState(1832); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 219)) & ~0x3f) == 0 && ((1L << (_la - 219)) & ((1L << (NO - 219)) | (1L << (START - 219)) | (1L << (CACHE - 219)) | (1L << (CYCLE - 219)) | (1L << (INCREMENT - 219)) | (1L << (MAXVALUE - 219)) | (1L << (MINVALUE - 219)) | (1L << (OWNED - 219)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceOptionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(DDLStatementParser.START, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode INCREMENT() { return getToken(DDLStatementParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public TerminalNode MAXVALUE() { return getToken(DDLStatementParser.MAXVALUE, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode MINVALUE() { return getToken(DDLStatementParser.MINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(DDLStatementParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(DDLStatementParser.CACHE, 0); }
		public TerminalNode OWNED() { return getToken(DDLStatementParser.OWNED, 0); }
		public SequenceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSequenceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSequenceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSequenceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceOptionContext sequenceOption() throws RecognitionException {
		SequenceOptionContext _localctx = new SequenceOptionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_sequenceOption);
		int _la;
		try {
			setState(1859);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1834);
				match(START);
				setState(1836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1835);
					match(WITH);
					}
				}

				setState(1838);
				match(NUMBER_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1839);
				match(INCREMENT);
				setState(1841);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(1840);
					match(BY);
					}
				}

				setState(1843);
				match(NUMBER_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1844);
				match(MAXVALUE);
				setState(1845);
				match(NUMBER_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1846);
				match(NO);
				setState(1847);
				match(MAXVALUE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1848);
				match(MINVALUE);
				setState(1849);
				match(NUMBER_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1850);
				match(NO);
				setState(1851);
				match(MINVALUE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1852);
				match(CYCLE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1853);
				match(NO);
				setState(1854);
				match(CYCLE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1855);
				match(CACHE);
				setState(1856);
				match(NUMBER_);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1857);
				match(OWNED);
				setState(1858);
				match(BY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexParametersContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode INCLUDE() { return getToken(DDLStatementParser.INCLUDE, 0); }
		public ColumnNamesContext columnNames() {
			return getRuleContext(ColumnNamesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public IndexParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexParameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexParameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexParametersContext indexParameters() throws RecognitionException {
		IndexParametersContext _localctx = new IndexParametersContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_indexParameters);
		int _la;
		try {
			setState(1871);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case RP_:
			case COMMA_:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case KEY:
			case USING:
			case WHERE:
			case NOT:
			case NULL:
			case DEFAULT:
			case CHECK:
			case GENERATED:
			case REFERENCES:
			case DEFERRABLE:
			case INITIALLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(1865);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1861);
					match(USING);
					setState(1862);
					match(INDEX);
					setState(1863);
					match(TABLESPACE);
					setState(1864);
					ignoredIdentifier();
					}
				}

				}
				break;
			case INCLUDE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1867);
				match(INCLUDE);
				setState(1868);
				columnNames();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(1869);
				match(WITH);
				setState(1870);
				definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ActionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(DDLStatementParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ActionContext action() throws RecognitionException {
		ActionContext _localctx = new ActionContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_action);
		int _la;
		try {
			setState(1879);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(1873);
				match(NO);
				setState(1874);
				match(ACTION);
				}
				break;
			case RESTRICT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1875);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1876);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(1877);
				match(SET);
				setState(1878);
				_la = _input.LA(1);
				if ( !(_la==NULL || _la==DEFAULT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintOptionalParamContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(DDLStatementParser.DEFERRABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(DDLStatementParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(DDLStatementParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(DDLStatementParser.IMMEDIATE, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public ConstraintOptionalParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintOptionalParam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConstraintOptionalParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConstraintOptionalParam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConstraintOptionalParam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintOptionalParamContext constraintOptionalParam() throws RecognitionException {
		ConstraintOptionalParamContext _localctx = new ConstraintOptionalParamContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_constraintOptionalParam);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1885);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				setState(1882);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1881);
					match(NOT);
					}
				}

				setState(1884);
				match(DEFERRABLE);
				}
				break;
			}
			setState(1889);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIALLY) {
				{
				setState(1887);
				match(INITIALLY);
				setState(1888);
				_la = _input.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikeOptionContext extends ParserRuleContext {
		public TerminalNode INCLUDING() { return getToken(DDLStatementParser.INCLUDING, 0); }
		public TerminalNode EXCLUDING() { return getToken(DDLStatementParser.EXCLUDING, 0); }
		public TerminalNode COMMENTS() { return getToken(DDLStatementParser.COMMENTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(DDLStatementParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(DDLStatementParser.DEFAULTS, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public TerminalNode INDEXES() { return getToken(DDLStatementParser.INDEXES, 0); }
		public TerminalNode STATISTICS() { return getToken(DDLStatementParser.STATISTICS, 0); }
		public TerminalNode STORAGE() { return getToken(DDLStatementParser.STORAGE, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public LikeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterLikeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitLikeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitLikeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikeOptionContext likeOption() throws RecognitionException {
		LikeOptionContext _localctx = new LikeOptionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_likeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1891);
			_la = _input.LA(1);
			if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1892);
			_la = _input.LA(1);
			if ( !(_la==ALL || ((((_la - 234)) & ~0x3f) == 0 && ((1L << (_la - 234)) & ((1L << (COMMENTS - 234)) | (1L << (CONSTRAINTS - 234)) | (1L << (DEFAULTS - 234)) | (1L << (IDENTITY - 234)) | (1L << (INDEXES - 234)))) != 0) || _la==STATISTICS || _la==STORAGE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintOptionContext tableConstraintOption() {
			return getRuleContext(TableConstraintOptionContext.class,0);
		}
		public ConstraintOptionalParamContext constraintOptionalParam() {
			return getRuleContext(ConstraintOptionalParamContext.class,0);
		}
		public ConstraintClauseContext constraintClause() {
			return getRuleContext(ConstraintClauseContext.class,0);
		}
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_tableConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1894);
				constraintClause();
				}
			}

			setState(1897);
			tableConstraintOption();
			setState(1898);
			constraintOptionalParam();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintOptionContext extends ParserRuleContext {
		public CheckOptionContext checkOption() {
			return getRuleContext(CheckOptionContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(DDLStatementParser.UNIQUE, 0); }
		public List<ColumnNamesContext> columnNames() {
			return getRuleContexts(ColumnNamesContext.class);
		}
		public ColumnNamesContext columnNames(int i) {
			return getRuleContext(ColumnNamesContext.class,i);
		}
		public IndexParametersContext indexParameters() {
			return getRuleContext(IndexParametersContext.class,0);
		}
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public TerminalNode EXCLUDE() { return getToken(DDLStatementParser.EXCLUDE, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExclusionConstraintListContext exclusionConstraintList() {
			return getRuleContext(ExclusionConstraintListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public ExclusionWhereClauseContext exclusionWhereClause() {
			return getRuleContext(ExclusionWhereClauseContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(DDLStatementParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(DDLStatementParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(DDLStatementParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(DDLStatementParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(DDLStatementParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(DDLStatementParser.SIMPLE, 0); }
		public List<TerminalNode> ON() { return getTokens(DDLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(DDLStatementParser.ON, i);
		}
		public List<ActionContext> action() {
			return getRuleContexts(ActionContext.class);
		}
		public ActionContext action(int i) {
			return getRuleContext(ActionContext.class,i);
		}
		public List<TerminalNode> DELETE() { return getTokens(DDLStatementParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(DDLStatementParser.DELETE, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(DDLStatementParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(DDLStatementParser.UPDATE, i);
		}
		public TableConstraintOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraintOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableConstraintOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableConstraintOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableConstraintOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintOptionContext tableConstraintOption() throws RecognitionException {
		TableConstraintOptionContext _localctx = new TableConstraintOptionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_tableConstraintOption);
		int _la;
		try {
			setState(1945);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECK:
				enterOuterAlt(_localctx, 1);
				{
				setState(1900);
				checkOption();
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1901);
				match(UNIQUE);
				setState(1902);
				columnNames();
				setState(1903);
				indexParameters();
				}
				break;
			case PRIMARY:
			case KEY:
				enterOuterAlt(_localctx, 3);
				{
				setState(1905);
				primaryKey();
				setState(1906);
				columnNames();
				setState(1907);
				indexParameters();
				}
				break;
			case EXCLUDE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1909);
				match(EXCLUDE);
				setState(1912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1910);
					match(USING);
					setState(1911);
					ignoredIdentifier();
					}
				}

				setState(1914);
				match(LP_);
				setState(1915);
				exclusionConstraintList();
				setState(1916);
				match(RP_);
				setState(1917);
				indexParameters();
				setState(1919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(1918);
					exclusionWhereClause();
					}
				}

				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 5);
				{
				setState(1921);
				match(FOREIGN);
				setState(1922);
				match(KEY);
				setState(1923);
				columnNames();
				setState(1924);
				match(REFERENCES);
				setState(1925);
				tableName();
				setState(1927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(1926);
					columnNames();
					}
				}

				setState(1935);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
				case 1:
					{
					setState(1929);
					match(MATCH);
					setState(1930);
					match(FULL);
					}
					break;
				case 2:
					{
					setState(1931);
					match(MATCH);
					setState(1932);
					match(PARTIAL);
					}
					break;
				case 3:
					{
					setState(1933);
					match(MATCH);
					setState(1934);
					match(SIMPLE);
					}
					break;
				}
				setState(1942);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ON) {
					{
					{
					setState(1937);
					match(ON);
					setState(1938);
					_la = _input.LA(1);
					if ( !(_la==UPDATE || _la==DELETE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1939);
					action();
					}
					}
					setState(1944);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionWhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(DDLStatementParser.WHERE, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ExclusionWhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionWhereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExclusionWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExclusionWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExclusionWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionWhereClauseContext exclusionWhereClause() throws RecognitionException {
		ExclusionWhereClauseContext _localctx = new ExclusionWhereClauseContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_exclusionWhereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1947);
			match(WHERE);
			setState(1948);
			match(LP_);
			setState(1949);
			aExpr(0);
			setState(1950);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionConstraintListContext extends ParserRuleContext {
		public List<ExclusionConstraintElemContext> exclusionConstraintElem() {
			return getRuleContexts(ExclusionConstraintElemContext.class);
		}
		public ExclusionConstraintElemContext exclusionConstraintElem(int i) {
			return getRuleContext(ExclusionConstraintElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public ExclusionConstraintListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionConstraintList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExclusionConstraintList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExclusionConstraintList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExclusionConstraintList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionConstraintListContext exclusionConstraintList() throws RecognitionException {
		ExclusionConstraintListContext _localctx = new ExclusionConstraintListContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_exclusionConstraintList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1952);
			exclusionConstraintElem();
			setState(1957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1953);
				match(COMMA_);
				setState(1954);
				exclusionConstraintElem();
				}
				}
				setState(1959);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExclusionConstraintElemContext extends ParserRuleContext {
		public IndexElemContext indexElem() {
			return getRuleContext(IndexElemContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ExclusionConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exclusionConstraintElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExclusionConstraintElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExclusionConstraintElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExclusionConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExclusionConstraintElemContext exclusionConstraintElem() throws RecognitionException {
		ExclusionConstraintElemContext _localctx = new ExclusionConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_exclusionConstraintElem);
		try {
			setState(1971);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1960);
				indexElem();
				setState(1961);
				match(WITH);
				setState(1962);
				anyOperator();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1964);
				indexElem();
				setState(1965);
				match(WITH);
				setState(1966);
				match(OPERATOR);
				setState(1967);
				match(LP_);
				setState(1968);
				anyOperator();
				setState(1969);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InheritClauseContext extends ParserRuleContext {
		public TerminalNode INHERITS() { return getToken(DDLStatementParser.INHERITS, 0); }
		public TableNamesContext tableNames() {
			return getRuleContext(TableNamesContext.class,0);
		}
		public InheritClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inheritClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterInheritClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitInheritClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitInheritClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InheritClauseContext inheritClause() throws RecognitionException {
		InheritClauseContext _localctx = new InheritClauseContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_inheritClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INHERITS) {
				{
				setState(1973);
				match(INHERITS);
				setState(1974);
				tableNames();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionSpecContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DDLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public PartStrategyContext partStrategy() {
			return getRuleContext(PartStrategyContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public PartParamsContext partParams() {
			return getRuleContext(PartParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public PartitionSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPartitionSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPartitionSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPartitionSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionSpecContext partitionSpec() throws RecognitionException {
		PartitionSpecContext _localctx = new PartitionSpecContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_partitionSpec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1977);
			match(PARTITION);
			setState(1978);
			match(BY);
			setState(1979);
			partStrategy();
			setState(1980);
			match(LP_);
			setState(1981);
			partParams();
			setState(1982);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartParamsContext extends ParserRuleContext {
		public List<PartElemContext> partElem() {
			return getRuleContexts(PartElemContext.class);
		}
		public PartElemContext partElem(int i) {
			return getRuleContext(PartElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public PartParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partParams; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPartParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPartParams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPartParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartParamsContext partParams() throws RecognitionException {
		PartParamsContext _localctx = new PartParamsContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_partParams);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1984);
			partElem();
			setState(1989);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(1985);
				match(COMMA_);
				setState(1986);
				partElem();
				}
				}
				setState(1991);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(DDLStatementParser.COLLATE, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public FuncExprWindowlessContext funcExprWindowless() {
			return getRuleContext(FuncExprWindowlessContext.class,0);
		}
		public PartElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPartElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPartElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPartElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartElemContext partElem() throws RecognitionException {
		PartElemContext _localctx = new PartElemContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_partElem);
		int _la;
		try {
			setState(2018);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1992);
				colId();
				setState(1995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(1993);
					match(COLLATE);
					setState(1994);
					anyName();
					}
				}

				setState(1998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (KEY - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (IF - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (VARYING - 129)) | (1L << (VALUE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (ENUM - 329)) | (1L << (XML - 329)) | (1L << (ORDINALITY - 329)) | (1L << (NFC - 329)) | (1L << (NFD - 329)) | (1L << (NFKC - 329)) | (1L << (NFKD - 329)) | (1L << (REF - 329)) | (1L << (PASSING - 329)) | (1L << (VERSION - 329)) | (1L << (YES - 329)) | (1L << (STANDALONE - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OPERATOR - 329)) | (1L << (SHARE - 329)) | (1L << (ROLLUP - 329)) | (1L << (DOCUMENT - 329)) | (1L << (NORMALIZED - 329)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)) | (1L << (FAMILY - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)) | (1L << (UNENCRYPTED - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (IDENTIFIER_ - 523)))) != 0)) {
					{
					setState(1997);
					anyName();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2000);
				match(LP_);
				setState(2001);
				aExpr(0);
				setState(2002);
				match(RP_);
				setState(2005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2003);
					match(COLLATE);
					setState(2004);
					anyName();
					}
				}

				setState(2008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (KEY - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (IF - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (VARYING - 129)) | (1L << (VALUE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (ENUM - 329)) | (1L << (XML - 329)) | (1L << (ORDINALITY - 329)) | (1L << (NFC - 329)) | (1L << (NFD - 329)) | (1L << (NFKC - 329)) | (1L << (NFKD - 329)) | (1L << (REF - 329)) | (1L << (PASSING - 329)) | (1L << (VERSION - 329)) | (1L << (YES - 329)) | (1L << (STANDALONE - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OPERATOR - 329)) | (1L << (SHARE - 329)) | (1L << (ROLLUP - 329)) | (1L << (DOCUMENT - 329)) | (1L << (NORMALIZED - 329)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)) | (1L << (FAMILY - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)) | (1L << (UNENCRYPTED - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (IDENTIFIER_ - 523)))) != 0)) {
					{
					setState(2007);
					anyName();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2010);
				funcExprWindowless();
				setState(2013);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2011);
					match(COLLATE);
					setState(2012);
					anyName();
					}
				}

				setState(2016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (KEY - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (IF - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (VARYING - 129)) | (1L << (VALUE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (ENUM - 329)) | (1L << (XML - 329)) | (1L << (ORDINALITY - 329)) | (1L << (NFC - 329)) | (1L << (NFD - 329)) | (1L << (NFKC - 329)) | (1L << (NFKD - 329)) | (1L << (REF - 329)) | (1L << (PASSING - 329)) | (1L << (VERSION - 329)) | (1L << (YES - 329)) | (1L << (STANDALONE - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OPERATOR - 329)) | (1L << (SHARE - 329)) | (1L << (ROLLUP - 329)) | (1L << (DOCUMENT - 329)) | (1L << (NORMALIZED - 329)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)) | (1L << (FAMILY - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)) | (1L << (UNENCRYPTED - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (IDENTIFIER_ - 523)))) != 0)) {
					{
					setState(2015);
					anyName();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncExprWindowlessContext extends ParserRuleContext {
		public FuncApplicationContext funcApplication() {
			return getRuleContext(FuncApplicationContext.class,0);
		}
		public FunctionExprCommonSubexprContext functionExprCommonSubexpr() {
			return getRuleContext(FunctionExprCommonSubexprContext.class,0);
		}
		public FuncExprWindowlessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcExprWindowless; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncExprWindowless(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncExprWindowless(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncExprWindowless(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncExprWindowlessContext funcExprWindowless() throws RecognitionException {
		FuncExprWindowlessContext _localctx = new FuncExprWindowlessContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_funcExprWindowless);
		try {
			setState(2022);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2020);
				funcApplication();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2021);
				functionExprCommonSubexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartStrategyContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public PartStrategyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partStrategy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPartStrategy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPartStrategy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPartStrategy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartStrategyContext partStrategy() throws RecognitionException {
		PartStrategyContext _localctx = new PartStrategyContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_partStrategy);
		try {
			setState(2026);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2024);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2025);
				unreservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(DDLStatementParser.UNIQUE, 0); }
		public CreateIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateIndexSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateIndexSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexSpecificationContext createIndexSpecification() throws RecognitionException {
		CreateIndexSpecificationContext _localctx = new CreateIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_createIndexSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2029);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(2028);
				match(UNIQUE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcurrentlyClauseContext extends ParserRuleContext {
		public TerminalNode CONCURRENTLY() { return getToken(DDLStatementParser.CONCURRENTLY, 0); }
		public ConcurrentlyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concurrentlyClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConcurrentlyClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConcurrentlyClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConcurrentlyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConcurrentlyClauseContext concurrentlyClause() throws RecognitionException {
		ConcurrentlyClauseContext _localctx = new ConcurrentlyClauseContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_concurrentlyClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(2031);
				match(CONCURRENTLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNotExistClauseContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public IndexNotExistClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexNotExistClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexNotExistClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexNotExistClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexNotExistClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNotExistClauseContext indexNotExistClause() throws RecognitionException {
		IndexNotExistClauseContext _localctx = new IndexNotExistClauseContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_indexNotExistClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2037);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				setState(2034);
				match(IF);
				setState(2035);
				match(NOT);
				setState(2036);
				match(EXISTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnlyClauseContext extends ParserRuleContext {
		public TerminalNode ONLY() { return getToken(DDLStatementParser.ONLY, 0); }
		public OnlyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onlyClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOnlyClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOnlyClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOnlyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnlyClauseContext onlyClause() throws RecognitionException {
		OnlyClauseContext _localctx = new OnlyClauseContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_onlyClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(2039);
				match(ONLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableExistClauseContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public TableExistClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableExistClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableExistClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableExistClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableExistClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableExistClauseContext tableExistClause() throws RecognitionException {
		TableExistClauseContext _localctx = new TableExistClauseContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_tableExistClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2044);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				setState(2042);
				match(IF);
				setState(2043);
				match(EXISTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsteriskClauseContext extends ParserRuleContext {
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public AsteriskClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asteriskClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAsteriskClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAsteriskClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAsteriskClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AsteriskClauseContext asteriskClause() throws RecognitionException {
		AsteriskClauseContext _localctx = new AsteriskClauseContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_asteriskClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASTERISK_) {
				{
				setState(2046);
				match(ASTERISK_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDefinitionClauseContext extends ParserRuleContext {
		public AlterTableActionsContext alterTableActions() {
			return getRuleContext(AlterTableActionsContext.class,0);
		}
		public RenameColumnSpecificationContext renameColumnSpecification() {
			return getRuleContext(RenameColumnSpecificationContext.class,0);
		}
		public RenameConstraintContext renameConstraint() {
			return getRuleContext(RenameConstraintContext.class,0);
		}
		public RenameTableSpecificationContext renameTableSpecification() {
			return getRuleContext(RenameTableSpecificationContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public PartitionCmdContext partitionCmd() {
			return getRuleContext(PartitionCmdContext.class,0);
		}
		public AlterDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDefinitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterDefinitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterDefinitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDefinitionClauseContext alterDefinitionClause() throws RecognitionException {
		AlterDefinitionClauseContext _localctx = new AlterDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_alterDefinitionClause);
		try {
			setState(2057);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2049);
				alterTableActions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2050);
				renameColumnSpecification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2051);
				renameConstraint();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2052);
				renameTableSpecification();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2053);
				match(SET);
				setState(2054);
				match(SCHEMA);
				setState(2055);
				name();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2056);
				partitionCmd();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionCmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(DDLStatementParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(DDLStatementParser.PARTITION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public PartitionBoundSpecContext partitionBoundSpec() {
			return getRuleContext(PartitionBoundSpecContext.class,0);
		}
		public TerminalNode DETACH() { return getToken(DDLStatementParser.DETACH, 0); }
		public PartitionCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionCmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPartitionCmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPartitionCmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPartitionCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionCmdContext partitionCmd() throws RecognitionException {
		PartitionCmdContext _localctx = new PartitionCmdContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_partitionCmd);
		try {
			setState(2067);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ATTACH:
				enterOuterAlt(_localctx, 1);
				{
				setState(2059);
				match(ATTACH);
				setState(2060);
				match(PARTITION);
				setState(2061);
				qualifiedName();
				setState(2062);
				partitionBoundSpec();
				}
				break;
			case DETACH:
				enterOuterAlt(_localctx, 2);
				{
				setState(2064);
				match(DETACH);
				setState(2065);
				match(PARTITION);
				setState(2066);
				qualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexDefinitionClauseContext extends ParserRuleContext {
		public RenameIndexSpecificationContext renameIndexSpecification() {
			return getRuleContext(RenameIndexSpecificationContext.class,0);
		}
		public AlterIndexDependsOnExtensionContext alterIndexDependsOnExtension() {
			return getRuleContext(AlterIndexDependsOnExtensionContext.class,0);
		}
		public AlterIndexSetTableSpaceContext alterIndexSetTableSpace() {
			return getRuleContext(AlterIndexSetTableSpaceContext.class,0);
		}
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public IndexPartitionCmdContext indexPartitionCmd() {
			return getRuleContext(IndexPartitionCmdContext.class,0);
		}
		public AlterIndexDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexDefinitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterIndexDefinitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterIndexDefinitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterIndexDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexDefinitionClauseContext alterIndexDefinitionClause() throws RecognitionException {
		AlterIndexDefinitionClauseContext _localctx = new AlterIndexDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alterIndexDefinitionClause);
		try {
			setState(2074);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2069);
				renameIndexSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2070);
				alterIndexDependsOnExtension();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2071);
				alterIndexSetTableSpace();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2072);
				alterTableCmds();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2073);
				indexPartitionCmd();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexPartitionCmdContext extends ParserRuleContext {
		public TerminalNode ATTACH() { return getToken(DDLStatementParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(DDLStatementParser.PARTITION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public IndexPartitionCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexPartitionCmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexPartitionCmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexPartitionCmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexPartitionCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexPartitionCmdContext indexPartitionCmd() throws RecognitionException {
		IndexPartitionCmdContext _localctx = new IndexPartitionCmdContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_indexPartitionCmd);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2076);
			match(ATTACH);
			setState(2077);
			match(PARTITION);
			setState(2078);
			qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public RenameIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameIndexSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRenameIndexSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRenameIndexSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRenameIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameIndexSpecificationContext renameIndexSpecification() throws RecognitionException {
		RenameIndexSpecificationContext _localctx = new RenameIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_renameIndexSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2080);
			match(RENAME);
			setState(2081);
			match(TO);
			setState(2082);
			indexName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexDependsOnExtensionContext extends ParserRuleContext {
		public TerminalNode DEPENDS() { return getToken(DDLStatementParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public AlterIndexDependsOnExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexDependsOnExtension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterIndexDependsOnExtension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterIndexDependsOnExtension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterIndexDependsOnExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexDependsOnExtensionContext alterIndexDependsOnExtension() throws RecognitionException {
		AlterIndexDependsOnExtensionContext _localctx = new AlterIndexDependsOnExtensionContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_alterIndexDependsOnExtension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2084);
			match(DEPENDS);
			setState(2085);
			match(ON);
			setState(2086);
			match(EXTENSION);
			setState(2087);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexSetTableSpaceContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNED() { return getToken(DDLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public IgnoredIdentifiersContext ignoredIdentifiers() {
			return getRuleContext(IgnoredIdentifiersContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(DDLStatementParser.NOWAIT, 0); }
		public AlterIndexSetTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexSetTableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterIndexSetTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterIndexSetTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterIndexSetTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexSetTableSpaceContext alterIndexSetTableSpace() throws RecognitionException {
		AlterIndexSetTableSpaceContext _localctx = new AlterIndexSetTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_alterIndexSetTableSpace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2092);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OWNED) {
				{
				setState(2089);
				match(OWNED);
				setState(2090);
				match(BY);
				setState(2091);
				ignoredIdentifiers();
				}
			}

			setState(2094);
			match(SET);
			setState(2095);
			match(TABLESPACE);
			setState(2096);
			name();
			setState(2098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT) {
				{
				setState(2097);
				match(NOWAIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNamesClauseContext extends ParserRuleContext {
		public List<TableNameClauseContext> tableNameClause() {
			return getRuleContexts(TableNameClauseContext.class);
		}
		public TableNameClauseContext tableNameClause(int i) {
			return getRuleContext(TableNameClauseContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TableNamesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNamesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableNamesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableNamesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableNamesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNamesClauseContext tableNamesClause() throws RecognitionException {
		TableNamesClauseContext _localctx = new TableNamesClauseContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_tableNamesClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2100);
			tableNameClause();
			setState(2105);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2101);
				match(COMMA_);
				setState(2102);
				tableNameClause();
				}
				}
				setState(2107);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameClauseContext extends ParserRuleContext {
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TableNameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableNameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableNameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableNameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameClauseContext tableNameClause() throws RecognitionException {
		TableNameClauseContext _localctx = new TableNameClauseContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_tableNameClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2108);
			tableName();
			setState(2110);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASTERISK_) {
				{
				setState(2109);
				match(ASTERISK_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableActionsContext extends ParserRuleContext {
		public List<AlterTableActionContext> alterTableAction() {
			return getRuleContexts(AlterTableActionContext.class);
		}
		public AlterTableActionContext alterTableAction(int i) {
			return getRuleContext(AlterTableActionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public AlterTableActionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableActions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTableActions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTableActions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTableActions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableActionsContext alterTableActions() throws RecognitionException {
		AlterTableActionsContext _localctx = new AlterTableActionsContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_alterTableActions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2112);
			alterTableAction();
			setState(2117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2113);
				match(COMMA_);
				setState(2114);
				alterTableAction();
				}
				}
				setState(2119);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableActionContext extends ParserRuleContext {
		public AddColumnSpecificationContext addColumnSpecification() {
			return getRuleContext(AddColumnSpecificationContext.class,0);
		}
		public DropColumnSpecificationContext dropColumnSpecification() {
			return getRuleContext(DropColumnSpecificationContext.class,0);
		}
		public ModifyColumnSpecificationContext modifyColumnSpecification() {
			return getRuleContext(ModifyColumnSpecificationContext.class,0);
		}
		public AddConstraintSpecificationContext addConstraintSpecification() {
			return getRuleContext(AddConstraintSpecificationContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public ConstraintOptionalParamContext constraintOptionalParam() {
			return getRuleContext(ConstraintOptionalParamContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(DDLStatementParser.VALIDATE, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public IndexExistClauseContext indexExistClause() {
			return getRuleContext(IndexExistClauseContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public TerminalNode DISABLE() { return getToken(DDLStatementParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(DDLStatementParser.ENABLE, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public TerminalNode REPLICA() { return getToken(DDLStatementParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(DDLStatementParser.ALWAYS, 0); }
		public TerminalNode RULE() { return getToken(DDLStatementParser.RULE, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode LEVEL() { return getToken(DDLStatementParser.LEVEL, 0); }
		public TerminalNode SECURITY() { return getToken(DDLStatementParser.SECURITY, 0); }
		public TerminalNode FORCE() { return getToken(DDLStatementParser.FORCE, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode CLUSTER() { return getToken(DDLStatementParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode WITHOUT() { return getToken(DDLStatementParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(DDLStatementParser.OIDS, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public TerminalNode LOGGED() { return getToken(DDLStatementParser.LOGGED, 0); }
		public TerminalNode UNLOGGED() { return getToken(DDLStatementParser.UNLOGGED, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<StorageParameterWithValueContext> storageParameterWithValue() {
			return getRuleContexts(StorageParameterWithValueContext.class);
		}
		public StorageParameterWithValueContext storageParameterWithValue(int i) {
			return getRuleContext(StorageParameterWithValueContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TerminalNode RESET() { return getToken(DDLStatementParser.RESET, 0); }
		public List<StorageParameterContext> storageParameter() {
			return getRuleContexts(StorageParameterContext.class);
		}
		public StorageParameterContext storageParameter(int i) {
			return getRuleContext(StorageParameterContext.class,i);
		}
		public TerminalNode INHERIT() { return getToken(DDLStatementParser.INHERIT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public DataTypeNameContext dataTypeName() {
			return getRuleContext(DataTypeNameContext.class,0);
		}
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode CURRENT_USER() { return getToken(DDLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(DDLStatementParser.SESSION_USER, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode FULL() { return getToken(DDLStatementParser.FULL, 0); }
		public TerminalNode NOTHING() { return getToken(DDLStatementParser.NOTHING, 0); }
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public AlterTableActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTableAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTableAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTableAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableActionContext alterTableAction() throws RecognitionException {
		AlterTableActionContext _localctx = new AlterTableActionContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_alterTableAction);
		int _la;
		try {
			setState(2232);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2120);
				addColumnSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2121);
				dropColumnSpecification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2122);
				modifyColumnSpecification();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2123);
				addConstraintSpecification();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2124);
				match(ALTER);
				setState(2125);
				match(CONSTRAINT);
				setState(2126);
				ignoredIdentifier();
				setState(2127);
				constraintOptionalParam();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2129);
				match(VALIDATE);
				setState(2130);
				match(CONSTRAINT);
				setState(2131);
				ignoredIdentifier();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2132);
				match(DROP);
				setState(2133);
				match(CONSTRAINT);
				setState(2134);
				indexExistClause();
				setState(2135);
				ignoredIdentifier();
				setState(2137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2136);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2139);
				_la = _input.LA(1);
				if ( !(_la==ENABLE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2140);
				match(TRIGGER);
				setState(2144);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__0:
				case T__1:
				case INSERT:
				case UPDATE:
				case DELETE:
				case ALTER:
				case DROP:
				case TRUNCATE:
				case SCHEMA:
				case REVOKE:
				case ADD:
				case SET:
				case INDEX:
				case KEY:
				case FUNCTION:
				case TRIGGER:
				case PROCEDURE:
				case VIEW:
				case IF:
				case BY:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case DOUBLE:
				case YEAR:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case CALL:
				case PRESERVE:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case NEXT:
				case NAME:
				case NAMES:
				case TYPE:
				case TEXT:
				case REPEATABLE:
				case VARYING:
				case VALUE:
				case TIES:
				case CUBE:
				case SETS:
				case OTHERS:
				case AT:
				case ADMIN:
				case ESCAPE:
				case EXCLUDE:
				case PARTITION:
				case UNKNOWN:
				case ALWAYS:
				case CASCADE:
				case GENERATED:
				case ISOLATION:
				case LEVEL:
				case NO:
				case OPTION:
				case PRIVILEGES:
				case READ:
				case ROLE:
				case ROWS:
				case START:
				case TRANSACTION:
				case ACTION:
				case CACHE:
				case CHARACTERISTICS:
				case CLUSTER:
				case COMMENTS:
				case CONSTRAINTS:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DEFAULTS:
				case DEFERRED:
				case DEPENDS:
				case DOMAIN:
				case EXCLUDING:
				case EXECUTE:
				case EXTENSION:
				case EXTERNAL:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case GLOBAL:
				case IDENTITY:
				case IMMEDIATE:
				case INCLUDING:
				case INCREMENT:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INCLUDE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LOGGED:
				case MATCH:
				case MAXVALUE:
				case MINVALUE:
				case NOTHING:
				case NULLS:
				case OBJECT:
				case OIDS:
				case OVER:
				case OWNED:
				case OWNER:
				case PARTIAL:
				case PRECEDING:
				case RANGE:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case ROUTINE:
				case RULE:
				case SECURITY:
				case SEQUENCE:
				case SESSION:
				case SHOW:
				case SIMPLE:
				case STATISTICS:
				case STORAGE:
				case TABLESPACE:
				case TEMP:
				case TEMPORARY:
				case UNBOUNDED:
				case UNLOGGED:
				case VALID:
				case VALIDATE:
				case WITHIN:
				case WITHOUT:
				case ZONE:
				case OF:
				case UESCAPE:
				case GROUPS:
				case RECURSIVE:
				case ENUM:
				case XML:
				case ORDINALITY:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case REF:
				case PASSING:
				case VERSION:
				case YES:
				case STANDALONE:
				case MATERIALIZED:
				case OPERATOR:
				case SHARE:
				case ROLLUP:
				case DOCUMENT:
				case NORMALIZED:
				case NOWAIT:
				case LOCKED:
				case COLUMNS:
				case CONTENT:
				case STRIP:
				case WHITESPACE:
				case CONFLICT:
				case OVERRIDING:
				case SYSTEM:
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case ASSERTION:
				case ASSIGNMENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CALLED:
				case CATALOG:
				case CHAIN:
				case CHECKPOINT:
				case CLASS:
				case CONFIGURATION:
				case COMMENT:
				case DETACH:
				case DICTIONARY:
				case EXPRESSION:
				case INSENSITIVE:
				case DISCARD:
				case OFF:
				case INSTEAD:
				case EXPLAIN:
				case INPUT:
				case INLINE:
				case PARALLEL:
				case LEAKPROOF:
				case COMMITTED:
				case ENCODING:
				case IMPLICIT:
				case DELIMITER:
				case CURSOR:
				case EACH:
				case EVENT:
				case DEALLOCATE:
				case CONNECTION:
				case DECLARE:
				case FAMILY:
				case FORWARD:
				case EXCLUSIVE:
				case FUNCTIONS:
				case LOCATION:
				case LABEL:
				case DELIMITERS:
				case HANDLER:
				case HEADER:
				case IMMUTABLE:
				case GRANTED:
				case HOLD:
				case MAPPING:
				case OLD:
				case METHOD:
				case LOAD:
				case LISTEN:
				case MODE:
				case MOVE:
				case PROCEDURAL:
				case PARSER:
				case PROCEDURES:
				case ENCRYPTED:
				case PUBLICATION:
				case PROGRAM:
				case REFERENCING:
				case PLANS:
				case REINDEX:
				case PRIOR:
				case PASSWORD:
				case RELATIVE:
				case QUOTE:
				case ROUTINES:
				case REPLACE:
				case SNAPSHOT:
				case REFRESH:
				case PREPARE:
				case OPTIONS:
				case IMPORT:
				case INVOKER:
				case NEW:
				case PREPARED:
				case SCROLL:
				case SEQUENCES:
				case SYSID:
				case REASSIGN:
				case SERVER:
				case SUBSCRIPTION:
				case SEARCH:
				case SCHEMAS:
				case RECHECK:
				case POLICY:
				case NOTIFY:
				case LOCK:
				case RELEASE:
				case SERIALIZABLE:
				case RETURNS:
				case STATEMENT:
				case STDIN:
				case STDOUT:
				case TABLES:
				case SUPPORT:
				case STABLE:
				case TEMPLATE:
				case UNENCRYPTED:
				case VIEWS:
				case UNCOMMITTED:
				case TRANSFORM:
				case UNLISTEN:
				case TRUSTED:
				case VALIDATOR:
				case UNTIL:
				case VACUUM:
				case VOLATILE:
				case STORED:
				case WRITE:
				case STRICT:
				case TYPES:
				case WRAPPER:
				case WORK:
				case IDENTIFIER_:
					{
					setState(2141);
					ignoredIdentifier();
					}
					break;
				case ALL:
					{
					setState(2142);
					match(ALL);
					}
					break;
				case USER:
					{
					setState(2143);
					match(USER);
					}
					break;
				case EOF:
				case COMMA_:
					break;
				default:
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2146);
				match(ENABLE);
				setState(2147);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2148);
				match(TRIGGER);
				setState(2149);
				ignoredIdentifier();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2150);
				_la = _input.LA(1);
				if ( !(_la==ENABLE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2151);
				match(RULE);
				setState(2152);
				ignoredIdentifier();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2153);
				match(ENABLE);
				setState(2154);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2155);
				match(RULE);
				setState(2156);
				ignoredIdentifier();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2163);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DISABLE:
					{
					setState(2157);
					match(DISABLE);
					}
					break;
				case ENABLE:
					{
					setState(2158);
					match(ENABLE);
					}
					break;
				case NO:
				case FORCE:
					{
					{
					setState(2160);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(2159);
						match(NO);
						}
					}

					setState(2162);
					match(FORCE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2165);
				match(ROW);
				setState(2166);
				match(LEVEL);
				setState(2167);
				match(SECURITY);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2168);
				match(CLUSTER);
				setState(2169);
				match(ON);
				setState(2170);
				indexName();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2171);
				match(SET);
				setState(2172);
				match(WITHOUT);
				setState(2173);
				match(CLUSTER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2174);
				match(SET);
				setState(2175);
				_la = _input.LA(1);
				if ( !(_la==WITH || _la==WITHOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2176);
				match(OIDS);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2177);
				match(SET);
				setState(2178);
				match(TABLESPACE);
				setState(2179);
				ignoredIdentifier();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2180);
				match(SET);
				setState(2181);
				_la = _input.LA(1);
				if ( !(_la==LOGGED || _la==UNLOGGED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2182);
				match(SET);
				setState(2183);
				match(LP_);
				setState(2184);
				storageParameterWithValue();
				setState(2189);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(2185);
					match(COMMA_);
					setState(2186);
					storageParameterWithValue();
					}
					}
					setState(2191);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2192);
				match(RP_);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2194);
				match(RESET);
				setState(2195);
				match(LP_);
				setState(2196);
				storageParameter();
				setState(2201);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(2197);
					match(COMMA_);
					setState(2198);
					storageParameter();
					}
					}
					setState(2203);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2204);
				match(RP_);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2206);
				match(INHERIT);
				setState(2207);
				tableName();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2208);
				match(NO);
				setState(2209);
				match(INHERIT);
				setState(2210);
				tableName();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2211);
				match(OF);
				setState(2212);
				dataTypeName();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2213);
				match(NOT);
				setState(2214);
				match(OF);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2215);
				match(OWNER);
				setState(2216);
				match(TO);
				setState(2220);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__0:
				case T__1:
				case INSERT:
				case UPDATE:
				case DELETE:
				case ALTER:
				case DROP:
				case TRUNCATE:
				case SCHEMA:
				case REVOKE:
				case ADD:
				case SET:
				case INDEX:
				case KEY:
				case FUNCTION:
				case TRIGGER:
				case PROCEDURE:
				case VIEW:
				case IF:
				case BY:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case DOUBLE:
				case YEAR:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case CALL:
				case PRESERVE:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case NEXT:
				case NAME:
				case NAMES:
				case TYPE:
				case TEXT:
				case REPEATABLE:
				case VARYING:
				case VALUE:
				case TIES:
				case CUBE:
				case SETS:
				case OTHERS:
				case AT:
				case ADMIN:
				case ESCAPE:
				case EXCLUDE:
				case PARTITION:
				case UNKNOWN:
				case ALWAYS:
				case CASCADE:
				case GENERATED:
				case ISOLATION:
				case LEVEL:
				case NO:
				case OPTION:
				case PRIVILEGES:
				case READ:
				case ROLE:
				case ROWS:
				case START:
				case TRANSACTION:
				case ACTION:
				case CACHE:
				case CHARACTERISTICS:
				case CLUSTER:
				case COMMENTS:
				case CONSTRAINTS:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DEFAULTS:
				case DEFERRED:
				case DEPENDS:
				case DOMAIN:
				case EXCLUDING:
				case EXECUTE:
				case EXTENSION:
				case EXTERNAL:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case GLOBAL:
				case IDENTITY:
				case IMMEDIATE:
				case INCLUDING:
				case INCREMENT:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INCLUDE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LOGGED:
				case MATCH:
				case MAXVALUE:
				case MINVALUE:
				case NOTHING:
				case NULLS:
				case OBJECT:
				case OIDS:
				case OVER:
				case OWNED:
				case OWNER:
				case PARTIAL:
				case PRECEDING:
				case RANGE:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case ROUTINE:
				case RULE:
				case SECURITY:
				case SEQUENCE:
				case SESSION:
				case SHOW:
				case SIMPLE:
				case STATISTICS:
				case STORAGE:
				case TABLESPACE:
				case TEMP:
				case TEMPORARY:
				case UNBOUNDED:
				case UNLOGGED:
				case VALID:
				case VALIDATE:
				case WITHIN:
				case WITHOUT:
				case ZONE:
				case OF:
				case UESCAPE:
				case GROUPS:
				case RECURSIVE:
				case ENUM:
				case XML:
				case ORDINALITY:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case REF:
				case PASSING:
				case VERSION:
				case YES:
				case STANDALONE:
				case MATERIALIZED:
				case OPERATOR:
				case SHARE:
				case ROLLUP:
				case DOCUMENT:
				case NORMALIZED:
				case NOWAIT:
				case LOCKED:
				case COLUMNS:
				case CONTENT:
				case STRIP:
				case WHITESPACE:
				case CONFLICT:
				case OVERRIDING:
				case SYSTEM:
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case ASSERTION:
				case ASSIGNMENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CALLED:
				case CATALOG:
				case CHAIN:
				case CHECKPOINT:
				case CLASS:
				case CONFIGURATION:
				case COMMENT:
				case DETACH:
				case DICTIONARY:
				case EXPRESSION:
				case INSENSITIVE:
				case DISCARD:
				case OFF:
				case INSTEAD:
				case EXPLAIN:
				case INPUT:
				case INLINE:
				case PARALLEL:
				case LEAKPROOF:
				case COMMITTED:
				case ENCODING:
				case IMPLICIT:
				case DELIMITER:
				case CURSOR:
				case EACH:
				case EVENT:
				case DEALLOCATE:
				case CONNECTION:
				case DECLARE:
				case FAMILY:
				case FORWARD:
				case EXCLUSIVE:
				case FUNCTIONS:
				case LOCATION:
				case LABEL:
				case DELIMITERS:
				case HANDLER:
				case HEADER:
				case IMMUTABLE:
				case GRANTED:
				case HOLD:
				case MAPPING:
				case OLD:
				case METHOD:
				case LOAD:
				case LISTEN:
				case MODE:
				case MOVE:
				case PROCEDURAL:
				case PARSER:
				case PROCEDURES:
				case ENCRYPTED:
				case PUBLICATION:
				case PROGRAM:
				case REFERENCING:
				case PLANS:
				case REINDEX:
				case PRIOR:
				case PASSWORD:
				case RELATIVE:
				case QUOTE:
				case ROUTINES:
				case REPLACE:
				case SNAPSHOT:
				case REFRESH:
				case PREPARE:
				case OPTIONS:
				case IMPORT:
				case INVOKER:
				case NEW:
				case PREPARED:
				case SCROLL:
				case SEQUENCES:
				case SYSID:
				case REASSIGN:
				case SERVER:
				case SUBSCRIPTION:
				case SEARCH:
				case SCHEMAS:
				case RECHECK:
				case POLICY:
				case NOTIFY:
				case LOCK:
				case RELEASE:
				case SERIALIZABLE:
				case RETURNS:
				case STATEMENT:
				case STDIN:
				case STDOUT:
				case TABLES:
				case SUPPORT:
				case STABLE:
				case TEMPLATE:
				case UNENCRYPTED:
				case VIEWS:
				case UNCOMMITTED:
				case TRANSFORM:
				case UNLISTEN:
				case TRUSTED:
				case VALIDATOR:
				case UNTIL:
				case VACUUM:
				case VOLATILE:
				case STORED:
				case WRITE:
				case STRICT:
				case TYPES:
				case WRAPPER:
				case WORK:
				case IDENTIFIER_:
					{
					setState(2217);
					ignoredIdentifier();
					}
					break;
				case CURRENT_USER:
					{
					setState(2218);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(2219);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2222);
				match(REPLICA);
				setState(2223);
				match(IDENTITY);
				setState(2230);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(2224);
					match(DEFAULT);
					}
					break;
				case USING:
					{
					{
					setState(2225);
					match(USING);
					setState(2226);
					match(INDEX);
					setState(2227);
					indexName();
					}
					}
					break;
				case FULL:
					{
					setState(2228);
					match(FULL);
					}
					break;
				case NOTHING:
					{
					setState(2229);
					match(NOTHING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public AddColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addColumnSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAddColumnSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAddColumnSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAddColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddColumnSpecificationContext addColumnSpecification() throws RecognitionException {
		AddColumnSpecificationContext _localctx = new AddColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_addColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2234);
			match(ADD);
			setState(2236);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(2235);
				match(COLUMN);
				}
			}

			setState(2241);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
			case 1:
				{
				setState(2238);
				match(IF);
				setState(2239);
				match(NOT);
				setState(2240);
				match(EXISTS);
				}
				break;
			}
			setState(2243);
			columnDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public ColumnExistClauseContext columnExistClause() {
			return getRuleContext(ColumnExistClauseContext.class,0);
		}
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public DropColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropColumnSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropColumnSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropColumnSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropColumnSpecificationContext dropColumnSpecification() throws RecognitionException {
		DropColumnSpecificationContext _localctx = new DropColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_dropColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2245);
			match(DROP);
			setState(2247);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(2246);
				match(COLUMN);
				}
			}

			setState(2249);
			columnExistClause();
			setState(2250);
			columnName();
			setState(2252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2251);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnExistClauseContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public ColumnExistClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnExistClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnExistClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnExistClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnExistClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnExistClauseContext columnExistClause() throws RecognitionException {
		ColumnExistClauseContext _localctx = new ColumnExistClauseContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_columnExistClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2256);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				setState(2254);
				match(IF);
				setState(2255);
				match(EXISTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModifyColumnSpecificationContext extends ParserRuleContext {
		public ModifyColumnContext modifyColumn() {
			return getRuleContext(ModifyColumnContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode GENERATED() { return getToken(DDLStatementParser.GENERATED, 0); }
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public TerminalNode ALWAYS() { return getToken(DDLStatementParser.ALWAYS, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public SequenceOptionsContext sequenceOptions() {
			return getRuleContext(SequenceOptionsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public List<AlterColumnSetOptionContext> alterColumnSetOption() {
			return getRuleContexts(AlterColumnSetOptionContext.class);
		}
		public AlterColumnSetOptionContext alterColumnSetOption(int i) {
			return getRuleContext(AlterColumnSetOptionContext.class,i);
		}
		public ColumnExistClauseContext columnExistClause() {
			return getRuleContext(ColumnExistClauseContext.class,0);
		}
		public TerminalNode STATISTICS() { return getToken(DDLStatementParser.STATISTICS, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public AttributeOptionsContext attributeOptions() {
			return getRuleContext(AttributeOptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(DDLStatementParser.RESET, 0); }
		public TerminalNode STORAGE() { return getToken(DDLStatementParser.STORAGE, 0); }
		public TerminalNode PLAIN() { return getToken(DDLStatementParser.PLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(DDLStatementParser.EXTERNAL, 0); }
		public TerminalNode EXTENDED() { return getToken(DDLStatementParser.EXTENDED, 0); }
		public TerminalNode MAIN() { return getToken(DDLStatementParser.MAIN, 0); }
		public ModifyColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifyColumnSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterModifyColumnSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitModifyColumnSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitModifyColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModifyColumnSpecificationContext modifyColumnSpecification() throws RecognitionException {
		ModifyColumnSpecificationContext _localctx = new ModifyColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_modifyColumnSpecification);
		int _la;
		try {
			setState(2337);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2258);
				modifyColumn();
				setState(2261);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(2259);
					match(SET);
					setState(2260);
					match(DATA);
					}
				}

				setState(2263);
				match(TYPE);
				setState(2264);
				dataType();
				setState(2266);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2265);
					collateClause();
					}
				}

				setState(2270);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2268);
					match(USING);
					setState(2269);
					aExpr(0);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2272);
				modifyColumn();
				setState(2273);
				match(SET);
				setState(2274);
				match(DEFAULT);
				setState(2275);
				aExpr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2277);
				modifyColumn();
				setState(2278);
				match(DROP);
				setState(2279);
				match(DEFAULT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2281);
				modifyColumn();
				setState(2282);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2283);
				match(NOT);
				setState(2284);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2286);
				modifyColumn();
				setState(2287);
				match(ADD);
				setState(2288);
				match(GENERATED);
				setState(2292);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(2289);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					{
					setState(2290);
					match(BY);
					setState(2291);
					match(DEFAULT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2294);
				match(AS);
				setState(2295);
				match(IDENTITY);
				setState(2300);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(2296);
					match(LP_);
					setState(2297);
					sequenceOptions();
					setState(2298);
					match(RP_);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2302);
				modifyColumn();
				setState(2303);
				alterColumnSetOption();
				setState(2307);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==SET || _la==RESTART) {
					{
					{
					setState(2304);
					alterColumnSetOption();
					}
					}
					setState(2309);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2310);
				modifyColumn();
				setState(2311);
				match(DROP);
				setState(2312);
				match(IDENTITY);
				setState(2313);
				columnExistClause();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2315);
				modifyColumn();
				setState(2316);
				match(SET);
				setState(2317);
				match(STATISTICS);
				setState(2318);
				match(NUMBER_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2320);
				modifyColumn();
				setState(2321);
				match(SET);
				setState(2322);
				match(LP_);
				setState(2323);
				attributeOptions();
				setState(2324);
				match(RP_);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2326);
				modifyColumn();
				setState(2327);
				match(RESET);
				setState(2328);
				match(LP_);
				setState(2329);
				attributeOptions();
				setState(2330);
				match(RP_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2332);
				modifyColumn();
				setState(2333);
				match(SET);
				setState(2334);
				match(STORAGE);
				setState(2335);
				_la = _input.LA(1);
				if ( !(((((_la - 248)) & ~0x3f) == 0 && ((1L << (_la - 248)) & ((1L << (EXTENDED - 248)) | (1L << (EXTERNAL - 248)) | (1L << (MAIN - 248)) | (1L << (PLAIN - 248)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ModifyColumnContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public ColumnNameContext columnName() {
			return getRuleContext(ColumnNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public ModifyColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifyColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterModifyColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitModifyColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitModifyColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ModifyColumnContext modifyColumn() throws RecognitionException {
		ModifyColumnContext _localctx = new ModifyColumnContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_modifyColumn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2339);
			match(ALTER);
			setState(2341);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(2340);
				match(COLUMN);
				}
			}

			setState(2343);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterColumnSetOptionContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode GENERATED() { return getToken(DDLStatementParser.GENERATED, 0); }
		public SequenceOptionContext sequenceOption() {
			return getRuleContext(SequenceOptionContext.class,0);
		}
		public TerminalNode ALWAYS() { return getToken(DDLStatementParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode RESTART() { return getToken(DDLStatementParser.RESTART, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public AlterColumnSetOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnSetOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterColumnSetOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterColumnSetOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterColumnSetOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnSetOptionContext alterColumnSetOption() throws RecognitionException {
		AlterColumnSetOptionContext _localctx = new AlterColumnSetOptionContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_alterColumnSetOption);
		int _la;
		try {
			setState(2362);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2345);
				match(SET);
				setState(2353);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case GENERATED:
					{
					setState(2346);
					match(GENERATED);
					setState(2350);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALWAYS:
						{
						setState(2347);
						match(ALWAYS);
						}
						break;
					case BY:
						{
						setState(2348);
						match(BY);
						setState(2349);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case NO:
				case START:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case OWNED:
					{
					setState(2352);
					sequenceOption();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RESTART:
				enterOuterAlt(_localctx, 2);
				{
				setState(2355);
				match(RESTART);
				setState(2360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==NUMBER_) {
					{
					setState(2357);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(2356);
						match(WITH);
						}
					}

					setState(2359);
					match(NUMBER_);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttributeOptionsContext extends ParserRuleContext {
		public List<AttributeOptionContext> attributeOption() {
			return getRuleContexts(AttributeOptionContext.class);
		}
		public AttributeOptionContext attributeOption(int i) {
			return getRuleContext(AttributeOptionContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public AttributeOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attributeOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAttributeOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAttributeOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAttributeOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttributeOptionsContext attributeOptions() throws RecognitionException {
		AttributeOptionsContext _localctx = new AttributeOptionsContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_attributeOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2364);
			attributeOption();
			setState(2369);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2365);
				match(COMMA_);
				setState(2366);
				attributeOption();
				}
				}
				setState(2371);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttributeOptionContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DDLStatementParser.IDENTIFIER_, 0); }
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public AttributeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attributeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAttributeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAttributeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAttributeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttributeOptionContext attributeOption() throws RecognitionException {
		AttributeOptionContext _localctx = new AttributeOptionContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_attributeOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2372);
			match(IDENTIFIER_);
			setState(2373);
			match(EQ_);
			setState(2374);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddConstraintSpecificationContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TableConstraintUsingIndexContext tableConstraintUsingIndex() {
			return getRuleContext(TableConstraintUsingIndexContext.class,0);
		}
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode VALID() { return getToken(DDLStatementParser.VALID, 0); }
		public AddConstraintSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addConstraintSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAddConstraintSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAddConstraintSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAddConstraintSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddConstraintSpecificationContext addConstraintSpecification() throws RecognitionException {
		AddConstraintSpecificationContext _localctx = new AddConstraintSpecificationContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_addConstraintSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2376);
			match(ADD);
			setState(2383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				{
				setState(2377);
				tableConstraint();
				setState(2380);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2378);
					match(NOT);
					setState(2379);
					match(VALID);
					}
				}

				}
				break;
			case 2:
				{
				setState(2382);
				tableConstraintUsingIndex();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintUsingIndexContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public IndexNameContext indexName() {
			return getRuleContext(IndexNameContext.class,0);
		}
		public ConstraintOptionalParamContext constraintOptionalParam() {
			return getRuleContext(ConstraintOptionalParamContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(DDLStatementParser.UNIQUE, 0); }
		public PrimaryKeyContext primaryKey() {
			return getRuleContext(PrimaryKeyContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TableConstraintUsingIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraintUsingIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableConstraintUsingIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableConstraintUsingIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableConstraintUsingIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintUsingIndexContext tableConstraintUsingIndex() throws RecognitionException {
		TableConstraintUsingIndexContext _localctx = new TableConstraintUsingIndexContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_tableConstraintUsingIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2387);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2385);
				match(CONSTRAINT);
				setState(2386);
				ignoredIdentifier();
				}
			}

			setState(2391);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNIQUE:
				{
				setState(2389);
				match(UNIQUE);
				}
				break;
			case PRIMARY:
			case KEY:
				{
				setState(2390);
				primaryKey();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2393);
			match(USING);
			setState(2394);
			match(INDEX);
			setState(2395);
			indexName();
			setState(2396);
			constraintOptionalParam();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorageParameterWithValueContext extends ParserRuleContext {
		public StorageParameterContext storageParameter() {
			return getRuleContext(StorageParameterContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public StorageParameterWithValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageParameterWithValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterStorageParameterWithValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitStorageParameterWithValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitStorageParameterWithValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageParameterWithValueContext storageParameterWithValue() throws RecognitionException {
		StorageParameterWithValueContext _localctx = new StorageParameterWithValueContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_storageParameterWithValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2398);
			storageParameter();
			setState(2399);
			match(EQ_);
			setState(2400);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorageParameterContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DDLStatementParser.IDENTIFIER_, 0); }
		public StorageParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterStorageParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitStorageParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitStorageParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageParameterContext storageParameter() throws RecognitionException {
		StorageParameterContext _localctx = new StorageParameterContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_storageParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2402);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameColumnSpecificationContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public RenameColumnSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameColumnSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRenameColumnSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRenameColumnSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRenameColumnSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameColumnSpecificationContext renameColumnSpecification() throws RecognitionException {
		RenameColumnSpecificationContext _localctx = new RenameColumnSpecificationContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_renameColumnSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2404);
			match(RENAME);
			setState(2406);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMN) {
				{
				setState(2405);
				match(COLUMN);
				}
			}

			setState(2408);
			columnName();
			setState(2409);
			match(TO);
			setState(2410);
			columnName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameConstraintContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public List<IgnoredIdentifierContext> ignoredIdentifier() {
			return getRuleContexts(IgnoredIdentifierContext.class);
		}
		public IgnoredIdentifierContext ignoredIdentifier(int i) {
			return getRuleContext(IgnoredIdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public RenameConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRenameConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRenameConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRenameConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameConstraintContext renameConstraint() throws RecognitionException {
		RenameConstraintContext _localctx = new RenameConstraintContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_renameConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2412);
			match(RENAME);
			setState(2413);
			match(CONSTRAINT);
			setState(2414);
			ignoredIdentifier();
			setState(2415);
			match(TO);
			setState(2416);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableSpecificationContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RenameTableSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRenameTableSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRenameTableSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRenameTableSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableSpecificationContext renameTableSpecification() throws RecognitionException {
		RenameTableSpecificationContext _localctx = new RenameTableSpecificationContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_renameTableSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2418);
			match(RENAME);
			setState(2419);
			match(TO);
			setState(2420);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexExistClauseContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public IndexExistClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexExistClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexExistClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexExistClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexExistClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexExistClauseContext indexExistClause() throws RecognitionException {
		IndexExistClauseContext _localctx = new IndexExistClauseContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_indexExistClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2424);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				{
				setState(2422);
				match(IF);
				setState(2423);
				match(EXISTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNamesContext extends ParserRuleContext {
		public List<IndexNameContext> indexName() {
			return getRuleContexts(IndexNameContext.class);
		}
		public IndexNameContext indexName(int i) {
			return getRuleContext(IndexNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public IndexNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNamesContext indexNames() throws RecognitionException {
		IndexNamesContext _localctx = new IndexNamesContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_indexNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2426);
			indexName();
			setState(2431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2427);
				match(COMMA_);
				setState(2428);
				indexName();
				}
				}
				setState(2433);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(DDLStatementParser.DATABASE, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public AlterDatabaseClauseContext alterDatabaseClause() {
			return getRuleContext(AlterDatabaseClauseContext.class,0);
		}
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseContext alterDatabase() throws RecognitionException {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_alterDatabase);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2434);
			match(ALTER);
			setState(2435);
			match(DATABASE);
			setState(2436);
			databaseName();
			setState(2437);
			alterDatabaseClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDatabaseClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public CreatedbOptItemsContext createdbOptItems() {
			return getRuleContext(CreatedbOptItemsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public DatabaseNameContext databaseName() {
			return getRuleContext(DatabaseNameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public SetResetClauseContext setResetClause() {
			return getRuleContext(SetResetClauseContext.class,0);
		}
		public AlterDatabaseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDatabaseClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterDatabaseClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterDatabaseClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterDatabaseClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDatabaseClauseContext alterDatabaseClause() throws RecognitionException {
		AlterDatabaseClauseContext _localctx = new AlterDatabaseClauseContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_alterDatabaseClause);
		int _la;
		try {
			setState(2455);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,155,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2440);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2439);
					match(WITH);
					}
				}

				setState(2443);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (KEY - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (IF - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (VARYING - 129)) | (1L << (VALUE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (ENUM - 329)) | (1L << (XML - 329)) | (1L << (ORDINALITY - 329)) | (1L << (NFC - 329)) | (1L << (NFD - 329)) | (1L << (NFKC - 329)) | (1L << (NFKD - 329)) | (1L << (REF - 329)) | (1L << (PASSING - 329)) | (1L << (VERSION - 329)) | (1L << (YES - 329)) | (1L << (STANDALONE - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OPERATOR - 329)) | (1L << (SHARE - 329)) | (1L << (ROLLUP - 329)) | (1L << (DOCUMENT - 329)) | (1L << (NORMALIZED - 329)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)) | (1L << (FAMILY - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)) | (1L << (UNENCRYPTED - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (IDENTIFIER_ - 523)))) != 0)) {
					{
					setState(2442);
					createdbOptItems();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2445);
				match(RENAME);
				setState(2446);
				match(TO);
				setState(2447);
				databaseName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2448);
				match(OWNER);
				setState(2449);
				match(TO);
				setState(2450);
				roleSpec();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2451);
				match(SET);
				setState(2452);
				match(TABLESPACE);
				setState(2453);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2454);
				setResetClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedbOptItemsContext extends ParserRuleContext {
		public List<CreatedbOptItemContext> createdbOptItem() {
			return getRuleContexts(CreatedbOptItemContext.class);
		}
		public CreatedbOptItemContext createdbOptItem(int i) {
			return getRuleContext(CreatedbOptItemContext.class,i);
		}
		public CreatedbOptItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbOptItems; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreatedbOptItems(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreatedbOptItems(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreatedbOptItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbOptItemsContext createdbOptItems() throws RecognitionException {
		CreatedbOptItemsContext _localctx = new CreatedbOptItemsContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_createdbOptItems);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2458); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2457);
				createdbOptItem();
				}
				}
				setState(2460); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (KEY - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (IF - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (VARYING - 129)) | (1L << (VALUE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (ENUM - 329)) | (1L << (XML - 329)) | (1L << (ORDINALITY - 329)) | (1L << (NFC - 329)) | (1L << (NFD - 329)) | (1L << (NFKC - 329)) | (1L << (NFKD - 329)) | (1L << (REF - 329)) | (1L << (PASSING - 329)) | (1L << (VERSION - 329)) | (1L << (YES - 329)) | (1L << (STANDALONE - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OPERATOR - 329)) | (1L << (SHARE - 329)) | (1L << (ROLLUP - 329)) | (1L << (DOCUMENT - 329)) | (1L << (NORMALIZED - 329)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)) | (1L << (FAMILY - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)) | (1L << (UNENCRYPTED - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (IDENTIFIER_ - 523)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatedbOptItemContext extends ParserRuleContext {
		public CreatedbOptNameContext createdbOptName() {
			return getRuleContext(CreatedbOptNameContext.class,0);
		}
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public CreatedbOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createdbOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreatedbOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreatedbOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreatedbOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatedbOptItemContext createdbOptItem() throws RecognitionException {
		CreatedbOptItemContext _localctx = new CreatedbOptItemContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_createdbOptItem);
		int _la;
		try {
			setState(2480);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2462);
				createdbOptName();
				setState(2464);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(2463);
					match(EQ_);
					}
				}

				setState(2466);
				signedIconst();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2468);
				createdbOptName();
				setState(2470);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(2469);
					match(EQ_);
					}
				}

				setState(2472);
				booleanOrString();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2474);
				createdbOptName();
				setState(2476);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQ_) {
					{
					setState(2475);
					match(EQ_);
					}
				}

				setState(2478);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableCmdsContext extends ParserRuleContext {
		public List<AlterTableCmdContext> alterTableCmd() {
			return getRuleContexts(AlterTableCmdContext.class);
		}
		public AlterTableCmdContext alterTableCmd(int i) {
			return getRuleContext(AlterTableCmdContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public AlterTableCmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableCmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTableCmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTableCmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTableCmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableCmdsContext alterTableCmds() throws RecognitionException {
		AlterTableCmdsContext _localctx = new AlterTableCmdsContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_alterTableCmds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2482);
			alterTableCmd();
			setState(2487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2483);
				match(COMMA_);
				setState(2484);
				alterTableCmd();
				}
				}
				setState(2489);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableCmdContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public List<ColIdContext> colId() {
			return getRuleContexts(ColIdContext.class);
		}
		public ColIdContext colId(int i) {
			return getRuleContext(ColIdContext.class,i);
		}
		public AlterColumnDefaultContext alterColumnDefault() {
			return getRuleContext(AlterColumnDefaultContext.class,0);
		}
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode STATISTICS() { return getToken(DDLStatementParser.STATISTICS, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RESET() { return getToken(DDLStatementParser.RESET, 0); }
		public TerminalNode STORAGE() { return getToken(DDLStatementParser.STORAGE, 0); }
		public TerminalNode GENERATED() { return getToken(DDLStatementParser.GENERATED, 0); }
		public GeneratedWhenContext generatedWhen() {
			return getRuleContext(GeneratedWhenContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public ParenthesizedSeqOptListContext parenthesizedSeqOptList() {
			return getRuleContext(ParenthesizedSeqOptListContext.class,0);
		}
		public AlterIdentityColumnOptionListContext alterIdentityColumnOptionList() {
			return getRuleContext(AlterIdentityColumnOptionListContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public SetDataContext setData() {
			return getRuleContext(SetDataContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public AlterUsingContext alterUsing() {
			return getRuleContext(AlterUsingContext.class,0);
		}
		public AlterGenericOptionsContext alterGenericOptions() {
			return getRuleContext(AlterGenericOptionsContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(DDLStatementParser.VALIDATE, 0); }
		public TerminalNode WITHOUT() { return getToken(DDLStatementParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(DDLStatementParser.OIDS, 0); }
		public TerminalNode CLUSTER() { return getToken(DDLStatementParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode LOGGED() { return getToken(DDLStatementParser.LOGGED, 0); }
		public TerminalNode UNLOGGED() { return getToken(DDLStatementParser.UNLOGGED, 0); }
		public TerminalNode ENABLE() { return getToken(DDLStatementParser.ENABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public TerminalNode ALWAYS() { return getToken(DDLStatementParser.ALWAYS, 0); }
		public TerminalNode REPLICA() { return getToken(DDLStatementParser.REPLICA, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public TerminalNode DISABLE() { return getToken(DDLStatementParser.DISABLE, 0); }
		public TerminalNode RULE() { return getToken(DDLStatementParser.RULE, 0); }
		public TerminalNode INHERIT() { return getToken(DDLStatementParser.INHERIT, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public ReplicaIdentityContext replicaIdentity() {
			return getRuleContext(ReplicaIdentityContext.class,0);
		}
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode LEVEL() { return getToken(DDLStatementParser.LEVEL, 0); }
		public TerminalNode SECURITY() { return getToken(DDLStatementParser.SECURITY, 0); }
		public TerminalNode FORCE() { return getToken(DDLStatementParser.FORCE, 0); }
		public AlterTableCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableCmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTableCmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTableCmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTableCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableCmdContext alterTableCmd() throws RecognitionException {
		AlterTableCmdContext _localctx = new AlterTableCmdContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_alterTableCmd);
		int _la;
		try {
			setState(2763);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2490);
				match(ADD);
				setState(2492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2491);
					match(COLUMN);
					}
				}

				setState(2497);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
				case 1:
					{
					setState(2494);
					match(IF);
					setState(2495);
					match(NOT);
					setState(2496);
					match(EXISTS);
					}
					break;
				}
				setState(2499);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2500);
				match(ALTER);
				setState(2502);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2501);
					match(COLUMN);
					}
				}

				setState(2504);
				colId();
				setState(2505);
				alterColumnDefault();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2507);
				match(ALTER);
				setState(2509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2508);
					match(COLUMN);
					}
				}

				setState(2511);
				colId();
				setState(2512);
				match(DROP);
				setState(2513);
				match(NOT);
				setState(2514);
				match(NULL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2516);
				match(ALTER);
				setState(2518);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2517);
					match(COLUMN);
					}
				}

				setState(2520);
				colId();
				setState(2521);
				match(SET);
				setState(2522);
				match(NOT);
				setState(2523);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2525);
				match(ALTER);
				setState(2527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2526);
					match(COLUMN);
					}
				}

				setState(2529);
				colId();
				setState(2530);
				match(SET);
				setState(2531);
				match(STATISTICS);
				setState(2532);
				signedIconst();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2534);
				match(ALTER);
				setState(2536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2535);
					match(COLUMN);
					}
				}

				setState(2538);
				match(NUMBER_);
				setState(2539);
				match(SET);
				setState(2540);
				match(STATISTICS);
				setState(2541);
				signedIconst();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2542);
				match(ALTER);
				setState(2544);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2543);
					match(COLUMN);
					}
				}

				setState(2546);
				colId();
				setState(2547);
				match(SET);
				setState(2548);
				reloptions();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2550);
				match(ALTER);
				setState(2552);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2551);
					match(COLUMN);
					}
				}

				setState(2554);
				colId();
				setState(2555);
				match(RESET);
				setState(2556);
				reloptions();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2558);
				match(ALTER);
				setState(2560);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2559);
					match(COLUMN);
					}
				}

				setState(2562);
				colId();
				setState(2563);
				match(SET);
				setState(2564);
				match(STORAGE);
				setState(2565);
				colId();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2567);
				match(ALTER);
				setState(2569);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2568);
					match(COLUMN);
					}
				}

				setState(2571);
				colId();
				setState(2572);
				match(ADD);
				setState(2573);
				match(GENERATED);
				setState(2574);
				generatedWhen();
				setState(2575);
				match(AS);
				setState(2576);
				match(IDENTITY);
				setState(2578);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(2577);
					parenthesizedSeqOptList();
					}
				}

				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2580);
				match(ALTER);
				setState(2582);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2581);
					match(COLUMN);
					}
				}

				setState(2584);
				colId();
				setState(2585);
				alterIdentityColumnOptionList();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2587);
				match(ALTER);
				setState(2589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2588);
					match(COLUMN);
					}
				}

				setState(2591);
				colId();
				setState(2592);
				match(DROP);
				setState(2593);
				match(IDENTITY);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2595);
				match(ALTER);
				setState(2597);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2596);
					match(COLUMN);
					}
				}

				setState(2599);
				colId();
				setState(2600);
				match(DROP);
				setState(2601);
				match(IDENTITY);
				setState(2602);
				match(IF);
				setState(2603);
				match(EXISTS);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2605);
				match(DROP);
				setState(2607);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2606);
					match(COLUMN);
					}
				}

				setState(2609);
				match(IF);
				setState(2610);
				match(EXISTS);
				setState(2611);
				colId();
				setState(2613);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2612);
					dropBehavior();
					}
				}

				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2615);
				match(DROP);
				setState(2617);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2616);
					match(COLUMN);
					}
				}

				setState(2619);
				colId();
				setState(2621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2620);
					dropBehavior();
					}
				}

				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2623);
				match(ALTER);
				setState(2625);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2624);
					match(COLUMN);
					}
				}

				setState(2627);
				colId();
				setState(2629);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(2628);
					setData();
					}
				}

				setState(2631);
				match(TYPE);
				setState(2632);
				typeName();
				setState(2634);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2633);
					collateClause();
					}
				}

				setState(2637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2636);
					alterUsing();
					}
				}

				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2639);
				match(ALTER);
				setState(2641);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2640);
					match(COLUMN);
					}
				}

				setState(2643);
				colId();
				setState(2644);
				alterGenericOptions();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2646);
				match(ADD);
				setState(2647);
				tableConstraint();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2648);
				match(ALTER);
				setState(2649);
				match(CONSTRAINT);
				setState(2650);
				name();
				setState(2651);
				constraintAttributeSpec();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2653);
				match(VALIDATE);
				setState(2654);
				match(CONSTRAINT);
				setState(2655);
				name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2656);
				match(DROP);
				setState(2657);
				match(CONSTRAINT);
				setState(2658);
				match(IF);
				setState(2659);
				match(EXISTS);
				setState(2660);
				name();
				setState(2662);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2661);
					dropBehavior();
					}
				}

				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(2664);
				match(DROP);
				setState(2665);
				match(CONSTRAINT);
				setState(2666);
				name();
				setState(2668);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2667);
					dropBehavior();
					}
				}

				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(2670);
				match(SET);
				setState(2671);
				match(WITHOUT);
				setState(2672);
				match(OIDS);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(2673);
				match(CLUSTER);
				setState(2674);
				match(ON);
				setState(2675);
				name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(2676);
				match(SET);
				setState(2677);
				match(WITHOUT);
				setState(2678);
				match(CLUSTER);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(2679);
				match(SET);
				setState(2680);
				match(LOGGED);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(2681);
				match(SET);
				setState(2682);
				match(UNLOGGED);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(2683);
				match(ENABLE);
				setState(2684);
				match(TRIGGER);
				setState(2685);
				name();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(2686);
				match(ENABLE);
				setState(2687);
				match(ALWAYS);
				setState(2688);
				match(TRIGGER);
				setState(2689);
				name();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(2690);
				match(ENABLE);
				setState(2691);
				match(REPLICA);
				setState(2692);
				match(TRIGGER);
				setState(2693);
				name();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(2694);
				match(ENABLE);
				setState(2695);
				match(TRIGGER);
				setState(2696);
				match(ALL);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(2697);
				match(ENABLE);
				setState(2698);
				match(TRIGGER);
				setState(2699);
				match(USER);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(2700);
				match(DISABLE);
				setState(2701);
				match(TRIGGER);
				setState(2702);
				name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(2703);
				match(DISABLE);
				setState(2704);
				match(TRIGGER);
				setState(2705);
				match(ALL);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(2706);
				match(DISABLE);
				setState(2707);
				match(TRIGGER);
				setState(2708);
				match(USER);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(2709);
				match(ENABLE);
				setState(2710);
				match(RULE);
				setState(2711);
				name();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(2712);
				match(ENABLE);
				setState(2713);
				match(ALWAYS);
				setState(2714);
				match(RULE);
				setState(2715);
				name();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(2716);
				match(ENABLE);
				setState(2717);
				match(REPLICA);
				setState(2718);
				match(RULE);
				setState(2719);
				name();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(2720);
				match(DISABLE);
				setState(2721);
				match(RULE);
				setState(2722);
				name();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(2723);
				match(INHERIT);
				setState(2724);
				qualifiedName();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(2725);
				match(NO);
				setState(2726);
				match(INHERIT);
				setState(2727);
				qualifiedName();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(2728);
				match(OF);
				setState(2729);
				anyName();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(2730);
				match(NOT);
				setState(2731);
				match(OF);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(2732);
				match(OWNER);
				setState(2733);
				match(TO);
				setState(2734);
				roleSpec();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(2735);
				match(SET);
				setState(2736);
				match(TABLESPACE);
				setState(2737);
				name();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(2738);
				match(SET);
				setState(2739);
				reloptions();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(2740);
				match(RESET);
				setState(2741);
				reloptions();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(2742);
				match(REPLICA);
				setState(2743);
				match(IDENTITY);
				setState(2744);
				replicaIdentity();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(2745);
				match(ENABLE);
				setState(2746);
				match(ROW);
				setState(2747);
				match(LEVEL);
				setState(2748);
				match(SECURITY);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(2749);
				match(DISABLE);
				setState(2750);
				match(ROW);
				setState(2751);
				match(LEVEL);
				setState(2752);
				match(SECURITY);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(2753);
				match(FORCE);
				setState(2754);
				match(ROW);
				setState(2755);
				match(LEVEL);
				setState(2756);
				match(SECURITY);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(2757);
				match(NO);
				setState(2758);
				match(FORCE);
				setState(2759);
				match(ROW);
				setState(2760);
				match(LEVEL);
				setState(2761);
				match(SECURITY);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(2762);
				alterGenericOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttributeSpecContext extends ParserRuleContext {
		public List<ConstraintAttributeElemContext> constraintAttributeElem() {
			return getRuleContexts(ConstraintAttributeElemContext.class);
		}
		public ConstraintAttributeElemContext constraintAttributeElem(int i) {
			return getRuleContext(ConstraintAttributeElemContext.class,i);
		}
		public ConstraintAttributeSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttributeSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConstraintAttributeSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConstraintAttributeSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConstraintAttributeSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttributeSpecContext constraintAttributeSpec() throws RecognitionException {
		ConstraintAttributeSpecContext _localctx = new ConstraintAttributeSpecContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_constraintAttributeSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NOT || ((((_la - 219)) & ~0x3f) == 0 && ((1L << (_la - 219)) & ((1L << (NO - 219)) | (1L << (DEFERRABLE - 219)) | (1L << (INITIALLY - 219)))) != 0)) {
				{
				{
				setState(2765);
				constraintAttributeElem();
				}
				}
				setState(2770);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttributeElemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(DDLStatementParser.DEFERRABLE, 0); }
		public TerminalNode INITIALLY() { return getToken(DDLStatementParser.INITIALLY, 0); }
		public TerminalNode IMMEDIATE() { return getToken(DDLStatementParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(DDLStatementParser.DEFERRED, 0); }
		public TerminalNode VALID() { return getToken(DDLStatementParser.VALID, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(DDLStatementParser.INHERIT, 0); }
		public ConstraintAttributeElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttributeElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConstraintAttributeElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConstraintAttributeElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConstraintAttributeElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttributeElemContext constraintAttributeElem() throws RecognitionException {
		ConstraintAttributeElemContext _localctx = new ConstraintAttributeElemContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_constraintAttributeElem);
		try {
			setState(2782);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2771);
				match(NOT);
				setState(2772);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2773);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2774);
				match(INITIALLY);
				setState(2775);
				match(IMMEDIATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2776);
				match(INITIALLY);
				setState(2777);
				match(DEFERRED);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2778);
				match(NOT);
				setState(2779);
				match(VALID);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2780);
				match(NO);
				setState(2781);
				match(INHERIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGenericOptionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(DDLStatementParser.OPTIONS, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AlterGenericOptionListContext alterGenericOptionList() {
			return getRuleContext(AlterGenericOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public AlterGenericOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGenericOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterGenericOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterGenericOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterGenericOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGenericOptionsContext alterGenericOptions() throws RecognitionException {
		AlterGenericOptionsContext _localctx = new AlterGenericOptionsContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_alterGenericOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2784);
			match(OPTIONS);
			setState(2785);
			match(LP_);
			setState(2786);
			alterGenericOptionList();
			setState(2787);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGenericOptionListContext extends ParserRuleContext {
		public List<AlterGenericOptionElemContext> alterGenericOptionElem() {
			return getRuleContexts(AlterGenericOptionElemContext.class);
		}
		public AlterGenericOptionElemContext alterGenericOptionElem(int i) {
			return getRuleContext(AlterGenericOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public AlterGenericOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGenericOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterGenericOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterGenericOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterGenericOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGenericOptionListContext alterGenericOptionList() throws RecognitionException {
		AlterGenericOptionListContext _localctx = new AlterGenericOptionListContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_alterGenericOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2789);
			alterGenericOptionElem();
			setState(2794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2790);
				match(COMMA_);
				setState(2791);
				alterGenericOptionElem();
				}
				}
				setState(2796);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGenericOptionElemContext extends ParserRuleContext {
		public GenericOptionElemContext genericOptionElem() {
			return getRuleContext(GenericOptionElemContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public GenericOptionNameContext genericOptionName() {
			return getRuleContext(GenericOptionNameContext.class,0);
		}
		public AlterGenericOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGenericOptionElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterGenericOptionElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterGenericOptionElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterGenericOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGenericOptionElemContext alterGenericOptionElem() throws RecognitionException {
		AlterGenericOptionElemContext _localctx = new AlterGenericOptionElemContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_alterGenericOptionElem);
		try {
			setState(2804);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2797);
				genericOptionElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2798);
				match(SET);
				setState(2799);
				genericOptionElem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2800);
				match(ADD);
				setState(2801);
				genericOptionElem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2802);
				match(DROP);
				setState(2803);
				genericOptionName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericOptionNameContext extends ParserRuleContext {
		public ColLableContext colLable() {
			return getRuleContext(ColLableContext.class,0);
		}
		public GenericOptionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGenericOptionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGenericOptionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGenericOptionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionNameContext genericOptionName() throws RecognitionException {
		GenericOptionNameContext _localctx = new GenericOptionNameContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_genericOptionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2806);
			colLable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropBehaviorContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public DropBehaviorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropBehavior; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropBehavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropBehavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropBehavior(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropBehaviorContext dropBehavior() throws RecognitionException {
		DropBehaviorContext _localctx = new DropBehaviorContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_dropBehavior);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2808);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUsingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public AlterUsingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUsing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterUsing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterUsing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterUsing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUsingContext alterUsing() throws RecognitionException {
		AlterUsingContext _localctx = new AlterUsingContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_alterUsing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2810);
			match(USING);
			setState(2811);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetDataContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public SetDataContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setData; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSetData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSetData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSetData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetDataContext setData() throws RecognitionException {
		SetDataContext _localctx = new SetDataContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_setData);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2813);
			match(SET);
			setState(2814);
			match(DATA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIdentityColumnOptionListContext extends ParserRuleContext {
		public List<AlterIdentityColumnOptionContext> alterIdentityColumnOption() {
			return getRuleContexts(AlterIdentityColumnOptionContext.class);
		}
		public AlterIdentityColumnOptionContext alterIdentityColumnOption(int i) {
			return getRuleContext(AlterIdentityColumnOptionContext.class,i);
		}
		public AlterIdentityColumnOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIdentityColumnOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterIdentityColumnOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterIdentityColumnOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterIdentityColumnOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIdentityColumnOptionListContext alterIdentityColumnOptionList() throws RecognitionException {
		AlterIdentityColumnOptionListContext _localctx = new AlterIdentityColumnOptionListContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_alterIdentityColumnOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2817); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2816);
				alterIdentityColumnOption();
				}
				}
				setState(2819); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==SET || _la==RESTART );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIdentityColumnOptionContext extends ParserRuleContext {
		public TerminalNode RESTART() { return getToken(DDLStatementParser.RESTART, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public SeqOptElemContext seqOptElem() {
			return getRuleContext(SeqOptElemContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(DDLStatementParser.GENERATED, 0); }
		public GeneratedWhenContext generatedWhen() {
			return getRuleContext(GeneratedWhenContext.class,0);
		}
		public AlterIdentityColumnOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIdentityColumnOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterIdentityColumnOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterIdentityColumnOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterIdentityColumnOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIdentityColumnOptionContext alterIdentityColumnOption() throws RecognitionException {
		AlterIdentityColumnOptionContext _localctx = new AlterIdentityColumnOptionContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_alterIdentityColumnOption);
		int _la;
		try {
			setState(2832);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2821);
				match(RESTART);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2822);
				match(RESTART);
				setState(2824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2823);
					match(WITH);
					}
				}

				setState(2826);
				numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2827);
				match(SET);
				setState(2828);
				seqOptElem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2829);
				match(SET);
				setState(2830);
				match(GENERATED);
				setState(2831);
				generatedWhen();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterColumnDefaultContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public AlterColumnDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterColumnDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterColumnDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterColumnDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterColumnDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterColumnDefaultContext alterColumnDefault() throws RecognitionException {
		AlterColumnDefaultContext _localctx = new AlterColumnDefaultContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_alterColumnDefault);
		try {
			setState(2839);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2834);
				match(SET);
				setState(2835);
				match(DEFAULT);
				setState(2836);
				aExpr(0);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2837);
				match(DROP);
				setState(2838);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public AlterOperatorClausesContext alterOperatorClauses() {
			return getRuleContext(AlterOperatorClausesContext.class,0);
		}
		public AlterOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorContext alterOperator() throws RecognitionException {
		AlterOperatorContext _localctx = new AlterOperatorContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_alterOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2841);
			match(ALTER);
			setState(2842);
			match(OPERATOR);
			setState(2843);
			alterOperatorClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorClassContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(DDLStatementParser.CLASS, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterOperatorClassClausesContext alterOperatorClassClauses() {
			return getRuleContext(AlterOperatorClassClausesContext.class,0);
		}
		public AlterOperatorClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterOperatorClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterOperatorClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterOperatorClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorClassContext alterOperatorClass() throws RecognitionException {
		AlterOperatorClassContext _localctx = new AlterOperatorClassContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_alterOperatorClass);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2845);
			match(ALTER);
			setState(2846);
			match(OPERATOR);
			setState(2847);
			match(CLASS);
			setState(2848);
			anyName();
			setState(2849);
			match(USING);
			setState(2850);
			name();
			setState(2851);
			alterOperatorClassClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorClassClausesContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterOperatorClassClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorClassClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterOperatorClassClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterOperatorClassClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterOperatorClassClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorClassClausesContext alterOperatorClassClauses() throws RecognitionException {
		AlterOperatorClassClausesContext _localctx = new AlterOperatorClassClausesContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_alterOperatorClassClauses);
		try {
			setState(2862);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(2853);
				match(RENAME);
				setState(2854);
				match(TO);
				setState(2855);
				name();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2856);
				match(SET);
				setState(2857);
				match(SCHEMA);
				setState(2858);
				name();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2859);
				match(OWNER);
				setState(2860);
				match(TO);
				setState(2861);
				roleSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorFamilyContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(DDLStatementParser.FAMILY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterOperatorFamilyClausesContext alterOperatorFamilyClauses() {
			return getRuleContext(AlterOperatorFamilyClausesContext.class,0);
		}
		public AlterOperatorFamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorFamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterOperatorFamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterOperatorFamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterOperatorFamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorFamilyContext alterOperatorFamily() throws RecognitionException {
		AlterOperatorFamilyContext _localctx = new AlterOperatorFamilyContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_alterOperatorFamily);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2864);
			match(ALTER);
			setState(2865);
			match(OPERATOR);
			setState(2866);
			match(FAMILY);
			setState(2867);
			anyName();
			setState(2868);
			match(USING);
			setState(2869);
			name();
			setState(2870);
			alterOperatorFamilyClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorFamilyClausesContext extends ParserRuleContext {
		public OpclassItemListContext opclassItemList() {
			return getRuleContext(OpclassItemListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public AlterOperatorClassClausesContext alterOperatorClassClauses() {
			return getRuleContext(AlterOperatorClassClausesContext.class,0);
		}
		public AlterOperatorFamilyClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorFamilyClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterOperatorFamilyClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterOperatorFamilyClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterOperatorFamilyClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorFamilyClausesContext alterOperatorFamilyClauses() throws RecognitionException {
		AlterOperatorFamilyClausesContext _localctx = new AlterOperatorFamilyClausesContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_alterOperatorFamilyClauses);
		int _la;
		try {
			setState(2875);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DROP:
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2872);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2873);
				opclassItemList();
				}
				break;
			case SET:
			case OWNER:
			case RENAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(2874);
				alterOperatorClassClauses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpclassItemListContext extends ParserRuleContext {
		public List<OpclassItemContext> opclassItem() {
			return getRuleContexts(OpclassItemContext.class);
		}
		public OpclassItemContext opclassItem(int i) {
			return getRuleContext(OpclassItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public OpclassItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclassItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOpclassItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOpclassItemList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOpclassItemList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpclassItemListContext opclassItemList() throws RecognitionException {
		OpclassItemListContext _localctx = new OpclassItemListContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_opclassItemList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2877);
			opclassItem();
			setState(2882);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2878);
				match(COMMA_);
				setState(2879);
				opclassItem();
				}
				}
				setState(2884);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpclassItemContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public OpclassPurposeContext opclassPurpose() {
			return getRuleContext(OpclassPurposeContext.class,0);
		}
		public TerminalNode RECHECK() { return getToken(DDLStatementParser.RECHECK, 0); }
		public OperatorWithArgtypesContext operatorWithArgtypes() {
			return getRuleContext(OperatorWithArgtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode STORAGE() { return getToken(DDLStatementParser.STORAGE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public OpclassItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclassItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOpclassItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOpclassItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOpclassItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpclassItemContext opclassItem() throws RecognitionException {
		OpclassItemContext _localctx = new OpclassItemContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_opclassItem);
		int _la;
		try {
			setState(2915);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2885);
				match(OPERATOR);
				setState(2886);
				match(NUMBER_);
				setState(2887);
				anyOperator();
				setState(2889);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2888);
					opclassPurpose();
					}
				}

				setState(2892);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RECHECK) {
					{
					setState(2891);
					match(RECHECK);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2894);
				match(OPERATOR);
				setState(2895);
				match(NUMBER_);
				setState(2896);
				operatorWithArgtypes();
				setState(2898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2897);
					opclassPurpose();
					}
				}

				setState(2901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RECHECK) {
					{
					setState(2900);
					match(RECHECK);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2903);
				match(FUNCTION);
				setState(2904);
				match(NUMBER_);
				setState(2905);
				functionWithArgtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2906);
				match(FUNCTION);
				setState(2907);
				match(NUMBER_);
				setState(2908);
				match(LP_);
				setState(2909);
				typeList();
				setState(2910);
				match(RP_);
				setState(2911);
				functionWithArgtypes();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2913);
				match(STORAGE);
				setState(2914);
				typeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpclassPurposeContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public TerminalNode ORDER() { return getToken(DDLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public OpclassPurposeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opclassPurpose; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOpclassPurpose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOpclassPurpose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOpclassPurpose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpclassPurposeContext opclassPurpose() throws RecognitionException {
		OpclassPurposeContext _localctx = new OpclassPurposeContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_opclassPurpose);
		try {
			setState(2923);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2917);
				match(FOR);
				setState(2918);
				match(SEARCH);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2919);
				match(FOR);
				setState(2920);
				match(ORDER);
				setState(2921);
				match(BY);
				setState(2922);
				anyName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorClausesContext extends ParserRuleContext {
		public OperatorWithArgtypesContext operatorWithArgtypes() {
			return getRuleContext(OperatorWithArgtypesContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public OperatorDefListContext operatorDefList() {
			return getRuleContext(OperatorDefListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterOperatorClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterOperatorClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterOperatorClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterOperatorClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorClausesContext alterOperatorClauses() throws RecognitionException {
		AlterOperatorClausesContext _localctx = new AlterOperatorClausesContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_alterOperatorClauses);
		try {
			setState(2941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2925);
				operatorWithArgtypes();
				setState(2926);
				match(SET);
				setState(2927);
				match(SCHEMA);
				setState(2928);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2930);
				operatorWithArgtypes();
				setState(2931);
				match(SET);
				setState(2932);
				match(LP_);
				setState(2933);
				operatorDefList();
				setState(2934);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2936);
				operatorWithArgtypes();
				setState(2937);
				match(OWNER);
				setState(2938);
				match(TO);
				setState(2939);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorDefListContext extends ParserRuleContext {
		public List<OperatorDefElemContext> operatorDefElem() {
			return getRuleContexts(OperatorDefElemContext.class);
		}
		public OperatorDefElemContext operatorDefElem(int i) {
			return getRuleContext(OperatorDefElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public OperatorDefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorDefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOperatorDefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOperatorDefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOperatorDefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorDefListContext operatorDefList() throws RecognitionException {
		OperatorDefListContext _localctx = new OperatorDefListContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_operatorDefList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2943);
			operatorDefElem();
			setState(2948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2944);
				match(COMMA_);
				setState(2945);
				operatorDefElem();
				}
				}
				setState(2950);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorDefElemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public TerminalNode NONE() { return getToken(DDLStatementParser.NONE, 0); }
		public OperatorDefArgContext operatorDefArg() {
			return getRuleContext(OperatorDefArgContext.class,0);
		}
		public OperatorDefElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorDefElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOperatorDefElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOperatorDefElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOperatorDefElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorDefElemContext operatorDefElem() throws RecognitionException {
		OperatorDefElemContext _localctx = new OperatorDefElemContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_operatorDefElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2951);
			colLabel();
			setState(2952);
			match(EQ_);
			setState(2955);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(2953);
				match(NONE);
				}
				break;
			case T__0:
			case T__1:
			case AND_:
			case OR_:
			case NOT_:
			case TILDE_:
			case VERTICAL_BAR_:
			case AMPERSAND_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case CARET_:
			case MOD_:
			case COLON_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case BACKSLASH_:
			case DOT_:
			case DOT_ASTERISK_:
			case SAFE_EQ_:
			case DEQ_:
			case EQ_:
			case CQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case POUND_:
			case LP_:
			case RP_:
			case LBE_:
			case RBE_:
			case LBT_:
			case RBT_:
			case COMMA_:
			case DQ_:
			case SQ_:
			case BQ_:
			case QUESTION_:
			case AT_:
			case SEMI_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case TYPE_CAST_:
			case SELECT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case CREATE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case GRANT:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case COLUMN:
			case INDEX:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case FOREIGN:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case INTO:
			case WITH:
			case UNION:
			case DISTINCT:
			case CASE:
			case WHEN:
			case CAST:
			case FROM:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case USING:
			case WHERE:
			case AS:
			case ON:
			case IF:
			case ELSE:
			case THEN:
			case FOR:
			case TO:
			case AND:
			case OR:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case IN:
			case ALL:
			case ANY:
			case LIKE:
			case ORDER:
			case GROUP:
			case BY:
			case ASC:
			case DESC:
			case HAVING:
			case LIMIT:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case ARRAY:
			case INTERVAL:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DO:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case BOTH:
			case LEADING:
			case TRAILING:
			case INTERSECT:
			case EXCEPT:
			case TIES:
			case FETCH:
			case CUBE:
			case SETS:
			case WINDOW:
			case OTHERS:
			case OVERLAPS:
			case SOME:
			case AT:
			case DEC:
			case END:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case CHECK:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case REFERENCES:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COLLATE:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRABLE:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INITIALLY:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case ONLY:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case INT2:
			case INT4:
			case INT8:
			case FLOAT:
			case FLOAT4:
			case FLOAT8:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case SYMMETRIC:
			case DOCUMENT:
			case NORMALIZED:
			case ASYMMETRIC:
			case VARIADIC:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case PLACING:
			case RETURNING:
			case LATERAL:
			case ANALYSE:
			case ANALYZE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				{
				setState(2954);
				operatorDefArg();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorDefArgContext extends ParserRuleContext {
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public QualAllOpContext qualAllOp() {
			return getRuleContext(QualAllOpContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public OperatorDefArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorDefArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOperatorDefArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOperatorDefArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOperatorDefArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorDefArgContext operatorDefArg() throws RecognitionException {
		OperatorDefArgContext _localctx = new OperatorDefArgContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_operatorDefArg);
		try {
			setState(2962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2957);
				funcType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2958);
				reservedKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2959);
				qualAllOp();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2960);
				numericOnly();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2961);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorWithArgtypesContext extends ParserRuleContext {
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public OperArgtypesContext operArgtypes() {
			return getRuleContext(OperArgtypesContext.class,0);
		}
		public OperatorWithArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorWithArgtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOperatorWithArgtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOperatorWithArgtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOperatorWithArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorWithArgtypesContext operatorWithArgtypes() throws RecognitionException {
		OperatorWithArgtypesContext _localctx = new OperatorWithArgtypesContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_operatorWithArgtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2964);
			anyOperator();
			setState(2965);
			operArgtypes();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterAggregateContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(DDLStatementParser.AGGREGATE, 0); }
		public AggregateSignatureContext aggregateSignature() {
			return getRuleContext(AggregateSignatureContext.class,0);
		}
		public AlterAggregateDefinitionClauseContext alterAggregateDefinitionClause() {
			return getRuleContext(AlterAggregateDefinitionClauseContext.class,0);
		}
		public AlterAggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterAggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterAggregate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterAggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterAggregateContext alterAggregate() throws RecognitionException {
		AlterAggregateContext _localctx = new AlterAggregateContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_alterAggregate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2967);
			match(ALTER);
			setState(2968);
			match(AGGREGATE);
			setState(2969);
			aggregateSignature();
			setState(2970);
			alterAggregateDefinitionClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateSignatureContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public AggrArgsContext aggrArgs() {
			return getRuleContext(AggrArgsContext.class,0);
		}
		public AggregateSignatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateSignature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAggregateSignature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAggregateSignature(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAggregateSignature(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateSignatureContext aggregateSignature() throws RecognitionException {
		AggregateSignatureContext _localctx = new AggregateSignatureContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_aggregateSignature);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2972);
			funcName();
			setState(2973);
			aggrArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggrArgsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public List<AggrArgsListContext> aggrArgsList() {
			return getRuleContexts(AggrArgsListContext.class);
		}
		public AggrArgsListContext aggrArgsList(int i) {
			return getRuleContext(AggrArgsListContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(DDLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public AggrArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggrArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAggrArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAggrArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAggrArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggrArgsContext aggrArgs() throws RecognitionException {
		AggrArgsContext _localctx = new AggrArgsContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_aggrArgs);
		try {
			setState(2995);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2975);
				match(LP_);
				setState(2976);
				match(ASTERISK_);
				setState(2977);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2978);
				match(LP_);
				setState(2979);
				aggrArgsList();
				setState(2980);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2982);
				match(LP_);
				setState(2983);
				match(ORDER);
				setState(2984);
				match(BY);
				setState(2985);
				aggrArgsList();
				setState(2986);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2988);
				match(LP_);
				setState(2989);
				aggrArgsList();
				setState(2990);
				match(ORDER);
				setState(2991);
				match(BY);
				setState(2992);
				aggrArgsList();
				setState(2993);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggrArgsListContext extends ParserRuleContext {
		public List<AggrArgContext> aggrArg() {
			return getRuleContexts(AggrArgContext.class);
		}
		public AggrArgContext aggrArg(int i) {
			return getRuleContext(AggrArgContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public AggrArgsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggrArgsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAggrArgsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAggrArgsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAggrArgsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggrArgsListContext aggrArgsList() throws RecognitionException {
		AggrArgsListContext _localctx = new AggrArgsListContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_aggrArgsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2997);
			aggrArg();
			setState(3002);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(2998);
				match(COMMA_);
				setState(2999);
				aggrArg();
				}
				}
				setState(3004);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggrArgContext extends ParserRuleContext {
		public FuncArgContext funcArg() {
			return getRuleContext(FuncArgContext.class,0);
		}
		public AggrArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggrArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAggrArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAggrArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAggrArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggrArgContext aggrArg() throws RecognitionException {
		AggrArgContext _localctx = new AggrArgContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_aggrArg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3005);
			funcArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterAggregateDefinitionClauseContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AlterAggregateDefinitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAggregateDefinitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterAggregateDefinitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterAggregateDefinitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterAggregateDefinitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterAggregateDefinitionClauseContext alterAggregateDefinitionClause() throws RecognitionException {
		AlterAggregateDefinitionClauseContext _localctx = new AlterAggregateDefinitionClauseContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_alterAggregateDefinitionClause);
		try {
			setState(3016);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(3007);
				match(RENAME);
				setState(3008);
				match(TO);
				setState(3009);
				name();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3010);
				match(OWNER);
				setState(3011);
				match(TO);
				setState(3012);
				roleSpec();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(3013);
				match(SET);
				setState(3014);
				match(SCHEMA);
				setState(3015);
				schemaName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCollationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode COLLATION() { return getToken(DDLStatementParser.COLLATION, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public AlterCollationClauseContext alterCollationClause() {
			return getRuleContext(AlterCollationClauseContext.class,0);
		}
		public AlterCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCollation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterCollation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCollationContext alterCollation() throws RecognitionException {
		AlterCollationContext _localctx = new AlterCollationContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_alterCollation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3018);
			match(ALTER);
			setState(3019);
			match(COLLATION);
			setState(3020);
			anyName();
			setState(3021);
			alterCollationClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCollationClauseContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(DDLStatementParser.REFRESH, 0); }
		public TerminalNode VERSION() { return getToken(DDLStatementParser.VERSION, 0); }
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AlterCollationClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCollationClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterCollationClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterCollationClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterCollationClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCollationClauseContext alterCollationClause() throws RecognitionException {
		AlterCollationClauseContext _localctx = new AlterCollationClauseContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_alterCollationClause);
		try {
			setState(3034);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REFRESH:
				enterOuterAlt(_localctx, 1);
				{
				setState(3023);
				match(REFRESH);
				setState(3024);
				match(VERSION);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(3025);
				match(RENAME);
				setState(3026);
				match(TO);
				setState(3027);
				name();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 3);
				{
				setState(3028);
				match(OWNER);
				setState(3029);
				match(TO);
				setState(3030);
				roleSpec();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(3031);
				match(SET);
				setState(3032);
				match(SCHEMA);
				setState(3033);
				schemaName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterConversionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode CONVERSION() { return getToken(DDLStatementParser.CONVERSION, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public AlterConversionClauseContext alterConversionClause() {
			return getRuleContext(AlterConversionClauseContext.class,0);
		}
		public AlterConversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterConversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterConversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterConversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterConversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterConversionContext alterConversion() throws RecognitionException {
		AlterConversionContext _localctx = new AlterConversionContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_alterConversion);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3036);
			match(ALTER);
			setState(3037);
			match(CONVERSION);
			setState(3038);
			anyName();
			setState(3039);
			alterConversionClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterConversionClauseContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AlterConversionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterConversionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterConversionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterConversionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterConversionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterConversionClauseContext alterConversionClause() throws RecognitionException {
		AlterConversionClauseContext _localctx = new AlterConversionClauseContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_alterConversionClause);
		try {
			setState(3050);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(3041);
				match(RENAME);
				setState(3042);
				match(TO);
				setState(3043);
				name();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3044);
				match(OWNER);
				setState(3045);
				match(TO);
				setState(3046);
				roleSpec();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(3047);
				match(SET);
				setState(3048);
				match(SCHEMA);
				setState(3049);
				schemaName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDefaultPrivilegesContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DDLStatementParser.PRIVILEGES, 0); }
		public DefACLActionContext defACLAction() {
			return getRuleContext(DefACLActionContext.class,0);
		}
		public DefACLOptionListContext defACLOptionList() {
			return getRuleContext(DefACLOptionListContext.class,0);
		}
		public AlterDefaultPrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDefaultPrivileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterDefaultPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterDefaultPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterDefaultPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDefaultPrivilegesContext alterDefaultPrivileges() throws RecognitionException {
		AlterDefaultPrivilegesContext _localctx = new AlterDefaultPrivilegesContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_alterDefaultPrivileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3052);
			match(ALTER);
			setState(3053);
			match(DEFAULT);
			setState(3054);
			match(PRIVILEGES);
			setState(3056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR || _la==IN) {
				{
				setState(3055);
				defACLOptionList();
				}
			}

			setState(3058);
			defACLAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLActionContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(DDLStatementParser.GRANT, 0); }
		public PrivilegesContext privileges() {
			return getRuleContext(PrivilegesContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public DefaclPrivilegeTargetContext defaclPrivilegeTarget() {
			return getRuleContext(DefaclPrivilegeTargetContext.class,0);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public GranteeListContext granteeList() {
			return getRuleContext(GranteeListContext.class,0);
		}
		public GrantGrantOptionContext grantGrantOption() {
			return getRuleContext(GrantGrantOptionContext.class,0);
		}
		public TerminalNode REVOKE() { return getToken(DDLStatementParser.REVOKE, 0); }
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode OPTION() { return getToken(DDLStatementParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public DefACLActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefACLAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefACLAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefACLAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLActionContext defACLAction() throws RecognitionException {
		DefACLActionContext _localctx = new DefACLActionContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_defACLAction);
		int _la;
		try {
			setState(3090);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3060);
				match(GRANT);
				setState(3061);
				privileges();
				setState(3062);
				match(ON);
				setState(3063);
				defaclPrivilegeTarget();
				setState(3064);
				match(TO);
				setState(3065);
				granteeList();
				setState(3067);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3066);
					grantGrantOption();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3069);
				match(REVOKE);
				setState(3070);
				privileges();
				setState(3071);
				match(ON);
				setState(3072);
				defaclPrivilegeTarget();
				setState(3073);
				match(FROM);
				setState(3074);
				granteeList();
				setState(3076);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(3075);
					dropBehavior();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3078);
				match(REVOKE);
				setState(3079);
				match(GRANT);
				setState(3080);
				match(OPTION);
				setState(3081);
				match(FOR);
				setState(3082);
				privileges();
				setState(3083);
				match(ON);
				setState(3084);
				defaclPrivilegeTarget();
				setState(3085);
				match(FROM);
				setState(3086);
				granteeList();
				setState(3088);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(3087);
					dropBehavior();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantGrantOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(DDLStatementParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(DDLStatementParser.OPTION, 0); }
		public GrantGrantOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantGrantOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGrantGrantOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGrantGrantOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGrantGrantOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantGrantOptionContext grantGrantOption() throws RecognitionException {
		GrantGrantOptionContext _localctx = new GrantGrantOptionContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_grantGrantOption);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3092);
			match(WITH);
			setState(3093);
			match(GRANT);
			setState(3094);
			match(OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GranteeListContext extends ParserRuleContext {
		public List<GranteeContext> grantee() {
			return getRuleContexts(GranteeContext.class);
		}
		public GranteeContext grantee(int i) {
			return getRuleContext(GranteeContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public GranteeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_granteeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGranteeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGranteeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGranteeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeListContext granteeList() throws RecognitionException {
		GranteeListContext _localctx = new GranteeListContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_granteeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3096);
			grantee();
			setState(3101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3097);
				match(COMMA_);
				setState(3098);
				grantee();
				}
				}
				setState(3103);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GranteeContext extends ParserRuleContext {
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode GROUP() { return getToken(DDLStatementParser.GROUP, 0); }
		public GranteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGrantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGrantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGrantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GranteeContext grantee() throws RecognitionException {
		GranteeContext _localctx = new GranteeContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_grantee);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3105);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(3104);
				match(GROUP);
				}
			}

			setState(3107);
			roleSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaclPrivilegeTargetContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(DDLStatementParser.TABLES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(DDLStatementParser.FUNCTIONS, 0); }
		public TerminalNode ROUTINES() { return getToken(DDLStatementParser.ROUTINES, 0); }
		public TerminalNode SEQUENCES() { return getToken(DDLStatementParser.SEQUENCES, 0); }
		public TerminalNode TYPES() { return getToken(DDLStatementParser.TYPES, 0); }
		public TerminalNode SCHEMAS() { return getToken(DDLStatementParser.SCHEMAS, 0); }
		public DefaclPrivilegeTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaclPrivilegeTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefaclPrivilegeTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefaclPrivilegeTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefaclPrivilegeTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaclPrivilegeTargetContext defaclPrivilegeTarget() throws RecognitionException {
		DefaclPrivilegeTargetContext _localctx = new DefaclPrivilegeTargetContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_defaclPrivilegeTarget);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3109);
			_la = _input.LA(1);
			if ( !(((((_la - 461)) & ~0x3f) == 0 && ((1L << (_la - 461)) & ((1L << (FUNCTIONS - 461)) | (1L << (ROUTINES - 461)) | (1L << (SEQUENCES - 461)) | (1L << (SCHEMAS - 461)) | (1L << (TABLES - 461)))) != 0) || _la==TYPES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesContext extends ParserRuleContext {
		public PrivilegeListContext privilegeList() {
			return getRuleContext(PrivilegeListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DDLStatementParser.PRIVILEGES, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public PrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesContext privileges() throws RecognitionException {
		PrivilegesContext _localctx = new PrivilegesContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_privileges);
		try {
			setState(3126);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3111);
				privilegeList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3112);
				match(ALL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3113);
				match(ALL);
				setState(3114);
				match(PRIVILEGES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3115);
				match(ALL);
				setState(3116);
				match(LP_);
				setState(3117);
				columnList();
				setState(3118);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3120);
				match(ALL);
				setState(3121);
				match(PRIVILEGES);
				setState(3122);
				match(LP_);
				setState(3123);
				columnList();
				setState(3124);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeListContext extends ParserRuleContext {
		public List<PrivilegeContext> privilege() {
			return getRuleContexts(PrivilegeContext.class);
		}
		public PrivilegeContext privilege(int i) {
			return getRuleContext(PrivilegeContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public PrivilegeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPrivilegeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPrivilegeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPrivilegeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeListContext privilegeList() throws RecognitionException {
		PrivilegeListContext _localctx = new PrivilegeListContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_privilegeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3128);
			privilege();
			setState(3133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3129);
				match(COMMA_);
				setState(3130);
				privilege();
				}
				}
				setState(3135);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegeContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(DDLStatementParser.SELECT, 0); }
		public OptColumnListContext optColumnList() {
			return getRuleContext(OptColumnListContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(DDLStatementParser.REFERENCES, 0); }
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public PrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegeContext privilege() throws RecognitionException {
		PrivilegeContext _localctx = new PrivilegeContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_privilege);
		int _la;
		try {
			setState(3152);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3136);
				match(SELECT);
				setState(3138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(3137);
					optColumnList();
					}
				}

				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 2);
				{
				setState(3140);
				match(REFERENCES);
				setState(3142);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(3141);
					optColumnList();
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3144);
				match(CREATE);
				setState(3146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(3145);
					optColumnList();
					}
				}

				}
				break;
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 4);
				{
				setState(3148);
				colId();
				setState(3150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(3149);
					optColumnList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLOptionListContext extends ParserRuleContext {
		public List<DefACLOptionContext> defACLOption() {
			return getRuleContexts(DefACLOptionContext.class);
		}
		public DefACLOptionContext defACLOption(int i) {
			return getRuleContext(DefACLOptionContext.class,i);
		}
		public DefACLOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefACLOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefACLOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefACLOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLOptionListContext defACLOptionList() throws RecognitionException {
		DefACLOptionListContext _localctx = new DefACLOptionListContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_defACLOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3155); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3154);
				defACLOption();
				}
				}
				setState(3157); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FOR || _la==IN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefACLOptionContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public SchemaNameListContext schemaNameList() {
			return getRuleContext(SchemaNameListContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(DDLStatementParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public DefACLOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defACLOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefACLOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefACLOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefACLOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefACLOptionContext defACLOption() throws RecognitionException {
		DefACLOptionContext _localctx = new DefACLOptionContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_defACLOption);
		int _la;
		try {
			setState(3165);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3159);
				match(IN);
				setState(3160);
				match(SCHEMA);
				setState(3161);
				schemaNameList();
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(3162);
				match(FOR);
				setState(3163);
				_la = _input.LA(1);
				if ( !(_la==ROLE || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3164);
				roleList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameListContext extends ParserRuleContext {
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public SchemaNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSchemaNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSchemaNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSchemaNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameListContext schemaNameList() throws RecognitionException {
		SchemaNameListContext _localctx = new SchemaNameListContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_schemaNameList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3167);
			nameList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDomainContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode DOMAIN() { return getToken(DDLStatementParser.DOMAIN, 0); }
		public AlterDomainClauseContext alterDomainClause() {
			return getRuleContext(AlterDomainClauseContext.class,0);
		}
		public AlterDomainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDomain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterDomain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterDomain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterDomain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDomainContext alterDomain() throws RecognitionException {
		AlterDomainContext _localctx = new AlterDomainContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_alterDomain);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3169);
			match(ALTER);
			setState(3170);
			match(DOMAIN);
			setState(3171);
			alterDomainClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDomainClauseContext extends ParserRuleContext {
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode VALIDATE() { return getToken(DDLStatementParser.VALIDATE, 0); }
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public List<ConstraintNameContext> constraintName() {
			return getRuleContexts(ConstraintNameContext.class);
		}
		public ConstraintNameContext constraintName(int i) {
			return getRuleContext(ConstraintNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public AlterColumnDefaultContext alterColumnDefault() {
			return getRuleContext(AlterColumnDefaultContext.class,0);
		}
		public AlterDomainClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDomainClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterDomainClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterDomainClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterDomainClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDomainClauseContext alterDomainClause() throws RecognitionException {
		AlterDomainClauseContext _localctx = new AlterDomainClauseContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_alterDomainClause);
		int _la;
		try {
			setState(3223);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,233,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3173);
				anyName();
				setState(3174);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3175);
				match(NOT);
				setState(3176);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3178);
				anyName();
				setState(3179);
				match(ADD);
				setState(3180);
				tableConstraint();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3182);
				anyName();
				setState(3183);
				match(DROP);
				setState(3184);
				match(CONSTRAINT);
				setState(3187);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
				case 1:
					{
					setState(3185);
					match(IF);
					setState(3186);
					match(EXISTS);
					}
					break;
				}
				setState(3189);
				name();
				setState(3191);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(3190);
					dropBehavior();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3193);
				anyName();
				setState(3194);
				match(VALIDATE);
				setState(3195);
				match(CONSTRAINT);
				setState(3196);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3198);
				anyName();
				setState(3199);
				match(RENAME);
				setState(3200);
				match(CONSTRAINT);
				setState(3201);
				constraintName();
				setState(3202);
				match(TO);
				setState(3203);
				constraintName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3205);
				anyName();
				setState(3206);
				match(OWNER);
				setState(3207);
				match(TO);
				setState(3208);
				roleSpec();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3210);
				anyName();
				setState(3211);
				match(RENAME);
				setState(3212);
				match(TO);
				setState(3213);
				anyName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3215);
				anyName();
				setState(3216);
				match(SET);
				setState(3217);
				match(SCHEMA);
				setState(3218);
				name();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3220);
				anyName();
				setState(3221);
				alterColumnDefault();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConstraintName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConstraintName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConstraintName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintNameContext constraintName() throws RecognitionException {
		ConstraintNameContext _localctx = new ConstraintNameContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_constraintName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3225);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventTriggerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode EVENT() { return getToken(DDLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public TiggerNameContext tiggerName() {
			return getRuleContext(TiggerNameContext.class,0);
		}
		public AlterEventTriggerClauseContext alterEventTriggerClause() {
			return getRuleContext(AlterEventTriggerClauseContext.class,0);
		}
		public AlterEventTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEventTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterEventTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterEventTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterEventTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventTriggerContext alterEventTrigger() throws RecognitionException {
		AlterEventTriggerContext _localctx = new AlterEventTriggerContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_alterEventTrigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3227);
			match(ALTER);
			setState(3228);
			match(EVENT);
			setState(3229);
			match(TRIGGER);
			setState(3230);
			tiggerName();
			setState(3231);
			alterEventTriggerClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventTriggerClauseContext extends ParserRuleContext {
		public TerminalNode DISABLE() { return getToken(DDLStatementParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(DDLStatementParser.ENABLE, 0); }
		public TerminalNode REPLICA() { return getToken(DDLStatementParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(DDLStatementParser.ALWAYS, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TiggerNameContext tiggerName() {
			return getRuleContext(TiggerNameContext.class,0);
		}
		public AlterEventTriggerClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEventTriggerClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterEventTriggerClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterEventTriggerClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterEventTriggerClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventTriggerClauseContext alterEventTriggerClause() throws RecognitionException {
		AlterEventTriggerClauseContext _localctx = new AlterEventTriggerClauseContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_alterEventTriggerClause);
		int _la;
		try {
			setState(3242);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3233);
				match(DISABLE);
				}
				break;
			case ENABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3234);
				match(ENABLE);
				setState(3235);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 3);
				{
				setState(3236);
				match(OWNER);
				setState(3237);
				match(TO);
				setState(3238);
				roleSpec();
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(3239);
				match(RENAME);
				setState(3240);
				match(TO);
				setState(3241);
				tiggerName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TiggerNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TiggerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tiggerName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTiggerName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTiggerName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTiggerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TiggerNameContext tiggerName() throws RecognitionException {
		TiggerNameContext _localctx = new TiggerNameContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_tiggerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3244);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterExtensionClausesContext alterExtensionClauses() {
			return getRuleContext(AlterExtensionClausesContext.class,0);
		}
		public AlterExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterExtension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterExtension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionContext alterExtension() throws RecognitionException {
		AlterExtensionContext _localctx = new AlterExtensionContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_alterExtension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3246);
			match(ALTER);
			setState(3247);
			match(EXTENSION);
			setState(3248);
			name();
			setState(3249);
			alterExtensionClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionClausesContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public AlterExtensionOptListContext alterExtensionOptList() {
			return getRuleContext(AlterExtensionOptListContext.class,0);
		}
		public TerminalNode ACCESS() { return getToken(DDLStatementParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(DDLStatementParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(DDLStatementParser.AGGREGATE, 0); }
		public AggregateWithArgtypesContext aggregateWithArgtypes() {
			return getRuleContext(AggregateWithArgtypesContext.class,0);
		}
		public TerminalNode CAST() { return getToken(DDLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode COLLATION() { return getToken(DDLStatementParser.COLLATION, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode CONVERSION() { return getToken(DDLStatementParser.CONVERSION, 0); }
		public TerminalNode DOMAIN() { return getToken(DDLStatementParser.DOMAIN, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(DDLStatementParser.PROCEDURAL, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public OperatorWithArgtypesContext operatorWithArgtypes() {
			return getRuleContext(OperatorWithArgtypesContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public AccessMethodContext accessMethod() {
			return getRuleContext(AccessMethodContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(DDLStatementParser.CLASS, 0); }
		public TerminalNode FAMILY() { return getToken(DDLStatementParser.FAMILY, 0); }
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(DDLStatementParser.ROUTINE, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode EVENT() { return getToken(DDLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(DDLStatementParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(DDLStatementParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(DDLStatementParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(DDLStatementParser.CONFIGURATION, 0); }
		public TerminalNode SEQUENCE() { return getToken(DDLStatementParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(DDLStatementParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public TerminalNode TRANSFORM() { return getToken(DDLStatementParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public AlterExtensionClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterExtensionClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterExtensionClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterExtensionClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionClausesContext alterExtensionClauses() throws RecognitionException {
		AlterExtensionClausesContext _localctx = new AlterExtensionClausesContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_alterExtensionClauses);
		int _la;
		try {
			setState(3367);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3251);
				match(UPDATE);
				setState(3252);
				alterExtensionOptList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3253);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3254);
				match(ACCESS);
				setState(3255);
				match(METHOD);
				setState(3256);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3257);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3258);
				match(AGGREGATE);
				setState(3259);
				aggregateWithArgtypes();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3260);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3261);
				match(CAST);
				setState(3262);
				match(LP_);
				setState(3263);
				typeName();
				setState(3264);
				match(AS);
				setState(3265);
				typeName();
				setState(3266);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3268);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3269);
				match(COLLATION);
				setState(3270);
				anyName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3271);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3272);
				match(CONVERSION);
				setState(3273);
				anyName();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3274);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3275);
				match(DOMAIN);
				setState(3276);
				typeName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3277);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3278);
				match(FUNCTION);
				setState(3279);
				functionWithArgtypes();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3280);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3282);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(3281);
					match(PROCEDURAL);
					}
				}

				setState(3284);
				match(LANGUAGE);
				setState(3285);
				name();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3286);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3287);
				match(OPERATOR);
				setState(3288);
				operatorWithArgtypes();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3289);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3290);
				match(OPERATOR);
				setState(3291);
				_la = _input.LA(1);
				if ( !(_la==CLASS || _la==FAMILY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3292);
				anyName();
				setState(3293);
				match(USING);
				setState(3294);
				accessMethod();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3296);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3297);
				match(PROCEDURE);
				setState(3298);
				functionWithArgtypes();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3299);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3300);
				match(ROUTINE);
				setState(3301);
				functionWithArgtypes();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3302);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3303);
				match(SCHEMA);
				setState(3304);
				name();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3305);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3306);
				match(EVENT);
				setState(3307);
				match(TRIGGER);
				setState(3308);
				name();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3309);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3310);
				match(TABLE);
				setState(3311);
				anyName();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3312);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3313);
				match(TEXT);
				setState(3314);
				match(SEARCH);
				setState(3315);
				match(PARSER);
				setState(3316);
				anyName();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3317);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3318);
				match(TEXT);
				setState(3319);
				match(SEARCH);
				setState(3320);
				match(DICTIONARY);
				setState(3321);
				anyName();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(3322);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3323);
				match(TEXT);
				setState(3324);
				match(SEARCH);
				setState(3325);
				match(TEMPLATE);
				setState(3326);
				anyName();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(3327);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3328);
				match(TEXT);
				setState(3329);
				match(SEARCH);
				setState(3330);
				match(CONFIGURATION);
				setState(3331);
				anyName();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(3332);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3333);
				match(SEQUENCE);
				setState(3334);
				anyName();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(3335);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3336);
				match(VIEW);
				setState(3337);
				anyName();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(3338);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3339);
				match(MATERIALIZED);
				setState(3340);
				match(VIEW);
				setState(3341);
				anyName();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(3342);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3343);
				match(FOREIGN);
				setState(3344);
				match(TABLE);
				setState(3345);
				anyName();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(3346);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3347);
				match(FOREIGN);
				setState(3348);
				match(DATA);
				setState(3349);
				match(WRAPPER);
				setState(3350);
				name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(3351);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3352);
				match(SERVER);
				setState(3353);
				name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(3354);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3355);
				match(TRANSFORM);
				setState(3356);
				match(FOR);
				setState(3357);
				typeName();
				setState(3358);
				match(LANGUAGE);
				setState(3359);
				name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(3361);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3362);
				match(TYPE);
				setState(3363);
				typeName();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(3364);
				match(SET);
				setState(3365);
				match(SCHEMA);
				setState(3366);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionWithArgtypesContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public FuncArgsContext funcArgs() {
			return getRuleContext(FuncArgsContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public FunctionWithArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionWithArgtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFunctionWithArgtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFunctionWithArgtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFunctionWithArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionWithArgtypesContext functionWithArgtypes() throws RecognitionException {
		FunctionWithArgtypesContext _localctx = new FunctionWithArgtypesContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_functionWithArgtypes);
		try {
			setState(3377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3369);
				funcName();
				setState(3370);
				funcArgs();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3372);
				typeFuncNameKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3373);
				colId();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3374);
				colId();
				setState(3375);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public FuncArgsListContext funcArgsList() {
			return getRuleContext(FuncArgsListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public FuncArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsContext funcArgs() throws RecognitionException {
		FuncArgsContext _localctx = new FuncArgsContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_funcArgs);
		try {
			setState(3385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3379);
				match(LP_);
				setState(3380);
				funcArgsList();
				setState(3381);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3383);
				match(LP_);
				setState(3384);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWithArgtypesContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public AggrArgsContext aggrArgs() {
			return getRuleContext(AggrArgsContext.class,0);
		}
		public AggregateWithArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWithArgtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAggregateWithArgtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAggregateWithArgtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAggregateWithArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWithArgtypesContext aggregateWithArgtypes() throws RecognitionException {
		AggregateWithArgtypesContext _localctx = new AggregateWithArgtypesContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_aggregateWithArgtypes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3387);
			funcName();
			setState(3388);
			aggrArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionOptListContext extends ParserRuleContext {
		public List<AlterExtensionOptItemContext> alterExtensionOptItem() {
			return getRuleContexts(AlterExtensionOptItemContext.class);
		}
		public AlterExtensionOptItemContext alterExtensionOptItem(int i) {
			return getRuleContext(AlterExtensionOptItemContext.class,i);
		}
		public AlterExtensionOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterExtensionOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterExtensionOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterExtensionOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionOptListContext alterExtensionOptList() throws RecognitionException {
		AlterExtensionOptListContext _localctx = new AlterExtensionOptListContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_alterExtensionOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==TO) {
				{
				{
				setState(3390);
				alterExtensionOptItem();
				}
				}
				setState(3395);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionOptItemContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public AlterExtensionOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterExtensionOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterExtensionOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterExtensionOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionOptItemContext alterExtensionOptItem() throws RecognitionException {
		AlterExtensionOptItemContext _localctx = new AlterExtensionOptItemContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_alterExtensionOptItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3396);
			match(TO);
			setState(3399);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				{
				setState(3397);
				nonReservedWord();
				}
				break;
			case STRING_:
				{
				setState(3398);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignDataWrapperContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(DDLStatementParser.WRAPPER, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public AlterForeignDataWrapperClausesContext alterForeignDataWrapperClauses() {
			return getRuleContext(AlterForeignDataWrapperClausesContext.class,0);
		}
		public AlterForeignDataWrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignDataWrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterForeignDataWrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterForeignDataWrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterForeignDataWrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignDataWrapperContext alterForeignDataWrapper() throws RecognitionException {
		AlterForeignDataWrapperContext _localctx = new AlterForeignDataWrapperContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_alterForeignDataWrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3401);
			match(ALTER);
			setState(3402);
			match(FOREIGN);
			setState(3403);
			match(DATA);
			setState(3404);
			match(WRAPPER);
			setState(3405);
			colId();
			setState(3406);
			alterForeignDataWrapperClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignDataWrapperClausesContext extends ParserRuleContext {
		public AlterGenericOptionsContext alterGenericOptions() {
			return getRuleContext(AlterGenericOptionsContext.class,0);
		}
		public FdwOptionsContext fdwOptions() {
			return getRuleContext(FdwOptionsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterForeignDataWrapperClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignDataWrapperClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterForeignDataWrapperClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterForeignDataWrapperClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterForeignDataWrapperClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignDataWrapperClausesContext alterForeignDataWrapperClauses() throws RecognitionException {
		AlterForeignDataWrapperClausesContext _localctx = new AlterForeignDataWrapperClausesContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_alterForeignDataWrapperClauses);
		int _la;
		try {
			setState(3419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3409);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO || _la==HANDLER || _la==VALIDATOR) {
					{
					setState(3408);
					fdwOptions();
					}
				}

				setState(3411);
				alterGenericOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3412);
				fdwOptions();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3413);
				match(RENAME);
				setState(3414);
				match(TO);
				setState(3415);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3416);
				match(OWNER);
				setState(3417);
				match(TO);
				setState(3418);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericOptionElemContext extends ParserRuleContext {
		public GenericOptionNameContext genericOptionName() {
			return getRuleContext(GenericOptionNameContext.class,0);
		}
		public GenericOptionArgContext genericOptionArg() {
			return getRuleContext(GenericOptionArgContext.class,0);
		}
		public GenericOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGenericOptionElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGenericOptionElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGenericOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionElemContext genericOptionElem() throws RecognitionException {
		GenericOptionElemContext _localctx = new GenericOptionElemContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_genericOptionElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3421);
			genericOptionName();
			setState(3422);
			genericOptionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericOptionArgContext extends ParserRuleContext {
		public AexprConstContext aexprConst() {
			return getRuleContext(AexprConstContext.class,0);
		}
		public GenericOptionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGenericOptionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGenericOptionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGenericOptionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionArgContext genericOptionArg() throws RecognitionException {
		GenericOptionArgContext _localctx = new GenericOptionArgContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_genericOptionArg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3424);
			aexprConst();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FdwOptionsContext extends ParserRuleContext {
		public List<FdwOptionContext> fdwOption() {
			return getRuleContexts(FdwOptionContext.class);
		}
		public FdwOptionContext fdwOption(int i) {
			return getRuleContext(FdwOptionContext.class,i);
		}
		public FdwOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdwOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFdwOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFdwOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFdwOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FdwOptionsContext fdwOptions() throws RecognitionException {
		FdwOptionsContext _localctx = new FdwOptionsContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_fdwOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3427); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3426);
				fdwOption();
				}
				}
				setState(3429); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==NO || _la==HANDLER || _la==VALIDATOR );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FdwOptionContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(DDLStatementParser.HANDLER, 0); }
		public HandlerNameContext handlerName() {
			return getRuleContext(HandlerNameContext.class,0);
		}
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode VALIDATOR() { return getToken(DDLStatementParser.VALIDATOR, 0); }
		public FdwOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fdwOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFdwOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFdwOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFdwOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FdwOptionContext fdwOption() throws RecognitionException {
		FdwOptionContext _localctx = new FdwOptionContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_fdwOption);
		try {
			setState(3439);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3431);
				match(HANDLER);
				setState(3432);
				handlerName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3433);
				match(NO);
				setState(3434);
				match(HANDLER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3435);
				match(VALIDATOR);
				setState(3436);
				handlerName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3437);
				match(NO);
				setState(3438);
				match(VALIDATOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerNameContext extends ParserRuleContext {
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public HandlerNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterHandlerName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitHandlerName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitHandlerName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerNameContext handlerName() throws RecognitionException {
		HandlerNameContext _localctx = new HandlerNameContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_handlerName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3441);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGroupContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode GROUP() { return getToken(DDLStatementParser.GROUP, 0); }
		public AlterGroupClausesContext alterGroupClauses() {
			return getRuleContext(AlterGroupClausesContext.class,0);
		}
		public AlterGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGroupContext alterGroup() throws RecognitionException {
		AlterGroupContext _localctx = new AlterGroupContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_alterGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3443);
			match(ALTER);
			setState(3444);
			match(GROUP);
			setState(3445);
			alterGroupClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGroupClausesContext extends ParserRuleContext {
		public List<RoleSpecContext> roleSpec() {
			return getRuleContexts(RoleSpecContext.class);
		}
		public RoleSpecContext roleSpec(int i) {
			return getRuleContext(RoleSpecContext.class,i);
		}
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public AlterGroupClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGroupClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterGroupClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterGroupClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterGroupClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGroupClausesContext alterGroupClauses() throws RecognitionException {
		AlterGroupClausesContext _localctx = new AlterGroupClausesContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_alterGroupClauses);
		int _la;
		try {
			setState(3457);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,245,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3447);
				roleSpec();
				setState(3448);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3449);
				match(USER);
				setState(3450);
				roleList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3452);
				roleSpec();
				setState(3453);
				match(RENAME);
				setState(3454);
				match(TO);
				setState(3455);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLanguageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public List<ColIdContext> colId() {
			return getRuleContexts(ColIdContext.class);
		}
		public ColIdContext colId(int i) {
			return getRuleContext(ColIdContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public TerminalNode PROCEDURAL() { return getToken(DDLStatementParser.PROCEDURAL, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(DDLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(DDLStatementParser.SESSION_USER, 0); }
		public AlterLanguageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLanguage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterLanguage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLanguageContext alterLanguage() throws RecognitionException {
		AlterLanguageContext _localctx = new AlterLanguageContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_alterLanguage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3459);
			match(ALTER);
			setState(3461);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(3460);
				match(PROCEDURAL);
				}
			}

			setState(3463);
			match(LANGUAGE);
			setState(3476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
			case 1:
				{
				setState(3464);
				colId();
				setState(3465);
				match(RENAME);
				setState(3466);
				match(TO);
				setState(3467);
				colId();
				}
				break;
			case 2:
				{
				setState(3469);
				match(OWNER);
				setState(3470);
				match(TO);
				setState(3474);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__0:
				case T__1:
				case INSERT:
				case UPDATE:
				case DELETE:
				case ALTER:
				case DROP:
				case TRUNCATE:
				case SCHEMA:
				case REVOKE:
				case ADD:
				case SET:
				case INDEX:
				case KEY:
				case FUNCTION:
				case TRIGGER:
				case PROCEDURE:
				case VIEW:
				case IF:
				case BY:
				case BEGIN:
				case COMMIT:
				case ROLLBACK:
				case SAVEPOINT:
				case DOUBLE:
				case YEAR:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case SECOND:
				case CURRENT:
				case ENABLE:
				case DISABLE:
				case CALL:
				case PRESERVE:
				case DEFINER:
				case SQL:
				case CASCADED:
				case LOCAL:
				case CLOSE:
				case NEXT:
				case NAME:
				case NAMES:
				case TYPE:
				case TEXT:
				case REPEATABLE:
				case VARYING:
				case VALUE:
				case TIES:
				case CUBE:
				case SETS:
				case OTHERS:
				case AT:
				case ADMIN:
				case ESCAPE:
				case EXCLUDE:
				case PARTITION:
				case UNKNOWN:
				case ALWAYS:
				case CASCADE:
				case GENERATED:
				case ISOLATION:
				case LEVEL:
				case NO:
				case OPTION:
				case PRIVILEGES:
				case READ:
				case ROLE:
				case ROWS:
				case START:
				case TRANSACTION:
				case ACTION:
				case CACHE:
				case CHARACTERISTICS:
				case CLUSTER:
				case COMMENTS:
				case CONSTRAINTS:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DEFAULTS:
				case DEFERRED:
				case DEPENDS:
				case DOMAIN:
				case EXCLUDING:
				case EXECUTE:
				case EXTENSION:
				case EXTERNAL:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case GLOBAL:
				case IDENTITY:
				case IMMEDIATE:
				case INCLUDING:
				case INCREMENT:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INCLUDE:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LOGGED:
				case MATCH:
				case MAXVALUE:
				case MINVALUE:
				case NOTHING:
				case NULLS:
				case OBJECT:
				case OIDS:
				case OVER:
				case OWNED:
				case OWNER:
				case PARTIAL:
				case PRECEDING:
				case RANGE:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case ROUTINE:
				case RULE:
				case SECURITY:
				case SEQUENCE:
				case SESSION:
				case SHOW:
				case SIMPLE:
				case STATISTICS:
				case STORAGE:
				case TABLESPACE:
				case TEMP:
				case TEMPORARY:
				case UNBOUNDED:
				case UNLOGGED:
				case VALID:
				case VALIDATE:
				case WITHIN:
				case WITHOUT:
				case ZONE:
				case OF:
				case UESCAPE:
				case GROUPS:
				case RECURSIVE:
				case ENUM:
				case XML:
				case ORDINALITY:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case REF:
				case PASSING:
				case VERSION:
				case YES:
				case STANDALONE:
				case MATERIALIZED:
				case OPERATOR:
				case SHARE:
				case ROLLUP:
				case DOCUMENT:
				case NORMALIZED:
				case NOWAIT:
				case LOCKED:
				case COLUMNS:
				case CONTENT:
				case STRIP:
				case WHITESPACE:
				case CONFLICT:
				case OVERRIDING:
				case SYSTEM:
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case ASSERTION:
				case ASSIGNMENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CALLED:
				case CATALOG:
				case CHAIN:
				case CHECKPOINT:
				case CLASS:
				case CONFIGURATION:
				case COMMENT:
				case DETACH:
				case DICTIONARY:
				case EXPRESSION:
				case INSENSITIVE:
				case DISCARD:
				case OFF:
				case INSTEAD:
				case EXPLAIN:
				case INPUT:
				case INLINE:
				case PARALLEL:
				case LEAKPROOF:
				case COMMITTED:
				case ENCODING:
				case IMPLICIT:
				case DELIMITER:
				case CURSOR:
				case EACH:
				case EVENT:
				case DEALLOCATE:
				case CONNECTION:
				case DECLARE:
				case FAMILY:
				case FORWARD:
				case EXCLUSIVE:
				case FUNCTIONS:
				case LOCATION:
				case LABEL:
				case DELIMITERS:
				case HANDLER:
				case HEADER:
				case IMMUTABLE:
				case GRANTED:
				case HOLD:
				case MAPPING:
				case OLD:
				case METHOD:
				case LOAD:
				case LISTEN:
				case MODE:
				case MOVE:
				case PROCEDURAL:
				case PARSER:
				case PROCEDURES:
				case ENCRYPTED:
				case PUBLICATION:
				case PROGRAM:
				case REFERENCING:
				case PLANS:
				case REINDEX:
				case PRIOR:
				case PASSWORD:
				case RELATIVE:
				case QUOTE:
				case ROUTINES:
				case REPLACE:
				case SNAPSHOT:
				case REFRESH:
				case PREPARE:
				case OPTIONS:
				case IMPORT:
				case INVOKER:
				case NEW:
				case PREPARED:
				case SCROLL:
				case SEQUENCES:
				case SYSID:
				case REASSIGN:
				case SERVER:
				case SUBSCRIPTION:
				case SEARCH:
				case SCHEMAS:
				case RECHECK:
				case POLICY:
				case NOTIFY:
				case LOCK:
				case RELEASE:
				case SERIALIZABLE:
				case RETURNS:
				case STATEMENT:
				case STDIN:
				case STDOUT:
				case TABLES:
				case SUPPORT:
				case STABLE:
				case TEMPLATE:
				case UNENCRYPTED:
				case VIEWS:
				case UNCOMMITTED:
				case TRANSFORM:
				case UNLISTEN:
				case TRUSTED:
				case VALIDATOR:
				case UNTIL:
				case VACUUM:
				case VOLATILE:
				case STORED:
				case WRITE:
				case STRICT:
				case TYPES:
				case WRAPPER:
				case WORK:
				case IDENTIFIER_:
					{
					setState(3471);
					ignoredIdentifier();
					}
					break;
				case CURRENT_USER:
					{
					setState(3472);
					match(CURRENT_USER);
					}
					break;
				case SESSION_USER:
					{
					setState(3473);
					match(SESSION_USER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLargeObjectContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode LARGE() { return getToken(DDLStatementParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DDLStatementParser.OBJECT, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(DDLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(DDLStatementParser.SESSION_USER, 0); }
		public AlterLargeObjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLargeObject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterLargeObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterLargeObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterLargeObject(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLargeObjectContext alterLargeObject() throws RecognitionException {
		AlterLargeObjectContext _localctx = new AlterLargeObjectContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_alterLargeObject);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3478);
			match(ALTER);
			setState(3479);
			match(LARGE);
			setState(3480);
			match(OBJECT);
			setState(3481);
			numericOnly();
			setState(3482);
			match(OWNER);
			setState(3483);
			match(TO);
			setState(3487);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(3484);
				ignoredIdentifier();
				}
				break;
			case CURRENT_USER:
				{
				setState(3485);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				{
				setState(3486);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterMaterializedViewContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public AlterMaterializedViewClausesContext alterMaterializedViewClauses() {
			return getRuleContext(AlterMaterializedViewClausesContext.class,0);
		}
		public AlterMaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterMaterializedView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterMaterializedView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterMaterializedView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterMaterializedViewContext alterMaterializedView() throws RecognitionException {
		AlterMaterializedViewContext _localctx = new AlterMaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_alterMaterializedView);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3489);
			match(ALTER);
			setState(3490);
			match(MATERIALIZED);
			setState(3491);
			match(VIEW);
			setState(3492);
			alterMaterializedViewClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterMaterializedViewClausesContext extends ParserRuleContext {
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public TerminalNode DEPENDS() { return getToken(DDLStatementParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(DDLStatementParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(DDLStatementParser.TABLESPACE, i);
		}
		public TerminalNode OWNED() { return getToken(DDLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(DDLStatementParser.NOWAIT, 0); }
		public AlterMaterializedViewClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterMaterializedViewClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterMaterializedViewClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterMaterializedViewClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterMaterializedViewClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterMaterializedViewClausesContext alterMaterializedViewClauses() throws RecognitionException {
		AlterMaterializedViewClausesContext _localctx = new AlterMaterializedViewClausesContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_alterMaterializedViewClauses);
		int _la;
		try {
			setState(3552);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3496);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
				case 1:
					{
					setState(3494);
					match(IF);
					setState(3495);
					match(EXISTS);
					}
					break;
				}
				setState(3498);
				qualifiedName();
				setState(3499);
				alterTableCmds();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3501);
				qualifiedName();
				setState(3502);
				match(DEPENDS);
				setState(3503);
				match(ON);
				setState(3504);
				match(EXTENSION);
				setState(3505);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3509);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					setState(3507);
					match(IF);
					setState(3508);
					match(EXISTS);
					}
					break;
				}
				setState(3511);
				qualifiedName();
				setState(3512);
				match(RENAME);
				setState(3514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(3513);
					match(COLUMN);
					}
				}

				setState(3516);
				columnName();
				setState(3517);
				match(TO);
				setState(3518);
				columnName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3522);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,253,_ctx) ) {
				case 1:
					{
					setState(3520);
					match(IF);
					setState(3521);
					match(EXISTS);
					}
					break;
				}
				setState(3524);
				qualifiedName();
				setState(3525);
				match(RENAME);
				setState(3526);
				match(TO);
				setState(3527);
				qualifiedName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3531);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					setState(3529);
					match(IF);
					setState(3530);
					match(EXISTS);
					}
					break;
				}
				setState(3533);
				qualifiedName();
				setState(3534);
				match(SET);
				setState(3535);
				match(SCHEMA);
				setState(3536);
				schemaName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3538);
				match(ALL);
				setState(3539);
				match(IN);
				setState(3540);
				match(TABLESPACE);
				setState(3541);
				name();
				{
				setState(3542);
				match(OWNED);
				setState(3543);
				match(BY);
				setState(3544);
				roleList();
				}
				setState(3546);
				match(SET);
				setState(3547);
				match(TABLESPACE);
				setState(3548);
				name();
				setState(3550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOWAIT) {
					{
					setState(3549);
					match(NOWAIT);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(DDLStatementParser.DECLARE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CursorOptionsContext cursorOptions() {
			return getRuleContext(CursorOptionsContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(DDLStatementParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode HOLD() { return getToken(DDLStatementParser.HOLD, 0); }
		public TerminalNode WITHOUT() { return getToken(DDLStatementParser.WITHOUT, 0); }
		public DeclareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDeclare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDeclare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDeclare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareContext declare() throws RecognitionException {
		DeclareContext _localctx = new DeclareContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_declare);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3554);
			match(DECLARE);
			setState(3555);
			name();
			setState(3556);
			cursorOptions();
			setState(3557);
			match(CURSOR);
			setState(3562);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(3558);
				match(WITH);
				setState(3559);
				match(HOLD);
				}
				break;
			case WITHOUT:
				{
				setState(3560);
				match(WITHOUT);
				setState(3561);
				match(HOLD);
				}
				break;
			case FOR:
				break;
			default:
				break;
			}
			setState(3564);
			match(FOR);
			setState(3565);
			select();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorOptionsContext extends ParserRuleContext {
		public List<CursorOptionContext> cursorOption() {
			return getRuleContexts(CursorOptionContext.class);
		}
		public CursorOptionContext cursorOption(int i) {
			return getRuleContext(CursorOptionContext.class,i);
		}
		public CursorOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCursorOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCursorOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCursorOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorOptionsContext cursorOptions() throws RecognitionException {
		CursorOptionsContext _localctx = new CursorOptionsContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_cursorOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3570);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BINARY || _la==NO || _la==INSENSITIVE || _la==SCROLL) {
				{
				{
				setState(3567);
				cursorOption();
				}
				}
				setState(3572);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorOptionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode SCROLL() { return getToken(DDLStatementParser.SCROLL, 0); }
		public TerminalNode BINARY() { return getToken(DDLStatementParser.BINARY, 0); }
		public TerminalNode INSENSITIVE() { return getToken(DDLStatementParser.INSENSITIVE, 0); }
		public CursorOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCursorOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCursorOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCursorOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorOptionContext cursorOption() throws RecognitionException {
		CursorOptionContext _localctx = new CursorOptionContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_cursorOption);
		try {
			setState(3578);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(3573);
				match(NO);
				setState(3574);
				match(SCROLL);
				}
				break;
			case SCROLL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3575);
				match(SCROLL);
				}
				break;
			case BINARY:
				enterOuterAlt(_localctx, 3);
				{
				setState(3576);
				match(BINARY);
				}
				break;
			case INSENSITIVE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3577);
				match(INSENSITIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(DDLStatementParser.EXECUTE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ExecuteParamClauseContext executeParamClause() {
			return getRuleContext(ExecuteParamClauseContext.class,0);
		}
		public ExecuteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExecute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExecute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExecute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteContext execute() throws RecognitionException {
		ExecuteContext _localctx = new ExecuteContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_execute);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3580);
			match(EXECUTE);
			setState(3581);
			name();
			setState(3582);
			executeParamClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateMaterializedViewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public CreateMvTargetContext createMvTarget() {
			return getRuleContext(CreateMvTargetContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode UNLOGGED() { return getToken(DDLStatementParser.UNLOGGED, 0); }
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public CreateMaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createMaterializedView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateMaterializedView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateMaterializedView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateMaterializedViewContext createMaterializedView() throws RecognitionException {
		CreateMaterializedViewContext _localctx = new CreateMaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_createMaterializedView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3584);
			match(CREATE);
			setState(3586);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNLOGGED) {
				{
				setState(3585);
				match(UNLOGGED);
				}
			}

			setState(3588);
			match(MATERIALIZED);
			setState(3589);
			match(VIEW);
			setState(3593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,261,_ctx) ) {
			case 1:
				{
				setState(3590);
				match(IF);
				setState(3591);
				match(NOT);
				setState(3592);
				match(EXISTS);
				}
				break;
			}
			setState(3595);
			createMvTarget();
			setState(3596);
			match(AS);
			setState(3597);
			select();
			setState(3603);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				{
				setState(3598);
				match(WITH);
				setState(3599);
				match(DATA);
				}
				break;
			case 2:
				{
				setState(3600);
				match(WITH);
				setState(3601);
				match(NO);
				setState(3602);
				match(DATA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateMvTargetContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TableAccessMethodClauseContext tableAccessMethodClause() {
			return getRuleContext(TableAccessMethodClauseContext.class,0);
		}
		public OptColumnListContext optColumnList() {
			return getRuleContext(OptColumnListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateMvTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createMvTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateMvTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateMvTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateMvTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateMvTargetContext createMvTarget() throws RecognitionException {
		CreateMvTargetContext _localctx = new CreateMvTargetContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_createMvTarget);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3605);
			qualifiedName();
			setState(3607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(3606);
				optColumnList();
				}
			}

			setState(3609);
			tableAccessMethodClause();
			setState(3612);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3610);
				match(WITH);
				setState(3611);
				reloptions();
				}
			}

			setState(3616);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(3614);
				match(TABLESPACE);
				setState(3615);
				name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshMatViewStmtContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(DDLStatementParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode CONCURRENTLY() { return getToken(DDLStatementParser.CONCURRENTLY, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public RefreshMatViewStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshMatViewStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRefreshMatViewStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRefreshMatViewStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRefreshMatViewStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshMatViewStmtContext refreshMatViewStmt() throws RecognitionException {
		RefreshMatViewStmtContext _localctx = new RefreshMatViewStmtContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_refreshMatViewStmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3618);
			match(REFRESH);
			setState(3619);
			match(MATERIALIZED);
			setState(3620);
			match(VIEW);
			setState(3622);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(3621);
				match(CONCURRENTLY);
				}
			}

			setState(3624);
			qualifiedName();
			setState(3630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
			case 1:
				{
				setState(3625);
				match(WITH);
				setState(3626);
				match(DATA);
				}
				break;
			case 2:
				{
				setState(3627);
				match(WITH);
				setState(3628);
				match(NO);
				setState(3629);
				match(DATA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPolicyContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode POLICY() { return getToken(DDLStatementParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public AlterPolicyClausesContext alterPolicyClauses() {
			return getRuleContext(AlterPolicyClausesContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public AlterPolicyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPolicy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterPolicy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterPolicy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterPolicy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPolicyContext alterPolicy() throws RecognitionException {
		AlterPolicyContext _localctx = new AlterPolicyContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_alterPolicy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3632);
			match(ALTER);
			setState(3633);
			match(POLICY);
			setState(3636);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				{
				setState(3634);
				match(IF);
				setState(3635);
				match(EXISTS);
				}
				break;
			}
			setState(3638);
			name();
			setState(3639);
			match(ON);
			setState(3640);
			qualifiedName();
			setState(3641);
			alterPolicyClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPolicyClausesContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public List<TerminalNode> LP_() { return getTokens(DDLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(DDLStatementParser.LP_, i);
		}
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public List<TerminalNode> RP_() { return getTokens(DDLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(DDLStatementParser.RP_, i);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(DDLStatementParser.CHECK, 0); }
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterPolicyClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPolicyClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterPolicyClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterPolicyClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterPolicyClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPolicyClausesContext alterPolicyClauses() throws RecognitionException {
		AlterPolicyClausesContext _localctx = new AlterPolicyClausesContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_alterPolicyClauses);
		int _la;
		try {
			setState(3665);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case WITH:
			case USING:
			case TO:
				enterOuterAlt(_localctx, 1);
				{
				setState(3645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(3643);
					match(TO);
					setState(3644);
					roleList();
					}
				}

				setState(3652);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(3647);
					match(USING);
					setState(3648);
					match(LP_);
					setState(3649);
					aExpr(0);
					setState(3650);
					match(RP_);
					}
				}

				setState(3660);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3654);
					match(WITH);
					setState(3655);
					match(CHECK);
					setState(3656);
					match(LP_);
					setState(3657);
					aExpr(0);
					setState(3658);
					match(RP_);
					}
				}

				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 2);
				{
				setState(3662);
				match(RENAME);
				setState(3663);
				match(TO);
				setState(3664);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public AlterProcedureClausesContext alterProcedureClauses() {
			return getRuleContext(AlterProcedureClausesContext.class,0);
		}
		public AlterProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureContext alterProcedure() throws RecognitionException {
		AlterProcedureContext _localctx = new AlterProcedureContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_alterProcedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3667);
			match(ALTER);
			setState(3668);
			match(PROCEDURE);
			setState(3669);
			functionWithArgtypes();
			setState(3670);
			alterProcedureClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterProcedureClausesContext extends ParserRuleContext {
		public AlterfuncOptListContext alterfuncOptList() {
			return getRuleContext(AlterfuncOptListContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(DDLStatementParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterProcedureClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterProcedureClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterProcedureClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterProcedureClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterProcedureClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterProcedureClausesContext alterProcedureClauses() throws RecognitionException {
		AlterProcedureClausesContext _localctx = new AlterProcedureClausesContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_alterProcedureClauses);
		int _la;
		try {
			setState(3692);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,275,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3672);
				alterfuncOptList();
				setState(3674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(3673);
					match(RESTRICT);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3676);
				match(RENAME);
				setState(3677);
				match(TO);
				setState(3678);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3680);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3679);
					match(NO);
					}
				}

				setState(3682);
				match(DEPENDS);
				setState(3683);
				match(ON);
				setState(3684);
				match(EXTENSION);
				setState(3685);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3686);
				match(SET);
				setState(3687);
				match(SCHEMA);
				setState(3688);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3689);
				match(OWNER);
				setState(3690);
				match(TO);
				setState(3691);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterfuncOptListContext extends ParserRuleContext {
		public List<CommonFuncOptItemContext> commonFuncOptItem() {
			return getRuleContexts(CommonFuncOptItemContext.class);
		}
		public CommonFuncOptItemContext commonFuncOptItem(int i) {
			return getRuleContext(CommonFuncOptItemContext.class,i);
		}
		public AlterfuncOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterfuncOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterfuncOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterfuncOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterfuncOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterfuncOptListContext alterfuncOptList() throws RecognitionException {
		AlterfuncOptListContext _localctx = new AlterfuncOptListContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_alterfuncOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3695); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3694);
				commonFuncOptItem();
				}
				}
				setState(3697); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==SET || _la==NOT || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (ROWS - 225)) | (1L << (EXTERNAL - 225)) | (1L << (RESET - 225)))) != 0) || _la==SECURITY || ((((_la - 427)) & ~0x3f) == 0 && ((1L << (_la - 427)) & ((1L << (COST - 427)) | (1L << (CALLED - 427)) | (1L << (PARALLEL - 427)) | (1L << (LEAKPROOF - 427)) | (1L << (IMMUTABLE - 427)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (RETURNS - 514)) | (1L << (SUPPORT - 514)) | (1L << (STABLE - 514)) | (1L << (VOLATILE - 514)) | (1L << (STRICT - 514)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public AlterFunctionClausesContext alterFunctionClauses() {
			return getRuleContext(AlterFunctionClausesContext.class,0);
		}
		public AlterFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionContext alterFunction() throws RecognitionException {
		AlterFunctionContext _localctx = new AlterFunctionContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_alterFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3699);
			match(ALTER);
			setState(3700);
			match(FUNCTION);
			setState(3701);
			functionWithArgtypes();
			setState(3702);
			alterFunctionClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionClausesContext extends ParserRuleContext {
		public AlterfuncOptListContext alterfuncOptList() {
			return getRuleContext(AlterfuncOptListContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(DDLStatementParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterFunctionClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunctionClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterFunctionClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterFunctionClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterFunctionClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionClausesContext alterFunctionClauses() throws RecognitionException {
		AlterFunctionClausesContext _localctx = new AlterFunctionClausesContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_alterFunctionClauses);
		int _la;
		try {
			setState(3724);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3704);
				alterfuncOptList();
				setState(3706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(3705);
					match(RESTRICT);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3708);
				match(RENAME);
				setState(3709);
				match(TO);
				setState(3710);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3712);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3711);
					match(NO);
					}
				}

				setState(3714);
				match(DEPENDS);
				setState(3715);
				match(ON);
				setState(3716);
				match(EXTENSION);
				setState(3717);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3718);
				match(SET);
				setState(3719);
				match(SCHEMA);
				setState(3720);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3721);
				match(OWNER);
				setState(3722);
				match(TO);
				setState(3723);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPublicationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode PUBLICATION() { return getToken(DDLStatementParser.PUBLICATION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public AlterPublicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPublication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterPublication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterPublication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterPublication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPublicationContext alterPublication() throws RecognitionException {
		AlterPublicationContext _localctx = new AlterPublicationContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_alterPublication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3726);
			match(ALTER);
			setState(3727);
			match(PUBLICATION);
			setState(3728);
			name();
			setState(3740);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				{
				setState(3729);
				match(RENAME);
				setState(3730);
				match(TO);
				setState(3731);
				name();
				}
				break;
			case 2:
				{
				setState(3732);
				match(OWNER);
				setState(3733);
				match(TO);
				setState(3734);
				roleSpec();
				}
				break;
			case 3:
				{
				setState(3735);
				match(SET);
				setState(3736);
				definition();
				}
				break;
			case 4:
				{
				setState(3737);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DROP) | (1L << ADD) | (1L << SET))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3738);
				match(TABLE);
				setState(3739);
				relationExprList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterRoutineContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode ROUTINE() { return getToken(DDLStatementParser.ROUTINE, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public AlterProcedureClausesContext alterProcedureClauses() {
			return getRuleContext(AlterProcedureClausesContext.class,0);
		}
		public AlterRoutineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRoutine; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterRoutine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterRoutine(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRoutineContext alterRoutine() throws RecognitionException {
		AlterRoutineContext _localctx = new AlterRoutineContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_alterRoutine);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3742);
			match(ALTER);
			setState(3743);
			match(ROUTINE);
			setState(3744);
			functionWithArgtypes();
			setState(3745);
			alterProcedureClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterRuleContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode RULE() { return getToken(DDLStatementParser.RULE, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRuleContext alterRule() throws RecognitionException {
		AlterRuleContext _localctx = new AlterRuleContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_alterRule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3747);
			match(ALTER);
			setState(3748);
			match(RULE);
			setState(3749);
			match(ON);
			setState(3750);
			qualifiedName();
			setState(3751);
			match(RENAME);
			setState(3752);
			match(TO);
			setState(3753);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(DDLStatementParser.SEQUENCE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public AlterSequenceClausesContext alterSequenceClauses() {
			return getRuleContext(AlterSequenceClausesContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public AlterSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSequenceContext alterSequence() throws RecognitionException {
		AlterSequenceContext _localctx = new AlterSequenceContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_alterSequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3755);
			match(ALTER);
			setState(3756);
			match(SEQUENCE);
			setState(3759);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				{
				setState(3757);
				match(IF);
				setState(3758);
				match(EXISTS);
				}
				break;
			}
			setState(3761);
			qualifiedName();
			setState(3762);
			alterSequenceClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSequenceClausesContext extends ParserRuleContext {
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public AlterSequenceClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSequenceClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterSequenceClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterSequenceClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterSequenceClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSequenceClausesContext alterSequenceClauses() throws RecognitionException {
		AlterSequenceClausesContext _localctx = new AlterSequenceClausesContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_alterSequenceClauses);
		try {
			setState(3772);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3764);
				alterTableCmds();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3765);
				seqOptList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3766);
				match(RENAME);
				setState(3767);
				match(TO);
				setState(3768);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3769);
				match(SET);
				setState(3770);
				match(SCHEMA);
				setState(3771);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public ForeignServerVersionContext foreignServerVersion() {
			return getRuleContext(ForeignServerVersionContext.class,0);
		}
		public AlterGenericOptionsContext alterGenericOptions() {
			return getRuleContext(AlterGenericOptionsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerContext alterServer() throws RecognitionException {
		AlterServerContext _localctx = new AlterServerContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_alterServer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3774);
			match(ALTER);
			setState(3775);
			match(SERVER);
			setState(3776);
			name();
			setState(3788);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,283,_ctx) ) {
			case 1:
				{
				setState(3777);
				foreignServerVersion();
				setState(3778);
				alterGenericOptions();
				}
				break;
			case 2:
				{
				setState(3780);
				foreignServerVersion();
				}
				break;
			case 3:
				{
				setState(3781);
				alterGenericOptions();
				}
				break;
			case 4:
				{
				setState(3782);
				match(RENAME);
				setState(3783);
				match(TO);
				setState(3784);
				name();
				}
				break;
			case 5:
				{
				setState(3785);
				match(OWNER);
				setState(3786);
				match(TO);
				setState(3787);
				roleSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForeignServerVersionContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(DDLStatementParser.VERSION, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public ForeignServerVersionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignServerVersion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterForeignServerVersion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitForeignServerVersion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitForeignServerVersion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeignServerVersionContext foreignServerVersion() throws RecognitionException {
		ForeignServerVersionContext _localctx = new ForeignServerVersionContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_foreignServerVersion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3790);
			match(VERSION);
			setState(3791);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStatisticsContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public List<TerminalNode> STATISTICS() { return getTokens(DDLStatementParser.STATISTICS); }
		public TerminalNode STATISTICS(int i) {
			return getToken(DDLStatementParser.STATISTICS, i);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public AlterStatisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterStatistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterStatistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterStatistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatisticsContext alterStatistics() throws RecognitionException {
		AlterStatisticsContext _localctx = new AlterStatisticsContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_alterStatistics);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3793);
			match(ALTER);
			setState(3794);
			match(STATISTICS);
			setState(3819);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				{
				setState(3797);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,284,_ctx) ) {
				case 1:
					{
					setState(3795);
					match(IF);
					setState(3796);
					match(EXISTS);
					}
					break;
				}
				setState(3799);
				anyName();
				setState(3800);
				match(SET);
				setState(3801);
				match(STATISTICS);
				setState(3802);
				signedIconst();
				}
				break;
			case 2:
				{
				setState(3804);
				anyName();
				setState(3805);
				match(RENAME);
				setState(3806);
				match(TO);
				setState(3807);
				name();
				}
				break;
			case 3:
				{
				setState(3809);
				anyName();
				setState(3810);
				match(SET);
				setState(3811);
				match(SCHEMA);
				setState(3812);
				name();
				}
				break;
			case 4:
				{
				setState(3814);
				anyName();
				setState(3815);
				match(OWNER);
				setState(3816);
				match(TO);
				setState(3817);
				roleSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSubscriptionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(DDLStatementParser.SUBSCRIPTION, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(DDLStatementParser.CONNECTION, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode REFRESH() { return getToken(DDLStatementParser.REFRESH, 0); }
		public TerminalNode PUBLICATION() { return getToken(DDLStatementParser.PUBLICATION, 0); }
		public PublicationNameListContext publicationNameList() {
			return getRuleContext(PublicationNameListContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(DDLStatementParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(DDLStatementParser.DISABLE, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public AlterSubscriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSubscription; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterSubscription(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterSubscription(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterSubscription(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSubscriptionContext alterSubscription() throws RecognitionException {
		AlterSubscriptionContext _localctx = new AlterSubscriptionContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_alterSubscription);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3821);
			match(ALTER);
			setState(3822);
			match(SUBSCRIPTION);
			setState(3823);
			name();
			setState(3848);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				setState(3824);
				match(RENAME);
				setState(3825);
				match(TO);
				setState(3826);
				name();
				}
				break;
			case 2:
				{
				setState(3827);
				match(OWNER);
				setState(3828);
				match(TO);
				setState(3829);
				roleSpec();
				}
				break;
			case 3:
				{
				setState(3830);
				match(SET);
				setState(3831);
				definition();
				}
				break;
			case 4:
				{
				setState(3832);
				match(CONNECTION);
				setState(3833);
				match(STRING_);
				}
				break;
			case 5:
				{
				setState(3834);
				match(REFRESH);
				setState(3835);
				match(PUBLICATION);
				setState(3838);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3836);
					match(WITH);
					setState(3837);
					definition();
					}
				}

				}
				break;
			case 6:
				{
				setState(3840);
				match(SET);
				setState(3841);
				match(PUBLICATION);
				setState(3842);
				publicationNameList();
				setState(3845);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3843);
					match(WITH);
					setState(3844);
					definition();
					}
				}

				}
				break;
			case 7:
				{
				setState(3847);
				_la = _input.LA(1);
				if ( !(_la==ENABLE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PublicationNameListContext extends ParserRuleContext {
		public List<PublicationNameItemContext> publicationNameItem() {
			return getRuleContexts(PublicationNameItemContext.class);
		}
		public PublicationNameItemContext publicationNameItem(int i) {
			return getRuleContext(PublicationNameItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public PublicationNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publicationNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPublicationNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPublicationNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPublicationNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PublicationNameListContext publicationNameList() throws RecognitionException {
		PublicationNameListContext _localctx = new PublicationNameListContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_publicationNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3850);
			publicationNameItem();
			setState(3855);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3851);
				match(COMMA_);
				setState(3852);
				publicationNameItem();
				}
				}
				setState(3857);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PublicationNameItemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public PublicationNameItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publicationNameItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPublicationNameItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPublicationNameItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPublicationNameItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PublicationNameItemContext publicationNameItem() throws RecognitionException {
		PublicationNameItemContext _localctx = new PublicationNameItemContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_publicationNameItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3858);
			colLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSystemContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode SYSTEM() { return getToken(DDLStatementParser.SYSTEM, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public GenericSetContext genericSet() {
			return getRuleContext(GenericSetContext.class,0);
		}
		public TerminalNode RESET() { return getToken(DDLStatementParser.RESET, 0); }
		public GenericResetContext genericReset() {
			return getRuleContext(GenericResetContext.class,0);
		}
		public AlterSystemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSystem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterSystem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterSystem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterSystem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSystemContext alterSystem() throws RecognitionException {
		AlterSystemContext _localctx = new AlterSystemContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_alterSystem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3860);
			match(ALTER);
			setState(3861);
			match(SYSTEM);
			setState(3866);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				{
				setState(3862);
				match(SET);
				setState(3863);
				genericSet();
				}
				break;
			case RESET:
				{
				setState(3864);
				match(RESET);
				setState(3865);
				genericReset();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode RESET() { return getToken(DDLStatementParser.RESET, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_alterTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3868);
			match(ALTER);
			setState(3869);
			match(TABLESPACE);
			setState(3870);
			name();
			setState(3880);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				{
				setState(3871);
				match(SET);
				}
				break;
			case RESET:
				{
				setState(3872);
				match(RESET);
				setState(3873);
				reloptions();
				}
				break;
			case RENAME:
				{
				setState(3874);
				match(RENAME);
				setState(3875);
				match(TO);
				setState(3876);
				name();
				}
				break;
			case OWNER:
				{
				setState(3877);
				match(OWNER);
				setState(3878);
				match(TO);
				setState(3879);
				roleSpec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTextSearchConfigurationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(DDLStatementParser.CONFIGURATION, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public AlterTextSearchConfigurationClausesContext alterTextSearchConfigurationClauses() {
			return getRuleContext(AlterTextSearchConfigurationClausesContext.class,0);
		}
		public AlterTextSearchConfigurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchConfiguration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTextSearchConfiguration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTextSearchConfiguration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTextSearchConfiguration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchConfigurationContext alterTextSearchConfiguration() throws RecognitionException {
		AlterTextSearchConfigurationContext _localctx = new AlterTextSearchConfigurationContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_alterTextSearchConfiguration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3882);
			match(ALTER);
			setState(3883);
			match(TEXT);
			setState(3884);
			match(SEARCH);
			setState(3885);
			match(CONFIGURATION);
			setState(3886);
			anyName();
			setState(3887);
			alterTextSearchConfigurationClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTextSearchConfigurationClausesContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode MAPPING() { return getToken(DDLStatementParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public AlterTextSearchConfigurationClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchConfigurationClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTextSearchConfigurationClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTextSearchConfigurationClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTextSearchConfigurationClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchConfigurationClausesContext alterTextSearchConfigurationClauses() throws RecognitionException {
		AlterTextSearchConfigurationClausesContext _localctx = new AlterTextSearchConfigurationClausesContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_alterTextSearchConfigurationClauses);
		int _la;
		try {
			setState(3926);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3889);
				match(RENAME);
				setState(3890);
				match(TO);
				setState(3891);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3892);
				match(SET);
				setState(3893);
				match(SCHEMA);
				setState(3894);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3895);
				match(OWNER);
				setState(3896);
				match(TO);
				setState(3897);
				roleSpec();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3898);
				_la = _input.LA(1);
				if ( !(_la==ALTER || _la==ADD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3899);
				match(MAPPING);
				setState(3900);
				match(FOR);
				setState(3901);
				nameList(0);
				setState(3903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3902);
					match(WITH);
					}
				}

				setState(3905);
				anyNameList();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3907);
				match(ALTER);
				setState(3908);
				match(MAPPING);
				setState(3911);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(3909);
					match(FOR);
					setState(3910);
					nameList(0);
					}
				}

				setState(3913);
				match(REPLACE);
				setState(3914);
				anyName();
				setState(3915);
				match(WITH);
				setState(3916);
				anyName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3918);
				match(DROP);
				setState(3919);
				match(MAPPING);
				setState(3922);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(3920);
					match(IF);
					setState(3921);
					match(EXISTS);
					}
				}

				setState(3924);
				match(FOR);
				setState(3925);
				nameList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnyNameListContext extends ParserRuleContext {
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public AnyNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAnyNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAnyNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAnyNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnyNameListContext anyNameList() throws RecognitionException {
		AnyNameListContext _localctx = new AnyNameListContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_anyNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3928);
			anyName();
			setState(3933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(3929);
				match(COMMA_);
				setState(3930);
				anyName();
				}
				}
				setState(3935);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTextSearchDictionaryContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(DDLStatementParser.DICTIONARY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public AlterTextSearchDictionaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchDictionary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTextSearchDictionary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTextSearchDictionary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTextSearchDictionary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchDictionaryContext alterTextSearchDictionary() throws RecognitionException {
		AlterTextSearchDictionaryContext _localctx = new AlterTextSearchDictionaryContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_alterTextSearchDictionary);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3936);
			match(ALTER);
			setState(3937);
			match(TEXT);
			setState(3938);
			match(SEARCH);
			setState(3939);
			match(DICTIONARY);
			setState(3940);
			anyName();
			setState(3951);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(3941);
				match(RENAME);
				setState(3942);
				match(TO);
				setState(3943);
				name();
				}
				break;
			case SET:
				{
				setState(3944);
				match(SET);
				setState(3945);
				match(SCHEMA);
				setState(3946);
				name();
				}
				break;
			case OWNER:
				{
				setState(3947);
				match(OWNER);
				setState(3948);
				match(TO);
				setState(3949);
				roleSpec();
				}
				break;
			case LP_:
				{
				setState(3950);
				definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTextSearchParserContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(DDLStatementParser.PARSER, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public AlterTextSearchParserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchParser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTextSearchParser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTextSearchParser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTextSearchParser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchParserContext alterTextSearchParser() throws RecognitionException {
		AlterTextSearchParserContext _localctx = new AlterTextSearchParserContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_alterTextSearchParser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3953);
			match(ALTER);
			setState(3954);
			match(TEXT);
			setState(3955);
			match(SEARCH);
			setState(3956);
			match(PARSER);
			setState(3965);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				setState(3957);
				anyName();
				setState(3958);
				match(RENAME);
				setState(3959);
				match(TO);
				setState(3960);
				name();
				}
				break;
			case 2:
				{
				setState(3962);
				match(SET);
				setState(3963);
				match(SCHEMA);
				setState(3964);
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTextSearchTemplateContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public TerminalNode TEMPLATE() { return getToken(DDLStatementParser.TEMPLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public AlterTextSearchTemplateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTextSearchTemplate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTextSearchTemplate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTextSearchTemplate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTextSearchTemplate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTextSearchTemplateContext alterTextSearchTemplate() throws RecognitionException {
		AlterTextSearchTemplateContext _localctx = new AlterTextSearchTemplateContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_alterTextSearchTemplate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3967);
			match(ALTER);
			setState(3968);
			match(TEXT);
			setState(3969);
			match(SEARCH);
			setState(3970);
			match(TEMPLATE);
			setState(3979);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				setState(3971);
				anyName();
				setState(3972);
				match(RENAME);
				setState(3973);
				match(TO);
				setState(3974);
				name();
				}
				break;
			case 2:
				{
				setState(3976);
				match(SET);
				setState(3977);
				match(SCHEMA);
				setState(3978);
				name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTriggerContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(DDLStatementParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(DDLStatementParser.ON, i);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode DEPENDS() { return getToken(DDLStatementParser.DEPENDS, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public AlterTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTriggerContext alterTrigger() throws RecognitionException {
		AlterTriggerContext _localctx = new AlterTriggerContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_alterTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3981);
			match(ALTER);
			setState(3982);
			match(TRIGGER);
			setState(3983);
			name();
			setState(3984);
			match(ON);
			setState(3985);
			qualifiedName();
			setState(3996);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(3986);
				match(RENAME);
				setState(3987);
				match(TO);
				setState(3988);
				name();
				}
				break;
			case NO:
			case DEPENDS:
				{
				setState(3990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3989);
					match(NO);
					}
				}

				setState(3992);
				match(DEPENDS);
				setState(3993);
				match(ON);
				setState(3994);
				match(EXTENSION);
				setState(3995);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTypeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public AlterTypeClausesContext alterTypeClauses() {
			return getRuleContext(AlterTypeClausesContext.class,0);
		}
		public AlterTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeContext alterType() throws RecognitionException {
		AlterTypeContext _localctx = new AlterTypeContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_alterType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3998);
			match(ALTER);
			setState(3999);
			match(TYPE);
			setState(4000);
			anyName();
			setState(4001);
			alterTypeClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTypeClausesContext extends ParserRuleContext {
		public AlterTypeCmdsContext alterTypeCmds() {
			return getRuleContext(AlterTypeCmdsContext.class,0);
		}
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode VALUE() { return getToken(DDLStatementParser.VALUE, 0); }
		public List<TerminalNode> STRING_() { return getTokens(DDLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DDLStatementParser.STRING_, i);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public TerminalNode BEFORE() { return getToken(DDLStatementParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(DDLStatementParser.AFTER, 0); }
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode ATTRIBUTE() { return getToken(DDLStatementParser.ATTRIBUTE, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public OperatorDefListContext operatorDefList() {
			return getRuleContext(OperatorDefListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public AlterTypeClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTypeClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTypeClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTypeClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTypeClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeClausesContext alterTypeClauses() throws RecognitionException {
		AlterTypeClausesContext _localctx = new AlterTypeClausesContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_alterTypeClauses);
		int _la;
		try {
			setState(4043);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4003);
				alterTypeCmds();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4004);
				match(ADD);
				setState(4005);
				match(VALUE);
				setState(4009);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(4006);
					match(IF);
					setState(4007);
					match(NOT);
					setState(4008);
					match(EXISTS);
					}
				}

				setState(4011);
				match(STRING_);
				setState(4014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER || _la==BEFORE) {
					{
					setState(4012);
					_la = _input.LA(1);
					if ( !(_la==AFTER || _la==BEFORE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4013);
					match(STRING_);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4016);
				match(RENAME);
				setState(4017);
				match(VALUE);
				setState(4018);
				match(STRING_);
				setState(4019);
				match(TO);
				setState(4020);
				match(STRING_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4021);
				match(RENAME);
				setState(4022);
				match(TO);
				setState(4023);
				name();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4024);
				match(RENAME);
				setState(4025);
				match(ATTRIBUTE);
				setState(4026);
				name();
				setState(4027);
				match(TO);
				setState(4028);
				name();
				setState(4030);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4029);
					dropBehavior();
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4032);
				match(SET);
				setState(4033);
				match(SCHEMA);
				setState(4034);
				name();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4035);
				match(SET);
				setState(4036);
				match(LP_);
				setState(4037);
				operatorDefList();
				setState(4038);
				match(RP_);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4040);
				match(OWNER);
				setState(4041);
				match(TO);
				setState(4042);
				roleSpec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTypeCmdsContext extends ParserRuleContext {
		public List<AlterTypeCmdContext> alterTypeCmd() {
			return getRuleContexts(AlterTypeCmdContext.class);
		}
		public AlterTypeCmdContext alterTypeCmd(int i) {
			return getRuleContext(AlterTypeCmdContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public AlterTypeCmdsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTypeCmds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTypeCmds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTypeCmds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTypeCmds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeCmdsContext alterTypeCmds() throws RecognitionException {
		AlterTypeCmdsContext _localctx = new AlterTypeCmdsContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_alterTypeCmds);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4045);
			alterTypeCmd();
			setState(4048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(4046);
				match(COMMA_);
				setState(4047);
				alterTypeCmd();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTypeCmdContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(DDLStatementParser.ATTRIBUTE, 0); }
		public TableFuncElementContext tableFuncElement() {
			return getRuleContext(TableFuncElementContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public SetDataContext setData() {
			return getRuleContext(SetDataContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public AlterTypeCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTypeCmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterTypeCmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterTypeCmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterTypeCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeCmdContext alterTypeCmd() throws RecognitionException {
		AlterTypeCmdContext _localctx = new AlterTypeCmdContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_alterTypeCmd);
		int _la;
		try {
			setState(4084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4050);
				match(ADD);
				setState(4051);
				match(ATTRIBUTE);
				setState(4052);
				tableFuncElement();
				setState(4054);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4053);
					dropBehavior();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4056);
				match(DROP);
				setState(4057);
				match(ATTRIBUTE);
				setState(4058);
				match(IF);
				setState(4059);
				match(EXISTS);
				setState(4060);
				colId();
				setState(4062);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4061);
					dropBehavior();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4064);
				match(DROP);
				setState(4065);
				match(ATTRIBUTE);
				setState(4066);
				colId();
				setState(4068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4067);
					dropBehavior();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4070);
				match(ALTER);
				setState(4071);
				match(ATTRIBUTE);
				setState(4072);
				colId();
				setState(4074);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(4073);
					setData();
					}
				}

				setState(4076);
				match(TYPE);
				setState(4077);
				typeName();
				setState(4079);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(4078);
					collateClause();
					}
				}

				setState(4082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(4081);
					dropBehavior();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserMappingContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(DDLStatementParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public AuthIdentContext authIdent() {
			return getRuleContext(AuthIdentContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public AlterGenericOptionsContext alterGenericOptions() {
			return getRuleContext(AlterGenericOptionsContext.class,0);
		}
		public AlterUserMappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserMapping; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterUserMapping(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterUserMapping(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterUserMapping(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserMappingContext alterUserMapping() throws RecognitionException {
		AlterUserMappingContext _localctx = new AlterUserMappingContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_alterUserMapping);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4086);
			match(ALTER);
			setState(4087);
			match(USER);
			setState(4088);
			match(MAPPING);
			setState(4089);
			match(FOR);
			setState(4090);
			authIdent();
			setState(4091);
			match(SERVER);
			setState(4092);
			name();
			setState(4093);
			alterGenericOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthIdentContext extends ParserRuleContext {
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public AuthIdentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authIdent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAuthIdent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAuthIdent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAuthIdent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthIdentContext authIdent() throws RecognitionException {
		AuthIdentContext _localctx = new AuthIdentContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_authIdent);
		try {
			setState(4097);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4095);
				roleSpec();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4096);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public AlterViewClausesContext alterViewClauses() {
			return getRuleContext(AlterViewClausesContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public AlterViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewContext alterView() throws RecognitionException {
		AlterViewContext _localctx = new AlterViewContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_alterView);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4099);
			match(ALTER);
			setState(4100);
			match(VIEW);
			setState(4103);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				{
				setState(4101);
				match(IF);
				setState(4102);
				match(EXISTS);
				}
				break;
			}
			setState(4105);
			qualifiedName();
			setState(4106);
			alterViewClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewClausesContext extends ParserRuleContext {
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public AlterViewClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterViewClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterViewClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterViewClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterViewClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewClausesContext alterViewClauses() throws RecognitionException {
		AlterViewClausesContext _localctx = new AlterViewClausesContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_alterViewClauses);
		int _la;
		try {
			setState(4123);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4108);
				alterTableCmds();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4109);
				match(RENAME);
				setState(4110);
				match(TO);
				setState(4111);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4112);
				match(RENAME);
				setState(4114);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(4113);
					match(COLUMN);
					}
				}

				setState(4116);
				name();
				setState(4117);
				match(TO);
				setState(4118);
				name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4120);
				match(SET);
				setState(4121);
				match(SCHEMA);
				setState(4122);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CloseContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(DDLStatementParser.CLOSE, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public CloseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterClose(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitClose(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitClose(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CloseContext close() throws RecognitionException {
		CloseContext _localctx = new CloseContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_close);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4125);
			match(CLOSE);
			setState(4128);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(4126);
				cursorName();
				}
				break;
			case ALL:
				{
				setState(4127);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterContext extends ParserRuleContext {
		public TerminalNode CLUSTER() { return getToken(DDLStatementParser.CLUSTER, 0); }
		public TerminalNode VERBOSE() { return getToken(DDLStatementParser.VERBOSE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public ClusterIndexSpecificationContext clusterIndexSpecification() {
			return getRuleContext(ClusterIndexSpecificationContext.class,0);
		}
		public ClusterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cluster; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCluster(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCluster(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCluster(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterContext cluster() throws RecognitionException {
		ClusterContext _localctx = new ClusterContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_cluster);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4130);
			match(CLUSTER);
			setState(4132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERBOSE) {
				{
				setState(4131);
				match(VERBOSE);
				}
			}

			setState(4142);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
			case 1:
				{
				setState(4134);
				qualifiedName();
				setState(4136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4135);
					clusterIndexSpecification();
					}
				}

				}
				break;
			case 2:
				{
				setState(4138);
				name();
				setState(4139);
				match(ON);
				setState(4140);
				qualifiedName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusterIndexSpecificationContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ClusterIndexSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clusterIndexSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterClusterIndexSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitClusterIndexSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitClusterIndexSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusterIndexSpecificationContext clusterIndexSpecification() throws RecognitionException {
		ClusterIndexSpecificationContext _localctx = new ClusterIndexSpecificationContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_clusterIndexSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4144);
			match(USING);
			setState(4145);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(DDLStatementParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public CommentClausesContext commentClauses() {
			return getRuleContext(CommentClausesContext.class,0);
		}
		public CommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentContext comment() throws RecognitionException {
		CommentContext _localctx = new CommentContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_comment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4147);
			match(COMMENT);
			setState(4148);
			match(ON);
			setState(4149);
			commentClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentClausesContext extends ParserRuleContext {
		public ObjectTypeAnyNameContext objectTypeAnyName() {
			return getRuleContext(ObjectTypeAnyNameContext.class,0);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode IS() { return getToken(DDLStatementParser.IS, 0); }
		public CommentTextContext commentText() {
			return getRuleContext(CommentTextContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public ObjectTypeNameContext objectTypeName() {
			return getRuleContext(ObjectTypeNameContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode DOMAIN() { return getToken(DDLStatementParser.DOMAIN, 0); }
		public TerminalNode AGGREGATE() { return getToken(DDLStatementParser.AGGREGATE, 0); }
		public AggregateWithArgtypesContext aggregateWithArgtypes() {
			return getRuleContext(AggregateWithArgtypesContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public OperatorWithArgtypesContext operatorWithArgtypes() {
			return getRuleContext(OperatorWithArgtypesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public ObjectTypeNameOnAnyNameContext objectTypeNameOnAnyName() {
			return getRuleContext(ObjectTypeNameOnAnyNameContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(DDLStatementParser.ROUTINE, 0); }
		public TerminalNode TRANSFORM() { return getToken(DDLStatementParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public TerminalNode CLASS() { return getToken(DDLStatementParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(DDLStatementParser.FAMILY, 0); }
		public TerminalNode LARGE() { return getToken(DDLStatementParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DDLStatementParser.OBJECT, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode CAST() { return getToken(DDLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public CommentClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCommentClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCommentClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCommentClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentClausesContext commentClauses() throws RecognitionException {
		CommentClausesContext _localctx = new CommentClausesContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_commentClauses);
		try {
			setState(4262);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4151);
				objectTypeAnyName();
				setState(4152);
				anyName();
				setState(4153);
				match(IS);
				setState(4154);
				commentText();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4156);
				match(COLUMN);
				setState(4157);
				anyName();
				setState(4158);
				match(IS);
				setState(4159);
				commentText();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4161);
				objectTypeName();
				setState(4162);
				name();
				setState(4163);
				match(IS);
				setState(4164);
				commentText();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4166);
				match(TYPE);
				setState(4167);
				typeName();
				setState(4168);
				match(IS);
				setState(4169);
				commentText();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4171);
				match(DOMAIN);
				setState(4172);
				typeName();
				setState(4173);
				match(IS);
				setState(4174);
				commentText();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4176);
				match(AGGREGATE);
				setState(4177);
				aggregateWithArgtypes();
				setState(4178);
				match(IS);
				setState(4179);
				commentText();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4181);
				match(FUNCTION);
				setState(4182);
				functionWithArgtypes();
				setState(4183);
				match(IS);
				setState(4184);
				commentText();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4186);
				match(OPERATOR);
				setState(4187);
				operatorWithArgtypes();
				setState(4188);
				match(IS);
				setState(4189);
				commentText();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4191);
				match(CONSTRAINT);
				setState(4192);
				name();
				setState(4193);
				match(ON);
				setState(4194);
				anyName();
				setState(4195);
				match(IS);
				setState(4196);
				commentText();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4198);
				match(CONSTRAINT);
				setState(4199);
				name();
				setState(4200);
				match(ON);
				setState(4201);
				match(DOMAIN);
				setState(4202);
				anyName();
				setState(4203);
				match(IS);
				setState(4204);
				commentText();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4206);
				objectTypeNameOnAnyName();
				setState(4207);
				name();
				setState(4208);
				match(ON);
				setState(4209);
				anyName();
				setState(4210);
				match(IS);
				setState(4211);
				commentText();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4213);
				match(PROCEDURE);
				setState(4214);
				functionWithArgtypes();
				setState(4215);
				match(IS);
				setState(4216);
				commentText();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4218);
				match(ROUTINE);
				setState(4219);
				functionWithArgtypes();
				setState(4220);
				match(IS);
				setState(4221);
				commentText();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4223);
				match(TRANSFORM);
				setState(4224);
				match(FOR);
				setState(4225);
				typeName();
				setState(4226);
				match(LANGUAGE);
				setState(4227);
				name();
				setState(4228);
				match(IS);
				setState(4229);
				commentText();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4231);
				match(OPERATOR);
				setState(4232);
				match(CLASS);
				setState(4233);
				anyName();
				setState(4234);
				match(USING);
				setState(4235);
				name();
				setState(4236);
				match(IS);
				setState(4237);
				commentText();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4239);
				match(OPERATOR);
				setState(4240);
				match(FAMILY);
				setState(4241);
				anyName();
				setState(4242);
				match(USING);
				setState(4243);
				name();
				setState(4244);
				match(IS);
				setState(4245);
				commentText();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4247);
				match(LARGE);
				setState(4248);
				match(OBJECT);
				setState(4249);
				numericOnly();
				setState(4250);
				match(IS);
				setState(4251);
				commentText();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4253);
				match(CAST);
				setState(4254);
				match(LP_);
				setState(4255);
				typeName();
				setState(4256);
				match(AS);
				setState(4257);
				typeName();
				setState(4258);
				match(RP_);
				setState(4259);
				match(IS);
				setState(4260);
				commentText();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ObjectTypeNameOnAnyNameContext extends ParserRuleContext {
		public TerminalNode POLICY() { return getToken(DDLStatementParser.POLICY, 0); }
		public TerminalNode RULE() { return getToken(DDLStatementParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public ObjectTypeNameOnAnyNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectTypeNameOnAnyName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterObjectTypeNameOnAnyName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitObjectTypeNameOnAnyName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitObjectTypeNameOnAnyName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ObjectTypeNameOnAnyNameContext objectTypeNameOnAnyName() throws RecognitionException {
		ObjectTypeNameOnAnyNameContext _localctx = new ObjectTypeNameOnAnyNameContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_objectTypeNameOnAnyName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4264);
			_la = _input.LA(1);
			if ( !(_la==TRIGGER || _la==RULE || _la==POLICY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ObjectTypeNameContext extends ParserRuleContext {
		public DropTypeNameContext dropTypeName() {
			return getRuleContext(DropTypeNameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(DDLStatementParser.DATABASE, 0); }
		public TerminalNode ROLE() { return getToken(DDLStatementParser.ROLE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(DDLStatementParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public ObjectTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterObjectTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitObjectTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitObjectTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ObjectTypeNameContext objectTypeName() throws RecognitionException {
		ObjectTypeNameContext _localctx = new ObjectTypeNameContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_objectTypeName);
		try {
			setState(4271);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCHEMA:
			case FOREIGN:
			case EXTENSION:
			case LANGUAGE:
			case ACCESS:
			case EVENT:
			case PROCEDURAL:
			case PUBLICATION:
			case SERVER:
				enterOuterAlt(_localctx, 1);
				{
				setState(4266);
				dropTypeName();
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4267);
				match(DATABASE);
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4268);
				match(ROLE);
				}
				break;
			case SUBSCRIPTION:
				enterOuterAlt(_localctx, 4);
				{
				setState(4269);
				match(SUBSCRIPTION);
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 5);
				{
				setState(4270);
				match(TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTypeNameContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(DDLStatementParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(DDLStatementParser.METHOD, 0); }
		public TerminalNode EVENT() { return getToken(DDLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(DDLStatementParser.WRAPPER, 0); }
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(DDLStatementParser.PROCEDURAL, 0); }
		public TerminalNode PUBLICATION() { return getToken(DDLStatementParser.PUBLICATION, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public DropTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTypeNameContext dropTypeName() throws RecognitionException {
		DropTypeNameContext _localctx = new DropTypeNameContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_dropTypeName);
		int _la;
		try {
			setState(4288);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACCESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4273);
				match(ACCESS);
				setState(4274);
				match(METHOD);
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4275);
				match(EVENT);
				setState(4276);
				match(TRIGGER);
				}
				break;
			case EXTENSION:
				enterOuterAlt(_localctx, 3);
				{
				setState(4277);
				match(EXTENSION);
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 4);
				{
				setState(4278);
				match(FOREIGN);
				setState(4279);
				match(DATA);
				setState(4280);
				match(WRAPPER);
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4282);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(4281);
					match(PROCEDURAL);
					}
				}

				setState(4284);
				match(LANGUAGE);
				}
				break;
			case PUBLICATION:
				enterOuterAlt(_localctx, 6);
				{
				setState(4285);
				match(PUBLICATION);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 7);
				{
				setState(4286);
				match(SCHEMA);
				}
				break;
			case SERVER:
				enterOuterAlt(_localctx, 8);
				{
				setState(4287);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ObjectTypeAnyNameContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(DDLStatementParser.SEQUENCE, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode COLLATION() { return getToken(DDLStatementParser.COLLATION, 0); }
		public TerminalNode CONVERSION() { return getToken(DDLStatementParser.CONVERSION, 0); }
		public TerminalNode STATISTICS() { return getToken(DDLStatementParser.STATISTICS, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(DDLStatementParser.PARSER, 0); }
		public TerminalNode DICTIONARY() { return getToken(DDLStatementParser.DICTIONARY, 0); }
		public TerminalNode TEMPLATE() { return getToken(DDLStatementParser.TEMPLATE, 0); }
		public TerminalNode CONFIGURATION() { return getToken(DDLStatementParser.CONFIGURATION, 0); }
		public ObjectTypeAnyNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectTypeAnyName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterObjectTypeAnyName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitObjectTypeAnyName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitObjectTypeAnyName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ObjectTypeAnyNameContext objectTypeAnyName() throws RecognitionException {
		ObjectTypeAnyNameContext _localctx = new ObjectTypeAnyNameContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_objectTypeAnyName);
		try {
			setState(4313);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4290);
				match(TABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4291);
				match(SEQUENCE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4292);
				match(VIEW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4293);
				match(MATERIALIZED);
				setState(4294);
				match(VIEW);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4295);
				match(INDEX);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4296);
				match(FOREIGN);
				setState(4297);
				match(TABLE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4298);
				match(COLLATION);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4299);
				match(CONVERSION);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4300);
				match(STATISTICS);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4301);
				match(TEXT);
				setState(4302);
				match(SEARCH);
				setState(4303);
				match(PARSER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4304);
				match(TEXT);
				setState(4305);
				match(SEARCH);
				setState(4306);
				match(DICTIONARY);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4307);
				match(TEXT);
				setState(4308);
				match(SEARCH);
				setState(4309);
				match(TEMPLATE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4310);
				match(TEXT);
				setState(4311);
				match(SEARCH);
				setState(4312);
				match(CONFIGURATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentTextContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public CommentTextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentText; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCommentText(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCommentText(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCommentText(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentTextContext commentText() throws RecognitionException {
		CommentTextContext _localctx = new CommentTextContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_commentText);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4315);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAccessMethodContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode ACCESS() { return getToken(DDLStatementParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(DDLStatementParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TerminalNode HANDLER() { return getToken(DDLStatementParser.HANDLER, 0); }
		public HandlerNameContext handlerName() {
			return getRuleContext(HandlerNameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public CreateAccessMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAccessMethod; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateAccessMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateAccessMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateAccessMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAccessMethodContext createAccessMethod() throws RecognitionException {
		CreateAccessMethodContext _localctx = new CreateAccessMethodContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_createAccessMethod);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4317);
			match(CREATE);
			setState(4318);
			match(ACCESS);
			setState(4319);
			match(METHOD);
			setState(4320);
			name();
			setState(4321);
			match(TYPE);
			setState(4322);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4323);
			match(HANDLER);
			setState(4324);
			handlerName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAggregateContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode AGGREGATE() { return getToken(DDLStatementParser.AGGREGATE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public AggrArgsContext aggrArgs() {
			return getRuleContext(AggrArgsContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public OldAggrDefinitionContext oldAggrDefinition() {
			return getRuleContext(OldAggrDefinitionContext.class,0);
		}
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public CreateAggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateAggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateAggregate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateAggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAggregateContext createAggregate() throws RecognitionException {
		CreateAggregateContext _localctx = new CreateAggregateContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_createAggregate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4326);
			match(CREATE);
			setState(4329);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4327);
				match(OR);
				setState(4328);
				match(REPLACE);
				}
			}

			setState(4331);
			match(AGGREGATE);
			setState(4332);
			funcName();
			setState(4337);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				{
				setState(4333);
				aggrArgs();
				setState(4334);
				definition();
				}
				break;
			case 2:
				{
				setState(4336);
				oldAggrDefinition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OldAggrDefinitionContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public OldAggrListContext oldAggrList() {
			return getRuleContext(OldAggrListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public OldAggrDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oldAggrDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOldAggrDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOldAggrDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOldAggrDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OldAggrDefinitionContext oldAggrDefinition() throws RecognitionException {
		OldAggrDefinitionContext _localctx = new OldAggrDefinitionContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_oldAggrDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4339);
			match(LP_);
			setState(4340);
			oldAggrList();
			setState(4341);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OldAggrListContext extends ParserRuleContext {
		public List<OldAggrElemContext> oldAggrElem() {
			return getRuleContexts(OldAggrElemContext.class);
		}
		public OldAggrElemContext oldAggrElem(int i) {
			return getRuleContext(OldAggrElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public OldAggrListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oldAggrList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOldAggrList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOldAggrList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOldAggrList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OldAggrListContext oldAggrList() throws RecognitionException {
		OldAggrListContext _localctx = new OldAggrListContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_oldAggrList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4343);
			oldAggrElem();
			setState(4348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4344);
				match(COMMA_);
				setState(4345);
				oldAggrElem();
				}
				}
				setState(4350);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OldAggrElemContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public DefArgContext defArg() {
			return getRuleContext(DefArgContext.class,0);
		}
		public OldAggrElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oldAggrElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOldAggrElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOldAggrElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOldAggrElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OldAggrElemContext oldAggrElem() throws RecognitionException {
		OldAggrElemContext _localctx = new OldAggrElemContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_oldAggrElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4351);
			identifier();
			setState(4352);
			match(EQ_);
			setState(4353);
			defArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateCastContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode CAST() { return getToken(DDLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(DDLStatementParser.WITHOUT, 0); }
		public TerminalNode INOUT() { return getToken(DDLStatementParser.INOUT, 0); }
		public CastContextContext castContext() {
			return getRuleContext(CastContextContext.class,0);
		}
		public CreateCastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createCast; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateCast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateCast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateCast(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateCastContext createCast() throws RecognitionException {
		CreateCastContext _localctx = new CreateCastContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_createCast);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4355);
			match(CREATE);
			setState(4356);
			match(CAST);
			setState(4357);
			match(LP_);
			setState(4358);
			typeName();
			setState(4359);
			match(AS);
			setState(4360);
			typeName();
			setState(4361);
			match(RP_);
			setState(4378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				{
				setState(4362);
				match(WITH);
				setState(4363);
				match(FUNCTION);
				setState(4364);
				functionWithArgtypes();
				setState(4366);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4365);
					castContext();
					}
				}

				}
				break;
			case 2:
				{
				setState(4368);
				match(WITHOUT);
				setState(4369);
				match(FUNCTION);
				setState(4371);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4370);
					castContext();
					}
				}

				}
				break;
			case 3:
				{
				setState(4373);
				match(WITH);
				setState(4374);
				match(INOUT);
				setState(4376);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4375);
					castContext();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastContextContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode IMPLICIT() { return getToken(DDLStatementParser.IMPLICIT, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(DDLStatementParser.ASSIGNMENT, 0); }
		public CastContextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castContext; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCastContext(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCastContext(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCastContext(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastContextContext castContext() throws RecognitionException {
		CastContextContext _localctx = new CastContextContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_castContext);
		try {
			setState(4384);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4380);
				match(AS);
				setState(4381);
				match(IMPLICIT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4382);
				match(AS);
				setState(4383);
				match(ASSIGNMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateCollationContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode COLLATION() { return getToken(DDLStatementParser.COLLATION, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public CreateCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createCollation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateCollation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateCollationContext createCollation() throws RecognitionException {
		CreateCollationContext _localctx = new CreateCollationContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_createCollation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4386);
			match(CREATE);
			setState(4387);
			match(COLLATION);
			setState(4391);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				setState(4388);
				match(IF);
				setState(4389);
				match(NOT);
				setState(4390);
				match(EXISTS);
				}
				break;
			}
			setState(4400);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				setState(4393);
				anyName();
				setState(4394);
				definition();
				}
				break;
			case 2:
				{
				setState(4396);
				anyName();
				setState(4397);
				match(FROM);
				setState(4398);
				anyName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateConversionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode CONVERSION() { return getToken(DDLStatementParser.CONVERSION, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public List<TerminalNode> STRING_() { return getTokens(DDLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DDLStatementParser.STRING_, i);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public CreateConversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createConversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateConversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateConversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateConversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateConversionContext createConversion() throws RecognitionException {
		CreateConversionContext _localctx = new CreateConversionContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_createConversion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4402);
			match(CREATE);
			setState(4404);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4403);
				match(DEFAULT);
				}
			}

			setState(4406);
			match(CONVERSION);
			setState(4407);
			anyName();
			setState(4408);
			match(FOR);
			setState(4409);
			match(STRING_);
			setState(4410);
			match(TO);
			setState(4411);
			match(STRING_);
			setState(4412);
			match(FROM);
			setState(4413);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDomainContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode DOMAIN() { return getToken(DDLStatementParser.DOMAIN, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public CreateDomainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDomain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateDomain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateDomain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateDomain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDomainContext createDomain() throws RecognitionException {
		CreateDomainContext _localctx = new CreateDomainContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_createDomain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4415);
			match(CREATE);
			setState(4416);
			match(DOMAIN);
			setState(4417);
			anyName();
			setState(4419);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4418);
				match(AS);
				}
			}

			setState(4421);
			typeName();
			setState(4422);
			colQualList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventTriggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(DDLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(DDLStatementParser.EXECUTE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public TerminalNode WHEN() { return getToken(DDLStatementParser.WHEN, 0); }
		public EventTriggerWhenListContext eventTriggerWhenList() {
			return getRuleContext(EventTriggerWhenListContext.class,0);
		}
		public CreateEventTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEventTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateEventTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateEventTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateEventTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventTriggerContext createEventTrigger() throws RecognitionException {
		CreateEventTriggerContext _localctx = new CreateEventTriggerContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_createEventTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4424);
			match(CREATE);
			setState(4425);
			match(EVENT);
			setState(4426);
			match(TRIGGER);
			setState(4427);
			name();
			setState(4428);
			match(ON);
			setState(4429);
			colLabel();
			setState(4432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(4430);
				match(WHEN);
				setState(4431);
				eventTriggerWhenList();
				}
			}

			setState(4434);
			match(EXECUTE);
			setState(4435);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4436);
			funcName();
			setState(4437);
			match(LP_);
			setState(4438);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventTriggerWhenListContext extends ParserRuleContext {
		public List<EventTriggerWhenItemContext> eventTriggerWhenItem() {
			return getRuleContexts(EventTriggerWhenItemContext.class);
		}
		public EventTriggerWhenItemContext eventTriggerWhenItem(int i) {
			return getRuleContext(EventTriggerWhenItemContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(DDLStatementParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(DDLStatementParser.AND, i);
		}
		public EventTriggerWhenListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventTriggerWhenList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterEventTriggerWhenList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitEventTriggerWhenList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitEventTriggerWhenList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventTriggerWhenListContext eventTriggerWhenList() throws RecognitionException {
		EventTriggerWhenListContext _localctx = new EventTriggerWhenListContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_eventTriggerWhenList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4440);
			eventTriggerWhenItem();
			setState(4445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND) {
				{
				{
				setState(4441);
				match(AND);
				setState(4442);
				eventTriggerWhenItem();
				}
				}
				setState(4447);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventTriggerWhenItemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public EventTriggerValueListContext eventTriggerValueList() {
			return getRuleContext(EventTriggerValueListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public EventTriggerWhenItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventTriggerWhenItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterEventTriggerWhenItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitEventTriggerWhenItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitEventTriggerWhenItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventTriggerWhenItemContext eventTriggerWhenItem() throws RecognitionException {
		EventTriggerWhenItemContext _localctx = new EventTriggerWhenItemContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_eventTriggerWhenItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4448);
			colId();
			setState(4449);
			match(IN);
			setState(4450);
			match(LP_);
			setState(4451);
			eventTriggerValueList();
			setState(4452);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventTriggerValueListContext extends ParserRuleContext {
		public List<TerminalNode> STRING_() { return getTokens(DDLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DDLStatementParser.STRING_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public EventTriggerValueListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_eventTriggerValueList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterEventTriggerValueList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitEventTriggerValueList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitEventTriggerValueList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventTriggerValueListContext eventTriggerValueList() throws RecognitionException {
		EventTriggerValueListContext _localctx = new EventTriggerValueListContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_eventTriggerValueList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4454);
			match(STRING_);
			setState(4459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4455);
				match(COMMA_);
				setState(4456);
				match(STRING_);
				}
				}
				setState(4461);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateExtensionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateExtensionOptListContext createExtensionOptList() {
			return getRuleContext(CreateExtensionOptListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public CreateExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateExtension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateExtension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionContext createExtension() throws RecognitionException {
		CreateExtensionContext _localctx = new CreateExtensionContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_createExtension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4462);
			match(CREATE);
			setState(4463);
			match(EXTENSION);
			setState(4467);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				{
				setState(4464);
				match(IF);
				setState(4465);
				match(NOT);
				setState(4466);
				match(EXISTS);
				}
				break;
			}
			setState(4469);
			name();
			setState(4471);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4470);
				match(WITH);
				}
			}

			setState(4473);
			createExtensionOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateExtensionOptListContext extends ParserRuleContext {
		public List<CreateExtensionOptItemContext> createExtensionOptItem() {
			return getRuleContexts(CreateExtensionOptItemContext.class);
		}
		public CreateExtensionOptItemContext createExtensionOptItem(int i) {
			return getRuleContext(CreateExtensionOptItemContext.class,i);
		}
		public CreateExtensionOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtensionOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateExtensionOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateExtensionOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateExtensionOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionOptListContext createExtensionOptList() throws RecognitionException {
		CreateExtensionOptListContext _localctx = new CreateExtensionOptListContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_createExtensionOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SCHEMA || _la==FROM || _la==CASCADE || _la==VERSION) {
				{
				{
				setState(4475);
				createExtensionOptItem();
				}
				}
				setState(4480);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateExtensionOptItemContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode VERSION() { return getToken(DDLStatementParser.VERSION, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public CreateExtensionOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtensionOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateExtensionOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateExtensionOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateExtensionOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionOptItemContext createExtensionOptItem() throws RecognitionException {
		CreateExtensionOptItemContext _localctx = new CreateExtensionOptItemContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_createExtensionOptItem);
		try {
			setState(4488);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(4481);
				match(SCHEMA);
				setState(4482);
				name();
				}
				break;
			case VERSION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4483);
				match(VERSION);
				setState(4484);
				nonReservedWordOrSconst();
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 3);
				{
				setState(4485);
				match(FROM);
				setState(4486);
				nonReservedWordOrSconst();
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 4);
				{
				setState(4487);
				match(CASCADE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignDataWrapperContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(DDLStatementParser.WRAPPER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public FdwOptionsContext fdwOptions() {
			return getRuleContext(FdwOptionsContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public CreateForeignDataWrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignDataWrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateForeignDataWrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateForeignDataWrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateForeignDataWrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignDataWrapperContext createForeignDataWrapper() throws RecognitionException {
		CreateForeignDataWrapperContext _localctx = new CreateForeignDataWrapperContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_createForeignDataWrapper);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4490);
			match(CREATE);
			setState(4491);
			match(FOREIGN);
			setState(4492);
			match(DATA);
			setState(4493);
			match(WRAPPER);
			setState(4494);
			name();
			setState(4496);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO || _la==HANDLER || _la==VALIDATOR) {
				{
				setState(4495);
				fdwOptions();
				}
			}

			setState(4499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(4498);
				createGenericOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignTableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public CreateForeignTableClausesContext createForeignTableClauses() {
			return getRuleContext(CreateForeignTableClausesContext.class,0);
		}
		public CreateForeignTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateForeignTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateForeignTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateForeignTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignTableContext createForeignTable() throws RecognitionException {
		CreateForeignTableContext _localctx = new CreateForeignTableContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_createForeignTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4501);
			match(CREATE);
			setState(4502);
			match(FOREIGN);
			setState(4503);
			match(TABLE);
			setState(4504);
			createForeignTableClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignTableClausesContext extends ParserRuleContext {
		public List<QualifiedNameContext> qualifiedName() {
			return getRuleContexts(QualifiedNameContext.class);
		}
		public QualifiedNameContext qualifiedName(int i) {
			return getRuleContext(QualifiedNameContext.class,i);
		}
		public List<TerminalNode> LP_() { return getTokens(DDLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(DDLStatementParser.LP_, i);
		}
		public List<TerminalNode> RP_() { return getTokens(DDLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(DDLStatementParser.RP_, i);
		}
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public TableElementListContext tableElementList() {
			return getRuleContext(TableElementListContext.class,0);
		}
		public TerminalNode INHERITS() { return getToken(DDLStatementParser.INHERITS, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(DDLStatementParser.PARTITION, 0); }
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public PartitionBoundSpecContext partitionBoundSpec() {
			return getRuleContext(PartitionBoundSpecContext.class,0);
		}
		public TypedTableElementListContext typedTableElementList() {
			return getRuleContext(TypedTableElementListContext.class,0);
		}
		public CreateForeignTableClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignTableClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateForeignTableClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateForeignTableClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateForeignTableClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignTableClausesContext createForeignTableClauses() throws RecognitionException {
		CreateForeignTableClausesContext _localctx = new CreateForeignTableClausesContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_createForeignTableClauses);
		int _la;
		try {
			setState(4550);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,355,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4509);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
				case 1:
					{
					setState(4506);
					match(IF);
					setState(4507);
					match(NOT);
					setState(4508);
					match(EXISTS);
					}
					break;
				}
				setState(4511);
				qualifiedName();
				setState(4512);
				match(LP_);
				setState(4514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (PRIMARY - 65)) | (1L << (UNIQUE - 65)) | (1L << (FOREIGN - 65)) | (1L << (KEY - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (IF - 65)) | (1L << (LIKE - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (VARYING - 129)) | (1L << (VALUE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (CHECK - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (ENUM - 329)) | (1L << (XML - 329)) | (1L << (ORDINALITY - 329)) | (1L << (NFC - 329)) | (1L << (NFD - 329)) | (1L << (NFKC - 329)) | (1L << (NFKD - 329)) | (1L << (REF - 329)) | (1L << (PASSING - 329)) | (1L << (VERSION - 329)) | (1L << (YES - 329)) | (1L << (STANDALONE - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OPERATOR - 329)) | (1L << (SHARE - 329)) | (1L << (ROLLUP - 329)) | (1L << (DOCUMENT - 329)) | (1L << (NORMALIZED - 329)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)) | (1L << (FAMILY - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)) | (1L << (UNENCRYPTED - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (IDENTIFIER_ - 523)))) != 0)) {
					{
					setState(4513);
					tableElementList();
					}
				}

				setState(4516);
				match(RP_);
				setState(4522);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INHERITS) {
					{
					setState(4517);
					match(INHERITS);
					setState(4518);
					match(LP_);
					setState(4519);
					qualifiedNameList(0);
					setState(4520);
					match(RP_);
					}
				}

				setState(4524);
				match(SERVER);
				setState(4525);
				name();
				setState(4527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(4526);
					createGenericOptions();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4532);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(4529);
					match(IF);
					setState(4530);
					match(NOT);
					setState(4531);
					match(EXISTS);
					}
					break;
				}
				setState(4534);
				qualifiedName();
				setState(4535);
				match(PARTITION);
				setState(4536);
				match(OF);
				setState(4537);
				qualifiedName();
				setState(4542);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(4538);
					match(LP_);
					setState(4539);
					typedTableElementList();
					setState(4540);
					match(RP_);
					}
				}

				setState(4544);
				partitionBoundSpec();
				setState(4545);
				match(SERVER);
				setState(4546);
				name();
				setState(4548);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(4547);
					createGenericOptions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementListContext extends ParserRuleContext {
		public List<TableElementContext> tableElement() {
			return getRuleContexts(TableElementContext.class);
		}
		public TableElementContext tableElement(int i) {
			return getRuleContext(TableElementContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementListContext tableElementList() throws RecognitionException {
		TableElementListContext _localctx = new TableElementListContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_tableElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4552);
			tableElement();
			setState(4557);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4553);
				match(COMMA_);
				setState(4554);
				tableElement();
				}
				}
				setState(4559);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableElementContext extends ParserRuleContext {
		public ColumnDefContext columnDef() {
			return getRuleContext(ColumnDefContext.class,0);
		}
		public TableLikeClauseContext tableLikeClause() {
			return getRuleContext(TableLikeClauseContext.class,0);
		}
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableElementContext tableElement() throws RecognitionException {
		TableElementContext _localctx = new TableElementContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_tableElement);
		try {
			setState(4563);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4560);
				columnDef();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4561);
				tableLikeClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4562);
				tableConstraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLikeClauseContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(DDLStatementParser.LIKE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TableLikeOptionListContext tableLikeOptionList() {
			return getRuleContext(TableLikeOptionListContext.class,0);
		}
		public TableLikeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableLikeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableLikeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableLikeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeClauseContext tableLikeClause() throws RecognitionException {
		TableLikeClauseContext _localctx = new TableLikeClauseContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_tableLikeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4565);
			match(LIKE);
			setState(4566);
			qualifiedName();
			setState(4567);
			tableLikeOptionList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableLikeOptionListContext extends ParserRuleContext {
		public TableLikeOptionListContext tableLikeOptionList() {
			return getRuleContext(TableLikeOptionListContext.class,0);
		}
		public TableLikeOptionContext tableLikeOption() {
			return getRuleContext(TableLikeOptionContext.class,0);
		}
		public TerminalNode INCLUDING() { return getToken(DDLStatementParser.INCLUDING, 0); }
		public TerminalNode EXCLUDING() { return getToken(DDLStatementParser.EXCLUDING, 0); }
		public TableLikeOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableLikeOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableLikeOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableLikeOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeOptionListContext tableLikeOptionList() throws RecognitionException {
		return tableLikeOptionList(0);
	}

	private TableLikeOptionListContext tableLikeOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableLikeOptionListContext _localctx = new TableLikeOptionListContext(_ctx, _parentState);
		TableLikeOptionListContext _prevctx = _localctx;
		int _startState = 498;
		enterRecursionRule(_localctx, 498, RULE_tableLikeOptionList, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(4575);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,358,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableLikeOptionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableLikeOptionList);
					setState(4570);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4571);
					_la = _input.LA(1);
					if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4572);
					tableLikeOption();
					}
					} 
				}
				setState(4577);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,358,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableLikeOptionContext extends ParserRuleContext {
		public TerminalNode COMMENTS() { return getToken(DDLStatementParser.COMMENTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(DDLStatementParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(DDLStatementParser.DEFAULTS, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public TerminalNode GENERATED() { return getToken(DDLStatementParser.GENERATED, 0); }
		public TerminalNode INDEXES() { return getToken(DDLStatementParser.INDEXES, 0); }
		public TerminalNode STATISTICS() { return getToken(DDLStatementParser.STATISTICS, 0); }
		public TerminalNode STORAGE() { return getToken(DDLStatementParser.STORAGE, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TableLikeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableLikeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableLikeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableLikeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableLikeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableLikeOptionContext tableLikeOption() throws RecognitionException {
		TableLikeOptionContext _localctx = new TableLikeOptionContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_tableLikeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4578);
			_la = _input.LA(1);
			if ( !(_la==ALL || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (GENERATED - 216)) | (1L << (COMMENTS - 216)) | (1L << (CONSTRAINTS - 216)) | (1L << (DEFAULTS - 216)) | (1L << (IDENTITY - 216)) | (1L << (INDEXES - 216)))) != 0) || _la==STATISTICS || _la==STORAGE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public FuncArgsWithDefaultsContext funcArgsWithDefaults() {
			return getRuleContext(FuncArgsWithDefaultsContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(DDLStatementParser.RETURNS, 0); }
		public FuncReturnContext funcReturn() {
			return getRuleContext(FuncReturnContext.class,0);
		}
		public CreatefuncOptListContext createfuncOptList() {
			return getRuleContext(CreatefuncOptListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TableFuncColumnListContext tableFuncColumnList() {
			return getRuleContext(TableFuncColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public CreateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionContext createFunction() throws RecognitionException {
		CreateFunctionContext _localctx = new CreateFunctionContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_createFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4580);
			match(CREATE);
			setState(4583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4581);
				match(OR);
				setState(4582);
				match(REPLACE);
				}
			}

			setState(4585);
			match(FUNCTION);
			setState(4586);
			funcName();
			setState(4587);
			funcArgsWithDefaults();
			setState(4600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
			case 1:
				{
				setState(4588);
				match(RETURNS);
				setState(4589);
				funcReturn();
				setState(4590);
				createfuncOptList();
				}
				break;
			case 2:
				{
				setState(4592);
				match(RETURNS);
				setState(4593);
				match(TABLE);
				setState(4594);
				match(LP_);
				setState(4595);
				tableFuncColumnList();
				setState(4596);
				match(RP_);
				setState(4597);
				createfuncOptList();
				}
				break;
			case 3:
				{
				setState(4599);
				createfuncOptList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncColumnListContext extends ParserRuleContext {
		public List<TableFuncColumnContext> tableFuncColumn() {
			return getRuleContexts(TableFuncColumnContext.class);
		}
		public TableFuncColumnContext tableFuncColumn(int i) {
			return getRuleContext(TableFuncColumnContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TableFuncColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableFuncColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableFuncColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableFuncColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncColumnListContext tableFuncColumnList() throws RecognitionException {
		TableFuncColumnListContext _localctx = new TableFuncColumnListContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_tableFuncColumnList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4602);
			tableFuncColumn();
			setState(4607);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4603);
				match(COMMA_);
				setState(4604);
				tableFuncColumn();
				}
				}
				setState(4609);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncColumnContext extends ParserRuleContext {
		public ParamNameContext paramName() {
			return getRuleContext(ParamNameContext.class,0);
		}
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public TableFuncColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableFuncColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableFuncColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableFuncColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncColumnContext tableFuncColumn() throws RecognitionException {
		TableFuncColumnContext _localctx = new TableFuncColumnContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_tableFuncColumn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4610);
			paramName();
			setState(4611);
			funcType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatefuncOptListContext extends ParserRuleContext {
		public List<CreatefuncOptItemContext> createfuncOptItem() {
			return getRuleContexts(CreatefuncOptItemContext.class);
		}
		public CreatefuncOptItemContext createfuncOptItem(int i) {
			return getRuleContext(CreatefuncOptItemContext.class,i);
		}
		public CreatefuncOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfuncOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreatefuncOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreatefuncOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreatefuncOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatefuncOptListContext createfuncOptList() throws RecognitionException {
		CreatefuncOptListContext _localctx = new CreatefuncOptListContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_createfuncOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4614); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4613);
				createfuncOptItem();
				}
				}
				setState(4616); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (SET - 62)) | (1L << (AS - 62)) | (1L << (NOT - 62)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (WINDOW - 197)) | (1L << (ROWS - 197)) | (1L << (EXTERNAL - 197)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (LANGUAGE - 266)) | (1L << (RESET - 266)) | (1L << (SECURITY - 266)))) != 0) || ((((_la - 427)) & ~0x3f) == 0 && ((1L << (_la - 427)) & ((1L << (COST - 427)) | (1L << (CALLED - 427)) | (1L << (PARALLEL - 427)) | (1L << (LEAKPROOF - 427)) | (1L << (IMMUTABLE - 427)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (RETURNS - 514)) | (1L << (SUPPORT - 514)) | (1L << (STABLE - 514)) | (1L << (TRANSFORM - 514)) | (1L << (VOLATILE - 514)) | (1L << (STRICT - 514)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatefuncOptItemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public FuncAsContext funcAs() {
			return getRuleContext(FuncAsContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public TerminalNode TRANSFORM() { return getToken(DDLStatementParser.TRANSFORM, 0); }
		public TransformTypeListContext transformTypeList() {
			return getRuleContext(TransformTypeListContext.class,0);
		}
		public TerminalNode WINDOW() { return getToken(DDLStatementParser.WINDOW, 0); }
		public CommonFuncOptItemContext commonFuncOptItem() {
			return getRuleContext(CommonFuncOptItemContext.class,0);
		}
		public CreatefuncOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createfuncOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreatefuncOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreatefuncOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreatefuncOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatefuncOptItemContext createfuncOptItem() throws RecognitionException {
		CreatefuncOptItemContext _localctx = new CreatefuncOptItemContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_createfuncOptItem);
		try {
			setState(4626);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				enterOuterAlt(_localctx, 1);
				{
				setState(4618);
				match(AS);
				setState(4619);
				funcAs();
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4620);
				match(LANGUAGE);
				setState(4621);
				nonReservedWordOrSconst();
				}
				break;
			case TRANSFORM:
				enterOuterAlt(_localctx, 3);
				{
				setState(4622);
				match(TRANSFORM);
				setState(4623);
				transformTypeList();
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 4);
				{
				setState(4624);
				match(WINDOW);
				}
				break;
			case SET:
			case NOT:
			case ROWS:
			case EXTERNAL:
			case RESET:
			case SECURITY:
			case COST:
			case CALLED:
			case PARALLEL:
			case LEAKPROOF:
			case IMMUTABLE:
			case RETURNS:
			case SUPPORT:
			case STABLE:
			case VOLATILE:
			case STRICT:
				enterOuterAlt(_localctx, 5);
				{
				setState(4625);
				commonFuncOptItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransformTypeListContext extends ParserRuleContext {
		public List<TerminalNode> FOR() { return getTokens(DDLStatementParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(DDLStatementParser.FOR, i);
		}
		public List<TerminalNode> TYPE() { return getTokens(DDLStatementParser.TYPE); }
		public TerminalNode TYPE(int i) {
			return getToken(DDLStatementParser.TYPE, i);
		}
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public TransformTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transformTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTransformTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTransformTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTransformTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransformTypeListContext transformTypeList() throws RecognitionException {
		TransformTypeListContext _localctx = new TransformTypeListContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_transformTypeList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4628);
			match(FOR);
			setState(4629);
			match(TYPE);
			setState(4630);
			typeName();
			{
			setState(4631);
			match(COMMA_);
			setState(4632);
			match(FOR);
			setState(4633);
			match(TYPE);
			setState(4634);
			typeName();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncAsContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> STRING_() { return getTokens(DDLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DDLStatementParser.STRING_, i);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public FuncAsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcAs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncAs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncAs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncAs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncAsContext funcAs() throws RecognitionException {
		FuncAsContext _localctx = new FuncAsContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_funcAs);
		try {
			setState(4643);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4636);
				identifier();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4637);
				match(STRING_);
				setState(4641);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COMMA_:
					{
					setState(4638);
					match(COMMA_);
					setState(4639);
					identifier();
					}
					break;
				case STRING_:
					{
					setState(4640);
					match(STRING_);
					}
					break;
				case EOF:
				case SET:
				case AS:
				case NOT:
				case WINDOW:
				case ROWS:
				case EXTERNAL:
				case LANGUAGE:
				case RESET:
				case SECURITY:
				case COST:
				case CALLED:
				case PARALLEL:
				case LEAKPROOF:
				case IMMUTABLE:
				case RETURNS:
				case SUPPORT:
				case STABLE:
				case TRANSFORM:
				case VOLATILE:
				case STRICT:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncReturnContext extends ParserRuleContext {
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public FuncReturnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcReturn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncReturn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncReturn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncReturn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncReturnContext funcReturn() throws RecognitionException {
		FuncReturnContext _localctx = new FuncReturnContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_funcReturn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4645);
			funcType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgsWithDefaultsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public FuncArgsWithDefaultsListContext funcArgsWithDefaultsList() {
			return getRuleContext(FuncArgsWithDefaultsListContext.class,0);
		}
		public FuncArgsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgsWithDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncArgsWithDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncArgsWithDefaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncArgsWithDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsWithDefaultsContext funcArgsWithDefaults() throws RecognitionException {
		FuncArgsWithDefaultsContext _localctx = new FuncArgsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_funcArgsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4647);
			match(LP_);
			setState(4649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (KEY - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (NATURAL - 65)) | (1L << (JOIN - 65)) | (1L << (FULL - 65)) | (1L << (INNER - 65)) | (1L << (OUTER - 65)) | (1L << (LEFT - 65)) | (1L << (RIGHT - 65)) | (1L << (CROSS - 65)) | (1L << (IF - 65)) | (1L << (IS - 65)) | (1L << (IN - 65)) | (1L << (LIKE - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (BOOLEAN - 129)) | (1L << (DOUBLE - 129)) | (1L << (CHAR - 129)) | (1L << (CHARACTER - 129)) | (1L << (INTERVAL - 129)) | (1L << (DATE - 129)) | (1L << (TIME - 129)) | (1L << (TIMESTAMP - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (COLLATION - 129)) | (1L << (NAMES - 129)) | (1L << (INTEGER - 129)) | (1L << (REAL - 129)) | (1L << (DECIMAL - 129)) | (1L << (TYPE - 129)) | (1L << (SMALLINT - 129)) | (1L << (BIGINT - 129)) | (1L << (NUMERIC - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (VARYING - 129)) | (1L << (NATIONAL - 129)) | (1L << (NCHAR - 129)) | (1L << (VALUE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (OVERLAPS - 194)) | (1L << (AT - 194)) | (1L << (DEC - 194)) | (1L << (ADMIN - 194)) | (1L << (BINARY - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONCURRENTLY - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)) | (1L << (INT - 258)) | (1L << (INT2 - 258)) | (1L << (INT4 - 258)) | (1L << (INT8 - 258)) | (1L << (FLOAT - 258)) | (1L << (FLOAT4 - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (FLOAT8 - 322)) | (1L << (VARCHAR - 322)) | (1L << (ENUM - 322)) | (1L << (BIT - 322)) | (1L << (XML - 322)) | (1L << (TABLESAMPLE - 322)) | (1L << (ORDINALITY - 322)) | (1L << (CURRENT_SCHEMA - 322)) | (1L << (SETOF - 322)) | (1L << (NFC - 322)) | (1L << (NFD - 322)) | (1L << (NFKC - 322)) | (1L << (NFKD - 322)) | (1L << (REF - 322)) | (1L << (PASSING - 322)) | (1L << (VERSION - 322)) | (1L << (YES - 322)) | (1L << (STANDALONE - 322)) | (1L << (MATERIALIZED - 322)) | (1L << (OPERATOR - 322)) | (1L << (SHARE - 322)) | (1L << (ROLLUP - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (ILIKE - 386)) | (1L << (SIMILAR - 386)) | (1L << (ISNULL - 386)) | (1L << (NOTNULL - 386)) | (1L << (DOCUMENT - 386)) | (1L << (NORMALIZED - 386)) | (1L << (VARIADIC - 386)) | (1L << (NOWAIT - 386)) | (1L << (LOCKED - 386)) | (1L << (COLUMNS - 386)) | (1L << (CONTENT - 386)) | (1L << (STRIP - 386)) | (1L << (WHITESPACE - 386)) | (1L << (CONFLICT - 386)) | (1L << (OVERRIDING - 386)) | (1L << (SYSTEM - 386)) | (1L << (ABORT - 386)) | (1L << (ABSOLUTE - 386)) | (1L << (ACCESS - 386)) | (1L << (AFTER - 386)) | (1L << (AGGREGATE - 386)) | (1L << (ALSO - 386)) | (1L << (ATTACH - 386)) | (1L << (ATTRIBUTE - 386)) | (1L << (BACKWARD - 386)) | (1L << (BEFORE - 386)) | (1L << (ASSERTION - 386)) | (1L << (ASSIGNMENT - 386)) | (1L << (CONTINUE - 386)) | (1L << (CONVERSION - 386)) | (1L << (COPY - 386)) | (1L << (COST - 386)) | (1L << (CSV - 386)) | (1L << (CALLED - 386)) | (1L << (CATALOG - 386)) | (1L << (CHAIN - 386)) | (1L << (CHECKPOINT - 386)) | (1L << (CLASS - 386)) | (1L << (CONFIGURATION - 386)) | (1L << (COMMENT - 386)) | (1L << (DETACH - 386)) | (1L << (DICTIONARY - 386)) | (1L << (EXPRESSION - 386)) | (1L << (INSENSITIVE - 386)) | (1L << (DISCARD - 386)) | (1L << (OFF - 386)) | (1L << (INSTEAD - 386)) | (1L << (EXPLAIN - 386)) | (1L << (INPUT - 386)) | (1L << (INLINE - 386)) | (1L << (PARALLEL - 386)) | (1L << (LEAKPROOF - 386)) | (1L << (COMMITTED - 386)) | (1L << (ENCODING - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (IMPLICIT - 450)) | (1L << (DELIMITER - 450)) | (1L << (CURSOR - 450)) | (1L << (EACH - 450)) | (1L << (EVENT - 450)) | (1L << (DEALLOCATE - 450)) | (1L << (CONNECTION - 450)) | (1L << (DECLARE - 450)) | (1L << (FAMILY - 450)) | (1L << (FORWARD - 450)) | (1L << (EXCLUSIVE - 450)) | (1L << (FUNCTIONS - 450)) | (1L << (LOCATION - 450)) | (1L << (LABEL - 450)) | (1L << (DELIMITERS - 450)) | (1L << (HANDLER - 450)) | (1L << (HEADER - 450)) | (1L << (IMMUTABLE - 450)) | (1L << (GRANTED - 450)) | (1L << (HOLD - 450)) | (1L << (MAPPING - 450)) | (1L << (OLD - 450)) | (1L << (METHOD - 450)) | (1L << (LOAD - 450)) | (1L << (LISTEN - 450)) | (1L << (MODE - 450)) | (1L << (MOVE - 450)) | (1L << (PROCEDURAL - 450)) | (1L << (PARSER - 450)) | (1L << (PROCEDURES - 450)) | (1L << (ENCRYPTED - 450)) | (1L << (PUBLICATION - 450)) | (1L << (PROGRAM - 450)) | (1L << (REFERENCING - 450)) | (1L << (PLANS - 450)) | (1L << (REINDEX - 450)) | (1L << (PRIOR - 450)) | (1L << (PASSWORD - 450)) | (1L << (RELATIVE - 450)) | (1L << (QUOTE - 450)) | (1L << (ROUTINES - 450)) | (1L << (REPLACE - 450)) | (1L << (SNAPSHOT - 450)) | (1L << (REFRESH - 450)) | (1L << (PREPARE - 450)) | (1L << (OPTIONS - 450)) | (1L << (IMPORT - 450)) | (1L << (INVOKER - 450)) | (1L << (NEW - 450)) | (1L << (PREPARED - 450)) | (1L << (SCROLL - 450)) | (1L << (SEQUENCES - 450)) | (1L << (SYSID - 450)) | (1L << (REASSIGN - 450)) | (1L << (SERVER - 450)) | (1L << (SUBSCRIPTION - 450)) | (1L << (SEARCH - 450)) | (1L << (SCHEMAS - 450)) | (1L << (RECHECK - 450)) | (1L << (POLICY - 450)) | (1L << (NOTIFY - 450)) | (1L << (LOCK - 450)) | (1L << (RELEASE - 450)) | (1L << (SERIALIZABLE - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (RETURNS - 514)) | (1L << (STATEMENT - 514)) | (1L << (STDIN - 514)) | (1L << (STDOUT - 514)) | (1L << (TABLES - 514)) | (1L << (SUPPORT - 514)) | (1L << (STABLE - 514)) | (1L << (TEMPLATE - 514)) | (1L << (UNENCRYPTED - 514)) | (1L << (VIEWS - 514)) | (1L << (UNCOMMITTED - 514)) | (1L << (TRANSFORM - 514)) | (1L << (UNLISTEN - 514)) | (1L << (TRUSTED - 514)) | (1L << (VALIDATOR - 514)) | (1L << (UNTIL - 514)) | (1L << (VACUUM - 514)) | (1L << (VOLATILE - 514)) | (1L << (STORED - 514)) | (1L << (WRITE - 514)) | (1L << (STRICT - 514)) | (1L << (TYPES - 514)) | (1L << (WRAPPER - 514)) | (1L << (WORK - 514)) | (1L << (FREEZE - 514)) | (1L << (AUTHORIZATION - 514)) | (1L << (VERBOSE - 514)) | (1L << (OUT - 514)) | (1L << (INOUT - 514)) | (1L << (IDENTIFIER_ - 514)))) != 0)) {
				{
				setState(4648);
				funcArgsWithDefaultsList();
				}
			}

			setState(4651);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgsWithDefaultsListContext extends ParserRuleContext {
		public List<FuncArgWithDefaultContext> funcArgWithDefault() {
			return getRuleContexts(FuncArgWithDefaultContext.class);
		}
		public FuncArgWithDefaultContext funcArgWithDefault(int i) {
			return getRuleContext(FuncArgWithDefaultContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public FuncArgsWithDefaultsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgsWithDefaultsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncArgsWithDefaultsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncArgsWithDefaultsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncArgsWithDefaultsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsWithDefaultsListContext funcArgsWithDefaultsList() throws RecognitionException {
		FuncArgsWithDefaultsListContext _localctx = new FuncArgsWithDefaultsListContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_funcArgsWithDefaultsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4653);
			funcArgWithDefault();
			setState(4658);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4654);
				match(COMMA_);
				setState(4655);
				funcArgWithDefault();
				}
				}
				setState(4660);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgWithDefaultContext extends ParserRuleContext {
		public FuncArgContext funcArg() {
			return getRuleContext(FuncArgContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public FuncArgWithDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgWithDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncArgWithDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncArgWithDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncArgWithDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgWithDefaultContext funcArgWithDefault() throws RecognitionException {
		FuncArgWithDefaultContext _localctx = new FuncArgWithDefaultContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_funcArgWithDefault);
		try {
			setState(4670);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4661);
				funcArg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4662);
				funcArg();
				setState(4663);
				match(DEFAULT);
				setState(4664);
				aExpr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4666);
				funcArg();
				setState(4667);
				match(EQ_);
				setState(4668);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLanguageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public TerminalNode TRUSTED() { return getToken(DDLStatementParser.TRUSTED, 0); }
		public TerminalNode PROCEDURAL() { return getToken(DDLStatementParser.PROCEDURAL, 0); }
		public TerminalNode HANDLER() { return getToken(DDLStatementParser.HANDLER, 0); }
		public List<HandlerNameContext> handlerName() {
			return getRuleContexts(HandlerNameContext.class);
		}
		public HandlerNameContext handlerName(int i) {
			return getRuleContext(HandlerNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TransformElementListContext transformElementList() {
			return getRuleContext(TransformElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode INLINE() { return getToken(DDLStatementParser.INLINE, 0); }
		public ValidatorClauseContext validatorClause() {
			return getRuleContext(ValidatorClauseContext.class,0);
		}
		public CreateLanguageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLanguage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateLanguage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLanguageContext createLanguage() throws RecognitionException {
		CreateLanguageContext _localctx = new CreateLanguageContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_createLanguage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4672);
			match(CREATE);
			setState(4675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4673);
				match(OR);
				setState(4674);
				match(REPLACE);
				}
			}

			setState(4678);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRUSTED) {
				{
				setState(4677);
				match(TRUSTED);
				}
			}

			setState(4681);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(4680);
				match(PROCEDURAL);
				}
			}

			setState(4683);
			match(LANGUAGE);
			setState(4684);
			name();
			setState(4698);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HANDLER:
				{
				setState(4685);
				match(HANDLER);
				setState(4686);
				handlerName();
				setState(4689);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INLINE) {
					{
					setState(4687);
					match(INLINE);
					setState(4688);
					handlerName();
					}
				}

				setState(4692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO || _la==VALIDATOR) {
					{
					setState(4691);
					validatorClause();
					}
				}

				}
				break;
			case LP_:
				{
				setState(4694);
				match(LP_);
				setState(4695);
				transformElementList();
				setState(4696);
				match(RP_);
				}
				break;
			case EOF:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransformElementListContext extends ParserRuleContext {
		public List<TerminalNode> FROM() { return getTokens(DDLStatementParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(DDLStatementParser.FROM, i);
		}
		public List<TerminalNode> SQL() { return getTokens(DDLStatementParser.SQL); }
		public TerminalNode SQL(int i) {
			return getToken(DDLStatementParser.SQL, i);
		}
		public List<TerminalNode> WITH() { return getTokens(DDLStatementParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(DDLStatementParser.WITH, i);
		}
		public List<TerminalNode> FUNCTION() { return getTokens(DDLStatementParser.FUNCTION); }
		public TerminalNode FUNCTION(int i) {
			return getToken(DDLStatementParser.FUNCTION, i);
		}
		public List<FunctionWithArgtypesContext> functionWithArgtypes() {
			return getRuleContexts(FunctionWithArgtypesContext.class);
		}
		public FunctionWithArgtypesContext functionWithArgtypes(int i) {
			return getRuleContext(FunctionWithArgtypesContext.class,i);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TransformElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transformElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTransformElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTransformElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTransformElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransformElementListContext transformElementList() throws RecognitionException {
		TransformElementListContext _localctx = new TransformElementListContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_transformElementList);
		int _la;
		try {
			setState(4717);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4700);
				match(FROM);
				setState(4701);
				match(SQL);
				setState(4702);
				match(WITH);
				setState(4703);
				match(FUNCTION);
				setState(4704);
				functionWithArgtypes();
				setState(4705);
				match(COMMA_);
				setState(4706);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==TO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4707);
				match(SQL);
				setState(4708);
				match(WITH);
				setState(4709);
				match(FUNCTION);
				setState(4710);
				functionWithArgtypes();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4712);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==TO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4713);
				match(SQL);
				setState(4714);
				match(WITH);
				setState(4715);
				match(FUNCTION);
				setState(4716);
				functionWithArgtypes();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValidatorClauseContext extends ParserRuleContext {
		public TerminalNode VALIDATOR() { return getToken(DDLStatementParser.VALIDATOR, 0); }
		public HandlerNameContext handlerName() {
			return getRuleContext(HandlerNameContext.class,0);
		}
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public ValidatorClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validatorClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterValidatorClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitValidatorClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitValidatorClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValidatorClauseContext validatorClause() throws RecognitionException {
		ValidatorClauseContext _localctx = new ValidatorClauseContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_validatorClause);
		try {
			setState(4723);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALIDATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4719);
				match(VALIDATOR);
				setState(4720);
				handlerName();
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 2);
				{
				setState(4721);
				match(NO);
				setState(4722);
				match(VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatePolicyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode POLICY() { return getToken(DDLStatementParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public RowSecurityCmdContext rowSecurityCmd() {
			return getRuleContext(RowSecurityCmdContext.class,0);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public List<TerminalNode> LP_() { return getTokens(DDLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(DDLStatementParser.LP_, i);
		}
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public List<TerminalNode> RP_() { return getTokens(DDLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(DDLStatementParser.RP_, i);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(DDLStatementParser.CHECK, 0); }
		public CreatePolicyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPolicy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreatePolicy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreatePolicy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreatePolicy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePolicyContext createPolicy() throws RecognitionException {
		CreatePolicyContext _localctx = new CreatePolicyContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_createPolicy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4725);
			match(CREATE);
			setState(4726);
			match(POLICY);
			setState(4727);
			name();
			setState(4728);
			match(ON);
			setState(4729);
			qualifiedName();
			setState(4732);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4730);
				match(AS);
				setState(4731);
				identifier();
				}
			}

			setState(4736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4734);
				match(FOR);
				setState(4735);
				rowSecurityCmd();
				}
			}

			setState(4740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(4738);
				match(TO);
				setState(4739);
				roleList();
				}
			}

			setState(4747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4742);
				match(USING);
				setState(4743);
				match(LP_);
				setState(4744);
				aExpr(0);
				setState(4745);
				match(RP_);
				}
			}

			setState(4755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4749);
				match(WITH);
				setState(4750);
				match(CHECK);
				setState(4751);
				match(LP_);
				setState(4752);
				aExpr(0);
				setState(4753);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateProcedureContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public FuncArgsWithDefaultsContext funcArgsWithDefaults() {
			return getRuleContext(FuncArgsWithDefaultsContext.class,0);
		}
		public CreatefuncOptListContext createfuncOptList() {
			return getRuleContext(CreatefuncOptListContext.class,0);
		}
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public CreateProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateProcedureContext createProcedure() throws RecognitionException {
		CreateProcedureContext _localctx = new CreateProcedureContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_createProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4757);
			match(CREATE);
			setState(4760);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4758);
				match(OR);
				setState(4759);
				match(REPLACE);
				}
			}

			setState(4762);
			match(PROCEDURE);
			setState(4763);
			funcName();
			setState(4764);
			funcArgsWithDefaults();
			setState(4765);
			createfuncOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatePublicationContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode PUBLICATION() { return getToken(DDLStatementParser.PUBLICATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public PublicationForTablesContext publicationForTables() {
			return getRuleContext(PublicationForTablesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public CreatePublicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPublication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreatePublication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreatePublication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreatePublication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePublicationContext createPublication() throws RecognitionException {
		CreatePublicationContext _localctx = new CreatePublicationContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_createPublication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4767);
			match(CREATE);
			setState(4768);
			match(PUBLICATION);
			setState(4769);
			name();
			setState(4771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4770);
				publicationForTables();
				}
			}

			setState(4775);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4773);
				match(WITH);
				setState(4774);
				definition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PublicationForTablesContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(DDLStatementParser.TABLES, 0); }
		public PublicationForTablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_publicationForTables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPublicationForTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPublicationForTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPublicationForTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PublicationForTablesContext publicationForTables() throws RecognitionException {
		PublicationForTablesContext _localctx = new PublicationForTablesContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_publicationForTables);
		try {
			setState(4783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4777);
				match(FOR);
				setState(4778);
				match(TABLE);
				setState(4779);
				relationExprList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4780);
				match(FOR);
				setState(4781);
				match(ALL);
				setState(4782);
				match(TABLES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRuleContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode RULE() { return getToken(DDLStatementParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public EventContext event() {
			return getRuleContext(EventContext.class,0);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode DO() { return getToken(DDLStatementParser.DO, 0); }
		public RuleActionListContext ruleActionList() {
			return getRuleContext(RuleActionListContext.class,0);
		}
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public TerminalNode WHERE() { return getToken(DDLStatementParser.WHERE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode INSTEAD() { return getToken(DDLStatementParser.INSTEAD, 0); }
		public TerminalNode ALSO() { return getToken(DDLStatementParser.ALSO, 0); }
		public CreateRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRuleContext createRule() throws RecognitionException {
		CreateRuleContext _localctx = new CreateRuleContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_createRule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4785);
			match(CREATE);
			setState(4788);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4786);
				match(OR);
				setState(4787);
				match(REPLACE);
				}
			}

			setState(4790);
			match(RULE);
			setState(4791);
			name();
			setState(4792);
			match(AS);
			setState(4793);
			match(ON);
			setState(4794);
			event();
			setState(4795);
			match(TO);
			setState(4796);
			qualifiedName();
			setState(4799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4797);
				match(WHERE);
				setState(4798);
				aExpr(0);
				}
			}

			setState(4801);
			match(DO);
			setState(4803);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALSO || _la==INSTEAD) {
				{
				setState(4802);
				_la = _input.LA(1);
				if ( !(_la==ALSO || _la==INSTEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4805);
			ruleActionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionListContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(DDLStatementParser.NOTHING, 0); }
		public RuleActionStmtContext ruleActionStmt() {
			return getRuleContext(RuleActionStmtContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public RuleActionMultiContext ruleActionMulti() {
			return getRuleContext(RuleActionMultiContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public RuleActionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRuleActionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRuleActionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRuleActionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionListContext ruleActionList() throws RecognitionException {
		RuleActionListContext _localctx = new RuleActionListContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_ruleActionList);
		try {
			setState(4813);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOTHING:
				enterOuterAlt(_localctx, 1);
				{
				setState(4807);
				match(NOTHING);
				}
				break;
			case T__2:
			case SELECT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case TABLE:
			case VALUES:
			case WITH:
			case NOTIFY:
				enterOuterAlt(_localctx, 2);
				{
				setState(4808);
				ruleActionStmt();
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 3);
				{
				setState(4809);
				match(LP_);
				setState(4810);
				ruleActionMulti();
				setState(4811);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionStmtContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public NotifyStmtContext notifyStmt() {
			return getRuleContext(NotifyStmtContext.class,0);
		}
		public RuleActionStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRuleActionStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRuleActionStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRuleActionStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionStmtContext ruleActionStmt() throws RecognitionException {
		RuleActionStmtContext _localctx = new RuleActionStmtContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_ruleActionStmt);
		try {
			setState(4820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4815);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4816);
				insert();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4817);
				update();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4818);
				delete();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4819);
				notifyStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleActionMultiContext extends ParserRuleContext {
		public List<RuleActionStmtContext> ruleActionStmt() {
			return getRuleContexts(RuleActionStmtContext.class);
		}
		public RuleActionStmtContext ruleActionStmt(int i) {
			return getRuleContext(RuleActionStmtContext.class,i);
		}
		public List<TerminalNode> SEMI_() { return getTokens(DDLStatementParser.SEMI_); }
		public TerminalNode SEMI_(int i) {
			return getToken(DDLStatementParser.SEMI_, i);
		}
		public RuleActionMultiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleActionMulti; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRuleActionMulti(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRuleActionMulti(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRuleActionMulti(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleActionMultiContext ruleActionMulti() throws RecognitionException {
		RuleActionMultiContext _localctx = new RuleActionMultiContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_ruleActionMulti);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4823);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << SELECT) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << TABLE))) != 0) || _la==VALUES || _la==WITH || _la==NOTIFY) {
				{
				setState(4822);
				ruleActionStmt();
				}
			}

			setState(4831);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMI_) {
				{
				{
				setState(4825);
				match(SEMI_);
				setState(4827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << SELECT) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << TABLE))) != 0) || _la==VALUES || _la==WITH || _la==NOTIFY) {
					{
					setState(4826);
					ruleActionStmt();
					}
				}

				}
				}
				setState(4833);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotifyStmtContext extends ParserRuleContext {
		public TerminalNode NOTIFY() { return getToken(DDLStatementParser.NOTIFY, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public NotifyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifyStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNotifyStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNotifyStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNotifyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotifyStmtContext notifyStmt() throws RecognitionException {
		NotifyStmtContext _localctx = new NotifyStmtContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_notifyStmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4834);
			match(NOTIFY);
			setState(4835);
			colId();
			setState(4838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(4836);
				match(COMMA_);
				setState(4837);
				match(STRING_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TriggerActionTimeContext triggerActionTime() {
			return getRuleContext(TriggerActionTimeContext.class,0);
		}
		public TriggerEventsContext triggerEvents() {
			return getRuleContext(TriggerEventsContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(DDLStatementParser.EXECUTE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public TriggerReferencingContext triggerReferencing() {
			return getRuleContext(TriggerReferencingContext.class,0);
		}
		public TriggerForSpecContext triggerForSpec() {
			return getRuleContext(TriggerForSpecContext.class,0);
		}
		public TriggerWhenContext triggerWhen() {
			return getRuleContext(TriggerWhenContext.class,0);
		}
		public TriggerFuncArgsContext triggerFuncArgs() {
			return getRuleContext(TriggerFuncArgsContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public ConstraintAttributeSpecContext constraintAttributeSpec() {
			return getRuleContext(ConstraintAttributeSpecContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(DDLStatementParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public CreateTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerContext createTrigger() throws RecognitionException {
		CreateTriggerContext _localctx = new CreateTriggerContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_createTrigger);
		int _la;
		try {
			setState(4884);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4840);
				match(CREATE);
				setState(4841);
				match(TRIGGER);
				setState(4842);
				name();
				setState(4843);
				triggerActionTime();
				setState(4844);
				triggerEvents();
				setState(4845);
				match(ON);
				setState(4846);
				qualifiedName();
				setState(4848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REFERENCING) {
					{
					setState(4847);
					triggerReferencing();
					}
				}

				setState(4851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(4850);
					triggerForSpec();
					}
				}

				setState(4854);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(4853);
					triggerWhen();
					}
				}

				setState(4856);
				match(EXECUTE);
				setState(4857);
				_la = _input.LA(1);
				if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4858);
				funcName();
				setState(4859);
				match(LP_);
				setState(4861);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << SELECT) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << CREATE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << GRANT) | (1L << REVOKE) | (1L << ADD) | (1L << SET) | (1L << TABLE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMN - 64)) | (1L << (INDEX - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (PRIMARY - 64)) | (1L << (UNIQUE - 64)) | (1L << (FOREIGN - 64)) | (1L << (KEY - 64)) | (1L << (POSITION - 64)) | (1L << (PRECISION - 64)) | (1L << (FUNCTION - 64)) | (1L << (TRIGGER - 64)) | (1L << (PROCEDURE - 64)) | (1L << (VIEW - 64)) | (1L << (INTO - 64)) | (1L << (VALUES - 64)) | (1L << (WITH - 64)) | (1L << (UNION - 64)) | (1L << (DISTINCT - 64)) | (1L << (CASE - 64)) | (1L << (WHEN - 64)) | (1L << (CAST - 64)) | (1L << (TRIM - 64)) | (1L << (SUBSTRING - 64)) | (1L << (FROM - 64)) | (1L << (NATURAL - 64)) | (1L << (JOIN - 64)) | (1L << (FULL - 64)) | (1L << (INNER - 64)) | (1L << (OUTER - 64)) | (1L << (LEFT - 64)) | (1L << (RIGHT - 64)) | (1L << (CROSS - 64)) | (1L << (USING - 64)) | (1L << (WHERE - 64)) | (1L << (AS - 64)) | (1L << (ON - 64)) | (1L << (IF - 64)) | (1L << (ELSE - 64)) | (1L << (THEN - 64)) | (1L << (FOR - 64)) | (1L << (TO - 64)) | (1L << (AND - 64)) | (1L << (OR - 64)) | (1L << (IS - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (TRUE - 64)) | (1L << (FALSE - 64)) | (1L << (EXISTS - 64)) | (1L << (BETWEEN - 64)) | (1L << (IN - 64)) | (1L << (ALL - 64)) | (1L << (ANY - 64)) | (1L << (LIKE - 64)) | (1L << (ORDER - 64)) | (1L << (GROUP - 64)) | (1L << (BY - 64)) | (1L << (ASC - 64)) | (1L << (DESC - 64)) | (1L << (HAVING - 64)) | (1L << (LIMIT - 64)) | (1L << (OFFSET - 64)) | (1L << (BEGIN - 64)) | (1L << (COMMIT - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ROLLBACK - 128)) | (1L << (SAVEPOINT - 128)) | (1L << (BOOLEAN - 128)) | (1L << (DOUBLE - 128)) | (1L << (CHAR - 128)) | (1L << (CHARACTER - 128)) | (1L << (ARRAY - 128)) | (1L << (INTERVAL - 128)) | (1L << (TIME - 128)) | (1L << (TIMESTAMP - 128)) | (1L << (LOCALTIME - 128)) | (1L << (LOCALTIMESTAMP - 128)) | (1L << (YEAR - 128)) | (1L << (MONTH - 128)) | (1L << (DAY - 128)) | (1L << (HOUR - 128)) | (1L << (MINUTE - 128)) | (1L << (SECOND - 128)) | (1L << (DEFAULT - 128)) | (1L << (CURRENT - 128)) | (1L << (ENABLE - 128)) | (1L << (DISABLE - 128)) | (1L << (CALL - 128)) | (1L << (PRESERVE - 128)) | (1L << (DO - 128)) | (1L << (DEFINER - 128)) | (1L << (CURRENT_USER - 128)) | (1L << (SQL - 128)) | (1L << (CASCADED - 128)) | (1L << (LOCAL - 128)) | (1L << (CLOSE - 128)) | (1L << (NEXT - 128)) | (1L << (NAME - 128)) | (1L << (COLLATION - 128)) | (1L << (NAMES - 128)) | (1L << (INTEGER - 128)) | (1L << (REAL - 128)) | (1L << (DECIMAL - 128)) | (1L << (TYPE - 128)) | (1L << (SMALLINT - 128)) | (1L << (BIGINT - 128)) | (1L << (NUMERIC - 128)) | (1L << (TEXT - 128)) | (1L << (REPEATABLE - 128)) | (1L << (CURRENT_DATE - 128)) | (1L << (CURRENT_TIME - 128)) | (1L << (CURRENT_TIMESTAMP - 128)) | (1L << (NULLIF - 128)) | (1L << (VARYING - 128)) | (1L << (NATIONAL - 128)) | (1L << (NCHAR - 128)) | (1L << (VALUE - 128)) | (1L << (BOTH - 128)) | (1L << (LEADING - 128)) | (1L << (TRAILING - 128)) | (1L << (COALESCE - 128)) | (1L << (INTERSECT - 128)) | (1L << (EXCEPT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TIES - 192)) | (1L << (FETCH - 192)) | (1L << (CUBE - 192)) | (1L << (GROUPING - 192)) | (1L << (SETS - 192)) | (1L << (WINDOW - 192)) | (1L << (OTHERS - 192)) | (1L << (OVERLAPS - 192)) | (1L << (SOME - 192)) | (1L << (AT - 192)) | (1L << (DEC - 192)) | (1L << (END - 192)) | (1L << (ADMIN - 192)) | (1L << (BINARY - 192)) | (1L << (ESCAPE - 192)) | (1L << (EXCLUDE - 192)) | (1L << (PARTITION - 192)) | (1L << (ROW - 192)) | (1L << (UNKNOWN - 192)) | (1L << (ALWAYS - 192)) | (1L << (CASCADE - 192)) | (1L << (CHECK - 192)) | (1L << (GENERATED - 192)) | (1L << (ISOLATION - 192)) | (1L << (LEVEL - 192)) | (1L << (NO - 192)) | (1L << (OPTION - 192)) | (1L << (PRIVILEGES - 192)) | (1L << (READ - 192)) | (1L << (REFERENCES - 192)) | (1L << (ROLE - 192)) | (1L << (ROWS - 192)) | (1L << (START - 192)) | (1L << (TRANSACTION - 192)) | (1L << (USER - 192)) | (1L << (ACTION - 192)) | (1L << (CACHE - 192)) | (1L << (CHARACTERISTICS - 192)) | (1L << (CLUSTER - 192)) | (1L << (COLLATE - 192)) | (1L << (COMMENTS - 192)) | (1L << (CONCURRENTLY - 192)) | (1L << (CONSTRAINTS - 192)) | (1L << (CYCLE - 192)) | (1L << (DATA - 192)) | (1L << (DATABASE - 192)) | (1L << (DEFAULTS - 192)) | (1L << (DEFERRABLE - 192)) | (1L << (DEFERRED - 192)) | (1L << (DEPENDS - 192)) | (1L << (DOMAIN - 192)) | (1L << (EXCLUDING - 192)) | (1L << (EXECUTE - 192)) | (1L << (EXTENSION - 192)) | (1L << (EXTERNAL - 192)) | (1L << (EXTRACT - 192)) | (1L << (FILTER - 192)) | (1L << (FIRST - 192)) | (1L << (FOLLOWING - 192)) | (1L << (FORCE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (GLOBAL - 256)) | (1L << (IDENTITY - 256)) | (1L << (IMMEDIATE - 256)) | (1L << (INCLUDING - 256)) | (1L << (INCREMENT - 256)) | (1L << (INDEXES - 256)) | (1L << (INHERIT - 256)) | (1L << (INHERITS - 256)) | (1L << (INITIALLY - 256)) | (1L << (INCLUDE - 256)) | (1L << (LANGUAGE - 256)) | (1L << (LARGE - 256)) | (1L << (LAST - 256)) | (1L << (LOGGED - 256)) | (1L << (MATCH - 256)) | (1L << (MAXVALUE - 256)) | (1L << (MINVALUE - 256)) | (1L << (NOTHING - 256)) | (1L << (NULLS - 256)) | (1L << (OBJECT - 256)) | (1L << (OIDS - 256)) | (1L << (ONLY - 256)) | (1L << (OVER - 256)) | (1L << (OWNED - 256)) | (1L << (OWNER - 256)) | (1L << (PARTIAL - 256)) | (1L << (PRECEDING - 256)) | (1L << (RANGE - 256)) | (1L << (RENAME - 256)) | (1L << (REPLICA - 256)) | (1L << (RESET - 256)) | (1L << (RESTART - 256)) | (1L << (RESTRICT - 256)) | (1L << (ROUTINE - 256)) | (1L << (RULE - 256)) | (1L << (SECURITY - 256)) | (1L << (SEQUENCE - 256)) | (1L << (SESSION - 256)) | (1L << (SESSION_USER - 256)) | (1L << (SHOW - 256)) | (1L << (SIMPLE - 256)) | (1L << (STATISTICS - 256)) | (1L << (STORAGE - 256)) | (1L << (TABLESPACE - 256)) | (1L << (TEMP - 256)) | (1L << (TEMPORARY - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNLOGGED - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (ZONE - 256)) | (1L << (OF - 256)) | (1L << (UESCAPE - 256)) | (1L << (GROUPS - 256)) | (1L << (RECURSIVE - 256)) | (1L << (INT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (FLOAT - 320)) | (1L << (VARCHAR - 320)) | (1L << (ENUM - 320)) | (1L << (BIT - 320)) | (1L << (XML - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (ORDINALITY - 320)) | (1L << (CURRENT_ROLE - 320)) | (1L << (CURRENT_CATALOG - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (OVERLAY - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (TREAT - 320)) | (1L << (SETOF - 320)) | (1L << (NFC - 320)) | (1L << (NFD - 320)) | (1L << (NFKC - 320)) | (1L << (NFKD - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (REF - 320)) | (1L << (PASSING - 320)) | (1L << (VERSION - 320)) | (1L << (YES - 320)) | (1L << (STANDALONE - 320)) | (1L << (GREATEST - 320)) | (1L << (LEAST - 320)) | (1L << (MATERIALIZED - 320)) | (1L << (OPERATOR - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SHARE - 384)) | (1L << (ROLLUP - 384)) | (1L << (ILIKE - 384)) | (1L << (SIMILAR - 384)) | (1L << (ISNULL - 384)) | (1L << (NOTNULL - 384)) | (1L << (SYMMETRIC - 384)) | (1L << (DOCUMENT - 384)) | (1L << (NORMALIZED - 384)) | (1L << (ASYMMETRIC - 384)) | (1L << (VARIADIC - 384)) | (1L << (NOWAIT - 384)) | (1L << (LOCKED - 384)) | (1L << (XMLTABLE - 384)) | (1L << (COLUMNS - 384)) | (1L << (CONTENT - 384)) | (1L << (STRIP - 384)) | (1L << (WHITESPACE - 384)) | (1L << (XMLNAMESPACES - 384)) | (1L << (PLACING - 384)) | (1L << (RETURNING - 384)) | (1L << (LATERAL - 384)) | (1L << (NONE - 384)) | (1L << (ANALYSE - 384)) | (1L << (ANALYZE - 384)) | (1L << (CONFLICT - 384)) | (1L << (OVERRIDING - 384)) | (1L << (SYSTEM - 384)) | (1L << (ABORT - 384)) | (1L << (ABSOLUTE - 384)) | (1L << (ACCESS - 384)) | (1L << (AFTER - 384)) | (1L << (AGGREGATE - 384)) | (1L << (ALSO - 384)) | (1L << (ATTACH - 384)) | (1L << (ATTRIBUTE - 384)) | (1L << (BACKWARD - 384)) | (1L << (BEFORE - 384)) | (1L << (ASSERTION - 384)) | (1L << (ASSIGNMENT - 384)) | (1L << (CONTINUE - 384)) | (1L << (CONVERSION - 384)) | (1L << (COPY - 384)) | (1L << (COST - 384)) | (1L << (CSV - 384)) | (1L << (CALLED - 384)) | (1L << (CATALOG - 384)) | (1L << (CHAIN - 384)) | (1L << (CHECKPOINT - 384)) | (1L << (CLASS - 384)) | (1L << (CONFIGURATION - 384)) | (1L << (COMMENT - 384)) | (1L << (DETACH - 384)) | (1L << (DICTIONARY - 384)) | (1L << (EXPRESSION - 384)) | (1L << (INSENSITIVE - 384)) | (1L << (DISCARD - 384)) | (1L << (OFF - 384)) | (1L << (INSTEAD - 384)) | (1L << (EXPLAIN - 384)) | (1L << (INPUT - 384)) | (1L << (INLINE - 384)) | (1L << (PARALLEL - 384)) | (1L << (LEAKPROOF - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (COMMITTED - 448)) | (1L << (ENCODING - 448)) | (1L << (IMPLICIT - 448)) | (1L << (DELIMITER - 448)) | (1L << (CURSOR - 448)) | (1L << (EACH - 448)) | (1L << (EVENT - 448)) | (1L << (DEALLOCATE - 448)) | (1L << (CONNECTION - 448)) | (1L << (DECLARE - 448)) | (1L << (FAMILY - 448)) | (1L << (FORWARD - 448)) | (1L << (EXCLUSIVE - 448)) | (1L << (FUNCTIONS - 448)) | (1L << (LOCATION - 448)) | (1L << (LABEL - 448)) | (1L << (DELIMITERS - 448)) | (1L << (HANDLER - 448)) | (1L << (HEADER - 448)) | (1L << (IMMUTABLE - 448)) | (1L << (GRANTED - 448)) | (1L << (HOLD - 448)) | (1L << (MAPPING - 448)) | (1L << (OLD - 448)) | (1L << (METHOD - 448)) | (1L << (LOAD - 448)) | (1L << (LISTEN - 448)) | (1L << (MODE - 448)) | (1L << (MOVE - 448)) | (1L << (PROCEDURAL - 448)) | (1L << (PARSER - 448)) | (1L << (PROCEDURES - 448)) | (1L << (ENCRYPTED - 448)) | (1L << (PUBLICATION - 448)) | (1L << (PROGRAM - 448)) | (1L << (REFERENCING - 448)) | (1L << (PLANS - 448)) | (1L << (REINDEX - 448)) | (1L << (PRIOR - 448)) | (1L << (PASSWORD - 448)) | (1L << (RELATIVE - 448)) | (1L << (QUOTE - 448)) | (1L << (ROUTINES - 448)) | (1L << (REPLACE - 448)) | (1L << (SNAPSHOT - 448)) | (1L << (REFRESH - 448)) | (1L << (PREPARE - 448)) | (1L << (OPTIONS - 448)) | (1L << (IMPORT - 448)) | (1L << (INVOKER - 448)) | (1L << (NEW - 448)) | (1L << (PREPARED - 448)) | (1L << (SCROLL - 448)) | (1L << (SEQUENCES - 448)) | (1L << (SYSID - 448)) | (1L << (REASSIGN - 448)) | (1L << (SERVER - 448)) | (1L << (SUBSCRIPTION - 448)) | (1L << (SEARCH - 448)) | (1L << (SCHEMAS - 448)) | (1L << (RECHECK - 448)) | (1L << (POLICY - 448)) | (1L << (NOTIFY - 448)) | (1L << (LOCK - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (RELEASE - 512)) | (1L << (SERIALIZABLE - 512)) | (1L << (RETURNS - 512)) | (1L << (STATEMENT - 512)) | (1L << (STDIN - 512)) | (1L << (STDOUT - 512)) | (1L << (TABLES - 512)) | (1L << (SUPPORT - 512)) | (1L << (STABLE - 512)) | (1L << (TEMPLATE - 512)) | (1L << (UNENCRYPTED - 512)) | (1L << (VIEWS - 512)) | (1L << (UNCOMMITTED - 512)) | (1L << (TRANSFORM - 512)) | (1L << (UNLISTEN - 512)) | (1L << (TRUSTED - 512)) | (1L << (VALIDATOR - 512)) | (1L << (UNTIL - 512)) | (1L << (VACUUM - 512)) | (1L << (VOLATILE - 512)) | (1L << (STORED - 512)) | (1L << (WRITE - 512)) | (1L << (STRICT - 512)) | (1L << (TYPES - 512)) | (1L << (WRAPPER - 512)) | (1L << (WORK - 512)) | (1L << (FREEZE - 512)) | (1L << (AUTHORIZATION - 512)) | (1L << (VERBOSE - 512)) | (1L << (OUT - 512)) | (1L << (INOUT - 512)) | (1L << (IDENTIFIER_ - 512)) | (1L << (STRING_ - 512)) | (1L << (NUMBER_ - 512)))) != 0)) {
					{
					setState(4860);
					triggerFuncArgs();
					}
				}

				setState(4863);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4865);
				match(CREATE);
				setState(4866);
				match(CONSTRAINT);
				setState(4867);
				match(TRIGGER);
				setState(4870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(4868);
					match(FROM);
					setState(4869);
					qualifiedName();
					}
				}

				setState(4872);
				constraintAttributeSpec();
				setState(4873);
				match(FOR);
				setState(4874);
				match(EACH);
				setState(4875);
				match(ROW);
				setState(4876);
				triggerWhen();
				setState(4877);
				match(EXECUTE);
				setState(4878);
				_la = _input.LA(1);
				if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4879);
				funcName();
				setState(4880);
				match(LP_);
				setState(4881);
				triggerFuncArgs();
				setState(4882);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerEventsContext extends ParserRuleContext {
		public List<TriggerOneEventContext> triggerOneEvent() {
			return getRuleContexts(TriggerOneEventContext.class);
		}
		public TriggerOneEventContext triggerOneEvent(int i) {
			return getRuleContext(TriggerOneEventContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(DDLStatementParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(DDLStatementParser.OR, i);
		}
		public TriggerEventsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerEvents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerEvents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerEvents(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerEventsContext triggerEvents() throws RecognitionException {
		TriggerEventsContext _localctx = new TriggerEventsContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_triggerEvents);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4886);
			triggerOneEvent();
			setState(4891);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(4887);
				match(OR);
				setState(4888);
				triggerOneEvent();
				}
				}
				setState(4893);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerOneEventContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DDLStatementParser.INSERT, 0); }
		public TerminalNode DELETE() { return getToken(DDLStatementParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode TRUNCATE() { return getToken(DDLStatementParser.TRUNCATE, 0); }
		public TriggerOneEventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerOneEvent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerOneEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerOneEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerOneEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerOneEventContext triggerOneEvent() throws RecognitionException {
		TriggerOneEventContext _localctx = new TriggerOneEventContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_triggerOneEvent);
		try {
			setState(4901);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4894);
				match(INSERT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4895);
				match(DELETE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4896);
				match(UPDATE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4897);
				match(UPDATE);
				setState(4898);
				match(OF);
				setState(4899);
				columnList();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4900);
				match(TRUNCATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerActionTimeContext extends ParserRuleContext {
		public TerminalNode BEFORE() { return getToken(DDLStatementParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(DDLStatementParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(DDLStatementParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public TriggerActionTimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerActionTime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerActionTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerActionTime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerActionTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerActionTimeContext triggerActionTime() throws RecognitionException {
		TriggerActionTimeContext _localctx = new TriggerActionTimeContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_triggerActionTime);
		try {
			setState(4907);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4903);
				match(BEFORE);
				}
				break;
			case AFTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4904);
				match(AFTER);
				}
				break;
			case INSTEAD:
				enterOuterAlt(_localctx, 3);
				{
				setState(4905);
				match(INSTEAD);
				setState(4906);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerFuncArgsContext extends ParserRuleContext {
		public List<TriggerFuncArgContext> triggerFuncArg() {
			return getRuleContexts(TriggerFuncArgContext.class);
		}
		public TriggerFuncArgContext triggerFuncArg(int i) {
			return getRuleContext(TriggerFuncArgContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TriggerFuncArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFuncArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerFuncArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerFuncArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerFuncArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFuncArgsContext triggerFuncArgs() throws RecognitionException {
		TriggerFuncArgsContext _localctx = new TriggerFuncArgsContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_triggerFuncArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4909);
			triggerFuncArg();
			setState(4914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(4910);
				match(COMMA_);
				setState(4911);
				triggerFuncArg();
				}
				}
				setState(4916);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerFuncArgContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TriggerFuncArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerFuncArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerFuncArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerFuncArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerFuncArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerFuncArgContext triggerFuncArg() throws RecognitionException {
		TriggerFuncArgContext _localctx = new TriggerFuncArgContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_triggerFuncArg);
		try {
			setState(4920);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(4917);
				match(NUMBER_);
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(4918);
				match(STRING_);
				}
				break;
			case T__0:
			case T__1:
			case SELECT:
			case INSERT:
			case UPDATE:
			case DELETE:
			case CREATE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case GRANT:
			case REVOKE:
			case ADD:
			case SET:
			case TABLE:
			case COLUMN:
			case INDEX:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case FOREIGN:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case INTO:
			case VALUES:
			case WITH:
			case UNION:
			case DISTINCT:
			case CASE:
			case WHEN:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case FROM:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case USING:
			case WHERE:
			case AS:
			case ON:
			case IF:
			case ELSE:
			case THEN:
			case FOR:
			case TO:
			case AND:
			case OR:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case IN:
			case ALL:
			case ANY:
			case LIKE:
			case ORDER:
			case GROUP:
			case BY:
			case ASC:
			case DESC:
			case HAVING:
			case LIMIT:
			case OFFSET:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case ARRAY:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DO:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case BOTH:
			case LEADING:
			case TRAILING:
			case COALESCE:
			case INTERSECT:
			case EXCEPT:
			case TIES:
			case FETCH:
			case CUBE:
			case GROUPING:
			case SETS:
			case WINDOW:
			case OTHERS:
			case OVERLAPS:
			case SOME:
			case AT:
			case DEC:
			case END:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case CHECK:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case REFERENCES:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COLLATE:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRABLE:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INITIALLY:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case ONLY:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case SYMMETRIC:
			case DOCUMENT:
			case NORMALIZED:
			case ASYMMETRIC:
			case VARIADIC:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case PLACING:
			case RETURNING:
			case LATERAL:
			case NONE:
			case ANALYSE:
			case ANALYZE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 3);
				{
				setState(4919);
				colLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerWhenContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(DDLStatementParser.WHEN, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TriggerWhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerWhen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerWhen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerWhen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerWhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerWhenContext triggerWhen() throws RecognitionException {
		TriggerWhenContext _localctx = new TriggerWhenContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_triggerWhen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4922);
			match(WHEN);
			setState(4923);
			match(LP_);
			setState(4924);
			aExpr(0);
			setState(4925);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerForSpecContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode STATEMENT() { return getToken(DDLStatementParser.STATEMENT, 0); }
		public TerminalNode EACH() { return getToken(DDLStatementParser.EACH, 0); }
		public TriggerForSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerForSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerForSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerForSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerForSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerForSpecContext triggerForSpec() throws RecognitionException {
		TriggerForSpecContext _localctx = new TriggerForSpecContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_triggerForSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4927);
			match(FOR);
			setState(4929);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EACH) {
				{
				setState(4928);
				match(EACH);
				}
			}

			setState(4931);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==STATEMENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerReferencingContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(DDLStatementParser.REFERENCING, 0); }
		public TriggerTransitionsContext triggerTransitions() {
			return getRuleContext(TriggerTransitionsContext.class,0);
		}
		public TriggerReferencingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerReferencing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerReferencing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerReferencing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerReferencing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerReferencingContext triggerReferencing() throws RecognitionException {
		TriggerReferencingContext _localctx = new TriggerReferencingContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_triggerReferencing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4933);
			match(REFERENCING);
			setState(4934);
			triggerTransitions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerTransitionsContext extends ParserRuleContext {
		public List<TriggerTransitionContext> triggerTransition() {
			return getRuleContexts(TriggerTransitionContext.class);
		}
		public TriggerTransitionContext triggerTransition(int i) {
			return getRuleContext(TriggerTransitionContext.class,i);
		}
		public TriggerTransitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerTransitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerTransitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerTransitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerTransitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerTransitionsContext triggerTransitions() throws RecognitionException {
		TriggerTransitionsContext _localctx = new TriggerTransitionsContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_triggerTransitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4937); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4936);
				triggerTransition();
				}
				}
				setState(4939); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==OLD || _la==NEW );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerTransitionContext extends ParserRuleContext {
		public TransitionOldOrNewContext transitionOldOrNew() {
			return getRuleContext(TransitionOldOrNewContext.class,0);
		}
		public TransitionRowOrTableContext transitionRowOrTable() {
			return getRuleContext(TransitionRowOrTableContext.class,0);
		}
		public TransitionRelNameContext transitionRelName() {
			return getRuleContext(TransitionRelNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TriggerTransitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerTransition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTriggerTransition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTriggerTransition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTriggerTransition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerTransitionContext triggerTransition() throws RecognitionException {
		TriggerTransitionContext _localctx = new TriggerTransitionContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_triggerTransition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4941);
			transitionOldOrNew();
			setState(4942);
			transitionRowOrTable();
			setState(4944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4943);
				match(AS);
				}
			}

			setState(4946);
			transitionRelName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionRelNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TransitionRelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionRelName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTransitionRelName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTransitionRelName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTransitionRelName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionRelNameContext transitionRelName() throws RecognitionException {
		TransitionRelNameContext _localctx = new TransitionRelNameContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_transitionRelName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4948);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionRowOrTableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TransitionRowOrTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionRowOrTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTransitionRowOrTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTransitionRowOrTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTransitionRowOrTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionRowOrTableContext transitionRowOrTable() throws RecognitionException {
		TransitionRowOrTableContext _localctx = new TransitionRowOrTableContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_transitionRowOrTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4950);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==ROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransitionOldOrNewContext extends ParserRuleContext {
		public TerminalNode OLD() { return getToken(DDLStatementParser.OLD, 0); }
		public TerminalNode NEW() { return getToken(DDLStatementParser.NEW, 0); }
		public TransitionOldOrNewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transitionOldOrNew; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTransitionOldOrNew(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTransitionOldOrNew(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTransitionOldOrNew(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransitionOldOrNewContext transitionOldOrNew() throws RecognitionException {
		TransitionOldOrNewContext _localctx = new TransitionOldOrNewContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_transitionOldOrNew);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4952);
			_la = _input.LA(1);
			if ( !(_la==OLD || _la==NEW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(DDLStatementParser.SEQUENCE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TempOptionContext tempOption() {
			return getRuleContext(TempOptionContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public CreateSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSequenceContext createSequence() throws RecognitionException {
		CreateSequenceContext _localctx = new CreateSequenceContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_createSequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4954);
			match(CREATE);
			setState(4956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (GLOBAL - 256)) | (1L << (TEMP - 256)) | (1L << (TEMPORARY - 256)) | (1L << (UNLOGGED - 256)))) != 0)) {
				{
				setState(4955);
				tempOption();
				}
			}

			setState(4958);
			match(SEQUENCE);
			setState(4962);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				setState(4959);
				match(IF);
				setState(4960);
				match(NOT);
				setState(4961);
				match(EXISTS);
				}
				break;
			}
			setState(4964);
			qualifiedName();
			setState(4966);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || ((((_la - 219)) & ~0x3f) == 0 && ((1L << (_la - 219)) & ((1L << (NO - 219)) | (1L << (START - 219)) | (1L << (CACHE - 219)) | (1L << (CYCLE - 219)) | (1L << (INCREMENT - 219)) | (1L << (MAXVALUE - 219)) | (1L << (MINVALUE - 219)) | (1L << (OWNED - 219)))) != 0) || _la==RESTART || _la==SEQUENCE) {
				{
				setState(4965);
				seqOptList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TempOptionContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(DDLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(DDLStatementParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(DDLStatementParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(DDLStatementParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(DDLStatementParser.UNLOGGED, 0); }
		public TempOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tempOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTempOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTempOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTempOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TempOptionContext tempOption() throws RecognitionException {
		TempOptionContext _localctx = new TempOptionContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_tempOption);
		int _la;
		try {
			setState(4973);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL:
			case GLOBAL:
			case TEMP:
			case TEMPORARY:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(4969);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==GLOBAL) {
					{
					setState(4968);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==GLOBAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4971);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case UNLOGGED:
				enterOuterAlt(_localctx, 2);
				{
				setState(4972);
				match(UNLOGGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(DDLStatementParser.WRAPPER, 0); }
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public ForeignServerVersionContext foreignServerVersion() {
			return getRuleContext(ForeignServerVersionContext.class,0);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerContext createServer() throws RecognitionException {
		CreateServerContext _localctx = new CreateServerContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_createServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4975);
			match(CREATE);
			setState(4976);
			match(SERVER);
			setState(4980);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
			case 1:
				{
				setState(4977);
				match(IF);
				setState(4978);
				match(NOT);
				setState(4979);
				match(EXISTS);
				}
				break;
			}
			setState(4982);
			name();
			setState(4985);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE) {
				{
				setState(4983);
				match(TYPE);
				setState(4984);
				match(STRING_);
				}
			}

			setState(4988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERSION) {
				{
				setState(4987);
				foreignServerVersion();
				}
			}

			setState(4990);
			match(FOREIGN);
			setState(4991);
			match(DATA);
			setState(4992);
			match(WRAPPER);
			setState(4993);
			name();
			setState(4994);
			createGenericOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateStatisticsContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode STATISTICS() { return getToken(DDLStatementParser.STATISTICS, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public OptNameListContext optNameList() {
			return getRuleContext(OptNameListContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public CreateStatisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createStatistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateStatistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateStatistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateStatistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateStatisticsContext createStatistics() throws RecognitionException {
		CreateStatisticsContext _localctx = new CreateStatisticsContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_createStatistics);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4996);
			match(CREATE);
			setState(4997);
			match(STATISTICS);
			setState(5001);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(4998);
				match(IF);
				setState(4999);
				match(NOT);
				setState(5000);
				match(EXISTS);
				}
				break;
			}
			setState(5003);
			anyName();
			setState(5004);
			optNameList();
			setState(5005);
			match(ON);
			setState(5006);
			exprList(0);
			setState(5007);
			match(FROM);
			setState(5008);
			fromList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSubscriptionContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(DDLStatementParser.SUBSCRIPTION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(DDLStatementParser.CONNECTION, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode PUBLICATION() { return getToken(DDLStatementParser.PUBLICATION, 0); }
		public PublicationNameListContext publicationNameList() {
			return getRuleContext(PublicationNameListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public CreateSubscriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSubscription; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateSubscription(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateSubscription(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateSubscription(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSubscriptionContext createSubscription() throws RecognitionException {
		CreateSubscriptionContext _localctx = new CreateSubscriptionContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_createSubscription);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5010);
			match(CREATE);
			setState(5011);
			match(SUBSCRIPTION);
			setState(5012);
			name();
			setState(5013);
			match(CONNECTION);
			setState(5014);
			match(STRING_);
			setState(5015);
			match(PUBLICATION);
			setState(5016);
			publicationNameList();
			setState(5019);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5017);
				match(WITH);
				setState(5018);
				definition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LOCATION() { return getToken(DDLStatementParser.LOCATION, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public RoleSpecContext roleSpec() {
			return getRuleContext(RoleSpecContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public CreateTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceContext createTablespace() throws RecognitionException {
		CreateTablespaceContext _localctx = new CreateTablespaceContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_createTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5021);
			match(CREATE);
			setState(5022);
			match(TABLESPACE);
			setState(5023);
			name();
			setState(5026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OWNER) {
				{
				setState(5024);
				match(OWNER);
				setState(5025);
				roleSpec();
				}
			}

			setState(5028);
			match(LOCATION);
			setState(5029);
			match(STRING_);
			setState(5032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5030);
				match(WITH);
				setState(5031);
				reloptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTextSearchContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(DDLStatementParser.CONFIGURATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(DDLStatementParser.DICTIONARY, 0); }
		public TerminalNode PARSER() { return getToken(DDLStatementParser.PARSER, 0); }
		public TerminalNode TEMPLATE() { return getToken(DDLStatementParser.TEMPLATE, 0); }
		public CreateTextSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTextSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateTextSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateTextSearch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateTextSearch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTextSearchContext createTextSearch() throws RecognitionException {
		CreateTextSearchContext _localctx = new CreateTextSearchContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_createTextSearch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5034);
			match(CREATE);
			setState(5035);
			match(TEXT);
			setState(5036);
			match(SEARCH);
			setState(5037);
			_la = _input.LA(1);
			if ( !(((((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & ((1L << (CONFIGURATION - 434)) | (1L << (DICTIONARY - 434)) | (1L << (PARSER - 434)))) != 0) || _la==TEMPLATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5038);
			anyName();
			setState(5039);
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTransformContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode TRANSFORM() { return getToken(DDLStatementParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TransformElementListContext transformElementList() {
			return getRuleContext(TransformElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public CreateTransformContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTransform; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateTransform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateTransform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateTransform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTransformContext createTransform() throws RecognitionException {
		CreateTransformContext _localctx = new CreateTransformContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_createTransform);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5041);
			match(CREATE);
			setState(5044);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(5042);
				match(OR);
				setState(5043);
				match(REPLACE);
				}
			}

			setState(5046);
			match(TRANSFORM);
			setState(5047);
			match(FOR);
			setState(5048);
			typeName();
			setState(5049);
			match(LANGUAGE);
			setState(5050);
			name();
			setState(5051);
			match(LP_);
			setState(5052);
			transformElementList();
			setState(5053);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTypeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public CreateTypeClausesContext createTypeClauses() {
			return getRuleContext(CreateTypeClausesContext.class,0);
		}
		public CreateTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTypeContext createType() throws RecognitionException {
		CreateTypeContext _localctx = new CreateTypeContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_createType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5055);
			match(CREATE);
			setState(5056);
			match(TYPE);
			setState(5057);
			anyName();
			setState(5058);
			createTypeClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTypeClausesContext extends ParserRuleContext {
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(DDLStatementParser.ENUM, 0); }
		public EnumValListContext enumValList() {
			return getRuleContext(EnumValListContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(DDLStatementParser.RANGE, 0); }
		public CreateTypeClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTypeClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateTypeClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateTypeClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateTypeClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTypeClausesContext createTypeClauses() throws RecognitionException {
		CreateTypeClausesContext _localctx = new CreateTypeClausesContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_createTypeClauses);
		int _la;
		try {
			setState(5079);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(5060);
					definition();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5063);
				match(AS);
				setState(5064);
				match(LP_);
				setState(5066);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (KEY - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (IF - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (VARYING - 129)) | (1L << (VALUE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (ENUM - 329)) | (1L << (XML - 329)) | (1L << (ORDINALITY - 329)) | (1L << (NFC - 329)) | (1L << (NFD - 329)) | (1L << (NFKC - 329)) | (1L << (NFKD - 329)) | (1L << (REF - 329)) | (1L << (PASSING - 329)) | (1L << (VERSION - 329)) | (1L << (YES - 329)) | (1L << (STANDALONE - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OPERATOR - 329)) | (1L << (SHARE - 329)) | (1L << (ROLLUP - 329)) | (1L << (DOCUMENT - 329)) | (1L << (NORMALIZED - 329)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)) | (1L << (FAMILY - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)) | (1L << (UNENCRYPTED - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (IDENTIFIER_ - 523)))) != 0)) {
					{
					setState(5065);
					tableFuncElementList();
					}
				}

				setState(5068);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5069);
				match(AS);
				setState(5070);
				match(ENUM);
				setState(5071);
				match(LP_);
				setState(5073);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STRING_) {
					{
					setState(5072);
					enumValList();
					}
				}

				setState(5075);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5076);
				match(AS);
				setState(5077);
				match(RANGE);
				setState(5078);
				definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnumValListContext extends ParserRuleContext {
		public List<TerminalNode> STRING_() { return getTokens(DDLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DDLStatementParser.STRING_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public EnumValListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enumValList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterEnumValList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitEnumValList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitEnumValList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnumValListContext enumValList() throws RecognitionException {
		EnumValListContext _localctx = new EnumValListContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_enumValList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5081);
			match(STRING_);
			setState(5086);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5082);
				match(COMMA_);
				setState(5083);
				match(STRING_);
				}
				}
				setState(5088);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserMappingContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(DDLStatementParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public AuthIdentContext authIdent() {
			return getRuleContext(AuthIdentContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public CreateUserMappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserMapping; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateUserMapping(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateUserMapping(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateUserMapping(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserMappingContext createUserMapping() throws RecognitionException {
		CreateUserMappingContext _localctx = new CreateUserMappingContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_createUserMapping);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5089);
			match(CREATE);
			setState(5090);
			match(USER);
			setState(5091);
			match(MAPPING);
			setState(5095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(5092);
				match(IF);
				setState(5093);
				match(NOT);
				setState(5094);
				match(EXISTS);
				}
			}

			setState(5097);
			match(FOR);
			setState(5098);
			authIdent();
			setState(5099);
			match(SERVER);
			setState(5100);
			name();
			setState(5101);
			createGenericOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiscardContext extends ParserRuleContext {
		public TerminalNode DISCARD() { return getToken(DDLStatementParser.DISCARD, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode PLANS() { return getToken(DDLStatementParser.PLANS, 0); }
		public TerminalNode SEQUENCES() { return getToken(DDLStatementParser.SEQUENCES, 0); }
		public TerminalNode TEMPORARY() { return getToken(DDLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(DDLStatementParser.TEMP, 0); }
		public DiscardContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_discard; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDiscard(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDiscard(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDiscard(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiscardContext discard() throws RecognitionException {
		DiscardContext _localctx = new DiscardContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_discard);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5103);
			match(DISCARD);
			setState(5104);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==TEMP || _la==TEMPORARY || _la==PLANS || _la==SEQUENCES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropAccessMethodContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode ACCESS() { return getToken(DDLStatementParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(DDLStatementParser.METHOD, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropAccessMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropAccessMethod; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropAccessMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropAccessMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropAccessMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropAccessMethodContext dropAccessMethod() throws RecognitionException {
		DropAccessMethodContext _localctx = new DropAccessMethodContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_dropAccessMethod);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5106);
			match(DROP);
			setState(5107);
			match(ACCESS);
			setState(5108);
			match(METHOD);
			setState(5111);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				setState(5109);
				match(IF);
				setState(5110);
				match(EXISTS);
				}
				break;
			}
			setState(5113);
			name();
			setState(5115);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5114);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropAggregateContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(DDLStatementParser.AGGREGATE, 0); }
		public AggregateWithArgtypesListContext aggregateWithArgtypesList() {
			return getRuleContext(AggregateWithArgtypesListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropAggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropAggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropAggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropAggregate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropAggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropAggregateContext dropAggregate() throws RecognitionException {
		DropAggregateContext _localctx = new DropAggregateContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_dropAggregate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5117);
			match(DROP);
			setState(5118);
			match(AGGREGATE);
			setState(5121);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				{
				setState(5119);
				match(IF);
				setState(5120);
				match(EXISTS);
				}
				break;
			}
			setState(5123);
			aggregateWithArgtypesList();
			setState(5125);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5124);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWithArgtypesListContext extends ParserRuleContext {
		public List<AggregateWithArgtypesContext> aggregateWithArgtypes() {
			return getRuleContexts(AggregateWithArgtypesContext.class);
		}
		public AggregateWithArgtypesContext aggregateWithArgtypes(int i) {
			return getRuleContext(AggregateWithArgtypesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public AggregateWithArgtypesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWithArgtypesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAggregateWithArgtypesList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAggregateWithArgtypesList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAggregateWithArgtypesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWithArgtypesListContext aggregateWithArgtypesList() throws RecognitionException {
		AggregateWithArgtypesListContext _localctx = new AggregateWithArgtypesListContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_aggregateWithArgtypesList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5127);
			aggregateWithArgtypes();
			setState(5132);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5128);
				match(COMMA_);
				setState(5129);
				aggregateWithArgtypes();
				}
				}
				setState(5134);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropCastContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode CAST() { return getToken(DDLStatementParser.CAST, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropCastContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropCast; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropCast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropCast(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropCast(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropCastContext dropCast() throws RecognitionException {
		DropCastContext _localctx = new DropCastContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_dropCast);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5135);
			match(DROP);
			setState(5136);
			match(CAST);
			setState(5139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(5137);
				match(IF);
				setState(5138);
				match(EXISTS);
				}
			}

			setState(5141);
			match(LP_);
			setState(5142);
			typeName();
			setState(5143);
			match(AS);
			setState(5144);
			typeName();
			setState(5145);
			match(RP_);
			setState(5147);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5146);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropCollationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode COLLATION() { return getToken(DDLStatementParser.COLLATION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropCollation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropCollation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropCollationContext dropCollation() throws RecognitionException {
		DropCollationContext _localctx = new DropCollationContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_dropCollation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5149);
			match(DROP);
			setState(5150);
			match(COLLATION);
			setState(5153);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
			case 1:
				{
				setState(5151);
				match(IF);
				setState(5152);
				match(EXISTS);
				}
				break;
			}
			setState(5155);
			name();
			setState(5157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5156);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropConversionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode CONVERSION() { return getToken(DDLStatementParser.CONVERSION, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropConversionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropConversion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropConversion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropConversion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropConversion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropConversionContext dropConversion() throws RecognitionException {
		DropConversionContext _localctx = new DropConversionContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_dropConversion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5159);
			match(DROP);
			setState(5160);
			match(CONVERSION);
			setState(5163);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				{
				setState(5161);
				match(IF);
				setState(5162);
				match(EXISTS);
				}
				break;
			}
			setState(5165);
			name();
			setState(5167);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5166);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDomainContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode DOMAIN() { return getToken(DDLStatementParser.DOMAIN, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropDomainContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDomain; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropDomain(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropDomain(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropDomain(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDomainContext dropDomain() throws RecognitionException {
		DropDomainContext _localctx = new DropDomainContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_dropDomain);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5169);
			match(DROP);
			setState(5170);
			match(DOMAIN);
			setState(5173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
			case 1:
				{
				setState(5171);
				match(IF);
				setState(5172);
				match(EXISTS);
				}
				break;
			}
			setState(5175);
			nameList(0);
			setState(5177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5176);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropEventTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(DDLStatementParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropEventTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropEventTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropEventTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropEventTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropEventTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropEventTriggerContext dropEventTrigger() throws RecognitionException {
		DropEventTriggerContext _localctx = new DropEventTriggerContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_dropEventTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5179);
			match(DROP);
			setState(5180);
			match(EVENT);
			setState(5181);
			match(TRIGGER);
			setState(5184);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				setState(5182);
				match(IF);
				setState(5183);
				match(EXISTS);
				}
				break;
			}
			setState(5186);
			name();
			setState(5188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5187);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropExtensionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropExtensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropExtension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropExtension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropExtension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropExtension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropExtensionContext dropExtension() throws RecognitionException {
		DropExtensionContext _localctx = new DropExtensionContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_dropExtension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5190);
			match(DROP);
			setState(5191);
			match(EXTENSION);
			setState(5194);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				setState(5192);
				match(IF);
				setState(5193);
				match(EXISTS);
				}
				break;
			}
			setState(5196);
			nameList(0);
			setState(5198);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5197);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropForeignDataWrapperContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(DDLStatementParser.WRAPPER, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropForeignDataWrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropForeignDataWrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropForeignDataWrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropForeignDataWrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropForeignDataWrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropForeignDataWrapperContext dropForeignDataWrapper() throws RecognitionException {
		DropForeignDataWrapperContext _localctx = new DropForeignDataWrapperContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_dropForeignDataWrapper);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5200);
			match(DROP);
			setState(5201);
			match(FOREIGN);
			setState(5202);
			match(DATA);
			setState(5203);
			match(WRAPPER);
			setState(5206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				setState(5204);
				match(IF);
				setState(5205);
				match(EXISTS);
				}
				break;
			}
			setState(5208);
			nameList(0);
			setState(5210);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5209);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropForeignTableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropForeignTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropForeignTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropForeignTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropForeignTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropForeignTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropForeignTableContext dropForeignTable() throws RecognitionException {
		DropForeignTableContext _localctx = new DropForeignTableContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_dropForeignTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5212);
			match(DROP);
			setState(5213);
			match(FOREIGN);
			setState(5214);
			match(TABLE);
			setState(5217);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
			case 1:
				{
				setState(5215);
				match(IF);
				setState(5216);
				match(EXISTS);
				}
				break;
			}
			setState(5219);
			tableName();
			setState(5224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5220);
				match(COMMA_);
				setState(5221);
				tableName();
				}
				}
				setState(5226);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5228);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5227);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public FunctionWithArgtypesListContext functionWithArgtypesList() {
			return getRuleContext(FunctionWithArgtypesListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionContext dropFunction() throws RecognitionException {
		DropFunctionContext _localctx = new DropFunctionContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_dropFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5230);
			match(DROP);
			setState(5231);
			match(FUNCTION);
			setState(5234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				{
				setState(5232);
				match(IF);
				setState(5233);
				match(EXISTS);
				}
				break;
			}
			setState(5236);
			functionWithArgtypesList();
			setState(5238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5237);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionWithArgtypesListContext extends ParserRuleContext {
		public List<FunctionWithArgtypesContext> functionWithArgtypes() {
			return getRuleContexts(FunctionWithArgtypesContext.class);
		}
		public FunctionWithArgtypesContext functionWithArgtypes(int i) {
			return getRuleContext(FunctionWithArgtypesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public FunctionWithArgtypesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionWithArgtypesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFunctionWithArgtypesList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFunctionWithArgtypesList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFunctionWithArgtypesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionWithArgtypesListContext functionWithArgtypesList() throws RecognitionException {
		FunctionWithArgtypesListContext _localctx = new FunctionWithArgtypesListContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_functionWithArgtypesList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5240);
			functionWithArgtypes();
			setState(5245);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5241);
				match(COMMA_);
				setState(5242);
				functionWithArgtypes();
				}
				}
				setState(5247);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropLanguageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode PROCEDURAL() { return getToken(DDLStatementParser.PROCEDURAL, 0); }
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropLanguageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropLanguage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropLanguage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropLanguageContext dropLanguage() throws RecognitionException {
		DropLanguageContext _localctx = new DropLanguageContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_dropLanguage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5248);
			match(DROP);
			setState(5250);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(5249);
				match(PROCEDURAL);
				}
			}

			setState(5252);
			match(LANGUAGE);
			setState(5255);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				setState(5253);
				match(IF);
				setState(5254);
				match(EXISTS);
				}
				break;
			}
			setState(5257);
			name();
			setState(5259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5258);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropMaterializedViewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropMaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropMaterializedView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropMaterializedView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropMaterializedView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropMaterializedViewContext dropMaterializedView() throws RecognitionException {
		DropMaterializedViewContext _localctx = new DropMaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_dropMaterializedView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5261);
			match(DROP);
			setState(5262);
			match(MATERIALIZED);
			setState(5263);
			match(VIEW);
			setState(5266);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				setState(5264);
				match(IF);
				setState(5265);
				match(EXISTS);
				}
				break;
			}
			setState(5268);
			anyNameList();
			setState(5270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5269);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOperatorContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public OperatorWithArgtypesListContext operatorWithArgtypesList() {
			return getRuleContext(OperatorWithArgtypesListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOperatorContext dropOperator() throws RecognitionException {
		DropOperatorContext _localctx = new DropOperatorContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_dropOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5272);
			match(DROP);
			setState(5273);
			match(OPERATOR);
			setState(5276);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
			case 1:
				{
				setState(5274);
				match(IF);
				setState(5275);
				match(EXISTS);
				}
				break;
			}
			setState(5278);
			operatorWithArgtypesList();
			setState(5280);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5279);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorWithArgtypesListContext extends ParserRuleContext {
		public List<OperatorWithArgtypesContext> operatorWithArgtypes() {
			return getRuleContexts(OperatorWithArgtypesContext.class);
		}
		public OperatorWithArgtypesContext operatorWithArgtypes(int i) {
			return getRuleContext(OperatorWithArgtypesContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public OperatorWithArgtypesListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorWithArgtypesList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOperatorWithArgtypesList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOperatorWithArgtypesList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOperatorWithArgtypesList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorWithArgtypesListContext operatorWithArgtypesList() throws RecognitionException {
		OperatorWithArgtypesListContext _localctx = new OperatorWithArgtypesListContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_operatorWithArgtypesList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5282);
			operatorWithArgtypes();
			setState(5287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5283);
				match(COMMA_);
				setState(5284);
				operatorWithArgtypes();
				}
				}
				setState(5289);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOperatorClassContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(DDLStatementParser.CLASS, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropOperatorClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOperatorClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropOperatorClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropOperatorClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropOperatorClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOperatorClassContext dropOperatorClass() throws RecognitionException {
		DropOperatorClassContext _localctx = new DropOperatorClassContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_dropOperatorClass);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5290);
			match(DROP);
			setState(5291);
			match(OPERATOR);
			setState(5292);
			match(CLASS);
			setState(5295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				{
				setState(5293);
				match(IF);
				setState(5294);
				match(EXISTS);
				}
				break;
			}
			setState(5297);
			anyName();
			setState(5298);
			match(USING);
			setState(5299);
			name();
			setState(5301);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5300);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOperatorFamilyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(DDLStatementParser.FAMILY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropOperatorFamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOperatorFamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropOperatorFamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropOperatorFamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropOperatorFamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOperatorFamilyContext dropOperatorFamily() throws RecognitionException {
		DropOperatorFamilyContext _localctx = new DropOperatorFamilyContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_dropOperatorFamily);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5303);
			match(DROP);
			setState(5304);
			match(OPERATOR);
			setState(5305);
			match(FAMILY);
			setState(5308);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				{
				setState(5306);
				match(IF);
				setState(5307);
				match(EXISTS);
				}
				break;
			}
			setState(5310);
			anyName();
			setState(5311);
			match(USING);
			setState(5312);
			name();
			setState(5314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5313);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOwnedContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode OWNED() { return getToken(DDLStatementParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public RoleListContext roleList() {
			return getRuleContext(RoleListContext.class,0);
		}
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropOwnedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOwned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropOwned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropOwned(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropOwned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOwnedContext dropOwned() throws RecognitionException {
		DropOwnedContext _localctx = new DropOwnedContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_dropOwned);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5316);
			match(DROP);
			setState(5317);
			match(OWNED);
			setState(5318);
			match(BY);
			setState(5319);
			roleList();
			setState(5321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5320);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropPolicyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode POLICY() { return getToken(DDLStatementParser.POLICY, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropPolicyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPolicy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropPolicy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropPolicy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropPolicy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPolicyContext dropPolicy() throws RecognitionException {
		DropPolicyContext _localctx = new DropPolicyContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_dropPolicy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5323);
			match(DROP);
			setState(5324);
			match(POLICY);
			setState(5327);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
			case 1:
				{
				setState(5325);
				match(IF);
				setState(5326);
				match(EXISTS);
				}
				break;
			}
			setState(5329);
			name();
			setState(5330);
			match(ON);
			setState(5331);
			tableName();
			setState(5333);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5332);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropProcedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public FunctionWithArgtypesListContext functionWithArgtypesList() {
			return getRuleContext(FunctionWithArgtypesListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropProcedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropProcedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropProcedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropProcedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropProcedureContext dropProcedure() throws RecognitionException {
		DropProcedureContext _localctx = new DropProcedureContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_dropProcedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5335);
			match(DROP);
			setState(5336);
			match(PROCEDURE);
			setState(5339);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				{
				setState(5337);
				match(IF);
				setState(5338);
				match(EXISTS);
				}
				break;
			}
			setState(5341);
			functionWithArgtypesList();
			setState(5343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5342);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropPublicationContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode PUBLICATION() { return getToken(DDLStatementParser.PUBLICATION, 0); }
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropPublicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPublication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropPublication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropPublication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropPublication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPublicationContext dropPublication() throws RecognitionException {
		DropPublicationContext _localctx = new DropPublicationContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_dropPublication);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5345);
			match(DROP);
			setState(5346);
			match(PUBLICATION);
			setState(5349);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				{
				setState(5347);
				match(IF);
				setState(5348);
				match(EXISTS);
				}
				break;
			}
			setState(5351);
			anyNameList();
			setState(5353);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5352);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRoutineContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode ROUTINE() { return getToken(DDLStatementParser.ROUTINE, 0); }
		public FunctionWithArgtypesListContext functionWithArgtypesList() {
			return getRuleContext(FunctionWithArgtypesListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropRoutineContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRoutine; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropRoutine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropRoutine(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRoutineContext dropRoutine() throws RecognitionException {
		DropRoutineContext _localctx = new DropRoutineContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_dropRoutine);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5355);
			match(DROP);
			setState(5356);
			match(ROUTINE);
			setState(5359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
			case 1:
				{
				setState(5357);
				match(IF);
				setState(5358);
				match(EXISTS);
				}
				break;
			}
			setState(5361);
			functionWithArgtypesList();
			setState(5363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5362);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRuleContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode RULE() { return getToken(DDLStatementParser.RULE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRuleContext dropRule() throws RecognitionException {
		DropRuleContext _localctx = new DropRuleContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_dropRule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5365);
			match(DROP);
			setState(5366);
			match(RULE);
			setState(5369);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				{
				setState(5367);
				match(IF);
				setState(5368);
				match(EXISTS);
				}
				break;
			}
			setState(5371);
			name();
			setState(5372);
			match(ON);
			setState(5373);
			tableName();
			setState(5375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5374);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropSequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(DDLStatementParser.SEQUENCE, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropSequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropSequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSequenceContext dropSequence() throws RecognitionException {
		DropSequenceContext _localctx = new DropSequenceContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_dropSequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5377);
			match(DROP);
			setState(5378);
			match(SEQUENCE);
			setState(5381);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				{
				setState(5379);
				match(IF);
				setState(5380);
				match(EXISTS);
				}
				break;
			}
			setState(5383);
			qualifiedNameList(0);
			setState(5385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5384);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropServerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropServerContext dropServer() throws RecognitionException {
		DropServerContext _localctx = new DropServerContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_dropServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5387);
			match(DROP);
			setState(5388);
			match(SERVER);
			setState(5391);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				setState(5389);
				match(IF);
				setState(5390);
				match(EXISTS);
				}
				break;
			}
			setState(5393);
			qualifiedNameList(0);
			setState(5395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5394);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropStatisticsContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(DDLStatementParser.STATISTICS, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropStatisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropStatistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropStatistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropStatistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropStatistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropStatisticsContext dropStatistics() throws RecognitionException {
		DropStatisticsContext _localctx = new DropStatisticsContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_dropStatistics);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5397);
			match(DROP);
			setState(5398);
			match(STATISTICS);
			setState(5401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
			case 1:
				{
				setState(5399);
				match(IF);
				setState(5400);
				match(EXISTS);
				}
				break;
			}
			setState(5403);
			qualifiedNameList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropSubscriptionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(DDLStatementParser.SUBSCRIPTION, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropSubscriptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSubscription; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropSubscription(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropSubscription(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropSubscription(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropSubscriptionContext dropSubscription() throws RecognitionException {
		DropSubscriptionContext _localctx = new DropSubscriptionContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_dropSubscription);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5405);
			match(DROP);
			setState(5406);
			match(SUBSCRIPTION);
			setState(5409);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
			case 1:
				{
				setState(5407);
				match(IF);
				setState(5408);
				match(EXISTS);
				}
				break;
			}
			setState(5411);
			qualifiedName();
			setState(5413);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5412);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTablespaceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTablespaceContext dropTablespace() throws RecognitionException {
		DropTablespaceContext _localctx = new DropTablespaceContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_dropTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5415);
			match(DROP);
			setState(5416);
			match(TABLESPACE);
			setState(5419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
			case 1:
				{
				setState(5417);
				match(IF);
				setState(5418);
				match(EXISTS);
				}
				break;
			}
			setState(5421);
			qualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTextSearchContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(DDLStatementParser.CONFIGURATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(DDLStatementParser.DICTIONARY, 0); }
		public TerminalNode PARSER() { return getToken(DDLStatementParser.PARSER, 0); }
		public TerminalNode TEMPLATE() { return getToken(DDLStatementParser.TEMPLATE, 0); }
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropTextSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTextSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropTextSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropTextSearch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropTextSearch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTextSearchContext dropTextSearch() throws RecognitionException {
		DropTextSearchContext _localctx = new DropTextSearchContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_dropTextSearch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5423);
			match(DROP);
			setState(5424);
			match(TEXT);
			setState(5425);
			match(SEARCH);
			setState(5426);
			_la = _input.LA(1);
			if ( !(((((_la - 434)) & ~0x3f) == 0 && ((1L << (_la - 434)) & ((1L << (CONFIGURATION - 434)) | (1L << (DICTIONARY - 434)) | (1L << (PARSER - 434)))) != 0) || _la==TEMPLATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5429);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(5427);
				match(IF);
				setState(5428);
				match(EXISTS);
				}
				break;
			}
			setState(5431);
			name();
			setState(5433);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5432);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTransformContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode TRANSFORM() { return getToken(DDLStatementParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropTransformContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTransform; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropTransform(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropTransform(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropTransform(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTransformContext dropTransform() throws RecognitionException {
		DropTransformContext _localctx = new DropTransformContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_dropTransform);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5435);
			match(DROP);
			setState(5436);
			match(TRANSFORM);
			setState(5439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(5437);
				match(IF);
				setState(5438);
				match(EXISTS);
				}
			}

			setState(5441);
			match(FOR);
			setState(5442);
			typeName();
			setState(5443);
			match(LANGUAGE);
			setState(5444);
			name();
			setState(5446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5445);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerContext dropTrigger() throws RecognitionException {
		DropTriggerContext _localctx = new DropTriggerContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_dropTrigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5448);
			match(DROP);
			setState(5449);
			match(TRIGGER);
			setState(5452);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				setState(5450);
				match(IF);
				setState(5451);
				match(EXISTS);
				}
				break;
			}
			setState(5454);
			qualifiedName();
			setState(5455);
			match(ON);
			setState(5456);
			tableName();
			setState(5458);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5457);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTypeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public AnyNameListContext anyNameList() {
			return getRuleContext(AnyNameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTypeContext dropType() throws RecognitionException {
		DropTypeContext _localctx = new DropTypeContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_dropType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5460);
			match(DROP);
			setState(5461);
			match(TYPE);
			setState(5464);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				{
				setState(5462);
				match(IF);
				setState(5463);
				match(EXISTS);
				}
				break;
			}
			setState(5466);
			anyNameList();
			setState(5468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5467);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserMappingContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public TerminalNode MAPPING() { return getToken(DDLStatementParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public AuthIdentContext authIdent() {
			return getRuleContext(AuthIdentContext.class,0);
		}
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropUserMappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUserMapping; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropUserMapping(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropUserMapping(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropUserMapping(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserMappingContext dropUserMapping() throws RecognitionException {
		DropUserMappingContext _localctx = new DropUserMappingContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_dropUserMapping);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5470);
			match(DROP);
			setState(5471);
			match(USER);
			setState(5472);
			match(MAPPING);
			setState(5475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(5473);
				match(IF);
				setState(5474);
				match(EXISTS);
				}
			}

			setState(5477);
			match(FOR);
			setState(5478);
			authIdent();
			setState(5479);
			match(SERVER);
			setState(5480);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropViewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public DropBehaviorContext dropBehavior() {
			return getRuleContext(DropBehaviorContext.class,0);
		}
		public DropViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDropView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDropView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDropView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropViewContext dropView() throws RecognitionException {
		DropViewContext _localctx = new DropViewContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_dropView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5482);
			match(DROP);
			setState(5483);
			match(VIEW);
			setState(5486);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				setState(5484);
				match(IF);
				setState(5485);
				match(EXISTS);
				}
				break;
			}
			setState(5488);
			nameList(0);
			setState(5490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5489);
				dropBehavior();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportForeignSchemaContext extends ParserRuleContext {
		public TerminalNode IMPORT() { return getToken(DDLStatementParser.IMPORT, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public TerminalNode INTO() { return getToken(DDLStatementParser.INTO, 0); }
		public ImportQualificationContext importQualification() {
			return getRuleContext(ImportQualificationContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public ImportForeignSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importForeignSchema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterImportForeignSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitImportForeignSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitImportForeignSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportForeignSchemaContext importForeignSchema() throws RecognitionException {
		ImportForeignSchemaContext _localctx = new ImportForeignSchemaContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_importForeignSchema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5492);
			match(IMPORT);
			setState(5493);
			match(FOREIGN);
			setState(5494);
			match(SCHEMA);
			setState(5495);
			name();
			setState(5497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT || _la==EXCEPT) {
				{
				setState(5496);
				importQualification();
				}
			}

			setState(5499);
			match(FROM);
			setState(5500);
			match(SERVER);
			setState(5501);
			name();
			setState(5502);
			match(INTO);
			setState(5503);
			name();
			setState(5505);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(5504);
				createGenericOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportQualificationContext extends ParserRuleContext {
		public ImportQualificationTypeContext importQualificationType() {
			return getRuleContext(ImportQualificationTypeContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ImportQualificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importQualification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterImportQualification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitImportQualification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitImportQualification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportQualificationContext importQualification() throws RecognitionException {
		ImportQualificationContext _localctx = new ImportQualificationContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_importQualification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5507);
			importQualificationType();
			setState(5508);
			match(LP_);
			setState(5509);
			relationExprList();
			setState(5510);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImportQualificationTypeContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(DDLStatementParser.LIMIT, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode EXCEPT() { return getToken(DDLStatementParser.EXCEPT, 0); }
		public ImportQualificationTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_importQualificationType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterImportQualificationType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitImportQualificationType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitImportQualificationType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImportQualificationTypeContext importQualificationType() throws RecognitionException {
		ImportQualificationTypeContext _localctx = new ImportQualificationTypeContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_importQualificationType);
		try {
			setState(5515);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5512);
				match(LIMIT);
				setState(5513);
				match(TO);
				}
				break;
			case EXCEPT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5514);
				match(EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListenContext extends ParserRuleContext {
		public TerminalNode LISTEN() { return getToken(DDLStatementParser.LISTEN, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ListenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterListen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitListen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitListen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListenContext listen() throws RecognitionException {
		ListenContext _localctx = new ListenContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_listen);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5517);
			match(LISTEN);
			setState(5518);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MoveContext extends ParserRuleContext {
		public TerminalNode MOVE() { return getToken(DDLStatementParser.MOVE, 0); }
		public FetchArgsContext fetchArgs() {
			return getRuleContext(FetchArgsContext.class,0);
		}
		public MoveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_move; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterMove(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitMove(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitMove(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MoveContext move() throws RecognitionException {
		MoveContext _localctx = new MoveContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_move);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5520);
			match(MOVE);
			setState(5521);
			fetchArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepareContext extends ParserRuleContext {
		public TerminalNode PREPARE() { return getToken(DDLStatementParser.PREPARE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public PrepTypeClauseContext prepTypeClause() {
			return getRuleContext(PrepTypeClauseContext.class,0);
		}
		public PrepareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepare; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPrepare(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPrepare(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPrepare(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepareContext prepare() throws RecognitionException {
		PrepareContext _localctx = new PrepareContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_prepare);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5523);
			match(PREPARE);
			setState(5524);
			name();
			setState(5526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(5525);
				prepTypeClause();
				}
			}

			setState(5528);
			match(AS);
			setState(5529);
			preparableStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrepTypeClauseContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public PrepTypeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prepTypeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPrepTypeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPrepTypeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPrepTypeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrepTypeClauseContext prepTypeClause() throws RecognitionException {
		PrepTypeClauseContext _localctx = new PrepTypeClauseContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_prepTypeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5531);
			match(LP_);
			setState(5532);
			typeList();
			setState(5533);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RefreshMaterializedViewContext extends ParserRuleContext {
		public TerminalNode REFRESH() { return getToken(DDLStatementParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode CONCURRENTLY() { return getToken(DDLStatementParser.CONCURRENTLY, 0); }
		public WithDataContext withData() {
			return getRuleContext(WithDataContext.class,0);
		}
		public RefreshMaterializedViewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_refreshMaterializedView; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRefreshMaterializedView(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRefreshMaterializedView(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRefreshMaterializedView(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RefreshMaterializedViewContext refreshMaterializedView() throws RecognitionException {
		RefreshMaterializedViewContext _localctx = new RefreshMaterializedViewContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_refreshMaterializedView);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5535);
			match(REFRESH);
			setState(5536);
			match(MATERIALIZED);
			setState(5537);
			match(VIEW);
			setState(5539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(5538);
				match(CONCURRENTLY);
				}
			}

			setState(5541);
			qualifiedName();
			setState(5543);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5542);
				withData();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReIndexContext extends ParserRuleContext {
		public TerminalNode REINDEX() { return getToken(DDLStatementParser.REINDEX, 0); }
		public ReIndexClausesContext reIndexClauses() {
			return getRuleContext(ReIndexClausesContext.class,0);
		}
		public ReIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReIndexContext reIndex() throws RecognitionException {
		ReIndexContext _localctx = new ReIndexContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_reIndex);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5545);
			match(REINDEX);
			setState(5546);
			reIndexClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReIndexClausesContext extends ParserRuleContext {
		public ReindexTargetTypeContext reindexTargetType() {
			return getRuleContext(ReindexTargetTypeContext.class,0);
		}
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode CONCURRENTLY() { return getToken(DDLStatementParser.CONCURRENTLY, 0); }
		public ReindexTargetMultitableContext reindexTargetMultitable() {
			return getRuleContext(ReindexTargetMultitableContext.class,0);
		}
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ReindexOptionListContext reindexOptionList() {
			return getRuleContext(ReindexOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ReIndexClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reIndexClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReIndexClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReIndexClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReIndexClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReIndexClausesContext reIndexClauses() throws RecognitionException {
		ReIndexClausesContext _localctx = new ReIndexClausesContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_reIndexClauses);
		int _la;
		try {
			setState(5578);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5548);
				reindexTargetType();
				setState(5550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(5549);
					match(CONCURRENTLY);
					}
				}

				setState(5552);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5554);
				reindexTargetMultitable();
				setState(5556);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(5555);
					match(CONCURRENTLY);
					}
				}

				setState(5558);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5560);
				match(LP_);
				setState(5561);
				reindexOptionList();
				setState(5562);
				match(RP_);
				setState(5563);
				reindexTargetType();
				setState(5565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(5564);
					match(CONCURRENTLY);
					}
				}

				setState(5567);
				qualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5569);
				match(LP_);
				setState(5570);
				reindexOptionList();
				setState(5571);
				match(RP_);
				setState(5572);
				reindexTargetMultitable();
				setState(5574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(5573);
					match(CONCURRENTLY);
					}
				}

				setState(5576);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexOptionListContext extends ParserRuleContext {
		public List<ReindexOptionElemContext> reindexOptionElem() {
			return getRuleContexts(ReindexOptionElemContext.class);
		}
		public ReindexOptionElemContext reindexOptionElem(int i) {
			return getRuleContext(ReindexOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public ReindexOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReindexOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReindexOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReindexOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexOptionListContext reindexOptionList() throws RecognitionException {
		ReindexOptionListContext _localctx = new ReindexOptionListContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_reindexOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5580);
			reindexOptionElem();
			setState(5585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5581);
				match(COMMA_);
				setState(5582);
				reindexOptionElem();
				}
				}
				setState(5587);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexOptionElemContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(DDLStatementParser.VERBOSE, 0); }
		public ReindexOptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexOptionElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReindexOptionElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReindexOptionElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReindexOptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexOptionElemContext reindexOptionElem() throws RecognitionException {
		ReindexOptionElemContext _localctx = new ReindexOptionElemContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_reindexOptionElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5588);
			match(VERBOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexTargetMultitableContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode SYSTEM() { return getToken(DDLStatementParser.SYSTEM, 0); }
		public TerminalNode DATABASE() { return getToken(DDLStatementParser.DATABASE, 0); }
		public ReindexTargetMultitableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexTargetMultitable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReindexTargetMultitable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReindexTargetMultitable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReindexTargetMultitable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexTargetMultitableContext reindexTargetMultitable() throws RecognitionException {
		ReindexTargetMultitableContext _localctx = new ReindexTargetMultitableContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_reindexTargetMultitable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5590);
			_la = _input.LA(1);
			if ( !(_la==SCHEMA || _la==DATABASE || _la==SYSTEM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReindexTargetTypeContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public ReindexTargetTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reindexTargetType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReindexTargetType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReindexTargetType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReindexTargetType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReindexTargetTypeContext reindexTargetType() throws RecognitionException {
		ReindexTargetTypeContext _localctx = new ReindexTargetTypeContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_reindexTargetType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5592);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==INDEX) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignTableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public AlterForeignTableClausesContext alterForeignTableClauses() {
			return getRuleContext(AlterForeignTableClausesContext.class,0);
		}
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public AlterForeignTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterForeignTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterForeignTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterForeignTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignTableContext alterForeignTable() throws RecognitionException {
		AlterForeignTableContext _localctx = new AlterForeignTableContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_alterForeignTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5594);
			match(ALTER);
			setState(5595);
			match(FOREIGN);
			setState(5596);
			match(TABLE);
			setState(5599);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				{
				setState(5597);
				match(IF);
				setState(5598);
				match(EXISTS);
				}
				break;
			}
			setState(5601);
			relationExpr();
			setState(5602);
			alterForeignTableClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignTableClausesContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public List<NameContext> name() {
			return getRuleContexts(NameContext.class);
		}
		public NameContext name(int i) {
			return getRuleContext(NameContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public AlterTableCmdsContext alterTableCmds() {
			return getRuleContext(AlterTableCmdsContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public AlterForeignTableClausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignTableClauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlterForeignTableClauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlterForeignTableClauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlterForeignTableClauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignTableClausesContext alterForeignTableClauses() throws RecognitionException {
		AlterForeignTableClausesContext _localctx = new AlterForeignTableClausesContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_alterForeignTableClauses);
		int _la;
		try {
			setState(5619);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5604);
				match(RENAME);
				setState(5605);
				match(TO);
				setState(5606);
				name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5607);
				match(RENAME);
				setState(5609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(5608);
					match(COLUMN);
					}
				}

				setState(5611);
				name();
				setState(5612);
				match(TO);
				setState(5613);
				name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5615);
				alterTableCmds();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5616);
				match(SET);
				setState(5617);
				match(SCHEMA);
				setState(5618);
				name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOperatorContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public CreateOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOperatorContext createOperator() throws RecognitionException {
		CreateOperatorContext _localctx = new CreateOperatorContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_createOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5621);
			match(CREATE);
			setState(5622);
			match(OPERATOR);
			setState(5623);
			anyOperator();
			setState(5624);
			definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOperatorClassContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(DDLStatementParser.CLASS, 0); }
		public List<AnyNameContext> anyName() {
			return getRuleContexts(AnyNameContext.class);
		}
		public AnyNameContext anyName(int i) {
			return getRuleContext(AnyNameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public OpclassItemListContext opclassItemList() {
			return getRuleContext(OpclassItemListContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode FAMILY() { return getToken(DDLStatementParser.FAMILY, 0); }
		public CreateOperatorClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOperatorClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateOperatorClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateOperatorClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateOperatorClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOperatorClassContext createOperatorClass() throws RecognitionException {
		CreateOperatorClassContext _localctx = new CreateOperatorClassContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_createOperatorClass);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5626);
			match(CREATE);
			setState(5627);
			match(OPERATOR);
			setState(5628);
			match(CLASS);
			setState(5629);
			anyName();
			setState(5631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(5630);
				match(DEFAULT);
				}
			}

			setState(5633);
			match(FOR);
			setState(5634);
			match(TYPE);
			setState(5635);
			typeName();
			setState(5636);
			match(USING);
			setState(5637);
			name();
			setState(5640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FAMILY) {
				{
				setState(5638);
				match(FAMILY);
				setState(5639);
				anyName();
				}
			}

			setState(5642);
			match(AS);
			setState(5643);
			opclassItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOperatorFamilyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(DDLStatementParser.FAMILY, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CreateOperatorFamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOperatorFamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateOperatorFamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateOperatorFamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateOperatorFamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOperatorFamilyContext createOperatorFamily() throws RecognitionException {
		CreateOperatorFamilyContext _localctx = new CreateOperatorFamilyContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_createOperatorFamily);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5645);
			match(CREATE);
			setState(5646);
			match(OPERATOR);
			setState(5647);
			match(FAMILY);
			setState(5648);
			anyName();
			setState(5649);
			match(USING);
			setState(5650);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecurityLabelStmtContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(DDLStatementParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(DDLStatementParser.LABEL, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public SecurityLabelClauscesContext securityLabelClausces() {
			return getRuleContext(SecurityLabelClauscesContext.class,0);
		}
		public TerminalNode IS() { return getToken(DDLStatementParser.IS, 0); }
		public SecurityLabelContext securityLabel() {
			return getRuleContext(SecurityLabelContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public SecurityLabelStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securityLabelStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSecurityLabelStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSecurityLabelStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSecurityLabelStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurityLabelStmtContext securityLabelStmt() throws RecognitionException {
		SecurityLabelStmtContext _localctx = new SecurityLabelStmtContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_securityLabelStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5652);
			match(SECURITY);
			setState(5653);
			match(LABEL);
			{
			setState(5654);
			match(FOR);
			setState(5655);
			nonReservedWordOrSconst();
			}
			setState(5657);
			match(ON);
			setState(5658);
			securityLabelClausces();
			setState(5659);
			match(IS);
			setState(5660);
			securityLabel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecurityLabelContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public SecurityLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securityLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSecurityLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSecurityLabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSecurityLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurityLabelContext securityLabel() throws RecognitionException {
		SecurityLabelContext _localctx = new SecurityLabelContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_securityLabel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5662);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecurityLabelClauscesContext extends ParserRuleContext {
		public ObjectTypeAnyNameContext objectTypeAnyName() {
			return getRuleContext(ObjectTypeAnyNameContext.class,0);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TerminalNode DOMAIN() { return getToken(DDLStatementParser.DOMAIN, 0); }
		public AggregateWithArgtypesContext aggregateWithArgtypes() {
			return getRuleContext(AggregateWithArgtypesContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(DDLStatementParser.AGGREGATE, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public TerminalNode LARGE() { return getToken(DDLStatementParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(DDLStatementParser.OBJECT, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public FunctionWithArgtypesContext functionWithArgtypes() {
			return getRuleContext(FunctionWithArgtypesContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(DDLStatementParser.ROUTINE, 0); }
		public SecurityLabelClauscesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securityLabelClausces; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSecurityLabelClausces(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSecurityLabelClausces(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSecurityLabelClausces(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurityLabelClauscesContext securityLabelClausces() throws RecognitionException {
		SecurityLabelClauscesContext _localctx = new SecurityLabelClauscesContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_securityLabelClausces);
		int _la;
		try {
			setState(5678);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
			case INDEX:
			case FOREIGN:
			case VIEW:
			case COLLATION:
			case TEXT:
			case SEQUENCE:
			case STATISTICS:
			case MATERIALIZED:
			case CONVERSION:
				enterOuterAlt(_localctx, 1);
				{
				setState(5664);
				objectTypeAnyName();
				setState(5665);
				anyName();
				}
				break;
			case COLUMN:
				enterOuterAlt(_localctx, 2);
				{
				setState(5667);
				match(COLUMN);
				setState(5668);
				anyName();
				}
				break;
			case TYPE:
			case DOMAIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(5669);
				_la = _input.LA(1);
				if ( !(_la==TYPE || _la==DOMAIN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5670);
				typeName();
				}
				break;
			case FUNCTION:
			case AGGREGATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5671);
				_la = _input.LA(1);
				if ( !(_la==FUNCTION || _la==AGGREGATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5672);
				aggregateWithArgtypes();
				}
				break;
			case LARGE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5673);
				match(LARGE);
				setState(5674);
				match(OBJECT);
				setState(5675);
				numericOnly();
				}
				break;
			case PROCEDURE:
			case ROUTINE:
				enterOuterAlt(_localctx, 6);
				{
				setState(5676);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==ROUTINE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5677);
				functionWithArgtypes();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnlistenContext extends ParserRuleContext {
		public TerminalNode UNLISTEN() { return getToken(DDLStatementParser.UNLISTEN, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public UnlistenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unlisten; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterUnlisten(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitUnlisten(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitUnlisten(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnlistenContext unlisten() throws RecognitionException {
		UnlistenContext _localctx = new UnlistenContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_unlisten);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5680);
			match(UNLISTEN);
			setState(5683);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(5681);
				colId();
				}
				break;
			case ASTERISK_:
				{
				setState(5682);
				match(ASTERISK_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterMarkerContext extends ParserRuleContext {
		public TerminalNode QUESTION_() { return getToken(DDLStatementParser.QUESTION_, 0); }
		public LiteralsTypeContext literalsType() {
			return getRuleContext(LiteralsTypeContext.class,0);
		}
		public ParameterMarkerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterMarker; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterParameterMarker(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitParameterMarker(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitParameterMarker(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterMarkerContext parameterMarker() throws RecognitionException {
		ParameterMarkerContext _localctx = new ParameterMarkerContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_parameterMarker);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5685);
			match(QUESTION_);
			setState(5687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				{
				setState(5686);
				literalsType();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReservedKeywordContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode ANALYSE() { return getToken(DDLStatementParser.ANALYSE, 0); }
		public TerminalNode ANALYZE() { return getToken(DDLStatementParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(DDLStatementParser.AND, 0); }
		public TerminalNode ANY() { return getToken(DDLStatementParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(DDLStatementParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode ASC() { return getToken(DDLStatementParser.ASC, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(DDLStatementParser.ASYMMETRIC, 0); }
		public TerminalNode BOTH() { return getToken(DDLStatementParser.BOTH, 0); }
		public TerminalNode CASE() { return getToken(DDLStatementParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(DDLStatementParser.CAST, 0); }
		public TerminalNode CHECK() { return getToken(DDLStatementParser.CHECK, 0); }
		public TerminalNode COLLATE() { return getToken(DDLStatementParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(DDLStatementParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public TerminalNode CREATE() { return getToken(DDLStatementParser.CREATE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(DDLStatementParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(DDLStatementParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(DDLStatementParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(DDLStatementParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DDLStatementParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(DDLStatementParser.CURRENT_USER, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(DDLStatementParser.DEFERRABLE, 0); }
		public TerminalNode DESC() { return getToken(DDLStatementParser.DESC, 0); }
		public TerminalNode DISTINCT() { return getToken(DDLStatementParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(DDLStatementParser.DO, 0); }
		public TerminalNode ELSE() { return getToken(DDLStatementParser.ELSE, 0); }
		public TerminalNode END() { return getToken(DDLStatementParser.END, 0); }
		public TerminalNode EXCEPT() { return getToken(DDLStatementParser.EXCEPT, 0); }
		public TerminalNode FALSE() { return getToken(DDLStatementParser.FALSE, 0); }
		public TerminalNode FETCH() { return getToken(DDLStatementParser.FETCH, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(DDLStatementParser.FOREIGN, 0); }
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode GRANT() { return getToken(DDLStatementParser.GRANT, 0); }
		public TerminalNode GROUP() { return getToken(DDLStatementParser.GROUP, 0); }
		public TerminalNode HAVING() { return getToken(DDLStatementParser.HAVING, 0); }
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public TerminalNode INITIALLY() { return getToken(DDLStatementParser.INITIALLY, 0); }
		public TerminalNode INTERSECT() { return getToken(DDLStatementParser.INTERSECT, 0); }
		public TerminalNode INTO() { return getToken(DDLStatementParser.INTO, 0); }
		public TerminalNode LATERAL() { return getToken(DDLStatementParser.LATERAL, 0); }
		public TerminalNode LEADING() { return getToken(DDLStatementParser.LEADING, 0); }
		public TerminalNode LIMIT() { return getToken(DDLStatementParser.LIMIT, 0); }
		public TerminalNode LOCALTIME() { return getToken(DDLStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(DDLStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode OFFSET() { return getToken(DDLStatementParser.OFFSET, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode ONLY() { return getToken(DDLStatementParser.ONLY, 0); }
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(DDLStatementParser.ORDER, 0); }
		public TerminalNode PLACING() { return getToken(DDLStatementParser.PLACING, 0); }
		public TerminalNode PRIMARY() { return getToken(DDLStatementParser.PRIMARY, 0); }
		public TerminalNode REFERENCES() { return getToken(DDLStatementParser.REFERENCES, 0); }
		public TerminalNode RETURNING() { return getToken(DDLStatementParser.RETURNING, 0); }
		public TerminalNode SELECT() { return getToken(DDLStatementParser.SELECT, 0); }
		public TerminalNode SESSION_USER() { return getToken(DDLStatementParser.SESSION_USER, 0); }
		public TerminalNode SOME() { return getToken(DDLStatementParser.SOME, 0); }
		public TerminalNode SYMMETRIC() { return getToken(DDLStatementParser.SYMMETRIC, 0); }
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TerminalNode THEN() { return getToken(DDLStatementParser.THEN, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode TRAILING() { return getToken(DDLStatementParser.TRAILING, 0); }
		public TerminalNode TRUE() { return getToken(DDLStatementParser.TRUE, 0); }
		public TerminalNode UNION() { return getToken(DDLStatementParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(DDLStatementParser.UNIQUE, 0); }
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public TerminalNode VARIADIC() { return getToken(DDLStatementParser.VARIADIC, 0); }
		public TerminalNode WHEN() { return getToken(DDLStatementParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(DDLStatementParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(DDLStatementParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public ReservedKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reservedKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReservedKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReservedKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReservedKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReservedKeywordContext reservedKeyword() throws RecognitionException {
		ReservedKeywordContext _localctx = new ReservedKeywordContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_reservedKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5689);
			_la = _input.LA(1);
			if ( !(((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & ((1L << (SELECT - 50)) | (1L << (CREATE - 50)) | (1L << (GRANT - 50)) | (1L << (TABLE - 50)) | (1L << (COLUMN - 50)) | (1L << (CONSTRAINT - 50)) | (1L << (PRIMARY - 50)) | (1L << (UNIQUE - 50)) | (1L << (FOREIGN - 50)) | (1L << (INTO - 50)) | (1L << (WITH - 50)) | (1L << (UNION - 50)) | (1L << (DISTINCT - 50)) | (1L << (CASE - 50)) | (1L << (WHEN - 50)) | (1L << (CAST - 50)) | (1L << (FROM - 50)) | (1L << (USING - 50)) | (1L << (WHERE - 50)) | (1L << (AS - 50)) | (1L << (ON - 50)) | (1L << (ELSE - 50)) | (1L << (THEN - 50)) | (1L << (FOR - 50)) | (1L << (TO - 50)) | (1L << (AND - 50)) | (1L << (OR - 50)) | (1L << (NOT - 50)) | (1L << (NULL - 50)) | (1L << (TRUE - 50)) | (1L << (FALSE - 50)))) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (IN - 114)) | (1L << (ALL - 114)) | (1L << (ANY - 114)) | (1L << (ORDER - 114)) | (1L << (GROUP - 114)) | (1L << (ASC - 114)) | (1L << (DESC - 114)) | (1L << (HAVING - 114)) | (1L << (LIMIT - 114)) | (1L << (OFFSET - 114)) | (1L << (ARRAY - 114)) | (1L << (LOCALTIME - 114)) | (1L << (LOCALTIMESTAMP - 114)) | (1L << (DEFAULT - 114)) | (1L << (DO - 114)) | (1L << (CURRENT_USER - 114)))) != 0) || ((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (CURRENT_DATE - 178)) | (1L << (CURRENT_TIME - 178)) | (1L << (CURRENT_TIMESTAMP - 178)) | (1L << (BOTH - 178)) | (1L << (LEADING - 178)) | (1L << (TRAILING - 178)) | (1L << (INTERSECT - 178)) | (1L << (EXCEPT - 178)) | (1L << (FETCH - 178)) | (1L << (WINDOW - 178)) | (1L << (SOME - 178)) | (1L << (END - 178)) | (1L << (CHECK - 178)) | (1L << (REFERENCES - 178)) | (1L << (USER - 178)) | (1L << (COLLATE - 178)))) != 0) || ((((_la - 242)) & ~0x3f) == 0 && ((1L << (_la - 242)) & ((1L << (DEFERRABLE - 242)) | (1L << (INITIALLY - 242)) | (1L << (ONLY - 242)) | (1L << (SESSION_USER - 242)))) != 0) || ((((_la - 355)) & ~0x3f) == 0 && ((1L << (_la - 355)) & ((1L << (CURRENT_ROLE - 355)) | (1L << (CURRENT_CATALOG - 355)) | (1L << (SYMMETRIC - 355)) | (1L << (ASYMMETRIC - 355)) | (1L << (VARIADIC - 355)) | (1L << (PLACING - 355)) | (1L << (RETURNING - 355)) | (1L << (LATERAL - 355)) | (1L << (ANALYSE - 355)) | (1L << (ANALYZE - 355)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumberLiteralsContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode MINUS_() { return getToken(DDLStatementParser.MINUS_, 0); }
		public LiteralsTypeContext literalsType() {
			return getRuleContext(LiteralsTypeContext.class,0);
		}
		public NumberLiteralsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberLiterals; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNumberLiterals(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNumberLiterals(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNumberLiterals(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumberLiteralsContext numberLiterals() throws RecognitionException {
		NumberLiteralsContext _localctx = new NumberLiteralsContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_numberLiterals);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5692);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MINUS_) {
				{
				setState(5691);
				match(MINUS_);
				}
			}

			setState(5694);
			match(NUMBER_);
			setState(5696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE_CAST_) {
				{
				setState(5695);
				literalsType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LiteralsTypeContext extends ParserRuleContext {
		public TerminalNode TYPE_CAST_() { return getToken(DDLStatementParser.TYPE_CAST_, 0); }
		public TerminalNode IDENTIFIER_() { return getToken(DDLStatementParser.IDENTIFIER_, 0); }
		public LiteralsTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_literalsType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterLiteralsType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitLiteralsType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitLiteralsType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LiteralsTypeContext literalsType() throws RecognitionException {
		LiteralsTypeContext _localctx = new LiteralsTypeContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_literalsType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5698);
			match(TYPE_CAST_);
			setState(5699);
			match(IDENTIFIER_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode IDENTIFIER_() { return getToken(DDLStatementParser.IDENTIFIER_, 0); }
		public UnicodeEscapesContext unicodeEscapes() {
			return getRuleContext(UnicodeEscapesContext.class,0);
		}
		public UescapeContext uescape() {
			return getRuleContext(UescapeContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_identifier);
		int _la;
		try {
			setState(5709);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(5702);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==T__0 || _la==T__1) {
					{
					setState(5701);
					unicodeEscapes();
					}
				}

				setState(5704);
				match(IDENTIFIER_);
				setState(5706);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
				case 1:
					{
					setState(5705);
					uescape();
					}
					break;
				}
				}
				break;
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5708);
				unreservedWord();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnicodeEscapesContext extends ParserRuleContext {
		public TerminalNode AMPERSAND_() { return getToken(DDLStatementParser.AMPERSAND_, 0); }
		public UnicodeEscapesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicodeEscapes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterUnicodeEscapes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitUnicodeEscapes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitUnicodeEscapes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnicodeEscapesContext unicodeEscapes() throws RecognitionException {
		UnicodeEscapesContext _localctx = new UnicodeEscapesContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_unicodeEscapes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5711);
			_la = _input.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5712);
			match(AMPERSAND_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UescapeContext extends ParserRuleContext {
		public TerminalNode UESCAPE() { return getToken(DDLStatementParser.UESCAPE, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public UescapeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uescape; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterUescape(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitUescape(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitUescape(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UescapeContext uescape() throws RecognitionException {
		UescapeContext _localctx = new UescapeContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_uescape);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5714);
			match(UESCAPE);
			setState(5715);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnreservedWordContext extends ParserRuleContext {
		public TerminalNode ABORT() { return getToken(DDLStatementParser.ABORT, 0); }
		public TerminalNode ABSOLUTE() { return getToken(DDLStatementParser.ABSOLUTE, 0); }
		public TerminalNode ACCESS() { return getToken(DDLStatementParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(DDLStatementParser.ACTION, 0); }
		public TerminalNode ADD() { return getToken(DDLStatementParser.ADD, 0); }
		public TerminalNode ADMIN() { return getToken(DDLStatementParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(DDLStatementParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(DDLStatementParser.AGGREGATE, 0); }
		public TerminalNode ALSO() { return getToken(DDLStatementParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(DDLStatementParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(DDLStatementParser.ALWAYS, 0); }
		public TerminalNode ASSERTION() { return getToken(DDLStatementParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(DDLStatementParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(DDLStatementParser.AT, 0); }
		public TerminalNode ATTACH() { return getToken(DDLStatementParser.ATTACH, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(DDLStatementParser.ATTRIBUTE, 0); }
		public TerminalNode BACKWARD() { return getToken(DDLStatementParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(DDLStatementParser.BEFORE, 0); }
		public TerminalNode BEGIN() { return getToken(DDLStatementParser.BEGIN, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public TerminalNode CACHE() { return getToken(DDLStatementParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(DDLStatementParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(DDLStatementParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(DDLStatementParser.CASCADED, 0); }
		public TerminalNode CATALOG() { return getToken(DDLStatementParser.CATALOG, 0); }
		public TerminalNode CHAIN() { return getToken(DDLStatementParser.CHAIN, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(DDLStatementParser.CHARACTERISTICS, 0); }
		public TerminalNode CHECKPOINT() { return getToken(DDLStatementParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(DDLStatementParser.CLASS, 0); }
		public TerminalNode CLOSE() { return getToken(DDLStatementParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(DDLStatementParser.CLUSTER, 0); }
		public TerminalNode COLUMNS() { return getToken(DDLStatementParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(DDLStatementParser.COMMENT, 0); }
		public TerminalNode COMMENTS() { return getToken(DDLStatementParser.COMMENTS, 0); }
		public TerminalNode COMMIT() { return getToken(DDLStatementParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(DDLStatementParser.COMMITTED, 0); }
		public TerminalNode CONFIGURATION() { return getToken(DDLStatementParser.CONFIGURATION, 0); }
		public TerminalNode CONFLICT() { return getToken(DDLStatementParser.CONFLICT, 0); }
		public TerminalNode CONNECTION() { return getToken(DDLStatementParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(DDLStatementParser.CONSTRAINTS, 0); }
		public TerminalNode CONTENT() { return getToken(DDLStatementParser.CONTENT, 0); }
		public TerminalNode CONTINUE() { return getToken(DDLStatementParser.CONTINUE, 0); }
		public TerminalNode CONVERSION() { return getToken(DDLStatementParser.CONVERSION, 0); }
		public TerminalNode COPY() { return getToken(DDLStatementParser.COPY, 0); }
		public TerminalNode COST() { return getToken(DDLStatementParser.COST, 0); }
		public TerminalNode CSV() { return getToken(DDLStatementParser.CSV, 0); }
		public TerminalNode CUBE() { return getToken(DDLStatementParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(DDLStatementParser.CURRENT, 0); }
		public TerminalNode CURSOR() { return getToken(DDLStatementParser.CURSOR, 0); }
		public TerminalNode CYCLE() { return getToken(DDLStatementParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(DDLStatementParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(DDLStatementParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(DDLStatementParser.DAY, 0); }
		public TerminalNode DEALLOCATE() { return getToken(DDLStatementParser.DEALLOCATE, 0); }
		public TerminalNode DECLARE() { return getToken(DDLStatementParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(DDLStatementParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(DDLStatementParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(DDLStatementParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(DDLStatementParser.DELETE, 0); }
		public TerminalNode DELIMITER() { return getToken(DDLStatementParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(DDLStatementParser.DELIMITERS, 0); }
		public TerminalNode DEPENDS() { return getToken(DDLStatementParser.DEPENDS, 0); }
		public TerminalNode DETACH() { return getToken(DDLStatementParser.DETACH, 0); }
		public TerminalNode DICTIONARY() { return getToken(DDLStatementParser.DICTIONARY, 0); }
		public TerminalNode DISABLE() { return getToken(DDLStatementParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(DDLStatementParser.DISCARD, 0); }
		public TerminalNode DOCUMENT() { return getToken(DDLStatementParser.DOCUMENT, 0); }
		public TerminalNode DOMAIN() { return getToken(DDLStatementParser.DOMAIN, 0); }
		public TerminalNode DOUBLE() { return getToken(DDLStatementParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(DDLStatementParser.DROP, 0); }
		public TerminalNode EACH() { return getToken(DDLStatementParser.EACH, 0); }
		public TerminalNode ENABLE() { return getToken(DDLStatementParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(DDLStatementParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(DDLStatementParser.ENCRYPTED, 0); }
		public TerminalNode ENUM() { return getToken(DDLStatementParser.ENUM, 0); }
		public TerminalNode ESCAPE() { return getToken(DDLStatementParser.ESCAPE, 0); }
		public TerminalNode EVENT() { return getToken(DDLStatementParser.EVENT, 0); }
		public TerminalNode EXCLUDE() { return getToken(DDLStatementParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(DDLStatementParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DDLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTE() { return getToken(DDLStatementParser.EXECUTE, 0); }
		public TerminalNode EXPLAIN() { return getToken(DDLStatementParser.EXPLAIN, 0); }
		public TerminalNode EXPRESSION() { return getToken(DDLStatementParser.EXPRESSION, 0); }
		public TerminalNode EXTENSION() { return getToken(DDLStatementParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(DDLStatementParser.EXTERNAL, 0); }
		public TerminalNode FAMILY() { return getToken(DDLStatementParser.FAMILY, 0); }
		public TerminalNode FILTER() { return getToken(DDLStatementParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(DDLStatementParser.FIRST, 0); }
		public TerminalNode FOLLOWING() { return getToken(DDLStatementParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(DDLStatementParser.FORCE, 0); }
		public TerminalNode FORWARD() { return getToken(DDLStatementParser.FORWARD, 0); }
		public TerminalNode FUNCTION() { return getToken(DDLStatementParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(DDLStatementParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(DDLStatementParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(DDLStatementParser.GLOBAL, 0); }
		public TerminalNode GRANTED() { return getToken(DDLStatementParser.GRANTED, 0); }
		public TerminalNode GROUPS() { return getToken(DDLStatementParser.GROUPS, 0); }
		public TerminalNode HANDLER() { return getToken(DDLStatementParser.HANDLER, 0); }
		public TerminalNode HEADER() { return getToken(DDLStatementParser.HEADER, 0); }
		public TerminalNode HOLD() { return getToken(DDLStatementParser.HOLD, 0); }
		public TerminalNode HOUR() { return getToken(DDLStatementParser.HOUR, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public TerminalNode IF() { return getToken(DDLStatementParser.IF, 0); }
		public TerminalNode IMMEDIATE() { return getToken(DDLStatementParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(DDLStatementParser.IMMUTABLE, 0); }
		public TerminalNode IMPLICIT() { return getToken(DDLStatementParser.IMPLICIT, 0); }
		public TerminalNode IMPORT() { return getToken(DDLStatementParser.IMPORT, 0); }
		public TerminalNode INCLUDE() { return getToken(DDLStatementParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(DDLStatementParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(DDLStatementParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(DDLStatementParser.INDEXES, 0); }
		public TerminalNode INHERIT() { return getToken(DDLStatementParser.INHERIT, 0); }
		public TerminalNode INHERITS() { return getToken(DDLStatementParser.INHERITS, 0); }
		public TerminalNode INLINE() { return getToken(DDLStatementParser.INLINE, 0); }
		public TerminalNode INPUT() { return getToken(DDLStatementParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(DDLStatementParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(DDLStatementParser.INSERT, 0); }
		public TerminalNode INSTEAD() { return getToken(DDLStatementParser.INSTEAD, 0); }
		public TerminalNode INVOKER() { return getToken(DDLStatementParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(DDLStatementParser.ISOLATION, 0); }
		public TerminalNode KEY() { return getToken(DDLStatementParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(DDLStatementParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public TerminalNode LARGE() { return getToken(DDLStatementParser.LARGE, 0); }
		public TerminalNode LAST() { return getToken(DDLStatementParser.LAST, 0); }
		public TerminalNode LEAKPROOF() { return getToken(DDLStatementParser.LEAKPROOF, 0); }
		public TerminalNode LEVEL() { return getToken(DDLStatementParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(DDLStatementParser.LISTEN, 0); }
		public TerminalNode LOAD() { return getToken(DDLStatementParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(DDLStatementParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(DDLStatementParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(DDLStatementParser.LOCK, 0); }
		public TerminalNode LOCKED() { return getToken(DDLStatementParser.LOCKED, 0); }
		public TerminalNode LOGGED() { return getToken(DDLStatementParser.LOGGED, 0); }
		public TerminalNode MAPPING() { return getToken(DDLStatementParser.MAPPING, 0); }
		public TerminalNode MATCH() { return getToken(DDLStatementParser.MATCH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode MAXVALUE() { return getToken(DDLStatementParser.MAXVALUE, 0); }
		public TerminalNode METHOD() { return getToken(DDLStatementParser.METHOD, 0); }
		public TerminalNode MINUTE() { return getToken(DDLStatementParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(DDLStatementParser.MINVALUE, 0); }
		public TerminalNode MODE() { return getToken(DDLStatementParser.MODE, 0); }
		public TerminalNode MONTH() { return getToken(DDLStatementParser.MONTH, 0); }
		public TerminalNode MOVE() { return getToken(DDLStatementParser.MOVE, 0); }
		public TerminalNode NAME() { return getToken(DDLStatementParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(DDLStatementParser.NAMES, 0); }
		public TerminalNode NEW() { return getToken(DDLStatementParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(DDLStatementParser.NEXT, 0); }
		public TerminalNode NFC() { return getToken(DDLStatementParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(DDLStatementParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(DDLStatementParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(DDLStatementParser.NFKD, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode NORMALIZED() { return getToken(DDLStatementParser.NORMALIZED, 0); }
		public TerminalNode NOTHING() { return getToken(DDLStatementParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(DDLStatementParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(DDLStatementParser.NOWAIT, 0); }
		public TerminalNode NULLS() { return getToken(DDLStatementParser.NULLS, 0); }
		public TerminalNode OBJECT() { return getToken(DDLStatementParser.OBJECT, 0); }
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public TerminalNode OFF() { return getToken(DDLStatementParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(DDLStatementParser.OIDS, 0); }
		public TerminalNode OLD() { return getToken(DDLStatementParser.OLD, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(DDLStatementParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(DDLStatementParser.OPTIONS, 0); }
		public TerminalNode ORDINALITY() { return getToken(DDLStatementParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(DDLStatementParser.OTHERS, 0); }
		public TerminalNode OVER() { return getToken(DDLStatementParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(DDLStatementParser.OVERRIDING, 0); }
		public TerminalNode OWNED() { return getToken(DDLStatementParser.OWNED, 0); }
		public TerminalNode OWNER() { return getToken(DDLStatementParser.OWNER, 0); }
		public TerminalNode PARALLEL() { return getToken(DDLStatementParser.PARALLEL, 0); }
		public TerminalNode PARSER() { return getToken(DDLStatementParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(DDLStatementParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(DDLStatementParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(DDLStatementParser.PASSING, 0); }
		public TerminalNode PASSWORD() { return getToken(DDLStatementParser.PASSWORD, 0); }
		public TerminalNode PLANS() { return getToken(DDLStatementParser.PLANS, 0); }
		public TerminalNode POLICY() { return getToken(DDLStatementParser.POLICY, 0); }
		public TerminalNode PRECEDING() { return getToken(DDLStatementParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(DDLStatementParser.PREPARE, 0); }
		public TerminalNode PREPARED() { return getToken(DDLStatementParser.PREPARED, 0); }
		public TerminalNode PRESERVE() { return getToken(DDLStatementParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(DDLStatementParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(DDLStatementParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(DDLStatementParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(DDLStatementParser.PROCEDURE, 0); }
		public TerminalNode PROCEDURES() { return getToken(DDLStatementParser.PROCEDURES, 0); }
		public TerminalNode PROGRAM() { return getToken(DDLStatementParser.PROGRAM, 0); }
		public TerminalNode PUBLICATION() { return getToken(DDLStatementParser.PUBLICATION, 0); }
		public TerminalNode QUOTE() { return getToken(DDLStatementParser.QUOTE, 0); }
		public TerminalNode RANGE() { return getToken(DDLStatementParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(DDLStatementParser.READ, 0); }
		public TerminalNode REASSIGN() { return getToken(DDLStatementParser.REASSIGN, 0); }
		public TerminalNode RECHECK() { return getToken(DDLStatementParser.RECHECK, 0); }
		public TerminalNode RECURSIVE() { return getToken(DDLStatementParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(DDLStatementParser.REF, 0); }
		public TerminalNode REFERENCING() { return getToken(DDLStatementParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(DDLStatementParser.REFRESH, 0); }
		public TerminalNode REINDEX() { return getToken(DDLStatementParser.REINDEX, 0); }
		public TerminalNode RELATIVE() { return getToken(DDLStatementParser.RELATIVE, 0); }
		public TerminalNode RELEASE() { return getToken(DDLStatementParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(DDLStatementParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(DDLStatementParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(DDLStatementParser.REPLACE, 0); }
		public TerminalNode REPLICA() { return getToken(DDLStatementParser.REPLICA, 0); }
		public TerminalNode RESET() { return getToken(DDLStatementParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(DDLStatementParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public TerminalNode RETURNS() { return getToken(DDLStatementParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(DDLStatementParser.REVOKE, 0); }
		public TerminalNode ROLE() { return getToken(DDLStatementParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(DDLStatementParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(DDLStatementParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(DDLStatementParser.ROUTINE, 0); }
		public TerminalNode ROUTINES() { return getToken(DDLStatementParser.ROUTINES, 0); }
		public TerminalNode ROWS() { return getToken(DDLStatementParser.ROWS, 0); }
		public TerminalNode RULE() { return getToken(DDLStatementParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(DDLStatementParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(DDLStatementParser.SCHEMAS, 0); }
		public TerminalNode SCROLL() { return getToken(DDLStatementParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(DDLStatementParser.SEARCH, 0); }
		public TerminalNode SECOND() { return getToken(DDLStatementParser.SECOND, 0); }
		public TerminalNode SECURITY() { return getToken(DDLStatementParser.SECURITY, 0); }
		public TerminalNode SEQUENCE() { return getToken(DDLStatementParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(DDLStatementParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(DDLStatementParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(DDLStatementParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(DDLStatementParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode SETS() { return getToken(DDLStatementParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(DDLStatementParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(DDLStatementParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(DDLStatementParser.SIMPLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(DDLStatementParser.SNAPSHOT, 0); }
		public TerminalNode SQL() { return getToken(DDLStatementParser.SQL, 0); }
		public TerminalNode STABLE() { return getToken(DDLStatementParser.STABLE, 0); }
		public TerminalNode STANDALONE() { return getToken(DDLStatementParser.STANDALONE, 0); }
		public TerminalNode START() { return getToken(DDLStatementParser.START, 0); }
		public TerminalNode STATEMENT() { return getToken(DDLStatementParser.STATEMENT, 0); }
		public TerminalNode STATISTICS() { return getToken(DDLStatementParser.STATISTICS, 0); }
		public TerminalNode STDIN() { return getToken(DDLStatementParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(DDLStatementParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(DDLStatementParser.STORAGE, 0); }
		public TerminalNode STORED() { return getToken(DDLStatementParser.STORED, 0); }
		public TerminalNode STRICT() { return getToken(DDLStatementParser.STRICT, 0); }
		public TerminalNode STRIP() { return getToken(DDLStatementParser.STRIP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(DDLStatementParser.SUBSCRIPTION, 0); }
		public TerminalNode SUPPORT() { return getToken(DDLStatementParser.SUPPORT, 0); }
		public TerminalNode SYSID() { return getToken(DDLStatementParser.SYSID, 0); }
		public TerminalNode SYSTEM() { return getToken(DDLStatementParser.SYSTEM, 0); }
		public TerminalNode TABLES() { return getToken(DDLStatementParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public TerminalNode TEMP() { return getToken(DDLStatementParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(DDLStatementParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(DDLStatementParser.TEMPORARY, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode TIES() { return getToken(DDLStatementParser.TIES, 0); }
		public TerminalNode TRANSACTION() { return getToken(DDLStatementParser.TRANSACTION, 0); }
		public TerminalNode TRANSFORM() { return getToken(DDLStatementParser.TRANSFORM, 0); }
		public TerminalNode TRIGGER() { return getToken(DDLStatementParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(DDLStatementParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(DDLStatementParser.TRUSTED, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TerminalNode TYPES() { return getToken(DDLStatementParser.TYPES, 0); }
		public TerminalNode UESCAPE() { return getToken(DDLStatementParser.UESCAPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(DDLStatementParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(DDLStatementParser.UNCOMMITTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(DDLStatementParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(DDLStatementParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(DDLStatementParser.UNLISTEN, 0); }
		public TerminalNode UNLOGGED() { return getToken(DDLStatementParser.UNLOGGED, 0); }
		public TerminalNode UNTIL() { return getToken(DDLStatementParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public TerminalNode VACUUM() { return getToken(DDLStatementParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(DDLStatementParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(DDLStatementParser.VALIDATE, 0); }
		public TerminalNode VALIDATOR() { return getToken(DDLStatementParser.VALIDATOR, 0); }
		public TerminalNode VALUE() { return getToken(DDLStatementParser.VALUE, 0); }
		public TerminalNode VARYING() { return getToken(DDLStatementParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(DDLStatementParser.VERSION, 0); }
		public TerminalNode VIEW() { return getToken(DDLStatementParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(DDLStatementParser.VIEWS, 0); }
		public TerminalNode VOLATILE() { return getToken(DDLStatementParser.VOLATILE, 0); }
		public TerminalNode WHITESPACE() { return getToken(DDLStatementParser.WHITESPACE, 0); }
		public TerminalNode WITHIN() { return getToken(DDLStatementParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(DDLStatementParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(DDLStatementParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(DDLStatementParser.WRAPPER, 0); }
		public TerminalNode WRITE() { return getToken(DDLStatementParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(DDLStatementParser.XML, 0); }
		public TerminalNode YEAR() { return getToken(DDLStatementParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(DDLStatementParser.YES, 0); }
		public TerminalNode ZONE() { return getToken(DDLStatementParser.ZONE, 0); }
		public UnreservedWordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unreservedWord; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterUnreservedWord(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitUnreservedWord(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitUnreservedWord(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnreservedWordContext unreservedWord() throws RecognitionException {
		UnreservedWordContext _localctx = new UnreservedWordContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_unreservedWord);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5717);
			_la = _input.LA(1);
			if ( !(((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (INSERT - 51)) | (1L << (UPDATE - 51)) | (1L << (DELETE - 51)) | (1L << (ALTER - 51)) | (1L << (DROP - 51)) | (1L << (TRUNCATE - 51)) | (1L << (SCHEMA - 51)) | (1L << (REVOKE - 51)) | (1L << (ADD - 51)) | (1L << (SET - 51)) | (1L << (INDEX - 51)) | (1L << (KEY - 51)) | (1L << (FUNCTION - 51)) | (1L << (TRIGGER - 51)) | (1L << (PROCEDURE - 51)) | (1L << (VIEW - 51)) | (1L << (IF - 51)))) != 0) || ((((_la - 120)) & ~0x3f) == 0 && ((1L << (_la - 120)) & ((1L << (BY - 120)) | (1L << (BEGIN - 120)) | (1L << (COMMIT - 120)) | (1L << (ROLLBACK - 120)) | (1L << (SAVEPOINT - 120)) | (1L << (DOUBLE - 120)) | (1L << (YEAR - 120)) | (1L << (MONTH - 120)) | (1L << (DAY - 120)) | (1L << (HOUR - 120)) | (1L << (MINUTE - 120)) | (1L << (SECOND - 120)) | (1L << (CURRENT - 120)) | (1L << (ENABLE - 120)) | (1L << (DISABLE - 120)) | (1L << (CALL - 120)) | (1L << (PRESERVE - 120)) | (1L << (DEFINER - 120)) | (1L << (SQL - 120)) | (1L << (CASCADED - 120)) | (1L << (LOCAL - 120)) | (1L << (CLOSE - 120)) | (1L << (NEXT - 120)) | (1L << (NAME - 120)) | (1L << (NAMES - 120)) | (1L << (TYPE - 120)) | (1L << (TEXT - 120)) | (1L << (REPEATABLE - 120)) | (1L << (VARYING - 120)))) != 0) || ((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & ((1L << (VALUE - 185)) | (1L << (TIES - 185)) | (1L << (CUBE - 185)) | (1L << (SETS - 185)) | (1L << (OTHERS - 185)) | (1L << (AT - 185)) | (1L << (ADMIN - 185)) | (1L << (ESCAPE - 185)) | (1L << (EXCLUDE - 185)) | (1L << (PARTITION - 185)) | (1L << (UNKNOWN - 185)) | (1L << (ALWAYS - 185)) | (1L << (CASCADE - 185)) | (1L << (GENERATED - 185)) | (1L << (ISOLATION - 185)) | (1L << (LEVEL - 185)) | (1L << (NO - 185)) | (1L << (OPTION - 185)) | (1L << (PRIVILEGES - 185)) | (1L << (READ - 185)) | (1L << (ROLE - 185)) | (1L << (ROWS - 185)) | (1L << (START - 185)) | (1L << (TRANSACTION - 185)) | (1L << (ACTION - 185)) | (1L << (CACHE - 185)) | (1L << (CHARACTERISTICS - 185)) | (1L << (CLUSTER - 185)) | (1L << (COMMENTS - 185)) | (1L << (CONSTRAINTS - 185)) | (1L << (CYCLE - 185)) | (1L << (DATA - 185)) | (1L << (DATABASE - 185)) | (1L << (DEFAULTS - 185)) | (1L << (DEFERRED - 185)) | (1L << (DEPENDS - 185)) | (1L << (DOMAIN - 185)) | (1L << (EXCLUDING - 185)) | (1L << (EXECUTE - 185)))) != 0) || ((((_la - 249)) & ~0x3f) == 0 && ((1L << (_la - 249)) & ((1L << (EXTENSION - 249)) | (1L << (EXTERNAL - 249)) | (1L << (FILTER - 249)) | (1L << (FIRST - 249)) | (1L << (FOLLOWING - 249)) | (1L << (FORCE - 249)) | (1L << (GLOBAL - 249)) | (1L << (IDENTITY - 249)) | (1L << (IMMEDIATE - 249)) | (1L << (INCLUDING - 249)) | (1L << (INCREMENT - 249)) | (1L << (INDEXES - 249)) | (1L << (INHERIT - 249)) | (1L << (INHERITS - 249)) | (1L << (INCLUDE - 249)) | (1L << (LANGUAGE - 249)) | (1L << (LARGE - 249)) | (1L << (LAST - 249)) | (1L << (LOGGED - 249)) | (1L << (MATCH - 249)) | (1L << (MAXVALUE - 249)) | (1L << (MINVALUE - 249)) | (1L << (NOTHING - 249)) | (1L << (NULLS - 249)) | (1L << (OBJECT - 249)) | (1L << (OIDS - 249)) | (1L << (OVER - 249)) | (1L << (OWNED - 249)) | (1L << (OWNER - 249)) | (1L << (PARTIAL - 249)) | (1L << (PRECEDING - 249)) | (1L << (RANGE - 249)) | (1L << (RENAME - 249)) | (1L << (REPLICA - 249)) | (1L << (RESET - 249)) | (1L << (RESTART - 249)) | (1L << (RESTRICT - 249)) | (1L << (ROUTINE - 249)) | (1L << (RULE - 249)) | (1L << (SECURITY - 249)) | (1L << (SEQUENCE - 249)) | (1L << (SESSION - 249)) | (1L << (SHOW - 249)) | (1L << (SIMPLE - 249)) | (1L << (STATISTICS - 249)) | (1L << (STORAGE - 249)) | (1L << (TABLESPACE - 249)) | (1L << (TEMP - 249)) | (1L << (TEMPORARY - 249)) | (1L << (UNBOUNDED - 249)) | (1L << (UNLOGGED - 249)) | (1L << (VALID - 249)) | (1L << (VALIDATE - 249)) | (1L << (WITHIN - 249)) | (1L << (WITHOUT - 249)) | (1L << (ZONE - 249)) | (1L << (OF - 249)))) != 0) || ((((_la - 313)) & ~0x3f) == 0 && ((1L << (_la - 313)) & ((1L << (UESCAPE - 313)) | (1L << (GROUPS - 313)) | (1L << (RECURSIVE - 313)) | (1L << (ENUM - 313)) | (1L << (XML - 313)) | (1L << (ORDINALITY - 313)) | (1L << (NFC - 313)) | (1L << (NFD - 313)) | (1L << (NFKC - 313)) | (1L << (NFKD - 313)) | (1L << (REF - 313)) | (1L << (PASSING - 313)))) != 0) || ((((_la - 377)) & ~0x3f) == 0 && ((1L << (_la - 377)) & ((1L << (VERSION - 377)) | (1L << (YES - 377)) | (1L << (STANDALONE - 377)) | (1L << (MATERIALIZED - 377)) | (1L << (OPERATOR - 377)) | (1L << (SHARE - 377)) | (1L << (ROLLUP - 377)) | (1L << (DOCUMENT - 377)) | (1L << (NORMALIZED - 377)) | (1L << (NOWAIT - 377)) | (1L << (LOCKED - 377)) | (1L << (COLUMNS - 377)) | (1L << (CONTENT - 377)) | (1L << (STRIP - 377)) | (1L << (WHITESPACE - 377)) | (1L << (CONFLICT - 377)) | (1L << (OVERRIDING - 377)) | (1L << (SYSTEM - 377)) | (1L << (ABORT - 377)) | (1L << (ABSOLUTE - 377)) | (1L << (ACCESS - 377)) | (1L << (AFTER - 377)) | (1L << (AGGREGATE - 377)) | (1L << (ALSO - 377)) | (1L << (ATTACH - 377)) | (1L << (ATTRIBUTE - 377)) | (1L << (BACKWARD - 377)) | (1L << (BEFORE - 377)) | (1L << (ASSERTION - 377)) | (1L << (ASSIGNMENT - 377)) | (1L << (CONTINUE - 377)) | (1L << (CONVERSION - 377)) | (1L << (COPY - 377)) | (1L << (COST - 377)) | (1L << (CSV - 377)) | (1L << (CALLED - 377)) | (1L << (CATALOG - 377)) | (1L << (CHAIN - 377)) | (1L << (CHECKPOINT - 377)) | (1L << (CLASS - 377)) | (1L << (CONFIGURATION - 377)) | (1L << (COMMENT - 377)) | (1L << (DETACH - 377)) | (1L << (DICTIONARY - 377)) | (1L << (EXPRESSION - 377)) | (1L << (INSENSITIVE - 377)) | (1L << (DISCARD - 377)))) != 0) || ((((_la - 441)) & ~0x3f) == 0 && ((1L << (_la - 441)) & ((1L << (OFF - 441)) | (1L << (INSTEAD - 441)) | (1L << (EXPLAIN - 441)) | (1L << (INPUT - 441)) | (1L << (INLINE - 441)) | (1L << (PARALLEL - 441)) | (1L << (LEAKPROOF - 441)) | (1L << (COMMITTED - 441)) | (1L << (ENCODING - 441)) | (1L << (IMPLICIT - 441)) | (1L << (DELIMITER - 441)) | (1L << (CURSOR - 441)) | (1L << (EACH - 441)) | (1L << (EVENT - 441)) | (1L << (DEALLOCATE - 441)) | (1L << (CONNECTION - 441)) | (1L << (DECLARE - 441)) | (1L << (FAMILY - 441)) | (1L << (FORWARD - 441)) | (1L << (EXCLUSIVE - 441)) | (1L << (FUNCTIONS - 441)) | (1L << (LOCATION - 441)) | (1L << (LABEL - 441)) | (1L << (DELIMITERS - 441)) | (1L << (HANDLER - 441)) | (1L << (HEADER - 441)) | (1L << (IMMUTABLE - 441)) | (1L << (GRANTED - 441)) | (1L << (HOLD - 441)) | (1L << (MAPPING - 441)) | (1L << (OLD - 441)) | (1L << (METHOD - 441)) | (1L << (LOAD - 441)) | (1L << (LISTEN - 441)) | (1L << (MODE - 441)) | (1L << (MOVE - 441)) | (1L << (PROCEDURAL - 441)) | (1L << (PARSER - 441)) | (1L << (PROCEDURES - 441)) | (1L << (ENCRYPTED - 441)) | (1L << (PUBLICATION - 441)) | (1L << (PROGRAM - 441)) | (1L << (REFERENCING - 441)) | (1L << (PLANS - 441)) | (1L << (REINDEX - 441)) | (1L << (PRIOR - 441)) | (1L << (PASSWORD - 441)) | (1L << (RELATIVE - 441)) | (1L << (QUOTE - 441)) | (1L << (ROUTINES - 441)) | (1L << (REPLACE - 441)) | (1L << (SNAPSHOT - 441)) | (1L << (REFRESH - 441)) | (1L << (PREPARE - 441)) | (1L << (OPTIONS - 441)) | (1L << (IMPORT - 441)) | (1L << (INVOKER - 441)) | (1L << (NEW - 441)) | (1L << (PREPARED - 441)) | (1L << (SCROLL - 441)) | (1L << (SEQUENCES - 441)) | (1L << (SYSID - 441)) | (1L << (REASSIGN - 441)) | (1L << (SERVER - 441)))) != 0) || ((((_la - 505)) & ~0x3f) == 0 && ((1L << (_la - 505)) & ((1L << (SUBSCRIPTION - 505)) | (1L << (SEARCH - 505)) | (1L << (SCHEMAS - 505)) | (1L << (RECHECK - 505)) | (1L << (POLICY - 505)) | (1L << (NOTIFY - 505)) | (1L << (LOCK - 505)) | (1L << (RELEASE - 505)) | (1L << (SERIALIZABLE - 505)) | (1L << (RETURNS - 505)) | (1L << (STATEMENT - 505)) | (1L << (STDIN - 505)) | (1L << (STDOUT - 505)) | (1L << (TABLES - 505)) | (1L << (SUPPORT - 505)) | (1L << (STABLE - 505)) | (1L << (TEMPLATE - 505)) | (1L << (UNENCRYPTED - 505)) | (1L << (VIEWS - 505)) | (1L << (UNCOMMITTED - 505)) | (1L << (TRANSFORM - 505)) | (1L << (UNLISTEN - 505)) | (1L << (TRUSTED - 505)) | (1L << (VALIDATOR - 505)) | (1L << (UNTIL - 505)) | (1L << (VACUUM - 505)) | (1L << (VOLATILE - 505)) | (1L << (STORED - 505)) | (1L << (WRITE - 505)) | (1L << (STRICT - 505)) | (1L << (TYPES - 505)) | (1L << (WRAPPER - 505)) | (1L << (WORK - 505)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeFuncNameKeywordContext extends ParserRuleContext {
		public TerminalNode AUTHORIZATION() { return getToken(DDLStatementParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(DDLStatementParser.BINARY, 0); }
		public TerminalNode COLLATION() { return getToken(DDLStatementParser.COLLATION, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(DDLStatementParser.CONCURRENTLY, 0); }
		public TerminalNode CROSS() { return getToken(DDLStatementParser.CROSS, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(DDLStatementParser.CURRENT_SCHEMA, 0); }
		public TerminalNode FREEZE() { return getToken(DDLStatementParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(DDLStatementParser.FULL, 0); }
		public TerminalNode ILIKE() { return getToken(DDLStatementParser.ILIKE, 0); }
		public TerminalNode INNER() { return getToken(DDLStatementParser.INNER, 0); }
		public TerminalNode IS() { return getToken(DDLStatementParser.IS, 0); }
		public TerminalNode ISNULL() { return getToken(DDLStatementParser.ISNULL, 0); }
		public TerminalNode JOIN() { return getToken(DDLStatementParser.JOIN, 0); }
		public TerminalNode LEFT() { return getToken(DDLStatementParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(DDLStatementParser.LIKE, 0); }
		public TerminalNode NATURAL() { return getToken(DDLStatementParser.NATURAL, 0); }
		public TerminalNode NOTNULL() { return getToken(DDLStatementParser.NOTNULL, 0); }
		public TerminalNode OUTER() { return getToken(DDLStatementParser.OUTER, 0); }
		public TerminalNode OVERLAPS() { return getToken(DDLStatementParser.OVERLAPS, 0); }
		public TerminalNode RIGHT() { return getToken(DDLStatementParser.RIGHT, 0); }
		public TerminalNode SIMILAR() { return getToken(DDLStatementParser.SIMILAR, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(DDLStatementParser.TABLESAMPLE, 0); }
		public TerminalNode VERBOSE() { return getToken(DDLStatementParser.VERBOSE, 0); }
		public TypeFuncNameKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeFuncNameKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTypeFuncNameKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTypeFuncNameKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTypeFuncNameKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeFuncNameKeywordContext typeFuncNameKeyword() throws RecognitionException {
		TypeFuncNameKeywordContext _localctx = new TypeFuncNameKeywordContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_typeFuncNameKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5719);
			_la = _input.LA(1);
			if ( !(((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (NATURAL - 88)) | (1L << (JOIN - 88)) | (1L << (FULL - 88)) | (1L << (INNER - 88)) | (1L << (OUTER - 88)) | (1L << (LEFT - 88)) | (1L << (RIGHT - 88)) | (1L << (CROSS - 88)) | (1L << (IS - 88)) | (1L << (LIKE - 88)))) != 0) || ((((_la - 167)) & ~0x3f) == 0 && ((1L << (_la - 167)) & ((1L << (COLLATION - 167)) | (1L << (OVERLAPS - 167)) | (1L << (BINARY - 167)))) != 0) || _la==CONCURRENTLY || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (TABLESAMPLE - 353)) | (1L << (CURRENT_SCHEMA - 353)) | (1L << (ILIKE - 353)) | (1L << (SIMILAR - 353)) | (1L << (ISNULL - 353)) | (1L << (NOTNULL - 353)))) != 0) || ((((_la - 538)) & ~0x3f) == 0 && ((1L << (_la - 538)) & ((1L << (FREEZE - 538)) | (1L << (AUTHORIZATION - 538)) | (1L << (VERBOSE - 538)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSchemaName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSchemaName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5721);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DDLStatementParser.DOT_, 0); }
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5726);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				{
				setState(5723);
				owner();
				setState(5724);
				match(DOT_);
				}
				break;
			}
			setState(5728);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OwnerContext owner() {
			return getRuleContext(OwnerContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DDLStatementParser.DOT_, 0); }
		public ColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNameContext columnName() throws RecognitionException {
		ColumnNameContext _localctx = new ColumnNameContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_columnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5733);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
			case 1:
				{
				setState(5730);
				owner();
				setState(5731);
				match(DOT_);
				}
				break;
			}
			setState(5735);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_owner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOwner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerContext owner() throws RecognitionException {
		OwnerContext _localctx = new OwnerContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_owner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5737);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameContext name() throws RecognitionException {
		NameContext _localctx = new NameContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5739);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNamesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TableNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNamesContext tableNames() throws RecognitionException {
		TableNamesContext _localctx = new TableNamesContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_tableNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5742);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LP_) {
				{
				setState(5741);
				match(LP_);
				}
			}

			setState(5744);
			tableName();
			setState(5749);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5745);
				match(COMMA_);
				setState(5746);
				tableName();
				}
				}
				setState(5751);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5753);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RP_) {
				{
				setState(5752);
				match(RP_);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnNamesContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<ColumnNameContext> columnName() {
			return getRuleContexts(ColumnNameContext.class);
		}
		public ColumnNameContext columnName(int i) {
			return getRuleContext(ColumnNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public ColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnNamesContext columnNames() throws RecognitionException {
		ColumnNamesContext _localctx = new ColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_columnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5755);
			match(LP_);
			setState(5756);
			columnName();
			setState(5761);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(5757);
				match(COMMA_);
				setState(5758);
				columnName();
				}
				}
				setState(5763);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5764);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_collationName);
		try {
			setState(5768);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(5766);
				match(STRING_);
				}
				break;
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(5767);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexNameContext indexName() throws RecognitionException {
		IndexNameContext _localctx = new IndexNameContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_indexName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5770);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasContext alias() throws RecognitionException {
		AliasContext _localctx = new AliasContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5772);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrimaryKeyContext extends ParserRuleContext {
		public TerminalNode KEY() { return getToken(DDLStatementParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(DDLStatementParser.PRIMARY, 0); }
		public PrimaryKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primaryKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPrimaryKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPrimaryKey(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPrimaryKey(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrimaryKeyContext primaryKey() throws RecognitionException {
		PrimaryKeyContext _localctx = new PrimaryKeyContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_primaryKey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5775);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIMARY) {
				{
				setState(5774);
				match(PRIMARY);
				}
			}

			setState(5777);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode OR() { return getToken(DDLStatementParser.OR, 0); }
		public TerminalNode OR_() { return getToken(DDLStatementParser.OR_, 0); }
		public TerminalNode AND() { return getToken(DDLStatementParser.AND, 0); }
		public TerminalNode AND_() { return getToken(DDLStatementParser.AND_, 0); }
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_logicalOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5779);
			_la = _input.LA(1);
			if ( !(_la==AND_ || _la==OR_ || _la==AND || _la==OR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public TerminalNode GTE_() { return getToken(DDLStatementParser.GTE_, 0); }
		public TerminalNode GT_() { return getToken(DDLStatementParser.GT_, 0); }
		public TerminalNode LTE_() { return getToken(DDLStatementParser.LTE_, 0); }
		public TerminalNode LT_() { return getToken(DDLStatementParser.LT_, 0); }
		public TerminalNode NEQ_() { return getToken(DDLStatementParser.NEQ_, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_comparisonOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5781);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorNameContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public CursorNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCursorName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCursorName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCursorName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorNameContext cursorName() throws RecognitionException {
		CursorNameContext _localctx = new CursorNameContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_cursorName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5783);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AExprContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public TerminalNode PLUS_() { return getToken(DDLStatementParser.PLUS_, 0); }
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public TerminalNode MINUS_() { return getToken(DDLStatementParser.MINUS_, 0); }
		public QualOpContext qualOp() {
			return getRuleContext(QualOpContext.class,0);
		}
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public List<RowContext> row() {
			return getRuleContexts(RowContext.class);
		}
		public RowContext row(int i) {
			return getRuleContext(RowContext.class,i);
		}
		public TerminalNode OVERLAPS() { return getToken(DDLStatementParser.OVERLAPS, 0); }
		public TerminalNode UNIQUE() { return getToken(DDLStatementParser.UNIQUE, 0); }
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode AT() { return getToken(DDLStatementParser.AT, 0); }
		public TerminalNode TIME() { return getToken(DDLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(DDLStatementParser.ZONE, 0); }
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TerminalNode SLASH_() { return getToken(DDLStatementParser.SLASH_, 0); }
		public TerminalNode MOD_() { return getToken(DDLStatementParser.MOD_, 0); }
		public TerminalNode CARET_() { return getToken(DDLStatementParser.CARET_, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(DDLStatementParser.LIKE, 0); }
		public TerminalNode ESCAPE() { return getToken(DDLStatementParser.ESCAPE, 0); }
		public TerminalNode ILIKE() { return getToken(DDLStatementParser.ILIKE, 0); }
		public TerminalNode SIMILAR() { return getToken(DDLStatementParser.SIMILAR, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode IS() { return getToken(DDLStatementParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(DDLStatementParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode BETWEEN() { return getToken(DDLStatementParser.BETWEEN, 0); }
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode AND() { return getToken(DDLStatementParser.AND, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(DDLStatementParser.ASYMMETRIC, 0); }
		public TerminalNode SYMMETRIC() { return getToken(DDLStatementParser.SYMMETRIC, 0); }
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public TerminalNode TYPE_CAST_() { return getToken(DDLStatementParser.TYPE_CAST_, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(DDLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode ISNULL() { return getToken(DDLStatementParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(DDLStatementParser.NOTNULL, 0); }
		public TerminalNode TRUE() { return getToken(DDLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(DDLStatementParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(DDLStatementParser.UNKNOWN, 0); }
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public InExprContext inExpr() {
			return getRuleContext(InExprContext.class,0);
		}
		public SubqueryOpContext subqueryOp() {
			return getRuleContext(SubqueryOpContext.class,0);
		}
		public SubTypeContext subType() {
			return getRuleContext(SubTypeContext.class,0);
		}
		public TerminalNode DOCUMENT() { return getToken(DDLStatementParser.DOCUMENT, 0); }
		public TerminalNode NORMALIZED() { return getToken(DDLStatementParser.NORMALIZED, 0); }
		public UnicodeNormalFormContext unicodeNormalForm() {
			return getRuleContext(UnicodeNormalFormContext.class,0);
		}
		public AExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AExprContext aExpr() throws RecognitionException {
		return aExpr(0);
	}

	private AExprContext aExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AExprContext _localctx = new AExprContext(_ctx, _parentState);
		AExprContext _prevctx = _localctx;
		int _startState = 766;
		enterRecursionRule(_localctx, 766, RULE_aExpr, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5803);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
			case 1:
				{
				setState(5786);
				cExpr();
				}
				break;
			case 2:
				{
				setState(5787);
				match(PLUS_);
				setState(5788);
				aExpr(57);
				}
				break;
			case 3:
				{
				setState(5789);
				match(MINUS_);
				setState(5790);
				aExpr(56);
				}
				break;
			case 4:
				{
				setState(5791);
				qualOp();
				setState(5792);
				aExpr(47);
				}
				break;
			case 5:
				{
				setState(5794);
				match(NOT);
				setState(5795);
				aExpr(45);
				}
				break;
			case 6:
				{
				setState(5796);
				row();
				setState(5797);
				match(OVERLAPS);
				setState(5798);
				row();
				}
				break;
			case 7:
				{
				setState(5800);
				match(UNIQUE);
				setState(5801);
				selectWithParens();
				}
				break;
			case 8:
				{
				setState(5802);
				match(DEFAULT);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6050);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,532,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6048);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
					case 1:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5805);
						if (!(precpred(_ctx, 58))) throw new FailedPredicateException(this, "precpred(_ctx, 58)");
						setState(5806);
						match(AT);
						setState(5807);
						match(TIME);
						setState(5808);
						match(ZONE);
						setState(5809);
						aExpr(59);
						}
						break;
					case 2:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5810);
						if (!(precpred(_ctx, 55))) throw new FailedPredicateException(this, "precpred(_ctx, 55)");
						setState(5811);
						match(PLUS_);
						setState(5812);
						aExpr(56);
						}
						break;
					case 3:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5813);
						if (!(precpred(_ctx, 54))) throw new FailedPredicateException(this, "precpred(_ctx, 54)");
						setState(5814);
						match(MINUS_);
						setState(5815);
						aExpr(55);
						}
						break;
					case 4:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5816);
						if (!(precpred(_ctx, 53))) throw new FailedPredicateException(this, "precpred(_ctx, 53)");
						setState(5817);
						match(ASTERISK_);
						setState(5818);
						aExpr(54);
						}
						break;
					case 5:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5819);
						if (!(precpred(_ctx, 52))) throw new FailedPredicateException(this, "precpred(_ctx, 52)");
						setState(5820);
						match(SLASH_);
						setState(5821);
						aExpr(53);
						}
						break;
					case 6:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5822);
						if (!(precpred(_ctx, 51))) throw new FailedPredicateException(this, "precpred(_ctx, 51)");
						setState(5823);
						match(MOD_);
						setState(5824);
						aExpr(52);
						}
						break;
					case 7:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5825);
						if (!(precpred(_ctx, 50))) throw new FailedPredicateException(this, "precpred(_ctx, 50)");
						setState(5826);
						match(CARET_);
						setState(5827);
						aExpr(51);
						}
						break;
					case 8:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5828);
						if (!(precpred(_ctx, 49))) throw new FailedPredicateException(this, "precpred(_ctx, 49)");
						setState(5829);
						comparisonOperator();
						setState(5830);
						aExpr(50);
						}
						break;
					case 9:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5832);
						if (!(precpred(_ctx, 48))) throw new FailedPredicateException(this, "precpred(_ctx, 48)");
						setState(5833);
						qualOp();
						setState(5834);
						aExpr(49);
						}
						break;
					case 10:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5836);
						if (!(precpred(_ctx, 44))) throw new FailedPredicateException(this, "precpred(_ctx, 44)");
						setState(5837);
						match(LIKE);
						setState(5838);
						aExpr(45);
						}
						break;
					case 11:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5839);
						if (!(precpred(_ctx, 43))) throw new FailedPredicateException(this, "precpred(_ctx, 43)");
						setState(5840);
						match(LIKE);
						setState(5841);
						aExpr(0);
						setState(5842);
						match(ESCAPE);
						setState(5843);
						aExpr(44);
						}
						break;
					case 12:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5845);
						if (!(precpred(_ctx, 42))) throw new FailedPredicateException(this, "precpred(_ctx, 42)");
						setState(5846);
						match(NOT);
						setState(5847);
						match(LIKE);
						setState(5848);
						aExpr(43);
						}
						break;
					case 13:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5849);
						if (!(precpred(_ctx, 41))) throw new FailedPredicateException(this, "precpred(_ctx, 41)");
						setState(5850);
						match(NOT);
						setState(5851);
						match(LIKE);
						setState(5852);
						aExpr(0);
						setState(5853);
						match(ESCAPE);
						setState(5854);
						aExpr(42);
						}
						break;
					case 14:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5856);
						if (!(precpred(_ctx, 40))) throw new FailedPredicateException(this, "precpred(_ctx, 40)");
						setState(5857);
						match(ILIKE);
						setState(5858);
						aExpr(41);
						}
						break;
					case 15:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5859);
						if (!(precpred(_ctx, 39))) throw new FailedPredicateException(this, "precpred(_ctx, 39)");
						setState(5860);
						match(ILIKE);
						setState(5861);
						aExpr(0);
						setState(5862);
						match(ESCAPE);
						setState(5863);
						aExpr(40);
						}
						break;
					case 16:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5865);
						if (!(precpred(_ctx, 38))) throw new FailedPredicateException(this, "precpred(_ctx, 38)");
						setState(5866);
						match(NOT);
						setState(5867);
						match(ILIKE);
						setState(5868);
						aExpr(39);
						}
						break;
					case 17:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5869);
						if (!(precpred(_ctx, 37))) throw new FailedPredicateException(this, "precpred(_ctx, 37)");
						setState(5870);
						match(NOT);
						setState(5871);
						match(ILIKE);
						setState(5872);
						aExpr(0);
						setState(5873);
						match(ESCAPE);
						setState(5874);
						aExpr(38);
						}
						break;
					case 18:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5876);
						if (!(precpred(_ctx, 36))) throw new FailedPredicateException(this, "precpred(_ctx, 36)");
						setState(5877);
						match(SIMILAR);
						setState(5878);
						match(TO);
						setState(5879);
						aExpr(37);
						}
						break;
					case 19:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5880);
						if (!(precpred(_ctx, 35))) throw new FailedPredicateException(this, "precpred(_ctx, 35)");
						setState(5881);
						match(SIMILAR);
						setState(5882);
						match(TO);
						setState(5883);
						aExpr(0);
						setState(5884);
						match(ESCAPE);
						setState(5885);
						aExpr(36);
						}
						break;
					case 20:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5887);
						if (!(precpred(_ctx, 34))) throw new FailedPredicateException(this, "precpred(_ctx, 34)");
						setState(5888);
						match(NOT);
						setState(5889);
						match(SIMILAR);
						setState(5890);
						match(TO);
						setState(5891);
						aExpr(35);
						}
						break;
					case 21:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5892);
						if (!(precpred(_ctx, 33))) throw new FailedPredicateException(this, "precpred(_ctx, 33)");
						setState(5893);
						match(NOT);
						setState(5894);
						match(SIMILAR);
						setState(5895);
						match(TO);
						setState(5896);
						aExpr(0);
						setState(5897);
						match(ESCAPE);
						setState(5898);
						aExpr(34);
						}
						break;
					case 22:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5900);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(5901);
						match(IS);
						setState(5902);
						match(DISTINCT);
						setState(5903);
						match(FROM);
						setState(5904);
						aExpr(22);
						}
						break;
					case 23:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5905);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(5906);
						match(IS);
						setState(5907);
						match(NOT);
						setState(5908);
						match(DISTINCT);
						setState(5909);
						match(FROM);
						setState(5910);
						aExpr(21);
						}
						break;
					case 24:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5911);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(5912);
						match(BETWEEN);
						setState(5914);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ASYMMETRIC) {
							{
							setState(5913);
							match(ASYMMETRIC);
							}
						}

						setState(5916);
						bExpr(0);
						setState(5917);
						match(AND);
						setState(5918);
						aExpr(18);
						}
						break;
					case 25:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5920);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(5921);
						match(NOT);
						setState(5922);
						match(BETWEEN);
						setState(5924);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ASYMMETRIC) {
							{
							setState(5923);
							match(ASYMMETRIC);
							}
						}

						setState(5926);
						bExpr(0);
						setState(5927);
						match(AND);
						setState(5928);
						aExpr(17);
						}
						break;
					case 26:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5930);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(5931);
						match(BETWEEN);
						setState(5932);
						match(SYMMETRIC);
						setState(5933);
						bExpr(0);
						setState(5934);
						match(AND);
						setState(5935);
						aExpr(16);
						}
						break;
					case 27:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5937);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(5938);
						match(NOT);
						setState(5939);
						match(BETWEEN);
						setState(5940);
						match(SYMMETRIC);
						setState(5941);
						bExpr(0);
						setState(5942);
						match(AND);
						setState(5943);
						aExpr(15);
						}
						break;
					case 28:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5945);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5946);
						logicalOperator();
						setState(5947);
						aExpr(3);
						}
						break;
					case 29:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5949);
						if (!(precpred(_ctx, 60))) throw new FailedPredicateException(this, "precpred(_ctx, 60)");
						setState(5950);
						match(TYPE_CAST_);
						setState(5951);
						typeName();
						}
						break;
					case 30:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5952);
						if (!(precpred(_ctx, 59))) throw new FailedPredicateException(this, "precpred(_ctx, 59)");
						setState(5953);
						match(COLLATE);
						setState(5954);
						anyName();
						}
						break;
					case 31:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5955);
						if (!(precpred(_ctx, 46))) throw new FailedPredicateException(this, "precpred(_ctx, 46)");
						setState(5956);
						qualOp();
						}
						break;
					case 32:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5957);
						if (!(precpred(_ctx, 32))) throw new FailedPredicateException(this, "precpred(_ctx, 32)");
						setState(5958);
						match(IS);
						setState(5959);
						match(NULL);
						}
						break;
					case 33:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5960);
						if (!(precpred(_ctx, 31))) throw new FailedPredicateException(this, "precpred(_ctx, 31)");
						setState(5961);
						match(ISNULL);
						}
						break;
					case 34:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5962);
						if (!(precpred(_ctx, 30))) throw new FailedPredicateException(this, "precpred(_ctx, 30)");
						setState(5963);
						match(IS);
						setState(5964);
						match(NOT);
						setState(5965);
						match(NULL);
						}
						break;
					case 35:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5966);
						if (!(precpred(_ctx, 29))) throw new FailedPredicateException(this, "precpred(_ctx, 29)");
						setState(5967);
						match(NOTNULL);
						}
						break;
					case 36:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5968);
						if (!(precpred(_ctx, 27))) throw new FailedPredicateException(this, "precpred(_ctx, 27)");
						setState(5969);
						match(IS);
						setState(5970);
						match(TRUE);
						}
						break;
					case 37:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5971);
						if (!(precpred(_ctx, 26))) throw new FailedPredicateException(this, "precpred(_ctx, 26)");
						setState(5972);
						match(IS);
						setState(5973);
						match(NOT);
						setState(5974);
						match(TRUE);
						}
						break;
					case 38:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5975);
						if (!(precpred(_ctx, 25))) throw new FailedPredicateException(this, "precpred(_ctx, 25)");
						setState(5976);
						match(IS);
						setState(5977);
						match(FALSE);
						}
						break;
					case 39:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5978);
						if (!(precpred(_ctx, 24))) throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						setState(5979);
						match(IS);
						setState(5980);
						match(NOT);
						setState(5981);
						match(FALSE);
						}
						break;
					case 40:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5982);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(5983);
						match(IS);
						setState(5984);
						match(UNKNOWN);
						}
						break;
					case 41:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5985);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(5986);
						match(IS);
						setState(5987);
						match(NOT);
						setState(5988);
						match(UNKNOWN);
						}
						break;
					case 42:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5989);
						if (!(precpred(_ctx, 19))) throw new FailedPredicateException(this, "precpred(_ctx, 19)");
						setState(5990);
						match(IS);
						setState(5991);
						match(OF);
						setState(5992);
						match(LP_);
						setState(5993);
						typeList();
						setState(5994);
						match(RP_);
						}
						break;
					case 43:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(5996);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(5997);
						match(IS);
						setState(5998);
						match(NOT);
						setState(5999);
						match(OF);
						setState(6000);
						match(LP_);
						setState(6001);
						typeList();
						setState(6002);
						match(RP_);
						}
						break;
					case 44:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(6004);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(6005);
						match(IN);
						setState(6006);
						inExpr();
						}
						break;
					case 45:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(6007);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(6008);
						match(NOT);
						setState(6009);
						match(IN);
						setState(6010);
						inExpr();
						}
						break;
					case 46:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(6011);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(6012);
						subqueryOp();
						setState(6013);
						subType();
						setState(6014);
						selectWithParens();
						}
						break;
					case 47:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(6016);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(6017);
						subqueryOp();
						setState(6018);
						subType();
						setState(6019);
						match(LP_);
						setState(6020);
						aExpr(0);
						setState(6021);
						match(RP_);
						}
						break;
					case 48:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(6023);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(6024);
						match(IS);
						setState(6025);
						match(DOCUMENT);
						}
						break;
					case 49:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(6026);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(6027);
						match(IS);
						setState(6028);
						match(NOT);
						setState(6029);
						match(DOCUMENT);
						}
						break;
					case 50:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(6030);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(6031);
						match(IS);
						setState(6032);
						match(NORMALIZED);
						}
						break;
					case 51:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(6033);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(6034);
						match(IS);
						setState(6035);
						unicodeNormalForm();
						setState(6036);
						match(NORMALIZED);
						}
						break;
					case 52:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(6038);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6039);
						match(IS);
						setState(6040);
						match(NOT);
						setState(6041);
						match(NORMALIZED);
						}
						break;
					case 53:
						{
						_localctx = new AExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_aExpr);
						setState(6042);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6043);
						match(IS);
						setState(6044);
						match(NOT);
						setState(6045);
						unicodeNormalForm();
						setState(6046);
						match(NORMALIZED);
						}
						break;
					}
					} 
				}
				setState(6052);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,532,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class BExprContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public TerminalNode PLUS_() { return getToken(DDLStatementParser.PLUS_, 0); }
		public List<BExprContext> bExpr() {
			return getRuleContexts(BExprContext.class);
		}
		public BExprContext bExpr(int i) {
			return getRuleContext(BExprContext.class,i);
		}
		public TerminalNode MINUS_() { return getToken(DDLStatementParser.MINUS_, 0); }
		public QualOpContext qualOp() {
			return getRuleContext(QualOpContext.class,0);
		}
		public TerminalNode IS() { return getToken(DDLStatementParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(DDLStatementParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode TYPE_CAST_() { return getToken(DDLStatementParser.TYPE_CAST_, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode DOCUMENT() { return getToken(DDLStatementParser.DOCUMENT, 0); }
		public BExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterBExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitBExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitBExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BExprContext bExpr() throws RecognitionException {
		return bExpr(0);
	}

	private BExprContext bExpr(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BExprContext _localctx = new BExprContext(_ctx, _parentState);
		BExprContext _prevctx = _localctx;
		int _startState = 768;
		enterRecursionRule(_localctx, 768, RULE_bExpr, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6062);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
			case 1:
				{
				setState(6054);
				cExpr();
				}
				break;
			case 2:
				{
				setState(6055);
				match(PLUS_);
				setState(6056);
				bExpr(11);
				}
				break;
			case 3:
				{
				setState(6057);
				match(MINUS_);
				setState(6058);
				bExpr(10);
				}
				break;
			case 4:
				{
				setState(6059);
				qualOp();
				setState(6060);
				bExpr(8);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6108);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,535,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6106);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
					case 1:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(6064);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(6065);
						qualOp();
						setState(6066);
						bExpr(10);
						}
						break;
					case 2:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(6068);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(6069);
						match(IS);
						setState(6070);
						match(DISTINCT);
						setState(6071);
						match(FROM);
						setState(6072);
						bExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(6073);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(6074);
						match(IS);
						setState(6075);
						match(NOT);
						setState(6076);
						match(DISTINCT);
						setState(6077);
						match(FROM);
						setState(6078);
						bExpr(6);
						}
						break;
					case 4:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(6079);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(6080);
						match(TYPE_CAST_);
						setState(6081);
						typeName();
						}
						break;
					case 5:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(6082);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(6083);
						qualOp();
						}
						break;
					case 6:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(6084);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6085);
						match(IS);
						setState(6086);
						match(OF);
						setState(6087);
						match(LP_);
						setState(6088);
						typeList();
						setState(6089);
						match(RP_);
						}
						break;
					case 7:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(6091);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6092);
						match(IS);
						setState(6093);
						match(NOT);
						setState(6094);
						match(OF);
						setState(6095);
						match(LP_);
						setState(6096);
						typeList();
						setState(6097);
						match(RP_);
						}
						break;
					case 8:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(6099);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6100);
						match(IS);
						setState(6101);
						match(DOCUMENT);
						}
						break;
					case 9:
						{
						_localctx = new BExprContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_bExpr);
						setState(6102);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(6103);
						match(IS);
						setState(6104);
						match(NOT);
						setState(6105);
						match(DOCUMENT);
						}
						break;
					}
					} 
				}
				setState(6110);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,535,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CExprContext extends ParserRuleContext {
		public ParameterMarkerContext parameterMarker() {
			return getRuleContext(ParameterMarkerContext.class,0);
		}
		public ColumnrefContext columnref() {
			return getRuleContext(ColumnrefContext.class,0);
		}
		public AexprConstContext aexprConst() {
			return getRuleContext(AexprConstContext.class,0);
		}
		public TerminalNode PARAM() { return getToken(DDLStatementParser.PARAM, 0); }
		public IndirectionElContext indirectionEl() {
			return getRuleContext(IndirectionElContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public CaseExprContext caseExpr() {
			return getRuleContext(CaseExprContext.class,0);
		}
		public FuncExprContext funcExpr() {
			return getRuleContext(FuncExprContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public TerminalNode ARRAY() { return getToken(DDLStatementParser.ARRAY, 0); }
		public ArrayExprContext arrayExpr() {
			return getRuleContext(ArrayExprContext.class,0);
		}
		public ExplicitRowContext explicitRow() {
			return getRuleContext(ExplicitRowContext.class,0);
		}
		public ImplicitRowContext implicitRow() {
			return getRuleContext(ImplicitRowContext.class,0);
		}
		public TerminalNode GROUPING() { return getToken(DDLStatementParser.GROUPING, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public CExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CExprContext cExpr() throws RecognitionException {
		CExprContext _localctx = new CExprContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_cExpr);
		try {
			setState(6142);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,537,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6111);
				parameterMarker();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6112);
				columnref();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6113);
				aexprConst();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6114);
				match(PARAM);
				setState(6116);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
				case 1:
					{
					setState(6115);
					indirectionEl();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6118);
				match(LP_);
				setState(6119);
				aExpr(0);
				setState(6120);
				match(RP_);
				setState(6121);
				optIndirection(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6123);
				caseExpr();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6124);
				funcExpr();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6125);
				selectWithParens();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6126);
				selectWithParens();
				setState(6127);
				indirection(0);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6129);
				match(EXISTS);
				setState(6130);
				selectWithParens();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6131);
				match(ARRAY);
				setState(6132);
				selectWithParens();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6133);
				match(ARRAY);
				setState(6134);
				arrayExpr();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6135);
				explicitRow();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6136);
				implicitRow();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6137);
				match(GROUPING);
				setState(6138);
				match(LP_);
				setState(6139);
				exprList(0);
				setState(6140);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectionContext extends ParserRuleContext {
		public IndirectionElContext indirectionEl() {
			return getRuleContext(IndirectionElContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public IndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionContext indirection() throws RecognitionException {
		return indirection(0);
	}

	private IndirectionContext indirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		IndirectionContext _localctx = new IndirectionContext(_ctx, _parentState);
		IndirectionContext _prevctx = _localctx;
		int _startState = 772;
		enterRecursionRule(_localctx, 772, RULE_indirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6145);
			indirectionEl();
			}
			_ctx.stop = _input.LT(-1);
			setState(6151);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,538,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IndirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_indirection);
					setState(6147);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6148);
					indirectionEl();
					}
					} 
				}
				setState(6153);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,538,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class OptIndirectionContext extends ParserRuleContext {
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public IndirectionElContext indirectionEl() {
			return getRuleContext(IndirectionElContext.class,0);
		}
		public OptIndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optIndirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptIndirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptIndirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptIndirectionContext optIndirection() throws RecognitionException {
		return optIndirection(0);
	}

	private OptIndirectionContext optIndirection(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptIndirectionContext _localctx = new OptIndirectionContext(_ctx, _parentState);
		OptIndirectionContext _prevctx = _localctx;
		int _startState = 774;
		enterRecursionRule(_localctx, 774, RULE_optIndirection, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(6159);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,539,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new OptIndirectionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_optIndirection);
					setState(6155);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6156);
					indirectionEl();
					}
					} 
				}
				setState(6161);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,539,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class IndirectionElContext extends ParserRuleContext {
		public TerminalNode DOT_() { return getToken(DDLStatementParser.DOT_, 0); }
		public AttrNameContext attrName() {
			return getRuleContext(AttrNameContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TerminalNode LBT_() { return getToken(DDLStatementParser.LBT_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RBT_() { return getToken(DDLStatementParser.RBT_, 0); }
		public TerminalNode COLON_() { return getToken(DDLStatementParser.COLON_, 0); }
		public List<SliceBoundContext> sliceBound() {
			return getRuleContexts(SliceBoundContext.class);
		}
		public SliceBoundContext sliceBound(int i) {
			return getRuleContext(SliceBoundContext.class,i);
		}
		public IndirectionElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirectionEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndirectionEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndirectionEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndirectionEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionElContext indirectionEl() throws RecognitionException {
		IndirectionElContext _localctx = new IndirectionElContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_indirectionEl);
		int _la;
		try {
			setState(6179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6162);
				match(DOT_);
				setState(6163);
				attrName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6164);
				match(DOT_);
				setState(6165);
				match(ASTERISK_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6166);
				match(LBT_);
				setState(6167);
				aExpr(0);
				setState(6168);
				match(RBT_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6170);
				match(LBT_);
				setState(6172);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << CARET_) | (1L << MOD_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_) | (1L << LP_) | (1L << QUESTION_) | (1L << TILDE_TILDE_) | (1L << NOT_TILDE_TILDE_) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (UNIQUE - 65)) | (1L << (KEY - 65)) | (1L << (POSITION - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (CASE - 65)) | (1L << (CAST - 65)) | (1L << (TRIM - 65)) | (1L << (SUBSTRING - 65)) | (1L << (NATURAL - 65)) | (1L << (JOIN - 65)) | (1L << (FULL - 65)) | (1L << (INNER - 65)) | (1L << (OUTER - 65)) | (1L << (LEFT - 65)) | (1L << (RIGHT - 65)) | (1L << (CROSS - 65)) | (1L << (IF - 65)) | (1L << (IS - 65)) | (1L << (NOT - 65)) | (1L << (NULL - 65)) | (1L << (TRUE - 65)) | (1L << (FALSE - 65)) | (1L << (EXISTS - 65)) | (1L << (LIKE - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (ARRAY - 129)) | (1L << (LOCALTIME - 129)) | (1L << (LOCALTIMESTAMP - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (DEFAULT - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (CURRENT_USER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (COLLATION - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (CURRENT_DATE - 129)) | (1L << (CURRENT_TIME - 129)) | (1L << (CURRENT_TIMESTAMP - 129)) | (1L << (NULLIF - 129)) | (1L << (VARYING - 129)) | (1L << (VALUE - 129)) | (1L << (COALESCE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (GROUPING - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (OVERLAPS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (BINARY - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (ROW - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (USER - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONCURRENTLY - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SESSION_USER - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (ENUM - 329)) | (1L << (XML - 329)) | (1L << (TABLESAMPLE - 329)) | (1L << (ORDINALITY - 329)) | (1L << (CURRENT_ROLE - 329)) | (1L << (CURRENT_CATALOG - 329)) | (1L << (CURRENT_SCHEMA - 329)) | (1L << (NORMALIZE - 329)) | (1L << (OVERLAY - 329)) | (1L << (XMLCONCAT - 329)) | (1L << (XMLELEMENT - 329)) | (1L << (XMLEXISTS - 329)) | (1L << (XMLFOREST - 329)) | (1L << (XMLPARSE - 329)) | (1L << (XMLPI - 329)) | (1L << (XMLROOT - 329)) | (1L << (XMLSERIALIZE - 329)) | (1L << (TREAT - 329)) | (1L << (NFC - 329)) | (1L << (NFD - 329)) | (1L << (NFKC - 329)) | (1L << (NFKD - 329)) | (1L << (REF - 329)) | (1L << (PASSING - 329)) | (1L << (VERSION - 329)) | (1L << (YES - 329)) | (1L << (STANDALONE - 329)) | (1L << (GREATEST - 329)) | (1L << (LEAST - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OPERATOR - 329)) | (1L << (SHARE - 329)) | (1L << (ROLLUP - 329)) | (1L << (ILIKE - 329)) | (1L << (SIMILAR - 329)) | (1L << (ISNULL - 329)) | (1L << (NOTNULL - 329)) | (1L << (DOCUMENT - 329)) | (1L << (NORMALIZED - 329)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)) | (1L << (FAMILY - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)) | (1L << (UNENCRYPTED - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (FREEZE - 523)) | (1L << (AUTHORIZATION - 523)) | (1L << (VERBOSE - 523)) | (1L << (PARAM - 523)) | (1L << (IDENTIFIER_ - 523)) | (1L << (STRING_ - 523)) | (1L << (NUMBER_ - 523)))) != 0)) {
					{
					setState(6171);
					sliceBound();
					}
				}

				setState(6174);
				match(COLON_);
				setState(6176);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << CARET_) | (1L << MOD_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_) | (1L << LP_) | (1L << QUESTION_) | (1L << TILDE_TILDE_) | (1L << NOT_TILDE_TILDE_) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (UNIQUE - 65)) | (1L << (KEY - 65)) | (1L << (POSITION - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (CASE - 65)) | (1L << (CAST - 65)) | (1L << (TRIM - 65)) | (1L << (SUBSTRING - 65)) | (1L << (NATURAL - 65)) | (1L << (JOIN - 65)) | (1L << (FULL - 65)) | (1L << (INNER - 65)) | (1L << (OUTER - 65)) | (1L << (LEFT - 65)) | (1L << (RIGHT - 65)) | (1L << (CROSS - 65)) | (1L << (IF - 65)) | (1L << (IS - 65)) | (1L << (NOT - 65)) | (1L << (NULL - 65)) | (1L << (TRUE - 65)) | (1L << (FALSE - 65)) | (1L << (EXISTS - 65)) | (1L << (LIKE - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (ARRAY - 129)) | (1L << (LOCALTIME - 129)) | (1L << (LOCALTIMESTAMP - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (DEFAULT - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (CURRENT_USER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (COLLATION - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (CURRENT_DATE - 129)) | (1L << (CURRENT_TIME - 129)) | (1L << (CURRENT_TIMESTAMP - 129)) | (1L << (NULLIF - 129)) | (1L << (VARYING - 129)) | (1L << (VALUE - 129)) | (1L << (COALESCE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (GROUPING - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (OVERLAPS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (BINARY - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (ROW - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (USER - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONCURRENTLY - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SESSION_USER - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (ENUM - 329)) | (1L << (XML - 329)) | (1L << (TABLESAMPLE - 329)) | (1L << (ORDINALITY - 329)) | (1L << (CURRENT_ROLE - 329)) | (1L << (CURRENT_CATALOG - 329)) | (1L << (CURRENT_SCHEMA - 329)) | (1L << (NORMALIZE - 329)) | (1L << (OVERLAY - 329)) | (1L << (XMLCONCAT - 329)) | (1L << (XMLELEMENT - 329)) | (1L << (XMLEXISTS - 329)) | (1L << (XMLFOREST - 329)) | (1L << (XMLPARSE - 329)) | (1L << (XMLPI - 329)) | (1L << (XMLROOT - 329)) | (1L << (XMLSERIALIZE - 329)) | (1L << (TREAT - 329)) | (1L << (NFC - 329)) | (1L << (NFD - 329)) | (1L << (NFKC - 329)) | (1L << (NFKD - 329)) | (1L << (REF - 329)) | (1L << (PASSING - 329)) | (1L << (VERSION - 329)) | (1L << (YES - 329)) | (1L << (STANDALONE - 329)) | (1L << (GREATEST - 329)) | (1L << (LEAST - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OPERATOR - 329)) | (1L << (SHARE - 329)) | (1L << (ROLLUP - 329)) | (1L << (ILIKE - 329)) | (1L << (SIMILAR - 329)) | (1L << (ISNULL - 329)) | (1L << (NOTNULL - 329)) | (1L << (DOCUMENT - 329)) | (1L << (NORMALIZED - 329)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)) | (1L << (FAMILY - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)) | (1L << (UNENCRYPTED - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (FREEZE - 523)) | (1L << (AUTHORIZATION - 523)) | (1L << (VERBOSE - 523)) | (1L << (PARAM - 523)) | (1L << (IDENTIFIER_ - 523)) | (1L << (STRING_ - 523)) | (1L << (NUMBER_ - 523)))) != 0)) {
					{
					setState(6175);
					sliceBound();
					}
				}

				setState(6178);
				match(RBT_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SliceBoundContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SliceBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sliceBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSliceBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSliceBound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSliceBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SliceBoundContext sliceBound() throws RecognitionException {
		SliceBoundContext _localctx = new SliceBoundContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_sliceBound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6181);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InExprContext extends ParserRuleContext {
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public InExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterInExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitInExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitInExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InExprContext inExpr() throws RecognitionException {
		InExprContext _localctx = new InExprContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_inExpr);
		try {
			setState(6188);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__2:
				enterOuterAlt(_localctx, 1);
				{
				setState(6183);
				selectWithParens();
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 2);
				{
				setState(6184);
				match(LP_);
				setState(6185);
				exprList(0);
				setState(6186);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExprContext extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(DDLStatementParser.CASE, 0); }
		public WhenClauseListContext whenClauseList() {
			return getRuleContext(WhenClauseListContext.class,0);
		}
		public TerminalNode END() { return getToken(DDLStatementParser.END, 0); }
		public CaseArgContext caseArg() {
			return getRuleContext(CaseArgContext.class,0);
		}
		public CaseDefaultContext caseDefault() {
			return getRuleContext(CaseDefaultContext.class,0);
		}
		public CaseExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCaseExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCaseExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCaseExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExprContext caseExpr() throws RecognitionException {
		CaseExprContext _localctx = new CaseExprContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_caseExpr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6190);
			match(CASE);
			setState(6192);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << CARET_) | (1L << MOD_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_) | (1L << LP_) | (1L << QUESTION_) | (1L << TILDE_TILDE_) | (1L << NOT_TILDE_TILDE_) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (UNIQUE - 65)) | (1L << (KEY - 65)) | (1L << (POSITION - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (CASE - 65)) | (1L << (CAST - 65)) | (1L << (TRIM - 65)) | (1L << (SUBSTRING - 65)) | (1L << (NATURAL - 65)) | (1L << (JOIN - 65)) | (1L << (FULL - 65)) | (1L << (INNER - 65)) | (1L << (OUTER - 65)) | (1L << (LEFT - 65)) | (1L << (RIGHT - 65)) | (1L << (CROSS - 65)) | (1L << (IF - 65)) | (1L << (IS - 65)) | (1L << (NOT - 65)) | (1L << (NULL - 65)) | (1L << (TRUE - 65)) | (1L << (FALSE - 65)) | (1L << (EXISTS - 65)) | (1L << (LIKE - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (ARRAY - 129)) | (1L << (LOCALTIME - 129)) | (1L << (LOCALTIMESTAMP - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (DEFAULT - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (CURRENT_USER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (COLLATION - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (CURRENT_DATE - 129)) | (1L << (CURRENT_TIME - 129)) | (1L << (CURRENT_TIMESTAMP - 129)) | (1L << (NULLIF - 129)) | (1L << (VARYING - 129)) | (1L << (VALUE - 129)) | (1L << (COALESCE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (GROUPING - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (OVERLAPS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (BINARY - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (ROW - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (USER - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONCURRENTLY - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (EXTRACT - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SESSION_USER - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (ENUM - 329)) | (1L << (XML - 329)) | (1L << (TABLESAMPLE - 329)) | (1L << (ORDINALITY - 329)) | (1L << (CURRENT_ROLE - 329)) | (1L << (CURRENT_CATALOG - 329)) | (1L << (CURRENT_SCHEMA - 329)) | (1L << (NORMALIZE - 329)) | (1L << (OVERLAY - 329)) | (1L << (XMLCONCAT - 329)) | (1L << (XMLELEMENT - 329)) | (1L << (XMLEXISTS - 329)) | (1L << (XMLFOREST - 329)) | (1L << (XMLPARSE - 329)) | (1L << (XMLPI - 329)) | (1L << (XMLROOT - 329)) | (1L << (XMLSERIALIZE - 329)) | (1L << (TREAT - 329)) | (1L << (NFC - 329)) | (1L << (NFD - 329)) | (1L << (NFKC - 329)) | (1L << (NFKD - 329)) | (1L << (REF - 329)) | (1L << (PASSING - 329)) | (1L << (VERSION - 329)) | (1L << (YES - 329)) | (1L << (STANDALONE - 329)) | (1L << (GREATEST - 329)) | (1L << (LEAST - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OPERATOR - 329)) | (1L << (SHARE - 329)) | (1L << (ROLLUP - 329)) | (1L << (ILIKE - 329)) | (1L << (SIMILAR - 329)) | (1L << (ISNULL - 329)) | (1L << (NOTNULL - 329)) | (1L << (DOCUMENT - 329)) | (1L << (NORMALIZED - 329)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)) | (1L << (FAMILY - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)) | (1L << (UNENCRYPTED - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (FREEZE - 523)) | (1L << (AUTHORIZATION - 523)) | (1L << (VERBOSE - 523)) | (1L << (PARAM - 523)) | (1L << (IDENTIFIER_ - 523)) | (1L << (STRING_ - 523)) | (1L << (NUMBER_ - 523)))) != 0)) {
				{
				setState(6191);
				caseArg();
				}
			}

			setState(6194);
			whenClauseList();
			setState(6196);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(6195);
				caseDefault();
				}
			}

			setState(6198);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenClauseListContext extends ParserRuleContext {
		public List<WhenClauseContext> whenClause() {
			return getRuleContexts(WhenClauseContext.class);
		}
		public WhenClauseContext whenClause(int i) {
			return getRuleContext(WhenClauseContext.class,i);
		}
		public WhenClauseListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenClauseList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWhenClauseList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWhenClauseList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWhenClauseList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenClauseListContext whenClauseList() throws RecognitionException {
		WhenClauseListContext _localctx = new WhenClauseListContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_whenClauseList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6201); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(6200);
				whenClause();
				}
				}
				setState(6203); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenClauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(DDLStatementParser.WHEN, 0); }
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public TerminalNode THEN() { return getToken(DDLStatementParser.THEN, 0); }
		public WhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWhenClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWhenClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenClauseContext whenClause() throws RecognitionException {
		WhenClauseContext _localctx = new WhenClauseContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_whenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6205);
			match(WHEN);
			setState(6206);
			aExpr(0);
			setState(6207);
			match(THEN);
			setState(6208);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseDefaultContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(DDLStatementParser.ELSE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public CaseDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCaseDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCaseDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCaseDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseDefaultContext caseDefault() throws RecognitionException {
		CaseDefaultContext _localctx = new CaseDefaultContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_caseDefault);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6210);
			match(ELSE);
			setState(6211);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseArgContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public CaseArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCaseArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCaseArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCaseArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseArgContext caseArg() throws RecognitionException {
		CaseArgContext _localctx = new CaseArgContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_caseArg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6213);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnrefContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public ColumnrefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnrefContext columnref() throws RecognitionException {
		ColumnrefContext _localctx = new ColumnrefContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_columnref);
		try {
			setState(6219);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6215);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6216);
				colId();
				setState(6217);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualOpContext extends ParserRuleContext {
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public TerminalNode TILDE_TILDE_() { return getToken(DDLStatementParser.TILDE_TILDE_, 0); }
		public TerminalNode NOT_TILDE_TILDE_() { return getToken(DDLStatementParser.NOT_TILDE_TILDE_, 0); }
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public QualOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterQualOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitQualOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitQualOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualOpContext qualOp() throws RecognitionException {
		QualOpContext _localctx = new QualOpContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_qualOp);
		try {
			setState(6229);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CARET_:
			case MOD_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
				enterOuterAlt(_localctx, 1);
				{
				setState(6221);
				mathOperator();
				}
				break;
			case TILDE_TILDE_:
				enterOuterAlt(_localctx, 2);
				{
				setState(6222);
				match(TILDE_TILDE_);
				}
				break;
			case NOT_TILDE_TILDE_:
				enterOuterAlt(_localctx, 3);
				{
				setState(6223);
				match(NOT_TILDE_TILDE_);
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 4);
				{
				setState(6224);
				match(OPERATOR);
				setState(6225);
				match(LP_);
				setState(6226);
				anyOperator();
				setState(6227);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryOpContext extends ParserRuleContext {
		public AllOpContext allOp() {
			return getRuleContext(AllOpContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode LIKE() { return getToken(DDLStatementParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode ILIKE() { return getToken(DDLStatementParser.ILIKE, 0); }
		public SubqueryOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subqueryOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSubqueryOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSubqueryOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSubqueryOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryOpContext subqueryOp() throws RecognitionException {
		SubqueryOpContext _localctx = new SubqueryOpContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_subqueryOp);
		try {
			setState(6243);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6231);
				allOp();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6232);
				match(OPERATOR);
				setState(6233);
				match(LP_);
				setState(6234);
				anyOperator();
				setState(6235);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6237);
				match(LIKE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6238);
				match(NOT);
				setState(6239);
				match(LIKE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6240);
				match(ILIKE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6241);
				match(NOT);
				setState(6242);
				match(ILIKE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllOpContext extends ParserRuleContext {
		public OpContext op() {
			return getRuleContext(OpContext.class,0);
		}
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public AllOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAllOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAllOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAllOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllOpContext allOp() throws RecognitionException {
		AllOpContext _localctx = new AllOpContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_allOp);
		try {
			setState(6247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,550,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6245);
				op();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6246);
				mathOperator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpContext extends ParserRuleContext {
		public List<TerminalNode> AND_() { return getTokens(DDLStatementParser.AND_); }
		public TerminalNode AND_(int i) {
			return getToken(DDLStatementParser.AND_, i);
		}
		public List<TerminalNode> OR_() { return getTokens(DDLStatementParser.OR_); }
		public TerminalNode OR_(int i) {
			return getToken(DDLStatementParser.OR_, i);
		}
		public List<TerminalNode> NOT_() { return getTokens(DDLStatementParser.NOT_); }
		public TerminalNode NOT_(int i) {
			return getToken(DDLStatementParser.NOT_, i);
		}
		public List<TerminalNode> TILDE_() { return getTokens(DDLStatementParser.TILDE_); }
		public TerminalNode TILDE_(int i) {
			return getToken(DDLStatementParser.TILDE_, i);
		}
		public List<TerminalNode> VERTICAL_BAR_() { return getTokens(DDLStatementParser.VERTICAL_BAR_); }
		public TerminalNode VERTICAL_BAR_(int i) {
			return getToken(DDLStatementParser.VERTICAL_BAR_, i);
		}
		public List<TerminalNode> AMPERSAND_() { return getTokens(DDLStatementParser.AMPERSAND_); }
		public TerminalNode AMPERSAND_(int i) {
			return getToken(DDLStatementParser.AMPERSAND_, i);
		}
		public List<TerminalNode> SIGNED_LEFT_SHIFT_() { return getTokens(DDLStatementParser.SIGNED_LEFT_SHIFT_); }
		public TerminalNode SIGNED_LEFT_SHIFT_(int i) {
			return getToken(DDLStatementParser.SIGNED_LEFT_SHIFT_, i);
		}
		public List<TerminalNode> SIGNED_RIGHT_SHIFT_() { return getTokens(DDLStatementParser.SIGNED_RIGHT_SHIFT_); }
		public TerminalNode SIGNED_RIGHT_SHIFT_(int i) {
			return getToken(DDLStatementParser.SIGNED_RIGHT_SHIFT_, i);
		}
		public List<TerminalNode> CARET_() { return getTokens(DDLStatementParser.CARET_); }
		public TerminalNode CARET_(int i) {
			return getToken(DDLStatementParser.CARET_, i);
		}
		public List<TerminalNode> MOD_() { return getTokens(DDLStatementParser.MOD_); }
		public TerminalNode MOD_(int i) {
			return getToken(DDLStatementParser.MOD_, i);
		}
		public List<TerminalNode> COLON_() { return getTokens(DDLStatementParser.COLON_); }
		public TerminalNode COLON_(int i) {
			return getToken(DDLStatementParser.COLON_, i);
		}
		public List<TerminalNode> PLUS_() { return getTokens(DDLStatementParser.PLUS_); }
		public TerminalNode PLUS_(int i) {
			return getToken(DDLStatementParser.PLUS_, i);
		}
		public List<TerminalNode> MINUS_() { return getTokens(DDLStatementParser.MINUS_); }
		public TerminalNode MINUS_(int i) {
			return getToken(DDLStatementParser.MINUS_, i);
		}
		public List<TerminalNode> ASTERISK_() { return getTokens(DDLStatementParser.ASTERISK_); }
		public TerminalNode ASTERISK_(int i) {
			return getToken(DDLStatementParser.ASTERISK_, i);
		}
		public List<TerminalNode> SLASH_() { return getTokens(DDLStatementParser.SLASH_); }
		public TerminalNode SLASH_(int i) {
			return getToken(DDLStatementParser.SLASH_, i);
		}
		public List<TerminalNode> BACKSLASH_() { return getTokens(DDLStatementParser.BACKSLASH_); }
		public TerminalNode BACKSLASH_(int i) {
			return getToken(DDLStatementParser.BACKSLASH_, i);
		}
		public List<TerminalNode> DOT_() { return getTokens(DDLStatementParser.DOT_); }
		public TerminalNode DOT_(int i) {
			return getToken(DDLStatementParser.DOT_, i);
		}
		public List<TerminalNode> DOT_ASTERISK_() { return getTokens(DDLStatementParser.DOT_ASTERISK_); }
		public TerminalNode DOT_ASTERISK_(int i) {
			return getToken(DDLStatementParser.DOT_ASTERISK_, i);
		}
		public List<TerminalNode> SAFE_EQ_() { return getTokens(DDLStatementParser.SAFE_EQ_); }
		public TerminalNode SAFE_EQ_(int i) {
			return getToken(DDLStatementParser.SAFE_EQ_, i);
		}
		public List<TerminalNode> DEQ_() { return getTokens(DDLStatementParser.DEQ_); }
		public TerminalNode DEQ_(int i) {
			return getToken(DDLStatementParser.DEQ_, i);
		}
		public List<TerminalNode> EQ_() { return getTokens(DDLStatementParser.EQ_); }
		public TerminalNode EQ_(int i) {
			return getToken(DDLStatementParser.EQ_, i);
		}
		public List<TerminalNode> CQ_() { return getTokens(DDLStatementParser.CQ_); }
		public TerminalNode CQ_(int i) {
			return getToken(DDLStatementParser.CQ_, i);
		}
		public List<TerminalNode> NEQ_() { return getTokens(DDLStatementParser.NEQ_); }
		public TerminalNode NEQ_(int i) {
			return getToken(DDLStatementParser.NEQ_, i);
		}
		public List<TerminalNode> GT_() { return getTokens(DDLStatementParser.GT_); }
		public TerminalNode GT_(int i) {
			return getToken(DDLStatementParser.GT_, i);
		}
		public List<TerminalNode> GTE_() { return getTokens(DDLStatementParser.GTE_); }
		public TerminalNode GTE_(int i) {
			return getToken(DDLStatementParser.GTE_, i);
		}
		public List<TerminalNode> LT_() { return getTokens(DDLStatementParser.LT_); }
		public TerminalNode LT_(int i) {
			return getToken(DDLStatementParser.LT_, i);
		}
		public List<TerminalNode> LTE_() { return getTokens(DDLStatementParser.LTE_); }
		public TerminalNode LTE_(int i) {
			return getToken(DDLStatementParser.LTE_, i);
		}
		public List<TerminalNode> POUND_() { return getTokens(DDLStatementParser.POUND_); }
		public TerminalNode POUND_(int i) {
			return getToken(DDLStatementParser.POUND_, i);
		}
		public List<TerminalNode> LP_() { return getTokens(DDLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(DDLStatementParser.LP_, i);
		}
		public List<TerminalNode> RP_() { return getTokens(DDLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(DDLStatementParser.RP_, i);
		}
		public List<TerminalNode> LBE_() { return getTokens(DDLStatementParser.LBE_); }
		public TerminalNode LBE_(int i) {
			return getToken(DDLStatementParser.LBE_, i);
		}
		public List<TerminalNode> RBE_() { return getTokens(DDLStatementParser.RBE_); }
		public TerminalNode RBE_(int i) {
			return getToken(DDLStatementParser.RBE_, i);
		}
		public List<TerminalNode> LBT_() { return getTokens(DDLStatementParser.LBT_); }
		public TerminalNode LBT_(int i) {
			return getToken(DDLStatementParser.LBT_, i);
		}
		public List<TerminalNode> RBT_() { return getTokens(DDLStatementParser.RBT_); }
		public TerminalNode RBT_(int i) {
			return getToken(DDLStatementParser.RBT_, i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public List<TerminalNode> DQ_() { return getTokens(DDLStatementParser.DQ_); }
		public TerminalNode DQ_(int i) {
			return getToken(DDLStatementParser.DQ_, i);
		}
		public List<TerminalNode> SQ_() { return getTokens(DDLStatementParser.SQ_); }
		public TerminalNode SQ_(int i) {
			return getToken(DDLStatementParser.SQ_, i);
		}
		public List<TerminalNode> BQ_() { return getTokens(DDLStatementParser.BQ_); }
		public TerminalNode BQ_(int i) {
			return getToken(DDLStatementParser.BQ_, i);
		}
		public List<TerminalNode> QUESTION_() { return getTokens(DDLStatementParser.QUESTION_); }
		public TerminalNode QUESTION_(int i) {
			return getToken(DDLStatementParser.QUESTION_, i);
		}
		public List<TerminalNode> AT_() { return getTokens(DDLStatementParser.AT_); }
		public TerminalNode AT_(int i) {
			return getToken(DDLStatementParser.AT_, i);
		}
		public List<TerminalNode> SEMI_() { return getTokens(DDLStatementParser.SEMI_); }
		public TerminalNode SEMI_(int i) {
			return getToken(DDLStatementParser.SEMI_, i);
		}
		public List<TerminalNode> TILDE_TILDE_() { return getTokens(DDLStatementParser.TILDE_TILDE_); }
		public TerminalNode TILDE_TILDE_(int i) {
			return getToken(DDLStatementParser.TILDE_TILDE_, i);
		}
		public List<TerminalNode> NOT_TILDE_TILDE_() { return getTokens(DDLStatementParser.NOT_TILDE_TILDE_); }
		public TerminalNode NOT_TILDE_TILDE_(int i) {
			return getToken(DDLStatementParser.NOT_TILDE_TILDE_, i);
		}
		public List<TerminalNode> TYPE_CAST_() { return getTokens(DDLStatementParser.TYPE_CAST_); }
		public TerminalNode TYPE_CAST_(int i) {
			return getToken(DDLStatementParser.TYPE_CAST_, i);
		}
		public OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpContext op() throws RecognitionException {
		OpContext _localctx = new OpContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_op);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6250); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6249);
					_la = _input.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND_) | (1L << OR_) | (1L << NOT_) | (1L << TILDE_) | (1L << VERTICAL_BAR_) | (1L << AMPERSAND_) | (1L << SIGNED_LEFT_SHIFT_) | (1L << SIGNED_RIGHT_SHIFT_) | (1L << CARET_) | (1L << MOD_) | (1L << COLON_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << BACKSLASH_) | (1L << DOT_) | (1L << DOT_ASTERISK_) | (1L << SAFE_EQ_) | (1L << DEQ_) | (1L << EQ_) | (1L << CQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_) | (1L << POUND_) | (1L << LP_) | (1L << RP_) | (1L << LBE_) | (1L << RBE_) | (1L << LBT_) | (1L << RBT_) | (1L << COMMA_) | (1L << DQ_) | (1L << SQ_) | (1L << BQ_) | (1L << QUESTION_) | (1L << AT_) | (1L << SEMI_) | (1L << TILDE_TILDE_) | (1L << NOT_TILDE_TILDE_) | (1L << TYPE_CAST_))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6252); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,551,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode PLUS_() { return getToken(DDLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(DDLStatementParser.MINUS_, 0); }
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TerminalNode SLASH_() { return getToken(DDLStatementParser.SLASH_, 0); }
		public TerminalNode MOD_() { return getToken(DDLStatementParser.MOD_, 0); }
		public TerminalNode CARET_() { return getToken(DDLStatementParser.CARET_, 0); }
		public TerminalNode LT_() { return getToken(DDLStatementParser.LT_, 0); }
		public TerminalNode GT_() { return getToken(DDLStatementParser.GT_, 0); }
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public TerminalNode LTE_() { return getToken(DDLStatementParser.LTE_, 0); }
		public TerminalNode GTE_() { return getToken(DDLStatementParser.GTE_, 0); }
		public TerminalNode NEQ_() { return getToken(DDLStatementParser.NEQ_, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6254);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CARET_) | (1L << MOD_) | (1L << PLUS_) | (1L << MINUS_) | (1L << ASTERISK_) | (1L << SLASH_) | (1L << EQ_) | (1L << NEQ_) | (1L << GT_) | (1L << GTE_) | (1L << LT_) | (1L << LTE_))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualAllOpContext extends ParserRuleContext {
		public AllOpContext allOp() {
			return getRuleContext(AllOpContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(DDLStatementParser.OPERATOR, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public QualAllOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualAllOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterQualAllOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitQualAllOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitQualAllOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualAllOpContext qualAllOp() throws RecognitionException {
		QualAllOpContext _localctx = new QualAllOpContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_qualAllOp);
		try {
			setState(6262);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND_:
			case OR_:
			case NOT_:
			case TILDE_:
			case VERTICAL_BAR_:
			case AMPERSAND_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case CARET_:
			case MOD_:
			case COLON_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case BACKSLASH_:
			case DOT_:
			case DOT_ASTERISK_:
			case SAFE_EQ_:
			case DEQ_:
			case EQ_:
			case CQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case POUND_:
			case LP_:
			case RP_:
			case LBE_:
			case RBE_:
			case LBT_:
			case RBT_:
			case COMMA_:
			case DQ_:
			case SQ_:
			case BQ_:
			case QUESTION_:
			case AT_:
			case SEMI_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case TYPE_CAST_:
				enterOuterAlt(_localctx, 1);
				{
				setState(6256);
				allOp();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(6257);
				match(OPERATOR);
				setState(6258);
				match(LP_);
				setState(6259);
				anyOperator();
				setState(6260);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AscDescContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(DDLStatementParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(DDLStatementParser.DESC, 0); }
		public AscDescContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ascDesc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAscDesc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAscDesc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAscDesc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AscDescContext ascDesc() throws RecognitionException {
		AscDescContext _localctx = new AscDescContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_ascDesc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6264);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnyOperatorContext extends ParserRuleContext {
		public AllOpContext allOp() {
			return getRuleContext(AllOpContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DDLStatementParser.DOT_, 0); }
		public AnyOperatorContext anyOperator() {
			return getRuleContext(AnyOperatorContext.class,0);
		}
		public AnyOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAnyOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAnyOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAnyOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnyOperatorContext anyOperator() throws RecognitionException {
		AnyOperatorContext _localctx = new AnyOperatorContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_anyOperator);
		try {
			setState(6271);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND_:
			case OR_:
			case NOT_:
			case TILDE_:
			case VERTICAL_BAR_:
			case AMPERSAND_:
			case SIGNED_LEFT_SHIFT_:
			case SIGNED_RIGHT_SHIFT_:
			case CARET_:
			case MOD_:
			case COLON_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case BACKSLASH_:
			case DOT_:
			case DOT_ASTERISK_:
			case SAFE_EQ_:
			case DEQ_:
			case EQ_:
			case CQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case POUND_:
			case LP_:
			case RP_:
			case LBE_:
			case RBE_:
			case LBT_:
			case RBT_:
			case COMMA_:
			case DQ_:
			case SQ_:
			case BQ_:
			case QUESTION_:
			case AT_:
			case SEMI_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case TYPE_CAST_:
				enterOuterAlt(_localctx, 1);
				{
				setState(6266);
				allOp();
				}
				break;
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(6267);
				colId();
				setState(6268);
				match(DOT_);
				setState(6269);
				anyOperator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameClauseContext extends ParserRuleContext {
		public FrameExtentContext frameExtent() {
			return getRuleContext(FrameExtentContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(DDLStatementParser.RANGE, 0); }
		public TerminalNode ROWS() { return getToken(DDLStatementParser.ROWS, 0); }
		public TerminalNode GROUPS() { return getToken(DDLStatementParser.GROUPS, 0); }
		public WindowExclusionClauseContext windowExclusionClause() {
			return getRuleContext(WindowExclusionClauseContext.class,0);
		}
		public FrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFrameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFrameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameClauseContext frameClause() throws RecognitionException {
		FrameClauseContext _localctx = new FrameClauseContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_frameClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6273);
			_la = _input.LA(1);
			if ( !(_la==ROWS || _la==RANGE || _la==GROUPS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6274);
			frameExtent();
			setState(6276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE) {
				{
				setState(6275);
				windowExclusionClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameExtentContext extends ParserRuleContext {
		public List<FrameBoundContext> frameBound() {
			return getRuleContexts(FrameBoundContext.class);
		}
		public FrameBoundContext frameBound(int i) {
			return getRuleContext(FrameBoundContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(DDLStatementParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(DDLStatementParser.AND, 0); }
		public FrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameExtent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFrameExtent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFrameExtent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameExtentContext frameExtent() throws RecognitionException {
		FrameExtentContext _localctx = new FrameExtentContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_frameExtent);
		try {
			setState(6284);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case CARET_:
			case MOD_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case LP_:
			case QUESTION_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case UNIQUE:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(6278);
				frameBound();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(6279);
				match(BETWEEN);
				setState(6280);
				frameBound();
				setState(6281);
				match(AND);
				setState(6282);
				frameBound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBoundContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(DDLStatementParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(DDLStatementParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(DDLStatementParser.FOLLOWING, 0); }
		public TerminalNode CURRENT() { return getToken(DDLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public FrameBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFrameBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFrameBound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFrameBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBoundContext frameBound() throws RecognitionException {
		FrameBoundContext _localctx = new FrameBoundContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_frameBound);
		try {
			setState(6298);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6286);
				match(UNBOUNDED);
				setState(6287);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6288);
				match(UNBOUNDED);
				setState(6289);
				match(FOLLOWING);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6290);
				match(CURRENT);
				setState(6291);
				match(ROW);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6292);
				aExpr(0);
				setState(6293);
				match(PRECEDING);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6295);
				aExpr(0);
				setState(6296);
				match(FOLLOWING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowExclusionClauseContext extends ParserRuleContext {
		public TerminalNode EXCLUDE() { return getToken(DDLStatementParser.EXCLUDE, 0); }
		public TerminalNode CURRENT() { return getToken(DDLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode GROUP() { return getToken(DDLStatementParser.GROUP, 0); }
		public TerminalNode TIES() { return getToken(DDLStatementParser.TIES, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(DDLStatementParser.OTHERS, 0); }
		public WindowExclusionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowExclusionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWindowExclusionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWindowExclusionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWindowExclusionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowExclusionClauseContext windowExclusionClause() throws RecognitionException {
		WindowExclusionClauseContext _localctx = new WindowExclusionClauseContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_windowExclusionClause);
		try {
			setState(6310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6300);
				match(EXCLUDE);
				setState(6301);
				match(CURRENT);
				setState(6302);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6303);
				match(EXCLUDE);
				setState(6304);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6305);
				match(EXCLUDE);
				setState(6306);
				match(TIES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6307);
				match(EXCLUDE);
				setState(6308);
				match(NO);
				setState(6309);
				match(OTHERS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public RowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowContext row() throws RecognitionException {
		RowContext _localctx = new RowContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_row);
		try {
			setState(6326);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6312);
				match(ROW);
				setState(6313);
				match(LP_);
				setState(6314);
				exprList(0);
				setState(6315);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6317);
				match(ROW);
				setState(6318);
				match(LP_);
				setState(6319);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6320);
				match(LP_);
				setState(6321);
				exprList(0);
				setState(6322);
				match(COMMA_);
				setState(6323);
				aExpr(0);
				setState(6324);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplicitRowContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ExplicitRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicitRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExplicitRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExplicitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExplicitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplicitRowContext explicitRow() throws RecognitionException {
		ExplicitRowContext _localctx = new ExplicitRowContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_explicitRow);
		try {
			setState(6336);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6328);
				match(ROW);
				setState(6329);
				match(LP_);
				setState(6330);
				exprList(0);
				setState(6331);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6333);
				match(ROW);
				setState(6334);
				match(LP_);
				setState(6335);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ImplicitRowContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ImplicitRowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implicitRow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterImplicitRow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitImplicitRow(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitImplicitRow(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ImplicitRowContext implicitRow() throws RecognitionException {
		ImplicitRowContext _localctx = new ImplicitRowContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_implicitRow);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6338);
			match(LP_);
			setState(6339);
			exprList(0);
			setState(6340);
			match(COMMA_);
			setState(6341);
			aExpr(0);
			setState(6342);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubTypeContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(DDLStatementParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(DDLStatementParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public SubTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSubType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSubType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSubType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubTypeContext subType() throws RecognitionException {
		SubTypeContext _localctx = new SubTypeContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_subType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6344);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExprContext extends ParserRuleContext {
		public TerminalNode LBT_() { return getToken(DDLStatementParser.LBT_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RBT_() { return getToken(DDLStatementParser.RBT_, 0); }
		public ArrayExprListContext arrayExprList() {
			return getRuleContext(ArrayExprListContext.class,0);
		}
		public ArrayExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterArrayExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitArrayExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitArrayExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExprContext arrayExpr() throws RecognitionException {
		ArrayExprContext _localctx = new ArrayExprContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_arrayExpr);
		try {
			setState(6356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6346);
				match(LBT_);
				setState(6347);
				exprList(0);
				setState(6348);
				match(RBT_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6350);
				match(LBT_);
				setState(6351);
				arrayExprList();
				setState(6352);
				match(RBT_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6354);
				match(LBT_);
				setState(6355);
				match(RBT_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExprListContext extends ParserRuleContext {
		public List<ArrayExprContext> arrayExpr() {
			return getRuleContexts(ArrayExprContext.class);
		}
		public ArrayExprContext arrayExpr(int i) {
			return getRuleContext(ArrayExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public ArrayExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterArrayExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitArrayExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitArrayExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExprListContext arrayExprList() throws RecognitionException {
		ArrayExprListContext _localctx = new ArrayExprListContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_arrayExprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6358);
			arrayExpr();
			setState(6363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6359);
				match(COMMA_);
				setState(6360);
				arrayExpr();
				}
				}
				setState(6365);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgListContext extends ParserRuleContext {
		public List<FuncArgExprContext> funcArgExpr() {
			return getRuleContexts(FuncArgExprContext.class);
		}
		public FuncArgExprContext funcArgExpr(int i) {
			return getRuleContext(FuncArgExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public FuncArgListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncArgList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncArgList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncArgList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgListContext funcArgList() throws RecognitionException {
		FuncArgListContext _localctx = new FuncArgListContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_funcArgList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6366);
			funcArgExpr();
			setState(6371);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,562,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6367);
					match(COMMA_);
					setState(6368);
					funcArgExpr();
					}
					} 
				}
				setState(6373);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,562,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParamNameContext extends ParserRuleContext {
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public ParamNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_paramName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterParamName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitParamName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitParamName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParamNameContext paramName() throws RecognitionException {
		ParamNameContext _localctx = new ParamNameContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_paramName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6374);
			typeFunctionName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgExprContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public ParamNameContext paramName() {
			return getRuleContext(ParamNameContext.class,0);
		}
		public TerminalNode CQ_() { return getToken(DDLStatementParser.CQ_, 0); }
		public TerminalNode GTE_() { return getToken(DDLStatementParser.GTE_, 0); }
		public FuncArgExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncArgExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncArgExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncArgExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgExprContext funcArgExpr() throws RecognitionException {
		FuncArgExprContext _localctx = new FuncArgExprContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_funcArgExpr);
		try {
			setState(6385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6376);
				aExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6377);
				paramName();
				setState(6378);
				match(CQ_);
				setState(6379);
				aExpr(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6381);
				paramName();
				setState(6382);
				match(GTE_);
				setState(6383);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeListContext extends ParserRuleContext {
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeListContext typeList() throws RecognitionException {
		TypeListContext _localctx = new TypeListContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_typeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6387);
			typeName();
			setState(6392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6388);
				match(COMMA_);
				setState(6389);
				typeName();
				}
				}
				setState(6394);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncApplicationContext extends ParserRuleContext {
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public FuncArgListContext funcArgList() {
			return getRuleContext(FuncArgListContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public TerminalNode VARIADIC() { return getToken(DDLStatementParser.VARIADIC, 0); }
		public FuncArgExprContext funcArgExpr() {
			return getRuleContext(FuncArgExprContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(DDLStatementParser.DISTINCT, 0); }
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public FuncApplicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcApplication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncApplication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncApplication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncApplication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncApplicationContext funcApplication() throws RecognitionException {
		FuncApplicationContext _localctx = new FuncApplicationContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_funcApplication);
		int _la;
		try {
			setState(6450);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6395);
				funcName();
				setState(6396);
				match(LP_);
				setState(6397);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6399);
				funcName();
				setState(6400);
				match(LP_);
				setState(6401);
				funcArgList();
				setState(6403);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6402);
					sortClause();
					}
				}

				setState(6405);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6407);
				funcName();
				setState(6408);
				match(LP_);
				setState(6409);
				match(VARIADIC);
				setState(6410);
				funcArgExpr();
				setState(6412);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6411);
					sortClause();
					}
				}

				setState(6414);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6416);
				funcName();
				setState(6417);
				match(LP_);
				setState(6418);
				funcArgList();
				setState(6419);
				match(COMMA_);
				setState(6420);
				match(VARIADIC);
				setState(6421);
				funcArgExpr();
				setState(6423);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6422);
					sortClause();
					}
				}

				setState(6425);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6427);
				funcName();
				setState(6428);
				match(LP_);
				setState(6429);
				match(ALL);
				setState(6430);
				funcArgList();
				setState(6432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6431);
					sortClause();
					}
				}

				setState(6434);
				match(RP_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6436);
				funcName();
				setState(6437);
				match(LP_);
				setState(6438);
				match(DISTINCT);
				setState(6439);
				funcArgList();
				setState(6441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6440);
					sortClause();
					}
				}

				setState(6443);
				match(RP_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6445);
				funcName();
				setState(6446);
				match(LP_);
				setState(6447);
				match(ASTERISK_);
				setState(6448);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncNameContext extends ParserRuleContext {
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public FuncNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncNameContext funcName() throws RecognitionException {
		FuncNameContext _localctx = new FuncNameContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_funcName);
		try {
			setState(6456);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6452);
				typeFunctionName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6453);
				colId();
				setState(6454);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AexprConstContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public FuncArgListContext funcArgList() {
			return getRuleContext(FuncArgListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public TerminalNode TRUE() { return getToken(DDLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(DDLStatementParser.FALSE, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public AexprConstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aexprConst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAexprConst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAexprConst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAexprConst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AexprConstContext aexprConst() throws RecognitionException {
		AexprConstContext _localctx = new AexprConstContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_aexprConst);
		int _la;
		try {
			setState(6475);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6458);
				match(NUMBER_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6459);
				match(STRING_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6460);
				funcName();
				setState(6461);
				match(STRING_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6463);
				funcName();
				setState(6464);
				match(LP_);
				setState(6465);
				funcArgList();
				setState(6467);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(6466);
					sortClause();
					}
				}

				setState(6469);
				match(RP_);
				setState(6470);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6472);
				match(TRUE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6473);
				match(FALSE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6474);
				match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndirectionContext indirection() {
			return getRuleContext(IndirectionContext.class,0);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterQualifiedName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitQualifiedName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitQualifiedName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedNameContext qualifiedName() throws RecognitionException {
		QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_qualifiedName);
		try {
			setState(6481);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6477);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6478);
				colId();
				setState(6479);
				indirection(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColIdContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColIdContext colId() throws RecognitionException {
		ColIdContext _localctx = new ColIdContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_colId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6483);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeFunctionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public TypeFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTypeFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTypeFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTypeFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeFunctionNameContext typeFunctionName() throws RecognitionException {
		TypeFunctionNameContext _localctx = new TypeFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_typeFunctionName);
		try {
			setState(6488);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6485);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6486);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6487);
				typeFuncNameKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionTableContext extends ParserRuleContext {
		public FunctionExprWindowlessContext functionExprWindowless() {
			return getRuleContext(FunctionExprWindowlessContext.class,0);
		}
		public OrdinalityContext ordinality() {
			return getRuleContext(OrdinalityContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(DDLStatementParser.ROWS, 0); }
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public RowsFromListContext rowsFromList() {
			return getRuleContext(RowsFromListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public FunctionTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFunctionTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFunctionTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFunctionTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionTableContext functionTable() throws RecognitionException {
		FunctionTableContext _localctx = new FunctionTableContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_functionTable);
		try {
			setState(6502);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6490);
				functionExprWindowless();
				setState(6492);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
				case 1:
					{
					setState(6491);
					ordinality();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6494);
				match(ROWS);
				setState(6495);
				match(FROM);
				setState(6496);
				match(LP_);
				setState(6497);
				rowsFromList();
				setState(6498);
				match(RP_);
				setState(6500);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
				case 1:
					{
					setState(6499);
					ordinality();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableContext extends ParserRuleContext {
		public TerminalNode XMLTABLE() { return getToken(DDLStatementParser.XMLTABLE, 0); }
		public List<TerminalNode> LP_() { return getTokens(DDLStatementParser.LP_); }
		public TerminalNode LP_(int i) {
			return getToken(DDLStatementParser.LP_, i);
		}
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public XmlExistsArgumentContext xmlExistsArgument() {
			return getRuleContext(XmlExistsArgumentContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(DDLStatementParser.COLUMNS, 0); }
		public XmlTableColumnListContext xmlTableColumnList() {
			return getRuleContext(XmlTableColumnListContext.class,0);
		}
		public List<TerminalNode> RP_() { return getTokens(DDLStatementParser.RP_); }
		public TerminalNode RP_(int i) {
			return getToken(DDLStatementParser.RP_, i);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(DDLStatementParser.XMLNAMESPACES, 0); }
		public XmlNamespaceListContext xmlNamespaceList() {
			return getRuleContext(XmlNamespaceListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public XmlTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableContext xmlTable() throws RecognitionException {
		XmlTableContext _localctx = new XmlTableContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_xmlTable);
		try {
			setState(6525);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,579,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6504);
				match(XMLTABLE);
				setState(6505);
				match(LP_);
				setState(6506);
				cExpr();
				setState(6507);
				xmlExistsArgument();
				setState(6508);
				match(COLUMNS);
				setState(6509);
				xmlTableColumnList();
				setState(6510);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6512);
				match(XMLTABLE);
				setState(6513);
				match(LP_);
				setState(6514);
				match(XMLNAMESPACES);
				setState(6515);
				match(LP_);
				setState(6516);
				xmlNamespaceList();
				setState(6517);
				match(RP_);
				setState(6518);
				match(COMMA_);
				setState(6519);
				cExpr();
				setState(6520);
				xmlExistsArgument();
				setState(6521);
				match(COLUMNS);
				setState(6522);
				xmlTableColumnList();
				setState(6523);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableColumnListContext extends ParserRuleContext {
		public List<XmlTableColumnElContext> xmlTableColumnEl() {
			return getRuleContexts(XmlTableColumnElContext.class);
		}
		public XmlTableColumnElContext xmlTableColumnEl(int i) {
			return getRuleContext(XmlTableColumnElContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public XmlTableColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlTableColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlTableColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlTableColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnListContext xmlTableColumnList() throws RecognitionException {
		XmlTableColumnListContext _localctx = new XmlTableColumnListContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_xmlTableColumnList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6527);
			xmlTableColumnEl();
			setState(6532);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6528);
				match(COMMA_);
				setState(6529);
				xmlTableColumnEl();
				}
				}
				setState(6534);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableColumnElContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public XmlTableColumnOptionListContext xmlTableColumnOptionList() {
			return getRuleContext(XmlTableColumnOptionListContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(DDLStatementParser.ORDINALITY, 0); }
		public XmlTableColumnElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlTableColumnEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlTableColumnEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlTableColumnEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnElContext xmlTableColumnEl() throws RecognitionException {
		XmlTableColumnElContext _localctx = new XmlTableColumnElContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_xmlTableColumnEl);
		try {
			setState(6546);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,581,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6535);
				colId();
				setState(6536);
				typeName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6538);
				colId();
				setState(6539);
				typeName();
				setState(6540);
				xmlTableColumnOptionList(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6542);
				colId();
				setState(6543);
				match(FOR);
				setState(6544);
				match(ORDINALITY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableColumnOptionListContext extends ParserRuleContext {
		public XmlTableColumnOptionElContext xmlTableColumnOptionEl() {
			return getRuleContext(XmlTableColumnOptionElContext.class,0);
		}
		public XmlTableColumnOptionListContext xmlTableColumnOptionList() {
			return getRuleContext(XmlTableColumnOptionListContext.class,0);
		}
		public XmlTableColumnOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlTableColumnOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlTableColumnOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlTableColumnOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnOptionListContext xmlTableColumnOptionList() throws RecognitionException {
		return xmlTableColumnOptionList(0);
	}

	private XmlTableColumnOptionListContext xmlTableColumnOptionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		XmlTableColumnOptionListContext _localctx = new XmlTableColumnOptionListContext(_ctx, _parentState);
		XmlTableColumnOptionListContext _prevctx = _localctx;
		int _startState = 858;
		enterRecursionRule(_localctx, 858, RULE_xmlTableColumnOptionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6549);
			xmlTableColumnOptionEl();
			}
			_ctx.stop = _input.LT(-1);
			setState(6555);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,582,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new XmlTableColumnOptionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_xmlTableColumnOptionList);
					setState(6551);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6552);
					xmlTableColumnOptionEl();
					}
					} 
				}
				setState(6557);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,582,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class XmlTableColumnOptionElContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public XmlTableColumnOptionElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumnOptionEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlTableColumnOptionEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlTableColumnOptionEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlTableColumnOptionEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnOptionElContext xmlTableColumnOptionEl() throws RecognitionException {
		XmlTableColumnOptionElContext _localctx = new XmlTableColumnOptionElContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_xmlTableColumnOptionEl);
		try {
			setState(6566);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(6558);
				identifier();
				setState(6559);
				bExpr(0);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6561);
				match(DEFAULT);
				setState(6562);
				bExpr(0);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 3);
				{
				setState(6563);
				match(NOT);
				setState(6564);
				match(NULL);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 4);
				{
				setState(6565);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlNamespaceListContext extends ParserRuleContext {
		public List<XmlNamespaceElContext> xmlNamespaceEl() {
			return getRuleContexts(XmlNamespaceElContext.class);
		}
		public XmlNamespaceElContext xmlNamespaceEl(int i) {
			return getRuleContext(XmlNamespaceElContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public XmlNamespaceListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlNamespaceList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlNamespaceList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlNamespaceList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlNamespaceList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlNamespaceListContext xmlNamespaceList() throws RecognitionException {
		XmlNamespaceListContext _localctx = new XmlNamespaceListContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_xmlNamespaceList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6568);
			xmlNamespaceEl();
			setState(6573);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(6569);
				match(COMMA_);
				setState(6570);
				xmlNamespaceEl();
				}
				}
				setState(6575);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlNamespaceElContext extends ParserRuleContext {
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public XmlNamespaceElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlNamespaceEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlNamespaceEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlNamespaceEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlNamespaceEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlNamespaceElContext xmlNamespaceEl() throws RecognitionException {
		XmlNamespaceElContext _localctx = new XmlNamespaceElContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_xmlNamespaceEl);
		try {
			setState(6582);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case CARET_:
			case MOD_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case LP_:
			case QUESTION_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(6576);
				bExpr(0);
				setState(6577);
				match(AS);
				setState(6578);
				identifier();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6580);
				match(DEFAULT);
				setState(6581);
				bExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncExprContext extends ParserRuleContext {
		public FuncApplicationContext funcApplication() {
			return getRuleContext(FuncApplicationContext.class,0);
		}
		public WithinGroupClauseContext withinGroupClause() {
			return getRuleContext(WithinGroupClauseContext.class,0);
		}
		public FilterClauseContext filterClause() {
			return getRuleContext(FilterClauseContext.class,0);
		}
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public FunctionExprCommonSubexprContext functionExprCommonSubexpr() {
			return getRuleContext(FunctionExprCommonSubexprContext.class,0);
		}
		public FuncExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncExprContext funcExpr() throws RecognitionException {
		FuncExprContext _localctx = new FuncExprContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_funcExpr);
		try {
			setState(6595);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6584);
				funcApplication();
				setState(6586);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
				case 1:
					{
					setState(6585);
					withinGroupClause();
					}
					break;
				}
				setState(6589);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
				case 1:
					{
					setState(6588);
					filterClause();
					}
					break;
				}
				setState(6592);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
				case 1:
					{
					setState(6591);
					overClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6594);
				functionExprCommonSubexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithinGroupClauseContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(DDLStatementParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(DDLStatementParser.GROUP, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public WithinGroupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withinGroupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWithinGroupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWithinGroupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWithinGroupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithinGroupClauseContext withinGroupClause() throws RecognitionException {
		WithinGroupClauseContext _localctx = new WithinGroupClauseContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_withinGroupClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6597);
			match(WITHIN);
			setState(6598);
			match(GROUP);
			setState(6599);
			match(LP_);
			setState(6600);
			sortClause();
			setState(6601);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterClauseContext extends ParserRuleContext {
		public TerminalNode FILTER() { return getToken(DDLStatementParser.FILTER, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode WHERE() { return getToken(DDLStatementParser.WHERE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public FilterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFilterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFilterClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFilterClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterClauseContext filterClause() throws RecognitionException {
		FilterClauseContext _localctx = new FilterClauseContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_filterClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6603);
			match(FILTER);
			setState(6604);
			match(LP_);
			setState(6605);
			match(WHERE);
			setState(6606);
			aExpr(0);
			setState(6607);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionExprWindowlessContext extends ParserRuleContext {
		public FuncApplicationContext funcApplication() {
			return getRuleContext(FuncApplicationContext.class,0);
		}
		public FunctionExprCommonSubexprContext functionExprCommonSubexpr() {
			return getRuleContext(FunctionExprCommonSubexprContext.class,0);
		}
		public FunctionExprWindowlessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionExprWindowless; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFunctionExprWindowless(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFunctionExprWindowless(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFunctionExprWindowless(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionExprWindowlessContext functionExprWindowless() throws RecognitionException {
		FunctionExprWindowlessContext _localctx = new FunctionExprWindowlessContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_functionExprWindowless);
		try {
			setState(6611);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6609);
				funcApplication();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6610);
				functionExprCommonSubexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrdinalityContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(DDLStatementParser.ORDINALITY, 0); }
		public OrdinalityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordinality; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOrdinality(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOrdinality(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOrdinality(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrdinalityContext ordinality() throws RecognitionException {
		OrdinalityContext _localctx = new OrdinalityContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_ordinality);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6613);
			match(WITH);
			setState(6614);
			match(ORDINALITY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionExprCommonSubexprContext extends ParserRuleContext {
		public TerminalNode COLLATION() { return getToken(DDLStatementParser.COLLATION, 0); }
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<AExprContext> aExpr() {
			return getRuleContexts(AExprContext.class);
		}
		public AExprContext aExpr(int i) {
			return getRuleContext(AExprContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(DDLStatementParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(DDLStatementParser.CURRENT_TIME, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(DDLStatementParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(DDLStatementParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(DDLStatementParser.LOCALTIMESTAMP, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(DDLStatementParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(DDLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(DDLStatementParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(DDLStatementParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(DDLStatementParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CAST() { return getToken(DDLStatementParser.CAST, 0); }
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TerminalNode EXTRACT() { return getToken(DDLStatementParser.EXTRACT, 0); }
		public ExtractListContext extractList() {
			return getRuleContext(ExtractListContext.class,0);
		}
		public TerminalNode NORMALIZE() { return getToken(DDLStatementParser.NORMALIZE, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public UnicodeNormalFormContext unicodeNormalForm() {
			return getRuleContext(UnicodeNormalFormContext.class,0);
		}
		public TerminalNode OVERLAY() { return getToken(DDLStatementParser.OVERLAY, 0); }
		public OverlayListContext overlayList() {
			return getRuleContext(OverlayListContext.class,0);
		}
		public TerminalNode POSITION() { return getToken(DDLStatementParser.POSITION, 0); }
		public PositionListContext positionList() {
			return getRuleContext(PositionListContext.class,0);
		}
		public TerminalNode SUBSTRING() { return getToken(DDLStatementParser.SUBSTRING, 0); }
		public SubstrListContext substrList() {
			return getRuleContext(SubstrListContext.class,0);
		}
		public TerminalNode TREAT() { return getToken(DDLStatementParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(DDLStatementParser.TRIM, 0); }
		public TerminalNode BOTH() { return getToken(DDLStatementParser.BOTH, 0); }
		public TrimListContext trimList() {
			return getRuleContext(TrimListContext.class,0);
		}
		public TerminalNode LEADING() { return getToken(DDLStatementParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(DDLStatementParser.TRAILING, 0); }
		public TerminalNode NULLIF() { return getToken(DDLStatementParser.NULLIF, 0); }
		public TerminalNode COALESCE() { return getToken(DDLStatementParser.COALESCE, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode GREATEST() { return getToken(DDLStatementParser.GREATEST, 0); }
		public TerminalNode LEAST() { return getToken(DDLStatementParser.LEAST, 0); }
		public TerminalNode XMLCONCAT() { return getToken(DDLStatementParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(DDLStatementParser.XMLELEMENT, 0); }
		public TerminalNode NAME() { return getToken(DDLStatementParser.NAME, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public XmlAttributesContext xmlAttributes() {
			return getRuleContext(XmlAttributesContext.class,0);
		}
		public TerminalNode XMLEXISTS() { return getToken(DDLStatementParser.XMLEXISTS, 0); }
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public XmlExistsArgumentContext xmlExistsArgument() {
			return getRuleContext(XmlExistsArgumentContext.class,0);
		}
		public TerminalNode XMLFOREST() { return getToken(DDLStatementParser.XMLFOREST, 0); }
		public XmlAttributeListContext xmlAttributeList() {
			return getRuleContext(XmlAttributeListContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(DDLStatementParser.XMLPARSE, 0); }
		public DocumentOrContentContext documentOrContent() {
			return getRuleContext(DocumentOrContentContext.class,0);
		}
		public XmlWhitespaceOptionContext xmlWhitespaceOption() {
			return getRuleContext(XmlWhitespaceOptionContext.class,0);
		}
		public TerminalNode XMLPI() { return getToken(DDLStatementParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(DDLStatementParser.XMLROOT, 0); }
		public XmlRootVersionContext xmlRootVersion() {
			return getRuleContext(XmlRootVersionContext.class,0);
		}
		public XmlRootStandaloneContext xmlRootStandalone() {
			return getRuleContext(XmlRootStandaloneContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(DDLStatementParser.XMLSERIALIZE, 0); }
		public SimpleTypeNameContext simpleTypeName() {
			return getRuleContext(SimpleTypeNameContext.class,0);
		}
		public FunctionExprCommonSubexprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionExprCommonSubexpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFunctionExprCommonSubexpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFunctionExprCommonSubexpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFunctionExprCommonSubexpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionExprCommonSubexprContext functionExprCommonSubexpr() throws RecognitionException {
		FunctionExprCommonSubexprContext _localctx = new FunctionExprCommonSubexprContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_functionExprCommonSubexpr);
		int _la;
		try {
			setState(6828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6616);
				match(COLLATION);
				setState(6617);
				match(FOR);
				setState(6618);
				match(LP_);
				setState(6619);
				aExpr(0);
				setState(6620);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6622);
				match(CURRENT_DATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6623);
				match(CURRENT_TIME);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6624);
				match(CURRENT_TIME);
				setState(6625);
				match(LP_);
				setState(6626);
				match(NUMBER_);
				setState(6627);
				match(RP_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6628);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6629);
				match(CURRENT_TIMESTAMP);
				setState(6630);
				match(LP_);
				setState(6631);
				match(NUMBER_);
				setState(6632);
				match(RP_);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6633);
				match(LOCALTIME);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6634);
				match(LOCALTIME);
				setState(6635);
				match(LP_);
				setState(6636);
				match(NUMBER_);
				setState(6637);
				match(RP_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6638);
				match(LOCALTIMESTAMP);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6639);
				match(LOCALTIMESTAMP);
				setState(6640);
				match(LP_);
				setState(6641);
				match(NUMBER_);
				setState(6642);
				match(RP_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6643);
				match(CURRENT_ROLE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6644);
				match(CURRENT_USER);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6645);
				match(SESSION_USER);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6646);
				match(USER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6647);
				match(CURRENT_CATALOG);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6648);
				match(CURRENT_SCHEMA);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6649);
				match(CAST);
				setState(6650);
				match(LP_);
				setState(6651);
				aExpr(0);
				setState(6652);
				match(AS);
				setState(6653);
				typeName();
				setState(6654);
				match(RP_);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6656);
				match(EXTRACT);
				setState(6657);
				match(LP_);
				setState(6659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (KEY - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (IF - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (VARYING - 129)) | (1L << (VALUE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (ENUM - 329)) | (1L << (XML - 329)) | (1L << (ORDINALITY - 329)) | (1L << (NFC - 329)) | (1L << (NFD - 329)) | (1L << (NFKC - 329)) | (1L << (NFKD - 329)) | (1L << (REF - 329)) | (1L << (PASSING - 329)) | (1L << (VERSION - 329)) | (1L << (YES - 329)) | (1L << (STANDALONE - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OPERATOR - 329)) | (1L << (SHARE - 329)) | (1L << (ROLLUP - 329)) | (1L << (DOCUMENT - 329)) | (1L << (NORMALIZED - 329)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)) | (1L << (FAMILY - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)) | (1L << (UNENCRYPTED - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (IDENTIFIER_ - 523)))) != 0)) {
					{
					setState(6658);
					extractList();
					}
				}

				setState(6661);
				match(RP_);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6662);
				match(NORMALIZE);
				setState(6663);
				match(LP_);
				setState(6664);
				aExpr(0);
				setState(6665);
				match(RP_);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6667);
				match(NORMALIZE);
				setState(6668);
				match(LP_);
				setState(6669);
				aExpr(0);
				setState(6670);
				match(COMMA_);
				setState(6671);
				unicodeNormalForm();
				setState(6672);
				match(RP_);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6674);
				match(OVERLAY);
				setState(6675);
				match(LP_);
				setState(6676);
				overlayList();
				setState(6677);
				match(RP_);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6679);
				match(POSITION);
				setState(6680);
				match(LP_);
				setState(6681);
				positionList();
				setState(6682);
				match(RP_);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(6684);
				match(SUBSTRING);
				setState(6685);
				match(LP_);
				setState(6686);
				substrList();
				setState(6687);
				match(RP_);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(6689);
				match(TREAT);
				setState(6690);
				match(LP_);
				setState(6691);
				aExpr(0);
				setState(6692);
				match(AS);
				setState(6693);
				typeName();
				setState(6694);
				match(RP_);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(6696);
				match(TRIM);
				setState(6697);
				match(LP_);
				setState(6698);
				match(BOTH);
				setState(6699);
				trimList();
				setState(6700);
				match(RP_);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(6702);
				match(TRIM);
				setState(6703);
				match(LP_);
				setState(6704);
				match(LEADING);
				setState(6705);
				trimList();
				setState(6706);
				match(RP_);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(6708);
				match(TRIM);
				setState(6709);
				match(LP_);
				setState(6710);
				match(TRAILING);
				setState(6711);
				trimList();
				setState(6712);
				match(RP_);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(6714);
				match(TRIM);
				setState(6715);
				match(LP_);
				setState(6716);
				trimList();
				setState(6717);
				match(RP_);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(6719);
				match(NULLIF);
				setState(6720);
				match(LP_);
				setState(6721);
				aExpr(0);
				setState(6722);
				match(COMMA_);
				setState(6723);
				aExpr(0);
				setState(6724);
				match(RP_);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(6726);
				match(COALESCE);
				setState(6727);
				match(LP_);
				setState(6728);
				exprList(0);
				setState(6729);
				match(RP_);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(6731);
				match(GREATEST);
				setState(6732);
				match(LP_);
				setState(6733);
				exprList(0);
				setState(6734);
				match(RP_);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(6736);
				match(LEAST);
				setState(6737);
				match(LP_);
				setState(6738);
				exprList(0);
				setState(6739);
				match(RP_);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(6741);
				match(XMLCONCAT);
				setState(6742);
				match(LP_);
				setState(6743);
				exprList(0);
				setState(6744);
				match(RP_);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(6746);
				match(XMLELEMENT);
				setState(6747);
				match(LP_);
				setState(6748);
				match(NAME);
				setState(6749);
				identifier();
				setState(6750);
				match(RP_);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(6752);
				match(XMLELEMENT);
				setState(6753);
				match(LP_);
				setState(6754);
				match(NAME);
				setState(6755);
				identifier();
				setState(6756);
				match(COMMA_);
				setState(6757);
				xmlAttributes();
				setState(6758);
				match(RP_);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(6760);
				match(XMLELEMENT);
				setState(6761);
				match(LP_);
				setState(6762);
				match(NAME);
				setState(6763);
				identifier();
				setState(6764);
				match(COMMA_);
				setState(6765);
				exprList(0);
				setState(6766);
				match(RP_);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(6768);
				match(XMLELEMENT);
				setState(6769);
				match(LP_);
				setState(6770);
				match(NAME);
				setState(6771);
				identifier();
				setState(6772);
				match(COMMA_);
				setState(6773);
				xmlAttributes();
				setState(6774);
				match(COMMA_);
				setState(6775);
				exprList(0);
				setState(6776);
				match(RP_);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(6778);
				match(XMLEXISTS);
				setState(6779);
				match(LP_);
				setState(6780);
				cExpr();
				setState(6781);
				xmlExistsArgument();
				setState(6782);
				match(RP_);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(6784);
				match(XMLFOREST);
				setState(6785);
				match(LP_);
				setState(6786);
				xmlAttributeList();
				setState(6787);
				match(RP_);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(6789);
				match(XMLPARSE);
				setState(6790);
				match(LP_);
				setState(6791);
				documentOrContent();
				setState(6792);
				aExpr(0);
				setState(6793);
				xmlWhitespaceOption();
				setState(6794);
				match(RP_);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(6796);
				match(XMLPI);
				setState(6797);
				match(LP_);
				setState(6798);
				match(NAME);
				setState(6799);
				identifier();
				setState(6800);
				match(RP_);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(6802);
				match(XMLPI);
				setState(6803);
				match(LP_);
				setState(6804);
				match(NAME);
				setState(6805);
				identifier();
				setState(6806);
				match(COMMA_);
				setState(6807);
				aExpr(0);
				setState(6808);
				match(RP_);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(6810);
				match(XMLROOT);
				setState(6811);
				match(LP_);
				setState(6812);
				aExpr(0);
				setState(6813);
				match(COMMA_);
				setState(6814);
				xmlRootVersion();
				setState(6816);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(6815);
					xmlRootStandalone();
					}
				}

				setState(6818);
				match(RP_);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(6820);
				match(XMLSERIALIZE);
				setState(6821);
				match(LP_);
				setState(6822);
				documentOrContent();
				setState(6823);
				aExpr(0);
				setState(6824);
				match(AS);
				setState(6825);
				simpleTypeName();
				setState(6826);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeNameContext extends ParserRuleContext {
		public SimpleTypeNameContext simpleTypeName() {
			return getRuleContext(SimpleTypeNameContext.class,0);
		}
		public OptArrayBoundsContext optArrayBounds() {
			return getRuleContext(OptArrayBoundsContext.class,0);
		}
		public TerminalNode SETOF() { return getToken(DDLStatementParser.SETOF, 0); }
		public TerminalNode ARRAY() { return getToken(DDLStatementParser.ARRAY, 0); }
		public TerminalNode LBT_() { return getToken(DDLStatementParser.LBT_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode RBT_() { return getToken(DDLStatementParser.RBT_, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeNameContext typeName() throws RecognitionException {
		TypeNameContext _localctx = new TypeNameContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_typeName);
		try {
			setState(6857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6830);
				simpleTypeName();
				setState(6831);
				optArrayBounds(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6833);
				match(SETOF);
				setState(6834);
				simpleTypeName();
				setState(6835);
				optArrayBounds(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6837);
				simpleTypeName();
				setState(6838);
				match(ARRAY);
				setState(6839);
				match(LBT_);
				setState(6840);
				match(NUMBER_);
				setState(6841);
				match(RBT_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6843);
				match(SETOF);
				setState(6844);
				simpleTypeName();
				setState(6845);
				match(ARRAY);
				setState(6846);
				match(LBT_);
				setState(6847);
				match(NUMBER_);
				setState(6848);
				match(RBT_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6850);
				simpleTypeName();
				setState(6851);
				match(ARRAY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6853);
				match(SETOF);
				setState(6854);
				simpleTypeName();
				setState(6855);
				match(ARRAY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleTypeNameContext extends ParserRuleContext {
		public GenericTypeContext genericType() {
			return getRuleContext(GenericTypeContext.class,0);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public BitContext bit() {
			return getRuleContext(BitContext.class,0);
		}
		public CharacterContext character() {
			return getRuleContext(CharacterContext.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public ConstIntervalContext constInterval() {
			return getRuleContext(ConstIntervalContext.class,0);
		}
		public OptIntervalContext optInterval() {
			return getRuleContext(OptIntervalContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public SimpleTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSimpleTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSimpleTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSimpleTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleTypeNameContext simpleTypeName() throws RecognitionException {
		SimpleTypeNameContext _localctx = new SimpleTypeNameContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_simpleTypeName);
		try {
			setState(6872);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6859);
				genericType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6860);
				numeric();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6861);
				bit();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6862);
				character();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6863);
				constDatetime();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6864);
				constInterval();
				setState(6865);
				optInterval();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6867);
				constInterval();
				setState(6868);
				match(LP_);
				setState(6869);
				match(NUMBER_);
				setState(6870);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExprListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public ExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExprListContext exprList() throws RecognitionException {
		return exprList(0);
	}

	private ExprListContext exprList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExprListContext _localctx = new ExprListContext(_ctx, _parentState);
		ExprListContext _prevctx = _localctx;
		int _startState = 882;
		enterRecursionRule(_localctx, 882, RULE_exprList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(6875);
			aExpr(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(6882);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,596,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExprListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_exprList);
					setState(6877);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(6878);
					match(COMMA_);
					setState(6879);
					aExpr(0);
					}
					} 
				}
				setState(6884);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,596,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExtractListContext extends ParserRuleContext {
		public ExtractArgContext extractArg() {
			return getRuleContext(ExtractArgContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public ExtractListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExtractList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExtractList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExtractList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtractListContext extractList() throws RecognitionException {
		ExtractListContext _localctx = new ExtractListContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_extractList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6885);
			extractArg();
			setState(6886);
			match(FROM);
			setState(6887);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtractArgContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(DDLStatementParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(DDLStatementParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(DDLStatementParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(DDLStatementParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(DDLStatementParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(DDLStatementParser.SECOND, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExtractArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExtractArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExtractArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExtractArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtractArgContext extractArg() throws RecognitionException {
		ExtractArgContext _localctx = new ExtractArgContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_extractArg);
		try {
			setState(6896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,597,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6889);
				match(YEAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6890);
				match(MONTH);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6891);
				match(DAY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6892);
				match(HOUR);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6893);
				match(MINUTE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6894);
				match(SECOND);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6895);
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericTypeContext extends ParserRuleContext {
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public TypeModifiersContext typeModifiers() {
			return getRuleContext(TypeModifiersContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public GenericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGenericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGenericType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGenericType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericTypeContext genericType() throws RecognitionException {
		GenericTypeContext _localctx = new GenericTypeContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_genericType);
		try {
			setState(6907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,600,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6898);
				typeFunctionName();
				setState(6900);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
				case 1:
					{
					setState(6899);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6902);
				typeFunctionName();
				setState(6903);
				attrs(0);
				setState(6905);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
				case 1:
					{
					setState(6904);
					typeModifiers();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeModifiersContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TypeModifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeModifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTypeModifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTypeModifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTypeModifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeModifiersContext typeModifiers() throws RecognitionException {
		TypeModifiersContext _localctx = new TypeModifiersContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_typeModifiers);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6909);
			match(LP_);
			setState(6910);
			exprList(0);
			setState(6911);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode INT() { return getToken(DDLStatementParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(DDLStatementParser.INTEGER, 0); }
		public TerminalNode SMALLINT() { return getToken(DDLStatementParser.SMALLINT, 0); }
		public TerminalNode BIGINT() { return getToken(DDLStatementParser.BIGINT, 0); }
		public TerminalNode REAL() { return getToken(DDLStatementParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(DDLStatementParser.FLOAT, 0); }
		public OptFloatContext optFloat() {
			return getRuleContext(OptFloatContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(DDLStatementParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(DDLStatementParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(DDLStatementParser.DECIMAL, 0); }
		public TypeModifiersContext typeModifiers() {
			return getRuleContext(TypeModifiersContext.class,0);
		}
		public TerminalNode DEC() { return getToken(DDLStatementParser.DEC, 0); }
		public TerminalNode NUMERIC() { return getToken(DDLStatementParser.NUMERIC, 0); }
		public TerminalNode BOOLEAN() { return getToken(DDLStatementParser.BOOLEAN, 0); }
		public TerminalNode FLOAT8() { return getToken(DDLStatementParser.FLOAT8, 0); }
		public TerminalNode FLOAT4() { return getToken(DDLStatementParser.FLOAT4, 0); }
		public TerminalNode INT2() { return getToken(DDLStatementParser.INT2, 0); }
		public TerminalNode INT4() { return getToken(DDLStatementParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(DDLStatementParser.INT8, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_numeric);
		try {
			setState(6940);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6913);
				match(INT);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(6914);
				match(INTEGER);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 3);
				{
				setState(6915);
				match(SMALLINT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(6916);
				match(BIGINT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(6917);
				match(REAL);
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 6);
				{
				setState(6918);
				match(FLOAT);
				setState(6919);
				optFloat();
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(6920);
				match(DOUBLE);
				setState(6921);
				match(PRECISION);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 8);
				{
				setState(6922);
				match(DECIMAL);
				setState(6924);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
				case 1:
					{
					setState(6923);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 9);
				{
				setState(6926);
				match(DEC);
				setState(6928);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
				case 1:
					{
					setState(6927);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 10);
				{
				setState(6930);
				match(NUMERIC);
				setState(6932);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
				case 1:
					{
					setState(6931);
					typeModifiers();
					}
					break;
				}
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 11);
				{
				setState(6934);
				match(BOOLEAN);
				}
				break;
			case FLOAT8:
				enterOuterAlt(_localctx, 12);
				{
				setState(6935);
				match(FLOAT8);
				}
				break;
			case FLOAT4:
				enterOuterAlt(_localctx, 13);
				{
				setState(6936);
				match(FLOAT4);
				}
				break;
			case INT2:
				enterOuterAlt(_localctx, 14);
				{
				setState(6937);
				match(INT2);
				}
				break;
			case INT4:
				enterOuterAlt(_localctx, 15);
				{
				setState(6938);
				match(INT4);
				}
				break;
			case INT8:
				enterOuterAlt(_localctx, 16);
				{
				setState(6939);
				match(INT8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstDatetimeContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(DDLStatementParser.TIMESTAMP, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TimezoneContext timezone() {
			return getRuleContext(TimezoneContext.class,0);
		}
		public TerminalNode TIME() { return getToken(DDLStatementParser.TIME, 0); }
		public TerminalNode DATE() { return getToken(DDLStatementParser.DATE, 0); }
		public ConstDatetimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constDatetime; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConstDatetime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConstDatetime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConstDatetime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstDatetimeContext constDatetime() throws RecognitionException {
		ConstDatetimeContext _localctx = new ConstDatetimeContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_constDatetime);
		try {
			setState(6965);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6942);
				match(TIMESTAMP);
				setState(6943);
				match(LP_);
				setState(6944);
				match(NUMBER_);
				setState(6945);
				match(RP_);
				setState(6947);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
				case 1:
					{
					setState(6946);
					timezone();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6949);
				match(TIMESTAMP);
				setState(6951);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
				case 1:
					{
					setState(6950);
					timezone();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6953);
				match(TIME);
				setState(6954);
				match(LP_);
				setState(6955);
				match(NUMBER_);
				setState(6956);
				match(RP_);
				setState(6958);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
				case 1:
					{
					setState(6957);
					timezone();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6960);
				match(TIME);
				setState(6962);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
				case 1:
					{
					setState(6961);
					timezone();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6964);
				match(DATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimezoneContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(DDLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(DDLStatementParser.ZONE, 0); }
		public TerminalNode WITHOUT() { return getToken(DDLStatementParser.WITHOUT, 0); }
		public TimezoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timezone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTimezone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTimezone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTimezone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimezoneContext timezone() throws RecognitionException {
		TimezoneContext _localctx = new TimezoneContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_timezone);
		try {
			setState(6973);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				enterOuterAlt(_localctx, 1);
				{
				setState(6967);
				match(WITH);
				setState(6968);
				match(TIME);
				setState(6969);
				match(ZONE);
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6970);
				match(WITHOUT);
				setState(6971);
				match(TIME);
				setState(6972);
				match(ZONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterContext extends ParserRuleContext {
		public CharacterWithLengthContext characterWithLength() {
			return getRuleContext(CharacterWithLengthContext.class,0);
		}
		public CharacterWithoutLengthContext characterWithoutLength() {
			return getRuleContext(CharacterWithoutLengthContext.class,0);
		}
		public CharacterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCharacter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCharacter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCharacter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterContext character() throws RecognitionException {
		CharacterContext _localctx = new CharacterContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_character);
		try {
			setState(6977);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,611,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6975);
				characterWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6976);
				characterWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithLengthContext extends ParserRuleContext {
		public CharacterClauseContext characterClause() {
			return getRuleContext(CharacterClauseContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public CharacterWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCharacterWithLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCharacterWithLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCharacterWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithLengthContext characterWithLength() throws RecognitionException {
		CharacterWithLengthContext _localctx = new CharacterWithLengthContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_characterWithLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6979);
			characterClause();
			setState(6980);
			match(LP_);
			setState(6981);
			match(NUMBER_);
			setState(6982);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterWithoutLengthContext extends ParserRuleContext {
		public CharacterClauseContext characterClause() {
			return getRuleContext(CharacterClauseContext.class,0);
		}
		public CharacterWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterWithoutLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCharacterWithoutLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCharacterWithoutLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCharacterWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterWithoutLengthContext characterWithoutLength() throws RecognitionException {
		CharacterWithoutLengthContext _localctx = new CharacterWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_characterWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6984);
			characterClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterClauseContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(DDLStatementParser.CHARACTER, 0); }
		public TerminalNode VARYING() { return getToken(DDLStatementParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(DDLStatementParser.CHAR, 0); }
		public TerminalNode VARCHAR() { return getToken(DDLStatementParser.VARCHAR, 0); }
		public TerminalNode NATIONAL() { return getToken(DDLStatementParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(DDLStatementParser.NCHAR, 0); }
		public CharacterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCharacterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCharacterClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCharacterClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterClauseContext characterClause() throws RecognitionException {
		CharacterClauseContext _localctx = new CharacterClauseContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_characterClause);
		try {
			setState(7009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,617,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6986);
				match(CHARACTER);
				setState(6988);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
				case 1:
					{
					setState(6987);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6990);
				match(CHAR);
				setState(6992);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,613,_ctx) ) {
				case 1:
					{
					setState(6991);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6994);
				match(VARCHAR);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6995);
				match(NATIONAL);
				setState(6996);
				match(CHARACTER);
				setState(6998);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
				case 1:
					{
					setState(6997);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7000);
				match(NATIONAL);
				setState(7001);
				match(CHAR);
				setState(7003);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
				case 1:
					{
					setState(7002);
					match(VARYING);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7005);
				match(NCHAR);
				setState(7007);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,616,_ctx) ) {
				case 1:
					{
					setState(7006);
					match(VARYING);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptFloatContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public OptFloatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optFloat; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptFloat(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptFloat(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptFloat(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptFloatContext optFloat() throws RecognitionException {
		OptFloatContext _localctx = new OptFloatContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_optFloat);
		try {
			setState(7015);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7011);
				match(LP_);
				setState(7012);
				match(NUMBER_);
				setState(7013);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AttrsContext extends ParserRuleContext {
		public TerminalNode DOT_() { return getToken(DDLStatementParser.DOT_, 0); }
		public AttrNameContext attrName() {
			return getRuleContext(AttrNameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public AttrsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAttrs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAttrs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAttrs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrsContext attrs() throws RecognitionException {
		return attrs(0);
	}

	private AttrsContext attrs(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		AttrsContext _localctx = new AttrsContext(_ctx, _parentState);
		AttrsContext _prevctx = _localctx;
		int _startState = 908;
		enterRecursionRule(_localctx, 908, RULE_attrs, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7018);
			match(DOT_);
			setState(7019);
			attrName();
			}
			_ctx.stop = _input.LT(-1);
			setState(7026);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,619,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttrsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_attrs);
					setState(7021);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7022);
					match(DOT_);
					setState(7023);
					attrName();
					}
					} 
				}
				setState(7028);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,619,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class AttrNameContext extends ParserRuleContext {
		public ColLableContext colLable() {
			return getRuleContext(ColLableContext.class,0);
		}
		public AttrNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attrName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAttrName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAttrName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAttrName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AttrNameContext attrName() throws RecognitionException {
		AttrNameContext _localctx = new AttrNameContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_attrName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7029);
			colLable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColLableContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public ColLableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colLable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColLable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColLable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColLable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColLableContext colLable() throws RecognitionException {
		ColLableContext _localctx = new ColLableContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_colLable);
		try {
			setState(7035);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(7031);
				identifier();
				}
				break;
			case POSITION:
			case PRECISION:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case EXISTS:
			case BETWEEN:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case NULLIF:
			case NATIONAL:
			case NCHAR:
			case COALESCE:
			case GROUPING:
			case DEC:
			case ROW:
			case EXTRACT:
			case INT:
			case FLOAT:
			case VARCHAR:
			case BIT:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case XMLATTRIBUTES:
			case GREATEST:
			case LEAST:
			case XMLTABLE:
			case XMLNAMESPACES:
			case NONE:
			case OUT:
			case INOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7032);
				colNameKeyword();
				}
				break;
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IS:
			case LIKE:
			case COLLATION:
			case OVERLAPS:
			case BINARY:
			case CONCURRENTLY:
			case TABLESAMPLE:
			case CURRENT_SCHEMA:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7033);
				typeFuncNameKeyword();
				}
				break;
			case SELECT:
			case CREATE:
			case GRANT:
			case TABLE:
			case COLUMN:
			case CONSTRAINT:
			case PRIMARY:
			case UNIQUE:
			case FOREIGN:
			case INTO:
			case WITH:
			case UNION:
			case DISTINCT:
			case CASE:
			case WHEN:
			case CAST:
			case FROM:
			case USING:
			case WHERE:
			case AS:
			case ON:
			case ELSE:
			case THEN:
			case FOR:
			case TO:
			case AND:
			case OR:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case IN:
			case ALL:
			case ANY:
			case ORDER:
			case GROUP:
			case ASC:
			case DESC:
			case HAVING:
			case LIMIT:
			case OFFSET:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case DEFAULT:
			case DO:
			case CURRENT_USER:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case BOTH:
			case LEADING:
			case TRAILING:
			case INTERSECT:
			case EXCEPT:
			case FETCH:
			case WINDOW:
			case SOME:
			case END:
			case CHECK:
			case REFERENCES:
			case USER:
			case COLLATE:
			case DEFERRABLE:
			case INITIALLY:
			case ONLY:
			case SESSION_USER:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case SYMMETRIC:
			case ASYMMETRIC:
			case VARIADIC:
			case PLACING:
			case RETURNING:
			case LATERAL:
			case ANALYSE:
			case ANALYZE:
				enterOuterAlt(_localctx, 4);
				{
				setState(7034);
				reservedKeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitContext extends ParserRuleContext {
		public BitWithLengthContext bitWithLength() {
			return getRuleContext(BitWithLengthContext.class,0);
		}
		public BitWithoutLengthContext bitWithoutLength() {
			return getRuleContext(BitWithoutLengthContext.class,0);
		}
		public BitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterBit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitBit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitBit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitContext bit() throws RecognitionException {
		BitContext _localctx = new BitContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_bit);
		try {
			setState(7039);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7037);
				bitWithLength();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7038);
				bitWithoutLength();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitWithLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(DDLStatementParser.BIT, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode VARYING() { return getToken(DDLStatementParser.VARYING, 0); }
		public BitWithLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterBitWithLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitBitWithLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitBitWithLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithLengthContext bitWithLength() throws RecognitionException {
		BitWithLengthContext _localctx = new BitWithLengthContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_bitWithLength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7041);
			match(BIT);
			setState(7043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VARYING) {
				{
				setState(7042);
				match(VARYING);
				}
			}

			setState(7045);
			match(LP_);
			setState(7046);
			exprList(0);
			setState(7047);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitWithoutLengthContext extends ParserRuleContext {
		public TerminalNode BIT() { return getToken(DDLStatementParser.BIT, 0); }
		public TerminalNode VARYING() { return getToken(DDLStatementParser.VARYING, 0); }
		public BitWithoutLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitWithoutLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterBitWithoutLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitBitWithoutLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitBitWithoutLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitWithoutLengthContext bitWithoutLength() throws RecognitionException {
		BitWithoutLengthContext _localctx = new BitWithoutLengthContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_bitWithoutLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7049);
			match(BIT);
			setState(7051);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
			case 1:
				{
				setState(7050);
				match(VARYING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstIntervalContext extends ParserRuleContext {
		public TerminalNode INTERVAL() { return getToken(DDLStatementParser.INTERVAL, 0); }
		public ConstIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConstInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConstInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConstInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstIntervalContext constInterval() throws RecognitionException {
		ConstIntervalContext _localctx = new ConstIntervalContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_constInterval);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7053);
			match(INTERVAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptIntervalContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(DDLStatementParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(DDLStatementParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(DDLStatementParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(DDLStatementParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(DDLStatementParser.MINUTE, 0); }
		public IntervalSecondContext intervalSecond() {
			return getRuleContext(IntervalSecondContext.class,0);
		}
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public OptIntervalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optInterval; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptInterval(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptInterval(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptInterval(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptIntervalContext optInterval() throws RecognitionException {
		OptIntervalContext _localctx = new OptIntervalContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_optInterval);
		try {
			setState(7083);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,624,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7055);
				match(YEAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7056);
				match(MONTH);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7057);
				match(DAY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7058);
				match(HOUR);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7059);
				match(MINUTE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7060);
				intervalSecond();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7061);
				match(YEAR);
				setState(7062);
				match(TO);
				setState(7063);
				match(MONTH);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7064);
				match(DAY);
				setState(7065);
				match(TO);
				setState(7066);
				match(HOUR);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7067);
				match(DAY);
				setState(7068);
				match(TO);
				setState(7069);
				match(MINUTE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7070);
				match(DAY);
				setState(7071);
				match(TO);
				setState(7072);
				intervalSecond();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7073);
				match(HOUR);
				setState(7074);
				match(TO);
				setState(7075);
				match(MINUTE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7076);
				match(HOUR);
				setState(7077);
				match(TO);
				setState(7078);
				intervalSecond();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7079);
				match(MINUTE);
				setState(7080);
				match(TO);
				setState(7081);
				intervalSecond();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptArrayBoundsContext extends ParserRuleContext {
		public OptArrayBoundsContext optArrayBounds() {
			return getRuleContext(OptArrayBoundsContext.class,0);
		}
		public TerminalNode LBT_() { return getToken(DDLStatementParser.LBT_, 0); }
		public TerminalNode RBT_() { return getToken(DDLStatementParser.RBT_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public OptArrayBoundsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optArrayBounds; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptArrayBounds(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptArrayBounds(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptArrayBounds(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptArrayBoundsContext optArrayBounds() throws RecognitionException {
		return optArrayBounds(0);
	}

	private OptArrayBoundsContext optArrayBounds(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		OptArrayBoundsContext _localctx = new OptArrayBoundsContext(_ctx, _parentState);
		OptArrayBoundsContext _prevctx = _localctx;
		int _startState = 924;
		enterRecursionRule(_localctx, 924, RULE_optArrayBounds, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			}
			_ctx.stop = _input.LT(-1);
			setState(7095);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,626,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(7093);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,625,_ctx) ) {
					case 1:
						{
						_localctx = new OptArrayBoundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_optArrayBounds);
						setState(7086);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(7087);
						match(LBT_);
						setState(7088);
						match(RBT_);
						}
						break;
					case 2:
						{
						_localctx = new OptArrayBoundsContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_optArrayBounds);
						setState(7089);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(7090);
						match(LBT_);
						setState(7091);
						match(NUMBER_);
						setState(7092);
						match(RBT_);
						}
						break;
					}
					} 
				}
				setState(7097);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,626,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class IntervalSecondContext extends ParserRuleContext {
		public TerminalNode SECOND() { return getToken(DDLStatementParser.SECOND, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public IntervalSecondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalSecond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIntervalSecond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIntervalSecond(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIntervalSecond(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalSecondContext intervalSecond() throws RecognitionException {
		IntervalSecondContext _localctx = new IntervalSecondContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_intervalSecond);
		try {
			setState(7103);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,627,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7098);
				match(SECOND);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7099);
				match(SECOND);
				setState(7100);
				match(LP_);
				setState(7101);
				match(NUMBER_);
				setState(7102);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnicodeNormalFormContext extends ParserRuleContext {
		public TerminalNode NFC() { return getToken(DDLStatementParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(DDLStatementParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(DDLStatementParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(DDLStatementParser.NFKD, 0); }
		public UnicodeNormalFormContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unicodeNormalForm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterUnicodeNormalForm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitUnicodeNormalForm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitUnicodeNormalForm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnicodeNormalFormContext unicodeNormalForm() throws RecognitionException {
		UnicodeNormalFormContext _localctx = new UnicodeNormalFormContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_unicodeNormalForm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7105);
			_la = _input.LA(1);
			if ( !(((((_la - 370)) & ~0x3f) == 0 && ((1L << (_la - 370)) & ((1L << (NFC - 370)) | (1L << (NFD - 370)) | (1L << (NFKC - 370)) | (1L << (NFKD - 370)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TrimListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TrimListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTrimList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTrimList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTrimList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TrimListContext trimList() throws RecognitionException {
		TrimListContext _localctx = new TrimListContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_trimList);
		try {
			setState(7114);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,628,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7107);
				aExpr(0);
				setState(7108);
				match(FROM);
				setState(7109);
				exprList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7111);
				match(FROM);
				setState(7112);
				exprList(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7113);
				exprList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverlayListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public OverlayPlacingContext overlayPlacing() {
			return getRuleContext(OverlayPlacingContext.class,0);
		}
		public SubstrFromContext substrFrom() {
			return getRuleContext(SubstrFromContext.class,0);
		}
		public SubstrForContext substrFor() {
			return getRuleContext(SubstrForContext.class,0);
		}
		public OverlayListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlayList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOverlayList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOverlayList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOverlayList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverlayListContext overlayList() throws RecognitionException {
		OverlayListContext _localctx = new OverlayListContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_overlayList);
		try {
			setState(7125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7116);
				aExpr(0);
				setState(7117);
				overlayPlacing();
				setState(7118);
				substrFrom();
				setState(7119);
				substrFor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7121);
				aExpr(0);
				setState(7122);
				overlayPlacing();
				setState(7123);
				substrFrom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverlayPlacingContext extends ParserRuleContext {
		public TerminalNode PLACING() { return getToken(DDLStatementParser.PLACING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public OverlayPlacingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overlayPlacing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOverlayPlacing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOverlayPlacing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOverlayPlacing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverlayPlacingContext overlayPlacing() throws RecognitionException {
		OverlayPlacingContext _localctx = new OverlayPlacingContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_overlayPlacing);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7127);
			match(PLACING);
			setState(7128);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstrFromContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SubstrFromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substrFrom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSubstrFrom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSubstrFrom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSubstrFrom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstrFromContext substrFrom() throws RecognitionException {
		SubstrFromContext _localctx = new SubstrFromContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_substrFrom);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7130);
			match(FROM);
			setState(7131);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstrForContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SubstrForContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substrFor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSubstrFor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSubstrFor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSubstrFor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstrForContext substrFor() throws RecognitionException {
		SubstrForContext _localctx = new SubstrForContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_substrFor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7133);
			match(FOR);
			setState(7134);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PositionListContext extends ParserRuleContext {
		public List<BExprContext> bExpr() {
			return getRuleContexts(BExprContext.class);
		}
		public BExprContext bExpr(int i) {
			return getRuleContext(BExprContext.class,i);
		}
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public PositionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_positionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPositionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPositionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPositionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PositionListContext positionList() throws RecognitionException {
		PositionListContext _localctx = new PositionListContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_positionList);
		try {
			setState(7141);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case CARET_:
			case MOD_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case LP_:
			case QUESTION_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(7136);
				bExpr(0);
				setState(7137);
				match(IN);
				setState(7138);
				bExpr(0);
				}
				break;
			case RP_:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubstrListContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SubstrFromContext substrFrom() {
			return getRuleContext(SubstrFromContext.class,0);
		}
		public SubstrForContext substrFor() {
			return getRuleContext(SubstrForContext.class,0);
		}
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public SubstrListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_substrList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSubstrList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSubstrList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSubstrList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubstrListContext substrList() throws RecognitionException {
		SubstrListContext _localctx = new SubstrListContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_substrList);
		try {
			setState(7159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7143);
				aExpr(0);
				setState(7144);
				substrFrom();
				setState(7145);
				substrFor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7147);
				aExpr(0);
				setState(7148);
				substrFor();
				setState(7149);
				substrFrom();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7151);
				aExpr(0);
				setState(7152);
				substrFrom();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7154);
				aExpr(0);
				setState(7155);
				substrFor();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7157);
				exprList(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlAttributesContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(DDLStatementParser.XMLATTRIBUTES, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public XmlAttributeListContext xmlAttributeList() {
			return getRuleContext(XmlAttributeListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public XmlAttributesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlAttributes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlAttributes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlAttributes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlAttributes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlAttributesContext xmlAttributes() throws RecognitionException {
		XmlAttributesContext _localctx = new XmlAttributesContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_xmlAttributes);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7161);
			match(XMLATTRIBUTES);
			setState(7162);
			match(LP_);
			setState(7163);
			xmlAttributeList();
			setState(7164);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlAttributeListContext extends ParserRuleContext {
		public List<XmlAttributeElContext> xmlAttributeEl() {
			return getRuleContexts(XmlAttributeElContext.class);
		}
		public XmlAttributeElContext xmlAttributeEl(int i) {
			return getRuleContext(XmlAttributeElContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public XmlAttributeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlAttributeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlAttributeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlAttributeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlAttributeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlAttributeListContext xmlAttributeList() throws RecognitionException {
		XmlAttributeListContext _localctx = new XmlAttributeListContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_xmlAttributeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7166);
			xmlAttributeEl();
			setState(7171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7167);
				match(COMMA_);
				setState(7168);
				xmlAttributeEl();
				}
				}
				setState(7173);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlAttributeElContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public XmlAttributeElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlAttributeEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlAttributeEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlAttributeEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlAttributeEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlAttributeElContext xmlAttributeEl() throws RecognitionException {
		XmlAttributeElContext _localctx = new XmlAttributeElContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_xmlAttributeEl);
		try {
			setState(7179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7174);
				aExpr(0);
				setState(7175);
				match(AS);
				setState(7176);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7178);
				aExpr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlExistsArgumentContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(DDLStatementParser.PASSING, 0); }
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public List<XmlPassingMechContext> xmlPassingMech() {
			return getRuleContexts(XmlPassingMechContext.class);
		}
		public XmlPassingMechContext xmlPassingMech(int i) {
			return getRuleContext(XmlPassingMechContext.class,i);
		}
		public XmlExistsArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlExistsArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlExistsArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlExistsArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlExistsArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlExistsArgumentContext xmlExistsArgument() throws RecognitionException {
		XmlExistsArgumentContext _localctx = new XmlExistsArgumentContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_xmlExistsArgument);
		try {
			setState(7196);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,634,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7181);
				match(PASSING);
				setState(7182);
				cExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7183);
				match(PASSING);
				setState(7184);
				cExpr();
				setState(7185);
				xmlPassingMech();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7187);
				match(PASSING);
				setState(7188);
				xmlPassingMech();
				setState(7189);
				cExpr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7191);
				match(PASSING);
				setState(7192);
				xmlPassingMech();
				setState(7193);
				cExpr();
				setState(7194);
				xmlPassingMech();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlPassingMechContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public TerminalNode REF() { return getToken(DDLStatementParser.REF, 0); }
		public TerminalNode VALUE() { return getToken(DDLStatementParser.VALUE, 0); }
		public XmlPassingMechContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlPassingMech; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlPassingMech(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlPassingMech(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlPassingMech(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlPassingMechContext xmlPassingMech() throws RecognitionException {
		XmlPassingMechContext _localctx = new XmlPassingMechContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_xmlPassingMech);
		try {
			setState(7202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,635,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7198);
				match(BY);
				setState(7199);
				match(REF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7200);
				match(BY);
				setState(7201);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DocumentOrContentContext extends ParserRuleContext {
		public TerminalNode DOCUMENT() { return getToken(DDLStatementParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(DDLStatementParser.CONTENT, 0); }
		public DocumentOrContentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_documentOrContent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDocumentOrContent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDocumentOrContent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDocumentOrContent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DocumentOrContentContext documentOrContent() throws RecognitionException {
		DocumentOrContentContext _localctx = new DocumentOrContentContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_documentOrContent);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7204);
			_la = _input.LA(1);
			if ( !(_la==DOCUMENT || _la==CONTENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlWhitespaceOptionContext extends ParserRuleContext {
		public TerminalNode PRESERVE() { return getToken(DDLStatementParser.PRESERVE, 0); }
		public TerminalNode WHITESPACE() { return getToken(DDLStatementParser.WHITESPACE, 0); }
		public TerminalNode STRIP() { return getToken(DDLStatementParser.STRIP, 0); }
		public XmlWhitespaceOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlWhitespaceOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlWhitespaceOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlWhitespaceOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlWhitespaceOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlWhitespaceOptionContext xmlWhitespaceOption() throws RecognitionException {
		XmlWhitespaceOptionContext _localctx = new XmlWhitespaceOptionContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_xmlWhitespaceOption);
		try {
			setState(7211);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRESERVE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7206);
				match(PRESERVE);
				setState(7207);
				match(WHITESPACE);
				}
				break;
			case STRIP:
				enterOuterAlt(_localctx, 2);
				{
				setState(7208);
				match(STRIP);
				setState(7209);
				match(WHITESPACE);
				}
				break;
			case RP_:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlRootVersionContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(DDLStatementParser.VERSION, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(DDLStatementParser.VALUE, 0); }
		public XmlRootVersionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlRootVersion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlRootVersion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlRootVersion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlRootVersion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlRootVersionContext xmlRootVersion() throws RecognitionException {
		XmlRootVersionContext _localctx = new XmlRootVersionContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_xmlRootVersion);
		try {
			setState(7218);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7213);
				match(VERSION);
				setState(7214);
				aExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7215);
				match(VERSION);
				setState(7216);
				match(NO);
				setState(7217);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlRootStandaloneContext extends ParserRuleContext {
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public TerminalNode STANDALONE() { return getToken(DDLStatementParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(DDLStatementParser.YES, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(DDLStatementParser.VALUE, 0); }
		public XmlRootStandaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlRootStandalone; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterXmlRootStandalone(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitXmlRootStandalone(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitXmlRootStandalone(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlRootStandaloneContext xmlRootStandalone() throws RecognitionException {
		XmlRootStandaloneContext _localctx = new XmlRootStandaloneContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_xmlRootStandalone);
		try {
			setState(7230);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7220);
				match(COMMA_);
				setState(7221);
				match(STANDALONE);
				setState(7222);
				match(YES);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7223);
				match(COMMA_);
				setState(7224);
				match(STANDALONE);
				setState(7225);
				match(NO);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7226);
				match(COMMA_);
				setState(7227);
				match(STANDALONE);
				setState(7228);
				match(NO);
				setState(7229);
				match(VALUE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsFromItemContext extends ParserRuleContext {
		public FunctionExprWindowlessContext functionExprWindowless() {
			return getRuleContext(FunctionExprWindowlessContext.class,0);
		}
		public ColumnDefListContext columnDefList() {
			return getRuleContext(ColumnDefListContext.class,0);
		}
		public RowsFromItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsFromItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRowsFromItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRowsFromItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRowsFromItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsFromItemContext rowsFromItem() throws RecognitionException {
		RowsFromItemContext _localctx = new RowsFromItemContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_rowsFromItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7232);
			functionExprWindowless();
			setState(7233);
			columnDefList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowsFromListContext extends ParserRuleContext {
		public List<RowsFromItemContext> rowsFromItem() {
			return getRuleContexts(RowsFromItemContext.class);
		}
		public RowsFromItemContext rowsFromItem(int i) {
			return getRuleContext(RowsFromItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public RowsFromListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowsFromList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRowsFromList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRowsFromList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRowsFromList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowsFromListContext rowsFromList() throws RecognitionException {
		RowsFromListContext _localctx = new RowsFromListContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_rowsFromList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7235);
			rowsFromItem();
			setState(7240);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7236);
				match(COMMA_);
				setState(7237);
				rowsFromItem();
				}
				}
				setState(7242);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefListContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ColumnDefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnDefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnDefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnDefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefListContext columnDefList() throws RecognitionException {
		ColumnDefListContext _localctx = new ColumnDefListContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_columnDefList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7243);
			match(AS);
			setState(7244);
			match(LP_);
			setState(7245);
			tableFuncElementList();
			setState(7246);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncElementListContext extends ParserRuleContext {
		public List<TableFuncElementContext> tableFuncElement() {
			return getRuleContexts(TableFuncElementContext.class);
		}
		public TableFuncElementContext tableFuncElement(int i) {
			return getRuleContext(TableFuncElementContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TableFuncElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableFuncElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableFuncElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableFuncElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementListContext tableFuncElementList() throws RecognitionException {
		TableFuncElementListContext _localctx = new TableFuncElementListContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_tableFuncElementList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7248);
			tableFuncElement();
			setState(7253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7249);
				match(COMMA_);
				setState(7250);
				tableFuncElement();
				}
				}
				setState(7255);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableFuncElementContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public TableFuncElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableFuncElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableFuncElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableFuncElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableFuncElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableFuncElementContext tableFuncElement() throws RecognitionException {
		TableFuncElementContext _localctx = new TableFuncElementContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_tableFuncElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7256);
			colId();
			setState(7257);
			typeName();
			setState(7259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(7258);
				collateClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateClauseContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(DDLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public CollateClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collateClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCollateClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCollateClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCollateClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateClauseContext collateClause() throws RecognitionException {
		CollateClauseContext _localctx = new CollateClauseContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_collateClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7261);
			match(COLLATE);
			setState(7263);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(7262);
				match(EQ_);
				}
			}

			setState(7265);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnyNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public AnyNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAnyName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAnyName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAnyName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnyNameContext anyName() throws RecognitionException {
		AnyNameContext _localctx = new AnyNameContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_anyName);
		try {
			setState(7271);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7267);
				colId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7268);
				colId();
				setState(7269);
				attrs(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasClauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public AliasClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAliasClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAliasClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAliasClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasClauseContext aliasClause() throws RecognitionException {
		AliasClauseContext _localctx = new AliasClauseContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_aliasClause);
		try {
			setState(7287);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7273);
				match(AS);
				setState(7274);
				colId();
				setState(7275);
				match(LP_);
				setState(7276);
				nameList(0);
				setState(7277);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7279);
				match(AS);
				setState(7280);
				colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7281);
				colId();
				setState(7282);
				match(LP_);
				setState(7283);
				nameList(0);
				setState(7284);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7286);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NameListContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public NameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NameListContext nameList() throws RecognitionException {
		return nameList(0);
	}

	private NameListContext nameList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		NameListContext _localctx = new NameListContext(_ctx, _parentState);
		NameListContext _prevctx = _localctx;
		int _startState = 978;
		enterRecursionRule(_localctx, 978, RULE_nameList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7290);
			name();
			}
			_ctx.stop = _input.LT(-1);
			setState(7297);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,645,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NameListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_nameList);
					setState(7292);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7293);
					match(COMMA_);
					setState(7294);
					name();
					}
					} 
				}
				setState(7299);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,645,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class FuncAliasClauseContext extends ParserRuleContext {
		public AliasClauseContext aliasClause() {
			return getRuleContext(AliasClauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TableFuncElementListContext tableFuncElementList() {
			return getRuleContext(TableFuncElementListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public FuncAliasClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcAliasClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncAliasClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncAliasClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncAliasClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncAliasClauseContext funcAliasClause() throws RecognitionException {
		FuncAliasClauseContext _localctx = new FuncAliasClauseContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_funcAliasClause);
		try {
			setState(7317);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7300);
				aliasClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7301);
				match(AS);
				setState(7302);
				match(LP_);
				setState(7303);
				tableFuncElementList();
				setState(7304);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7306);
				match(AS);
				setState(7307);
				colId();
				setState(7308);
				match(LP_);
				setState(7309);
				tableFuncElementList();
				setState(7310);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7312);
				colId();
				setState(7313);
				match(LP_);
				setState(7314);
				tableFuncElementList();
				setState(7315);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesampleClauseContext extends ParserRuleContext {
		public TerminalNode TABLESAMPLE() { return getToken(DDLStatementParser.TABLESAMPLE, 0); }
		public FuncNameContext funcName() {
			return getRuleContext(FuncNameContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public RepeatableClauseContext repeatableClause() {
			return getRuleContext(RepeatableClauseContext.class,0);
		}
		public TablesampleClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablesampleClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTablesampleClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTablesampleClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTablesampleClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesampleClauseContext tablesampleClause() throws RecognitionException {
		TablesampleClauseContext _localctx = new TablesampleClauseContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_tablesampleClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7319);
			match(TABLESAMPLE);
			setState(7320);
			funcName();
			setState(7321);
			match(LP_);
			setState(7322);
			exprList(0);
			setState(7323);
			match(RP_);
			setState(7325);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
			case 1:
				{
				setState(7324);
				repeatableClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RepeatableClauseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(DDLStatementParser.REPEATABLE, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public RepeatableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRepeatableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRepeatableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRepeatableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RepeatableClauseContext repeatableClause() throws RecognitionException {
		RepeatableClauseContext _localctx = new RepeatableClauseContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_repeatableClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7327);
			match(REPEATABLE);
			setState(7328);
			match(LP_);
			setState(7329);
			aExpr(0);
			setState(7330);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllOrDistinctContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(DDLStatementParser.DISTINCT, 0); }
		public AllOrDistinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOrDistinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterAllOrDistinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitAllOrDistinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitAllOrDistinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllOrDistinctContext allOrDistinct() throws RecognitionException {
		AllOrDistinctContext _localctx = new AllOrDistinctContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_allOrDistinct);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7332);
			_la = _input.LA(1);
			if ( !(_la==DISTINCT || _la==ALL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(DDLStatementParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public SortbyListContext sortbyList() {
			return getRuleContext(SortbyListContext.class,0);
		}
		public SortClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSortClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSortClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSortClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortClauseContext sortClause() throws RecognitionException {
		SortClauseContext _localctx = new SortClauseContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_sortClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7334);
			match(ORDER);
			setState(7335);
			match(BY);
			setState(7336);
			sortbyList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortbyListContext extends ParserRuleContext {
		public List<SortbyContext> sortby() {
			return getRuleContexts(SortbyContext.class);
		}
		public SortbyContext sortby(int i) {
			return getRuleContext(SortbyContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public SortbyListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortbyList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSortbyList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSortbyList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSortbyList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyListContext sortbyList() throws RecognitionException {
		SortbyListContext _localctx = new SortbyListContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_sortbyList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7338);
			sortby();
			setState(7343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7339);
				match(COMMA_);
				setState(7340);
				sortby();
				}
				}
				setState(7345);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortbyContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public QualAllOpContext qualAllOp() {
			return getRuleContext(QualAllOpContext.class,0);
		}
		public NullsOrderContext nullsOrder() {
			return getRuleContext(NullsOrderContext.class,0);
		}
		public AscDescContext ascDesc() {
			return getRuleContext(AscDescContext.class,0);
		}
		public SortbyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortby; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSortby(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSortby(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSortby(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortbyContext sortby() throws RecognitionException {
		SortbyContext _localctx = new SortbyContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_sortby);
		int _la;
		try {
			setState(7359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,652,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7346);
				aExpr(0);
				setState(7347);
				match(USING);
				setState(7348);
				qualAllOp();
				setState(7350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(7349);
					nullsOrder();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7352);
				aExpr(0);
				setState(7354);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(7353);
					ascDesc();
					}
				}

				setState(7357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(7356);
					nullsOrder();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullsOrderContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(DDLStatementParser.NULLS, 0); }
		public TerminalNode FIRST() { return getToken(DDLStatementParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(DDLStatementParser.LAST, 0); }
		public NullsOrderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullsOrder; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNullsOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNullsOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNullsOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullsOrderContext nullsOrder() throws RecognitionException {
		NullsOrderContext _localctx = new NullsOrderContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_nullsOrder);
		try {
			setState(7365);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,653,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7361);
				match(NULLS);
				setState(7362);
				match(FIRST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7363);
				match(NULLS);
				setState(7364);
				match(LAST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctClauseContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(DDLStatementParser.DISTINCT, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public DistinctClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinctClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDistinctClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDistinctClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDistinctClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctClauseContext distinctClause() throws RecognitionException {
		DistinctClauseContext _localctx = new DistinctClauseContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_distinctClause);
		try {
			setState(7374);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7367);
				match(DISTINCT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7368);
				match(DISTINCT);
				setState(7369);
				match(ON);
				setState(7370);
				match(LP_);
				setState(7371);
				exprList(0);
				setState(7372);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DistinctContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(DDLStatementParser.DISTINCT, 0); }
		public DistinctContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_distinct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDistinct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDistinct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDistinct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DistinctContext distinct() throws RecognitionException {
		DistinctContext _localctx = new DistinctContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_distinct);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7376);
			match(DISTINCT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(DDLStatementParser.OVER, 0); }
		public WindowSpecificationContext windowSpecification() {
			return getRuleContext(WindowSpecificationContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOverClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOverClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOverClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_overClause);
		try {
			setState(7382);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7378);
				match(OVER);
				setState(7379);
				windowSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7380);
				match(OVER);
				setState(7381);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecificationContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public FrameClauseContext frameClause() {
			return getRuleContext(FrameClauseContext.class,0);
		}
		public WindowSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWindowSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWindowSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWindowSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecificationContext windowSpecification() throws RecognitionException {
		WindowSpecificationContext _localctx = new WindowSpecificationContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_windowSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7384);
			match(LP_);
			setState(7386);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
			case 1:
				{
				setState(7385);
				windowName();
				}
				break;
			}
			setState(7389);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(7388);
				partitionClause();
				}
			}

			setState(7392);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(7391);
				sortClause();
				}
			}

			setState(7395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS || _la==RANGE || _la==GROUPS) {
				{
				setState(7394);
				frameClause();
				}
			}

			setState(7397);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7399);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(DDLStatementParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_partitionClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7401);
			match(PARTITION);
			setState(7402);
			match(BY);
			setState(7403);
			exprList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexParamsContext extends ParserRuleContext {
		public List<IndexElemContext> indexElem() {
			return getRuleContexts(IndexElemContext.class);
		}
		public IndexElemContext indexElem(int i) {
			return getRuleContext(IndexElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public IndexParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexParams; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexParams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexParamsContext indexParams() throws RecognitionException {
		IndexParamsContext _localctx = new IndexParamsContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_indexParams);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7405);
			indexElem();
			setState(7410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7406);
				match(COMMA_);
				setState(7407);
				indexElem();
				}
				}
				setState(7412);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexElemOptionsContext extends ParserRuleContext {
		public OptClassContext optClass() {
			return getRuleContext(OptClassContext.class,0);
		}
		public CollateContext collate() {
			return getRuleContext(CollateContext.class,0);
		}
		public AscDescContext ascDesc() {
			return getRuleContext(AscDescContext.class,0);
		}
		public NullsOrderContext nullsOrder() {
			return getRuleContext(NullsOrderContext.class,0);
		}
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public ReloptionsContext reloptions() {
			return getRuleContext(ReloptionsContext.class,0);
		}
		public IndexElemOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexElemOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexElemOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexElemOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexElemOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexElemOptionsContext indexElemOptions() throws RecognitionException {
		IndexElemOptionsContext _localctx = new IndexElemOptionsContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_indexElemOptions);
		int _la;
		try {
			setState(7434);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7414);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(7413);
					collate();
					}
				}

				setState(7416);
				optClass();
				setState(7418);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(7417);
					ascDesc();
					}
				}

				setState(7421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(7420);
					nullsOrder();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7424);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(7423);
					collate();
					}
				}

				setState(7426);
				anyName();
				setState(7427);
				reloptions();
				setState(7429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(7428);
					ascDesc();
					}
				}

				setState(7432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(7431);
					nullsOrder();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexElemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public IndexElemOptionsContext indexElemOptions() {
			return getRuleContext(IndexElemOptionsContext.class,0);
		}
		public FunctionExprWindowlessContext functionExprWindowless() {
			return getRuleContext(FunctionExprWindowlessContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public IndexElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIndexElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIndexElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIndexElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexElemContext indexElem() throws RecognitionException {
		IndexElemContext _localctx = new IndexElemContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_indexElem);
		try {
			setState(7447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7436);
				colId();
				setState(7437);
				indexElemOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7439);
				functionExprWindowless();
				setState(7440);
				indexElemOptions();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7442);
				match(LP_);
				setState(7443);
				aExpr(0);
				setState(7444);
				match(RP_);
				setState(7445);
				indexElemOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateContext extends ParserRuleContext {
		public TerminalNode COLLATE() { return getToken(DDLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public CollateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCollate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCollate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCollate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateContext collate() throws RecognitionException {
		CollateContext _localctx = new CollateContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_collate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7449);
			match(COLLATE);
			setState(7450);
			anyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptClassContext extends ParserRuleContext {
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public OptClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptClassContext optClass() throws RecognitionException {
		OptClassContext _localctx = new OptClassContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_optClass);
		try {
			setState(7454);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7452);
				anyName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionsContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ReloptionListContext reloptionList() {
			return getRuleContext(ReloptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ReloptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReloptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReloptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReloptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionsContext reloptions() throws RecognitionException {
		ReloptionsContext _localctx = new ReloptionsContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_reloptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7456);
			match(LP_);
			setState(7457);
			reloptionList();
			setState(7458);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionListContext extends ParserRuleContext {
		public List<ReloptionElemContext> reloptionElem() {
			return getRuleContexts(ReloptionElemContext.class);
		}
		public ReloptionElemContext reloptionElem(int i) {
			return getRuleContext(ReloptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public ReloptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReloptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReloptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReloptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionListContext reloptionList() throws RecognitionException {
		ReloptionListContext _localctx = new ReloptionListContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_reloptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7460);
			reloptionElem();
			setState(7465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7461);
				match(COMMA_);
				setState(7462);
				reloptionElem();
				}
				}
				setState(7467);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReloptionElemContext extends ParserRuleContext {
		public List<AliasContext> alias() {
			return getRuleContexts(AliasContext.class);
		}
		public AliasContext alias(int i) {
			return getRuleContext(AliasContext.class,i);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public DefArgContext defArg() {
			return getRuleContext(DefArgContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DDLStatementParser.DOT_, 0); }
		public ReloptionElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reloptionElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReloptionElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReloptionElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReloptionElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReloptionElemContext reloptionElem() throws RecognitionException {
		ReloptionElemContext _localctx = new ReloptionElemContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_reloptionElem);
		try {
			setState(7483);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7468);
				alias();
				setState(7469);
				match(EQ_);
				setState(7470);
				defArg();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7472);
				alias();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7473);
				alias();
				setState(7474);
				match(DOT_);
				setState(7475);
				alias();
				setState(7476);
				match(EQ_);
				setState(7477);
				defArg();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7479);
				alias();
				setState(7480);
				match(DOT_);
				setState(7481);
				alias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefArgContext extends ParserRuleContext {
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public QualAllOpContext qualAllOp() {
			return getRuleContext(QualAllOpContext.class,0);
		}
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode NONE() { return getToken(DDLStatementParser.NONE, 0); }
		public DefArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefArgContext defArg() throws RecognitionException {
		DefArgContext _localctx = new DefArgContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_defArg);
		try {
			setState(7491);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7485);
				funcType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7486);
				reservedKeyword();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7487);
				qualAllOp();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7488);
				match(NUMBER_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7489);
				match(STRING_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7490);
				match(NONE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncTypeContext extends ParserRuleContext {
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public TypeFunctionNameContext typeFunctionName() {
			return getRuleContext(TypeFunctionNameContext.class,0);
		}
		public AttrsContext attrs() {
			return getRuleContext(AttrsContext.class,0);
		}
		public TerminalNode MOD_() { return getToken(DDLStatementParser.MOD_, 0); }
		public TerminalNode TYPE() { return getToken(DDLStatementParser.TYPE, 0); }
		public TerminalNode SETOF() { return getToken(DDLStatementParser.SETOF, 0); }
		public FuncTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncTypeContext funcType() throws RecognitionException {
		FuncTypeContext _localctx = new FuncTypeContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_funcType);
		try {
			setState(7505);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7493);
				typeName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7494);
				typeFunctionName();
				setState(7495);
				attrs(0);
				setState(7496);
				match(MOD_);
				setState(7497);
				match(TYPE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7499);
				match(SETOF);
				setState(7500);
				typeFunctionName();
				setState(7501);
				attrs(0);
				setState(7502);
				match(MOD_);
				setState(7503);
				match(TYPE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectWithParensContext extends ParserRuleContext {
		public SelectWithParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectWithParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSelectWithParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSelectWithParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSelectWithParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectWithParensContext selectWithParens() throws RecognitionException {
		SelectWithParensContext _localctx = new SelectWithParensContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_selectWithParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7507);
			match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeNameContext dataTypeName() {
			return getRuleContext(DataTypeNameContext.class,0);
		}
		public DataTypeLengthContext dataTypeLength() {
			return getRuleContext(DataTypeLengthContext.class,0);
		}
		public CharacterSetContext characterSet() {
			return getRuleContext(CharacterSetContext.class,0);
		}
		public CollateClauseContext collateClause() {
			return getRuleContext(CollateClauseContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<TerminalNode> STRING_() { return getTokens(DDLStatementParser.STRING_); }
		public TerminalNode STRING_(int i) {
			return getToken(DDLStatementParser.STRING_, i);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_dataType);
		int _la;
		try {
			setState(7536);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7509);
				dataTypeName();
				setState(7511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(7510);
					dataTypeLength();
					}
				}

				setState(7514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR || _la==CHARACTER) {
					{
					setState(7513);
					characterSet();
					}
				}

				setState(7517);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,676,_ctx) ) {
				case 1:
					{
					setState(7516);
					collateClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7519);
				dataTypeName();
				setState(7520);
				match(LP_);
				setState(7521);
				match(STRING_);
				setState(7526);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA_) {
					{
					{
					setState(7522);
					match(COMMA_);
					setState(7523);
					match(STRING_);
					}
					}
					setState(7528);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7529);
				match(RP_);
				setState(7531);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHAR || _la==CHARACTER) {
					{
					setState(7530);
					characterSet();
					}
				}

				setState(7534);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
				case 1:
					{
					setState(7533);
					collateClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeNameContext extends ParserRuleContext {
		public TerminalNode INT() { return getToken(DDLStatementParser.INT, 0); }
		public TerminalNode INT2() { return getToken(DDLStatementParser.INT2, 0); }
		public TerminalNode INT4() { return getToken(DDLStatementParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(DDLStatementParser.INT8, 0); }
		public TerminalNode SMALLINT() { return getToken(DDLStatementParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(DDLStatementParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(DDLStatementParser.BIGINT, 0); }
		public TerminalNode DECIMAL() { return getToken(DDLStatementParser.DECIMAL, 0); }
		public TerminalNode NUMERIC() { return getToken(DDLStatementParser.NUMERIC, 0); }
		public TerminalNode REAL() { return getToken(DDLStatementParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(DDLStatementParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(DDLStatementParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(DDLStatementParser.FLOAT8, 0); }
		public TerminalNode DOUBLE() { return getToken(DDLStatementParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(DDLStatementParser.PRECISION, 0); }
		public TerminalNode SMALLSERIAL() { return getToken(DDLStatementParser.SMALLSERIAL, 0); }
		public TerminalNode SERIAL() { return getToken(DDLStatementParser.SERIAL, 0); }
		public TerminalNode BIGSERIAL() { return getToken(DDLStatementParser.BIGSERIAL, 0); }
		public TerminalNode MONEY() { return getToken(DDLStatementParser.MONEY, 0); }
		public TerminalNode VARCHAR() { return getToken(DDLStatementParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(DDLStatementParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DDLStatementParser.CHAR, 0); }
		public TerminalNode TEXT() { return getToken(DDLStatementParser.TEXT, 0); }
		public TerminalNode NAME() { return getToken(DDLStatementParser.NAME, 0); }
		public TerminalNode BYTEA() { return getToken(DDLStatementParser.BYTEA, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DDLStatementParser.TIMESTAMP, 0); }
		public TerminalNode DATE() { return getToken(DDLStatementParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(DDLStatementParser.TIME, 0); }
		public TerminalNode INTERVAL() { return getToken(DDLStatementParser.INTERVAL, 0); }
		public TerminalNode BOOLEAN() { return getToken(DDLStatementParser.BOOLEAN, 0); }
		public TerminalNode ENUM() { return getToken(DDLStatementParser.ENUM, 0); }
		public TerminalNode POINT() { return getToken(DDLStatementParser.POINT, 0); }
		public TerminalNode LINE() { return getToken(DDLStatementParser.LINE, 0); }
		public TerminalNode LSEG() { return getToken(DDLStatementParser.LSEG, 0); }
		public TerminalNode BOX() { return getToken(DDLStatementParser.BOX, 0); }
		public TerminalNode PATH() { return getToken(DDLStatementParser.PATH, 0); }
		public TerminalNode POLYGON() { return getToken(DDLStatementParser.POLYGON, 0); }
		public TerminalNode CIRCLE() { return getToken(DDLStatementParser.CIRCLE, 0); }
		public TerminalNode CIDR() { return getToken(DDLStatementParser.CIDR, 0); }
		public TerminalNode INET() { return getToken(DDLStatementParser.INET, 0); }
		public TerminalNode MACADDR() { return getToken(DDLStatementParser.MACADDR, 0); }
		public TerminalNode MACADDR8() { return getToken(DDLStatementParser.MACADDR8, 0); }
		public TerminalNode BIT() { return getToken(DDLStatementParser.BIT, 0); }
		public TerminalNode VARBIT() { return getToken(DDLStatementParser.VARBIT, 0); }
		public TerminalNode TSVECTOR() { return getToken(DDLStatementParser.TSVECTOR, 0); }
		public TerminalNode TSQUERY() { return getToken(DDLStatementParser.TSQUERY, 0); }
		public TerminalNode XML() { return getToken(DDLStatementParser.XML, 0); }
		public TerminalNode JSON() { return getToken(DDLStatementParser.JSON, 0); }
		public TerminalNode INT4RANGE() { return getToken(DDLStatementParser.INT4RANGE, 0); }
		public TerminalNode INT8RANGE() { return getToken(DDLStatementParser.INT8RANGE, 0); }
		public TerminalNode NUMRANGE() { return getToken(DDLStatementParser.NUMRANGE, 0); }
		public TerminalNode TSRANGE() { return getToken(DDLStatementParser.TSRANGE, 0); }
		public TerminalNode TSTZRANGE() { return getToken(DDLStatementParser.TSTZRANGE, 0); }
		public TerminalNode DATERANGE() { return getToken(DDLStatementParser.DATERANGE, 0); }
		public TerminalNode ARRAY() { return getToken(DDLStatementParser.ARRAY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConstDatetimeContext constDatetime() {
			return getRuleContext(ConstDatetimeContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public DataTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDataTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDataTypeName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDataTypeName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeNameContext dataTypeName() throws RecognitionException {
		DataTypeNameContext _localctx = new DataTypeNameContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_dataTypeName);
		try {
			setState(7596);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7538);
				match(INT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7539);
				match(INT2);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7540);
				match(INT4);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7541);
				match(INT8);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7542);
				match(SMALLINT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7543);
				match(INTEGER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7544);
				match(BIGINT);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7545);
				match(DECIMAL);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7546);
				match(NUMERIC);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7547);
				match(REAL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7548);
				match(FLOAT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7549);
				match(FLOAT4);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7550);
				match(FLOAT8);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7551);
				match(DOUBLE);
				setState(7552);
				match(PRECISION);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7553);
				match(SMALLSERIAL);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7554);
				match(SERIAL);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(7555);
				match(BIGSERIAL);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(7556);
				match(MONEY);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(7557);
				match(VARCHAR);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(7558);
				match(CHARACTER);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(7559);
				match(CHAR);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(7560);
				match(TEXT);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(7561);
				match(NAME);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(7562);
				match(BYTEA);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(7563);
				match(TIMESTAMP);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(7564);
				match(DATE);
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(7565);
				match(TIME);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(7566);
				match(INTERVAL);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(7567);
				match(BOOLEAN);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(7568);
				match(ENUM);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(7569);
				match(POINT);
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(7570);
				match(LINE);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(7571);
				match(LSEG);
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(7572);
				match(BOX);
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(7573);
				match(PATH);
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(7574);
				match(POLYGON);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(7575);
				match(CIRCLE);
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(7576);
				match(CIDR);
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(7577);
				match(INET);
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(7578);
				match(MACADDR);
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(7579);
				match(MACADDR8);
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(7580);
				match(BIT);
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(7581);
				match(VARBIT);
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(7582);
				match(TSVECTOR);
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(7583);
				match(TSQUERY);
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(7584);
				match(XML);
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(7585);
				match(JSON);
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(7586);
				match(INT4RANGE);
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(7587);
				match(INT8RANGE);
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(7588);
				match(NUMRANGE);
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(7589);
				match(TSRANGE);
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(7590);
				match(TSTZRANGE);
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(7591);
				match(DATERANGE);
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(7592);
				match(ARRAY);
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(7593);
				identifier();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(7594);
				constDatetime();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(7595);
				typeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeLengthContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<TerminalNode> NUMBER_() { return getTokens(DDLStatementParser.NUMBER_); }
		public TerminalNode NUMBER_(int i) {
			return getToken(DDLStatementParser.NUMBER_, i);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public DataTypeLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDataTypeLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDataTypeLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDataTypeLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeLengthContext dataTypeLength() throws RecognitionException {
		DataTypeLengthContext _localctx = new DataTypeLengthContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_dataTypeLength);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7598);
			match(LP_);
			setState(7599);
			match(NUMBER_);
			setState(7602);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA_) {
				{
				setState(7600);
				match(COMMA_);
				setState(7601);
				match(NUMBER_);
				}
			}

			setState(7604);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterSetContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public IgnoredIdentifierContext ignoredIdentifier() {
			return getRuleContext(IgnoredIdentifierContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(DDLStatementParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(DDLStatementParser.CHAR, 0); }
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public CharacterSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCharacterSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCharacterSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCharacterSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterSetContext characterSet() throws RecognitionException {
		CharacterSetContext _localctx = new CharacterSetContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_characterSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7606);
			_la = _input.LA(1);
			if ( !(_la==CHAR || _la==CHARACTER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7607);
			match(SET);
			setState(7609);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQ_) {
				{
				setState(7608);
				match(EQ_);
				}
			}

			setState(7611);
			ignoredIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IgnoredIdentifierContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT_() { return getToken(DDLStatementParser.DOT_, 0); }
		public IgnoredIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIgnoredIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIgnoredIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIgnoredIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredIdentifierContext ignoredIdentifier() throws RecognitionException {
		IgnoredIdentifierContext _localctx = new IgnoredIdentifierContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_ignoredIdentifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7613);
			identifier();
			setState(7616);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT_) {
				{
				setState(7614);
				match(DOT_);
				setState(7615);
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IgnoredIdentifiersContext extends ParserRuleContext {
		public List<IgnoredIdentifierContext> ignoredIdentifier() {
			return getRuleContexts(IgnoredIdentifierContext.class);
		}
		public IgnoredIdentifierContext ignoredIdentifier(int i) {
			return getRuleContext(IgnoredIdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public IgnoredIdentifiersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ignoredIdentifiers; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIgnoredIdentifiers(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIgnoredIdentifiers(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIgnoredIdentifiers(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IgnoredIdentifiersContext ignoredIdentifiers() throws RecognitionException {
		IgnoredIdentifiersContext _localctx = new IgnoredIdentifiersContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_ignoredIdentifiers);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7618);
			ignoredIdentifier();
			setState(7623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7619);
				match(COMMA_);
				setState(7620);
				ignoredIdentifier();
				}
				}
				setState(7625);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignedIconstContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode PLUS_() { return getToken(DDLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(DDLStatementParser.MINUS_, 0); }
		public SignedIconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedIconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSignedIconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSignedIconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSignedIconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignedIconstContext signedIconst() throws RecognitionException {
		SignedIconstContext _localctx = new SignedIconstContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_signedIconst);
		try {
			setState(7631);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(7626);
				match(NUMBER_);
				}
				break;
			case PLUS_:
				enterOuterAlt(_localctx, 2);
				{
				setState(7627);
				match(PLUS_);
				setState(7628);
				match(NUMBER_);
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 3);
				{
				setState(7629);
				match(MINUS_);
				setState(7630);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanOrStringContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(DDLStatementParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(DDLStatementParser.FALSE, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public BooleanOrStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanOrString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterBooleanOrString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitBooleanOrString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitBooleanOrString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanOrStringContext booleanOrString() throws RecognitionException {
		BooleanOrStringContext _localctx = new BooleanOrStringContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_booleanOrString);
		try {
			setState(7638);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7633);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7634);
				match(FALSE);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(7635);
				match(ON);
				}
				break;
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 4);
				{
				setState(7636);
				nonReservedWord();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 5);
				{
				setState(7637);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonReservedWordContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public NonReservedWordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReservedWord; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNonReservedWord(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNonReservedWord(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNonReservedWord(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedWordContext nonReservedWord() throws RecognitionException {
		NonReservedWordContext _localctx = new NonReservedWordContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_nonReservedWord);
		try {
			setState(7644);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7640);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7641);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7642);
				colNameKeyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7643);
				typeFuncNameKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColNameKeywordContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(DDLStatementParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(DDLStatementParser.BIGINT, 0); }
		public TerminalNode BIT() { return getToken(DDLStatementParser.BIT, 0); }
		public TerminalNode BOOLEAN() { return getToken(DDLStatementParser.BOOLEAN, 0); }
		public TerminalNode CHAR() { return getToken(DDLStatementParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(DDLStatementParser.CHARACTER, 0); }
		public TerminalNode COALESCE() { return getToken(DDLStatementParser.COALESCE, 0); }
		public TerminalNode DEC() { return getToken(DDLStatementParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(DDLStatementParser.DECIMAL, 0); }
		public TerminalNode EXISTS() { return getToken(DDLStatementParser.EXISTS, 0); }
		public TerminalNode EXTRACT() { return getToken(DDLStatementParser.EXTRACT, 0); }
		public TerminalNode FLOAT() { return getToken(DDLStatementParser.FLOAT, 0); }
		public TerminalNode GREATEST() { return getToken(DDLStatementParser.GREATEST, 0); }
		public TerminalNode GROUPING() { return getToken(DDLStatementParser.GROUPING, 0); }
		public TerminalNode INOUT() { return getToken(DDLStatementParser.INOUT, 0); }
		public TerminalNode INT() { return getToken(DDLStatementParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(DDLStatementParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(DDLStatementParser.INTERVAL, 0); }
		public TerminalNode LEAST() { return getToken(DDLStatementParser.LEAST, 0); }
		public TerminalNode NATIONAL() { return getToken(DDLStatementParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(DDLStatementParser.NCHAR, 0); }
		public TerminalNode NONE() { return getToken(DDLStatementParser.NONE, 0); }
		public TerminalNode NULLIF() { return getToken(DDLStatementParser.NULLIF, 0); }
		public TerminalNode NUMERIC() { return getToken(DDLStatementParser.NUMERIC, 0); }
		public TerminalNode OUT() { return getToken(DDLStatementParser.OUT, 0); }
		public TerminalNode OVERLAY() { return getToken(DDLStatementParser.OVERLAY, 0); }
		public TerminalNode POSITION() { return getToken(DDLStatementParser.POSITION, 0); }
		public TerminalNode PRECISION() { return getToken(DDLStatementParser.PRECISION, 0); }
		public TerminalNode REAL() { return getToken(DDLStatementParser.REAL, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode SETOF() { return getToken(DDLStatementParser.SETOF, 0); }
		public TerminalNode SMALLINT() { return getToken(DDLStatementParser.SMALLINT, 0); }
		public TerminalNode SUBSTRING() { return getToken(DDLStatementParser.SUBSTRING, 0); }
		public TerminalNode TIME() { return getToken(DDLStatementParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(DDLStatementParser.TIMESTAMP, 0); }
		public TerminalNode TREAT() { return getToken(DDLStatementParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(DDLStatementParser.TRIM, 0); }
		public TerminalNode VALUES() { return getToken(DDLStatementParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(DDLStatementParser.VARCHAR, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(DDLStatementParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCONCAT() { return getToken(DDLStatementParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(DDLStatementParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(DDLStatementParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(DDLStatementParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(DDLStatementParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(DDLStatementParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(DDLStatementParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(DDLStatementParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(DDLStatementParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(DDLStatementParser.XMLTABLE, 0); }
		public ColNameKeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colNameKeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColNameKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColNameKeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColNameKeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColNameKeywordContext colNameKeyword() throws RecognitionException {
		ColNameKeywordContext _localctx = new ColNameKeywordContext(_ctx, getState());
		enterRule(_localctx, 1048, RULE_colNameKeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7646);
			_la = _input.LA(1);
			if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (POSITION - 71)) | (1L << (PRECISION - 71)) | (1L << (VALUES - 71)) | (1L << (TRIM - 71)) | (1L << (SUBSTRING - 71)) | (1L << (EXISTS - 71)) | (1L << (BETWEEN - 71)) | (1L << (BOOLEAN - 71)) | (1L << (CHAR - 71)) | (1L << (CHARACTER - 71)))) != 0) || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (INTERVAL - 135)) | (1L << (TIME - 135)) | (1L << (TIMESTAMP - 135)) | (1L << (INTEGER - 135)) | (1L << (REAL - 135)) | (1L << (DECIMAL - 135)) | (1L << (SMALLINT - 135)) | (1L << (BIGINT - 135)) | (1L << (NUMERIC - 135)) | (1L << (NULLIF - 135)) | (1L << (NATIONAL - 135)) | (1L << (NCHAR - 135)) | (1L << (COALESCE - 135)) | (1L << (GROUPING - 135)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (DEC - 202)) | (1L << (ROW - 202)) | (1L << (EXTRACT - 202)))) != 0) || ((((_la - 316)) & ~0x3f) == 0 && ((1L << (_la - 316)) & ((1L << (INT - 316)) | (1L << (FLOAT - 316)) | (1L << (VARCHAR - 316)) | (1L << (BIT - 316)) | (1L << (OVERLAY - 316)) | (1L << (XMLCONCAT - 316)) | (1L << (XMLELEMENT - 316)) | (1L << (XMLEXISTS - 316)) | (1L << (XMLFOREST - 316)) | (1L << (XMLPARSE - 316)) | (1L << (XMLPI - 316)) | (1L << (XMLROOT - 316)) | (1L << (XMLSERIALIZE - 316)) | (1L << (TREAT - 316)) | (1L << (SETOF - 316)) | (1L << (XMLATTRIBUTES - 316)))) != 0) || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (GREATEST - 380)) | (1L << (LEAST - 380)) | (1L << (XMLTABLE - 380)) | (1L << (XMLNAMESPACES - 380)) | (1L << (NONE - 380)))) != 0) || _la==OUT || _la==INOUT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatabaseNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public DatabaseNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_databaseName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDatabaseName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDatabaseName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDatabaseName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatabaseNameContext databaseName() throws RecognitionException {
		DatabaseNameContext _localctx = new DatabaseNameContext(_ctx, getState());
		enterRule(_localctx, 1050, RULE_databaseName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7648);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleSpecContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(DDLStatementParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(DDLStatementParser.SESSION_USER, 0); }
		public RoleSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRoleSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRoleSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRoleSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleSpecContext roleSpec() throws RecognitionException {
		RoleSpecContext _localctx = new RoleSpecContext(_ctx, getState());
		enterRule(_localctx, 1052, RULE_roleSpec);
		try {
			setState(7654);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,689,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7650);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7651);
				nonReservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7652);
				match(CURRENT_USER);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7653);
				match(SESSION_USER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode DOT_() { return getToken(DDLStatementParser.DOT_, 0); }
		public VarNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterVarName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitVarName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitVarName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarNameContext varName() throws RecognitionException {
		return varName(0);
	}

	private VarNameContext varName(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		VarNameContext _localctx = new VarNameContext(_ctx, _parentState);
		VarNameContext _prevctx = _localctx;
		int _startState = 1054;
		enterRecursionRule(_localctx, 1054, RULE_varName, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7657);
			colId();
			}
			_ctx.stop = _input.LT(-1);
			setState(7664);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,690,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new VarNameContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_varName);
					setState(7659);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(7660);
					match(DOT_);
					setState(7661);
					colId();
					}
					} 
				}
				setState(7666);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,690,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class VarListContext extends ParserRuleContext {
		public List<VarValueContext> varValue() {
			return getRuleContexts(VarValueContext.class);
		}
		public VarValueContext varValue(int i) {
			return getRuleContext(VarValueContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public VarListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterVarList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitVarList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitVarList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarListContext varList() throws RecognitionException {
		VarListContext _localctx = new VarListContext(_ctx, getState());
		enterRule(_localctx, 1056, RULE_varList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7667);
			varValue();
			setState(7672);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7668);
				match(COMMA_);
				setState(7669);
				varValue();
				}
				}
				setState(7674);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarValueContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public VarValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterVarValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitVarValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitVarValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarValueContext varValue() throws RecognitionException {
		VarValueContext _localctx = new VarValueContext(_ctx, getState());
		enterRule(_localctx, 1058, RULE_varValue);
		try {
			setState(7677);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(7675);
				booleanOrString();
				}
				break;
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(7676);
				numericOnly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ZoneValueContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode INTERVAL() { return getToken(DDLStatementParser.INTERVAL, 0); }
		public OptIntervalContext optInterval() {
			return getRuleContext(OptIntervalContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(DDLStatementParser.LOCAL, 0); }
		public ZoneValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_zoneValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterZoneValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitZoneValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitZoneValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ZoneValueContext zoneValue() throws RecognitionException {
		ZoneValueContext _localctx = new ZoneValueContext(_ctx, getState());
		enterRule(_localctx, 1060, RULE_zoneValue);
		try {
			setState(7692);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7679);
				match(STRING_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7680);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7681);
				match(INTERVAL);
				setState(7682);
				match(STRING_);
				setState(7683);
				optInterval();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7684);
				match(INTERVAL);
				setState(7685);
				match(LP_);
				setState(7686);
				match(NUMBER_);
				setState(7687);
				match(RP_);
				setState(7688);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7689);
				numericOnly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7690);
				match(DEFAULT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7691);
				match(LOCAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericOnlyContext extends ParserRuleContext {
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode PLUS_() { return getToken(DDLStatementParser.PLUS_, 0); }
		public TerminalNode MINUS_() { return getToken(DDLStatementParser.MINUS_, 0); }
		public NumericOnlyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericOnly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNumericOnly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNumericOnly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNumericOnly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericOnlyContext numericOnly() throws RecognitionException {
		NumericOnlyContext _localctx = new NumericOnlyContext(_ctx, getState());
		enterRule(_localctx, 1062, RULE_numericOnly);
		try {
			setState(7699);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(7694);
				match(NUMBER_);
				}
				break;
			case PLUS_:
				enterOuterAlt(_localctx, 2);
				{
				setState(7695);
				match(PLUS_);
				setState(7696);
				match(NUMBER_);
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 3);
				{
				setState(7697);
				match(MINUS_);
				setState(7698);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IsoLevelContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(DDLStatementParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(DDLStatementParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(DDLStatementParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(DDLStatementParser.REPEATABLE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(DDLStatementParser.SERIALIZABLE, 0); }
		public IsoLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isoLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIsoLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIsoLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIsoLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IsoLevelContext isoLevel() throws RecognitionException {
		IsoLevelContext _localctx = new IsoLevelContext(_ctx, getState());
		enterRule(_localctx, 1064, RULE_isoLevel);
		try {
			setState(7708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7701);
				match(READ);
				setState(7702);
				match(UNCOMMITTED);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7703);
				match(READ);
				setState(7704);
				match(COMMITTED);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7705);
				match(REPEATABLE);
				setState(7706);
				match(READ);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7707);
				match(SERIALIZABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TypeNameContext typeName() {
			return getRuleContext(TypeNameContext.class,0);
		}
		public ColQualListContext colQualList() {
			return getRuleContext(ColQualListContext.class,0);
		}
		public CreateGenericOptionsContext createGenericOptions() {
			return getRuleContext(CreateGenericOptionsContext.class,0);
		}
		public ColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColumnDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColumnDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefContext columnDef() throws RecognitionException {
		ColumnDefContext _localctx = new ColumnDefContext(_ctx, getState());
		enterRule(_localctx, 1066, RULE_columnDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7710);
			colId();
			setState(7711);
			typeName();
			setState(7713);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(7712);
				createGenericOptions();
				}
			}

			setState(7715);
			colQualList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColConstraintContext extends ParserRuleContext {
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ColConstraintElemContext colConstraintElem() {
			return getRuleContext(ColConstraintElemContext.class,0);
		}
		public ConstraintAttrContext constraintAttr() {
			return getRuleContext(ConstraintAttrContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(DDLStatementParser.COLLATE, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public ColConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintContext colConstraint() throws RecognitionException {
		ColConstraintContext _localctx = new ColConstraintContext(_ctx, getState());
		enterRule(_localctx, 1068, RULE_colConstraint);
		try {
			setState(7725);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7717);
				match(CONSTRAINT);
				setState(7718);
				name();
				setState(7719);
				colConstraintElem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7721);
				colConstraintElem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7722);
				constraintAttr();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7723);
				match(COLLATE);
				setState(7724);
				anyName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintAttrContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(DDLStatementParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode INITIALLY() { return getToken(DDLStatementParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(DDLStatementParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(DDLStatementParser.IMMEDIATE, 0); }
		public ConstraintAttrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintAttr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConstraintAttr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConstraintAttr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConstraintAttr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintAttrContext constraintAttr() throws RecognitionException {
		ConstraintAttrContext _localctx = new ConstraintAttrContext(_ctx, getState());
		enterRule(_localctx, 1070, RULE_constraintAttr);
		try {
			setState(7734);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,698,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7727);
				match(DEFERRABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7728);
				match(NOT);
				setState(7729);
				match(DEFERRABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7730);
				match(INITIALLY);
				setState(7731);
				match(DEFERRED);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7732);
				match(INITIALLY);
				setState(7733);
				match(IMMEDIATE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColConstraintElemContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode UNIQUE() { return getToken(DDLStatementParser.UNIQUE, 0); }
		public ConsTableSpaceContext consTableSpace() {
			return getRuleContext(ConsTableSpaceContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public DefinitionContext definition() {
			return getRuleContext(DefinitionContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(DDLStatementParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(DDLStatementParser.KEY, 0); }
		public TerminalNode CHECK() { return getToken(DDLStatementParser.CHECK, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public NoInheritContext noInherit() {
			return getRuleContext(NoInheritContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public BExprContext bExpr() {
			return getRuleContext(BExprContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(DDLStatementParser.GENERATED, 0); }
		public GeneratedWhenContext generatedWhen() {
			return getRuleContext(GeneratedWhenContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(DDLStatementParser.IDENTITY, 0); }
		public ParenthesizedSeqOptListContext parenthesizedSeqOptList() {
			return getRuleContext(ParenthesizedSeqOptListContext.class,0);
		}
		public TerminalNode STORED() { return getToken(DDLStatementParser.STORED, 0); }
		public TerminalNode REFERENCES() { return getToken(DDLStatementParser.REFERENCES, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public OptColumnListContext optColumnList() {
			return getRuleContext(OptColumnListContext.class,0);
		}
		public KeyMatchContext keyMatch() {
			return getRuleContext(KeyMatchContext.class,0);
		}
		public KeyActionsContext keyActions() {
			return getRuleContext(KeyActionsContext.class,0);
		}
		public ColConstraintElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colConstraintElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColConstraintElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColConstraintElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColConstraintElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColConstraintElemContext colConstraintElem() throws RecognitionException {
		ColConstraintElemContext _localctx = new ColConstraintElemContext(_ctx, getState());
		enterRule(_localctx, 1072, RULE_colConstraintElem);
		int _la;
		try {
			setState(7787);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7736);
				match(NOT);
				setState(7737);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7738);
				match(NULL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7739);
				match(UNIQUE);
				setState(7742);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7740);
					match(WITH);
					setState(7741);
					definition();
					}
				}

				setState(7744);
				consTableSpace();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7745);
				match(PRIMARY);
				setState(7746);
				match(KEY);
				setState(7749);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7747);
					match(WITH);
					setState(7748);
					definition();
					}
				}

				setState(7751);
				consTableSpace();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7752);
				match(CHECK);
				setState(7753);
				match(LP_);
				setState(7754);
				aExpr(0);
				setState(7755);
				match(RP_);
				setState(7757);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(7756);
					noInherit();
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7759);
				match(DEFAULT);
				setState(7760);
				bExpr(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7761);
				match(GENERATED);
				setState(7762);
				generatedWhen();
				setState(7763);
				match(AS);
				setState(7764);
				match(IDENTITY);
				setState(7766);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(7765);
					parenthesizedSeqOptList();
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7768);
				match(GENERATED);
				setState(7769);
				generatedWhen();
				setState(7770);
				match(AS);
				setState(7771);
				match(LP_);
				setState(7772);
				aExpr(0);
				setState(7773);
				match(RP_);
				setState(7774);
				match(STORED);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7776);
				match(REFERENCES);
				setState(7777);
				qualifiedName();
				setState(7779);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(7778);
					optColumnList();
					}
				}

				setState(7782);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATCH) {
					{
					setState(7781);
					keyMatch();
					}
				}

				setState(7785);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(7784);
					keyActions();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParenthesizedSeqOptListContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public SeqOptListContext seqOptList() {
			return getRuleContext(SeqOptListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ParenthesizedSeqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesizedSeqOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterParenthesizedSeqOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitParenthesizedSeqOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitParenthesizedSeqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParenthesizedSeqOptListContext parenthesizedSeqOptList() throws RecognitionException {
		ParenthesizedSeqOptListContext _localctx = new ParenthesizedSeqOptListContext(_ctx, getState());
		enterRule(_localctx, 1074, RULE_parenthesizedSeqOptList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7789);
			match(LP_);
			setState(7790);
			seqOptList();
			setState(7791);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqOptListContext extends ParserRuleContext {
		public List<SeqOptElemContext> seqOptElem() {
			return getRuleContexts(SeqOptElemContext.class);
		}
		public SeqOptElemContext seqOptElem(int i) {
			return getRuleContext(SeqOptElemContext.class,i);
		}
		public SeqOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSeqOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSeqOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSeqOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptListContext seqOptList() throws RecognitionException {
		SeqOptListContext _localctx = new SeqOptListContext(_ctx, getState());
		enterRule(_localctx, 1076, RULE_seqOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7794); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7793);
				seqOptElem();
				}
				}
				setState(7796); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AS || ((((_la - 219)) & ~0x3f) == 0 && ((1L << (_la - 219)) & ((1L << (NO - 219)) | (1L << (START - 219)) | (1L << (CACHE - 219)) | (1L << (CYCLE - 219)) | (1L << (INCREMENT - 219)) | (1L << (MAXVALUE - 219)) | (1L << (MINVALUE - 219)) | (1L << (OWNED - 219)))) != 0) || _la==RESTART || _la==SEQUENCE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SeqOptElemContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public SimpleTypeNameContext simpleTypeName() {
			return getRuleContext(SimpleTypeNameContext.class,0);
		}
		public TerminalNode CACHE() { return getToken(DDLStatementParser.CACHE, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode CYCLE() { return getToken(DDLStatementParser.CYCLE, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode INCREMENT() { return getToken(DDLStatementParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public TerminalNode MAXVALUE() { return getToken(DDLStatementParser.MAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(DDLStatementParser.MINVALUE, 0); }
		public TerminalNode OWNED() { return getToken(DDLStatementParser.OWNED, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public TerminalNode SEQUENCE() { return getToken(DDLStatementParser.SEQUENCE, 0); }
		public TerminalNode NAME() { return getToken(DDLStatementParser.NAME, 0); }
		public TerminalNode START() { return getToken(DDLStatementParser.START, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode RESTART() { return getToken(DDLStatementParser.RESTART, 0); }
		public SeqOptElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seqOptElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSeqOptElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSeqOptElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSeqOptElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SeqOptElemContext seqOptElem() throws RecognitionException {
		SeqOptElemContext _localctx = new SeqOptElemContext(_ctx, getState());
		enterRule(_localctx, 1078, RULE_seqOptElem);
		int _la;
		try {
			setState(7835);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,711,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7798);
				match(AS);
				setState(7799);
				simpleTypeName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7800);
				match(CACHE);
				setState(7801);
				numericOnly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7802);
				match(CYCLE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7803);
				match(NO);
				setState(7804);
				match(CYCLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7805);
				match(INCREMENT);
				setState(7807);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(7806);
					match(BY);
					}
				}

				setState(7809);
				numericOnly();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7810);
				match(MAXVALUE);
				setState(7811);
				numericOnly();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7812);
				match(MINVALUE);
				setState(7813);
				numericOnly();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7814);
				match(NO);
				setState(7815);
				match(MAXVALUE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7816);
				match(NO);
				setState(7817);
				match(MINVALUE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7818);
				match(OWNED);
				setState(7819);
				match(BY);
				setState(7820);
				anyName();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7821);
				match(SEQUENCE);
				setState(7822);
				match(NAME);
				setState(7823);
				anyName();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7824);
				match(START);
				setState(7826);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7825);
					match(WITH);
					}
				}

				setState(7828);
				numericOnly();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7829);
				match(RESTART);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7830);
				match(RESTART);
				setState(7832);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(7831);
					match(WITH);
					}
				}

				setState(7834);
				numericOnly();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptColumnListContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public OptColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptColumnListContext optColumnList() throws RecognitionException {
		OptColumnListContext _localctx = new OptColumnListContext(_ctx, getState());
		enterRule(_localctx, 1080, RULE_optColumnList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7837);
			match(LP_);
			setState(7838);
			columnList();
			setState(7839);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GeneratedWhenContext extends ParserRuleContext {
		public TerminalNode ALWAYS() { return getToken(DDLStatementParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public GeneratedWhenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generatedWhen; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGeneratedWhen(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGeneratedWhen(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGeneratedWhen(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GeneratedWhenContext generatedWhen() throws RecognitionException {
		GeneratedWhenContext _localctx = new GeneratedWhenContext(_ctx, getState());
		enterRule(_localctx, 1082, RULE_generatedWhen);
		try {
			setState(7844);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALWAYS:
				enterOuterAlt(_localctx, 1);
				{
				setState(7841);
				match(ALWAYS);
				}
				break;
			case BY:
				enterOuterAlt(_localctx, 2);
				{
				setState(7842);
				match(BY);
				setState(7843);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NoInheritContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(DDLStatementParser.INHERIT, 0); }
		public NoInheritContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_noInherit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNoInherit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNoInherit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNoInherit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NoInheritContext noInherit() throws RecognitionException {
		NoInheritContext _localctx = new NoInheritContext(_ctx, getState());
		enterRule(_localctx, 1084, RULE_noInherit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7846);
			match(NO);
			setState(7847);
			match(INHERIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConsTableSpaceContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public TerminalNode TABLESPACE() { return getToken(DDLStatementParser.TABLESPACE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ConsTableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_consTableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterConsTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitConsTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitConsTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConsTableSpaceContext consTableSpace() throws RecognitionException {
		ConsTableSpaceContext _localctx = new ConsTableSpaceContext(_ctx, getState());
		enterRule(_localctx, 1086, RULE_consTableSpace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7849);
			match(USING);
			setState(7850);
			match(INDEX);
			setState(7851);
			match(TABLESPACE);
			setState(7852);
			name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinitionContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public DefListContext defList() {
			return getRuleContext(DefListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinitionContext definition() throws RecognitionException {
		DefinitionContext _localctx = new DefinitionContext(_ctx, getState());
		enterRule(_localctx, 1088, RULE_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7854);
			match(LP_);
			setState(7855);
			defList();
			setState(7856);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefListContext extends ParserRuleContext {
		public List<DefElemContext> defElem() {
			return getRuleContexts(DefElemContext.class);
		}
		public DefElemContext defElem(int i) {
			return getRuleContext(DefElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public DefListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefListContext defList() throws RecognitionException {
		DefListContext _localctx = new DefListContext(_ctx, getState());
		enterRule(_localctx, 1090, RULE_defList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7858);
			defElem();
			setState(7863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7859);
				match(COMMA_);
				setState(7860);
				defElem();
				}
				}
				setState(7865);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefElemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public DefArgContext defArg() {
			return getRuleContext(DefArgContext.class,0);
		}
		public DefElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDefElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDefElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDefElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefElemContext defElem() throws RecognitionException {
		DefElemContext _localctx = new DefElemContext(_ctx, getState());
		enterRule(_localctx, 1092, RULE_defElem);
		try {
			setState(7871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,714,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(7866);
				colLabel();
				setState(7867);
				match(EQ_);
				setState(7868);
				defArg();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7870);
				colLabel();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColLabelContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UnreservedWordContext unreservedWord() {
			return getRuleContext(UnreservedWordContext.class,0);
		}
		public ColNameKeywordContext colNameKeyword() {
			return getRuleContext(ColNameKeywordContext.class,0);
		}
		public TypeFuncNameKeywordContext typeFuncNameKeyword() {
			return getRuleContext(TypeFuncNameKeywordContext.class,0);
		}
		public ReservedKeywordContext reservedKeyword() {
			return getRuleContext(ReservedKeywordContext.class,0);
		}
		public ColLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterColLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitColLabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitColLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColLabelContext colLabel() throws RecognitionException {
		ColLabelContext _localctx = new ColLabelContext(_ctx, getState());
		enterRule(_localctx, 1094, RULE_colLabel);
		try {
			setState(7878);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7873);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7874);
				unreservedWord();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7875);
				colNameKeyword();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7876);
				typeFuncNameKeyword();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7877);
				reservedKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyActionsContext extends ParserRuleContext {
		public KeyUpdateContext keyUpdate() {
			return getRuleContext(KeyUpdateContext.class,0);
		}
		public KeyDeleteContext keyDelete() {
			return getRuleContext(KeyDeleteContext.class,0);
		}
		public KeyActionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyActions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterKeyActions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitKeyActions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitKeyActions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyActionsContext keyActions() throws RecognitionException {
		KeyActionsContext _localctx = new KeyActionsContext(_ctx, getState());
		enterRule(_localctx, 1096, RULE_keyActions);
		try {
			setState(7888);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7880);
				keyUpdate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7881);
				keyDelete();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7882);
				keyUpdate();
				setState(7883);
				keyDelete();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7885);
				keyDelete();
				setState(7886);
				keyUpdate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyDeleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(DDLStatementParser.DELETE, 0); }
		public KeyActionContext keyAction() {
			return getRuleContext(KeyActionContext.class,0);
		}
		public KeyDeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyDelete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterKeyDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitKeyDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitKeyDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyDeleteContext keyDelete() throws RecognitionException {
		KeyDeleteContext _localctx = new KeyDeleteContext(_ctx, getState());
		enterRule(_localctx, 1098, RULE_keyDelete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7890);
			match(ON);
			setState(7891);
			match(DELETE);
			setState(7892);
			keyAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyUpdateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public KeyActionContext keyAction() {
			return getRuleContext(KeyActionContext.class,0);
		}
		public KeyUpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyUpdate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterKeyUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitKeyUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitKeyUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyUpdateContext keyUpdate() throws RecognitionException {
		KeyUpdateContext _localctx = new KeyUpdateContext(_ctx, getState());
		enterRule(_localctx, 1100, RULE_keyUpdate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7894);
			match(ON);
			setState(7895);
			match(UPDATE);
			setState(7896);
			keyAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyActionContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(DDLStatementParser.ACTION, 0); }
		public TerminalNode RESTRICT() { return getToken(DDLStatementParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(DDLStatementParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public KeyActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterKeyAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitKeyAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitKeyAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyActionContext keyAction() throws RecognitionException {
		KeyActionContext _localctx = new KeyActionContext(_ctx, getState());
		enterRule(_localctx, 1102, RULE_keyAction);
		try {
			setState(7906);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,717,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7898);
				match(NO);
				setState(7899);
				match(ACTION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7900);
				match(RESTRICT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7901);
				match(CASCADE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7902);
				match(SET);
				setState(7903);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7904);
				match(SET);
				setState(7905);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeyMatchContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(DDLStatementParser.MATCH, 0); }
		public TerminalNode FULL() { return getToken(DDLStatementParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(DDLStatementParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(DDLStatementParser.SIMPLE, 0); }
		public KeyMatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyMatch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterKeyMatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitKeyMatch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitKeyMatch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeyMatchContext keyMatch() throws RecognitionException {
		KeyMatchContext _localctx = new KeyMatchContext(_ctx, getState());
		enterRule(_localctx, 1104, RULE_keyMatch);
		try {
			setState(7914);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,718,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7908);
				match(MATCH);
				setState(7909);
				match(FULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7910);
				match(MATCH);
				setState(7911);
				match(PARTIAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7912);
				match(MATCH);
				setState(7913);
				match(SIMPLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateGenericOptionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(DDLStatementParser.OPTIONS, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public GenericOptionListContext genericOptionList() {
			return getRuleContext(GenericOptionListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public CreateGenericOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGenericOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCreateGenericOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCreateGenericOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCreateGenericOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateGenericOptionsContext createGenericOptions() throws RecognitionException {
		CreateGenericOptionsContext _localctx = new CreateGenericOptionsContext(_ctx, getState());
		enterRule(_localctx, 1106, RULE_createGenericOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7916);
			match(OPTIONS);
			setState(7917);
			match(LP_);
			setState(7918);
			genericOptionList();
			setState(7919);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericOptionListContext extends ParserRuleContext {
		public List<GenericOptionElemContext> genericOptionElem() {
			return getRuleContexts(GenericOptionElemContext.class);
		}
		public GenericOptionElemContext genericOptionElem(int i) {
			return getRuleContext(GenericOptionElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public GenericOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGenericOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGenericOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGenericOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericOptionListContext genericOptionList() throws RecognitionException {
		GenericOptionListContext _localctx = new GenericOptionListContext(_ctx, getState());
		enterRule(_localctx, 1108, RULE_genericOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7921);
			genericOptionElem();
			setState(7926);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7922);
				match(COMMA_);
				setState(7923);
				genericOptionElem();
				}
				}
				setState(7928);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplicaIdentityContext extends ParserRuleContext {
		public TerminalNode NOTHING() { return getToken(DDLStatementParser.NOTHING, 0); }
		public TerminalNode FULL() { return getToken(DDLStatementParser.FULL, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(DDLStatementParser.INDEX, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public ReplicaIdentityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replicaIdentity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReplicaIdentity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReplicaIdentity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReplicaIdentity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplicaIdentityContext replicaIdentity() throws RecognitionException {
		ReplicaIdentityContext _localctx = new ReplicaIdentityContext(_ctx, getState());
		enterRule(_localctx, 1110, RULE_replicaIdentity);
		try {
			setState(7935);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOTHING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7929);
				match(NOTHING);
				}
				break;
			case FULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7930);
				match(FULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(7931);
				match(DEFAULT);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 4);
				{
				setState(7932);
				match(USING);
				setState(7933);
				match(INDEX);
				setState(7934);
				name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperArgtypesContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public TerminalNode NONE() { return getToken(DDLStatementParser.NONE, 0); }
		public OperArgtypesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operArgtypes; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOperArgtypes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOperArgtypes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOperArgtypes(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperArgtypesContext operArgtypes() throws RecognitionException {
		OperArgtypesContext _localctx = new OperArgtypesContext(_ctx, getState());
		enterRule(_localctx, 1112, RULE_operArgtypes);
		try {
			setState(7959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7937);
				match(LP_);
				setState(7938);
				typeName();
				setState(7939);
				match(RP_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7941);
				match(LP_);
				setState(7942);
				typeName();
				setState(7943);
				match(COMMA_);
				setState(7944);
				typeName();
				setState(7945);
				match(RP_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7947);
				match(LP_);
				setState(7948);
				match(NONE);
				setState(7949);
				match(COMMA_);
				setState(7950);
				typeName();
				setState(7951);
				match(RP_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7953);
				match(LP_);
				setState(7954);
				typeName();
				setState(7955);
				match(COMMA_);
				setState(7956);
				match(NONE);
				setState(7957);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgContext extends ParserRuleContext {
		public ArgClassContext argClass() {
			return getRuleContext(ArgClassContext.class,0);
		}
		public ParamNameContext paramName() {
			return getRuleContext(ParamNameContext.class,0);
		}
		public FuncTypeContext funcType() {
			return getRuleContext(FuncTypeContext.class,0);
		}
		public FuncArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgContext funcArg() throws RecognitionException {
		FuncArgContext _localctx = new FuncArgContext(_ctx, getState());
		enterRule(_localctx, 1114, RULE_funcArg);
		try {
			setState(7976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,722,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7961);
				argClass();
				setState(7962);
				paramName();
				setState(7963);
				funcType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7965);
				paramName();
				setState(7966);
				argClass();
				setState(7967);
				funcType();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7969);
				paramName();
				setState(7970);
				funcType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7972);
				argClass();
				setState(7973);
				funcType();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7975);
				funcType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgClassContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public TerminalNode OUT() { return getToken(DDLStatementParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(DDLStatementParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(DDLStatementParser.VARIADIC, 0); }
		public ArgClassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argClass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterArgClass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitArgClass(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitArgClass(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgClassContext argClass() throws RecognitionException {
		ArgClassContext _localctx = new ArgClassContext(_ctx, getState());
		enterRule(_localctx, 1116, RULE_argClass);
		try {
			setState(7984);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7978);
				match(IN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7979);
				match(OUT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7980);
				match(INOUT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7981);
				match(IN);
				setState(7982);
				match(OUT);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7983);
				match(VARIADIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FuncArgsListContext extends ParserRuleContext {
		public List<FuncArgContext> funcArg() {
			return getRuleContexts(FuncArgContext.class);
		}
		public FuncArgContext funcArg(int i) {
			return getRuleContext(FuncArgContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public FuncArgsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_funcArgsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFuncArgsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFuncArgsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFuncArgsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FuncArgsListContext funcArgsList() throws RecognitionException {
		FuncArgsListContext _localctx = new FuncArgsListContext(_ctx, getState());
		enterRule(_localctx, 1118, RULE_funcArgsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7986);
			funcArg();
			setState(7991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(7987);
				match(COMMA_);
				setState(7988);
				funcArg();
				}
				}
				setState(7993);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonReservedWordOrSconstContext extends ParserRuleContext {
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public NonReservedWordOrSconstContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonReservedWordOrSconst; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNonReservedWordOrSconst(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNonReservedWordOrSconst(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNonReservedWordOrSconst(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonReservedWordOrSconstContext nonReservedWordOrSconst() throws RecognitionException {
		NonReservedWordOrSconstContext _localctx = new NonReservedWordOrSconstContext(_ctx, getState());
		enterRule(_localctx, 1120, RULE_nonReservedWordOrSconst);
		try {
			setState(7996);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(7994);
				nonReservedWord();
				}
				break;
			case STRING_:
				enterOuterAlt(_localctx, 2);
				{
				setState(7995);
				match(STRING_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileNameContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public FileNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFileName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFileName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFileName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileNameContext fileName() throws RecognitionException {
		FileNameContext _localctx = new FileNameContext(_ctx, getState());
		enterRule(_localctx, 1122, RULE_fileName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7998);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleListContext extends ParserRuleContext {
		public List<RoleSpecContext> roleSpec() {
			return getRuleContexts(RoleSpecContext.class);
		}
		public RoleSpecContext roleSpec(int i) {
			return getRuleContext(RoleSpecContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public RoleListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRoleList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRoleList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRoleList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleListContext roleList() throws RecognitionException {
		RoleListContext _localctx = new RoleListContext(_ctx, getState());
		enterRule(_localctx, 1124, RULE_roleList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8000);
			roleSpec();
			setState(8005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8001);
				match(COMMA_);
				setState(8002);
				roleSpec();
				}
				}
				setState(8007);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public SetRestContext setRest() {
			return getRuleContext(SetRestContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public SetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setResetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSetResetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSetResetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetResetClauseContext setResetClause() throws RecognitionException {
		SetResetClauseContext _localctx = new SetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 1126, RULE_setResetClause);
		try {
			setState(8011);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(8008);
				match(SET);
				setState(8009);
				setRest();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(8010);
				variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRestContext extends ParserRuleContext {
		public TerminalNode TRANSACTION() { return getToken(DDLStatementParser.TRANSACTION, 0); }
		public TransactionModeListContext transactionModeList() {
			return getRuleContext(TransactionModeListContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(DDLStatementParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(DDLStatementParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public SetRestMoreContext setRestMore() {
			return getRuleContext(SetRestMoreContext.class,0);
		}
		public SetRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSetRest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSetRest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSetRest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRestContext setRest() throws RecognitionException {
		SetRestContext _localctx = new SetRestContext(_ctx, getState());
		enterRule(_localctx, 1128, RULE_setRest);
		try {
			setState(8021);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8013);
				match(TRANSACTION);
				setState(8014);
				transactionModeList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8015);
				match(SESSION);
				setState(8016);
				match(CHARACTERISTICS);
				setState(8017);
				match(AS);
				setState(8018);
				match(TRANSACTION);
				setState(8019);
				transactionModeList();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8020);
				setRestMore();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeListContext extends ParserRuleContext {
		public List<TransactionModeItemContext> transactionModeItem() {
			return getRuleContexts(TransactionModeItemContext.class);
		}
		public TransactionModeItemContext transactionModeItem(int i) {
			return getRuleContext(TransactionModeItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TransactionModeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionModeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTransactionModeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTransactionModeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTransactionModeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeListContext transactionModeList() throws RecognitionException {
		TransactionModeListContext _localctx = new TransactionModeListContext(_ctx, getState());
		enterRule(_localctx, 1130, RULE_transactionModeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8023);
			transactionModeItem();
			setState(8030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_ || _la==NOT || ((((_la - 217)) & ~0x3f) == 0 && ((1L << (_la - 217)) & ((1L << (ISOLATION - 217)) | (1L << (READ - 217)) | (1L << (DEFERRABLE - 217)))) != 0)) {
				{
				{
				setState(8025);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA_) {
					{
					setState(8024);
					match(COMMA_);
					}
				}

				setState(8027);
				transactionModeItem();
				}
				}
				setState(8032);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeItemContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(DDLStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(DDLStatementParser.LEVEL, 0); }
		public IsoLevelContext isoLevel() {
			return getRuleContext(IsoLevelContext.class,0);
		}
		public TerminalNode READ() { return getToken(DDLStatementParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(DDLStatementParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(DDLStatementParser.WRITE, 0); }
		public TerminalNode DEFERRABLE() { return getToken(DDLStatementParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TransactionModeItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionModeItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTransactionModeItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTransactionModeItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTransactionModeItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeItemContext transactionModeItem() throws RecognitionException {
		TransactionModeItemContext _localctx = new TransactionModeItemContext(_ctx, getState());
		enterRule(_localctx, 1132, RULE_transactionModeItem);
		try {
			setState(8043);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8033);
				match(ISOLATION);
				setState(8034);
				match(LEVEL);
				setState(8035);
				isoLevel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8036);
				match(READ);
				setState(8037);
				match(ONLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8038);
				match(READ);
				setState(8039);
				match(WRITE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8040);
				match(DEFERRABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8041);
				match(NOT);
				setState(8042);
				match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetRestMoreContext extends ParserRuleContext {
		public GenericSetContext genericSet() {
			return getRuleContext(GenericSetContext.class,0);
		}
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode CURRENT() { return getToken(DDLStatementParser.CURRENT, 0); }
		public TerminalNode TIME() { return getToken(DDLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(DDLStatementParser.ZONE, 0); }
		public ZoneValueContext zoneValue() {
			return getRuleContext(ZoneValueContext.class,0);
		}
		public TerminalNode CATALOG() { return getToken(DDLStatementParser.CATALOG, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode SCHEMA() { return getToken(DDLStatementParser.SCHEMA, 0); }
		public TerminalNode NAMES() { return getToken(DDLStatementParser.NAMES, 0); }
		public EncodingContext encoding() {
			return getRuleContext(EncodingContext.class,0);
		}
		public TerminalNode ROLE() { return getToken(DDLStatementParser.ROLE, 0); }
		public NonReservedWordContext nonReservedWord() {
			return getRuleContext(NonReservedWordContext.class,0);
		}
		public TerminalNode SESSION() { return getToken(DDLStatementParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(DDLStatementParser.AUTHORIZATION, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode XML() { return getToken(DDLStatementParser.XML, 0); }
		public TerminalNode OPTION() { return getToken(DDLStatementParser.OPTION, 0); }
		public DocumentOrContentContext documentOrContent() {
			return getRuleContext(DocumentOrContentContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(DDLStatementParser.TRANSACTION, 0); }
		public TerminalNode SNAPSHOT() { return getToken(DDLStatementParser.SNAPSHOT, 0); }
		public SetRestMoreContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setRestMore; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSetRestMore(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSetRestMore(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSetRestMore(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetRestMoreContext setRestMore() throws RecognitionException {
		SetRestMoreContext _localctx = new SetRestMoreContext(_ctx, getState());
		enterRule(_localctx, 1134, RULE_setRestMore);
		int _la;
		try {
			setState(8077);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8045);
				genericSet();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8046);
				varName(0);
				setState(8047);
				match(FROM);
				setState(8048);
				match(CURRENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8050);
				match(TIME);
				setState(8051);
				match(ZONE);
				setState(8052);
				zoneValue();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8053);
				match(CATALOG);
				setState(8054);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8055);
				match(SCHEMA);
				setState(8056);
				match(STRING_);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8057);
				match(NAMES);
				setState(8059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==STRING_) {
					{
					setState(8058);
					encoding();
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8061);
				match(ROLE);
				setState(8062);
				nonReservedWord();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8063);
				match(STRING_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8064);
				match(SESSION);
				setState(8065);
				match(AUTHORIZATION);
				setState(8066);
				nonReservedWord();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8067);
				match(STRING_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8068);
				match(SESSION);
				setState(8069);
				match(AUTHORIZATION);
				setState(8070);
				match(DEFAULT);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8071);
				match(XML);
				setState(8072);
				match(OPTION);
				setState(8073);
				documentOrContent();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8074);
				match(TRANSACTION);
				setState(8075);
				match(SNAPSHOT);
				setState(8076);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EncodingContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public EncodingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encoding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterEncoding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitEncoding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitEncoding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EncodingContext encoding() throws RecognitionException {
		EncodingContext _localctx = new EncodingContext(_ctx, getState());
		enterRule(_localctx, 1136, RULE_encoding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8079);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==STRING_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericSetContext extends ParserRuleContext {
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public VarListContext varList() {
			return getRuleContext(VarListContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public GenericSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGenericSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGenericSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGenericSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericSetContext genericSet() throws RecognitionException {
		GenericSetContext _localctx = new GenericSetContext(_ctx, getState());
		enterRule(_localctx, 1138, RULE_genericSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8081);
			varName(0);
			setState(8082);
			_la = _input.LA(1);
			if ( !(_la==EQ_ || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8085);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case PLUS_:
			case MINUS_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				{
				setState(8083);
				varList();
				}
				break;
			case DEFAULT:
				{
				setState(8084);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableResetStmtContext extends ParserRuleContext {
		public TerminalNode RESET() { return getToken(DDLStatementParser.RESET, 0); }
		public ResetRestContext resetRest() {
			return getRuleContext(ResetRestContext.class,0);
		}
		public VariableResetStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableResetStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterVariableResetStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitVariableResetStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitVariableResetStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableResetStmtContext variableResetStmt() throws RecognitionException {
		VariableResetStmtContext _localctx = new VariableResetStmtContext(_ctx, getState());
		enterRule(_localctx, 1140, RULE_variableResetStmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8087);
			match(RESET);
			setState(8088);
			resetRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResetRestContext extends ParserRuleContext {
		public GenericResetContext genericReset() {
			return getRuleContext(GenericResetContext.class,0);
		}
		public TerminalNode TIME() { return getToken(DDLStatementParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(DDLStatementParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(DDLStatementParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(DDLStatementParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(DDLStatementParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(DDLStatementParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(DDLStatementParser.AUTHORIZATION, 0); }
		public ResetRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resetRest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterResetRest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitResetRest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitResetRest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResetRestContext resetRest() throws RecognitionException {
		ResetRestContext _localctx = new ResetRestContext(_ctx, getState());
		enterRule(_localctx, 1142, RULE_resetRest);
		try {
			setState(8098);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,735,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8090);
				genericReset();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8091);
				match(TIME);
				setState(8092);
				match(ZONE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8093);
				match(TRANSACTION);
				setState(8094);
				match(ISOLATION);
				setState(8095);
				match(LEVEL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8096);
				match(SESSION);
				setState(8097);
				match(AUTHORIZATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GenericResetContext extends ParserRuleContext {
		public VarNameContext varName() {
			return getRuleContext(VarNameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public GenericResetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_genericReset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGenericReset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGenericReset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGenericReset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GenericResetContext genericReset() throws RecognitionException {
		GenericResetContext _localctx = new GenericResetContext(_ctx, getState());
		enterRule(_localctx, 1144, RULE_genericReset);
		try {
			setState(8102);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8100);
				varName(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8101);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationExprListContext extends ParserRuleContext {
		public List<RelationExprContext> relationExpr() {
			return getRuleContexts(RelationExprContext.class);
		}
		public RelationExprContext relationExpr(int i) {
			return getRuleContext(RelationExprContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public RelationExprListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExprList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRelationExprList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRelationExprList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRelationExprList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExprListContext relationExprList() throws RecognitionException {
		RelationExprListContext _localctx = new RelationExprListContext(_ctx, getState());
		enterRule(_localctx, 1146, RULE_relationExprList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8104);
			relationExpr();
			setState(8109);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8105);
				match(COMMA_);
				setState(8106);
				relationExpr();
				}
				}
				setState(8111);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationExprContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TerminalNode ONLY() { return getToken(DDLStatementParser.ONLY, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public RelationExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRelationExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRelationExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRelationExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExprContext relationExpr() throws RecognitionException {
		RelationExprContext _localctx = new RelationExprContext(_ctx, getState());
		enterRule(_localctx, 1148, RULE_relationExpr);
		try {
			setState(8123);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,738,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8112);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8113);
				qualifiedName();
				setState(8114);
				match(ASTERISK_);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8116);
				match(ONLY);
				setState(8117);
				qualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8118);
				match(ONLY);
				setState(8119);
				match(LP_);
				setState(8120);
				qualifiedName();
				setState(8121);
				match(RP_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonFuncOptItemContext extends ParserRuleContext {
		public TerminalNode CALLED() { return getToken(DDLStatementParser.CALLED, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public List<TerminalNode> NULL() { return getTokens(DDLStatementParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(DDLStatementParser.NULL, i);
		}
		public TerminalNode INPUT() { return getToken(DDLStatementParser.INPUT, 0); }
		public TerminalNode RETURNS() { return getToken(DDLStatementParser.RETURNS, 0); }
		public TerminalNode STRICT() { return getToken(DDLStatementParser.STRICT, 0); }
		public TerminalNode IMMUTABLE() { return getToken(DDLStatementParser.IMMUTABLE, 0); }
		public TerminalNode STABLE() { return getToken(DDLStatementParser.STABLE, 0); }
		public TerminalNode VOLATILE() { return getToken(DDLStatementParser.VOLATILE, 0); }
		public TerminalNode EXTERNAL() { return getToken(DDLStatementParser.EXTERNAL, 0); }
		public TerminalNode SECURITY() { return getToken(DDLStatementParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(DDLStatementParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(DDLStatementParser.INVOKER, 0); }
		public TerminalNode LEAKPROOF() { return getToken(DDLStatementParser.LEAKPROOF, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode COST() { return getToken(DDLStatementParser.COST, 0); }
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(DDLStatementParser.ROWS, 0); }
		public TerminalNode SUPPORT() { return getToken(DDLStatementParser.SUPPORT, 0); }
		public AnyNameContext anyName() {
			return getRuleContext(AnyNameContext.class,0);
		}
		public FunctionSetResetClauseContext functionSetResetClause() {
			return getRuleContext(FunctionSetResetClauseContext.class,0);
		}
		public TerminalNode PARALLEL() { return getToken(DDLStatementParser.PARALLEL, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public CommonFuncOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonFuncOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCommonFuncOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCommonFuncOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCommonFuncOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonFuncOptItemContext commonFuncOptItem() throws RecognitionException {
		CommonFuncOptItemContext _localctx = new CommonFuncOptItemContext(_ctx, getState());
		enterRule(_localctx, 1150, RULE_commonFuncOptItem);
		try {
			setState(8160);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,739,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8125);
				match(CALLED);
				setState(8126);
				match(ON);
				setState(8127);
				match(NULL);
				setState(8128);
				match(INPUT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8129);
				match(RETURNS);
				setState(8130);
				match(NULL);
				setState(8131);
				match(ON);
				setState(8132);
				match(NULL);
				setState(8133);
				match(INPUT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8134);
				match(STRICT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8135);
				match(IMMUTABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8136);
				match(STABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8137);
				match(VOLATILE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8138);
				match(EXTERNAL);
				setState(8139);
				match(SECURITY);
				setState(8140);
				match(DEFINER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8141);
				match(EXTERNAL);
				setState(8142);
				match(SECURITY);
				setState(8143);
				match(INVOKER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8144);
				match(SECURITY);
				setState(8145);
				match(DEFINER);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8146);
				match(SECURITY);
				setState(8147);
				match(INVOKER);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8148);
				match(LEAKPROOF);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8149);
				match(NOT);
				setState(8150);
				match(LEAKPROOF);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8151);
				match(COST);
				setState(8152);
				numericOnly();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(8153);
				match(ROWS);
				setState(8154);
				numericOnly();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(8155);
				match(SUPPORT);
				setState(8156);
				anyName();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(8157);
				functionSetResetClause();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(8158);
				match(PARALLEL);
				setState(8159);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionSetResetClauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public SetRestMoreContext setRestMore() {
			return getRuleContext(SetRestMoreContext.class,0);
		}
		public VariableResetStmtContext variableResetStmt() {
			return getRuleContext(VariableResetStmtContext.class,0);
		}
		public FunctionSetResetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionSetResetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFunctionSetResetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFunctionSetResetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFunctionSetResetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionSetResetClauseContext functionSetResetClause() throws RecognitionException {
		FunctionSetResetClauseContext _localctx = new FunctionSetResetClauseContext(_ctx, getState());
		enterRule(_localctx, 1152, RULE_functionSetResetClause);
		try {
			setState(8165);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(8162);
				match(SET);
				setState(8163);
				setRestMore();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 2);
				{
				setState(8164);
				variableResetStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowSecurityCmdContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode SELECT() { return getToken(DDLStatementParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(DDLStatementParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(DDLStatementParser.DELETE, 0); }
		public RowSecurityCmdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowSecurityCmd; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRowSecurityCmd(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRowSecurityCmd(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRowSecurityCmd(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowSecurityCmdContext rowSecurityCmd() throws RecognitionException {
		RowSecurityCmdContext _localctx = new RowSecurityCmdContext(_ctx, getState());
		enterRule(_localctx, 1154, RULE_rowSecurityCmd);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8167);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SELECT) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE))) != 0) || _la==ALL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EventContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(DDLStatementParser.SELECT, 0); }
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(DDLStatementParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(DDLStatementParser.INSERT, 0); }
		public EventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterEvent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitEvent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitEvent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EventContext event() throws RecognitionException {
		EventContext _localctx = new EventContext(_ctx, getState());
		enterRule(_localctx, 1156, RULE_event);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8169);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SELECT) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeNameListContext extends ParserRuleContext {
		public List<TypeNameContext> typeName() {
			return getRuleContexts(TypeNameContext.class);
		}
		public TypeNameContext typeName(int i) {
			return getRuleContext(TypeNameContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public TypeNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTypeNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTypeNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTypeNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeNameListContext typeNameList() throws RecognitionException {
		TypeNameListContext _localctx = new TypeNameListContext(_ctx, getState());
		enterRule(_localctx, 1158, RULE_typeNameList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8171);
			typeName();
			setState(8176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(8172);
				match(COMMA_);
				setState(8173);
				typeName();
				}
				}
				setState(8178);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(DDLStatementParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(DDLStatementParser.INTO, 0); }
		public InsertTargetContext insertTarget() {
			return getRuleContext(InsertTargetContext.class,0);
		}
		public InsertRestContext insertRest() {
			return getRuleContext(InsertRestContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public OptOnConflictContext optOnConflict() {
			return getRuleContext(OptOnConflictContext.class,0);
		}
		public ReturningClauseContext returningClause() {
			return getRuleContext(ReturningClauseContext.class,0);
		}
		public InsertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterInsert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitInsert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitInsert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertContext insert() throws RecognitionException {
		InsertContext _localctx = new InsertContext(_ctx, getState());
		enterRule(_localctx, 1160, RULE_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8179);
				withClause();
				}
			}

			setState(8182);
			match(INSERT);
			setState(8183);
			match(INTO);
			setState(8184);
			insertTarget();
			setState(8185);
			insertRest();
			setState(8187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(8186);
				optOnConflict();
				}
			}

			setState(8190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(8189);
				returningClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertTargetContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public InsertTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterInsertTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitInsertTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitInsertTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertTargetContext insertTarget() throws RecognitionException {
		InsertTargetContext _localctx = new InsertTargetContext(_ctx, getState());
		enterRule(_localctx, 1162, RULE_insertTarget);
		try {
			setState(8197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,745,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8192);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8193);
				qualifiedName();
				setState(8194);
				match(AS);
				setState(8195);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertRestContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public TerminalNode OVERRIDING() { return getToken(DDLStatementParser.OVERRIDING, 0); }
		public OverrideKindContext overrideKind() {
			return getRuleContext(OverrideKindContext.class,0);
		}
		public TerminalNode VALUE() { return getToken(DDLStatementParser.VALUE, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public InsertColumnListContext insertColumnList() {
			return getRuleContext(InsertColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode DEFAULT() { return getToken(DDLStatementParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(DDLStatementParser.VALUES, 0); }
		public InsertRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertRest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterInsertRest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitInsertRest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitInsertRest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertRestContext insertRest() throws RecognitionException {
		InsertRestContext _localctx = new InsertRestContext(_ctx, getState());
		enterRule(_localctx, 1164, RULE_insertRest);
		try {
			setState(8220);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8199);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8200);
				match(OVERRIDING);
				setState(8201);
				overrideKind();
				setState(8202);
				match(VALUE);
				setState(8203);
				select();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8205);
				match(LP_);
				setState(8206);
				insertColumnList(0);
				setState(8207);
				match(RP_);
				setState(8208);
				select();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8210);
				match(LP_);
				setState(8211);
				insertColumnList(0);
				setState(8212);
				match(RP_);
				setState(8213);
				match(OVERRIDING);
				setState(8214);
				overrideKind();
				setState(8215);
				match(VALUE);
				setState(8216);
				select();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8218);
				match(DEFAULT);
				setState(8219);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverrideKindContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(DDLStatementParser.USER, 0); }
		public TerminalNode SYSTEM() { return getToken(DDLStatementParser.SYSTEM, 0); }
		public OverrideKindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overrideKind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOverrideKind(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOverrideKind(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOverrideKind(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverrideKindContext overrideKind() throws RecognitionException {
		OverrideKindContext _localctx = new OverrideKindContext(_ctx, getState());
		enterRule(_localctx, 1166, RULE_overrideKind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8222);
			_la = _input.LA(1);
			if ( !(_la==USER || _la==SYSTEM) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertColumnListContext extends ParserRuleContext {
		public InsertColumnItemContext insertColumnItem() {
			return getRuleContext(InsertColumnItemContext.class,0);
		}
		public InsertColumnListContext insertColumnList() {
			return getRuleContext(InsertColumnListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public InsertColumnListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertColumnList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterInsertColumnList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitInsertColumnList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitInsertColumnList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertColumnListContext insertColumnList() throws RecognitionException {
		return insertColumnList(0);
	}

	private InsertColumnListContext insertColumnList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		InsertColumnListContext _localctx = new InsertColumnListContext(_ctx, _parentState);
		InsertColumnListContext _prevctx = _localctx;
		int _startState = 1168;
		enterRecursionRule(_localctx, 1168, RULE_insertColumnList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8225);
			insertColumnItem();
			}
			_ctx.stop = _input.LT(-1);
			setState(8232);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,747,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InsertColumnListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_insertColumnList);
					setState(8227);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8228);
					match(COMMA_);
					setState(8229);
					insertColumnItem();
					}
					} 
				}
				setState(8234);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,747,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class InsertColumnItemContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public InsertColumnItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertColumnItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterInsertColumnItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitInsertColumnItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitInsertColumnItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertColumnItemContext insertColumnItem() throws RecognitionException {
		InsertColumnItemContext _localctx = new InsertColumnItemContext(_ctx, getState());
		enterRule(_localctx, 1170, RULE_insertColumnItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8235);
			colId();
			setState(8236);
			optIndirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptOnConflictContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode CONFLICT() { return getToken(DDLStatementParser.CONFLICT, 0); }
		public OptConfExprContext optConfExpr() {
			return getRuleContext(OptConfExprContext.class,0);
		}
		public TerminalNode DO() { return getToken(DDLStatementParser.DO, 0); }
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public SetClauseListContext setClauseList() {
			return getRuleContext(SetClauseListContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode NOTHING() { return getToken(DDLStatementParser.NOTHING, 0); }
		public OptOnConflictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optOnConflict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptOnConflict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptOnConflict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptOnConflict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptOnConflictContext optOnConflict() throws RecognitionException {
		OptOnConflictContext _localctx = new OptOnConflictContext(_ctx, getState());
		enterRule(_localctx, 1172, RULE_optOnConflict);
		int _la;
		try {
			setState(8254);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,749,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8238);
				match(ON);
				setState(8239);
				match(CONFLICT);
				setState(8240);
				optConfExpr();
				setState(8241);
				match(DO);
				setState(8242);
				match(UPDATE);
				setState(8243);
				match(SET);
				setState(8244);
				setClauseList(0);
				setState(8246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(8245);
					whereClause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8248);
				match(ON);
				setState(8249);
				match(CONFLICT);
				setState(8250);
				optConfExpr();
				setState(8251);
				match(DO);
				setState(8252);
				match(NOTHING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptConfExprContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public IndexParamsContext indexParams() {
			return getRuleContext(IndexParamsContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public TerminalNode CONSTRAINT() { return getToken(DDLStatementParser.CONSTRAINT, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptConfExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optConfExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptConfExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptConfExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptConfExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptConfExprContext optConfExpr() throws RecognitionException {
		OptConfExprContext _localctx = new OptConfExprContext(_ctx, getState());
		enterRule(_localctx, 1174, RULE_optConfExpr);
		int _la;
		try {
			setState(8266);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8256);
				match(LP_);
				setState(8257);
				indexParams();
				setState(8258);
				match(RP_);
				setState(8260);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(8259);
					whereClause();
					}
				}

				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8262);
				match(ON);
				setState(8263);
				match(CONSTRAINT);
				setState(8264);
				name();
				}
				break;
			case DO:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public RelationExprOptAliasContext relationExprOptAlias() {
			return getRuleContext(RelationExprOptAliasContext.class,0);
		}
		public TerminalNode SET() { return getToken(DDLStatementParser.SET, 0); }
		public SetClauseListContext setClauseList() {
			return getRuleContext(SetClauseListContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereOrCurrentClauseContext whereOrCurrentClause() {
			return getRuleContext(WhereOrCurrentClauseContext.class,0);
		}
		public ReturningClauseContext returningClause() {
			return getRuleContext(ReturningClauseContext.class,0);
		}
		public UpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateContext update() throws RecognitionException {
		UpdateContext _localctx = new UpdateContext(_ctx, getState());
		enterRule(_localctx, 1176, RULE_update);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8268);
				withClause();
				}
			}

			setState(8271);
			match(UPDATE);
			setState(8272);
			relationExprOptAlias();
			setState(8273);
			match(SET);
			setState(8274);
			setClauseList(0);
			setState(8276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(8275);
				fromClause();
				}
			}

			setState(8279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(8278);
				whereOrCurrentClause();
				}
			}

			setState(8282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(8281);
				returningClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetClauseListContext extends ParserRuleContext {
		public SetClauseContext setClause() {
			return getRuleContext(SetClauseContext.class,0);
		}
		public SetClauseListContext setClauseList() {
			return getRuleContext(SetClauseListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public SetClauseListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setClauseList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSetClauseList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSetClauseList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSetClauseList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetClauseListContext setClauseList() throws RecognitionException {
		return setClauseList(0);
	}

	private SetClauseListContext setClauseList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SetClauseListContext _localctx = new SetClauseListContext(_ctx, _parentState);
		SetClauseListContext _prevctx = _localctx;
		int _startState = 1178;
		enterRecursionRule(_localctx, 1178, RULE_setClauseList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8285);
			setClause();
			}
			_ctx.stop = _input.LT(-1);
			setState(8292);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,756,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SetClauseListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_setClauseList);
					setState(8287);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8288);
					match(COMMA_);
					setState(8289);
					setClause();
					}
					} 
				}
				setState(8294);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,756,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SetClauseContext extends ParserRuleContext {
		public SetTargetContext setTarget() {
			return getRuleContext(SetTargetContext.class,0);
		}
		public TerminalNode EQ_() { return getToken(DDLStatementParser.EQ_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public SetTargetListContext setTargetList() {
			return getRuleContext(SetTargetListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public SetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetClauseContext setClause() throws RecognitionException {
		SetClauseContext _localctx = new SetClauseContext(_ctx, getState());
		enterRule(_localctx, 1180, RULE_setClause);
		try {
			setState(8305);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8295);
				setTarget();
				setState(8296);
				match(EQ_);
				setState(8297);
				aExpr(0);
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 2);
				{
				setState(8299);
				match(LP_);
				setState(8300);
				setTargetList(0);
				setState(8301);
				match(RP_);
				setState(8302);
				match(EQ_);
				setState(8303);
				aExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTargetContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public OptIndirectionContext optIndirection() {
			return getRuleContext(OptIndirectionContext.class,0);
		}
		public SetTargetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTarget; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSetTarget(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSetTarget(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSetTarget(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTargetContext setTarget() throws RecognitionException {
		SetTargetContext _localctx = new SetTargetContext(_ctx, getState());
		enterRule(_localctx, 1182, RULE_setTarget);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8307);
			colId();
			setState(8308);
			optIndirection(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetTargetListContext extends ParserRuleContext {
		public SetTargetContext setTarget() {
			return getRuleContext(SetTargetContext.class,0);
		}
		public SetTargetListContext setTargetList() {
			return getRuleContext(SetTargetListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public SetTargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTargetList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSetTargetList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSetTargetList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSetTargetList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetTargetListContext setTargetList() throws RecognitionException {
		return setTargetList(0);
	}

	private SetTargetListContext setTargetList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SetTargetListContext _localctx = new SetTargetListContext(_ctx, _parentState);
		SetTargetListContext _prevctx = _localctx;
		int _startState = 1184;
		enterRecursionRule(_localctx, 1184, RULE_setTargetList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8311);
			setTarget();
			}
			_ctx.stop = _input.LT(-1);
			setState(8318);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,758,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SetTargetListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_setTargetList);
					setState(8313);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8314);
					match(COMMA_);
					setState(8315);
					setTarget();
					}
					} 
				}
				setState(8320);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,758,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ReturningClauseContext extends ParserRuleContext {
		public TerminalNode RETURNING() { return getToken(DDLStatementParser.RETURNING, 0); }
		public TargetListContext targetList() {
			return getRuleContext(TargetListContext.class,0);
		}
		public ReturningClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returningClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterReturningClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitReturningClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitReturningClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturningClauseContext returningClause() throws RecognitionException {
		ReturningClauseContext _localctx = new ReturningClauseContext(_ctx, getState());
		enterRule(_localctx, 1186, RULE_returningClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8321);
			match(RETURNING);
			setState(8322);
			targetList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(DDLStatementParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public RelationExprOptAliasContext relationExprOptAlias() {
			return getRuleContext(RelationExprOptAliasContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public UsingClauseContext usingClause() {
			return getRuleContext(UsingClauseContext.class,0);
		}
		public WhereOrCurrentClauseContext whereOrCurrentClause() {
			return getRuleContext(WhereOrCurrentClauseContext.class,0);
		}
		public ReturningClauseContext returningClause() {
			return getRuleContext(ReturningClauseContext.class,0);
		}
		public DeleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDelete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDelete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDelete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteContext delete() throws RecognitionException {
		DeleteContext _localctx = new DeleteContext(_ctx, getState());
		enterRule(_localctx, 1188, RULE_delete);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8325);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8324);
				withClause();
				}
			}

			setState(8327);
			match(DELETE);
			setState(8328);
			match(FROM);
			setState(8329);
			relationExprOptAlias();
			setState(8331);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(8330);
				usingClause();
				}
			}

			setState(8334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(8333);
				whereOrCurrentClause();
				}
			}

			setState(8337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(8336);
				returningClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RelationExprOptAliasContext extends ParserRuleContext {
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public RelationExprOptAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relationExprOptAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRelationExprOptAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRelationExprOptAlias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRelationExprOptAlias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RelationExprOptAliasContext relationExprOptAlias() throws RecognitionException {
		RelationExprOptAliasContext _localctx = new RelationExprOptAliasContext(_ctx, getState());
		enterRule(_localctx, 1190, RULE_relationExprOptAlias);
		try {
			setState(8347);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8339);
				relationExpr();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8340);
				relationExpr();
				setState(8341);
				colId();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8343);
				relationExpr();
				setState(8344);
				match(AS);
				setState(8345);
				colId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingClauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public UsingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterUsingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitUsingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitUsingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingClauseContext usingClause() throws RecognitionException {
		UsingClauseContext _localctx = new UsingClauseContext(_ctx, getState());
		enterRule(_localctx, 1192, RULE_usingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8349);
			match(USING);
			setState(8350);
			fromList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectContext extends ParserRuleContext {
		public SelectNoParensContext selectNoParens() {
			return getRuleContext(SelectNoParensContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public SelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectContext select() throws RecognitionException {
		SelectContext _localctx = new SelectContext(_ctx, getState());
		enterRule(_localctx, 1194, RULE_select);
		try {
			setState(8354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,764,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8352);
				selectNoParens();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8353);
				selectWithParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectNoParensContext extends ParserRuleContext {
		public SelectClauseNContext selectClauseN() {
			return getRuleContext(SelectClauseNContext.class,0);
		}
		public SortClauseContext sortClause() {
			return getRuleContext(SortClauseContext.class,0);
		}
		public ForLockingClauseContext forLockingClause() {
			return getRuleContext(ForLockingClauseContext.class,0);
		}
		public SelectLimitContext selectLimit() {
			return getRuleContext(SelectLimitContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public SelectNoParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectNoParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSelectNoParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSelectNoParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSelectNoParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectNoParensContext selectNoParens() throws RecognitionException {
		SelectNoParensContext _localctx = new SelectNoParensContext(_ctx, getState());
		enterRule(_localctx, 1196, RULE_selectNoParens);
		int _la;
		try {
			setState(8401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,773,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8356);
				selectClauseN(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8357);
				selectClauseN(0);
				setState(8358);
				sortClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8360);
				selectClauseN(0);
				setState(8362);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(8361);
					sortClause();
					}
				}

				setState(8364);
				forLockingClause();
				setState(8366);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT || _la==OFFSET || _la==FETCH) {
					{
					setState(8365);
					selectLimit();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8368);
				selectClauseN(0);
				setState(8370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(8369);
					sortClause();
					}
				}

				setState(8372);
				selectLimit();
				setState(8374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(8373);
					forLockingClause();
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8376);
				withClause();
				setState(8377);
				selectClauseN(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8379);
				withClause();
				setState(8380);
				selectClauseN(0);
				setState(8381);
				sortClause();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8383);
				withClause();
				setState(8384);
				selectClauseN(0);
				setState(8386);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(8385);
					sortClause();
					}
				}

				setState(8388);
				forLockingClause();
				setState(8390);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT || _la==OFFSET || _la==FETCH) {
					{
					setState(8389);
					selectLimit();
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8392);
				withClause();
				setState(8393);
				selectClauseN(0);
				setState(8395);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(8394);
					sortClause();
					}
				}

				setState(8397);
				selectLimit();
				setState(8399);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(8398);
					forLockingClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectClauseNContext extends ParserRuleContext {
		public SimpleSelectContext simpleSelect() {
			return getRuleContext(SimpleSelectContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public List<SelectClauseNContext> selectClauseN() {
			return getRuleContexts(SelectClauseNContext.class);
		}
		public SelectClauseNContext selectClauseN(int i) {
			return getRuleContext(SelectClauseNContext.class,i);
		}
		public TerminalNode UNION() { return getToken(DDLStatementParser.UNION, 0); }
		public AllOrDistinctContext allOrDistinct() {
			return getRuleContext(AllOrDistinctContext.class,0);
		}
		public TerminalNode INTERSECT() { return getToken(DDLStatementParser.INTERSECT, 0); }
		public TerminalNode EXCEPT() { return getToken(DDLStatementParser.EXCEPT, 0); }
		public SelectClauseNContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectClauseN; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSelectClauseN(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSelectClauseN(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSelectClauseN(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectClauseNContext selectClauseN() throws RecognitionException {
		return selectClauseN(0);
	}

	private SelectClauseNContext selectClauseN(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SelectClauseNContext _localctx = new SelectClauseNContext(_ctx, _parentState);
		SelectClauseNContext _prevctx = _localctx;
		int _startState = 1198;
		enterRecursionRule(_localctx, 1198, RULE_selectClauseN, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8406);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case TABLE:
			case VALUES:
				{
				setState(8404);
				simpleSelect();
				}
				break;
			case T__2:
				{
				setState(8405);
				selectWithParens();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(8428);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,779,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(8426);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
					case 1:
						{
						_localctx = new SelectClauseNContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_selectClauseN);
						setState(8408);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(8409);
						match(UNION);
						setState(8411);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==DISTINCT || _la==ALL) {
							{
							setState(8410);
							allOrDistinct();
							}
						}

						setState(8413);
						selectClauseN(4);
						}
						break;
					case 2:
						{
						_localctx = new SelectClauseNContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_selectClauseN);
						setState(8414);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(8415);
						match(INTERSECT);
						setState(8417);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==DISTINCT || _la==ALL) {
							{
							setState(8416);
							allOrDistinct();
							}
						}

						setState(8419);
						selectClauseN(3);
						}
						break;
					case 3:
						{
						_localctx = new SelectClauseNContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_selectClauseN);
						setState(8420);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(8421);
						match(EXCEPT);
						setState(8423);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==DISTINCT || _la==ALL) {
							{
							setState(8422);
							allOrDistinct();
							}
						}

						setState(8425);
						selectClauseN(2);
						}
						break;
					}
					} 
				}
				setState(8430);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,779,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SimpleSelectContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(DDLStatementParser.SELECT, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TargetListContext targetList() {
			return getRuleContext(TargetListContext.class,0);
		}
		public IntoClauseContext intoClause() {
			return getRuleContext(IntoClauseContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupClauseContext groupClause() {
			return getRuleContext(GroupClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public DistinctClauseContext distinctClause() {
			return getRuleContext(DistinctClauseContext.class,0);
		}
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public SimpleSelectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleSelect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleSelectContext simpleSelect() throws RecognitionException {
		SimpleSelectContext _localctx = new SimpleSelectContext(_ctx, getState());
		enterRule(_localctx, 1200, RULE_simpleSelect);
		try {
			setState(8480);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,794,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8431);
				match(SELECT);
				setState(8433);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
				case 1:
					{
					setState(8432);
					match(ALL);
					}
					break;
				}
				setState(8436);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
				case 1:
					{
					setState(8435);
					targetList(0);
					}
					break;
				}
				setState(8439);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,782,_ctx) ) {
				case 1:
					{
					setState(8438);
					intoClause();
					}
					break;
				}
				setState(8442);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,783,_ctx) ) {
				case 1:
					{
					setState(8441);
					fromClause();
					}
					break;
				}
				setState(8445);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,784,_ctx) ) {
				case 1:
					{
					setState(8444);
					whereClause();
					}
					break;
				}
				setState(8448);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
				case 1:
					{
					setState(8447);
					groupClause();
					}
					break;
				}
				setState(8451);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
				case 1:
					{
					setState(8450);
					havingClause();
					}
					break;
				}
				setState(8454);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
				case 1:
					{
					setState(8453);
					windowClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8456);
				match(SELECT);
				setState(8457);
				distinctClause();
				setState(8458);
				targetList(0);
				setState(8460);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
				case 1:
					{
					setState(8459);
					intoClause();
					}
					break;
				}
				setState(8463);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,789,_ctx) ) {
				case 1:
					{
					setState(8462);
					fromClause();
					}
					break;
				}
				setState(8466);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,790,_ctx) ) {
				case 1:
					{
					setState(8465);
					whereClause();
					}
					break;
				}
				setState(8469);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
				case 1:
					{
					setState(8468);
					groupClause();
					}
					break;
				}
				setState(8472);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,792,_ctx) ) {
				case 1:
					{
					setState(8471);
					havingClause();
					}
					break;
				}
				setState(8475);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
				case 1:
					{
					setState(8474);
					windowClause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8477);
				valuesClause(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8478);
				match(TABLE);
				setState(8479);
				relationExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public CteListContext cteList() {
			return getRuleContext(CteListContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(DDLStatementParser.RECURSIVE, 0); }
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWithClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 1202, RULE_withClause);
		try {
			setState(8487);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,795,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8482);
				match(WITH);
				setState(8483);
				cteList(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8484);
				match(WITH);
				setState(8485);
				match(RECURSIVE);
				setState(8486);
				cteList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntoClauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(DDLStatementParser.INTO, 0); }
		public OptTempTableNameContext optTempTableName() {
			return getRuleContext(OptTempTableNameContext.class,0);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterIntoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitIntoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitIntoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntoClauseContext intoClause() throws RecognitionException {
		IntoClauseContext _localctx = new IntoClauseContext(_ctx, getState());
		enterRule(_localctx, 1204, RULE_intoClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8489);
			match(INTO);
			setState(8490);
			optTempTableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptTempTableNameContext extends ParserRuleContext {
		public TerminalNode TEMPORARY() { return getToken(DDLStatementParser.TEMPORARY, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TerminalNode TEMP() { return getToken(DDLStatementParser.TEMP, 0); }
		public TerminalNode LOCAL() { return getToken(DDLStatementParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(DDLStatementParser.GLOBAL, 0); }
		public TerminalNode UNLOGGED() { return getToken(DDLStatementParser.UNLOGGED, 0); }
		public OptTempTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTempTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptTempTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptTempTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptTempTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptTempTableNameContext optTempTableName() throws RecognitionException {
		OptTempTableNameContext _localctx = new OptTempTableNameContext(_ctx, getState());
		enterRule(_localctx, 1206, RULE_optTempTableName);
		int _la;
		try {
			setState(8536);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8492);
				match(TEMPORARY);
				setState(8494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8493);
					match(TABLE);
					}
				}

				setState(8496);
				qualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8497);
				match(TEMP);
				setState(8499);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8498);
					match(TABLE);
					}
				}

				setState(8501);
				qualifiedName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8502);
				match(LOCAL);
				setState(8503);
				match(TEMPORARY);
				setState(8505);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8504);
					match(TABLE);
					}
				}

				setState(8507);
				qualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8508);
				match(LOCAL);
				setState(8509);
				match(TEMP);
				setState(8511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8510);
					match(TABLE);
					}
				}

				setState(8513);
				qualifiedName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8514);
				match(GLOBAL);
				setState(8515);
				match(TEMPORARY);
				setState(8517);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8516);
					match(TABLE);
					}
				}

				setState(8519);
				qualifiedName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8520);
				match(GLOBAL);
				setState(8521);
				match(TEMP);
				setState(8523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8522);
					match(TABLE);
					}
				}

				setState(8525);
				qualifiedName();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8526);
				match(UNLOGGED);
				setState(8528);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8527);
					match(TABLE);
					}
				}

				setState(8530);
				qualifiedName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(8531);
					match(TABLE);
					}
				}

				setState(8534);
				qualifiedName();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8535);
				qualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteListContext extends ParserRuleContext {
		public CommonTableExprContext commonTableExpr() {
			return getRuleContext(CommonTableExprContext.class,0);
		}
		public CteListContext cteList() {
			return getRuleContext(CteListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public CteListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCteList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCteList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCteList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteListContext cteList() throws RecognitionException {
		return cteList(0);
	}

	private CteListContext cteList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		CteListContext _localctx = new CteListContext(_ctx, _parentState);
		CteListContext _prevctx = _localctx;
		int _startState = 1208;
		enterRecursionRule(_localctx, 1208, RULE_cteList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8539);
			commonTableExpr();
			}
			_ctx.stop = _input.LT(-1);
			setState(8546);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,805,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CteListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_cteList);
					setState(8541);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8542);
					match(COMMA_);
					setState(8543);
					commonTableExpr();
					}
					} 
				}
				setState(8548);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,805,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class CommonTableExprContext extends ParserRuleContext {
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public OptNameListContext optNameList() {
			return getRuleContext(OptNameListContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public OptMaterializedContext optMaterialized() {
			return getRuleContext(OptMaterializedContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public CommonTableExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCommonTableExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCommonTableExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCommonTableExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExprContext commonTableExpr() throws RecognitionException {
		CommonTableExprContext _localctx = new CommonTableExprContext(_ctx, getState());
		enterRule(_localctx, 1210, RULE_commonTableExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8549);
			name();
			setState(8550);
			optNameList();
			setState(8551);
			match(AS);
			setState(8552);
			optMaterialized();
			setState(8553);
			match(LP_);
			setState(8554);
			preparableStmt();
			setState(8555);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptMaterializedContext extends ParserRuleContext {
		public TerminalNode MATERIALIZED() { return getToken(DDLStatementParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public OptMaterializedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optMaterialized; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptMaterialized(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptMaterialized(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptMaterialized(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptMaterializedContext optMaterialized() throws RecognitionException {
		OptMaterializedContext _localctx = new OptMaterializedContext(_ctx, getState());
		enterRule(_localctx, 1212, RULE_optMaterialized);
		try {
			setState(8561);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATERIALIZED:
				enterOuterAlt(_localctx, 1);
				{
				setState(8557);
				match(MATERIALIZED);
				}
				break;
			case NOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8558);
				match(NOT);
				setState(8559);
				match(MATERIALIZED);
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptNameListContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public OptNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptNameListContext optNameList() throws RecognitionException {
		OptNameListContext _localctx = new OptNameListContext(_ctx, getState());
		enterRule(_localctx, 1214, RULE_optNameList);
		try {
			setState(8568);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8563);
				match(LP_);
				setState(8564);
				nameList(0);
				setState(8565);
				match(RP_);
				}
				break;
			case AS:
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PreparableStmtContext extends ParserRuleContext {
		public SelectContext select() {
			return getRuleContext(SelectContext.class,0);
		}
		public InsertContext insert() {
			return getRuleContext(InsertContext.class,0);
		}
		public UpdateContext update() {
			return getRuleContext(UpdateContext.class,0);
		}
		public DeleteContext delete() {
			return getRuleContext(DeleteContext.class,0);
		}
		public PreparableStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_preparableStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterPreparableStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitPreparableStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitPreparableStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PreparableStmtContext preparableStmt() throws RecognitionException {
		PreparableStmtContext _localctx = new PreparableStmtContext(_ctx, getState());
		enterRule(_localctx, 1216, RULE_preparableStmt);
		try {
			setState(8574);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8570);
				select();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8571);
				insert();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8572);
				update();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8573);
				delete();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForLockingClauseContext extends ParserRuleContext {
		public ForLockingItemsContext forLockingItems() {
			return getRuleContext(ForLockingItemsContext.class,0);
		}
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode READ() { return getToken(DDLStatementParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(DDLStatementParser.ONLY, 0); }
		public ForLockingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterForLockingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitForLockingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitForLockingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingClauseContext forLockingClause() throws RecognitionException {
		ForLockingClauseContext _localctx = new ForLockingClauseContext(_ctx, getState());
		enterRule(_localctx, 1218, RULE_forLockingClause);
		try {
			setState(8580);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,809,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8576);
				forLockingItems(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8577);
				match(FOR);
				setState(8578);
				match(READ);
				setState(8579);
				match(ONLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForLockingItemsContext extends ParserRuleContext {
		public ForLockingItemContext forLockingItem() {
			return getRuleContext(ForLockingItemContext.class,0);
		}
		public ForLockingItemsContext forLockingItems() {
			return getRuleContext(ForLockingItemsContext.class,0);
		}
		public ForLockingItemsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingItems; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterForLockingItems(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitForLockingItems(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitForLockingItems(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingItemsContext forLockingItems() throws RecognitionException {
		return forLockingItems(0);
	}

	private ForLockingItemsContext forLockingItems(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ForLockingItemsContext _localctx = new ForLockingItemsContext(_ctx, _parentState);
		ForLockingItemsContext _prevctx = _localctx;
		int _startState = 1220;
		enterRecursionRule(_localctx, 1220, RULE_forLockingItems, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8583);
			forLockingItem();
			}
			_ctx.stop = _input.LT(-1);
			setState(8589);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,810,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ForLockingItemsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_forLockingItems);
					setState(8585);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8586);
					forLockingItem();
					}
					} 
				}
				setState(8591);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,810,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ForLockingItemContext extends ParserRuleContext {
		public ForLockingStrengthContext forLockingStrength() {
			return getRuleContext(ForLockingStrengthContext.class,0);
		}
		public LockedRelsListContext lockedRelsList() {
			return getRuleContext(LockedRelsListContext.class,0);
		}
		public NowaitOrSkipContext nowaitOrSkip() {
			return getRuleContext(NowaitOrSkipContext.class,0);
		}
		public ForLockingItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterForLockingItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitForLockingItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitForLockingItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingItemContext forLockingItem() throws RecognitionException {
		ForLockingItemContext _localctx = new ForLockingItemContext(_ctx, getState());
		enterRule(_localctx, 1222, RULE_forLockingItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8592);
			forLockingStrength();
			setState(8594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,811,_ctx) ) {
			case 1:
				{
				setState(8593);
				lockedRelsList();
				}
				break;
			}
			setState(8597);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,812,_ctx) ) {
			case 1:
				{
				setState(8596);
				nowaitOrSkip();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NowaitOrSkipContext extends ParserRuleContext {
		public TerminalNode NOWAIT() { return getToken(DDLStatementParser.NOWAIT, 0); }
		public TerminalNode LOCKED() { return getToken(DDLStatementParser.LOCKED, 0); }
		public NowaitOrSkipContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nowaitOrSkip; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterNowaitOrSkip(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitNowaitOrSkip(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitNowaitOrSkip(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NowaitOrSkipContext nowaitOrSkip() throws RecognitionException {
		NowaitOrSkipContext _localctx = new NowaitOrSkipContext(_ctx, getState());
		enterRule(_localctx, 1224, RULE_nowaitOrSkip);
		try {
			setState(8602);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOWAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8599);
				match(NOWAIT);
				}
				break;
			case T__3:
				enterOuterAlt(_localctx, 2);
				{
				setState(8600);
				match(T__3);
				setState(8601);
				match(LOCKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForLockingStrengthContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(DDLStatementParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode KEY() { return getToken(DDLStatementParser.KEY, 0); }
		public TerminalNode SHARE() { return getToken(DDLStatementParser.SHARE, 0); }
		public ForLockingStrengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forLockingStrength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterForLockingStrength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitForLockingStrength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitForLockingStrength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForLockingStrengthContext forLockingStrength() throws RecognitionException {
		ForLockingStrengthContext _localctx = new ForLockingStrengthContext(_ctx, getState());
		enterRule(_localctx, 1226, RULE_forLockingStrength);
		try {
			setState(8615);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8604);
				match(FOR);
				setState(8605);
				match(UPDATE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8606);
				match(FOR);
				setState(8607);
				match(NO);
				setState(8608);
				match(KEY);
				setState(8609);
				match(UPDATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8610);
				match(FOR);
				setState(8611);
				match(SHARE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8612);
				match(FOR);
				setState(8613);
				match(KEY);
				setState(8614);
				match(SHARE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockedRelsListContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public LockedRelsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockedRelsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterLockedRelsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitLockedRelsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitLockedRelsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockedRelsListContext lockedRelsList() throws RecognitionException {
		LockedRelsListContext _localctx = new LockedRelsListContext(_ctx, getState());
		enterRule(_localctx, 1228, RULE_lockedRelsList);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8617);
			match(OF);
			setState(8618);
			qualifiedNameList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QualifiedNameListContext extends ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public QualifiedNameListContext qualifiedNameList() {
			return getRuleContext(QualifiedNameListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualifiedNameList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterQualifiedNameList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitQualifiedNameList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitQualifiedNameList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QualifiedNameListContext qualifiedNameList() throws RecognitionException {
		return qualifiedNameList(0);
	}

	private QualifiedNameListContext qualifiedNameList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		QualifiedNameListContext _localctx = new QualifiedNameListContext(_ctx, _parentState);
		QualifiedNameListContext _prevctx = _localctx;
		int _startState = 1230;
		enterRecursionRule(_localctx, 1230, RULE_qualifiedNameList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8621);
			qualifiedName();
			}
			_ctx.stop = _input.LT(-1);
			setState(8628);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,815,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_qualifiedNameList);
					setState(8623);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8624);
					match(COMMA_);
					setState(8625);
					qualifiedName();
					}
					} 
				}
				setState(8630);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,815,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SelectLimitContext extends ParserRuleContext {
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public SelectLimitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLimit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSelectLimit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSelectLimit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSelectLimit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLimitContext selectLimit() throws RecognitionException {
		SelectLimitContext _localctx = new SelectLimitContext(_ctx, getState());
		enterRule(_localctx, 1232, RULE_selectLimit);
		try {
			setState(8639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,816,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8631);
				limitClause();
				setState(8632);
				offsetClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8634);
				offsetClause();
				setState(8635);
				limitClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8637);
				limitClause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8638);
				offsetClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesClauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(DDLStatementParser.VALUES, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public ValuesClauseContext valuesClause() {
			return getRuleContext(ValuesClauseContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public ValuesClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterValuesClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitValuesClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitValuesClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesClauseContext valuesClause() throws RecognitionException {
		return valuesClause(0);
	}

	private ValuesClauseContext valuesClause(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ValuesClauseContext _localctx = new ValuesClauseContext(_ctx, _parentState);
		ValuesClauseContext _prevctx = _localctx;
		int _startState = 1234;
		enterRecursionRule(_localctx, 1234, RULE_valuesClause, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8642);
			match(VALUES);
			setState(8643);
			match(LP_);
			setState(8644);
			exprList(0);
			setState(8645);
			match(RP_);
			}
			_ctx.stop = _input.LT(-1);
			setState(8655);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,817,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ValuesClauseContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_valuesClause);
					setState(8647);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8648);
					match(COMMA_);
					setState(8649);
					match(LP_);
					setState(8650);
					exprList(0);
					setState(8651);
					match(RP_);
					}
					} 
				}
				setState(8657);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,817,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(DDLStatementParser.LIMIT, 0); }
		public SelectLimitValueContext selectLimitValue() {
			return getRuleContext(SelectLimitValueContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public SelectOffsetValueContext selectOffsetValue() {
			return getRuleContext(SelectOffsetValueContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(DDLStatementParser.FETCH, 0); }
		public FirstOrNextContext firstOrNext() {
			return getRuleContext(FirstOrNextContext.class,0);
		}
		public SelectFetchFirstValueContext selectFetchFirstValue() {
			return getRuleContext(SelectFetchFirstValueContext.class,0);
		}
		public RowOrRowsContext rowOrRows() {
			return getRuleContext(RowOrRowsContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(DDLStatementParser.ONLY, 0); }
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(DDLStatementParser.TIES, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 1236, RULE_limitClause);
		try {
			setState(8689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,818,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8658);
				match(LIMIT);
				setState(8659);
				selectLimitValue();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8660);
				match(LIMIT);
				setState(8661);
				selectLimitValue();
				setState(8662);
				match(COMMA_);
				setState(8663);
				selectOffsetValue();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8665);
				match(FETCH);
				setState(8666);
				firstOrNext();
				setState(8667);
				selectFetchFirstValue();
				setState(8668);
				rowOrRows();
				setState(8669);
				match(ONLY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8671);
				match(FETCH);
				setState(8672);
				firstOrNext();
				setState(8673);
				selectFetchFirstValue();
				setState(8674);
				rowOrRows();
				setState(8675);
				match(WITH);
				setState(8676);
				match(TIES);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8678);
				match(FETCH);
				setState(8679);
				firstOrNext();
				setState(8680);
				rowOrRows();
				setState(8681);
				match(ONLY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8683);
				match(FETCH);
				setState(8684);
				firstOrNext();
				setState(8685);
				rowOrRows();
				setState(8686);
				match(WITH);
				setState(8687);
				match(TIES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OffsetClauseContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(DDLStatementParser.OFFSET, 0); }
		public SelectOffsetValueContext selectOffsetValue() {
			return getRuleContext(SelectOffsetValueContext.class,0);
		}
		public SelectFetchFirstValueContext selectFetchFirstValue() {
			return getRuleContext(SelectFetchFirstValueContext.class,0);
		}
		public RowOrRowsContext rowOrRows() {
			return getRuleContext(RowOrRowsContext.class,0);
		}
		public OffsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offsetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOffsetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOffsetClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOffsetClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OffsetClauseContext offsetClause() throws RecognitionException {
		OffsetClauseContext _localctx = new OffsetClauseContext(_ctx, getState());
		enterRule(_localctx, 1238, RULE_offsetClause);
		try {
			setState(8697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,819,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8691);
				match(OFFSET);
				setState(8692);
				selectOffsetValue();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8693);
				match(OFFSET);
				setState(8694);
				selectFetchFirstValue();
				setState(8695);
				rowOrRows();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLimitValueContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public SelectLimitValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLimitValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSelectLimitValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSelectLimitValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSelectLimitValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLimitValueContext selectLimitValue() throws RecognitionException {
		SelectLimitValueContext _localctx = new SelectLimitValueContext(_ctx, getState());
		enterRule(_localctx, 1240, RULE_selectLimitValue);
		try {
			setState(8701);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case CARET_:
			case MOD_:
			case PLUS_:
			case MINUS_:
			case ASTERISK_:
			case SLASH_:
			case EQ_:
			case NEQ_:
			case GT_:
			case GTE_:
			case LT_:
			case LTE_:
			case LP_:
			case QUESTION_:
			case TILDE_TILDE_:
			case NOT_TILDE_TILDE_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case UNIQUE:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NOT:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case DEFAULT:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8699);
				aExpr(0);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8700);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectOffsetValueContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public SelectOffsetValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectOffsetValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSelectOffsetValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSelectOffsetValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSelectOffsetValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectOffsetValueContext selectOffsetValue() throws RecognitionException {
		SelectOffsetValueContext _localctx = new SelectOffsetValueContext(_ctx, getState());
		enterRule(_localctx, 1242, RULE_selectOffsetValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8703);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFetchFirstValueContext extends ParserRuleContext {
		public CExprContext cExpr() {
			return getRuleContext(CExprContext.class,0);
		}
		public TerminalNode PLUS_() { return getToken(DDLStatementParser.PLUS_, 0); }
		public TerminalNode NUMBER_() { return getToken(DDLStatementParser.NUMBER_, 0); }
		public TerminalNode MINUS_() { return getToken(DDLStatementParser.MINUS_, 0); }
		public SelectFetchFirstValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFetchFirstValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterSelectFetchFirstValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitSelectFetchFirstValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitSelectFetchFirstValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFetchFirstValueContext selectFetchFirstValue() throws RecognitionException {
		SelectFetchFirstValueContext _localctx = new SelectFetchFirstValueContext(_ctx, getState());
		enterRule(_localctx, 1244, RULE_selectFetchFirstValue);
		try {
			setState(8710);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case LP_:
			case QUESTION_:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case CASE:
			case CAST:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case IF:
			case IS:
			case NULL:
			case TRUE:
			case FALSE:
			case EXISTS:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case ARRAY:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case CURRENT_USER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case NULLIF:
			case VARYING:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case USER:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SESSION_USER:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_ROLE:
			case CURRENT_CATALOG:
			case CURRENT_SCHEMA:
			case NORMALIZE:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case PARAM:
			case IDENTIFIER_:
			case STRING_:
			case NUMBER_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8705);
				cExpr();
				}
				break;
			case PLUS_:
				enterOuterAlt(_localctx, 2);
				{
				setState(8706);
				match(PLUS_);
				setState(8707);
				match(NUMBER_);
				}
				break;
			case MINUS_:
				enterOuterAlt(_localctx, 3);
				{
				setState(8708);
				match(MINUS_);
				setState(8709);
				match(NUMBER_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RowOrRowsContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(DDLStatementParser.ROWS, 0); }
		public RowOrRowsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowOrRows; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRowOrRows(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRowOrRows(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRowOrRows(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RowOrRowsContext rowOrRows() throws RecognitionException {
		RowOrRowsContext _localctx = new RowOrRowsContext(_ctx, getState());
		enterRule(_localctx, 1246, RULE_rowOrRows);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8712);
			_la = _input.LA(1);
			if ( !(_la==ROW || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FirstOrNextContext extends ParserRuleContext {
		public TerminalNode FIRST() { return getToken(DDLStatementParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(DDLStatementParser.NEXT, 0); }
		public FirstOrNextContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_firstOrNext; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFirstOrNext(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFirstOrNext(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFirstOrNext(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FirstOrNextContext firstOrNext() throws RecognitionException {
		FirstOrNextContext _localctx = new FirstOrNextContext(_ctx, getState());
		enterRule(_localctx, 1248, RULE_firstOrNext);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8714);
			_la = _input.LA(1);
			if ( !(_la==NEXT || _la==FIRST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TargetListContext extends ParserRuleContext {
		public TargetElContext targetEl() {
			return getRuleContext(TargetElContext.class,0);
		}
		public TargetListContext targetList() {
			return getRuleContext(TargetListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public TargetListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTargetList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTargetList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTargetList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetListContext targetList() throws RecognitionException {
		return targetList(0);
	}

	private TargetListContext targetList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TargetListContext _localctx = new TargetListContext(_ctx, _parentState);
		TargetListContext _prevctx = _localctx;
		int _startState = 1250;
		enterRecursionRule(_localctx, 1250, RULE_targetList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8717);
			targetEl();
			}
			_ctx.stop = _input.LT(-1);
			setState(8724);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,822,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TargetListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_targetList);
					setState(8719);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8720);
					match(COMMA_);
					setState(8721);
					targetEl();
					}
					} 
				}
				setState(8726);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,822,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TargetElContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode DOT_ASTERISK_() { return getToken(DDLStatementParser.DOT_ASTERISK_, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TargetElContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetEl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTargetEl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTargetEl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTargetEl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetElContext targetEl() throws RecognitionException {
		TargetElContext _localctx = new TargetElContext(_ctx, getState());
		enterRule(_localctx, 1252, RULE_targetEl);
		try {
			setState(8739);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,823,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8727);
				colId();
				setState(8728);
				match(DOT_ASTERISK_);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8730);
				aExpr(0);
				setState(8731);
				match(AS);
				setState(8732);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8734);
				aExpr(0);
				setState(8735);
				identifier();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8737);
				aExpr(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8738);
				match(ASTERISK_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(DDLStatementParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(DDLStatementParser.BY, 0); }
		public GroupByListContext groupByList() {
			return getRuleContext(GroupByListContext.class,0);
		}
		public GroupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGroupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGroupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGroupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupClauseContext groupClause() throws RecognitionException {
		GroupClauseContext _localctx = new GroupClauseContext(_ctx, getState());
		enterRule(_localctx, 1254, RULE_groupClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8741);
			match(GROUP);
			setState(8742);
			match(BY);
			setState(8743);
			groupByList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByListContext extends ParserRuleContext {
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public GroupByListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGroupByList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGroupByList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGroupByList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByListContext groupByList() throws RecognitionException {
		GroupByListContext _localctx = new GroupByListContext(_ctx, getState());
		enterRule(_localctx, 1256, RULE_groupByList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8745);
			groupByItem();
			setState(8750);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,824,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8746);
					match(COMMA_);
					setState(8747);
					groupByItem();
					}
					} 
				}
				setState(8752);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,824,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public EmptyGroupingSetContext emptyGroupingSet() {
			return getRuleContext(EmptyGroupingSetContext.class,0);
		}
		public CubeClauseContext cubeClause() {
			return getRuleContext(CubeClauseContext.class,0);
		}
		public RollupClauseContext rollupClause() {
			return getRuleContext(RollupClauseContext.class,0);
		}
		public GroupingSetsClauseContext groupingSetsClause() {
			return getRuleContext(GroupingSetsClauseContext.class,0);
		}
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGroupByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 1258, RULE_groupByItem);
		try {
			setState(8758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,825,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8753);
				aExpr(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8754);
				emptyGroupingSet();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8755);
				cubeClause();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8756);
				rollupClause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8757);
				groupingSetsClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyGroupingSetContext extends ParserRuleContext {
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public EmptyGroupingSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyGroupingSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterEmptyGroupingSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitEmptyGroupingSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitEmptyGroupingSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyGroupingSetContext emptyGroupingSet() throws RecognitionException {
		EmptyGroupingSetContext _localctx = new EmptyGroupingSetContext(_ctx, getState());
		enterRule(_localctx, 1260, RULE_emptyGroupingSet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8760);
			match(LP_);
			setState(8761);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RollupClauseContext extends ParserRuleContext {
		public TerminalNode ROLLUP() { return getToken(DDLStatementParser.ROLLUP, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public RollupClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollupClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterRollupClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitRollupClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitRollupClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RollupClauseContext rollupClause() throws RecognitionException {
		RollupClauseContext _localctx = new RollupClauseContext(_ctx, getState());
		enterRule(_localctx, 1262, RULE_rollupClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8763);
			match(ROLLUP);
			setState(8764);
			match(LP_);
			setState(8765);
			exprList(0);
			setState(8766);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CubeClauseContext extends ParserRuleContext {
		public TerminalNode CUBE() { return getToken(DDLStatementParser.CUBE, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ExprListContext exprList() {
			return getRuleContext(ExprListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public CubeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cubeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCubeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCubeClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCubeClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CubeClauseContext cubeClause() throws RecognitionException {
		CubeClauseContext _localctx = new CubeClauseContext(_ctx, getState());
		enterRule(_localctx, 1264, RULE_cubeClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8768);
			match(CUBE);
			setState(8769);
			match(LP_);
			setState(8770);
			exprList(0);
			setState(8771);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingSetsClauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(DDLStatementParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(DDLStatementParser.SETS, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public GroupByListContext groupByList() {
			return getRuleContext(GroupByListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public GroupingSetsClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingSetsClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterGroupingSetsClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitGroupingSetsClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitGroupingSetsClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingSetsClauseContext groupingSetsClause() throws RecognitionException {
		GroupingSetsClauseContext _localctx = new GroupingSetsClauseContext(_ctx, getState());
		enterRule(_localctx, 1266, RULE_groupingSetsClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8773);
			match(GROUPING);
			setState(8774);
			match(SETS);
			setState(8775);
			match(LP_);
			setState(8776);
			groupByList();
			setState(8777);
			match(RP_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(DDLStatementParser.WINDOW, 0); }
		public WindowDefinitionListContext windowDefinitionList() {
			return getRuleContext(WindowDefinitionListContext.class,0);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWindowClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWindowClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 1268, RULE_windowClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8779);
			match(WINDOW);
			setState(8780);
			windowDefinitionList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowDefinitionListContext extends ParserRuleContext {
		public WindowDefinitionContext windowDefinition() {
			return getRuleContext(WindowDefinitionContext.class,0);
		}
		public WindowDefinitionListContext windowDefinitionList() {
			return getRuleContext(WindowDefinitionListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public WindowDefinitionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowDefinitionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWindowDefinitionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWindowDefinitionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWindowDefinitionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowDefinitionListContext windowDefinitionList() throws RecognitionException {
		return windowDefinitionList(0);
	}

	private WindowDefinitionListContext windowDefinitionList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		WindowDefinitionListContext _localctx = new WindowDefinitionListContext(_ctx, _parentState);
		WindowDefinitionListContext _prevctx = _localctx;
		int _startState = 1270;
		enterRecursionRule(_localctx, 1270, RULE_windowDefinitionList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8783);
			windowDefinition();
			}
			_ctx.stop = _input.LT(-1);
			setState(8790);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,826,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new WindowDefinitionListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_windowDefinitionList);
					setState(8785);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8786);
					match(COMMA_);
					setState(8787);
					windowDefinition();
					}
					} 
				}
				setState(8792);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,826,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class WindowDefinitionContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public WindowSpecificationContext windowSpecification() {
			return getRuleContext(WindowSpecificationContext.class,0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWindowDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWindowDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWindowDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowDefinitionContext windowDefinition() throws RecognitionException {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(_ctx, getState());
		enterRule(_localctx, 1272, RULE_windowDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8793);
			colId();
			setState(8794);
			match(AS);
			setState(8795);
			windowSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExistingWindowNameContext extends ParserRuleContext {
		public ColIdContext colId() {
			return getRuleContext(ColIdContext.class,0);
		}
		public ExistingWindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existingWindowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterExistingWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitExistingWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitExistingWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExistingWindowNameContext existingWindowName() throws RecognitionException {
		ExistingWindowNameContext _localctx = new ExistingWindowNameContext(_ctx, getState());
		enterRule(_localctx, 1274, RULE_existingWindowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8797);
			colId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptWindowExclusionClauseContext extends ParserRuleContext {
		public TerminalNode EXCLUDE() { return getToken(DDLStatementParser.EXCLUDE, 0); }
		public TerminalNode CURRENT() { return getToken(DDLStatementParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode GROUP() { return getToken(DDLStatementParser.GROUP, 0); }
		public TerminalNode TIES() { return getToken(DDLStatementParser.TIES, 0); }
		public TerminalNode NO() { return getToken(DDLStatementParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(DDLStatementParser.OTHERS, 0); }
		public OptWindowExclusionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optWindowExclusionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterOptWindowExclusionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitOptWindowExclusionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitOptWindowExclusionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptWindowExclusionClauseContext optWindowExclusionClause() throws RecognitionException {
		OptWindowExclusionClauseContext _localctx = new OptWindowExclusionClauseContext(_ctx, getState());
		enterRule(_localctx, 1276, RULE_optWindowExclusionClause);
		try {
			setState(8810);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,827,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8799);
				match(EXCLUDE);
				setState(8800);
				match(CURRENT);
				setState(8801);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8802);
				match(EXCLUDE);
				setState(8803);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8804);
				match(EXCLUDE);
				setState(8805);
				match(TIES);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8806);
				match(EXCLUDE);
				setState(8807);
				match(NO);
				setState(8808);
				match(OTHERS);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 1278, RULE_fromClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8812);
			match(FROM);
			setState(8813);
			fromList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromListContext extends ParserRuleContext {
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public FromListContext fromList() {
			return getRuleContext(FromListContext.class,0);
		}
		public TerminalNode COMMA_() { return getToken(DDLStatementParser.COMMA_, 0); }
		public FromListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFromList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFromList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFromList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromListContext fromList() throws RecognitionException {
		return fromList(0);
	}

	private FromListContext fromList(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		FromListContext _localctx = new FromListContext(_ctx, _parentState);
		FromListContext _prevctx = _localctx;
		int _startState = 1280;
		enterRecursionRule(_localctx, 1280, RULE_fromList, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(8816);
			tableReference(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(8823);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,828,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new FromListContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_fromList);
					setState(8818);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(8819);
					match(COMMA_);
					setState(8820);
					tableReference(0);
					}
					} 
				}
				setState(8825);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,828,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class TableReferenceContext extends ParserRuleContext {
		public RelationExprContext relationExpr() {
			return getRuleContext(RelationExprContext.class,0);
		}
		public AliasClauseContext aliasClause() {
			return getRuleContext(AliasClauseContext.class,0);
		}
		public TablesampleClauseContext tablesampleClause() {
			return getRuleContext(TablesampleClauseContext.class,0);
		}
		public FunctionTableContext functionTable() {
			return getRuleContext(FunctionTableContext.class,0);
		}
		public FuncAliasClauseContext funcAliasClause() {
			return getRuleContext(FuncAliasClauseContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(DDLStatementParser.LATERAL, 0); }
		public XmlTableContext xmlTable() {
			return getRuleContext(XmlTableContext.class,0);
		}
		public SelectWithParensContext selectWithParens() {
			return getRuleContext(SelectWithParensContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public JoinedTableContext joinedTable() {
			return getRuleContext(JoinedTableContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitTableReference(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitTableReference(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableReferenceContext tableReference() throws RecognitionException {
		return tableReference(0);
	}

	private TableReferenceContext tableReference(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		TableReferenceContext _localctx = new TableReferenceContext(_ctx, _parentState);
		TableReferenceContext _prevctx = _localctx;
		int _startState = 1282;
		enterRecursionRule(_localctx, 1282, RULE_tableReference, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,838,_ctx) ) {
			case 1:
				{
				setState(8827);
				relationExpr();
				setState(8829);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
				case 1:
					{
					setState(8828);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(8831);
				relationExpr();
				setState(8833);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << INSERT) | (1L << UPDATE) | (1L << DELETE) | (1L << ALTER) | (1L << DROP) | (1L << TRUNCATE) | (1L << SCHEMA) | (1L << REVOKE) | (1L << ADD) | (1L << SET))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (INDEX - 65)) | (1L << (KEY - 65)) | (1L << (FUNCTION - 65)) | (1L << (TRIGGER - 65)) | (1L << (PROCEDURE - 65)) | (1L << (VIEW - 65)) | (1L << (AS - 65)) | (1L << (IF - 65)) | (1L << (BY - 65)) | (1L << (BEGIN - 65)) | (1L << (COMMIT - 65)) | (1L << (ROLLBACK - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (SAVEPOINT - 129)) | (1L << (DOUBLE - 129)) | (1L << (YEAR - 129)) | (1L << (MONTH - 129)) | (1L << (DAY - 129)) | (1L << (HOUR - 129)) | (1L << (MINUTE - 129)) | (1L << (SECOND - 129)) | (1L << (CURRENT - 129)) | (1L << (ENABLE - 129)) | (1L << (DISABLE - 129)) | (1L << (CALL - 129)) | (1L << (PRESERVE - 129)) | (1L << (DEFINER - 129)) | (1L << (SQL - 129)) | (1L << (CASCADED - 129)) | (1L << (LOCAL - 129)) | (1L << (CLOSE - 129)) | (1L << (NEXT - 129)) | (1L << (NAME - 129)) | (1L << (NAMES - 129)) | (1L << (TYPE - 129)) | (1L << (TEXT - 129)) | (1L << (REPEATABLE - 129)) | (1L << (VARYING - 129)) | (1L << (VALUE - 129)) | (1L << (TIES - 129)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (CUBE - 194)) | (1L << (SETS - 194)) | (1L << (OTHERS - 194)) | (1L << (AT - 194)) | (1L << (ADMIN - 194)) | (1L << (ESCAPE - 194)) | (1L << (EXCLUDE - 194)) | (1L << (PARTITION - 194)) | (1L << (UNKNOWN - 194)) | (1L << (ALWAYS - 194)) | (1L << (CASCADE - 194)) | (1L << (GENERATED - 194)) | (1L << (ISOLATION - 194)) | (1L << (LEVEL - 194)) | (1L << (NO - 194)) | (1L << (OPTION - 194)) | (1L << (PRIVILEGES - 194)) | (1L << (READ - 194)) | (1L << (ROLE - 194)) | (1L << (ROWS - 194)) | (1L << (START - 194)) | (1L << (TRANSACTION - 194)) | (1L << (ACTION - 194)) | (1L << (CACHE - 194)) | (1L << (CHARACTERISTICS - 194)) | (1L << (CLUSTER - 194)) | (1L << (COMMENTS - 194)) | (1L << (CONSTRAINTS - 194)) | (1L << (CYCLE - 194)) | (1L << (DATA - 194)) | (1L << (DATABASE - 194)) | (1L << (DEFAULTS - 194)) | (1L << (DEFERRED - 194)) | (1L << (DEPENDS - 194)) | (1L << (DOMAIN - 194)) | (1L << (EXCLUDING - 194)) | (1L << (EXECUTE - 194)) | (1L << (EXTENSION - 194)) | (1L << (EXTERNAL - 194)) | (1L << (FILTER - 194)) | (1L << (FIRST - 194)) | (1L << (FOLLOWING - 194)) | (1L << (FORCE - 194)) | (1L << (GLOBAL - 194)) | (1L << (IDENTITY - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (IMMEDIATE - 258)) | (1L << (INCLUDING - 258)) | (1L << (INCREMENT - 258)) | (1L << (INDEXES - 258)) | (1L << (INHERIT - 258)) | (1L << (INHERITS - 258)) | (1L << (INCLUDE - 258)) | (1L << (LANGUAGE - 258)) | (1L << (LARGE - 258)) | (1L << (LAST - 258)) | (1L << (LOGGED - 258)) | (1L << (MATCH - 258)) | (1L << (MAXVALUE - 258)) | (1L << (MINVALUE - 258)) | (1L << (NOTHING - 258)) | (1L << (NULLS - 258)) | (1L << (OBJECT - 258)) | (1L << (OIDS - 258)) | (1L << (OVER - 258)) | (1L << (OWNED - 258)) | (1L << (OWNER - 258)) | (1L << (PARTIAL - 258)) | (1L << (PRECEDING - 258)) | (1L << (RANGE - 258)) | (1L << (RENAME - 258)) | (1L << (REPLICA - 258)) | (1L << (RESET - 258)) | (1L << (RESTART - 258)) | (1L << (RESTRICT - 258)) | (1L << (ROUTINE - 258)) | (1L << (RULE - 258)) | (1L << (SECURITY - 258)) | (1L << (SEQUENCE - 258)) | (1L << (SESSION - 258)) | (1L << (SHOW - 258)) | (1L << (SIMPLE - 258)) | (1L << (STATISTICS - 258)) | (1L << (STORAGE - 258)) | (1L << (TABLESPACE - 258)) | (1L << (TEMP - 258)) | (1L << (TEMPORARY - 258)) | (1L << (UNBOUNDED - 258)) | (1L << (UNLOGGED - 258)) | (1L << (VALID - 258)) | (1L << (VALIDATE - 258)) | (1L << (WITHIN - 258)) | (1L << (WITHOUT - 258)) | (1L << (ZONE - 258)) | (1L << (OF - 258)) | (1L << (UESCAPE - 258)) | (1L << (GROUPS - 258)) | (1L << (RECURSIVE - 258)))) != 0) || ((((_la - 329)) & ~0x3f) == 0 && ((1L << (_la - 329)) & ((1L << (ENUM - 329)) | (1L << (XML - 329)) | (1L << (ORDINALITY - 329)) | (1L << (NFC - 329)) | (1L << (NFD - 329)) | (1L << (NFKC - 329)) | (1L << (NFKD - 329)) | (1L << (REF - 329)) | (1L << (PASSING - 329)) | (1L << (VERSION - 329)) | (1L << (YES - 329)) | (1L << (STANDALONE - 329)) | (1L << (MATERIALIZED - 329)) | (1L << (OPERATOR - 329)) | (1L << (SHARE - 329)) | (1L << (ROLLUP - 329)) | (1L << (DOCUMENT - 329)) | (1L << (NORMALIZED - 329)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (NOWAIT - 395)) | (1L << (LOCKED - 395)) | (1L << (COLUMNS - 395)) | (1L << (CONTENT - 395)) | (1L << (STRIP - 395)) | (1L << (WHITESPACE - 395)) | (1L << (CONFLICT - 395)) | (1L << (OVERRIDING - 395)) | (1L << (SYSTEM - 395)) | (1L << (ABORT - 395)) | (1L << (ABSOLUTE - 395)) | (1L << (ACCESS - 395)) | (1L << (AFTER - 395)) | (1L << (AGGREGATE - 395)) | (1L << (ALSO - 395)) | (1L << (ATTACH - 395)) | (1L << (ATTRIBUTE - 395)) | (1L << (BACKWARD - 395)) | (1L << (BEFORE - 395)) | (1L << (ASSERTION - 395)) | (1L << (ASSIGNMENT - 395)) | (1L << (CONTINUE - 395)) | (1L << (CONVERSION - 395)) | (1L << (COPY - 395)) | (1L << (COST - 395)) | (1L << (CSV - 395)) | (1L << (CALLED - 395)) | (1L << (CATALOG - 395)) | (1L << (CHAIN - 395)) | (1L << (CHECKPOINT - 395)) | (1L << (CLASS - 395)) | (1L << (CONFIGURATION - 395)) | (1L << (COMMENT - 395)) | (1L << (DETACH - 395)) | (1L << (DICTIONARY - 395)) | (1L << (EXPRESSION - 395)) | (1L << (INSENSITIVE - 395)) | (1L << (DISCARD - 395)) | (1L << (OFF - 395)) | (1L << (INSTEAD - 395)) | (1L << (EXPLAIN - 395)) | (1L << (INPUT - 395)) | (1L << (INLINE - 395)) | (1L << (PARALLEL - 395)) | (1L << (LEAKPROOF - 395)) | (1L << (COMMITTED - 395)) | (1L << (ENCODING - 395)) | (1L << (IMPLICIT - 395)) | (1L << (DELIMITER - 395)) | (1L << (CURSOR - 395)) | (1L << (EACH - 395)) | (1L << (EVENT - 395)) | (1L << (DEALLOCATE - 395)) | (1L << (CONNECTION - 395)) | (1L << (DECLARE - 395)) | (1L << (FAMILY - 395)))) != 0) || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (FORWARD - 459)) | (1L << (EXCLUSIVE - 459)) | (1L << (FUNCTIONS - 459)) | (1L << (LOCATION - 459)) | (1L << (LABEL - 459)) | (1L << (DELIMITERS - 459)) | (1L << (HANDLER - 459)) | (1L << (HEADER - 459)) | (1L << (IMMUTABLE - 459)) | (1L << (GRANTED - 459)) | (1L << (HOLD - 459)) | (1L << (MAPPING - 459)) | (1L << (OLD - 459)) | (1L << (METHOD - 459)) | (1L << (LOAD - 459)) | (1L << (LISTEN - 459)) | (1L << (MODE - 459)) | (1L << (MOVE - 459)) | (1L << (PROCEDURAL - 459)) | (1L << (PARSER - 459)) | (1L << (PROCEDURES - 459)) | (1L << (ENCRYPTED - 459)) | (1L << (PUBLICATION - 459)) | (1L << (PROGRAM - 459)) | (1L << (REFERENCING - 459)) | (1L << (PLANS - 459)) | (1L << (REINDEX - 459)) | (1L << (PRIOR - 459)) | (1L << (PASSWORD - 459)) | (1L << (RELATIVE - 459)) | (1L << (QUOTE - 459)) | (1L << (ROUTINES - 459)) | (1L << (REPLACE - 459)) | (1L << (SNAPSHOT - 459)) | (1L << (REFRESH - 459)) | (1L << (PREPARE - 459)) | (1L << (OPTIONS - 459)) | (1L << (IMPORT - 459)) | (1L << (INVOKER - 459)) | (1L << (NEW - 459)) | (1L << (PREPARED - 459)) | (1L << (SCROLL - 459)) | (1L << (SEQUENCES - 459)) | (1L << (SYSID - 459)) | (1L << (REASSIGN - 459)) | (1L << (SERVER - 459)) | (1L << (SUBSCRIPTION - 459)) | (1L << (SEARCH - 459)) | (1L << (SCHEMAS - 459)) | (1L << (RECHECK - 459)) | (1L << (POLICY - 459)) | (1L << (NOTIFY - 459)) | (1L << (LOCK - 459)) | (1L << (RELEASE - 459)) | (1L << (SERIALIZABLE - 459)) | (1L << (RETURNS - 459)) | (1L << (STATEMENT - 459)) | (1L << (STDIN - 459)) | (1L << (STDOUT - 459)) | (1L << (TABLES - 459)) | (1L << (SUPPORT - 459)) | (1L << (STABLE - 459)) | (1L << (TEMPLATE - 459)) | (1L << (UNENCRYPTED - 459)))) != 0) || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (VIEWS - 523)) | (1L << (UNCOMMITTED - 523)) | (1L << (TRANSFORM - 523)) | (1L << (UNLISTEN - 523)) | (1L << (TRUSTED - 523)) | (1L << (VALIDATOR - 523)) | (1L << (UNTIL - 523)) | (1L << (VACUUM - 523)) | (1L << (VOLATILE - 523)) | (1L << (STORED - 523)) | (1L << (WRITE - 523)) | (1L << (STRICT - 523)) | (1L << (TYPES - 523)) | (1L << (WRAPPER - 523)) | (1L << (WORK - 523)) | (1L << (IDENTIFIER_ - 523)))) != 0)) {
					{
					setState(8832);
					aliasClause();
					}
				}

				setState(8835);
				tablesampleClause();
				}
				break;
			case 3:
				{
				setState(8837);
				functionTable();
				setState(8839);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,831,_ctx) ) {
				case 1:
					{
					setState(8838);
					funcAliasClause();
					}
					break;
				}
				}
				break;
			case 4:
				{
				setState(8841);
				match(LATERAL);
				setState(8842);
				functionTable();
				setState(8844);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,832,_ctx) ) {
				case 1:
					{
					setState(8843);
					funcAliasClause();
					}
					break;
				}
				}
				break;
			case 5:
				{
				setState(8846);
				xmlTable();
				setState(8848);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,833,_ctx) ) {
				case 1:
					{
					setState(8847);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 6:
				{
				setState(8850);
				match(LATERAL);
				setState(8851);
				xmlTable();
				setState(8853);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,834,_ctx) ) {
				case 1:
					{
					setState(8852);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 7:
				{
				setState(8855);
				selectWithParens();
				setState(8857);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,835,_ctx) ) {
				case 1:
					{
					setState(8856);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 8:
				{
				setState(8859);
				match(LATERAL);
				setState(8860);
				selectWithParens();
				setState(8862);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,836,_ctx) ) {
				case 1:
					{
					setState(8861);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 9:
				{
				setState(8864);
				match(LP_);
				setState(8865);
				tableReference(0);
				setState(8866);
				joinedTable();
				setState(8867);
				match(RP_);
				setState(8869);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,837,_ctx) ) {
				case 1:
					{
					setState(8868);
					aliasClause();
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(8877);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,839,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TableReferenceContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_tableReference);
					setState(8873);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(8874);
					joinedTable();
					}
					} 
				}
				setState(8879);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,839,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class JoinedTableContext extends ParserRuleContext {
		public TerminalNode CROSS() { return getToken(DDLStatementParser.CROSS, 0); }
		public TerminalNode JOIN() { return getToken(DDLStatementParser.JOIN, 0); }
		public TableReferenceContext tableReference() {
			return getRuleContext(TableReferenceContext.class,0);
		}
		public JoinTypeContext joinType() {
			return getRuleContext(JoinTypeContext.class,0);
		}
		public JoinQualContext joinQual() {
			return getRuleContext(JoinQualContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(DDLStatementParser.NATURAL, 0); }
		public JoinedTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinedTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJoinedTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJoinedTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJoinedTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinedTableContext joinedTable() throws RecognitionException {
		JoinedTableContext _localctx = new JoinedTableContext(_ctx, getState());
		enterRule(_localctx, 1284, RULE_joinedTable);
		try {
			setState(8900);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,840,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8880);
				match(CROSS);
				setState(8881);
				match(JOIN);
				setState(8882);
				tableReference(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8883);
				joinType();
				setState(8884);
				match(JOIN);
				setState(8885);
				tableReference(0);
				setState(8886);
				joinQual();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8888);
				match(JOIN);
				setState(8889);
				tableReference(0);
				setState(8890);
				joinQual();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8892);
				match(NATURAL);
				setState(8893);
				joinType();
				setState(8894);
				match(JOIN);
				setState(8895);
				tableReference(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8897);
				match(NATURAL);
				setState(8898);
				match(JOIN);
				setState(8899);
				tableReference(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinTypeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(DDLStatementParser.FULL, 0); }
		public JoinOuterContext joinOuter() {
			return getRuleContext(JoinOuterContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(DDLStatementParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(DDLStatementParser.RIGHT, 0); }
		public TerminalNode INNER() { return getToken(DDLStatementParser.INNER, 0); }
		public JoinTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJoinType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJoinType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJoinType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinTypeContext joinType() throws RecognitionException {
		JoinTypeContext _localctx = new JoinTypeContext(_ctx, getState());
		enterRule(_localctx, 1286, RULE_joinType);
		int _la;
		try {
			setState(8915);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(8902);
				match(FULL);
				setState(8904);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(8903);
					joinOuter();
					}
				}

				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 2);
				{
				setState(8906);
				match(LEFT);
				setState(8908);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(8907);
					joinOuter();
					}
				}

				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 3);
				{
				setState(8910);
				match(RIGHT);
				setState(8912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(8911);
					joinOuter();
					}
				}

				}
				break;
			case INNER:
				enterOuterAlt(_localctx, 4);
				{
				setState(8914);
				match(INNER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinOuterContext extends ParserRuleContext {
		public TerminalNode OUTER() { return getToken(DDLStatementParser.OUTER, 0); }
		public JoinOuterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinOuter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJoinOuter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJoinOuter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJoinOuter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinOuterContext joinOuter() throws RecognitionException {
		JoinOuterContext _localctx = new JoinOuterContext(_ctx, getState());
		enterRule(_localctx, 1288, RULE_joinOuter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8917);
			match(OUTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinQualContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public NameListContext nameList() {
			return getRuleContext(NameListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode ON() { return getToken(DDLStatementParser.ON, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public JoinQualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinQual; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterJoinQual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitJoinQual(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitJoinQual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinQualContext joinQual() throws RecognitionException {
		JoinQualContext _localctx = new JoinQualContext(_ctx, getState());
		enterRule(_localctx, 1290, RULE_joinQual);
		try {
			setState(8926);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USING:
				enterOuterAlt(_localctx, 1);
				{
				setState(8919);
				match(USING);
				setState(8920);
				match(LP_);
				setState(8921);
				nameList(0);
				setState(8922);
				match(RP_);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8924);
				match(ON);
				setState(8925);
				aExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(DDLStatementParser.WHERE, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWhereClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWhereClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 1292, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8928);
			match(WHERE);
			setState(8929);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhereOrCurrentClauseContext extends ParserRuleContext {
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(DDLStatementParser.WHERE, 0); }
		public TerminalNode CURRENT() { return getToken(DDLStatementParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(DDLStatementParser.OF, 0); }
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public WhereOrCurrentClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereOrCurrentClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterWhereOrCurrentClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitWhereOrCurrentClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitWhereOrCurrentClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhereOrCurrentClauseContext whereOrCurrentClause() throws RecognitionException {
		WhereOrCurrentClauseContext _localctx = new WhereOrCurrentClauseContext(_ctx, getState());
		enterRule(_localctx, 1294, RULE_whereOrCurrentClause);
		try {
			setState(8936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,846,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8931);
				whereClause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8932);
				match(WHERE);
				setState(8933);
				match(CURRENT);
				setState(8934);
				match(OF);
				setState(8935);
				cursorName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(DDLStatementParser.HAVING, 0); }
		public AExprContext aExpr() {
			return getRuleContext(AExprContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 1296, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8938);
			match(HAVING);
			setState(8939);
			aExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(DDLStatementParser.DO, 0); }
		public DostmtOptListContext dostmtOptList() {
			return getRuleContext(DostmtOptListContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 1298, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8941);
			match(DO);
			setState(8942);
			dostmtOptList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DostmtOptListContext extends ParserRuleContext {
		public List<DostmtOptItemContext> dostmtOptItem() {
			return getRuleContexts(DostmtOptItemContext.class);
		}
		public DostmtOptItemContext dostmtOptItem(int i) {
			return getRuleContext(DostmtOptItemContext.class,i);
		}
		public DostmtOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmtOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDostmtOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDostmtOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDostmtOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DostmtOptListContext dostmtOptList() throws RecognitionException {
		DostmtOptListContext _localctx = new DostmtOptListContext(_ctx, getState());
		enterRule(_localctx, 1300, RULE_dostmtOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8945); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(8944);
				dostmtOptItem();
				}
				}
				setState(8947); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==LANGUAGE || _la==STRING_ );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DostmtOptItemContext extends ParserRuleContext {
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode LANGUAGE() { return getToken(DDLStatementParser.LANGUAGE, 0); }
		public NonReservedWordOrSconstContext nonReservedWordOrSconst() {
			return getRuleContext(NonReservedWordOrSconstContext.class,0);
		}
		public DostmtOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dostmtOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDostmtOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDostmtOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDostmtOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DostmtOptItemContext dostmtOptItem() throws RecognitionException {
		DostmtOptItemContext _localctx = new DostmtOptItemContext(_ctx, getState());
		enterRule(_localctx, 1302, RULE_dostmtOptItem);
		try {
			setState(8952);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(8949);
				match(STRING_);
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8950);
				match(LANGUAGE);
				setState(8951);
				nonReservedWordOrSconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(DDLStatementParser.LOCK, 0); }
		public RelationExprListContext relationExprList() {
			return getRuleContext(RelationExprListContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(DDLStatementParser.TABLE, 0); }
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public LockTypeContext lockType() {
			return getRuleContext(LockTypeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(DDLStatementParser.MODE, 0); }
		public TerminalNode NOWAIT() { return getToken(DDLStatementParser.NOWAIT, 0); }
		public LockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterLock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitLock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitLock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockContext lock() throws RecognitionException {
		LockContext _localctx = new LockContext(_ctx, getState());
		enterRule(_localctx, 1304, RULE_lock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8954);
			match(LOCK);
			setState(8956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(8955);
				match(TABLE);
				}
			}

			setState(8958);
			relationExprList();
			setState(8963);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(8959);
				match(IN);
				setState(8960);
				lockType();
				setState(8961);
				match(MODE);
				}
			}

			setState(8966);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT) {
				{
				setState(8965);
				match(NOWAIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTypeContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(DDLStatementParser.ACCESS, 0); }
		public TerminalNode SHARE() { return getToken(DDLStatementParser.SHARE, 0); }
		public TerminalNode ROW() { return getToken(DDLStatementParser.ROW, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(DDLStatementParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(DDLStatementParser.UPDATE, 0); }
		public LockTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterLockType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitLockType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitLockType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTypeContext lockType() throws RecognitionException {
		LockTypeContext _localctx = new LockTypeContext(_ctx, getState());
		enterRule(_localctx, 1306, RULE_lockType);
		try {
			setState(8984);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,852,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8968);
				match(ACCESS);
				setState(8969);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8970);
				match(ROW);
				setState(8971);
				match(SHARE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8972);
				match(ROW);
				setState(8973);
				match(EXCLUSIVE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8974);
				match(SHARE);
				setState(8975);
				match(UPDATE);
				setState(8976);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8977);
				match(SHARE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8978);
				match(SHARE);
				setState(8979);
				match(ROW);
				setState(8980);
				match(EXCLUSIVE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8981);
				match(EXCLUSIVE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8982);
				match(ACCESS);
				setState(8983);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CheckpointContext extends ParserRuleContext {
		public TerminalNode CHECKPOINT() { return getToken(DDLStatementParser.CHECKPOINT, 0); }
		public CheckpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_checkpoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCheckpoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCheckpoint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCheckpoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CheckpointContext checkpoint() throws RecognitionException {
		CheckpointContext _localctx = new CheckpointContext(_ctx, getState());
		enterRule(_localctx, 1308, RULE_checkpoint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8986);
			match(CHECKPOINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(DDLStatementParser.COPY, 0); }
		public QualifiedNameContext qualifiedName() {
			return getRuleContext(QualifiedNameContext.class,0);
		}
		public CopyOptionsContext copyOptions() {
			return getRuleContext(CopyOptionsContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode TO() { return getToken(DDLStatementParser.TO, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode STDIN() { return getToken(DDLStatementParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(DDLStatementParser.STDOUT, 0); }
		public TerminalNode BINARY() { return getToken(DDLStatementParser.BINARY, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public TerminalNode PROGRAM() { return getToken(DDLStatementParser.PROGRAM, 0); }
		public CopyDelimiterContext copyDelimiter() {
			return getRuleContext(CopyDelimiterContext.class,0);
		}
		public TerminalNode WITH() { return getToken(DDLStatementParser.WITH, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public PreparableStmtContext preparableStmt() {
			return getRuleContext(PreparableStmtContext.class,0);
		}
		public CopyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyContext copy() throws RecognitionException {
		CopyContext _localctx = new CopyContext(_ctx, getState());
		enterRule(_localctx, 1310, RULE_copy);
		int _la;
		try {
			setState(9028);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8988);
				match(COPY);
				setState(8990);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(8989);
					match(BINARY);
					}
				}

				setState(8992);
				qualifiedName();
				setState(8997);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LP_) {
					{
					setState(8993);
					match(LP_);
					setState(8994);
					columnList();
					setState(8995);
					match(RP_);
					}
				}

				setState(8999);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==TO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROGRAM) {
					{
					setState(9000);
					match(PROGRAM);
					}
				}

				setState(9003);
				_la = _input.LA(1);
				if ( !(((((_la - 516)) & ~0x3f) == 0 && ((1L << (_la - 516)) & ((1L << (STDIN - 516)) | (1L << (STDOUT - 516)) | (1L << (STRING_ - 516)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING || _la==DELIMITERS) {
					{
					setState(9004);
					copyDelimiter();
					}
				}

				setState(9008);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(9007);
					match(WITH);
					}
				}

				setState(9010);
				copyOptions();
				setState(9012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(9011);
					whereClause();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9014);
				match(COPY);
				setState(9015);
				match(LP_);
				setState(9016);
				preparableStmt();
				setState(9017);
				match(RP_);
				setState(9018);
				match(TO);
				setState(9020);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROGRAM) {
					{
					setState(9019);
					match(PROGRAM);
					}
				}

				setState(9022);
				_la = _input.LA(1);
				if ( !(((((_la - 516)) & ~0x3f) == 0 && ((1L << (_la - 516)) & ((1L << (STDIN - 516)) | (1L << (STDOUT - 516)) | (1L << (STRING_ - 516)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(9023);
					match(WITH);
					}
				}

				setState(9026);
				copyOptions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptionsContext extends ParserRuleContext {
		public CopyOptListContext copyOptList() {
			return getRuleContext(CopyOptListContext.class,0);
		}
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public CopyGenericOptListContext copyGenericOptList() {
			return getRuleContext(CopyGenericOptListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public CopyOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptionsContext copyOptions() throws RecognitionException {
		CopyOptionsContext _localctx = new CopyOptionsContext(_ctx, getState());
		enterRule(_localctx, 1312, RULE_copyOptions);
		try {
			setState(9035);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case WHERE:
			case NULL:
			case BINARY:
			case ESCAPE:
			case FORCE:
			case CSV:
			case ENCODING:
			case DELIMITER:
			case HEADER:
			case QUOTE:
			case FREEZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(9030);
				copyOptList();
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 2);
				{
				setState(9031);
				match(LP_);
				setState(9032);
				copyGenericOptList();
				setState(9033);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptListContext extends ParserRuleContext {
		public List<CopyGenericOptElemContext> copyGenericOptElem() {
			return getRuleContexts(CopyGenericOptElemContext.class);
		}
		public CopyGenericOptElemContext copyGenericOptElem(int i) {
			return getRuleContext(CopyGenericOptElemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public CopyGenericOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyGenericOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyGenericOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyGenericOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptListContext copyGenericOptList() throws RecognitionException {
		CopyGenericOptListContext _localctx = new CopyGenericOptListContext(_ctx, getState());
		enterRule(_localctx, 1314, RULE_copyGenericOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9037);
			copyGenericOptElem();
			setState(9042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(9038);
				match(COMMA_);
				setState(9039);
				copyGenericOptElem();
				}
				}
				setState(9044);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptElemContext extends ParserRuleContext {
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public CopyGenericOptArgContext copyGenericOptArg() {
			return getRuleContext(CopyGenericOptArgContext.class,0);
		}
		public CopyGenericOptElemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptElem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyGenericOptElem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyGenericOptElem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyGenericOptElem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptElemContext copyGenericOptElem() throws RecognitionException {
		CopyGenericOptElemContext _localctx = new CopyGenericOptElemContext(_ctx, getState());
		enterRule(_localctx, 1316, RULE_copyGenericOptElem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9045);
			colLabel();
			setState(9046);
			copyGenericOptArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptArgContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public NumericOnlyContext numericOnly() {
			return getRuleContext(NumericOnlyContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TerminalNode LP_() { return getToken(DDLStatementParser.LP_, 0); }
		public CopyGenericOptArgListContext copyGenericOptArgList() {
			return getRuleContext(CopyGenericOptArgListContext.class,0);
		}
		public TerminalNode RP_() { return getToken(DDLStatementParser.RP_, 0); }
		public CopyGenericOptArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyGenericOptArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyGenericOptArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyGenericOptArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptArgContext copyGenericOptArg() throws RecognitionException {
		CopyGenericOptArgContext _localctx = new CopyGenericOptArgContext(_ctx, getState());
		enterRule(_localctx, 1318, RULE_copyGenericOptArg);
		try {
			setState(9055);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case POSITION:
			case PRECISION:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case VALUES:
			case TRIM:
			case SUBSTRING:
			case NATURAL:
			case JOIN:
			case FULL:
			case INNER:
			case OUTER:
			case LEFT:
			case RIGHT:
			case CROSS:
			case ON:
			case IF:
			case IS:
			case TRUE:
			case FALSE:
			case EXISTS:
			case BETWEEN:
			case LIKE:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case BOOLEAN:
			case DOUBLE:
			case CHAR:
			case CHARACTER:
			case INTERVAL:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case COLLATION:
			case NAMES:
			case INTEGER:
			case REAL:
			case DECIMAL:
			case TYPE:
			case SMALLINT:
			case BIGINT:
			case NUMERIC:
			case TEXT:
			case REPEATABLE:
			case NULLIF:
			case VARYING:
			case NATIONAL:
			case NCHAR:
			case VALUE:
			case COALESCE:
			case TIES:
			case CUBE:
			case GROUPING:
			case SETS:
			case OTHERS:
			case OVERLAPS:
			case AT:
			case DEC:
			case ADMIN:
			case BINARY:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case ROW:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONCURRENTLY:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case EXTRACT:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case INT:
			case FLOAT:
			case VARCHAR:
			case ENUM:
			case BIT:
			case XML:
			case TABLESAMPLE:
			case ORDINALITY:
			case CURRENT_SCHEMA:
			case OVERLAY:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case TREAT:
			case SETOF:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case XMLATTRIBUTES:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case GREATEST:
			case LEAST:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case ILIKE:
			case SIMILAR:
			case ISNULL:
			case NOTNULL:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case XMLTABLE:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case XMLNAMESPACES:
			case NONE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case FREEZE:
			case AUTHORIZATION:
			case VERBOSE:
			case OUT:
			case INOUT:
			case IDENTIFIER_:
			case STRING_:
				enterOuterAlt(_localctx, 1);
				{
				setState(9048);
				booleanOrString();
				}
				break;
			case PLUS_:
			case MINUS_:
			case NUMBER_:
				enterOuterAlt(_localctx, 2);
				{
				setState(9049);
				numericOnly();
				}
				break;
			case ASTERISK_:
				enterOuterAlt(_localctx, 3);
				{
				setState(9050);
				match(ASTERISK_);
				}
				break;
			case LP_:
				enterOuterAlt(_localctx, 4);
				{
				setState(9051);
				match(LP_);
				setState(9052);
				copyGenericOptArgList();
				setState(9053);
				match(RP_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptArgListContext extends ParserRuleContext {
		public List<CopyGenericOptArgListItemContext> copyGenericOptArgListItem() {
			return getRuleContexts(CopyGenericOptArgListItemContext.class);
		}
		public CopyGenericOptArgListItemContext copyGenericOptArgListItem(int i) {
			return getRuleContext(CopyGenericOptArgListItemContext.class,i);
		}
		public List<TerminalNode> COMMA_() { return getTokens(DDLStatementParser.COMMA_); }
		public TerminalNode COMMA_(int i) {
			return getToken(DDLStatementParser.COMMA_, i);
		}
		public CopyGenericOptArgListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptArgList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyGenericOptArgList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyGenericOptArgList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyGenericOptArgList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptArgListContext copyGenericOptArgList() throws RecognitionException {
		CopyGenericOptArgListContext _localctx = new CopyGenericOptArgListContext(_ctx, getState());
		enterRule(_localctx, 1320, RULE_copyGenericOptArgList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9057);
			copyGenericOptArgListItem();
			setState(9062);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA_) {
				{
				{
				setState(9058);
				match(COMMA_);
				setState(9059);
				copyGenericOptArgListItem();
				}
				}
				setState(9064);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyGenericOptArgListItemContext extends ParserRuleContext {
		public BooleanOrStringContext booleanOrString() {
			return getRuleContext(BooleanOrStringContext.class,0);
		}
		public CopyGenericOptArgListItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyGenericOptArgListItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyGenericOptArgListItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyGenericOptArgListItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyGenericOptArgListItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyGenericOptArgListItemContext copyGenericOptArgListItem() throws RecognitionException {
		CopyGenericOptArgListItemContext _localctx = new CopyGenericOptArgListItemContext(_ctx, getState());
		enterRule(_localctx, 1322, RULE_copyGenericOptArgListItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9065);
			booleanOrString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptListContext extends ParserRuleContext {
		public List<CopyOptItemContext> copyOptItem() {
			return getRuleContexts(CopyOptItemContext.class);
		}
		public CopyOptItemContext copyOptItem(int i) {
			return getRuleContext(CopyOptItemContext.class,i);
		}
		public CopyOptListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyOptList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyOptList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyOptList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptListContext copyOptList() throws RecognitionException {
		CopyOptListContext _localctx = new CopyOptListContext(_ctx, getState());
		enterRule(_localctx, 1324, RULE_copyOptList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NULL || ((((_la - 206)) & ~0x3f) == 0 && ((1L << (_la - 206)) & ((1L << (BINARY - 206)) | (1L << (ESCAPE - 206)) | (1L << (FORCE - 206)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (CSV - 428)) | (1L << (ENCODING - 428)) | (1L << (DELIMITER - 428)) | (1L << (HEADER - 428)) | (1L << (QUOTE - 428)))) != 0) || _la==FREEZE) {
				{
				{
				setState(9067);
				copyOptItem();
				}
				}
				setState(9072);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptItemContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(DDLStatementParser.BINARY, 0); }
		public TerminalNode FREEZE() { return getToken(DDLStatementParser.FREEZE, 0); }
		public TerminalNode DELIMITER() { return getToken(DDLStatementParser.DELIMITER, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode AS() { return getToken(DDLStatementParser.AS, 0); }
		public TerminalNode NULL() { return getToken(DDLStatementParser.NULL, 0); }
		public TerminalNode CSV() { return getToken(DDLStatementParser.CSV, 0); }
		public TerminalNode HEADER() { return getToken(DDLStatementParser.HEADER, 0); }
		public TerminalNode QUOTE() { return getToken(DDLStatementParser.QUOTE, 0); }
		public TerminalNode ESCAPE() { return getToken(DDLStatementParser.ESCAPE, 0); }
		public TerminalNode FORCE() { return getToken(DDLStatementParser.FORCE, 0); }
		public ColumnListContext columnList() {
			return getRuleContext(ColumnListContext.class,0);
		}
		public TerminalNode ASTERISK_() { return getToken(DDLStatementParser.ASTERISK_, 0); }
		public TerminalNode NOT() { return getToken(DDLStatementParser.NOT, 0); }
		public TerminalNode ENCODING() { return getToken(DDLStatementParser.ENCODING, 0); }
		public CopyOptItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyOptItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyOptItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyOptItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptItemContext copyOptItem() throws RecognitionException {
		CopyOptItemContext _localctx = new CopyOptItemContext(_ctx, getState());
		enterRule(_localctx, 1326, RULE_copyOptItem);
		int _la;
		try {
			setState(9112);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,871,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9073);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9074);
				match(FREEZE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9075);
				match(DELIMITER);
				setState(9077);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(9076);
					match(AS);
					}
				}

				setState(9079);
				match(STRING_);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9080);
				match(NULL);
				setState(9082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(9081);
					match(AS);
					}
				}

				setState(9084);
				match(STRING_);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9085);
				match(CSV);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9086);
				match(HEADER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9087);
				match(QUOTE);
				setState(9089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(9088);
					match(AS);
					}
				}

				setState(9091);
				match(STRING_);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9092);
				match(ESCAPE);
				setState(9094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(9093);
					match(AS);
					}
				}

				setState(9096);
				match(STRING_);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9097);
				match(FORCE);
				setState(9098);
				match(QUOTE);
				setState(9099);
				columnList();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9100);
				match(FORCE);
				setState(9101);
				match(QUOTE);
				setState(9102);
				match(ASTERISK_);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9103);
				match(FORCE);
				setState(9104);
				match(NOT);
				setState(9105);
				match(NULL);
				setState(9106);
				columnList();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9107);
				match(FORCE);
				setState(9108);
				match(NULL);
				setState(9109);
				columnList();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9110);
				match(ENCODING);
				setState(9111);
				match(STRING_);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyDelimiterContext extends ParserRuleContext {
		public TerminalNode DELIMITERS() { return getToken(DDLStatementParser.DELIMITERS, 0); }
		public TerminalNode STRING_() { return getToken(DDLStatementParser.STRING_, 0); }
		public TerminalNode USING() { return getToken(DDLStatementParser.USING, 0); }
		public CopyDelimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyDelimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterCopyDelimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitCopyDelimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitCopyDelimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyDelimiterContext copyDelimiter() throws RecognitionException {
		CopyDelimiterContext _localctx = new CopyDelimiterContext(_ctx, getState());
		enterRule(_localctx, 1328, RULE_copyDelimiter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9115);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(9114);
				match(USING);
				}
			}

			setState(9117);
			match(DELIMITERS);
			setState(9118);
			match(STRING_);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeallocateContext extends ParserRuleContext {
		public TerminalNode DEALLOCATE() { return getToken(DDLStatementParser.DEALLOCATE, 0); }
		public NameContext name() {
			return getRuleContext(NameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode PREPARE() { return getToken(DDLStatementParser.PREPARE, 0); }
		public DeallocateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deallocate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterDeallocate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitDeallocate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitDeallocate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeallocateContext deallocate() throws RecognitionException {
		DeallocateContext _localctx = new DeallocateContext(_ctx, getState());
		enterRule(_localctx, 1330, RULE_deallocate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9120);
			match(DEALLOCATE);
			setState(9122);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
			case 1:
				{
				setState(9121);
				match(PREPARE);
				}
				break;
			}
			setState(9126);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__0:
			case T__1:
			case INSERT:
			case UPDATE:
			case DELETE:
			case ALTER:
			case DROP:
			case TRUNCATE:
			case SCHEMA:
			case REVOKE:
			case ADD:
			case SET:
			case INDEX:
			case KEY:
			case FUNCTION:
			case TRIGGER:
			case PROCEDURE:
			case VIEW:
			case IF:
			case BY:
			case BEGIN:
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case DOUBLE:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case CURRENT:
			case ENABLE:
			case DISABLE:
			case CALL:
			case PRESERVE:
			case DEFINER:
			case SQL:
			case CASCADED:
			case LOCAL:
			case CLOSE:
			case NEXT:
			case NAME:
			case NAMES:
			case TYPE:
			case TEXT:
			case REPEATABLE:
			case VARYING:
			case VALUE:
			case TIES:
			case CUBE:
			case SETS:
			case OTHERS:
			case AT:
			case ADMIN:
			case ESCAPE:
			case EXCLUDE:
			case PARTITION:
			case UNKNOWN:
			case ALWAYS:
			case CASCADE:
			case GENERATED:
			case ISOLATION:
			case LEVEL:
			case NO:
			case OPTION:
			case PRIVILEGES:
			case READ:
			case ROLE:
			case ROWS:
			case START:
			case TRANSACTION:
			case ACTION:
			case CACHE:
			case CHARACTERISTICS:
			case CLUSTER:
			case COMMENTS:
			case CONSTRAINTS:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DEFAULTS:
			case DEFERRED:
			case DEPENDS:
			case DOMAIN:
			case EXCLUDING:
			case EXECUTE:
			case EXTENSION:
			case EXTERNAL:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case GLOBAL:
			case IDENTITY:
			case IMMEDIATE:
			case INCLUDING:
			case INCREMENT:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INCLUDE:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LOGGED:
			case MATCH:
			case MAXVALUE:
			case MINVALUE:
			case NOTHING:
			case NULLS:
			case OBJECT:
			case OIDS:
			case OVER:
			case OWNED:
			case OWNER:
			case PARTIAL:
			case PRECEDING:
			case RANGE:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case ROUTINE:
			case RULE:
			case SECURITY:
			case SEQUENCE:
			case SESSION:
			case SHOW:
			case SIMPLE:
			case STATISTICS:
			case STORAGE:
			case TABLESPACE:
			case TEMP:
			case TEMPORARY:
			case UNBOUNDED:
			case UNLOGGED:
			case VALID:
			case VALIDATE:
			case WITHIN:
			case WITHOUT:
			case ZONE:
			case OF:
			case UESCAPE:
			case GROUPS:
			case RECURSIVE:
			case ENUM:
			case XML:
			case ORDINALITY:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case REF:
			case PASSING:
			case VERSION:
			case YES:
			case STANDALONE:
			case MATERIALIZED:
			case OPERATOR:
			case SHARE:
			case ROLLUP:
			case DOCUMENT:
			case NORMALIZED:
			case NOWAIT:
			case LOCKED:
			case COLUMNS:
			case CONTENT:
			case STRIP:
			case WHITESPACE:
			case CONFLICT:
			case OVERRIDING:
			case SYSTEM:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case ASSERTION:
			case ASSIGNMENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CALLED:
			case CATALOG:
			case CHAIN:
			case CHECKPOINT:
			case CLASS:
			case CONFIGURATION:
			case COMMENT:
			case DETACH:
			case DICTIONARY:
			case EXPRESSION:
			case INSENSITIVE:
			case DISCARD:
			case OFF:
			case INSTEAD:
			case EXPLAIN:
			case INPUT:
			case INLINE:
			case PARALLEL:
			case LEAKPROOF:
			case COMMITTED:
			case ENCODING:
			case IMPLICIT:
			case DELIMITER:
			case CURSOR:
			case EACH:
			case EVENT:
			case DEALLOCATE:
			case CONNECTION:
			case DECLARE:
			case FAMILY:
			case FORWARD:
			case EXCLUSIVE:
			case FUNCTIONS:
			case LOCATION:
			case LABEL:
			case DELIMITERS:
			case HANDLER:
			case HEADER:
			case IMMUTABLE:
			case GRANTED:
			case HOLD:
			case MAPPING:
			case OLD:
			case METHOD:
			case LOAD:
			case LISTEN:
			case MODE:
			case MOVE:
			case PROCEDURAL:
			case PARSER:
			case PROCEDURES:
			case ENCRYPTED:
			case PUBLICATION:
			case PROGRAM:
			case REFERENCING:
			case PLANS:
			case REINDEX:
			case PRIOR:
			case PASSWORD:
			case RELATIVE:
			case QUOTE:
			case ROUTINES:
			case REPLACE:
			case SNAPSHOT:
			case REFRESH:
			case PREPARE:
			case OPTIONS:
			case IMPORT:
			case INVOKER:
			case NEW:
			case PREPARED:
			case SCROLL:
			case SEQUENCES:
			case SYSID:
			case REASSIGN:
			case SERVER:
			case SUBSCRIPTION:
			case SEARCH:
			case SCHEMAS:
			case RECHECK:
			case POLICY:
			case NOTIFY:
			case LOCK:
			case RELEASE:
			case SERIALIZABLE:
			case RETURNS:
			case STATEMENT:
			case STDIN:
			case STDOUT:
			case TABLES:
			case SUPPORT:
			case STABLE:
			case TEMPLATE:
			case UNENCRYPTED:
			case VIEWS:
			case UNCOMMITTED:
			case TRANSFORM:
			case UNLISTEN:
			case TRUSTED:
			case VALIDATOR:
			case UNTIL:
			case VACUUM:
			case VOLATILE:
			case STORED:
			case WRITE:
			case STRICT:
			case TYPES:
			case WRAPPER:
			case WORK:
			case IDENTIFIER_:
				{
				setState(9124);
				name();
				}
				break;
			case ALL:
				{
				setState(9125);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(DDLStatementParser.FETCH, 0); }
		public FetchArgsContext fetchArgs() {
			return getRuleContext(FetchArgsContext.class,0);
		}
		public FetchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFetch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFetch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFetch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchContext fetch() throws RecognitionException {
		FetchContext _localctx = new FetchContext(_ctx, getState());
		enterRule(_localctx, 1332, RULE_fetch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9128);
			match(FETCH);
			setState(9129);
			fetchArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchArgsContext extends ParserRuleContext {
		public CursorNameContext cursorName() {
			return getRuleContext(CursorNameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(DDLStatementParser.FROM, 0); }
		public TerminalNode IN() { return getToken(DDLStatementParser.IN, 0); }
		public TerminalNode NEXT() { return getToken(DDLStatementParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(DDLStatementParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(DDLStatementParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(DDLStatementParser.LAST, 0); }
		public TerminalNode ABSOLUTE() { return getToken(DDLStatementParser.ABSOLUTE, 0); }
		public SignedIconstContext signedIconst() {
			return getRuleContext(SignedIconstContext.class,0);
		}
		public TerminalNode RELATIVE() { return getToken(DDLStatementParser.RELATIVE, 0); }
		public TerminalNode ALL() { return getToken(DDLStatementParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(DDLStatementParser.FORWARD, 0); }
		public TerminalNode BACKWARD() { return getToken(DDLStatementParser.BACKWARD, 0); }
		public FetchArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).enterFetchArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof DDLStatementListener ) ((DDLStatementListener)listener).exitFetchArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof DDLStatementVisitor ) return ((DDLStatementVisitor<? extends T>)visitor).visitFetchArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchArgsContext fetchArgs() throws RecognitionException {
		FetchArgsContext _localctx = new FetchArgsContext(_ctx, getState());
		enterRule(_localctx, 1334, RULE_fetchArgs);
		int _la;
		try {
			setState(9215);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,889,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9131);
				cursorName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9132);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9133);
				cursorName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9134);
				match(NEXT);
				setState(9136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9135);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9138);
				cursorName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9139);
				match(PRIOR);
				setState(9141);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9140);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9143);
				cursorName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9144);
				match(FIRST);
				setState(9146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9145);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9148);
				cursorName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9149);
				match(LAST);
				setState(9151);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9150);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9153);
				cursorName();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9154);
				match(ABSOLUTE);
				setState(9155);
				signedIconst();
				setState(9157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9156);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9159);
				cursorName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9161);
				match(RELATIVE);
				setState(9162);
				signedIconst();
				setState(9164);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9163);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9166);
				cursorName();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9168);
				signedIconst();
				setState(9170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9169);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9172);
				cursorName();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9174);
				match(ALL);
				setState(9176);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9175);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9178);
				cursorName();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9179);
				match(FORWARD);
				setState(9181);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9180);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9183);
				cursorName();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9184);
				match(FORWARD);
				setState(9185);
				signedIconst();
				setState(9187);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9186);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9189);
				cursorName();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9191);
				match(FORWARD);
				setState(9192);
				match(ALL);
				setState(9194);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9193);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9196);
				cursorName();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(9197);
				match(BACKWARD);
				setState(9199);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9198);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9201);
				cursorName();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(9202);
				match(BACKWARD);
				setState(9203);
				signedIconst();
				setState(9205);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9204);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9207);
				cursorName();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(9209);
				match(BACKWARD);
				setState(9210);
				match(ALL);
				setState(9212);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(9211);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9214);
				cursorName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 249:
			return tableLikeOptionList_sempred((TableLikeOptionListContext)_localctx, predIndex);
		case 383:
			return aExpr_sempred((AExprContext)_localctx, predIndex);
		case 384:
			return bExpr_sempred((BExprContext)_localctx, predIndex);
		case 386:
			return indirection_sempred((IndirectionContext)_localctx, predIndex);
		case 387:
			return optIndirection_sempred((OptIndirectionContext)_localctx, predIndex);
		case 429:
			return xmlTableColumnOptionList_sempred((XmlTableColumnOptionListContext)_localctx, predIndex);
		case 441:
			return exprList_sempred((ExprListContext)_localctx, predIndex);
		case 454:
			return attrs_sempred((AttrsContext)_localctx, predIndex);
		case 462:
			return optArrayBounds_sempred((OptArrayBoundsContext)_localctx, predIndex);
		case 489:
			return nameList_sempred((NameListContext)_localctx, predIndex);
		case 527:
			return varName_sempred((VarNameContext)_localctx, predIndex);
		case 584:
			return insertColumnList_sempred((InsertColumnListContext)_localctx, predIndex);
		case 589:
			return setClauseList_sempred((SetClauseListContext)_localctx, predIndex);
		case 592:
			return setTargetList_sempred((SetTargetListContext)_localctx, predIndex);
		case 599:
			return selectClauseN_sempred((SelectClauseNContext)_localctx, predIndex);
		case 604:
			return cteList_sempred((CteListContext)_localctx, predIndex);
		case 610:
			return forLockingItems_sempred((ForLockingItemsContext)_localctx, predIndex);
		case 615:
			return qualifiedNameList_sempred((QualifiedNameListContext)_localctx, predIndex);
		case 617:
			return valuesClause_sempred((ValuesClauseContext)_localctx, predIndex);
		case 625:
			return targetList_sempred((TargetListContext)_localctx, predIndex);
		case 635:
			return windowDefinitionList_sempred((WindowDefinitionListContext)_localctx, predIndex);
		case 640:
			return fromList_sempred((FromListContext)_localctx, predIndex);
		case 641:
			return tableReference_sempred((TableReferenceContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean tableLikeOptionList_sempred(TableLikeOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean aExpr_sempred(AExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 58);
		case 2:
			return precpred(_ctx, 55);
		case 3:
			return precpred(_ctx, 54);
		case 4:
			return precpred(_ctx, 53);
		case 5:
			return precpred(_ctx, 52);
		case 6:
			return precpred(_ctx, 51);
		case 7:
			return precpred(_ctx, 50);
		case 8:
			return precpred(_ctx, 49);
		case 9:
			return precpred(_ctx, 48);
		case 10:
			return precpred(_ctx, 44);
		case 11:
			return precpred(_ctx, 43);
		case 12:
			return precpred(_ctx, 42);
		case 13:
			return precpred(_ctx, 41);
		case 14:
			return precpred(_ctx, 40);
		case 15:
			return precpred(_ctx, 39);
		case 16:
			return precpred(_ctx, 38);
		case 17:
			return precpred(_ctx, 37);
		case 18:
			return precpred(_ctx, 36);
		case 19:
			return precpred(_ctx, 35);
		case 20:
			return precpred(_ctx, 34);
		case 21:
			return precpred(_ctx, 33);
		case 22:
			return precpred(_ctx, 21);
		case 23:
			return precpred(_ctx, 20);
		case 24:
			return precpred(_ctx, 17);
		case 25:
			return precpred(_ctx, 16);
		case 26:
			return precpred(_ctx, 15);
		case 27:
			return precpred(_ctx, 14);
		case 28:
			return precpred(_ctx, 2);
		case 29:
			return precpred(_ctx, 60);
		case 30:
			return precpred(_ctx, 59);
		case 31:
			return precpred(_ctx, 46);
		case 32:
			return precpred(_ctx, 32);
		case 33:
			return precpred(_ctx, 31);
		case 34:
			return precpred(_ctx, 30);
		case 35:
			return precpred(_ctx, 29);
		case 36:
			return precpred(_ctx, 27);
		case 37:
			return precpred(_ctx, 26);
		case 38:
			return precpred(_ctx, 25);
		case 39:
			return precpred(_ctx, 24);
		case 40:
			return precpred(_ctx, 23);
		case 41:
			return precpred(_ctx, 22);
		case 42:
			return precpred(_ctx, 19);
		case 43:
			return precpred(_ctx, 18);
		case 44:
			return precpred(_ctx, 13);
		case 45:
			return precpred(_ctx, 12);
		case 46:
			return precpred(_ctx, 11);
		case 47:
			return precpred(_ctx, 10);
		case 48:
			return precpred(_ctx, 8);
		case 49:
			return precpred(_ctx, 7);
		case 50:
			return precpred(_ctx, 6);
		case 51:
			return precpred(_ctx, 5);
		case 52:
			return precpred(_ctx, 4);
		case 53:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean bExpr_sempred(BExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54:
			return precpred(_ctx, 9);
		case 55:
			return precpred(_ctx, 6);
		case 56:
			return precpred(_ctx, 5);
		case 57:
			return precpred(_ctx, 12);
		case 58:
			return precpred(_ctx, 7);
		case 59:
			return precpred(_ctx, 4);
		case 60:
			return precpred(_ctx, 3);
		case 61:
			return precpred(_ctx, 2);
		case 62:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean indirection_sempred(IndirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean optIndirection_sempred(OptIndirectionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean xmlTableColumnOptionList_sempred(XmlTableColumnOptionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean exprList_sempred(ExprListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 66:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean attrs_sempred(AttrsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean optArrayBounds_sempred(OptArrayBoundsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68:
			return precpred(_ctx, 3);
		case 69:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean nameList_sempred(NameListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean varName_sempred(VarNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean insertColumnList_sempred(InsertColumnListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 72:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean setClauseList_sempred(SetClauseListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 73:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean setTargetList_sempred(SetTargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 74:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean selectClauseN_sempred(SelectClauseNContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75:
			return precpred(_ctx, 3);
		case 76:
			return precpred(_ctx, 2);
		case 77:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean cteList_sempred(CteListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean forLockingItems_sempred(ForLockingItemsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 79:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean qualifiedNameList_sempred(QualifiedNameListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 80:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean valuesClause_sempred(ValuesClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean targetList_sempred(TargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 82:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean windowDefinitionList_sempred(WindowDefinitionListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 83:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean fromList_sempred(FromListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 84:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean tableReference_sempred(TableReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 85:
			return precpred(_ctx, 2);
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0226\u2404\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210\4\u0211"+
		"\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214\t\u0214\4\u0215\t\u0215"+
		"\4\u0216\t\u0216\4\u0217\t\u0217\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a"+
		"\t\u021a\4\u021b\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e"+
		"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222\t\u0222\4\u0223"+
		"\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225\4\u0226\t\u0226\4\u0227\t\u0227"+
		"\4\u0228\t\u0228\4\u0229\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c"+
		"\t\u022c\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230\t\u0230"+
		"\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233\4\u0234\t\u0234\4\u0235"+
		"\t\u0235\4\u0236\t\u0236\4\u0237\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239"+
		"\4\u023a\t\u023a\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e"+
		"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241\4\u0242\t\u0242"+
		"\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245\t\u0245\4\u0246\t\u0246\4\u0247"+
		"\t\u0247\4\u0248\t\u0248\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b"+
		"\4\u024c\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f\4\u0250"+
		"\t\u0250\4\u0251\t\u0251\4\u0252\t\u0252\4\u0253\t\u0253\4\u0254\t\u0254"+
		"\4\u0255\t\u0255\4\u0256\t\u0256\4\u0257\t\u0257\4\u0258\t\u0258\4\u0259"+
		"\t\u0259\4\u025a\t\u025a\4\u025b\t\u025b\4\u025c\t\u025c\4\u025d\t\u025d"+
		"\4\u025e\t\u025e\4\u025f\t\u025f\4\u0260\t\u0260\4\u0261\t\u0261\4\u0262"+
		"\t\u0262\4\u0263\t\u0263\4\u0264\t\u0264\4\u0265\t\u0265\4\u0266\t\u0266"+
		"\4\u0267\t\u0267\4\u0268\t\u0268\4\u0269\t\u0269\4\u026a\t\u026a\4\u026b"+
		"\t\u026b\4\u026c\t\u026c\4\u026d\t\u026d\4\u026e\t\u026e\4\u026f\t\u026f"+
		"\4\u0270\t\u0270\4\u0271\t\u0271\4\u0272\t\u0272\4\u0273\t\u0273\4\u0274"+
		"\t\u0274\4\u0275\t\u0275\4\u0276\t\u0276\4\u0277\t\u0277\4\u0278\t\u0278"+
		"\4\u0279\t\u0279\4\u027a\t\u027a\4\u027b\t\u027b\4\u027c\t\u027c\4\u027d"+
		"\t\u027d\4\u027e\t\u027e\4\u027f\t\u027f\4\u0280\t\u0280\4\u0281\t\u0281"+
		"\4\u0282\t\u0282\4\u0283\t\u0283\4\u0284\t\u0284\4\u0285\t\u0285\4\u0286"+
		"\t\u0286\4\u0287\t\u0287\4\u0288\t\u0288\4\u0289\t\u0289\4\u028a\t\u028a"+
		"\4\u028b\t\u028b\4\u028c\t\u028c\4\u028d\t\u028d\4\u028e\t\u028e\4\u028f"+
		"\t\u028f\4\u0290\t\u0290\4\u0291\t\u0291\4\u0292\t\u0292\4\u0293\t\u0293"+
		"\4\u0294\t\u0294\4\u0295\t\u0295\4\u0296\t\u0296\4\u0297\t\u0297\4\u0298"+
		"\t\u0298\4\u0299\t\u0299\4\u029a\t\u029a\4\u029b\t\u029b\4\u029c\t\u029c"+
		"\4\u029d\t\u029d\3\2\3\2\3\2\3\2\5\2\u053f\n\2\3\2\3\2\3\2\3\2\3\2\3\2"+
		"\3\2\3\2\5\2\u0549\n\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u0552\n\2\3\2\3"+
		"\2\5\2\u0556\n\2\3\2\3\2\5\2\u055a\n\2\3\2\5\2\u055d\n\2\3\2\5\2\u0560"+
		"\n\2\3\2\5\2\u0563\n\2\3\2\5\2\u0566\n\2\3\2\3\2\3\2\5\2\u056b\n\2\5\2"+
		"\u056d\n\2\3\2\3\2\3\2\3\2\5\2\u0573\n\2\5\2\u0575\n\2\3\3\3\3\3\3\3\3"+
		"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\5\4\u0595\n\4\3\5\3\5\3\5\7\5\u059a"+
		"\n\5\f\5\16\5\u059d\13\5\3\6\3\6\3\6\3\7\3\7\3\7\7\7\u05a5\n\7\f\7\16"+
		"\7\u05a8\13\7\3\b\3\b\5\b\u05ac\n\b\3\t\3\t\3\t\5\t\u05b1\n\t\3\t\3\t"+
		"\3\n\7\n\u05b6\n\n\f\n\16\n\u05b9\13\n\3\13\3\13\3\13\3\13\3\13\5\13\u05c0"+
		"\n\13\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u05cc\n\r\3\16\3\16"+
		"\3\16\3\16\5\16\u05d2\n\16\3\17\3\17\3\17\3\20\3\20\3\20\5\20\u05da\n"+
		"\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u05e3\n\21\3\21\3\21\3\21"+
		"\3\21\5\21\u05e9\n\21\3\21\3\21\3\21\3\21\5\21\u05ef\n\21\3\21\3\21\5"+
		"\21\u05f3\n\21\3\21\5\21\u05f6\n\21\3\21\5\21\u05f9\n\21\3\22\3\22\3\22"+
		"\3\22\3\22\3\23\3\23\3\23\7\23\u0603\n\23\f\23\16\23\u0606\13\23\3\24"+
		"\3\24\3\24\3\25\3\25\3\25\3\25\5\25\u060f\n\25\3\25\7\25\u0612\n\25\f"+
		"\25\16\25\u0615\13\25\3\26\3\26\3\26\5\26\u061a\n\26\3\26\5\26\u061d\n"+
		"\26\3\26\5\26\u0620\n\26\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u0628\n\26"+
		"\f\26\16\26\u062b\13\26\5\26\u062d\n\26\3\26\5\26\u0630\n\26\3\26\3\26"+
		"\5\26\u0634\n\26\3\26\3\26\3\26\3\26\5\26\u063a\n\26\3\26\3\26\5\26\u063e"+
		"\n\26\3\27\3\27\3\27\7\27\u0643\n\27\f\27\16\27\u0646\13\27\3\30\3\30"+
		"\3\31\3\31\3\31\3\31\5\31\u064e\n\31\3\31\3\31\3\32\3\32\5\32\u0654\n"+
		"\32\3\32\3\32\3\32\5\32\u0659\n\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33"+
		"\3\33\5\33\u0663\n\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\5\34\u0673\n\34\3\34\3\34\3\34\3\34\5\34\u0679\n"+
		"\34\5\34\u067b\n\34\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0683\n\35\3\35"+
		"\3\35\3\35\3\36\3\36\3\36\3\36\3\36\5\36\u068d\n\36\3\37\3\37\3 \3 \3"+
		" \3 \3 \3 \5 \u0697\n \3!\3!\3\"\3\"\5\"\u069d\n\"\3\"\3\"\3\"\5\"\u06a2"+
		"\n\"\3\"\5\"\u06a5\n\"\3#\3#\3#\3#\5#\u06ab\n#\3$\5$\u06ae\n$\3$\3$\5"+
		"$\u06b2\n$\3%\3%\3%\3%\3&\3&\3&\3&\7&\u06bc\n&\f&\16&\u06bf\13&\5&\u06c1"+
		"\n&\3&\3&\3\'\3\'\3\'\3\'\3\'\7\'\u06ca\n\'\f\'\16\'\u06cd\13\'\5\'\u06cf"+
		"\n\'\3(\3(\3(\5(\u06d4\n(\3(\7(\u06d7\n(\f(\16(\u06da\13(\3)\5)\u06dd"+
		"\n)\3)\3)\3)\3*\3*\3*\3+\5+\u06e6\n+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+"+
		"\3+\3+\3+\3+\3+\5+\u06f8\n+\3+\3+\3+\3+\3+\3+\5+\u0700\n+\3+\3+\3+\3+"+
		"\3+\3+\3+\3+\5+\u070a\n+\3+\3+\3+\3+\3+\3+\5+\u0712\n+\3+\3+\3+\7+\u0717"+
		"\n+\f+\16+\u071a\13+\5+\u071c\n+\3,\3,\3,\3,\5,\u0722\n,\3-\3-\5-\u0726"+
		"\n-\3.\6.\u0729\n.\r.\16.\u072a\3/\3/\5/\u072f\n/\3/\3/\3/\5/\u0734\n"+
		"/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u0746\n/\3\60\3\60"+
		"\3\60\3\60\5\60\u074c\n\60\3\60\3\60\3\60\3\60\5\60\u0752\n\60\3\61\3"+
		"\61\3\61\3\61\3\61\3\61\5\61\u075a\n\61\3\62\5\62\u075d\n\62\3\62\5\62"+
		"\u0760\n\62\3\62\3\62\5\62\u0764\n\62\3\63\3\63\3\63\3\64\5\64\u076a\n"+
		"\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3"+
		"\65\3\65\5\65\u077b\n\65\3\65\3\65\3\65\3\65\3\65\5\65\u0782\n\65\3\65"+
		"\3\65\3\65\3\65\3\65\3\65\5\65\u078a\n\65\3\65\3\65\3\65\3\65\3\65\3\65"+
		"\5\65\u0792\n\65\3\65\3\65\3\65\7\65\u0797\n\65\f\65\16\65\u079a\13\65"+
		"\5\65\u079c\n\65\3\66\3\66\3\66\3\66\3\66\3\67\3\67\3\67\7\67\u07a6\n"+
		"\67\f\67\16\67\u07a9\13\67\38\38\38\38\38\38\38\38\38\38\38\58\u07b6\n"+
		"8\39\39\59\u07ba\n9\3:\3:\3:\3:\3:\3:\3:\3;\3;\3;\7;\u07c6\n;\f;\16;\u07c9"+
		"\13;\3<\3<\3<\5<\u07ce\n<\3<\5<\u07d1\n<\3<\3<\3<\3<\3<\5<\u07d8\n<\3"+
		"<\5<\u07db\n<\3<\3<\3<\5<\u07e0\n<\3<\5<\u07e3\n<\5<\u07e5\n<\3=\3=\5"+
		"=\u07e9\n=\3>\3>\5>\u07ed\n>\3?\5?\u07f0\n?\3@\5@\u07f3\n@\3A\3A\3A\5"+
		"A\u07f8\nA\3B\5B\u07fb\nB\3C\3C\5C\u07ff\nC\3D\5D\u0802\nD\3E\3E\3E\3"+
		"E\3E\3E\3E\3E\5E\u080c\nE\3F\3F\3F\3F\3F\3F\3F\3F\5F\u0816\nF\3G\3G\3"+
		"G\3G\3G\5G\u081d\nG\3H\3H\3H\3H\3I\3I\3I\3I\3J\3J\3J\3J\3J\3K\3K\3K\5"+
		"K\u082f\nK\3K\3K\3K\3K\5K\u0835\nK\3L\3L\3L\7L\u083a\nL\fL\16L\u083d\13"+
		"L\3M\3M\5M\u0841\nM\3N\3N\3N\7N\u0846\nN\fN\16N\u0849\13N\3O\3O\3O\3O"+
		"\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\5O\u085c\nO\3O\3O\3O\3O\3O\5O"+
		"\u0863\nO\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\5O\u0873\nO\3O\5O"+
		"\u0876\nO\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O"+
		"\3O\3O\7O\u088e\nO\fO\16O\u0891\13O\3O\3O\3O\3O\3O\3O\3O\7O\u089a\nO\f"+
		"O\16O\u089d\13O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\5O\u08af"+
		"\nO\3O\3O\3O\3O\3O\3O\3O\3O\5O\u08b9\nO\5O\u08bb\nO\3P\3P\5P\u08bf\nP"+
		"\3P\3P\3P\5P\u08c4\nP\3P\3P\3Q\3Q\5Q\u08ca\nQ\3Q\3Q\3Q\5Q\u08cf\nQ\3R"+
		"\3R\5R\u08d3\nR\3S\3S\3S\5S\u08d8\nS\3S\3S\3S\5S\u08dd\nS\3S\3S\5S\u08e1"+
		"\nS\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\5S\u08f7"+
		"\nS\3S\3S\3S\3S\3S\3S\5S\u08ff\nS\3S\3S\3S\7S\u0904\nS\fS\16S\u0907\13"+
		"S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3"+
		"S\3S\3S\3S\3S\5S\u0924\nS\3T\3T\5T\u0928\nT\3T\3T\3U\3U\3U\3U\3U\5U\u0931"+
		"\nU\3U\5U\u0934\nU\3U\3U\5U\u0938\nU\3U\5U\u093b\nU\5U\u093d\nU\3V\3V"+
		"\3V\7V\u0942\nV\fV\16V\u0945\13V\3W\3W\3W\3W\3X\3X\3X\3X\5X\u094f\nX\3"+
		"X\5X\u0952\nX\3Y\3Y\5Y\u0956\nY\3Y\3Y\5Y\u095a\nY\3Y\3Y\3Y\3Y\3Y\3Z\3"+
		"Z\3Z\3Z\3[\3[\3\\\3\\\5\\\u0969\n\\\3\\\3\\\3\\\3\\\3]\3]\3]\3]\3]\3]"+
		"\3^\3^\3^\3^\3_\3_\5_\u097b\n_\3`\3`\3`\7`\u0980\n`\f`\16`\u0983\13`\3"+
		"a\3a\3a\3a\3a\3b\5b\u098b\nb\3b\5b\u098e\nb\3b\3b\3b\3b\3b\3b\3b\3b\3"+
		"b\3b\5b\u099a\nb\3c\6c\u099d\nc\rc\16c\u099e\3d\3d\5d\u09a3\nd\3d\3d\3"+
		"d\3d\5d\u09a9\nd\3d\3d\3d\3d\5d\u09af\nd\3d\3d\5d\u09b3\nd\3e\3e\3e\7"+
		"e\u09b8\ne\fe\16e\u09bb\13e\3f\3f\5f\u09bf\nf\3f\3f\3f\5f\u09c4\nf\3f"+
		"\3f\3f\5f\u09c9\nf\3f\3f\3f\3f\3f\5f\u09d0\nf\3f\3f\3f\3f\3f\3f\3f\5f"+
		"\u09d9\nf\3f\3f\3f\3f\3f\3f\3f\5f\u09e2\nf\3f\3f\3f\3f\3f\3f\3f\5f\u09eb"+
		"\nf\3f\3f\3f\3f\3f\3f\5f\u09f3\nf\3f\3f\3f\3f\3f\3f\5f\u09fb\nf\3f\3f"+
		"\3f\3f\3f\3f\5f\u0a03\nf\3f\3f\3f\3f\3f\3f\3f\5f\u0a0c\nf\3f\3f\3f\3f"+
		"\3f\3f\3f\5f\u0a15\nf\3f\3f\5f\u0a19\nf\3f\3f\3f\3f\3f\5f\u0a20\nf\3f"+
		"\3f\3f\3f\3f\3f\5f\u0a28\nf\3f\3f\3f\3f\3f\3f\3f\3f\5f\u0a32\nf\3f\3f"+
		"\3f\3f\5f\u0a38\nf\3f\3f\5f\u0a3c\nf\3f\3f\5f\u0a40\nf\3f\3f\5f\u0a44"+
		"\nf\3f\3f\5f\u0a48\nf\3f\3f\3f\5f\u0a4d\nf\3f\5f\u0a50\nf\3f\3f\5f\u0a54"+
		"\nf\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\5f\u0a69"+
		"\nf\3f\3f\3f\3f\5f\u0a6f\nf\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f"+
		"\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f"+
		"\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f"+
		"\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f"+
		"\3f\3f\3f\3f\3f\3f\3f\3f\3f\3f\5f\u0ace\nf\3g\7g\u0ad1\ng\fg\16g\u0ad4"+
		"\13g\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\5h\u0ae1\nh\3i\3i\3i\3i\3i\3j\3"+
		"j\3j\7j\u0aeb\nj\fj\16j\u0aee\13j\3k\3k\3k\3k\3k\3k\3k\5k\u0af7\nk\3l"+
		"\3l\3m\3m\3n\3n\3n\3o\3o\3o\3p\6p\u0b04\np\rp\16p\u0b05\3q\3q\3q\5q\u0b0b"+
		"\nq\3q\3q\3q\3q\3q\3q\5q\u0b13\nq\3r\3r\3r\3r\3r\5r\u0b1a\nr\3s\3s\3s"+
		"\3s\3t\3t\3t\3t\3t\3t\3t\3t\3u\3u\3u\3u\3u\3u\3u\3u\3u\5u\u0b31\nu\3v"+
		"\3v\3v\3v\3v\3v\3v\3v\3w\3w\3w\5w\u0b3e\nw\3x\3x\3x\7x\u0b43\nx\fx\16"+
		"x\u0b46\13x\3y\3y\3y\3y\5y\u0b4c\ny\3y\5y\u0b4f\ny\3y\3y\3y\3y\5y\u0b55"+
		"\ny\3y\5y\u0b58\ny\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\3y\5y\u0b66\ny\3z"+
		"\3z\3z\3z\3z\3z\5z\u0b6e\nz\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{"+
		"\3{\3{\5{\u0b80\n{\3|\3|\3|\7|\u0b85\n|\f|\16|\u0b88\13|\3}\3}\3}\3}\5"+
		"}\u0b8e\n}\3~\3~\3~\3~\3~\5~\u0b95\n~\3\177\3\177\3\177\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082"+
		"\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082"+
		"\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082"+
		"\u0bb6\n\u0082\3\u0083\3\u0083\3\u0083\7\u0083\u0bbb\n\u0083\f\u0083\16"+
		"\u0083\u0bbe\13\u0083\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0bcb\n\u0085\3\u0086"+
		"\3\u0086\3\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0bdd\n\u0087"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089\3\u0089"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0bed\n\u0089\3\u008a"+
		"\3\u008a\3\u008a\3\u008a\5\u008a\u0bf3\n\u008a\3\u008a\3\u008a\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0bfe\n\u008b"+
		"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0c07"+
		"\n\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b"+
		"\3\u008b\3\u008b\5\u008b\u0c13\n\u008b\5\u008b\u0c15\n\u008b\3\u008c\3"+
		"\u008c\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d\7\u008d\u0c1e\n\u008d\f"+
		"\u008d\16\u008d\u0c21\13\u008d\3\u008e\5\u008e\u0c24\n\u008e\3\u008e\3"+
		"\u008e\3\u008f\3\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090"+
		"\5\u0090\u0c39\n\u0090\3\u0091\3\u0091\3\u0091\7\u0091\u0c3e\n\u0091\f"+
		"\u0091\16\u0091\u0c41\13\u0091\3\u0092\3\u0092\5\u0092\u0c45\n\u0092\3"+
		"\u0092\3\u0092\5\u0092\u0c49\n\u0092\3\u0092\3\u0092\5\u0092\u0c4d\n\u0092"+
		"\3\u0092\3\u0092\5\u0092\u0c51\n\u0092\5\u0092\u0c53\n\u0092\3\u0093\6"+
		"\u0093\u0c56\n\u0093\r\u0093\16\u0093\u0c57\3\u0094\3\u0094\3\u0094\3"+
		"\u0094\3\u0094\3\u0094\5\u0094\u0c60\n\u0094\3\u0095\3\u0095\3\u0096\3"+
		"\u0096\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097"+
		"\u0c76\n\u0097\3\u0097\3\u0097\5\u0097\u0c7a\n\u0097\3\u0097\3\u0097\3"+
		"\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\5\u0097\u0c9a\n\u0097\3\u0098\3\u0098\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\5\u009a\u0cad\n\u009a\3\u009b\3\u009b\3\u009c"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d"+
		"\u0cd5\n\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d"+
		"\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0d2a\n\u009d\3\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0d34\n\u009e"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0d3c\n\u009f"+
		"\3\u00a0\3\u00a0\3\u00a0\3\u00a1\7\u00a1\u0d42\n\u00a1\f\u00a1\16\u00a1"+
		"\u0d45\13\u00a1\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0d4a\n\u00a2\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a4\5\u00a4\u0d54"+
		"\n\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4"+
		"\5\u00a4\u0d5e\n\u00a4\3\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a7"+
		"\6\u00a7\u0d66\n\u00a7\r\u00a7\16\u00a7\u0d67\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0d72\n\u00a8\3\u00a9"+
		"\3\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0d84\n\u00ab"+
		"\3\u00ac\3\u00ac\5\u00ac\u0d88\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0d95"+
		"\n\u00ac\5\u00ac\u0d97\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0da2\n\u00ad\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af\5\u00af\u0dab\n\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\5\u00af\u0db8\n\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0dbd\n"+
		"\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0dc5\n"+
		"\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af"+
		"\u0dce\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\5\u00af\u0de1\n\u00af\5\u00af\u0de3\n\u00af\3\u00b0\3\u00b0\3"+
		"\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u0ded\n\u00b0\3"+
		"\u00b0\3\u00b0\3\u00b0\3\u00b1\7\u00b1\u0df3\n\u00b1\f\u00b1\16\u00b1"+
		"\u0df6\13\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u0dfd"+
		"\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\5\u00b4\u0e05"+
		"\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0e0c\n\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4"+
		"\u0e16\n\u00b4\3\u00b5\3\u00b5\5\u00b5\u0e1a\n\u00b5\3\u00b5\3\u00b5\3"+
		"\u00b5\5\u00b5\u0e1f\n\u00b5\3\u00b5\3\u00b5\5\u00b5\u0e23\n\u00b5\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0e29\n\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u0e31\n\u00b6\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\5\u00b7\u0e37\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b8\3\u00b8\5\u00b8\u0e40\n\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\5\u00b8\u0e47\n\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\5\u00b8\u0e4f\n\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u0e54\n"+
		"\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba\5\u00ba"+
		"\u0e5d\n\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u0e63\n\u00ba\3"+
		"\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\5\u00ba\u0e6f\n\u00ba\3\u00bb\6\u00bb\u0e72\n\u00bb\r\u00bb\16"+
		"\u00bb\u0e73\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd\5"+
		"\u00bd\u0e7d\n\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0e83\n\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\5\u00bd\u0e8f\n\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\5\u00be\u0e9f\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\5\u00c1\u0eb2\n\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u0ebf"+
		"\n\u00c2\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u0ecf\n\u00c3"+
		"\3\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u0ed8"+
		"\n\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u0eee\n\u00c5\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0f01\n\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0f08\n\u00c6\3\u00c6\5\u00c6"+
		"\u0f0b\n\u00c6\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u0f10\n\u00c7\f\u00c7\16"+
		"\u00c7\u0f13\13\u00c7\3\u00c8\3\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\5\u00c9\u0f1d\n\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca"+
		"\u0f2b\n\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u0f42\n\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u0f4a\n\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc"+
		"\u0f55\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u0f59\n\u00cc\3\u00cd\3\u00cd\3"+
		"\u00cd\7\u00cd\u0f5e\n\u00cd\f\u00cd\16\u00cd\u0f61\13\u00cd\3\u00ce\3"+
		"\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u0f72\n\u00ce\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\5\u00cf\u0f80\n\u00cf\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0"+
		"\u0f8e\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\5\u00d1\u0f99\n\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\5\u00d1\u0f9f\n\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0fac\n\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\5\u00d3\u0fb1\n\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\5\u00d3\u0fc1\n\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0fce\n\u00d3"+
		"\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u0fd3\n\u00d4\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\5\u00d5\u0fd9\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\5\u00d5\u0fe1\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5"+
		"\u0fe7\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u0fed\n\u00d5\3"+
		"\u00d5\3\u00d5\3\u00d5\5\u00d5\u0ff2\n\u00d5\3\u00d5\5\u00d5\u0ff5\n\u00d5"+
		"\5\u00d5\u0ff7\n\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d7\3\u00d7\5\u00d7\u1004\n\u00d7\3\u00d8"+
		"\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u100a\n\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u1015\n\u00d9"+
		"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u101e"+
		"\n\u00d9\3\u00da\3\u00da\3\u00da\5\u00da\u1023\n\u00da\3\u00db\3\u00db"+
		"\5\u00db\u1027\n\u00db\3\u00db\3\u00db\5\u00db\u102b\n\u00db\3\u00db\3"+
		"\u00db\3\u00db\3\u00db\5\u00db\u1031\n\u00db\3\u00dc\3\u00dc\3\u00dc\3"+
		"\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u10a9"+
		"\n\u00de\3\u00df\3\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0"+
		"\u10b2\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\5\u00e1\u10bd\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\5\u00e1\u10c3\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\5\u00e2"+
		"\u10dc\n\u00e2\3\u00e3\3\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u10ec"+
		"\n\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u10f4"+
		"\n\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7\3\u00e7\7\u00e7"+
		"\u10fd\n\u00e7\f\u00e7\16\u00e7\u1100\13\u00e7\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u1111\n\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\5\u00e9\u1116\n\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u111b\n\u00e9\5"+
		"\u00e9\u111d\n\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u1123\n\u00ea"+
		"\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u112a\n\u00eb\3\u00eb"+
		"\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u1133\n\u00eb"+
		"\3\u00ec\3\u00ec\5\u00ec\u1137\n\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\5\u00ed\u1146\n\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u1153\n\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ef\3\u00ef\3\u00ef\7\u00ef"+
		"\u115e\n\u00ef\f\u00ef\16\u00ef\u1161\13\u00ef\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f1\7\u00f1\u116c\n\u00f1"+
		"\f\u00f1\16\u00f1\u116f\13\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f2"+
		"\5\u00f2\u1176\n\u00f2\3\u00f2\3\u00f2\5\u00f2\u117a\n\u00f2\3\u00f2\3"+
		"\u00f2\3\u00f3\7\u00f3\u117f\n\u00f3\f\u00f3\16\u00f3\u1182\13\u00f3\3"+
		"\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u118b\n"+
		"\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u1193\n"+
		"\u00f5\3\u00f5\5\u00f5\u1196\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3"+
		"\u00f6\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u11a0\n\u00f7\3\u00f7\3\u00f7\3"+
		"\u00f7\5\u00f7\u11a5\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3"+
		"\u00f7\5\u00f7\u11ad\n\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u11b2\n\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u11b7\n\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u11c1\n\u00f7\3\u00f7"+
		"\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u11c7\n\u00f7\5\u00f7\u11c9\n\u00f7\3"+
		"\u00f8\3\u00f8\3\u00f8\7\u00f8\u11ce\n\u00f8\f\u00f8\16\u00f8\u11d1\13"+
		"\u00f8\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u11d6\n\u00f9\3\u00fa\3\u00fa\3"+
		"\u00fa\3\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb\7\u00fb\u11e0\n\u00fb\f"+
		"\u00fb\16\u00fb\u11e3\13\u00fb\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fd"+
		"\5\u00fd\u11ea\n\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd"+
		"\5\u00fd\u11fb\n\u00fd\3\u00fe\3\u00fe\3\u00fe\7\u00fe\u1200\n\u00fe\f"+
		"\u00fe\16\u00fe\u1203\13\u00fe\3\u00ff\3\u00ff\3\u00ff\3\u0100\6\u0100"+
		"\u1209\n\u0100\r\u0100\16\u0100\u120a\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u1215\n\u0101\3\u0102\3\u0102"+
		"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\5\u0103\u1224\n\u0103\5\u0103\u1226\n\u0103\3\u0104\3"+
		"\u0104\3\u0105\3\u0105\5\u0105\u122c\n\u0105\3\u0105\3\u0105\3\u0106\3"+
		"\u0106\3\u0106\7\u0106\u1233\n\u0106\f\u0106\16\u0106\u1236\13\u0106\3"+
		"\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\5\u0107\u1241\n\u0107\3\u0108\3\u0108\3\u0108\5\u0108\u1246\n\u0108\3"+
		"\u0108\5\u0108\u1249\n\u0108\3\u0108\5\u0108\u124c\n\u0108\3\u0108\3\u0108"+
		"\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u1254\n\u0108\3\u0108\5\u0108"+
		"\u1257\n\u0108\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u125d\n\u0108\3"+
		"\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109"+
		"\u1270\n\u0109\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u1276\n\u010a\3"+
		"\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u127f\n"+
		"\u010b\3\u010b\3\u010b\5\u010b\u1283\n\u010b\3\u010b\3\u010b\5\u010b\u1287"+
		"\n\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u128e\n\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1296\n\u010b"+
		"\3\u010c\3\u010c\3\u010c\5\u010c\u129b\n\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010d\3\u010d\3\u010d\3\u010d\5\u010d\u12a6\n\u010d"+
		"\3\u010d\3\u010d\5\u010d\u12aa\n\u010d\3\u010e\3\u010e\3\u010e\3\u010e"+
		"\3\u010e\3\u010e\5\u010e\u12b2\n\u010e\3\u010f\3\u010f\3\u010f\5\u010f"+
		"\u12b7\n\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\5\u010f\u12c2\n\u010f\3\u010f\3\u010f\5\u010f\u12c6\n"+
		"\u010f\3\u010f\3\u010f\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110"+
		"\5\u0110\u12d0\n\u0110\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111"+
		"\u12d7\n\u0111\3\u0112\5\u0112\u12da\n\u0112\3\u0112\3\u0112\5\u0112\u12de"+
		"\n\u0112\7\u0112\u12e0\n\u0112\f\u0112\16\u0112\u12e3\13\u0112\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\5\u0113\u12e9\n\u0113\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u12f3\n\u0114\3\u0114"+
		"\5\u0114\u12f6\n\u0114\3\u0114\5\u0114\u12f9\n\u0114\3\u0114\3\u0114\3"+
		"\u0114\3\u0114\3\u0114\5\u0114\u1300\n\u0114\3\u0114\3\u0114\3\u0114\3"+
		"\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1309\n\u0114\3\u0114\3\u0114\3"+
		"\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\5\u0114\u1317\n\u0114\3\u0115\3\u0115\3\u0115\7\u0115\u131c\n"+
		"\u0115\f\u0115\16\u0115\u131f\13\u0115\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\5\u0116\u1328\n\u0116\3\u0117\3\u0117\3\u0117"+
		"\3\u0117\5\u0117\u132e\n\u0117\3\u0118\3\u0118\3\u0118\7\u0118\u1333\n"+
		"\u0118\f\u0118\16\u0118\u1336\13\u0118\3\u0119\3\u0119\3\u0119\5\u0119"+
		"\u133b\n\u0119\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011b\3\u011b"+
		"\5\u011b\u1344\n\u011b\3\u011b\3\u011b\3\u011c\3\u011c\3\u011c\3\u011d"+
		"\6\u011d\u134c\n\u011d\r\u011d\16\u011d\u134d\3\u011e\3\u011e\3\u011e"+
		"\5\u011e\u1353\n\u011e\3\u011e\3\u011e\3\u011f\3\u011f\3\u0120\3\u0120"+
		"\3\u0121\3\u0121\3\u0122\3\u0122\5\u0122\u135f\n\u0122\3\u0122\3\u0122"+
		"\3\u0122\3\u0122\5\u0122\u1365\n\u0122\3\u0122\3\u0122\5\u0122\u1369\n"+
		"\u0122\3\u0123\5\u0123\u136c\n\u0123\3\u0123\3\u0123\5\u0123\u1370\n\u0123"+
		"\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u1377\n\u0124\3\u0124"+
		"\3\u0124\3\u0124\5\u0124\u137c\n\u0124\3\u0124\5\u0124\u137f\n\u0124\3"+
		"\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\5\u0125\u138c\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\5\u0126\u139e\n\u0126\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\5\u0127\u13a5\n\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\5\u0127\u13ab\n\u0127\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0129\3\u0129\3\u0129\5\u0129\u13b7\n\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\3\u012b\5\u012b\u13c8\n\u012b\3\u012b\3\u012b"+
		"\3\u012b\5\u012b\u13cd\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\5\u012b\u13d4\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u13da\n"+
		"\u012b\3\u012c\3\u012c\3\u012c\7\u012c\u13df\n\u012c\f\u012c\16\u012c"+
		"\u13e2\13\u012c\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d"+
		"\u13ea\n\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012e"+
		"\3\u012e\3\u012e\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u13fa"+
		"\n\u012f\3\u012f\3\u012f\5\u012f\u13fe\n\u012f\3\u0130\3\u0130\3\u0130"+
		"\3\u0130\5\u0130\u1404\n\u0130\3\u0130\3\u0130\5\u0130\u1408\n\u0130\3"+
		"\u0131\3\u0131\3\u0131\7\u0131\u140d\n\u0131\f\u0131\16\u0131\u1410\13"+
		"\u0131\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u1416\n\u0132\3\u0132\3"+
		"\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u141e\n\u0132\3\u0133\3"+
		"\u0133\3\u0133\3\u0133\5\u0133\u1424\n\u0133\3\u0133\3\u0133\5\u0133\u1428"+
		"\n\u0133\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u142e\n\u0134\3\u0134"+
		"\3\u0134\5\u0134\u1432\n\u0134\3\u0135\3\u0135\3\u0135\3\u0135\5\u0135"+
		"\u1438\n\u0135\3\u0135\3\u0135\5\u0135\u143c\n\u0135\3\u0136\3\u0136\3"+
		"\u0136\3\u0136\3\u0136\5\u0136\u1443\n\u0136\3\u0136\3\u0136\5\u0136\u1447"+
		"\n\u0136\3\u0137\3\u0137\3\u0137\3\u0137\5\u0137\u144d\n\u0137\3\u0137"+
		"\3\u0137\5\u0137\u1451\n\u0137\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138"+
		"\3\u0138\5\u0138\u1459\n\u0138\3\u0138\3\u0138\5\u0138\u145d\n\u0138\3"+
		"\u0139\3\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1464\n\u0139\3\u0139\3"+
		"\u0139\3\u0139\7\u0139\u1469\n\u0139\f\u0139\16\u0139\u146c\13\u0139\3"+
		"\u0139\5\u0139\u146f\n\u0139\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u1475"+
		"\n\u013a\3\u013a\3\u013a\5\u013a\u1479\n\u013a\3\u013b\3\u013b\3\u013b"+
		"\7\u013b\u147e\n\u013b\f\u013b\16\u013b\u1481\13\u013b\3\u013c\3\u013c"+
		"\5\u013c\u1485\n\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u148a\n\u013c\3"+
		"\u013c\3\u013c\5\u013c\u148e\n\u013c\3\u013d\3\u013d\3\u013d\3\u013d\3"+
		"\u013d\5\u013d\u1495\n\u013d\3\u013d\3\u013d\5\u013d\u1499\n\u013d\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\5\u013e\u149f\n\u013e\3\u013e\3\u013e\5\u013e"+
		"\u14a3\n\u013e\3\u013f\3\u013f\3\u013f\7\u013f\u14a8\n\u013f\f\u013f\16"+
		"\u013f\u14ab\13\u013f\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140"+
		"\u14b2\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\5\u0140\u14b8\n\u0140\3"+
		"\u0141\3\u0141\3\u0141\3\u0141\3\u0141\5\u0141\u14bf\n\u0141\3\u0141\3"+
		"\u0141\3\u0141\3\u0141\5\u0141\u14c5\n\u0141\3\u0142\3\u0142\3\u0142\3"+
		"\u0142\3\u0142\5\u0142\u14cc\n\u0142\3\u0143\3\u0143\3\u0143\3\u0143\5"+
		"\u0143\u14d2\n\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u14d8\n\u0143"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u14de\n\u0144\3\u0144\3\u0144"+
		"\5\u0144\u14e2\n\u0144\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u14e8\n"+
		"\u0145\3\u0145\3\u0145\5\u0145\u14ec\n\u0145\3\u0146\3\u0146\3\u0146\3"+
		"\u0146\5\u0146\u14f2\n\u0146\3\u0146\3\u0146\5\u0146\u14f6\n\u0146\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\5\u0147\u14fc\n\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\5\u0147\u1502\n\u0147\3\u0148\3\u0148\3\u0148\3\u0148\5\u0148"+
		"\u1508\n\u0148\3\u0148\3\u0148\5\u0148\u150c\n\u0148\3\u0149\3\u0149\3"+
		"\u0149\3\u0149\5\u0149\u1512\n\u0149\3\u0149\3\u0149\5\u0149\u1516\n\u0149"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u151c\n\u014a\3\u014a\3\u014a"+
		"\3\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u1524\n\u014b\3\u014b\3\u014b"+
		"\5\u014b\u1528\n\u014b\3\u014c\3\u014c\3\u014c\3\u014c\5\u014c\u152e\n"+
		"\u014c\3\u014c\3\u014c\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d"+
		"\5\u014d\u1538\n\u014d\3\u014d\3\u014d\5\u014d\u153c\n\u014d\3\u014e\3"+
		"\u014e\3\u014e\3\u014e\5\u014e\u1542\n\u014e\3\u014e\3\u014e\3\u014e\3"+
		"\u014e\3\u014e\5\u014e\u1549\n\u014e\3\u014f\3\u014f\3\u014f\3\u014f\5"+
		"\u014f\u154f\n\u014f\3\u014f\3\u014f\3\u014f\3\u014f\5\u014f\u1555\n\u014f"+
		"\3\u0150\3\u0150\3\u0150\3\u0150\5\u0150\u155b\n\u0150\3\u0150\3\u0150"+
		"\5\u0150\u155f\n\u0150\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\5\u0151"+
		"\u1566\n\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0152\3\u0152"+
		"\3\u0152\3\u0152\5\u0152\u1571\n\u0152\3\u0152\3\u0152\5\u0152\u1575\n"+
		"\u0152\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\5\u0153\u157c\n\u0153\3"+
		"\u0153\3\u0153\3\u0153\3\u0153\3\u0153\3\u0153\5\u0153\u1584\n\u0153\3"+
		"\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0155\3\u0155\3\u0155\5\u0155"+
		"\u158e\n\u0155\3\u0156\3\u0156\3\u0156\3\u0157\3\u0157\3\u0157\3\u0158"+
		"\3\u0158\3\u0158\5\u0158\u1599\n\u0158\3\u0158\3\u0158\3\u0158\3\u0159"+
		"\3\u0159\3\u0159\3\u0159\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u15a6"+
		"\n\u015a\3\u015a\3\u015a\5\u015a\u15aa\n\u015a\3\u015b\3\u015b\3\u015b"+
		"\3\u015c\3\u015c\5\u015c\u15b1\n\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\5\u015c\u15b7\n\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\3\u015c\5\u015c\u15c0\n\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\3\u015c\3\u015c\5\u015c\u15c9\n\u015c\3\u015c\3\u015c\5\u015c\u15cd\n"+
		"\u015c\3\u015d\3\u015d\3\u015d\7\u015d\u15d2\n\u015d\f\u015d\16\u015d"+
		"\u15d5\13\u015d\3\u015e\3\u015e\3\u015f\3\u015f\3\u0160\3\u0160\3\u0161"+
		"\3\u0161\3\u0161\3\u0161\3\u0161\5\u0161\u15e2\n\u0161\3\u0161\3\u0161"+
		"\3\u0161\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\5\u0162\u15ec\n\u0162"+
		"\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0162\5\u0162"+
		"\u15f6\n\u0162\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\5\u0164\u1602\n\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\5\u0164\u160b\n\u0164\3\u0164\3\u0164"+
		"\3\u0164\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0166"+
		"\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166\3\u0166"+
		"\3\u0167\3\u0167\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\5\u0168\u1631"+
		"\n\u0168\3\u0169\3\u0169\3\u0169\5\u0169\u1636\n\u0169\3\u016a\3\u016a"+
		"\5\u016a\u163a\n\u016a\3\u016b\3\u016b\3\u016c\5\u016c\u163f\n\u016c\3"+
		"\u016c\3\u016c\5\u016c\u1643\n\u016c\3\u016d\3\u016d\3\u016d\3\u016e\5"+
		"\u016e\u1649\n\u016e\3\u016e\3\u016e\5\u016e\u164d\n\u016e\3\u016e\5\u016e"+
		"\u1650\n\u016e\3\u016f\3\u016f\3\u016f\3\u0170\3\u0170\3\u0170\3\u0171"+
		"\3\u0171\3\u0172\3\u0172\3\u0173\3\u0173\3\u0174\3\u0174\3\u0174\5\u0174"+
		"\u1661\n\u0174\3\u0174\3\u0174\3\u0175\3\u0175\3\u0175\5\u0175\u1668\n"+
		"\u0175\3\u0175\3\u0175\3\u0176\3\u0176\3\u0177\3\u0177\3\u0178\5\u0178"+
		"\u1671\n\u0178\3\u0178\3\u0178\3\u0178\7\u0178\u1676\n\u0178\f\u0178\16"+
		"\u0178\u1679\13\u0178\3\u0178\5\u0178\u167c\n\u0178\3\u0179\3\u0179\3"+
		"\u0179\3\u0179\7\u0179\u1682\n\u0179\f\u0179\16\u0179\u1685\13\u0179\3"+
		"\u0179\3\u0179\3\u017a\3\u017a\5\u017a\u168b\n\u017a\3\u017b\3\u017b\3"+
		"\u017c\3\u017c\3\u017d\5\u017d\u1692\n\u017d\3\u017d\3\u017d\3\u017e\3"+
		"\u017e\3\u017f\3\u017f\3\u0180\3\u0180\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\5\u0181\u16ae\n\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\5\u0181\u171d\n\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\5\u0181\u1727\n\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\7\u0181\u17a3\n\u0181\f\u0181\16\u0181\u17a6\13\u0181\3\u0182"+
		"\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\5\u0182"+
		"\u17b1\n\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182\7\u0182"+
		"\u17dd\n\u0182\f\u0182\16\u0182\u17e0\13\u0182\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\5\u0183\u17e7\n\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\5\u0183\u1801\n\u0183\3\u0184\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\7\u0184\u1808\n\u0184\f\u0184\16\u0184\u180b\13\u0184\3\u0185"+
		"\3\u0185\3\u0185\7\u0185\u1810\n\u0185\f\u0185\16\u0185\u1813\13\u0185"+
		"\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186\3\u0186"+
		"\3\u0186\5\u0186\u181f\n\u0186\3\u0186\3\u0186\5\u0186\u1823\n\u0186\3"+
		"\u0186\5\u0186\u1826\n\u0186\3\u0187\3\u0187\3\u0188\3\u0188\3\u0188\3"+
		"\u0188\3\u0188\5\u0188\u182f\n\u0188\3\u0189\3\u0189\5\u0189\u1833\n\u0189"+
		"\3\u0189\3\u0189\5\u0189\u1837\n\u0189\3\u0189\3\u0189\3\u018a\6\u018a"+
		"\u183c\n\u018a\r\u018a\16\u018a\u183d\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\3\u018b\3\u018c\3\u018c\3\u018c\3\u018d\3\u018d\3\u018e\3\u018e\3\u018e"+
		"\3\u018e\5\u018e\u184e\n\u018e\3\u018f\3\u018f\3\u018f\3\u018f\3\u018f"+
		"\3\u018f\3\u018f\3\u018f\5\u018f\u1858\n\u018f\3\u0190\3\u0190\3\u0190"+
		"\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190\3\u0190"+
		"\5\u0190\u1866\n\u0190\3\u0191\3\u0191\5\u0191\u186a\n\u0191\3\u0192\6"+
		"\u0192\u186d\n\u0192\r\u0192\16\u0192\u186e\3\u0193\3\u0193\3\u0194\3"+
		"\u0194\3\u0194\3\u0194\3\u0194\3\u0194\5\u0194\u1879\n\u0194\3\u0195\3"+
		"\u0195\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\5\u0196\u1882\n\u0196\3"+
		"\u0197\3\u0197\3\u0197\5\u0197\u1887\n\u0197\3\u0198\3\u0198\3\u0198\3"+
		"\u0198\3\u0198\3\u0198\5\u0198\u188f\n\u0198\3\u0199\3\u0199\3\u0199\3"+
		"\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199"+
		"\5\u0199\u189d\n\u0199\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a"+
		"\3\u019a\3\u019a\3\u019a\3\u019a\5\u019a\u18a9\n\u019a\3\u019b\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\5\u019b\u18b9\n\u019b\3\u019c\3\u019c\3\u019c"+
		"\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c\5\u019c\u18c3\n\u019c\3\u019d"+
		"\3\u019d\3\u019d\3\u019d\3\u019d\3\u019d\3\u019e\3\u019e\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\5\u019f"+
		"\u18d7\n\u019f\3\u01a0\3\u01a0\3\u01a0\7\u01a0\u18dc\n\u01a0\f\u01a0\16"+
		"\u01a0\u18df\13\u01a0\3\u01a1\3\u01a1\3\u01a1\7\u01a1\u18e4\n\u01a1\f"+
		"\u01a1\16\u01a1\u18e7\13\u01a1\3\u01a2\3\u01a2\3\u01a3\3\u01a3\3\u01a3"+
		"\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\5\u01a3\u18f4\n\u01a3"+
		"\3\u01a4\3\u01a4\3\u01a4\7\u01a4\u18f9\n\u01a4\f\u01a4\16\u01a4\u18fc"+
		"\13\u01a4\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\5\u01a5\u1906\n\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\5\u01a5\u190f\n\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u191a\n\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u1923\n\u01a5\3\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u192c\n\u01a5"+
		"\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u1935"+
		"\n\u01a5\3\u01a6\3\u01a6\3\u01a6\3\u01a6\5\u01a6\u193b\n\u01a6\3\u01a7"+
		"\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\5\u01a7"+
		"\u1946\n\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\5\u01a7"+
		"\u194e\n\u01a7\3\u01a8\3\u01a8\3\u01a8\3\u01a8\5\u01a8\u1954\n\u01a8\3"+
		"\u01a9\3\u01a9\3\u01aa\3\u01aa\3\u01aa\5\u01aa\u195b\n\u01aa\3\u01ab\3"+
		"\u01ab\5\u01ab\u195f\n\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3\u01ab\3"+
		"\u01ab\5\u01ab\u1967\n\u01ab\5\u01ab\u1969\n\u01ab\3\u01ac\3\u01ac\3\u01ac"+
		"\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac\3\u01ac"+
		"\5\u01ac\u1980\n\u01ac\3\u01ad\3\u01ad\3\u01ad\7\u01ad\u1985\n\u01ad\f"+
		"\u01ad\16\u01ad\u1988\13\u01ad\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae"+
		"\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\5\u01ae\u1995\n\u01ae"+
		"\3\u01af\3\u01af\3\u01af\3\u01af\3\u01af\7\u01af\u199c\n\u01af\f\u01af"+
		"\16\u01af\u199f\13\u01af\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0"+
		"\3\u01b0\3\u01b0\5\u01b0\u19a9\n\u01b0\3\u01b1\3\u01b1\3\u01b1\7\u01b1"+
		"\u19ae\n\u01b1\f\u01b1\16\u01b1\u19b1\13\u01b1\3\u01b2\3\u01b2\3\u01b2"+
		"\3\u01b2\3\u01b2\3\u01b2\5\u01b2\u19b9\n\u01b2\3\u01b3\3\u01b3\5\u01b3"+
		"\u19bd\n\u01b3\3\u01b3\5\u01b3\u19c0\n\u01b3\3\u01b3\5\u01b3\u19c3\n\u01b3"+
		"\3\u01b3\5\u01b3\u19c6\n\u01b3\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b4"+
		"\3\u01b4\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b6\3\u01b6"+
		"\5\u01b6\u19d6\n\u01b6\3\u01b7\3\u01b7\3\u01b7\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u1a06\n\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\5\u01b8\u1aa3\n\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8"+
		"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u1aaf\n\u01b8\3\u01b9\3\u01b9"+
		"\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9"+
		"\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9"+
		"\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\5\u01b9\u1acc"+
		"\n\u01b9\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba"+
		"\3\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01ba\5\u01ba\u1adb\n\u01ba\3\u01bb"+
		"\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\7\u01bb\u1ae3\n\u01bb\f\u01bb"+
		"\16\u01bb\u1ae6\13\u01bb\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bd\3\u01bd"+
		"\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u1af3\n\u01bd\3\u01be"+
		"\3\u01be\5\u01be\u1af7\n\u01be\3\u01be\3\u01be\3\u01be\5\u01be\u1afc\n"+
		"\u01be\5\u01be\u1afe\n\u01be\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01c0\3"+
		"\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0"+
		"\3\u01c0\5\u01c0\u1b0f\n\u01c0\3\u01c0\3\u01c0\5\u01c0\u1b13\n\u01c0\3"+
		"\u01c0\3\u01c0\5\u01c0\u1b17\n\u01c0\3\u01c0\3\u01c0\3\u01c0\3\u01c0\3"+
		"\u01c0\3\u01c0\5\u01c0\u1b1f\n\u01c0\3\u01c1\3\u01c1\3\u01c1\3\u01c1\3"+
		"\u01c1\5\u01c1\u1b26\n\u01c1\3\u01c1\3\u01c1\5\u01c1\u1b2a\n\u01c1\3\u01c1"+
		"\3\u01c1\3\u01c1\3\u01c1\3\u01c1\5\u01c1\u1b31\n\u01c1\3\u01c1\3\u01c1"+
		"\5\u01c1\u1b35\n\u01c1\3\u01c1\5\u01c1\u1b38\n\u01c1\3\u01c2\3\u01c2\3"+
		"\u01c2\3\u01c2\3\u01c2\3\u01c2\5\u01c2\u1b40\n\u01c2\3\u01c3\3\u01c3\5"+
		"\u01c3\u1b44\n\u01c3\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c5\3"+
		"\u01c5\3\u01c6\3\u01c6\5\u01c6\u1b4f\n\u01c6\3\u01c6\3\u01c6\5\u01c6\u1b53"+
		"\n\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\5\u01c6\u1b59\n\u01c6\3\u01c6"+
		"\3\u01c6\3\u01c6\5\u01c6\u1b5e\n\u01c6\3\u01c6\3\u01c6\5\u01c6\u1b62\n"+
		"\u01c6\5\u01c6\u1b64\n\u01c6\3\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7\u1b6a"+
		"\n\u01c7\3\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\7\u01c8"+
		"\u1b73\n\u01c8\f\u01c8\16\u01c8\u1b76\13\u01c8\3\u01c9\3\u01c9\3\u01ca"+
		"\3\u01ca\3\u01ca\3\u01ca\5\u01ca\u1b7e\n\u01ca\3\u01cb\3\u01cb\5\u01cb"+
		"\u1b82\n\u01cb\3\u01cc\3\u01cc\5\u01cc\u1b86\n\u01cc\3\u01cc\3\u01cc\3"+
		"\u01cc\3\u01cc\3\u01cd\3\u01cd\5\u01cd\u1b8e\n\u01cd\3\u01ce\3\u01ce\3"+
		"\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf"+
		"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf"+
		"\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf\3\u01cf"+
		"\3\u01cf\5\u01cf\u1bae\n\u01cf\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0"+
		"\3\u01d0\3\u01d0\3\u01d0\7\u01d0\u1bb8\n\u01d0\f\u01d0\16\u01d0\u1bbb"+
		"\13\u01d0\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\5\u01d1\u1bc2\n\u01d1"+
		"\3\u01d2\3\u01d2\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3\3\u01d3"+
		"\5\u01d3\u1bcd\n\u01d3\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4\3\u01d4"+
		"\3\u01d4\3\u01d4\3\u01d4\5\u01d4\u1bd8\n\u01d4\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d6\3\u01d6\3\u01d6\3\u01d7\3\u01d7\3\u01d7\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\5\u01d8\u1be8\n\u01d8\3\u01d9\3\u01d9\3\u01d9\3\u01d9"+
		"\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9"+
		"\3\u01d9\3\u01d9\3\u01d9\5\u01d9\u1bfa\n\u01d9\3\u01da\3\u01da\3\u01da"+
		"\3\u01da\3\u01da\3\u01db\3\u01db\3\u01db\7\u01db\u1c04\n\u01db\f\u01db"+
		"\16\u01db\u1c07\13\u01db\3\u01dc\3\u01dc\3\u01dc\3\u01dc\3\u01dc\5\u01dc"+
		"\u1c0e\n\u01dc\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd"+
		"\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\3\u01dd\5\u01dd"+
		"\u1c1f\n\u01dd\3\u01de\3\u01de\3\u01de\3\u01de\5\u01de\u1c25\n\u01de\3"+
		"\u01df\3\u01df\3\u01e0\3\u01e0\3\u01e0\3\u01e0\3\u01e0\5\u01e0\u1c2e\n"+
		"\u01e0\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\5\u01e1\u1c35\n\u01e1\3"+
		"\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2"+
		"\3\u01e2\5\u01e2\u1c41\n\u01e2\3\u01e3\3\u01e3\3\u01e3\3\u01e4\3\u01e4"+
		"\3\u01e4\7\u01e4\u1c49\n\u01e4\f\u01e4\16\u01e4\u1c4c\13\u01e4\3\u01e5"+
		"\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e6\3\u01e6\3\u01e6\7\u01e6\u1c56"+
		"\n\u01e6\f\u01e6\16\u01e6\u1c59\13\u01e6\3\u01e7\3\u01e7\3\u01e7\5\u01e7"+
		"\u1c5e\n\u01e7\3\u01e8\3\u01e8\5\u01e8\u1c62\n\u01e8\3\u01e8\3\u01e8\3"+
		"\u01e9\3\u01e9\3\u01e9\3\u01e9\5\u01e9\u1c6a\n\u01e9\3\u01ea\3\u01ea\3"+
		"\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea"+
		"\3\u01ea\3\u01ea\3\u01ea\5\u01ea\u1c7a\n\u01ea\3\u01eb\3\u01eb\3\u01eb"+
		"\3\u01eb\3\u01eb\3\u01eb\7\u01eb\u1c82\n\u01eb\f\u01eb\16\u01eb\u1c85"+
		"\13\u01eb\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec"+
		"\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec\3\u01ec"+
		"\5\u01ec\u1c98\n\u01ec\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed\3\u01ed"+
		"\5\u01ed\u1ca0\n\u01ed\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ef"+
		"\3\u01ef\3\u01f0\3\u01f0\3\u01f0\3\u01f0\3\u01f1\3\u01f1\3\u01f1\7\u01f1"+
		"\u1cb0\n\u01f1\f\u01f1\16\u01f1\u1cb3\13\u01f1\3\u01f2\3\u01f2\3\u01f2"+
		"\3\u01f2\5\u01f2\u1cb9\n\u01f2\3\u01f2\3\u01f2\5\u01f2\u1cbd\n\u01f2\3"+
		"\u01f2\5\u01f2\u1cc0\n\u01f2\5\u01f2\u1cc2\n\u01f2\3\u01f3\3\u01f3\3\u01f3"+
		"\3\u01f3\5\u01f3\u1cc8\n\u01f3\3\u01f4\3\u01f4\3\u01f4\3\u01f4\3\u01f4"+
		"\3\u01f4\3\u01f4\5\u01f4\u1cd1\n\u01f4\3\u01f5\3\u01f5\3\u01f6\3\u01f6"+
		"\3\u01f6\3\u01f6\5\u01f6\u1cd9\n\u01f6\3\u01f7\3\u01f7\5\u01f7\u1cdd\n"+
		"\u01f7\3\u01f7\5\u01f7\u1ce0\n\u01f7\3\u01f7\5\u01f7\u1ce3\n\u01f7\3\u01f7"+
		"\5\u01f7\u1ce6\n\u01f7\3\u01f7\3\u01f7\3\u01f8\3\u01f8\3\u01f9\3\u01f9"+
		"\3\u01f9\3\u01f9\3\u01fa\3\u01fa\3\u01fa\7\u01fa\u1cf3\n\u01fa\f\u01fa"+
		"\16\u01fa\u1cf6\13\u01fa\3\u01fb\5\u01fb\u1cf9\n\u01fb\3\u01fb\3\u01fb"+
		"\5\u01fb\u1cfd\n\u01fb\3\u01fb\5\u01fb\u1d00\n\u01fb\3\u01fb\5\u01fb\u1d03"+
		"\n\u01fb\3\u01fb\3\u01fb\3\u01fb\5\u01fb\u1d08\n\u01fb\3\u01fb\5\u01fb"+
		"\u1d0b\n\u01fb\5\u01fb\u1d0d\n\u01fb\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3"+
		"\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc\5\u01fc\u1d1a\n"+
		"\u01fc\3\u01fd\3\u01fd\3\u01fd\3\u01fe\3\u01fe\5\u01fe\u1d21\n\u01fe\3"+
		"\u01ff\3\u01ff\3\u01ff\3\u01ff\3\u0200\3\u0200\3\u0200\7\u0200\u1d2a\n"+
		"\u0200\f\u0200\16\u0200\u1d2d\13\u0200\3\u0201\3\u0201\3\u0201\3\u0201"+
		"\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201\3\u0201"+
		"\3\u0201\3\u0201\5\u0201\u1d3e\n\u0201\3\u0202\3\u0202\3\u0202\3\u0202"+
		"\3\u0202\3\u0202\5\u0202\u1d46\n\u0202\3\u0203\3\u0203\3\u0203\3\u0203"+
		"\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\5\u0203"+
		"\u1d54\n\u0203\3\u0204\3\u0204\3\u0205\3\u0205\5\u0205\u1d5a\n\u0205\3"+
		"\u0205\5\u0205\u1d5d\n\u0205\3\u0205\5\u0205\u1d60\n\u0205\3\u0205\3\u0205"+
		"\3\u0205\3\u0205\3\u0205\7\u0205\u1d67\n\u0205\f\u0205\16\u0205\u1d6a"+
		"\13\u0205\3\u0205\3\u0205\5\u0205\u1d6e\n\u0205\3\u0205\5\u0205\u1d71"+
		"\n\u0205\5\u0205\u1d73\n\u0205\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206"+
		"\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206"+
		"\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206"+
		"\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206"+
		"\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206"+
		"\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206"+
		"\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\3\u0206\5\u0206"+
		"\u1daf\n\u0206\3\u0207\3\u0207\3\u0207\3\u0207\5\u0207\u1db5\n\u0207\3"+
		"\u0207\3\u0207\3\u0208\3\u0208\3\u0208\5\u0208\u1dbc\n\u0208\3\u0208\3"+
		"\u0208\3\u0209\3\u0209\3\u0209\5\u0209\u1dc3\n\u0209\3\u020a\3\u020a\3"+
		"\u020a\7\u020a\u1dc8\n\u020a\f\u020a\16\u020a\u1dcb\13\u020a\3\u020b\3"+
		"\u020b\3\u020b\3\u020b\3\u020b\5\u020b\u1dd2\n\u020b\3\u020c\3\u020c\3"+
		"\u020c\3\u020c\3\u020c\5\u020c\u1dd9\n\u020c\3\u020d\3\u020d\3\u020d\3"+
		"\u020d\5\u020d\u1ddf\n\u020d\3\u020e\3\u020e\3\u020f\3\u020f\3\u0210\3"+
		"\u0210\3\u0210\3\u0210\5\u0210\u1de9\n\u0210\3\u0211\3\u0211\3\u0211\3"+
		"\u0211\3\u0211\3\u0211\7\u0211\u1df1\n\u0211\f\u0211\16\u0211\u1df4\13"+
		"\u0211\3\u0212\3\u0212\3\u0212\7\u0212\u1df9\n\u0212\f\u0212\16\u0212"+
		"\u1dfc\13\u0212\3\u0213\3\u0213\5\u0213\u1e00\n\u0213\3\u0214\3\u0214"+
		"\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214\3\u0214"+
		"\3\u0214\3\u0214\5\u0214\u1e0f\n\u0214\3\u0215\3\u0215\3\u0215\3\u0215"+
		"\3\u0215\5\u0215\u1e16\n\u0215\3\u0216\3\u0216\3\u0216\3\u0216\3\u0216"+
		"\3\u0216\3\u0216\5\u0216\u1e1f\n\u0216\3\u0217\3\u0217\3\u0217\5\u0217"+
		"\u1e24\n\u0217\3\u0217\3\u0217\3\u0218\3\u0218\3\u0218\3\u0218\3\u0218"+
		"\3\u0218\3\u0218\3\u0218\5\u0218\u1e30\n\u0218\3\u0219\3\u0219\3\u0219"+
		"\3\u0219\3\u0219\3\u0219\3\u0219\5\u0219\u1e39\n\u0219\3\u021a\3\u021a"+
		"\3\u021a\3\u021a\3\u021a\3\u021a\5\u021a\u1e41\n\u021a\3\u021a\3\u021a"+
		"\3\u021a\3\u021a\3\u021a\5\u021a\u1e48\n\u021a\3\u021a\3\u021a\3\u021a"+
		"\3\u021a\3\u021a\3\u021a\5\u021a\u1e50\n\u021a\3\u021a\3\u021a\3\u021a"+
		"\3\u021a\3\u021a\3\u021a\3\u021a\5\u021a\u1e59\n\u021a\3\u021a\3\u021a"+
		"\3\u021a\3\u021a\3\u021a\3\u021a\3\u021a\3\u021a\3\u021a\3\u021a\3\u021a"+
		"\5\u021a\u1e66\n\u021a\3\u021a\5\u021a\u1e69\n\u021a\3\u021a\5\u021a\u1e6c"+
		"\n\u021a\5\u021a\u1e6e\n\u021a\3\u021b\3\u021b\3\u021b\3\u021b\3\u021c"+
		"\6\u021c\u1e75\n\u021c\r\u021c\16\u021c\u1e76\3\u021d\3\u021d\3\u021d"+
		"\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\5\u021d\u1e82\n\u021d"+
		"\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d"+
		"\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\3\u021d\5\u021d"+
		"\u1e95\n\u021d\3\u021d\3\u021d\3\u021d\3\u021d\5\u021d\u1e9b\n\u021d\3"+
		"\u021d\5\u021d\u1e9e\n\u021d\3\u021e\3\u021e\3\u021e\3\u021e\3\u021f\3"+
		"\u021f\3\u021f\5\u021f\u1ea7\n\u021f\3\u0220\3\u0220\3\u0220\3\u0221\3"+
		"\u0221\3\u0221\3\u0221\3\u0221\3\u0222\3\u0222\3\u0222\3\u0222\3\u0223"+
		"\3\u0223\3\u0223\7\u0223\u1eb8\n\u0223\f\u0223\16\u0223\u1ebb\13\u0223"+
		"\3\u0224\3\u0224\3\u0224\3\u0224\3\u0224\5\u0224\u1ec2\n\u0224\3\u0225"+
		"\3\u0225\3\u0225\3\u0225\3\u0225\5\u0225\u1ec9\n\u0225\3\u0226\3\u0226"+
		"\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\3\u0226\5\u0226\u1ed3\n\u0226"+
		"\3\u0227\3\u0227\3\u0227\3\u0227\3\u0228\3\u0228\3\u0228\3\u0228\3\u0229"+
		"\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\3\u0229\5\u0229\u1ee5"+
		"\n\u0229\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\3\u022a\5\u022a\u1eed"+
		"\n\u022a\3\u022b\3\u022b\3\u022b\3\u022b\3\u022b\3\u022c\3\u022c\3\u022c"+
		"\7\u022c\u1ef7\n\u022c\f\u022c\16\u022c\u1efa\13\u022c\3\u022d\3\u022d"+
		"\3\u022d\3\u022d\3\u022d\3\u022d\5\u022d\u1f02\n\u022d\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e\3\u022e"+
		"\3\u022e\3\u022e\5\u022e\u1f1a\n\u022e\3\u022f\3\u022f\3\u022f\3\u022f"+
		"\3\u022f\3\u022f\3\u022f\3\u022f\3\u022f\3\u022f\3\u022f\3\u022f\3\u022f"+
		"\3\u022f\3\u022f\5\u022f\u1f2b\n\u022f\3\u0230\3\u0230\3\u0230\3\u0230"+
		"\3\u0230\3\u0230\5\u0230\u1f33\n\u0230\3\u0231\3\u0231\3\u0231\7\u0231"+
		"\u1f38\n\u0231\f\u0231\16\u0231\u1f3b\13\u0231\3\u0232\3\u0232\5\u0232"+
		"\u1f3f\n\u0232\3\u0233\3\u0233\3\u0234\3\u0234\3\u0234\7\u0234\u1f46\n"+
		"\u0234\f\u0234\16\u0234\u1f49\13\u0234\3\u0235\3\u0235\3\u0235\5\u0235"+
		"\u1f4e\n\u0235\3\u0236\3\u0236\3\u0236\3\u0236\3\u0236\3\u0236\3\u0236"+
		"\3\u0236\5\u0236\u1f58\n\u0236\3\u0237\3\u0237\5\u0237\u1f5c\n\u0237\3"+
		"\u0237\7\u0237\u1f5f\n\u0237\f\u0237\16\u0237\u1f62\13\u0237\3\u0238\3"+
		"\u0238\3\u0238\3\u0238\3\u0238\3\u0238\3\u0238\3\u0238\3\u0238\3\u0238"+
		"\5\u0238\u1f6e\n\u0238\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239"+
		"\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239\5\u0239"+
		"\u1f7e\n\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239"+
		"\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239\3\u0239"+
		"\5\u0239\u1f90\n\u0239\3\u023a\3\u023a\3\u023b\3\u023b\3\u023b\3\u023b"+
		"\5\u023b\u1f98\n\u023b\3\u023c\3\u023c\3\u023c\3\u023d\3\u023d\3\u023d"+
		"\3\u023d\3\u023d\3\u023d\3\u023d\3\u023d\5\u023d\u1fa5\n\u023d\3\u023e"+
		"\3\u023e\5\u023e\u1fa9\n\u023e\3\u023f\3\u023f\3\u023f\7\u023f\u1fae\n"+
		"\u023f\f\u023f\16\u023f\u1fb1\13\u023f\3\u0240\3\u0240\3\u0240\3\u0240"+
		"\3\u0240\3\u0240\3\u0240\3\u0240\3\u0240\3\u0240\3\u0240\5\u0240\u1fbe"+
		"\n\u0240\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241"+
		"\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241"+
		"\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241"+
		"\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241\3\u0241"+
		"\5\u0241\u1fe3\n\u0241\3\u0242\3\u0242\3\u0242\5\u0242\u1fe8\n\u0242\3"+
		"\u0243\3\u0243\3\u0244\3\u0244\3\u0245\3\u0245\3\u0245\7\u0245\u1ff1\n"+
		"\u0245\f\u0245\16\u0245\u1ff4\13\u0245\3\u0246\5\u0246\u1ff7\n\u0246\3"+
		"\u0246\3\u0246\3\u0246\3\u0246\3\u0246\5\u0246\u1ffe\n\u0246\3\u0246\5"+
		"\u0246\u2001\n\u0246\3\u0247\3\u0247\3\u0247\3\u0247\3\u0247\5\u0247\u2008"+
		"\n\u0247\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248"+
		"\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248\3\u0248"+
		"\3\u0248\3\u0248\3\u0248\3\u0248\5\u0248\u201f\n\u0248\3\u0249\3\u0249"+
		"\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\3\u024a\7\u024a\u2029\n\u024a"+
		"\f\u024a\16\u024a\u202c\13\u024a\3\u024b\3\u024b\3\u024b\3\u024c\3\u024c"+
		"\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\5\u024c\u2039\n\u024c"+
		"\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\3\u024c\5\u024c\u2041\n\u024c"+
		"\3\u024d\3\u024d\3\u024d\3\u024d\5\u024d\u2047\n\u024d\3\u024d\3\u024d"+
		"\3\u024d\3\u024d\5\u024d\u204d\n\u024d\3\u024e\5\u024e\u2050\n\u024e\3"+
		"\u024e\3\u024e\3\u024e\3\u024e\3\u024e\5\u024e\u2057\n\u024e\3\u024e\5"+
		"\u024e\u205a\n\u024e\3\u024e\5\u024e\u205d\n\u024e\3\u024f\3\u024f\3\u024f"+
		"\3\u024f\3\u024f\3\u024f\7\u024f\u2065\n\u024f\f\u024f\16\u024f\u2068"+
		"\13\u024f\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250\3\u0250"+
		"\3\u0250\3\u0250\5\u0250\u2074\n\u0250\3\u0251\3\u0251\3\u0251\3\u0252"+
		"\3\u0252\3\u0252\3\u0252\3\u0252\3\u0252\7\u0252\u207f\n\u0252\f\u0252"+
		"\16\u0252\u2082\13\u0252\3\u0253\3\u0253\3\u0253\3\u0254\5\u0254\u2088"+
		"\n\u0254\3\u0254\3\u0254\3\u0254\3\u0254\5\u0254\u208e\n\u0254\3\u0254"+
		"\5\u0254\u2091\n\u0254\3\u0254\5\u0254\u2094\n\u0254\3\u0255\3\u0255\3"+
		"\u0255\3\u0255\3\u0255\3\u0255\3\u0255\3\u0255\5\u0255\u209e\n\u0255\3"+
		"\u0256\3\u0256\3\u0256\3\u0257\3\u0257\5\u0257\u20a5\n\u0257\3\u0258\3"+
		"\u0258\3\u0258\3\u0258\3\u0258\3\u0258\5\u0258\u20ad\n\u0258\3\u0258\3"+
		"\u0258\5\u0258\u20b1\n\u0258\3\u0258\3\u0258\5\u0258\u20b5\n\u0258\3\u0258"+
		"\3\u0258\5\u0258\u20b9\n\u0258\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258"+
		"\3\u0258\3\u0258\3\u0258\3\u0258\3\u0258\5\u0258\u20c5\n\u0258\3\u0258"+
		"\3\u0258\5\u0258\u20c9\n\u0258\3\u0258\3\u0258\3\u0258\5\u0258\u20ce\n"+
		"\u0258\3\u0258\3\u0258\5\u0258\u20d2\n\u0258\5\u0258\u20d4\n\u0258\3\u0259"+
		"\3\u0259\3\u0259\5\u0259\u20d9\n\u0259\3\u0259\3\u0259\3\u0259\5\u0259"+
		"\u20de\n\u0259\3\u0259\3\u0259\3\u0259\3\u0259\5\u0259\u20e4\n\u0259\3"+
		"\u0259\3\u0259\3\u0259\3\u0259\5\u0259\u20ea\n\u0259\3\u0259\7\u0259\u20ed"+
		"\n\u0259\f\u0259\16\u0259\u20f0\13\u0259\3\u025a\3\u025a\5\u025a\u20f4"+
		"\n\u025a\3\u025a\5\u025a\u20f7\n\u025a\3\u025a\5\u025a\u20fa\n\u025a\3"+
		"\u025a\5\u025a\u20fd\n\u025a\3\u025a\5\u025a\u2100\n\u025a\3\u025a\5\u025a"+
		"\u2103\n\u025a\3\u025a\5\u025a\u2106\n\u025a\3\u025a\5\u025a\u2109\n\u025a"+
		"\3\u025a\3\u025a\3\u025a\3\u025a\5\u025a\u210f\n\u025a\3\u025a\5\u025a"+
		"\u2112\n\u025a\3\u025a\5\u025a\u2115\n\u025a\3\u025a\5\u025a\u2118\n\u025a"+
		"\3\u025a\5\u025a\u211b\n\u025a\3\u025a\5\u025a\u211e\n\u025a\3\u025a\3"+
		"\u025a\3\u025a\5\u025a\u2123\n\u025a\3\u025b\3\u025b\3\u025b\3\u025b\3"+
		"\u025b\5\u025b\u212a\n\u025b\3\u025c\3\u025c\3\u025c\3\u025d\3\u025d\5"+
		"\u025d\u2131\n\u025d\3\u025d\3\u025d\3\u025d\5\u025d\u2136\n\u025d\3\u025d"+
		"\3\u025d\3\u025d\3\u025d\5\u025d\u213c\n\u025d\3\u025d\3\u025d\3\u025d"+
		"\3\u025d\5\u025d\u2142\n\u025d\3\u025d\3\u025d\3\u025d\3\u025d\5\u025d"+
		"\u2148\n\u025d\3\u025d\3\u025d\3\u025d\3\u025d\5\u025d\u214e\n\u025d\3"+
		"\u025d\3\u025d\3\u025d\5\u025d\u2153\n\u025d\3\u025d\3\u025d\5\u025d\u2157"+
		"\n\u025d\3\u025d\3\u025d\5\u025d\u215b\n\u025d\3\u025e\3\u025e\3\u025e"+
		"\3\u025e\3\u025e\3\u025e\7\u025e\u2163\n\u025e\f\u025e\16\u025e\u2166"+
		"\13\u025e\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f\3\u025f"+
		"\3\u0260\3\u0260\3\u0260\3\u0260\5\u0260\u2174\n\u0260\3\u0261\3\u0261"+
		"\3\u0261\3\u0261\3\u0261\5\u0261\u217b\n\u0261\3\u0262\3\u0262\3\u0262"+
		"\3\u0262\5\u0262\u2181\n\u0262\3\u0263\3\u0263\3\u0263\3\u0263\5\u0263"+
		"\u2187\n\u0263\3\u0264\3\u0264\3\u0264\3\u0264\3\u0264\7\u0264\u218e\n"+
		"\u0264\f\u0264\16\u0264\u2191\13\u0264\3\u0265\3\u0265\5\u0265\u2195\n"+
		"\u0265\3\u0265\5\u0265\u2198\n\u0265\3\u0266\3\u0266\3\u0266\5\u0266\u219d"+
		"\n\u0266\3\u0267\3\u0267\3\u0267\3\u0267\3\u0267\3\u0267\3\u0267\3\u0267"+
		"\3\u0267\3\u0267\3\u0267\5\u0267\u21aa\n\u0267\3\u0268\3\u0268\3\u0268"+
		"\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\3\u0269\7\u0269\u21b5\n\u0269"+
		"\f\u0269\16\u0269\u21b8\13\u0269\3\u026a\3\u026a\3\u026a\3\u026a\3\u026a"+
		"\3\u026a\3\u026a\3\u026a\5\u026a\u21c2\n\u026a\3\u026b\3\u026b\3\u026b"+
		"\3\u026b\3\u026b\3\u026b\3\u026b\3\u026b\3\u026b\3\u026b\3\u026b\3\u026b"+
		"\7\u026b\u21d0\n\u026b\f\u026b\16\u026b\u21d3\13\u026b\3\u026c\3\u026c"+
		"\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c"+
		"\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c"+
		"\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c\3\u026c"+
		"\3\u026c\3\u026c\5\u026c\u21f4\n\u026c\3\u026d\3\u026d\3\u026d\3\u026d"+
		"\3\u026d\3\u026d\5\u026d\u21fc\n\u026d\3\u026e\3\u026e\5\u026e\u2200\n"+
		"\u026e\3\u026f\3\u026f\3\u0270\3\u0270\3\u0270\3\u0270\3\u0270\5\u0270"+
		"\u2209\n\u0270\3\u0271\3\u0271\3\u0272\3\u0272\3\u0273\3\u0273\3\u0273"+
		"\3\u0273\3\u0273\3\u0273\7\u0273\u2215\n\u0273\f\u0273\16\u0273\u2218"+
		"\13\u0273\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274\3\u0274"+
		"\3\u0274\3\u0274\3\u0274\3\u0274\5\u0274\u2226\n\u0274\3\u0275\3\u0275"+
		"\3\u0275\3\u0275\3\u0276\3\u0276\3\u0276\7\u0276\u222f\n\u0276\f\u0276"+
		"\16\u0276\u2232\13\u0276\3\u0277\3\u0277\3\u0277\3\u0277\3\u0277\5\u0277"+
		"\u2239\n\u0277\3\u0278\3\u0278\3\u0278\3\u0279\3\u0279\3\u0279\3\u0279"+
		"\3\u0279\3\u027a\3\u027a\3\u027a\3\u027a\3\u027a\3\u027b\3\u027b\3\u027b"+
		"\3\u027b\3\u027b\3\u027b\3\u027c\3\u027c\3\u027c\3\u027d\3\u027d\3\u027d"+
		"\3\u027d\3\u027d\3\u027d\7\u027d\u2257\n\u027d\f\u027d\16\u027d\u225a"+
		"\13\u027d\3\u027e\3\u027e\3\u027e\3\u027e\3\u027f\3\u027f\3\u0280\3\u0280"+
		"\3\u0280\3\u0280\3\u0280\3\u0280\3\u0280\3\u0280\3\u0280\3\u0280\3\u0280"+
		"\5\u0280\u226d\n\u0280\3\u0281\3\u0281\3\u0281\3\u0282\3\u0282\3\u0282"+
		"\3\u0282\3\u0282\3\u0282\7\u0282\u2278\n\u0282\f\u0282\16\u0282\u227b"+
		"\13\u0282\3\u0283\3\u0283\3\u0283\5\u0283\u2280\n\u0283\3\u0283\3\u0283"+
		"\5\u0283\u2284\n\u0283\3\u0283\3\u0283\3\u0283\3\u0283\5\u0283\u228a\n"+
		"\u0283\3\u0283\3\u0283\3\u0283\5\u0283\u228f\n\u0283\3\u0283\3\u0283\5"+
		"\u0283\u2293\n\u0283\3\u0283\3\u0283\3\u0283\5\u0283\u2298\n\u0283\3\u0283"+
		"\3\u0283\5\u0283\u229c\n\u0283\3\u0283\3\u0283\3\u0283\5\u0283\u22a1\n"+
		"\u0283\3\u0283\3\u0283\3\u0283\3\u0283\3\u0283\5\u0283\u22a8\n\u0283\5"+
		"\u0283\u22aa\n\u0283\3\u0283\3\u0283\7\u0283\u22ae\n\u0283\f\u0283\16"+
		"\u0283\u22b1\13\u0283\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284"+
		"\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284"+
		"\3\u0284\3\u0284\3\u0284\3\u0284\3\u0284\5\u0284\u22c7\n\u0284\3\u0285"+
		"\3\u0285\5\u0285\u22cb\n\u0285\3\u0285\3\u0285\5\u0285\u22cf\n\u0285\3"+
		"\u0285\3\u0285\5\u0285\u22d3\n\u0285\3\u0285\5\u0285\u22d6\n\u0285\3\u0286"+
		"\3\u0286\3\u0287\3\u0287\3\u0287\3\u0287\3\u0287\3\u0287\3\u0287\5\u0287"+
		"\u22e1\n\u0287\3\u0288\3\u0288\3\u0288\3\u0289\3\u0289\3\u0289\3\u0289"+
		"\3\u0289\5\u0289\u22eb\n\u0289\3\u028a\3\u028a\3\u028a\3\u028b\3\u028b"+
		"\3\u028b\3\u028c\6\u028c\u22f4\n\u028c\r\u028c\16\u028c\u22f5\3\u028d"+
		"\3\u028d\3\u028d\5\u028d\u22fb\n\u028d\3\u028e\3\u028e\5\u028e\u22ff\n"+
		"\u028e\3\u028e\3\u028e\3\u028e\3\u028e\3\u028e\5\u028e\u2306\n\u028e\3"+
		"\u028e\5\u028e\u2309\n\u028e\3\u028f\3\u028f\3\u028f\3\u028f\3\u028f\3"+
		"\u028f\3\u028f\3\u028f\3\u028f\3\u028f\3\u028f\3\u028f\3\u028f\3\u028f"+
		"\3\u028f\3\u028f\5\u028f\u231b\n\u028f\3\u0290\3\u0290\3\u0291\3\u0291"+
		"\5\u0291\u2321\n\u0291\3\u0291\3\u0291\3\u0291\3\u0291\3\u0291\5\u0291"+
		"\u2328\n\u0291\3\u0291\3\u0291\5\u0291\u232c\n\u0291\3\u0291\3\u0291\5"+
		"\u0291\u2330\n\u0291\3\u0291\5\u0291\u2333\n\u0291\3\u0291\3\u0291\5\u0291"+
		"\u2337\n\u0291\3\u0291\3\u0291\3\u0291\3\u0291\3\u0291\3\u0291\5\u0291"+
		"\u233f\n\u0291\3\u0291\3\u0291\5\u0291\u2343\n\u0291\3\u0291\3\u0291\5"+
		"\u0291\u2347\n\u0291\3\u0292\3\u0292\3\u0292\3\u0292\3\u0292\5\u0292\u234e"+
		"\n\u0292\3\u0293\3\u0293\3\u0293\7\u0293\u2353\n\u0293\f\u0293\16\u0293"+
		"\u2356\13\u0293\3\u0294\3\u0294\3\u0294\3\u0295\3\u0295\3\u0295\3\u0295"+
		"\3\u0295\3\u0295\3\u0295\5\u0295\u2362\n\u0295\3\u0296\3\u0296\3\u0296"+
		"\7\u0296\u2367\n\u0296\f\u0296\16\u0296\u236a\13\u0296\3\u0297\3\u0297"+
		"\3\u0298\7\u0298\u236f\n\u0298\f\u0298\16\u0298\u2372\13\u0298\3\u0299"+
		"\3\u0299\3\u0299\3\u0299\5\u0299\u2378\n\u0299\3\u0299\3\u0299\3\u0299"+
		"\5\u0299\u237d\n\u0299\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299\5\u0299"+
		"\u2384\n\u0299\3\u0299\3\u0299\3\u0299\5\u0299\u2389\n\u0299\3\u0299\3"+
		"\u0299\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299"+
		"\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299\3\u0299\5\u0299\u239b\n\u0299"+
		"\3\u029a\5\u029a\u239e\n\u029a\3\u029a\3\u029a\3\u029a\3\u029b\3\u029b"+
		"\5\u029b\u23a5\n\u029b\3\u029b\3\u029b\5\u029b\u23a9\n\u029b\3\u029c\3"+
		"\u029c\3\u029c\3\u029d\3\u029d\3\u029d\3\u029d\3\u029d\5\u029d\u23b3\n"+
		"\u029d\3\u029d\3\u029d\3\u029d\5\u029d\u23b8\n\u029d\3\u029d\3\u029d\3"+
		"\u029d\5\u029d\u23bd\n\u029d\3\u029d\3\u029d\3\u029d\5\u029d\u23c2\n\u029d"+
		"\3\u029d\3\u029d\3\u029d\3\u029d\5\u029d\u23c8\n\u029d\3\u029d\3\u029d"+
		"\3\u029d\3\u029d\3\u029d\5\u029d\u23cf\n\u029d\3\u029d\3\u029d\3\u029d"+
		"\3\u029d\5\u029d\u23d5\n\u029d\3\u029d\3\u029d\3\u029d\3\u029d\5\u029d"+
		"\u23db\n\u029d\3\u029d\3\u029d\3\u029d\5\u029d\u23e0\n\u029d\3\u029d\3"+
		"\u029d\3\u029d\3\u029d\5\u029d\u23e6\n\u029d\3\u029d\3\u029d\3\u029d\3"+
		"\u029d\3\u029d\5\u029d\u23ed\n\u029d\3\u029d\3\u029d\3\u029d\5\u029d\u23f2"+
		"\n\u029d\3\u029d\3\u029d\3\u029d\3\u029d\5\u029d\u23f8\n\u029d\3\u029d"+
		"\3\u029d\3\u029d\3\u029d\3\u029d\5\u029d\u23ff\n\u029d\3\u029d\5\u029d"+
		"\u2402\n\u029d\3\u029d\2\31\u01f4\u0300\u0302\u0306\u0308\u035c\u0374"+
		"\u038e\u039e\u03d4\u0420\u0492\u049c\u04a2\u04b0\u04ba\u04c6\u04d0\u04d4"+
		"\u04e4\u04f8\u0502\u0504\u029e\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36"+
		" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082"+
		"\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a"+
		"\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2"+
		"\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca"+
		"\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2"+
		"\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa"+
		"\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112"+
		"\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a"+
		"\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142"+
		"\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a"+
		"\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172"+
		"\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a"+
		"\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2"+
		"\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba"+
		"\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2"+
		"\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea"+
		"\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202"+
		"\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a"+
		"\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232"+
		"\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a"+
		"\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262"+
		"\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a"+
		"\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292"+
		"\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa"+
		"\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2"+
		"\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da"+
		"\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2"+
		"\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a"+
		"\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320\u0322"+
		"\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338\u033a"+
		"\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352"+
		"\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364\u0366\u0368\u036a"+
		"\u036c\u036e\u0370\u0372\u0374\u0376\u0378\u037a\u037c\u037e\u0380\u0382"+
		"\u0384\u0386\u0388\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a"+
		"\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2"+
		"\u03b4\u03b6\u03b8\u03ba\u03bc\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca"+
		"\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2"+
		"\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa"+
		"\u03fc\u03fe\u0400\u0402\u0404\u0406\u0408\u040a\u040c\u040e\u0410\u0412"+
		"\u0414\u0416\u0418\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a"+
		"\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c\u043e\u0440\u0442"+
		"\u0444\u0446\u0448\u044a\u044c\u044e\u0450\u0452\u0454\u0456\u0458\u045a"+
		"\u045c\u045e\u0460\u0462\u0464\u0466\u0468\u046a\u046c\u046e\u0470\u0472"+
		"\u0474\u0476\u0478\u047a\u047c\u047e\u0480\u0482\u0484\u0486\u0488\u048a"+
		"\u048c\u048e\u0490\u0492\u0494\u0496\u0498\u049a\u049c\u049e\u04a0\u04a2"+
		"\u04a4\u04a6\u04a8\u04aa\u04ac\u04ae\u04b0\u04b2\u04b4\u04b6\u04b8\u04ba"+
		"\u04bc\u04be\u04c0\u04c2\u04c4\u04c6\u04c8\u04ca\u04cc\u04ce\u04d0\u04d2"+
		"\u04d4\u04d6\u04d8\u04da\u04dc\u04de\u04e0\u04e2\u04e4\u04e6\u04e8\u04ea"+
		"\u04ec\u04ee\u04f0\u04f2\u04f4\u04f6\u04f8\u04fa\u04fc\u04fe\u0500\u0502"+
		"\u0504\u0506\u0508\u050a\u050c\u050e\u0510\u0512\u0514\u0516\u0518\u051a"+
		"\u051c\u051e\u0520\u0522\u0524\u0526\u0528\u052a\u052c\u052e\u0530\u0532"+
		"\u0534\u0536\u0538\2A\3\2\u0130\u0131\4\2\u00a4\u00a4\u00d8\u00d8\4\2"+
		"\u00d8\u00d8\u0124\u0124\4\2\u00a4\u00a4\u0102\u0102\3\2\66\67\4\2oo\u0098"+
		"\u0098\4\2\u00f5\u00f5\u0104\u0104\4\2\u00f8\u00f8\u0105\u0105\t\2uu\u00ec"+
		"\u00ec\u00ef\u00ef\u00f3\u00f3\u0103\u0103\u0107\u0107\u012d\u012e\3\2"+
		"\u009a\u009b\4\2\u00d7\u00d7\u0121\u0121\4\2QQ\u0138\u0138\4\2\u010f\u010f"+
		"\u0133\u0133\4\2::@@\6\2\u00fa\u00fa\u00fc\u00fc\u0110\u0110\u011d\u011d"+
		"\4\2::??\b\2\u01cf\u01cf\u01ec\u01ec\u01f7\u01f7\u01fd\u01fd\u0208\u0208"+
		"\u0219\u0219\4\2\u00e2\u00e2\u00e6\u00e6\4\2\u01b3\u01b3\u01cc\u01cc\4"+
		"\2::?@\4\2oo\u0223\u0223\4\299??\4\2\u01a1\u01a1\u01a7\u01a7\5\2LL\u0126"+
		"\u0126\u01ff\u01ff\4\2AACC\4\2KKMM\n\2uu\u00da\u00da\u00ec\u00ec\u00ef"+
		"\u00ef\u00f3\u00f3\u0103\u0103\u0107\u0107\u012d\u012e\4\2YYjj\4\2\u01a3"+
		"\u01a3\u01bc\u01bc\4\2\u00d5\u00d5\u0205\u0205\4\2AA\u00d5\u00d5\4\2\u01d9"+
		"\u01d9\u01f4\u01f4\6\2\u01b4\u01b4\u01b7\u01b7\u01e0\u01e0\u020b\u020b"+
		"\6\2uu\u0130\u0131\u01e6\u01e6\u01f7\u01f7\5\2<<\u00f2\u00f2\u019d\u019d"+
		"\4\2\u00ae\u00ae\u00f7\u00f7\4\2KK\u01a2\u01a2\4\2MM\u0125\u0125)\2\64"+
		"\6488==ABDGOOQVYYbeglnqtvxy{\177\u0088\u0088\u008d\u008e\u0098\u0098\u009f"+
		"\u009f\u00a1\u00a1\u00b4\u00b6\u00bc\u00be\u00c0\u00c1\u00c3\u00c3\u00c7"+
		"\u00c7\u00ca\u00ca\u00cd\u00cd\u00d9\u00d9\u00e1\u00e1\u00e6\u00e6\u00eb"+
		"\u00eb\u00f4\u00f4\u010a\u010a\u0118\u0118\u012a\u012a\u0165\u0166\u0188"+
		"\u0188\u018b\u018c\u0195\u0197\u0199\u019a\3\2\3\4:\2\65\679<>@CCHHKN"+
		"ffzz\u0080\u0083\u0085\u0085\u008f\u008f\u0091\u0091\u0093\u0096\u0099"+
		"\u009c\u009e\u009e\u00a0\u00a0\u00a2\u00a5\u00a7\u00a8\u00aa\u00aa\u00ae"+
		"\u00ae\u00b2\u00b3\u00b8\u00b8\u00bb\u00bb\u00c2\u00c2\u00c4\u00c4\u00c6"+
		"\u00c6\u00c8\u00c8\u00cb\u00cb\u00cf\u00cf\u00d1\u00d2\u00d4\u00d4\u00d6"+
		"\u00d8\u00da\u00e0\u00e2\u00e5\u00e7\u00ea\u00ec\u00ec\u00ef\u00f3\u00f5"+
		"\u00f9\u00fb\u00fc\u00fe\u0109\u010b\u010f\u0111\u0117\u0119\u011c\u011e"+
		"\u0129\u012b\u0133\u0135\u013d\u014b\u014b\u015b\u015b\u0164\u0164\u0174"+
		"\u0177\u0179\u017d\u0180\u0183\u0189\u018a\u018d\u018e\u0190\u0193\u019b"+
		"\u021b\r\2Zammww\u00a9\u00a9\u00c9\u00c9\u00d0\u00d0\u00ed\u00ed\u0163"+
		"\u0163\u0167\u0167\u0184\u0187\u021c\u021e\4\2\7\bkl\4\2\33\33\35!\3\2"+
		"\7\62\6\2\17\20\22\25\33\33\35!\3\2{|\5\2\u00e3\u00e3\u011f\u011f\u013c"+
		"\u013c\4\2uv\u00ca\u00ca\3\2\u0174\u0177\4\2\u0189\u0189\u0191\u0191\4"+
		"\2SSuu\3\2\u0086\u0087\36\2IJPPWXrs\u0084\u0084\u0086\u0087\u0089\u0089"+
		"\u008b\u008c\u00ab\u00ad\u00af\u00b1\u00b7\u00b7\u00b9\u00ba\u00bf\u00bf"+
		"\u00c5\u00c5\u00cc\u00cc\u00d5\u00d5\u00fd\u00fd\u013e\u013e\u0142\u0142"+
		"\u0149\u0149\u0157\u0157\u0169\u0173\u0178\u0178\u017e\u017f\u018f\u018f"+
		"\u0194\u0194\u0198\u0198\u0220\u0221\4\2\u0098\u0098\u0223\u0223\4\2\33"+
		"\33jj\4\2\64\67uu\3\2\64\67\4\2\u00e6\u00e6\u019d\u019d\4\2\u00d5\u00d5"+
		"\u00e3\u00e3\4\2\u00a7\u00a7\u00ff\u00ff\4\2\u0206\u0207\u0223\u0223\4"+
		"\2YYtt\2\u27ec\2\u053a\3\2\2\2\4\u0576\3\2\2\2\6\u0594\3\2\2\2\b\u0596"+
		"\3\2\2\2\n\u059e\3\2\2\2\f\u05a1\3\2\2\2\16\u05ab\3\2\2\2\20\u05ad\3\2"+
		"\2\2\22\u05b7\3\2\2\2\24\u05bf\3\2\2\2\26\u05c1\3\2\2\2\30\u05c4\3\2\2"+
		"\2\32\u05d1\3\2\2\2\34\u05d3\3\2\2\2\36\u05d9\3\2\2\2 \u05db\3\2\2\2\""+
		"\u05fa\3\2\2\2$\u05ff\3\2\2\2&\u0607\3\2\2\2(\u060a\3\2\2\2*\u0616\3\2"+
		"\2\2,\u063f\3\2\2\2.\u0647\3\2\2\2\60\u0649\3\2\2\2\62\u0651\3\2\2\2\64"+
		"\u0662\3\2\2\2\66\u0664\3\2\2\28\u067c\3\2\2\2:\u0687\3\2\2\2<\u068e\3"+
		"\2\2\2>\u0690\3\2\2\2@\u0698\3\2\2\2B\u069a\3\2\2\2D\u06aa\3\2\2\2F\u06b1"+
		"\3\2\2\2H\u06b3\3\2\2\2J\u06b7\3\2\2\2L\u06ce\3\2\2\2N\u06d0\3\2\2\2P"+
		"\u06dc\3\2\2\2R\u06e1\3\2\2\2T\u071b\3\2\2\2V\u071d\3\2\2\2X\u0725\3\2"+
		"\2\2Z\u0728\3\2\2\2\\\u0745\3\2\2\2^\u0751\3\2\2\2`\u0759\3\2\2\2b\u075f"+
		"\3\2\2\2d\u0765\3\2\2\2f\u0769\3\2\2\2h\u079b\3\2\2\2j\u079d\3\2\2\2l"+
		"\u07a2\3\2\2\2n\u07b5\3\2\2\2p\u07b9\3\2\2\2r\u07bb\3\2\2\2t\u07c2\3\2"+
		"\2\2v\u07e4\3\2\2\2x\u07e8\3\2\2\2z\u07ec\3\2\2\2|\u07ef\3\2\2\2~\u07f2"+
		"\3\2\2\2\u0080\u07f7\3\2\2\2\u0082\u07fa\3\2\2\2\u0084\u07fe\3\2\2\2\u0086"+
		"\u0801\3\2\2\2\u0088\u080b\3\2\2\2\u008a\u0815\3\2\2\2\u008c\u081c\3\2"+
		"\2\2\u008e\u081e\3\2\2\2\u0090\u0822\3\2\2\2\u0092\u0826\3\2\2\2\u0094"+
		"\u082e\3\2\2\2\u0096\u0836\3\2\2\2\u0098\u083e\3\2\2\2\u009a\u0842\3\2"+
		"\2\2\u009c\u08ba\3\2\2\2\u009e\u08bc\3\2\2\2\u00a0\u08c7\3\2\2\2\u00a2"+
		"\u08d2\3\2\2\2\u00a4\u0923\3\2\2\2\u00a6\u0925\3\2\2\2\u00a8\u093c\3\2"+
		"\2\2\u00aa\u093e\3\2\2\2\u00ac\u0946\3\2\2\2\u00ae\u094a\3\2\2\2\u00b0"+
		"\u0955\3\2\2\2\u00b2\u0960\3\2\2\2\u00b4\u0964\3\2\2\2\u00b6\u0966\3\2"+
		"\2\2\u00b8\u096e\3\2\2\2\u00ba\u0974\3\2\2\2\u00bc\u097a\3\2\2\2\u00be"+
		"\u097c\3\2\2\2\u00c0\u0984\3\2\2\2\u00c2\u0999\3\2\2\2\u00c4\u099c\3\2"+
		"\2\2\u00c6\u09b2\3\2\2\2\u00c8\u09b4\3\2\2\2\u00ca\u0acd\3\2\2\2\u00cc"+
		"\u0ad2\3\2\2\2\u00ce\u0ae0\3\2\2\2\u00d0\u0ae2\3\2\2\2\u00d2\u0ae7\3\2"+
		"\2\2\u00d4\u0af6\3\2\2\2\u00d6\u0af8\3\2\2\2\u00d8\u0afa\3\2\2\2\u00da"+
		"\u0afc\3\2\2\2\u00dc\u0aff\3\2\2\2\u00de\u0b03\3\2\2\2\u00e0\u0b12\3\2"+
		"\2\2\u00e2\u0b19\3\2\2\2\u00e4\u0b1b\3\2\2\2\u00e6\u0b1f\3\2\2\2\u00e8"+
		"\u0b30\3\2\2\2\u00ea\u0b32\3\2\2\2\u00ec\u0b3d\3\2\2\2\u00ee\u0b3f\3\2"+
		"\2\2\u00f0\u0b65\3\2\2\2\u00f2\u0b6d\3\2\2\2\u00f4\u0b7f\3\2\2\2\u00f6"+
		"\u0b81\3\2\2\2\u00f8\u0b89\3\2\2\2\u00fa\u0b94\3\2\2\2\u00fc\u0b96\3\2"+
		"\2\2\u00fe\u0b99\3\2\2\2\u0100\u0b9e\3\2\2\2\u0102\u0bb5\3\2\2\2\u0104"+
		"\u0bb7\3\2\2\2\u0106\u0bbf\3\2\2\2\u0108\u0bca\3\2\2\2\u010a\u0bcc\3\2"+
		"\2\2\u010c\u0bdc\3\2\2\2\u010e\u0bde\3\2\2\2\u0110\u0bec\3\2\2\2\u0112"+
		"\u0bee\3\2\2\2\u0114\u0c14\3\2\2\2\u0116\u0c16\3\2\2\2\u0118\u0c1a\3\2"+
		"\2\2\u011a\u0c23\3\2\2\2\u011c\u0c27\3\2\2\2\u011e\u0c38\3\2\2\2\u0120"+
		"\u0c3a\3\2\2\2\u0122\u0c52\3\2\2\2\u0124\u0c55\3\2\2\2\u0126\u0c5f\3\2"+
		"\2\2\u0128\u0c61\3\2\2\2\u012a\u0c63\3\2\2\2\u012c\u0c99\3\2\2\2\u012e"+
		"\u0c9b\3\2\2\2\u0130\u0c9d\3\2\2\2\u0132\u0cac\3\2\2\2\u0134\u0cae\3\2"+
		"\2\2\u0136\u0cb0\3\2\2\2\u0138\u0d29\3\2\2\2\u013a\u0d33\3\2\2\2\u013c"+
		"\u0d3b\3\2\2\2\u013e\u0d3d\3\2\2\2\u0140\u0d43\3\2\2\2\u0142\u0d46\3\2"+
		"\2\2\u0144\u0d4b\3\2\2\2\u0146\u0d5d\3\2\2\2\u0148\u0d5f\3\2\2\2\u014a"+
		"\u0d62\3\2\2\2\u014c\u0d65\3\2\2\2\u014e\u0d71\3\2\2\2\u0150\u0d73\3\2"+
		"\2\2\u0152\u0d75\3\2\2\2\u0154\u0d83\3\2\2\2\u0156\u0d85\3\2\2\2\u0158"+
		"\u0d98\3\2\2\2\u015a\u0da3\3\2\2\2";
	private static final String _serializedATNSegment1 =
		"\u015c\u0de2\3\2\2\2\u015e\u0de4\3\2\2\2\u0160\u0df4\3\2\2\2\u0162\u0dfc"+
		"\3\2\2\2\u0164\u0dfe\3\2\2\2\u0166\u0e02\3\2\2\2\u0168\u0e17\3\2\2\2\u016a"+
		"\u0e24\3\2\2\2\u016c\u0e32\3\2\2\2\u016e\u0e53\3\2\2\2\u0170\u0e55\3\2"+
		"\2\2\u0172\u0e6e\3\2\2\2\u0174\u0e71\3\2\2\2\u0176\u0e75\3\2\2\2\u0178"+
		"\u0e8e\3\2\2\2\u017a\u0e90\3\2\2\2\u017c\u0ea0\3\2\2\2\u017e\u0ea5\3\2"+
		"\2\2\u0180\u0ead\3\2\2\2\u0182\u0ebe\3\2\2\2\u0184\u0ec0\3\2\2\2\u0186"+
		"\u0ed0\3\2\2\2\u0188\u0ed3\3\2\2\2\u018a\u0eef\3\2\2\2\u018c\u0f0c\3\2"+
		"\2\2\u018e\u0f14\3\2\2\2\u0190\u0f16\3\2\2\2\u0192\u0f1e\3\2\2\2\u0194"+
		"\u0f2c\3\2\2\2\u0196\u0f58\3\2\2\2\u0198\u0f5a\3\2\2\2\u019a\u0f62\3\2"+
		"\2\2\u019c\u0f73\3\2\2\2\u019e\u0f81\3\2\2\2\u01a0\u0f8f\3\2\2\2\u01a2"+
		"\u0fa0\3\2\2\2\u01a4\u0fcd\3\2\2\2\u01a6\u0fcf\3\2\2\2\u01a8\u0ff6\3\2"+
		"\2\2\u01aa\u0ff8\3\2\2\2\u01ac\u1003\3\2\2\2\u01ae\u1005\3\2\2\2\u01b0"+
		"\u101d\3\2\2\2\u01b2\u101f\3\2\2\2\u01b4\u1024\3\2\2\2\u01b6\u1032\3\2"+
		"\2\2\u01b8\u1035\3\2\2\2\u01ba\u10a8\3\2\2\2\u01bc\u10aa\3\2\2\2\u01be"+
		"\u10b1\3\2\2\2\u01c0\u10c2\3\2\2\2\u01c2\u10db\3\2\2\2\u01c4\u10dd\3\2"+
		"\2\2\u01c6\u10df\3\2\2\2\u01c8\u10e8\3\2\2\2\u01ca\u10f5\3\2\2\2\u01cc"+
		"\u10f9\3\2\2\2\u01ce\u1101\3\2\2\2\u01d0\u1105\3\2\2\2\u01d2\u1122\3\2"+
		"\2\2\u01d4\u1124\3\2\2\2\u01d6\u1134\3\2\2\2\u01d8\u1141\3\2\2\2\u01da"+
		"\u114a\3\2\2\2\u01dc\u115a\3\2\2\2\u01de\u1162\3\2\2\2\u01e0\u1168\3\2"+
		"\2\2\u01e2\u1170\3\2\2\2\u01e4\u1180\3\2\2\2\u01e6\u118a\3\2\2\2\u01e8"+
		"\u118c\3\2\2\2\u01ea\u1197\3\2\2\2\u01ec\u11c8\3\2\2\2\u01ee\u11ca\3\2"+
		"\2\2\u01f0\u11d5\3\2\2\2\u01f2\u11d7\3\2\2\2\u01f4\u11db\3\2\2\2\u01f6"+
		"\u11e4\3\2\2\2\u01f8\u11e6\3\2\2\2\u01fa\u11fc\3\2\2\2\u01fc\u1204\3\2"+
		"\2\2\u01fe\u1208\3\2\2\2\u0200\u1214\3\2\2\2\u0202\u1216\3\2\2\2\u0204"+
		"\u1225\3\2\2\2\u0206\u1227\3\2\2\2\u0208\u1229\3\2\2\2\u020a\u122f\3\2"+
		"\2\2\u020c\u1240\3\2\2\2\u020e\u1242\3\2\2\2\u0210\u126f\3\2\2\2\u0212"+
		"\u1275\3\2\2\2\u0214\u1277\3\2\2\2\u0216\u1297\3\2\2\2\u0218\u12a1\3\2"+
		"\2\2\u021a\u12b1\3\2\2\2\u021c\u12b3\3\2\2\2\u021e\u12cf\3\2\2\2\u0220"+
		"\u12d6\3\2\2\2\u0222\u12d9\3\2\2\2\u0224\u12e4\3\2\2\2\u0226\u1316\3\2"+
		"\2\2\u0228\u1318\3\2\2\2\u022a\u1327\3\2\2\2\u022c\u132d\3\2\2\2\u022e"+
		"\u132f\3\2\2\2\u0230\u133a\3\2\2\2\u0232\u133c\3\2\2\2\u0234\u1341\3\2"+
		"\2\2\u0236\u1347\3\2\2\2\u0238\u134b\3\2\2\2\u023a\u134f\3\2\2\2\u023c"+
		"\u1356\3\2\2\2\u023e\u1358\3\2\2\2\u0240\u135a\3\2\2\2\u0242\u135c\3\2"+
		"\2\2\u0244\u136f\3\2\2\2\u0246\u1371\3\2\2\2\u0248\u1386\3\2\2\2\u024a"+
		"\u1394\3\2\2\2\u024c\u139f\3\2\2\2\u024e\u13ac\3\2\2\2\u0250\u13b3\3\2"+
		"\2\2\u0252\u13c1\3\2\2\2\u0254\u13d9\3\2\2\2\u0256\u13db\3\2\2\2\u0258"+
		"\u13e3\3\2\2\2\u025a\u13f1\3\2\2\2\u025c\u13f4\3\2\2\2\u025e\u13ff\3\2"+
		"\2\2\u0260\u1409\3\2\2\2\u0262\u1411\3\2\2\2\u0264\u141f\3\2\2\2\u0266"+
		"\u1429\3\2\2\2\u0268\u1433\3\2\2\2\u026a\u143d\3\2\2\2\u026c\u1448\3\2"+
		"\2\2\u026e\u1452\3\2\2\2\u0270\u145e\3\2\2\2\u0272\u1470\3\2\2\2\u0274"+
		"\u147a\3\2\2\2\u0276\u1482\3\2\2\2\u0278\u148f\3\2\2\2\u027a\u149a\3\2"+
		"\2\2\u027c\u14a4\3\2\2\2\u027e\u14ac\3\2\2\2\u0280\u14b9\3\2\2\2\u0282"+
		"\u14c6\3\2\2\2\u0284\u14cd\3\2\2\2\u0286\u14d9\3\2\2\2\u0288\u14e3\3\2"+
		"\2\2\u028a\u14ed\3\2\2\2\u028c\u14f7\3\2\2\2\u028e\u1503\3\2\2\2\u0290"+
		"\u150d\3\2\2\2\u0292\u1517\3\2\2\2\u0294\u151f\3\2\2\2\u0296\u1529\3\2"+
		"\2\2\u0298\u1531\3\2\2\2\u029a\u153d\3\2\2\2\u029c\u154a\3\2\2\2\u029e"+
		"\u1556\3\2\2\2\u02a0\u1560\3\2\2\2\u02a2\u156c\3\2\2\2\u02a4\u1576\3\2"+
		"\2\2\u02a6\u1585\3\2\2\2\u02a8\u158d\3\2\2\2\u02aa\u158f\3\2\2\2\u02ac"+
		"\u1592\3\2\2\2\u02ae\u1595\3\2\2\2\u02b0\u159d\3\2\2\2\u02b2\u15a1\3\2"+
		"\2\2\u02b4\u15ab\3\2\2\2\u02b6\u15cc\3\2\2\2\u02b8\u15ce\3\2\2\2\u02ba"+
		"\u15d6\3\2\2\2\u02bc\u15d8\3\2\2\2\u02be\u15da\3\2\2\2\u02c0\u15dc\3\2"+
		"\2\2\u02c2\u15f5\3\2\2\2\u02c4\u15f7\3\2\2\2\u02c6\u15fc\3\2\2\2\u02c8"+
		"\u160f\3\2\2\2\u02ca\u1616\3\2\2\2\u02cc\u1620\3\2\2\2\u02ce\u1630\3\2"+
		"\2\2\u02d0\u1632\3\2\2\2\u02d2\u1637\3\2\2\2\u02d4\u163b\3\2\2\2\u02d6"+
		"\u163e\3\2\2\2\u02d8\u1644\3\2\2\2\u02da\u164f\3\2\2\2\u02dc\u1651\3\2"+
		"\2\2\u02de\u1654\3\2\2\2\u02e0\u1657\3\2\2\2\u02e2\u1659\3\2\2\2\u02e4"+
		"\u165b\3\2\2\2\u02e6\u1660\3\2\2\2\u02e8\u1667\3\2\2\2\u02ea\u166b\3\2"+
		"\2\2\u02ec\u166d\3\2\2\2\u02ee\u1670\3\2\2\2\u02f0\u167d\3\2\2\2\u02f2"+
		"\u168a\3\2\2\2\u02f4\u168c\3\2\2\2\u02f6\u168e\3\2\2\2\u02f8\u1691\3\2"+
		"\2\2\u02fa\u1695\3\2\2\2\u02fc\u1697\3\2\2\2\u02fe\u1699\3\2\2\2\u0300"+
		"\u16ad\3\2\2\2\u0302\u17b0\3\2\2\2\u0304\u1800\3\2\2\2\u0306\u1802\3\2"+
		"\2\2\u0308\u180c\3\2\2\2\u030a\u1825\3\2\2\2\u030c\u1827\3\2\2\2\u030e"+
		"\u182e\3\2\2\2\u0310\u1830\3\2\2\2\u0312\u183b\3\2\2\2\u0314\u183f\3\2"+
		"\2\2\u0316\u1844\3\2\2\2\u0318\u1847\3\2\2\2\u031a\u184d\3\2\2\2\u031c"+
		"\u1857\3\2\2\2\u031e\u1865\3\2\2\2\u0320\u1869\3\2\2\2\u0322\u186c\3\2"+
		"\2\2\u0324\u1870\3\2\2\2\u0326\u1878\3\2\2\2\u0328\u187a\3\2\2\2\u032a"+
		"\u1881\3\2\2\2\u032c\u1883\3\2\2\2\u032e\u188e\3\2\2\2\u0330\u189c\3\2"+
		"\2\2\u0332\u18a8\3\2\2\2\u0334\u18b8\3\2\2\2\u0336\u18c2\3\2\2\2\u0338"+
		"\u18c4\3\2\2\2\u033a\u18ca\3\2\2\2\u033c\u18d6\3\2\2\2\u033e\u18d8\3\2"+
		"\2\2\u0340\u18e0\3\2\2\2\u0342\u18e8\3\2\2\2\u0344\u18f3\3\2\2\2\u0346"+
		"\u18f5\3\2\2\2\u0348\u1934\3\2\2\2\u034a\u193a\3\2\2\2\u034c\u194d\3\2"+
		"\2\2\u034e\u1953\3\2\2\2\u0350\u1955\3\2\2\2\u0352\u195a\3\2\2\2\u0354"+
		"\u1968\3\2\2\2\u0356\u197f\3\2\2\2\u0358\u1981\3\2\2\2\u035a\u1994\3\2"+
		"\2\2\u035c\u1996\3\2\2\2\u035e\u19a8\3\2\2\2\u0360\u19aa\3\2\2\2\u0362"+
		"\u19b8\3\2\2\2\u0364\u19c5\3\2\2\2\u0366\u19c7\3\2\2\2\u0368\u19cd\3\2"+
		"\2\2\u036a\u19d5\3\2\2\2\u036c\u19d7\3\2\2\2\u036e\u1aae\3\2\2\2\u0370"+
		"\u1acb\3\2\2\2\u0372\u1ada\3\2\2\2\u0374\u1adc\3\2\2\2\u0376\u1ae7\3\2"+
		"\2\2\u0378\u1af2\3\2\2\2\u037a\u1afd\3\2\2\2\u037c\u1aff\3\2\2\2\u037e"+
		"\u1b1e\3\2\2\2\u0380\u1b37\3\2\2\2\u0382\u1b3f\3\2\2\2\u0384\u1b43\3\2"+
		"\2\2\u0386\u1b45\3\2\2\2\u0388\u1b4a\3\2\2\2\u038a\u1b63\3\2\2\2\u038c"+
		"\u1b69\3\2\2\2\u038e\u1b6b\3\2\2\2\u0390\u1b77\3\2\2\2\u0392\u1b7d\3\2"+
		"\2\2\u0394\u1b81\3\2\2\2\u0396\u1b83\3\2\2\2\u0398\u1b8b\3\2\2\2\u039a"+
		"\u1b8f\3\2\2\2\u039c\u1bad\3\2\2\2\u039e\u1baf\3\2\2\2\u03a0\u1bc1\3\2"+
		"\2\2\u03a2\u1bc3\3\2\2\2\u03a4\u1bcc\3\2\2\2\u03a6\u1bd7\3\2\2\2\u03a8"+
		"\u1bd9\3\2\2\2\u03aa\u1bdc\3\2\2\2\u03ac\u1bdf\3\2\2\2\u03ae\u1be7\3\2"+
		"\2\2\u03b0\u1bf9\3\2\2\2\u03b2\u1bfb\3\2\2\2\u03b4\u1c00\3\2\2\2\u03b6"+
		"\u1c0d\3\2\2\2\u03b8\u1c1e\3\2\2\2\u03ba\u1c24\3\2\2\2\u03bc\u1c26\3\2"+
		"\2\2\u03be\u1c2d\3\2\2\2\u03c0\u1c34\3\2\2\2\u03c2\u1c40\3\2\2\2\u03c4"+
		"\u1c42\3\2\2\2\u03c6\u1c45\3\2\2\2\u03c8\u1c4d\3\2\2\2\u03ca\u1c52\3\2"+
		"\2\2\u03cc\u1c5a\3\2\2\2\u03ce\u1c5f\3\2\2\2\u03d0\u1c69\3\2\2\2\u03d2"+
		"\u1c79\3\2\2\2\u03d4\u1c7b\3\2\2\2\u03d6\u1c97\3\2\2\2\u03d8\u1c99\3\2"+
		"\2\2\u03da\u1ca1\3\2\2\2\u03dc\u1ca6\3\2\2\2\u03de\u1ca8\3\2\2\2\u03e0"+
		"\u1cac\3\2\2\2\u03e2\u1cc1\3\2\2\2\u03e4\u1cc7\3\2\2\2\u03e6\u1cd0\3\2"+
		"\2\2\u03e8\u1cd2\3\2\2\2\u03ea\u1cd8\3\2\2\2\u03ec\u1cda\3\2\2\2\u03ee"+
		"\u1ce9\3\2\2\2\u03f0\u1ceb\3\2\2\2\u03f2\u1cef\3\2\2\2\u03f4\u1d0c\3\2"+
		"\2\2\u03f6\u1d19\3\2\2\2\u03f8\u1d1b\3\2\2\2\u03fa\u1d20\3\2\2\2\u03fc"+
		"\u1d22\3\2\2\2\u03fe\u1d26\3\2\2\2\u0400\u1d3d\3\2\2\2\u0402\u1d45\3\2"+
		"\2\2\u0404\u1d53\3\2\2\2\u0406\u1d55\3\2\2\2\u0408\u1d72\3\2\2\2\u040a"+
		"\u1dae\3\2\2\2\u040c\u1db0\3\2\2\2\u040e\u1db8\3\2\2\2\u0410\u1dbf\3\2"+
		"\2\2\u0412\u1dc4\3\2\2\2\u0414\u1dd1\3\2\2\2\u0416\u1dd8\3\2\2\2\u0418"+
		"\u1dde\3\2\2\2\u041a\u1de0\3\2\2\2\u041c\u1de2\3\2\2\2\u041e\u1de8\3\2"+
		"\2\2\u0420\u1dea\3\2\2\2\u0422\u1df5\3\2\2\2\u0424\u1dff\3\2\2\2\u0426"+
		"\u1e0e\3\2\2\2\u0428\u1e15\3\2\2\2\u042a\u1e1e\3\2\2\2\u042c\u1e20\3\2"+
		"\2\2\u042e\u1e2f\3\2\2\2\u0430\u1e38\3\2\2\2\u0432\u1e6d\3\2\2\2\u0434"+
		"\u1e6f\3\2\2\2\u0436\u1e74\3\2\2\2\u0438\u1e9d\3\2\2\2\u043a\u1e9f\3\2"+
		"\2\2\u043c\u1ea6\3\2\2\2\u043e\u1ea8\3\2\2\2\u0440\u1eab\3\2\2\2\u0442"+
		"\u1eb0\3\2\2\2\u0444\u1eb4\3\2\2\2\u0446\u1ec1\3\2\2\2\u0448\u1ec8\3\2"+
		"\2\2\u044a\u1ed2\3\2\2\2\u044c\u1ed4\3\2\2\2\u044e\u1ed8\3\2\2\2\u0450"+
		"\u1ee4\3\2\2\2\u0452\u1eec\3\2\2\2\u0454\u1eee\3\2\2\2\u0456\u1ef3\3\2"+
		"\2\2\u0458\u1f01\3\2\2\2\u045a\u1f19\3\2\2\2\u045c\u1f2a\3\2\2\2\u045e"+
		"\u1f32\3\2\2\2\u0460\u1f34\3\2\2\2\u0462\u1f3e\3\2\2\2\u0464\u1f40\3\2"+
		"\2\2\u0466\u1f42\3\2\2\2\u0468\u1f4d\3\2\2\2\u046a\u1f57\3\2\2\2\u046c"+
		"\u1f59\3\2\2\2\u046e\u1f6d\3\2\2\2\u0470\u1f8f\3\2\2\2\u0472\u1f91\3\2"+
		"\2\2\u0474\u1f93\3\2\2\2\u0476\u1f99\3\2\2\2\u0478\u1fa4\3\2\2\2\u047a"+
		"\u1fa8\3\2\2\2\u047c\u1faa\3\2\2\2\u047e\u1fbd\3\2\2\2\u0480\u1fe2\3\2"+
		"\2\2\u0482\u1fe7\3\2\2\2\u0484\u1fe9\3\2\2\2\u0486\u1feb\3\2\2\2\u0488"+
		"\u1fed\3\2\2\2\u048a\u1ff6\3\2\2\2\u048c\u2007\3\2\2\2\u048e\u201e\3\2"+
		"\2\2\u0490\u2020\3\2\2\2\u0492\u2022\3\2\2\2\u0494\u202d\3\2\2\2\u0496"+
		"\u2040\3\2\2\2\u0498\u204c\3\2\2\2\u049a\u204f\3\2\2\2\u049c\u205e\3\2"+
		"\2\2\u049e\u2073\3\2\2\2\u04a0\u2075\3\2\2\2\u04a2\u2078\3\2\2\2\u04a4"+
		"\u2083\3\2\2\2\u04a6\u2087\3\2\2\2\u04a8\u209d\3\2\2\2\u04aa\u209f\3\2"+
		"\2\2\u04ac\u20a4\3\2\2\2\u04ae\u20d3\3\2\2\2\u04b0\u20d8\3\2\2\2\u04b2"+
		"\u2122\3\2\2\2\u04b4\u2129\3\2\2\2\u04b6\u212b\3\2\2\2\u04b8\u215a\3\2"+
		"\2\2\u04ba\u215c\3\2\2\2\u04bc\u2167\3\2\2\2\u04be\u2173\3\2\2\2\u04c0"+
		"\u217a\3\2\2\2\u04c2\u2180\3\2\2\2\u04c4\u2186\3\2\2\2\u04c6\u2188\3\2"+
		"\2\2\u04c8\u2192\3\2\2\2\u04ca\u219c\3\2\2\2\u04cc\u21a9\3\2\2\2\u04ce"+
		"\u21ab\3\2\2\2\u04d0\u21ae\3\2\2\2\u04d2\u21c1\3\2\2\2\u04d4\u21c3\3\2"+
		"\2\2\u04d6\u21f3\3\2\2\2\u04d8\u21fb\3\2\2\2\u04da\u21ff\3\2\2\2\u04dc"+
		"\u2201\3\2\2\2\u04de\u2208\3\2\2\2\u04e0\u220a\3\2\2\2\u04e2\u220c\3\2"+
		"\2\2\u04e4\u220e\3\2\2\2\u04e6\u2225\3\2\2\2\u04e8\u2227\3\2\2\2\u04ea"+
		"\u222b\3\2\2\2\u04ec\u2238\3\2\2\2\u04ee\u223a\3\2\2\2\u04f0\u223d\3\2"+
		"\2\2\u04f2\u2242\3\2\2\2\u04f4\u2247\3\2\2\2\u04f6\u224d\3\2\2\2\u04f8"+
		"\u2250\3\2\2\2\u04fa\u225b\3\2\2\2\u04fc\u225f\3\2\2\2\u04fe\u226c\3\2"+
		"\2\2\u0500\u226e\3\2\2\2\u0502\u2271\3\2\2\2\u0504\u22a9\3\2\2\2\u0506"+
		"\u22c6\3\2\2\2\u0508\u22d5\3\2\2\2\u050a\u22d7\3\2\2\2\u050c\u22e0\3\2"+
		"\2\2\u050e\u22e2\3\2\2\2\u0510\u22ea\3\2\2\2\u0512\u22ec\3\2\2\2\u0514"+
		"\u22ef\3\2\2\2\u0516\u22f3\3\2\2\2\u0518\u22fa\3\2\2\2\u051a\u22fc\3\2"+
		"\2\2\u051c\u231a\3\2\2\2\u051e\u231c\3\2\2\2\u0520\u2346\3\2\2\2\u0522"+
		"\u234d\3\2\2\2\u0524\u234f\3\2\2\2\u0526\u2357\3\2\2\2\u0528\u2361\3\2"+
		"\2\2\u052a\u2363\3\2\2\2\u052c\u236b\3\2\2\2\u052e\u2370\3\2\2\2\u0530"+
		"\u239a\3\2\2\2\u0532\u239d\3\2\2\2\u0534\u23a2\3\2\2\2\u0536\u23aa\3\2"+
		"\2\2\u0538\u2401\3\2\2\2\u053a\u053b\78\2\2\u053b\u053c\5F$\2\u053c\u053e"+
		"\7A\2\2\u053d\u053f\5H%\2\u053e\u053d\3\2\2\2\u053e\u053f\3\2\2\2\u053f"+
		"\u0540\3\2\2\2\u0540\u0555\5\u02e6\u0174\2\u0541\u0556\5J&\2\u0542\u0543"+
		"\7\u013a\2\2\u0543\u0548\5\u03d0\u01e9\2\u0544\u0545\7#\2\2\u0545\u0546"+
		"\5\f\7\2\u0546\u0547\7$\2\2\u0547\u0549\3\2\2\2\u0548\u0544\3\2\2\2\u0548"+
		"\u0549\3\2\2\2\u0549\u0556\3\2\2\2\u054a\u054b\7\u00d4\2\2\u054b\u054c"+
		"\7\u013a\2\2\u054c\u0551\5\u034e\u01a8\2\u054d\u054e\7#\2\2\u054e\u054f"+
		"\5\f\7\2\u054f\u0550\7$\2\2\u0550\u0552\3\2\2\2\u0551\u054d\3\2\2\2\u0551"+
		"\u0552\3\2\2\2\u0552\u0553\3\2\2\2\u0553\u0554\5\6\4\2\u0554\u0556\3\2"+
		"\2\2\u0555\u0541\3\2\2\2\u0555\u0542\3\2\2\2\u0555\u054a\3\2\2\2\u0556"+
		"\u0557\3\2\2\2\u0557\u0559\5p9\2\u0558\u055a\5r:\2\u0559\u0558\3\2\2\2"+
		"\u0559\u055a\3\2\2\2\u055a\u055c\3\2\2\2\u055b\u055d\5\34\17\2\u055c\u055b"+
		"\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u055f\3\2\2\2\u055e\u0560\5\32\16\2"+
		"\u055f\u055e\3\2\2\2\u055f\u0560\3\2\2\2\u0560\u0562\3\2\2\2\u0561\u0563"+
		"\5\30\r\2\u0562\u0561\3\2\2\2\u0562\u0563\3\2\2\2\u0563\u0565\3\2\2\2"+
		"\u0564\u0566\5\26\f\2\u0565\u0564\3\2\2\2\u0565\u0566\3\2\2\2\u0566\u056c"+
		"\3\2\2\2\u0567\u0568\7d\2\2\u0568\u056a\5\u04ac\u0257\2\u0569\u056b\5"+
		"\24\13\2\u056a\u0569\3\2\2\2\u056a\u056b\3\2\2\2\u056b\u056d\3\2\2\2\u056c"+
		"\u0567\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u0574\3\2\2\2\u056e\u056f\7\u00f9"+
		"\2\2\u056f\u0570\5\u02ec\u0177\2\u0570\u0572\5\4\3\2\u0571\u0573\5\24"+
		"\13\2\u0572\u0571\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0575\3\2\2\2\u0574"+
		"\u056e\3\2\2\2\u0574\u0575\3\2\2\2\u0575\3\3\2\2\2\u0576\u0577\7#\2\2"+
		"\u0577\u0578\5\u0374\u01bb\2\u0578\u0579\7$\2\2\u0579\5\3\2\2\2\u057a"+
		"\u057b\7i\2\2\u057b\u057c\7P\2\2\u057c\u057d\7Q\2\2\u057d\u057e\7#\2\2"+
		"\u057e\u057f\5\b\5\2\u057f\u0580\7$\2\2\u0580\u0595\3\2\2\2\u0581\u0582"+
		"\7i\2\2\u0582\u0583\7P\2\2\u0583\u0584\7t\2\2\u0584\u0585\7#\2\2\u0585"+
		"\u0586\5\u0374\u01bb\2\u0586\u0587\7$\2\2\u0587\u0595\3\2\2\2\u0588\u0589"+
		"\7i\2\2\u0589\u058a\7P\2\2\u058a\u058b\7Y\2\2\u058b\u058c\7#\2\2\u058c"+
		"\u058d\5\u0374\u01bb\2\u058d\u058e\7$\2\2\u058e\u058f\7j\2\2\u058f\u0590"+
		"\7#\2\2\u0590\u0591\5\u0374\u01bb\2\u0591\u0592\7$\2\2\u0592\u0595\3\2"+
		"\2\2\u0593\u0595\7\u0098\2\2\u0594\u057a\3\2\2\2\u0594\u0581\3\2\2\2\u0594"+
		"\u0588\3\2\2\2\u0594\u0593\3\2\2\2\u0595\7\3\2\2\2\u0596\u059b\5\n\6\2"+
		"\u0597\u0598\7)\2\2\u0598\u059a\5\n\6\2\u0599\u0597\3\2\2\2\u059a\u059d"+
		"\3\2\2\2\u059b\u0599\3\2\2\2\u059b\u059c\3\2\2\2\u059c\t\3\2\2\2\u059d"+
		"\u059b\3\2\2\2\u059e\u059f\5\u0418\u020d\2\u059f\u05a0\7\u0224\2\2\u05a0"+
		"\13\3\2\2\2\u05a1\u05a6\5\16\b\2\u05a2\u05a3\7)\2\2\u05a3\u05a5\5\16\b"+
		"\2\u05a4\u05a2\3\2\2\2\u05a5\u05a8\3\2\2\2\u05a6\u05a4\3\2\2\2\u05a6\u05a7"+
		"\3\2\2\2\u05a7\r\3\2\2\2\u05a8\u05a6\3\2\2\2\u05a9\u05ac\5\20\t\2\u05aa"+
		"\u05ac\5f\64\2\u05ab\u05a9\3\2\2\2\u05ab\u05aa\3\2\2\2\u05ac\17\3\2\2"+
		"\2\u05ad\u05b0\5\u0350\u01a9\2\u05ae\u05af\7Q\2\2\u05af\u05b1\7\u01f1"+
		"\2\2\u05b0\u05ae\3\2\2\2\u05b0\u05b1\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2"+
		"\u05b3\5\22\n\2\u05b3\21\3\2\2\2\u05b4\u05b6\5P)\2\u05b5\u05b4\3\2\2\2"+
		"\u05b6\u05b9\3\2\2\2\u05b7\u05b5\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8\23"+
		"\3\2\2\2\u05b9\u05b7\3\2\2\2\u05ba\u05bb\7Q\2\2\u05bb\u05c0\7\u00f1\2"+
		"\2\u05bc\u05bd\7Q\2\2\u05bd\u05be\7\u00dd\2\2\u05be\u05c0\7\u00f1\2\2"+
		"\u05bf\u05ba\3\2\2\2\u05bf\u05bc\3\2\2\2\u05c0\25\3\2\2\2\u05c1\u05c2"+
		"\7\u012f\2\2\u05c2\u05c3\5\u02ec\u0177\2\u05c3\27\3\2\2\2\u05c4\u05c5"+
		"\7e\2\2\u05c5\u05cb\7\u0081\2\2\u05c6\u05cc\7:\2\2\u05c7\u05c8\7\67\2"+
		"\2\u05c8\u05cc\7\u00e3\2\2\u05c9\u05ca\7\u009e\2\2\u05ca\u05cc\7\u00e3"+
		"\2\2\u05cb\u05c6\3\2\2\2\u05cb\u05c7\3\2\2\2\u05cb\u05c9\3\2\2\2\u05cc"+
		"\31\3\2\2\2\u05cd\u05ce\7Q\2\2\u05ce\u05d2\5\u03fc\u01ff\2\u05cf\u05d0"+
		"\7\u0138\2\2\u05d0\u05d2\7\u0117\2\2\u05d1\u05cd\3\2\2\2\u05d1\u05cf\3"+
		"\2\2\2\u05d2\33\3\2\2\2\u05d3\u05d4\7b\2\2\u05d4\u05d5\5\36\20\2\u05d5"+
		"\35\3\2\2\2\u05d6\u05da\5\u02da\u016e\2\u05d7\u05da\5\u02e0\u0171\2\u05d8"+
		"\u05da\5\u041a\u020e\2\u05d9\u05d6\3\2\2\2\u05d9\u05d7\3\2\2\2\u05d9\u05d8"+
		"\3\2\2\2\u05da\37\3\2\2\2\u05db\u05dc\78\2\2\u05dc\u05dd\5|?\2\u05dd\u05de"+
		"\7C\2\2\u05de\u05e2\5~@\2\u05df\u05e0\5\u0080A\2\u05e0\u05e1\5\u02f4\u017b"+
		"\2\u05e1\u05e3\3\2\2\2\u05e2\u05df\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u05e4"+
		"\3\2\2\2\u05e4\u05e5\7e\2\2\u05e5\u05e6\5\u0082B\2\u05e6\u05e8\5\u02e6"+
		"\u0174\2\u05e7\u05e9\5&\24\2\u05e8\u05e7\3\2\2\2\u05e8\u05e9\3\2\2\2\u05e9"+
		"\u05ea\3\2\2\2\u05ea\u05eb\7#\2\2\u05eb\u05ec\5\u03f2\u01fa\2\u05ec\u05ee"+
		"\7$\2\2\u05ed\u05ef\5\"\22\2\u05ee\u05ed\3\2\2\2\u05ee\u05ef\3\2\2\2\u05ef"+
		"\u05f2\3\2\2\2\u05f0\u05f1\7Q\2\2\u05f1\u05f3\5\u03fc\u01ff\2\u05f2\u05f0"+
		"\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3\u05f5\3\2\2\2\u05f4\u05f6\5\26\f\2"+
		"\u05f5\u05f4\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05f8\3\2\2\2\u05f7\u05f9"+
		"\5\u050e\u0288\2\u05f8\u05f7\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9!\3\2\2"+
		"\2\u05fa\u05fb\7\u010b\2\2\u05fb\u05fc\7#\2\2\u05fc\u05fd\5$\23\2\u05fd"+
		"\u05fe\7$\2\2\u05fe#\3\2\2\2\u05ff\u0604\5\u03f6\u01fc\2\u0600\u0601\7"+
		")\2\2\u0601\u0603\5\u03f6\u01fc\2\u0602\u0600\3\2\2\2\u0603\u0606\3\2"+
		"\2\2\u0604\u0602\3\2\2\2\u0604\u0605\3\2\2\2\u0605%\3\2\2\2\u0606\u0604"+
		"\3\2\2\2\u0607\u0608\7b\2\2\u0608\u0609\5\36\20\2\u0609\'\3\2\2\2\u060a"+
		"\u060b\78\2\2\u060b\u060c\7\u00f2\2\2\u060c\u060e\5\u02ec\u0177\2\u060d"+
		"\u060f\7Q\2\2\u060e\u060d\3\2\2\2\u060e\u060f\3\2\2\2\u060f\u0613\3\2"+
		"\2\2\u0610\u0612\5\62\32\2\u0611\u0610\3\2\2\2\u0612\u0615\3\2\2\2\u0613"+
		"\u0611\3\2\2\2\u0613\u0614\3\2\2\2\u0614)\3\2\2\2\u0615\u0613\3\2\2\2"+
		"\u0616\u0619\78\2\2\u0617\u0618\7l\2\2\u0618\u061a\7\u01ed\2\2\u0619\u0617"+
		"\3\2\2\2\u0619\u061a\3\2\2\2\u061a\u061c\3\2\2\2\u061b\u061d\t\2\2\2\u061c"+
		"\u061b\3\2\2\2\u061c\u061d\3\2\2\2\u061d\u061f\3\2\2\2\u061e\u0620\7\u013d"+
		"\2\2\u061f\u061e\3\2\2\2\u061f\u0620\3\2\2\2\u0620\u0621\3\2\2\2\u0621"+
		"\u0622\7N\2\2\u0622\u062f\5\u034e\u01a8\2\u0623\u062c\7#\2\2\u0624\u0629"+
		"\5,\27\2\u0625\u0626\7)\2\2\u0626\u0628\5,\27\2\u0627\u0625\3\2\2\2\u0628"+
		"\u062b\3\2\2\2\u0629\u0627\3\2\2\2\u0629\u062a\3\2\2\2\u062a\u062d\3\2"+
		"\2\2\u062b\u0629\3\2\2\2\u062c\u0624\3\2\2\2\u062c\u062d\3\2\2\2\u062d"+
		"\u062e\3\2\2\2\u062e\u0630\7$\2\2\u062f\u0623\3\2\2\2\u062f\u0630\3\2"+
		"\2\2\u0630\u0633\3\2\2\2\u0631\u0632\7Q\2\2\u0632\u0634\5\u03fc\u01ff"+
		"\2\u0633\u0631\3\2\2\2\u0633\u0634\3\2\2\2\u0634\u0635\3\2\2\2\u0635\u0636"+
		"\7d\2\2\u0636\u063d\5\u04ac\u0257\2\u0637\u0639\7Q\2\2\u0638\u063a\t\3"+
		"\2\2\u0639\u0638\3\2\2\2\u0639\u063a\3\2\2\2\u063a\u063b\3\2\2\2\u063b"+
		"\u063c\7\u00d9\2\2\u063c\u063e\7\u00de\2\2\u063d\u0637\3\2\2\2\u063d\u063e"+
		"\3\2\2\2\u063e+\3\2\2\2\u063f\u0644\5.\30\2\u0640\u0641\7)\2\2\u0641\u0643"+
		"\5.\30\2\u0642\u0640\3\2\2\2\u0643\u0646\3\2\2\2\u0644\u0642\3\2\2\2\u0644"+
		"\u0645\3\2\2\2\u0645-\3\2\2\2\u0646\u0644\3\2\2\2\u0647\u0648\5\u0350"+
		"\u01a9\2\u0648/\3\2\2\2\u0649\u064a\7:\2\2\u064a\u064d\7\u00f2\2\2\u064b"+
		"\u064c\7f\2\2\u064c\u064e\7r\2\2\u064d\u064b\3\2\2\2\u064d\u064e\3\2\2"+
		"\2\u064e\u064f\3\2\2\2\u064f\u0650\5\u02ec\u0177\2\u0650\61\3\2\2\2\u0651"+
		"\u0653\5\64\33\2\u0652\u0654\7\33\2\2\u0653\u0652\3\2\2\2\u0653\u0654"+
		"\3\2\2\2\u0654\u0658\3\2\2\2\u0655\u0659\5\u0414\u020b\2\u0656\u0659\5"+
		"\u0416\u020c\2\u0657\u0659\7\u0098\2\2\u0658\u0655\3\2\2\2\u0658\u0656"+
		"\3\2\2\2\u0658\u0657\3\2\2\2\u0659\63\3\2\2\2\u065a\u0663\5\u02da\u016e"+
		"\2\u065b\u065c\7\u01ca\2\2\u065c\u0663\7~\2\2\u065d\u0663\7\u01c3\2\2"+
		"\u065e\u0663\7\u01d0\2\2\u065f\u0663\7\u011b\2\2\u0660\u0663\7\u012f\2"+
		"\2\u0661\u0663\7\u020b\2\2\u0662\u065a\3\2\2\2\u0662\u065b\3\2\2\2\u0662"+
		"\u065d\3\2\2\2\u0662\u065e\3\2\2\2\u0662\u065f\3\2\2\2\u0662\u0660\3\2"+
		"\2\2\u0662\u0661\3\2\2\2\u0663\65\3\2\2\2\u0664\u0665\79\2\2\u0665\u067a"+
		"\7A\2\2\u0666\u0667\5\u0084C\2\u0667\u0668\5\u0082B\2\u0668\u0669\5\u0098"+
		"M\2\u0669\u066a\5\u0088E\2\u066a\u067b\3\2\2\2\u066b\u066c\7u\2\2\u066c"+
		"\u066d\7t\2\2\u066d\u066e\7\u012f\2\2\u066e\u0672\5\u0098M\2\u066f\u0670"+
		"\7\u011a\2\2\u0670\u0671\7z\2\2\u0671\u0673\5\u0466\u0234\2\u0672\u066f"+
		"\3\2\2\2\u0672\u0673\3\2\2\2\u0673\u0674\3\2\2\2\u0674\u0675\7@\2\2\u0675"+
		"\u0676\7\u012f\2\2\u0676\u0678\5\u02ec\u0177\2\u0677\u0679\7\u018d\2\2"+
		"\u0678\u0677\3\2\2\2\u0678\u0679\3\2\2\2\u0679\u067b\3\2\2\2\u067a\u0666"+
		"\3\2\2\2\u067a\u066b\3\2\2\2\u067b\67\3\2\2\2\u067c\u067d\79\2\2\u067d"+
		"\u0682\7C\2\2\u067e\u0683\5\u00bc_\2\u067f\u0680\7u\2\2\u0680\u0681\7"+
		"t\2\2\u0681\u0683\7\u012f\2\2\u0682\u067e\3\2\2\2\u0682\u067f\3\2\2\2"+
		"\u0683\u0684\3\2\2\2\u0684\u0685\5\u02f4\u017b\2\u0685\u0686\5\u008cG"+
		"\2\u06869\3\2\2\2\u0687\u0688\7:\2\2\u0688\u0689\7A\2\2\u0689\u068a\5"+
		"\u0084C\2\u068a\u068c\5\u02ee\u0178\2\u068b\u068d\5<\37\2\u068c\u068b"+
		"\3\2\2\2\u068c\u068d\3\2\2\2\u068d;\3\2\2\2\u068e\u068f\t\4\2\2\u068f"+
		"=\3\2\2\2\u0690\u0691\7:\2\2\u0691\u0692\7C\2\2\u0692\u0693\5~@\2\u0693"+
		"\u0694\5\u00bc_\2\u0694\u0696\5\u00be`\2\u0695\u0697\5@!\2\u0696\u0695"+
		"\3\2\2\2\u0696\u0697\3\2\2\2\u0697?\3\2\2\2\u0698\u0699\t\4\2\2\u0699"+
		"A\3\2\2\2\u069a\u069c\7;\2\2\u069b\u069d\7A\2\2\u069c\u069b\3\2\2\2\u069c"+
		"\u069d\3\2\2\2\u069d\u069e\3\2\2\2\u069e\u069f\5\u0082B\2\u069f\u06a1"+
		"\5\u0096L\2\u06a0\u06a2\5D#\2\u06a1\u06a0\3\2\2\2\u06a1\u06a2\3\2\2\2"+
		"\u06a2\u06a4\3\2\2\2\u06a3\u06a5\5<\37\2\u06a4\u06a3\3\2\2\2\u06a4\u06a5"+
		"\3\2\2\2\u06a5C\3\2\2\2\u06a6\u06a7\7\u01aa\2\2\u06a7\u06ab\7\u0103\2"+
		"\2\u06a8\u06a9\7\u0123\2\2\u06a9\u06ab\7\u0103\2\2\u06aa\u06a6\3\2\2\2"+
		"\u06aa\u06a8\3\2\2\2\u06abE\3\2\2\2\u06ac\u06ae\t\5\2\2\u06ad\u06ac\3"+
		"\2\2\2\u06ad\u06ae\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06b2\t\2\2\2\u06b0"+
		"\u06b2\7\u0133\2\2\u06b1\u06ad\3\2\2\2\u06b1\u06b0\3\2\2\2\u06b1\u06b2"+
		"\3\2\2\2\u06b2G\3\2\2\2\u06b3\u06b4\7f\2\2\u06b4\u06b5\7n\2\2\u06b5\u06b6"+
		"\7r\2\2\u06b6I\3\2\2\2\u06b7\u06c0\7#\2\2\u06b8\u06bd\5L\'\2\u06b9\u06ba"+
		"\7)\2\2\u06ba\u06bc\5L\'\2\u06bb\u06b9\3\2\2\2\u06bc\u06bf\3\2\2\2\u06bd"+
		"\u06bb\3\2\2\2\u06bd\u06be\3\2\2\2\u06be\u06c1\3\2\2\2\u06bf\u06bd\3\2"+
		"\2\2\u06c0\u06b8\3\2\2\2\u06c0\u06c1\3\2\2\2\u06c1\u06c2\3\2\2\2\u06c2"+
		"\u06c3\7$\2\2\u06c3K\3\2\2\2\u06c4\u06cf\5N(\2\u06c5\u06cf\5f\64\2\u06c6"+
		"\u06c7\7w\2\2\u06c7\u06cb\5\u02e6\u0174\2\u06c8\u06ca\5d\63\2\u06c9\u06c8"+
		"\3\2\2\2\u06ca\u06cd\3\2\2\2\u06cb\u06c9\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc"+
		"\u06cf\3\2\2\2\u06cd\u06cb\3\2\2\2\u06ce\u06c4\3\2\2\2\u06ce\u06c5\3\2"+
		"\2\2\u06ce\u06c6\3\2\2\2\u06cfM\3\2\2\2\u06d0\u06d1\5\u02e8\u0175\2\u06d1"+
		"\u06d3\5\u0408\u0205\2\u06d2\u06d4\5\u03ce\u01e8\2\u06d3\u06d2\3\2\2\2"+
		"\u06d3\u06d4\3\2\2\2\u06d4\u06d8\3\2\2\2\u06d5\u06d7\5P)\2\u06d6\u06d5"+
		"\3\2\2\2\u06d7\u06da\3\2\2\2\u06d8\u06d6\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9"+
		"O\3\2\2\2\u06da\u06d8\3\2\2\2\u06db\u06dd\5R*\2\u06dc\u06db\3\2\2\2\u06dc"+
		"\u06dd\3\2\2\2\u06dd\u06de\3\2\2\2\u06de\u06df\5T+\2\u06df\u06e0\5b\62"+
		"\2\u06e0Q\3\2\2\2\u06e1\u06e2\7D\2\2\u06e2\u06e3\5\u0410\u0209\2\u06e3"+
		"S\3\2\2\2\u06e4\u06e6\7n\2\2\u06e5\u06e4\3\2\2\2\u06e5\u06e6\3\2\2\2\u06e6"+
		"\u06e7\3\2\2\2\u06e7\u071c\7o\2\2\u06e8\u071c\5V,\2\u06e9\u06ea\7\u0098"+
		"\2\2\u06ea\u071c\5X-\2\u06eb\u06ec\7\u00da\2\2\u06ec\u06ed\7\u00d7\2\2"+
		"\u06ed\u06ee\7d\2\2\u06ee\u06ef\7#\2\2\u06ef\u06f0\5\u0300\u0181\2\u06f0"+
		"\u06f1\7$\2\2\u06f1\u06f2\7\u0216\2\2\u06f2\u071c\3\2\2\2\u06f3\u06f7"+
		"\7\u00da\2\2\u06f4\u06f8\7\u00d7\2\2\u06f5\u06f6\7z\2\2\u06f6\u06f8\7"+
		"\u0098\2\2\u06f7\u06f4\3\2\2\2\u06f7\u06f5\3\2\2\2\u06f8\u06f9\3\2\2\2"+
		"\u06f9\u06fa\7d\2\2\u06fa\u06ff\7\u0103\2\2\u06fb\u06fc\7#\2\2\u06fc\u06fd"+
		"\5Z.\2\u06fd\u06fe\7$\2\2\u06fe\u0700\3\2\2\2\u06ff\u06fb\3\2\2\2\u06ff"+
		"\u0700\3\2\2\2\u0700\u071c\3\2\2\2\u0701\u0702\7F\2\2\u0702\u071c\5^\60"+
		"\2\u0703\u0704\5\u02f8\u017d\2\u0704\u0705\5^\60\2\u0705\u071c\3\2\2\2"+
		"\u0706\u0707\7\u00e1\2\2\u0707\u0709\5\u02e6\u0174\2\u0708\u070a\5\u02f0"+
		"\u0179\2\u0709\u0708\3\2\2\2\u0709\u070a\3\2\2\2\u070a\u0711\3\2\2\2\u070b"+
		"\u070c\7\u0111\2\2\u070c\u0712\7\\\2\2\u070d\u070e\7\u0111\2\2\u070e\u0712"+
		"\7\u011c\2\2\u070f\u0710\7\u0111\2\2\u0710\u0712\7\u012c\2\2\u0711\u070b"+
		"\3\2\2\2\u0711\u070d\3\2\2\2\u0711\u070f\3\2\2\2\u0711\u0712\3\2\2\2\u0712"+
		"\u0718\3\2\2\2\u0713\u0714\7e\2\2\u0714\u0715\t\6\2\2\u0715\u0717\5`\61"+
		"\2\u0716\u0713\3\2\2\2\u0717\u071a\3\2\2\2\u0718\u0716\3\2\2\2\u0718\u0719"+
		"\3\2\2\2\u0719\u071c\3\2\2\2\u071a\u0718\3\2\2\2\u071b\u06e5\3\2\2\2\u071b"+
		"\u06e8\3\2\2\2\u071b\u06e9\3\2\2\2\u071b\u06eb\3\2\2\2\u071b\u06f3\3\2"+
		"\2\2\u071b\u0701\3\2\2\2\u071b\u0703\3\2\2\2\u071b\u0706\3\2\2\2\u071c"+
		"U\3\2\2\2\u071d\u071e\7\u00d9\2\2\u071e\u0721\5\u0300\u0181\2\u071f\u0720"+
		"\7\u00dd\2\2\u0720\u0722\7\u0108\2\2\u0721\u071f\3\2\2\2\u0721\u0722\3"+
		"\2\2\2\u0722W\3\2\2\2\u0723\u0726\7\u00b6\2\2\u0724\u0726\5\u0300\u0181"+
		"\2\u0725\u0723\3\2\2\2\u0725\u0724\3\2\2\2\u0726Y\3\2\2\2\u0727\u0729"+
		"\5\\/\2\u0728\u0727\3\2\2\2\u0729\u072a\3\2\2\2\u072a\u0728\3\2\2\2\u072a"+
		"\u072b\3\2\2\2\u072b[\3\2\2\2\u072c\u072e\7\u00e4\2\2\u072d\u072f\7Q\2"+
		"\2\u072e\u072d\3\2\2\2\u072e\u072f\3\2\2\2\u072f\u0730\3\2\2\2\u0730\u0746"+
		"\7\u0224\2\2\u0731\u0733\7\u0106\2\2\u0732\u0734\7z\2\2\u0733\u0732\3"+
		"\2\2\2\u0733\u0734\3\2\2\2\u0734\u0735\3\2\2\2\u0735\u0746\7\u0224\2\2"+
		"\u0736\u0737\7\u0112\2\2\u0737\u0746\7\u0224\2\2\u0738\u0739\7\u00dd\2"+
		"\2\u0739\u0746\7\u0112\2\2\u073a\u073b\7\u0113\2\2\u073b\u0746\7\u0224"+
		"\2\2\u073c\u073d\7\u00dd\2\2\u073d\u0746\7\u0113\2\2\u073e\u0746\7\u00f0"+
		"\2\2\u073f\u0740\7\u00dd\2\2\u0740\u0746\7\u00f0\2\2\u0741\u0742\7\u00e8"+
		"\2\2\u0742\u0746\7\u0224\2\2\u0743\u0744\7\u011a\2\2\u0744\u0746\7z\2"+
		"\2\u0745\u072c\3\2\2\2\u0745\u0731\3\2\2\2\u0745\u0736\3\2\2\2\u0745\u0738"+
		"\3\2\2\2\u0745\u073a\3\2\2\2\u0745\u073c\3\2\2\2\u0745\u073e\3\2\2\2\u0745"+
		"\u073f\3\2\2\2\u0745\u0741\3\2\2\2\u0745\u0743\3\2\2\2\u0746]\3\2\2\2"+
		"\u0747\u0748\7b\2\2\u0748\u0749\7C\2\2\u0749\u074a\7\u012f\2\2\u074a\u074c"+
		"\5\u0410\u0209\2\u074b\u0747\3\2\2\2\u074b\u074c\3\2\2\2\u074c\u0752\3"+
		"\2\2\2\u074d\u074e\7\u010b\2\2\u074e\u0752\5\u02f0\u0179\2\u074f\u0750"+
		"\7Q\2\2\u0750\u0752\5\u0442\u0222\2\u0751\u074b\3\2\2\2\u0751\u074d\3"+
		"\2\2\2\u0751\u074f\3\2\2\2\u0752_\3\2\2\2\u0753\u0754\7\u00dd\2\2\u0754"+
		"\u075a\7\u00e7\2\2\u0755\u075a\7\u0124\2\2\u0756\u075a\7\u00d8\2\2\u0757"+
		"\u0758\7@\2\2\u0758\u075a\t\7\2\2\u0759\u0753\3\2\2\2\u0759\u0755\3\2"+
		"\2\2\u0759\u0756\3\2\2\2\u0759\u0757\3\2\2\2\u075aa\3\2\2\2\u075b\u075d"+
		"\7n\2\2\u075c\u075b\3\2\2\2\u075c\u075d\3\2\2\2\u075d\u075e\3\2\2\2\u075e"+
		"\u0760\7\u00f4\2\2\u075f\u075c\3\2\2\2\u075f\u0760\3\2\2\2\u0760\u0763"+
		"\3\2\2\2\u0761\u0762\7\u010a\2\2\u0762\u0764\t\b\2\2\u0763\u0761\3\2\2"+
		"\2\u0763\u0764\3\2\2\2\u0764c\3\2\2\2\u0765\u0766\t\t\2\2\u0766\u0767"+
		"\t\n\2\2\u0767e\3\2\2\2\u0768\u076a\5R*\2\u0769\u0768\3\2\2\2\u0769\u076a"+
		"\3\2\2\2\u076a\u076b\3\2\2\2\u076b\u076c\5h\65\2\u076c\u076d\5b\62\2\u076d"+
		"g\3\2\2\2\u076e\u079c\5V,\2\u076f\u0770\7F\2\2\u0770\u0771\5\u02f0\u0179"+
		"\2\u0771\u0772\5^\60\2\u0772\u079c\3\2\2\2\u0773\u0774\5\u02f8\u017d\2"+
		"\u0774\u0775\5\u02f0\u0179\2\u0775\u0776\5^\60\2\u0776\u079c\3\2\2\2\u0777"+
		"\u077a\7\u00d2\2\2\u0778\u0779\7b\2\2\u0779\u077b\5\u0410\u0209\2\u077a"+
		"\u0778\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u077c\3\2\2\2\u077c\u077d\7#"+
		"\2\2\u077d\u077e\5l\67\2\u077e\u077f\7$\2\2\u077f\u0781\5^\60\2\u0780"+
		"\u0782\5j\66\2\u0781\u0780\3\2\2\2\u0781\u0782\3\2\2\2\u0782\u079c\3\2"+
		"\2\2\u0783\u0784\7G\2\2\u0784\u0785\7H\2\2\u0785\u0786\5\u02f0\u0179\2"+
		"\u0786\u0787\7\u00e1\2\2\u0787\u0789\5\u02e6\u0174\2\u0788\u078a\5\u02f0"+
		"\u0179\2\u0789\u0788\3\2\2\2\u0789\u078a\3\2\2\2\u078a\u0791\3\2\2\2\u078b"+
		"\u078c\7\u0111\2\2\u078c\u0792\7\\\2\2\u078d\u078e\7\u0111\2\2\u078e\u0792"+
		"\7\u011c\2\2\u078f\u0790\7\u0111\2\2\u0790\u0792\7\u012c\2\2\u0791\u078b"+
		"\3\2\2\2\u0791\u078d\3\2\2\2\u0791\u078f\3\2\2\2\u0791\u0792\3\2\2\2\u0792"+
		"\u0798\3\2\2\2\u0793\u0794\7e\2\2\u0794\u0795\t\6\2\2\u0795\u0797\5`\61"+
		"\2\u0796\u0793\3\2\2\2\u0797\u079a\3\2\2\2\u0798\u0796\3\2\2\2\u0798\u0799"+
		"\3\2\2\2\u0799\u079c\3\2\2\2\u079a\u0798\3\2\2\2\u079b\u076e\3\2\2\2\u079b"+
		"\u076f\3\2\2\2\u079b\u0773\3\2\2\2\u079b\u0777\3\2\2\2\u079b\u0783\3\2"+
		"\2\2\u079ci\3\2\2\2\u079d\u079e\7c\2\2\u079e\u079f\7#\2\2\u079f\u07a0"+
		"\5\u0300\u0181\2\u07a0\u07a1\7$\2\2\u07a1k\3\2\2\2\u07a2\u07a7\5n8\2\u07a3"+
		"\u07a4\7)\2\2\u07a4\u07a6\5n8\2\u07a5\u07a3\3\2\2\2\u07a6\u07a9\3\2\2"+
		"\2\u07a7\u07a5\3\2\2\2\u07a7\u07a8\3\2\2\2\u07a8m\3\2\2\2\u07a9\u07a7"+
		"\3\2\2\2\u07aa\u07ab\5\u03f6\u01fc\2\u07ab\u07ac\7Q\2\2\u07ac\u07ad\5"+
		"\u032a\u0196\2\u07ad\u07b6\3\2\2\2\u07ae\u07af\5\u03f6\u01fc\2\u07af\u07b0"+
		"\7Q\2\2\u07b0\u07b1\7\u0181\2\2\u07b1\u07b2\7#\2\2\u07b2\u07b3\5\u032a"+
		"\u0196\2\u07b3\u07b4\7$\2\2\u07b4\u07b6\3\2\2\2\u07b5\u07aa\3\2\2\2\u07b5"+
		"\u07ae\3\2\2\2\u07b6o\3\2\2\2\u07b7\u07b8\7\u0109\2\2\u07b8\u07ba\5\u02ee"+
		"\u0178\2\u07b9\u07b7\3\2\2\2\u07b9\u07ba\3\2\2\2\u07baq\3\2\2\2\u07bb"+
		"\u07bc\7\u00d4\2\2\u07bc\u07bd\7z\2\2\u07bd\u07be\5z>\2\u07be\u07bf\7"+
		"#\2\2\u07bf\u07c0\5t;\2\u07c0\u07c1\7$\2\2\u07c1s\3\2\2\2\u07c2\u07c7"+
		"\5v<\2\u07c3\u07c4\7)\2\2\u07c4\u07c6\5v<\2\u07c5\u07c3\3\2\2\2\u07c6"+
		"\u07c9\3\2\2\2\u07c7\u07c5\3\2\2\2\u07c7\u07c8\3\2\2\2\u07c8u\3\2\2\2"+
		"\u07c9\u07c7\3\2\2\2\u07ca\u07cd\5\u0350\u01a9\2\u07cb\u07cc\7\u00eb\2"+
		"\2\u07cc\u07ce\5\u03d0\u01e9\2\u07cd\u07cb\3\2\2\2\u07cd\u07ce\3\2\2\2"+
		"\u07ce\u07d0\3\2\2\2\u07cf\u07d1\5\u03d0\u01e9\2\u07d0\u07cf\3\2\2\2\u07d0"+
		"\u07d1\3\2\2\2\u07d1\u07e5\3\2\2\2\u07d2\u07d3\7#\2\2\u07d3\u07d4\5\u0300"+
		"\u0181\2\u07d4\u07d7\7$\2\2\u07d5\u07d6\7\u00eb\2\2\u07d6\u07d8\5\u03d0"+
		"\u01e9\2\u07d7\u07d5\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8\u07da\3\2\2\2\u07d9"+
		"\u07db\5\u03d0\u01e9\2\u07da\u07d9\3\2\2\2\u07da\u07db\3\2\2\2\u07db\u07e5"+
		"\3\2\2\2\u07dc\u07df\5x=\2\u07dd\u07de\7\u00eb\2\2\u07de\u07e0\5\u03d0"+
		"\u01e9\2\u07df\u07dd\3\2\2\2\u07df\u07e0\3\2\2\2\u07e0\u07e2\3\2\2\2\u07e1"+
		"\u07e3\5\u03d0\u01e9\2\u07e2\u07e1\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07e5"+
		"\3\2\2\2\u07e4\u07ca\3\2\2\2\u07e4\u07d2\3\2\2\2\u07e4\u07dc\3\2\2\2\u07e5"+
		"w\3\2\2\2\u07e6\u07e9\5\u0348\u01a5\2\u07e7\u07e9\5\u036e\u01b8\2\u07e8"+
		"\u07e6\3\2\2\2\u07e8\u07e7\3\2\2\2\u07e9y\3\2\2\2\u07ea\u07ed\5\u02da"+
		"\u016e\2\u07eb\u07ed\5\u02e0\u0171\2\u07ec\u07ea\3\2\2\2\u07ec\u07eb\3"+
		"\2\2\2\u07ed{\3\2\2\2\u07ee\u07f0\7F\2\2\u07ef\u07ee\3\2\2\2\u07ef\u07f0"+
		"\3\2\2\2\u07f0}\3\2\2\2\u07f1\u07f3\7\u00ed\2\2\u07f2\u07f1\3\2\2\2\u07f2"+
		"\u07f3\3\2\2\2\u07f3\177\3\2\2\2\u07f4\u07f5\7f\2\2\u07f5\u07f6\7n\2\2"+
		"\u07f6\u07f8\7r\2\2\u07f7\u07f4\3\2\2\2\u07f7\u07f8\3\2\2\2\u07f8\u0081"+
		"\3\2\2\2\u07f9\u07fb\7\u0118\2\2\u07fa\u07f9\3\2\2\2\u07fa\u07fb\3\2\2"+
		"\2\u07fb\u0083\3\2\2\2\u07fc\u07fd\7f\2\2\u07fd\u07ff\7r\2\2\u07fe\u07fc"+
		"\3\2\2\2\u07fe\u07ff\3\2\2\2\u07ff\u0085\3\2\2\2\u0800\u0802\7\24\2\2"+
		"\u0801\u0800\3\2\2\2\u0801\u0802\3\2\2\2\u0802\u0087\3\2\2\2\u0803\u080c"+
		"\5\u009aN\2\u0804\u080c\5\u00b6\\\2\u0805\u080c\5\u00b8]\2\u0806\u080c"+
		"\5\u00ba^\2\u0807\u0808\7@\2\2\u0808\u0809\7<\2\2\u0809\u080c\5\u02ec"+
		"\u0177\2\u080a\u080c\5\u008aF\2\u080b\u0803\3\2\2\2\u080b\u0804\3\2\2"+
		"\2\u080b\u0805\3\2\2\2\u080b\u0806\3\2\2\2\u080b\u0807\3\2\2\2\u080b\u080a"+
		"\3\2\2\2\u080c\u0089\3\2\2\2\u080d\u080e\7\u01a4\2\2\u080e\u080f\7\u00d4"+
		"\2\2\u080f\u0810\5\u034e\u01a8\2\u0810\u0811\5\6\4\2\u0811\u0816\3\2\2"+
		"\2\u0812\u0813\7\u01b6\2\2\u0813\u0814\7\u00d4\2\2\u0814\u0816\5\u034e"+
		"\u01a8\2\u0815\u080d\3\2\2\2\u0815\u0812\3\2\2\2\u0816\u008b\3\2\2\2\u0817"+
		"\u081d\5\u0090I\2\u0818\u081d\5\u0092J\2\u0819\u081d\5\u0094K\2\u081a"+
		"\u081d\5\u00c8e\2\u081b\u081d\5\u008eH\2\u081c\u0817\3\2\2\2\u081c\u0818"+
		"\3\2\2\2\u081c\u0819\3\2\2\2\u081c\u081a\3\2\2\2\u081c\u081b\3\2\2\2\u081d"+
		"\u008d\3\2\2\2\u081e\u081f\7\u01a4\2\2\u081f\u0820\7\u00d4\2\2\u0820\u0821"+
		"\5\u034e\u01a8\2\u0821\u008f\3\2\2\2\u0822\u0823\7\u0120\2\2\u0823\u0824"+
		"\7j\2\2\u0824\u0825\5\u02f4\u017b\2\u0825\u0091\3\2\2\2\u0826\u0827\7"+
		"\u00f6\2\2\u0827\u0828\7e\2\2\u0828\u0829\7\u00fb\2\2\u0829\u082a\5\u0410"+
		"\u0209\2\u082a\u0093\3\2\2\2\u082b\u082c\7\u011a\2\2\u082c\u082d\7z\2"+
		"\2\u082d\u082f\5\u0412\u020a\2\u082e\u082b\3\2\2\2\u082e\u082f\3\2\2\2"+
		"\u082f\u0830\3\2\2\2\u0830\u0831\7@\2\2\u0831\u0832\7\u012f\2\2\u0832"+
		"\u0834\5\u02ec\u0177\2\u0833\u0835\7\u018d\2\2\u0834\u0833\3\2\2\2\u0834"+
		"\u0835\3\2\2\2\u0835\u0095\3\2\2\2\u0836\u083b\5\u0098M\2\u0837\u0838"+
		"\7)\2\2\u0838\u083a\5\u0098M\2\u0839\u0837\3\2\2\2\u083a\u083d\3\2\2\2"+
		"\u083b\u0839\3\2\2\2\u083b\u083c\3\2\2\2\u083c\u0097\3\2\2\2\u083d\u083b"+
		"\3\2\2\2\u083e\u0840\5\u02e6\u0174\2\u083f\u0841\7\24\2\2\u0840\u083f"+
		"\3\2\2\2\u0840\u0841\3\2\2\2\u0841\u0099\3\2\2\2\u0842\u0847\5\u009cO"+
		"\2\u0843\u0844\7)\2\2\u0844\u0846\5\u009cO\2\u0845\u0843\3\2\2\2\u0846"+
		"\u0849\3\2\2\2\u0847\u0845\3\2\2\2\u0847\u0848\3\2\2\2\u0848\u009b\3\2"+
		"\2\2\u0849\u0847\3\2\2\2\u084a\u08bb\5\u009eP\2\u084b\u08bb\5\u00a0Q\2"+
		"\u084c\u08bb\5\u00a4S\2\u084d\u08bb\5\u00aeX\2\u084e\u084f\79\2\2\u084f"+
		"\u0850\7D\2\2\u0850\u0851\5\u0410\u0209\2\u0851\u0852\5b\62\2\u0852\u08bb"+
		"\3\2\2\2\u0853\u0854\7\u0136\2\2\u0854\u0855\7D\2\2\u0855\u08bb\5\u0410"+
		"\u0209\2\u0856\u0857\7:\2\2\u0857\u0858\7D\2\2\u0858\u0859\5\u00bc_\2"+
		"\u0859\u085b\5\u0410\u0209\2\u085a\u085c\t\4\2\2\u085b\u085a\3\2\2\2\u085b"+
		"\u085c\3\2\2\2\u085c\u08bb\3\2\2\2\u085d\u085e\t\13\2\2\u085e\u0862\7"+
		"L\2\2\u085f\u0863\5\u0410\u0209\2\u0860\u0863\7u\2\2\u0861\u0863\7\u00e6"+
		"\2\2\u0862\u085f\3\2\2\2\u0862\u0860\3\2\2\2\u0862\u0861\3\2\2\2\u0862"+
		"\u0863\3\2\2\2\u0863\u08bb\3\2\2\2\u0864\u0865\7\u009a\2\2\u0865\u0866"+
		"\t\f\2\2\u0866\u0867\7L\2\2\u0867\u08bb\5\u0410\u0209\2\u0868\u0869\t"+
		"\13\2\2\u0869\u086a\7\u0126\2\2\u086a\u08bb\5\u0410\u0209\2\u086b\u086c"+
		"\7\u009a\2\2\u086c\u086d\t\f\2\2\u086d\u086e\7\u0126\2\2\u086e\u08bb\5"+
		"\u0410\u0209\2\u086f\u0876\7\u009b\2\2\u0870\u0876\7\u009a\2\2\u0871\u0873"+
		"\7\u00dd\2\2\u0872\u0871\3\2\2\2\u0872\u0873\3\2\2\2\u0873\u0874\3\2\2"+
		"\2\u0874\u0876\7\u0101\2\2\u0875\u086f\3\2\2\2\u0875\u0870\3\2\2\2\u0875"+
		"\u0872\3\2\2\2\u0876\u0877\3\2\2\2\u0877\u0878\7\u00d5\2\2\u0878\u0879"+
		"\7\u00dc\2\2\u0879\u08bb\7\u0127\2\2\u087a\u087b\7\u00ea\2\2\u087b\u087c"+
		"\7e\2\2\u087c\u08bb\5\u02f4\u017b\2\u087d\u087e\7@\2\2\u087e\u087f\7\u0138"+
		"\2\2\u087f\u08bb\7\u00ea\2\2\u0880\u0881\7@\2\2\u0881\u0882\t\r\2\2\u0882"+
		"\u08bb\7\u0117\2\2\u0883\u0884\7@\2\2\u0884\u0885\7\u012f\2\2\u0885\u08bb"+
		"\5\u0410\u0209\2\u0886\u0887\7@\2\2\u0887\u08bb\t\16\2\2\u0888\u0889\7"+
		"@\2\2\u0889\u088a\7#\2\2\u088a\u088f\5\u00b2Z\2\u088b\u088c\7)\2\2\u088c"+
		"\u088e\5\u00b2Z\2\u088d\u088b\3\2\2\2\u088e\u0891\3\2\2\2\u088f\u088d"+
		"\3\2\2\2\u088f\u0890\3\2\2\2\u0890\u0892\3\2\2\2\u0891\u088f\3\2\2\2\u0892"+
		"\u0893\7$\2\2\u0893\u08bb\3\2\2\2\u0894\u0895\7\u0122\2\2\u0895\u0896"+
		"\7#\2\2\u0896\u089b\5\u00b4[\2\u0897\u0898\7)\2\2\u0898\u089a\5\u00b4"+
		"[\2\u0899\u0897\3\2\2\2\u089a\u089d\3\2\2\2\u089b\u0899\3\2\2\2\u089b"+
		"\u089c\3\2\2\2\u089c\u089e\3\2\2\2\u089d\u089b\3\2\2\2\u089e\u089f\7$"+
		"\2\2\u089f\u08bb\3\2\2\2\u08a0\u08a1\7\u0108\2\2\u08a1\u08bb\5\u02e6\u0174"+
		"\2\u08a2\u08a3\7\u00dd\2\2\u08a3\u08a4\7\u0108\2\2\u08a4\u08bb\5\u02e6"+
		"\u0174\2\u08a5\u08a6\7\u013a\2\2\u08a6\u08bb\5\u040a\u0206\2\u08a7\u08a8"+
		"\7n\2\2\u08a8\u08bb\7\u013a\2\2\u08a9\u08aa\7\u011b\2\2\u08aa\u08ae\7"+
		"j\2\2\u08ab\u08af\5\u0410\u0209\2\u08ac\u08af\7\u00a1\2\2\u08ad\u08af"+
		"\7\u012a\2\2\u08ae\u08ab\3\2\2\2\u08ae\u08ac\3\2\2\2\u08ae\u08ad\3\2\2"+
		"\2\u08af\u08bb\3\2\2\2\u08b0\u08b1\7\u0121\2\2\u08b1\u08b8\7\u0103\2\2"+
		"\u08b2\u08b9\7\u0098\2\2\u08b3\u08b4\7b\2\2\u08b4\u08b5\7C\2\2\u08b5\u08b9"+
		"\5\u02f4\u017b\2\u08b6\u08b9\7\\\2\2\u08b7\u08b9\7\u0114\2\2\u08b8\u08b2"+
		"\3\2\2\2\u08b8\u08b3\3\2\2\2\u08b8\u08b6\3\2\2\2\u08b8\u08b7\3\2\2\2\u08b9"+
		"\u08bb\3\2\2\2\u08ba\u084a\3\2\2\2\u08ba\u084b\3\2\2\2\u08ba\u084c\3\2"+
		"\2\2\u08ba\u084d\3\2\2\2\u08ba\u084e\3\2\2\2\u08ba\u0853\3\2\2\2\u08ba"+
		"\u0856\3\2\2\2\u08ba\u085d\3\2\2\2\u08ba\u0864\3\2\2\2\u08ba\u0868\3\2"+
		"\2\2\u08ba\u086b\3\2\2\2\u08ba\u0875\3\2\2\2\u08ba\u087a\3\2\2\2\u08ba"+
		"\u087d\3\2\2\2\u08ba\u0880\3\2\2\2\u08ba\u0883\3\2\2\2\u08ba\u0886\3\2"+
		"\2\2\u08ba\u0888\3\2\2\2\u08ba\u0894\3\2\2\2\u08ba\u08a0\3\2\2\2\u08ba"+
		"\u08a2\3\2\2\2\u08ba\u08a5\3\2\2\2\u08ba\u08a7\3\2\2\2\u08ba\u08a9\3\2"+
		"\2\2\u08ba\u08b0\3\2\2\2\u08bb\u009d\3\2\2\2\u08bc\u08be\7?\2\2\u08bd"+
		"\u08bf\7B\2\2\u08be\u08bd\3\2\2\2\u08be\u08bf\3\2\2\2\u08bf\u08c3\3\2"+
		"\2\2\u08c0\u08c1\7f\2\2\u08c1\u08c2\7n\2\2\u08c2\u08c4\7r\2\2\u08c3\u08c0"+
		"\3\2\2\2\u08c3\u08c4\3\2\2\2\u08c4\u08c5\3\2\2\2\u08c5\u08c6\5N(\2\u08c6"+
		"\u009f\3\2\2\2\u08c7\u08c9\7:\2\2\u08c8\u08ca\7B\2\2\u08c9\u08c8\3\2\2"+
		"\2\u08c9\u08ca\3\2\2\2\u08ca\u08cb\3\2\2\2\u08cb\u08cc\5\u00a2R\2\u08cc"+
		"\u08ce\5\u02e8\u0175\2\u08cd\u08cf\t\4\2\2\u08ce\u08cd\3\2\2\2\u08ce\u08cf"+
		"\3\2\2\2\u08cf\u00a1\3\2\2\2\u08d0\u08d1\7f\2\2\u08d1\u08d3\7r\2\2\u08d2"+
		"\u08d0\3\2\2\2\u08d2\u08d3\3\2\2\2\u08d3\u00a3\3\2\2\2\u08d4\u08d7\5\u00a6"+
		"T\2\u08d5\u08d6\7@\2\2\u08d6\u08d8\7\u00f1\2\2\u08d7\u08d5\3\2\2\2\u08d7"+
		"\u08d8\3\2\2\2\u08d8\u08d9\3\2\2\2\u08d9\u08da\7\u00ae\2\2\u08da\u08dc"+
		"\5\u0408\u0205\2\u08db\u08dd\5\u03ce\u01e8\2\u08dc\u08db\3\2\2\2\u08dc"+
		"\u08dd\3\2\2\2\u08dd\u08e0\3\2\2\2\u08de\u08df\7b\2\2\u08df\u08e1\5\u0300"+
		"\u0181\2\u08e0\u08de\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1\u0924\3\2\2\2\u08e2"+
		"\u08e3\5\u00a6T\2\u08e3\u08e4\7@\2\2\u08e4\u08e5\7\u0098\2\2\u08e5\u08e6"+
		"\5\u0300\u0181\2\u08e6\u0924\3\2\2\2\u08e7\u08e8\5\u00a6T\2\u08e8\u08e9"+
		"\7:\2\2\u08e9\u08ea\7\u0098\2\2\u08ea\u0924\3\2\2\2\u08eb\u08ec\5\u00a6"+
		"T\2\u08ec\u08ed\t\17\2\2\u08ed\u08ee\7n\2\2\u08ee\u08ef\7o\2\2\u08ef\u0924"+
		"\3\2\2\2\u08f0\u08f1\5\u00a6T\2\u08f1\u08f2\7?\2\2\u08f2\u08f6\7\u00da"+
		"\2\2\u08f3\u08f7\7\u00d7\2\2\u08f4\u08f5\7z\2\2\u08f5\u08f7\7\u0098\2"+
		"\2\u08f6\u08f3\3\2\2\2\u08f6\u08f4\3\2\2\2\u08f7\u08f8\3\2\2\2\u08f8\u08f9"+
		"\7d\2\2\u08f9\u08fe\7\u0103\2\2\u08fa\u08fb\7#\2\2\u08fb\u08fc\5Z.\2\u08fc"+
		"\u08fd\7$\2\2\u08fd\u08ff\3\2\2\2\u08fe\u08fa\3\2\2\2\u08fe\u08ff\3\2"+
		"\2\2\u08ff\u0924\3\2\2\2\u0900\u0901\5\u00a6T\2\u0901\u0905\5\u00a8U\2"+
		"\u0902\u0904\5\u00a8U\2\u0903\u0902\3\2\2\2\u0904\u0907\3\2\2\2\u0905"+
		"\u0903\3\2\2\2\u0905\u0906\3\2\2\2\u0906\u0924\3\2\2\2\u0907\u0905\3\2"+
		"\2\2\u0908\u0909\5\u00a6T\2\u0909\u090a\7:\2\2\u090a\u090b\7\u0103\2\2"+
		"\u090b\u090c\5\u00a2R\2\u090c\u0924\3\2\2\2\u090d\u090e\5\u00a6T\2\u090e"+
		"\u090f\7@\2\2\u090f\u0910\7\u012d\2\2\u0910\u0911\7\u0224\2\2\u0911\u0924"+
		"\3\2\2\2\u0912\u0913\5\u00a6T\2\u0913\u0914\7@\2\2\u0914\u0915\7#\2\2"+
		"\u0915\u0916\5\u00aaV\2\u0916\u0917\7$\2\2\u0917\u0924\3\2\2\2\u0918\u0919"+
		"\5\u00a6T\2\u0919\u091a\7\u0122\2\2\u091a\u091b\7#\2\2\u091b\u091c\5\u00aa"+
		"V\2\u091c\u091d\7$\2\2\u091d\u0924\3\2\2\2\u091e\u091f\5\u00a6T\2\u091f"+
		"\u0920\7@\2\2\u0920\u0921\7\u012e\2\2\u0921\u0922\t\20\2\2\u0922\u0924"+
		"\3\2\2\2\u0923\u08d4\3\2\2\2\u0923\u08e2\3\2\2\2\u0923\u08e7\3\2\2\2\u0923"+
		"\u08eb\3\2\2\2\u0923\u08f0\3\2\2\2\u0923\u0900\3\2\2\2\u0923\u0908\3\2"+
		"\2\2\u0923\u090d\3\2\2\2\u0923\u0912\3\2\2\2\u0923\u0918\3\2\2\2\u0923"+
		"\u091e\3\2\2\2\u0924\u00a5\3\2\2\2\u0925\u0927\79\2\2\u0926\u0928\7B\2"+
		"\2\u0927\u0926\3\2\2\2\u0927\u0928\3\2\2\2\u0928\u0929\3\2\2\2\u0929\u092a"+
		"\5\u02e8\u0175\2\u092a\u00a7\3\2\2\2\u092b\u0933\7@\2\2\u092c\u0930\7"+
		"\u00da\2\2\u092d\u0931\7\u00d7\2\2\u092e\u092f\7z\2\2\u092f\u0931\7\u0098"+
		"\2\2\u0930\u092d\3\2\2\2\u0930\u092e\3\2\2\2\u0931\u0934\3\2\2\2\u0932"+
		"\u0934\5\\/\2\u0933\u092c\3\2\2\2\u0933\u0932\3\2\2\2\u0934\u093d\3\2"+
		"\2\2\u0935\u093a\7\u0123\2\2\u0936\u0938\7Q\2\2\u0937\u0936\3\2\2\2\u0937"+
		"\u0938\3\2\2\2\u0938\u0939\3\2\2\2\u0939\u093b\7\u0224\2\2\u093a\u0937"+
		"\3\2\2\2\u093a\u093b\3\2\2\2\u093b\u093d\3\2\2\2\u093c\u092b\3\2\2\2\u093c"+
		"\u0935\3\2\2\2\u093d\u00a9\3\2\2\2\u093e\u0943\5\u00acW\2\u093f\u0940"+
		"\7)\2\2\u0940\u0942\5\u00acW\2\u0941\u093f\3\2\2\2\u0942\u0945\3\2\2\2"+
		"\u0943\u0941\3\2\2\2\u0943\u0944\3\2\2\2\u0944\u00ab\3\2\2\2\u0945\u0943"+
		"\3\2\2\2\u0946\u0947\7\u0222\2\2\u0947\u0948\7\33\2\2\u0948\u0949\5\u0300"+
		"\u0181\2\u0949\u00ad\3\2\2\2\u094a\u0951\7?\2\2\u094b\u094e\5f\64\2\u094c"+
		"\u094d\7n\2\2\u094d\u094f\7\u0135\2\2\u094e\u094c\3\2\2\2\u094e\u094f"+
		"\3\2\2\2\u094f\u0952\3\2\2\2\u0950\u0952\5\u00b0Y\2\u0951\u094b\3\2\2"+
		"\2\u0951\u0950\3\2\2\2\u0952\u00af\3\2\2\2\u0953\u0954\7D\2\2\u0954\u0956"+
		"\5\u0410\u0209\2\u0955\u0953\3\2\2\2\u0955\u0956\3\2\2\2\u0956\u0959\3"+
		"\2\2\2\u0957\u095a\7F\2\2\u0958\u095a\5\u02f8\u017d\2\u0959\u0957\3\2"+
		"\2\2\u0959\u0958\3\2\2\2\u095a\u095b\3\2\2\2\u095b\u095c\7b\2\2\u095c"+
		"\u095d\7C\2\2\u095d\u095e\5\u02f4\u017b\2\u095e\u095f\5b\62\2\u095f\u00b1"+
		"\3\2\2\2\u0960\u0961\5\u00b4[\2\u0961\u0962\7\33\2\2\u0962\u0963\5\u0300"+
		"\u0181\2\u0963\u00b3\3\2\2\2\u0964\u0965\7\u0222\2\2\u0965\u00b5\3\2\2"+
		"\2\u0966\u0968\7\u0120\2\2\u0967\u0969\7B\2\2\u0968\u0967\3\2\2\2\u0968"+
		"\u0969\3\2\2\2\u0969\u096a\3\2\2\2\u096a\u096b\5\u02e8\u0175\2\u096b\u096c"+
		"\7j\2\2\u096c\u096d\5\u02e8\u0175\2\u096d\u00b7\3\2\2\2\u096e\u096f\7"+
		"\u0120\2\2\u096f\u0970\7D\2\2\u0970\u0971\5\u0410\u0209\2\u0971\u0972"+
		"\7j\2\2\u0972\u0973\5\u0410\u0209\2\u0973\u00b9\3\2\2\2\u0974\u0975\7"+
		"\u0120\2\2\u0975\u0976\7j\2\2\u0976\u0977\5\u02da\u016e\2\u0977\u00bb"+
		"\3\2\2\2\u0978\u0979\7f\2\2\u0979\u097b\7r\2\2\u097a\u0978\3\2\2\2\u097a"+
		"\u097b\3\2\2\2\u097b\u00bd\3\2\2\2\u097c\u0981\5\u02f4\u017b\2\u097d\u097e"+
		"\7)\2\2\u097e\u0980\5\u02f4\u017b\2\u097f\u097d\3\2\2\2\u0980\u0983\3"+
		"\2\2\2\u0981\u097f\3\2\2\2\u0981\u0982\3\2\2\2\u0982\u00bf\3\2\2\2\u0983"+
		"\u0981\3\2\2\2\u0984\u0985\79\2\2\u0985\u0986\7\u00f2\2\2\u0986\u0987"+
		"\5\u041c\u020f\2\u0987\u0988\5\u00c2b\2\u0988\u00c1\3\2\2\2\u0989\u098b"+
		"\7Q\2\2\u098a\u0989\3\2\2\2\u098a\u098b\3\2\2\2\u098b\u098d\3\2\2\2\u098c"+
		"\u098e\5\u00c4c\2\u098d\u098c\3\2\2\2\u098d\u098e\3\2\2\2\u098e\u099a"+
		"\3\2\2\2\u098f\u0990\7\u0120\2\2\u0990\u0991\7j\2\2\u0991\u099a\5\u041c"+
		"\u020f\2\u0992\u0993\7\u011b\2\2\u0993\u0994\7j\2\2\u0994\u099a\5\u041e"+
		"\u0210\2\u0995\u0996\7@\2\2\u0996\u0997\7\u012f\2\2\u0997\u099a\5\u02ec"+
		"\u0177\2\u0998\u099a\5\u0468\u0235\2\u0999\u098a\3\2\2\2\u0999\u098f\3"+
		"\2\2\2\u0999\u0992\3\2\2\2\u0999\u0995\3\2\2\2\u0999\u0998\3\2\2\2\u099a"+
		"\u00c3\3\2\2\2\u099b\u099d\5\u00c6d\2\u099c\u099b\3\2\2\2\u099d\u099e"+
		"\3\2\2\2\u099e\u099c\3\2\2\2\u099e\u099f\3\2\2\2\u099f\u00c5\3\2\2\2\u09a0"+
		"\u09a2\5\64\33\2\u09a1\u09a3\7\33\2\2\u09a2\u09a1\3\2\2\2\u09a2\u09a3"+
		"\3\2\2\2\u09a3\u09a4\3\2\2\2\u09a4\u09a5\5\u0414\u020b\2\u09a5\u09b3\3"+
		"\2\2\2\u09a6\u09a8\5\64\33\2\u09a7\u09a9\7\33\2\2\u09a8\u09a7\3\2\2\2"+
		"\u09a8\u09a9\3\2\2\2\u09a9\u09aa\3\2\2\2\u09aa\u09ab\5\u0416\u020c\2\u09ab"+
		"\u09b3\3\2\2\2\u09ac\u09ae\5\64\33\2\u09ad\u09af\7\33\2\2\u09ae\u09ad"+
		"\3\2\2\2\u09ae\u09af\3\2\2\2\u09af\u09b0\3\2\2\2\u09b0\u09b1\7\u0098\2"+
		"\2\u09b1\u09b3\3\2\2\2\u09b2\u09a0\3\2\2\2\u09b2\u09a6\3\2\2\2\u09b2\u09ac"+
		"\3\2\2\2\u09b3\u00c7\3\2\2\2\u09b4\u09b9\5\u00caf\2\u09b5\u09b6\7)\2\2"+
		"\u09b6\u09b8\5\u00caf\2\u09b7\u09b5\3\2\2\2\u09b8\u09bb\3\2\2\2\u09b9"+
		"\u09b7\3\2\2\2\u09b9\u09ba\3\2\2\2\u09ba\u00c9\3\2\2\2\u09bb\u09b9\3\2"+
		"\2\2\u09bc\u09be\7?\2\2\u09bd\u09bf\7B\2\2\u09be\u09bd\3\2\2\2\u09be\u09bf"+
		"\3\2\2\2\u09bf\u09c3\3\2\2\2\u09c0\u09c1\7f\2\2\u09c1\u09c2\7n\2\2\u09c2"+
		"\u09c4\7r\2\2\u09c3\u09c0\3\2\2\2\u09c3\u09c4\3\2\2\2\u09c4\u09c5\3\2"+
		"\2\2\u09c5\u0ace\5\u042c\u0217\2\u09c6\u09c8\79\2\2\u09c7\u09c9\7B\2\2"+
		"\u09c8\u09c7\3\2\2\2\u09c8\u09c9\3\2\2\2\u09c9\u09ca\3\2\2\2\u09ca\u09cb"+
		"\5\u0350\u01a9\2\u09cb\u09cc\5\u00e2r\2\u09cc\u0ace\3\2\2\2\u09cd\u09cf"+
		"\79\2\2\u09ce\u09d0\7B\2\2\u09cf\u09ce\3\2\2\2\u09cf\u09d0\3\2\2\2\u09d0"+
		"\u09d1\3\2\2\2\u09d1\u09d2\5\u0350\u01a9\2\u09d2\u09d3\7:\2\2\u09d3\u09d4"+
		"\7n\2\2\u09d4\u09d5\7o\2\2\u09d5\u0ace\3\2\2\2\u09d6\u09d8\79\2\2\u09d7"+
		"\u09d9\7B\2\2\u09d8\u09d7\3\2\2\2\u09d8\u09d9\3\2\2\2\u09d9\u09da\3\2"+
		"\2\2\u09da\u09db\5\u0350\u01a9\2\u09db\u09dc\7@\2\2\u09dc\u09dd\7n\2\2"+
		"\u09dd\u09de\7o\2\2\u09de\u0ace\3\2\2\2\u09df\u09e1\79\2\2\u09e0\u09e2"+
		"\7B\2\2\u09e1\u09e0\3\2\2\2\u09e1\u09e2\3\2\2\2\u09e2\u09e3\3\2\2\2\u09e3"+
		"\u09e4\5\u0350\u01a9\2\u09e4\u09e5\7@\2\2\u09e5\u09e6\7\u012d\2\2\u09e6"+
		"\u09e7\5\u0414\u020b\2\u09e7\u0ace\3\2\2\2\u09e8\u09ea\79\2\2\u09e9\u09eb"+
		"\7B\2\2\u09ea\u09e9\3\2\2\2\u09ea\u09eb\3\2\2\2\u09eb\u09ec\3\2\2\2\u09ec"+
		"\u09ed\7\u0224\2\2\u09ed\u09ee\7@\2\2\u09ee\u09ef\7\u012d\2\2\u09ef\u0ace"+
		"\5\u0414\u020b\2\u09f0\u09f2\79\2\2\u09f1\u09f3\7B\2\2\u09f2\u09f1\3\2"+
		"\2\2\u09f2\u09f3\3\2\2\2\u09f3\u09f4\3\2\2\2\u09f4\u09f5\5\u0350\u01a9"+
		"\2\u09f5\u09f6\7@\2\2\u09f6\u09f7\5\u03fc\u01ff\2\u09f7\u0ace\3\2\2\2"+
		"\u09f8\u09fa\79\2\2\u09f9\u09fb\7B\2\2\u09fa\u09f9\3\2\2\2\u09fa\u09fb"+
		"\3\2\2\2\u09fb\u09fc\3\2\2\2\u09fc\u09fd\5\u0350\u01a9\2\u09fd\u09fe\7"+
		"\u0122\2\2\u09fe\u09ff\5\u03fc\u01ff\2\u09ff\u0ace\3\2\2\2\u0a00\u0a02"+
		"\79\2\2\u0a01\u0a03\7B\2\2\u0a02\u0a01\3\2\2\2\u0a02\u0a03\3\2\2\2\u0a03"+
		"\u0a04\3\2\2\2\u0a04\u0a05\5\u0350\u01a9\2\u0a05\u0a06\7@\2\2\u0a06\u0a07"+
		"\7\u012e\2\2\u0a07\u0a08\5\u0350\u01a9\2\u0a08\u0ace\3\2\2\2\u0a09\u0a0b"+
		"\79\2\2\u0a0a\u0a0c\7B\2\2\u0a0b\u0a0a\3\2\2\2\u0a0b\u0a0c\3\2\2\2\u0a0c"+
		"\u0a0d\3\2\2\2\u0a0d\u0a0e\5\u0350\u01a9\2\u0a0e\u0a0f\7?\2\2\u0a0f\u0a10"+
		"\7\u00da\2\2\u0a10\u0a11\5\u043c\u021f\2\u0a11\u0a12\7d\2\2\u0a12\u0a14"+
		"\7\u0103\2\2\u0a13\u0a15\5\u0434\u021b\2\u0a14\u0a13\3\2\2\2\u0a14\u0a15"+
		"\3\2\2\2\u0a15\u0ace\3\2\2\2\u0a16\u0a18\79\2\2\u0a17\u0a19\7B\2\2\u0a18"+
		"\u0a17\3\2\2\2\u0a18\u0a19\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1a\u0a1b\5\u0350"+
		"\u01a9\2\u0a1b\u0a1c\5\u00dep\2\u0a1c\u0ace\3\2\2\2\u0a1d\u0a1f\79\2\2"+
		"\u0a1e\u0a20\7B\2\2\u0a1f\u0a1e\3\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20\u0a21"+
		"\3\2\2\2\u0a21\u0a22\5\u0350\u01a9\2\u0a22\u0a23\7:\2\2\u0a23\u0a24\7"+
		"\u0103\2\2\u0a24\u0ace\3\2\2\2\u0a25\u0a27\79\2\2\u0a26\u0a28\7B\2\2\u0a27"+
		"\u0a26\3\2\2\2\u0a27\u0a28\3\2\2\2\u0a28\u0a29\3\2\2\2\u0a29\u0a2a\5\u0350"+
		"\u01a9\2\u0a2a\u0a2b\7:\2\2\u0a2b\u0a2c\7\u0103\2\2\u0a2c\u0a2d\7f\2\2"+
		"\u0a2d\u0a2e\7r\2\2\u0a2e\u0ace\3\2\2\2\u0a2f\u0a31\7:\2\2\u0a30\u0a32"+
		"\7B\2\2\u0a31\u0a30\3\2\2\2\u0a31\u0a32\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33"+
		"\u0a34\7f\2\2\u0a34\u0a35\7r\2\2\u0a35\u0a37\5\u0350\u01a9\2\u0a36\u0a38"+
		"\5\u00d8m\2\u0a37\u0a36\3\2\2\2\u0a37\u0a38\3\2\2\2\u0a38\u0ace\3\2\2"+
		"\2\u0a39\u0a3b\7:\2\2\u0a3a\u0a3c\7B\2\2\u0a3b\u0a3a\3\2\2\2\u0a3b\u0a3c"+
		"\3\2\2\2\u0a3c\u0a3d\3\2\2\2\u0a3d\u0a3f\5\u0350\u01a9\2\u0a3e\u0a40\5"+
		"\u00d8m\2\u0a3f\u0a3e\3\2\2\2\u0a3f\u0a40\3\2\2\2\u0a40\u0ace\3\2\2\2"+
		"\u0a41\u0a43\79\2\2\u0a42\u0a44\7B\2\2\u0a43\u0a42\3\2\2\2\u0a43\u0a44"+
		"\3\2\2\2\u0a44\u0a45\3\2\2\2\u0a45\u0a47\5\u0350\u01a9\2\u0a46\u0a48\5"+
		"\u00dco\2\u0a47\u0a46\3\2\2\2\u0a47\u0a48\3\2\2\2\u0a48\u0a49\3\2\2\2"+
		"\u0a49\u0a4a\7\u00ae\2\2\u0a4a\u0a4c\5\u0370\u01b9\2\u0a4b\u0a4d\5\u03ce"+
		"\u01e8\2\u0a4c\u0a4b\3\2\2\2\u0a4c\u0a4d\3\2\2\2\u0a4d\u0a4f\3\2\2\2\u0a4e"+
		"\u0a50\5\u00dan\2\u0a4f\u0a4e\3\2\2\2\u0a4f\u0a50\3\2\2\2\u0a50\u0ace"+
		"\3\2\2\2\u0a51\u0a53\79\2\2\u0a52\u0a54\7B\2\2\u0a53\u0a52\3\2\2\2\u0a53"+
		"\u0a54\3\2\2\2\u0a54\u0a55\3\2\2\2\u0a55\u0a56\5\u0350\u01a9\2\u0a56\u0a57"+
		"\5\u00d0i\2\u0a57\u0ace\3\2\2\2\u0a58\u0a59\7?\2\2\u0a59\u0ace\5f\64\2"+
		"\u0a5a\u0a5b\79\2\2\u0a5b\u0a5c\7D\2\2\u0a5c\u0a5d\5\u02ec\u0177\2\u0a5d"+
		"\u0a5e\5\u00ccg\2\u0a5e\u0ace\3\2\2\2\u0a5f\u0a60\7\u0136\2\2\u0a60\u0a61"+
		"\7D\2\2\u0a61\u0ace\5\u02ec\u0177\2\u0a62\u0a63\7:\2\2\u0a63\u0a64\7D"+
		"\2\2\u0a64\u0a65\7f\2\2\u0a65\u0a66\7r\2\2\u0a66\u0a68\5\u02ec\u0177\2"+
		"\u0a67\u0a69\5\u00d8m\2\u0a68\u0a67\3\2\2\2\u0a68\u0a69\3\2\2\2\u0a69"+
		"\u0ace\3\2\2\2\u0a6a\u0a6b\7:\2\2\u0a6b\u0a6c\7D\2\2\u0a6c\u0a6e\5\u02ec"+
		"\u0177\2\u0a6d\u0a6f\5\u00d8m\2\u0a6e\u0a6d\3\2\2\2\u0a6e\u0a6f\3\2\2"+
		"\2\u0a6f\u0ace\3\2\2\2\u0a70\u0a71\7@\2\2\u0a71\u0a72\7\u0138\2\2\u0a72"+
		"\u0ace\7\u0117\2\2\u0a73\u0a74\7\u00ea\2\2\u0a74\u0a75\7e\2\2\u0a75\u0ace"+
		"\5\u02ec\u0177\2\u0a76\u0a77\7@\2\2\u0a77\u0a78\7\u0138\2\2\u0a78\u0ace"+
		"\7\u00ea\2\2\u0a79\u0a7a\7@\2\2\u0a7a\u0ace\7\u010f\2\2\u0a7b\u0a7c\7"+
		"@\2\2\u0a7c\u0ace\7\u0133\2\2\u0a7d\u0a7e\7\u009a\2\2\u0a7e\u0a7f\7L\2"+
		"\2\u0a7f\u0ace\5\u02ec\u0177\2\u0a80\u0a81\7\u009a\2\2\u0a81\u0a82\7\u00d7"+
		"\2\2\u0a82\u0a83\7L\2\2\u0a83\u0ace\5\u02ec\u0177\2\u0a84\u0a85\7\u009a"+
		"\2\2\u0a85\u0a86\7\u0121\2\2\u0a86\u0a87\7L\2\2\u0a87\u0ace\5\u02ec\u0177"+
		"\2\u0a88\u0a89\7\u009a\2\2\u0a89\u0a8a\7L\2\2\u0a8a\u0ace\7u\2\2\u0a8b"+
		"\u0a8c\7\u009a\2\2\u0a8c\u0a8d\7L\2\2\u0a8d\u0ace\7\u00e6\2\2\u0a8e\u0a8f"+
		"\7\u009b\2\2\u0a8f\u0a90\7L\2\2\u0a90\u0ace\5\u02ec\u0177\2\u0a91\u0a92"+
		"\7\u009b\2\2\u0a92\u0a93\7L\2\2\u0a93\u0ace\7u\2\2\u0a94\u0a95\7\u009b"+
		"\2\2\u0a95\u0a96\7L\2\2\u0a96\u0ace\7\u00e6\2\2\u0a97\u0a98\7\u009a\2"+
		"\2\u0a98\u0a99\7\u0126\2\2\u0a99\u0ace\5\u02ec\u0177\2\u0a9a\u0a9b\7\u009a"+
		"\2\2\u0a9b\u0a9c\7\u00d7\2\2\u0a9c\u0a9d\7\u0126\2\2\u0a9d\u0ace\5\u02ec"+
		"\u0177\2\u0a9e\u0a9f\7\u009a\2\2\u0a9f\u0aa0\7\u0121\2\2\u0aa0\u0aa1\7"+
		"\u0126\2\2\u0aa1\u0ace\5\u02ec\u0177\2\u0aa2\u0aa3\7\u009b\2\2\u0aa3\u0aa4"+
		"\7\u0126\2\2\u0aa4\u0ace\5\u02ec\u0177\2\u0aa5\u0aa6\7\u0108\2\2\u0aa6"+
		"\u0ace\5\u034e\u01a8\2\u0aa7\u0aa8\7\u00dd\2\2\u0aa8\u0aa9\7\u0108\2\2"+
		"\u0aa9\u0ace\5\u034e\u01a8\2\u0aaa\u0aab\7\u013a\2\2\u0aab\u0ace\5\u03d0"+
		"\u01e9\2\u0aac\u0aad\7n\2\2\u0aad\u0ace\7\u013a\2\2\u0aae\u0aaf\7\u011b"+
		"\2\2\u0aaf\u0ab0\7j\2\2\u0ab0\u0ace\5\u041e\u0210\2\u0ab1\u0ab2\7@\2\2"+
		"\u0ab2\u0ab3\7\u012f\2\2\u0ab3\u0ace\5\u02ec\u0177\2\u0ab4\u0ab5\7@\2"+
		"\2\u0ab5\u0ace\5\u03fc\u01ff\2\u0ab6\u0ab7\7\u0122\2\2\u0ab7\u0ace\5\u03fc"+
		"\u01ff\2\u0ab8\u0ab9\7\u0121\2\2\u0ab9\u0aba\7\u0103\2\2\u0aba\u0ace\5"+
		"\u0458\u022d\2\u0abb\u0abc\7\u009a\2\2\u0abc\u0abd\7\u00d5\2\2\u0abd\u0abe"+
		"\7\u00dc\2\2\u0abe\u0ace\7\u0127\2\2\u0abf\u0ac0\7\u009b\2\2\u0ac0\u0ac1"+
		"\7\u00d5\2\2\u0ac1\u0ac2\7\u00dc\2\2\u0ac2\u0ace\7\u0127\2\2\u0ac3\u0ac4"+
		"\7\u0101\2\2\u0ac4\u0ac5\7\u00d5\2\2\u0ac5\u0ac6\7\u00dc\2\2\u0ac6\u0ace"+
		"\7\u0127\2\2\u0ac7\u0ac8\7\u00dd\2\2\u0ac8\u0ac9\7\u0101\2\2\u0ac9\u0aca"+
		"\7\u00d5\2\2\u0aca\u0acb\7\u00dc\2\2\u0acb\u0ace\7\u0127\2\2\u0acc\u0ace"+
		"\5\u00d0i\2\u0acd\u09bc\3\2\2\2\u0acd\u09c6\3\2\2\2\u0acd\u09cd\3\2\2"+
		"\2\u0acd\u09d6\3\2\2\2\u0acd\u09df\3\2\2\2\u0acd\u09e8\3\2\2\2\u0acd\u09f0"+
		"\3\2\2\2\u0acd\u09f8\3\2\2\2\u0acd\u0a00\3\2\2\2\u0acd\u0a09\3\2\2\2\u0acd"+
		"\u0a16\3\2\2\2\u0acd\u0a1d\3\2\2\2\u0acd\u0a25\3\2\2\2\u0acd\u0a2f\3\2"+
		"\2\2\u0acd\u0a39\3\2\2\2\u0acd\u0a41\3\2\2\2\u0acd\u0a51\3\2\2\2\u0acd"+
		"\u0a58\3\2\2\2\u0acd\u0a5a\3\2\2\2\u0acd\u0a5f\3\2\2\2\u0acd\u0a62\3\2"+
		"\2\2\u0acd\u0a6a\3\2\2\2\u0acd\u0a70\3\2\2\2\u0acd\u0a73\3\2\2\2\u0acd"+
		"\u0a76\3\2\2\2\u0acd\u0a79\3\2\2\2\u0acd\u0a7b\3\2\2\2\u0acd\u0a7d\3\2"+
		"\2\2\u0acd\u0a80\3\2\2\2\u0acd\u0a84\3\2\2\2\u0acd\u0a88\3\2\2\2\u0acd"+
		"\u0a8b\3\2\2\2\u0acd\u0a8e\3\2\2\2\u0acd\u0a91\3\2\2\2\u0acd\u0a94\3\2"+
		"\2\2\u0acd\u0a97\3\2\2\2\u0acd\u0a9a\3\2\2\2\u0acd\u0a9e\3\2\2\2\u0acd"+
		"\u0aa2\3\2\2\2\u0acd\u0aa5\3\2\2\2\u0acd\u0aa7\3\2\2\2\u0acd\u0aaa\3\2"+
		"\2\2\u0acd\u0aac\3\2\2\2\u0acd\u0aae\3\2\2\2\u0acd\u0ab1\3\2\2\2\u0acd"+
		"\u0ab4\3\2\2\2\u0acd\u0ab6\3\2\2\2\u0acd\u0ab8\3\2\2\2\u0acd\u0abb\3\2"+
		"\2\2\u0acd\u0abf\3\2\2\2\u0acd\u0ac3\3\2\2\2\u0acd\u0ac7\3\2\2\2\u0acd"+
		"\u0acc\3\2\2\2\u0ace\u00cb\3\2\2\2\u0acf\u0ad1\5\u00ceh\2\u0ad0\u0acf"+
		"\3\2\2\2\u0ad1\u0ad4\3\2\2\2\u0ad2\u0ad0\3\2\2\2\u0ad2\u0ad3\3\2\2\2\u0ad3"+
		"\u00cd\3\2\2\2\u0ad4\u0ad2\3\2\2\2\u0ad5\u0ad6\7n\2\2\u0ad6\u0ae1\7\u00f4"+
		"\2\2\u0ad7\u0ae1\7\u00f4\2\2\u0ad8\u0ad9\7\u010a\2\2\u0ad9\u0ae1\7\u0104"+
		"\2\2\u0ada\u0adb\7\u010a\2\2\u0adb\u0ae1\7\u00f5\2\2\u0adc\u0add\7n\2"+
		"\2\u0add\u0ae1\7\u0135\2\2\u0ade\u0adf\7\u00dd\2\2\u0adf\u0ae1\7\u0108"+
		"\2\2\u0ae0\u0ad5\3\2\2\2\u0ae0\u0ad7\3\2\2\2\u0ae0\u0ad8\3\2\2\2\u0ae0"+
		"\u0ada\3\2\2\2\u0ae0\u0adc\3\2\2\2\u0ae0\u0ade\3\2\2\2\u0ae1\u00cf\3\2"+
		"\2\2\u0ae2\u0ae3\7\u01f1\2\2\u0ae3\u0ae4\7#\2\2\u0ae4\u0ae5\5\u00d2j\2"+
		"\u0ae5\u0ae6\7$\2\2\u0ae6\u00d1\3\2\2\2\u0ae7\u0aec\5\u00d4k\2\u0ae8\u0ae9"+
		"\7)\2\2\u0ae9\u0aeb\5\u00d4k\2\u0aea\u0ae8\3\2\2\2\u0aeb\u0aee\3\2\2\2"+
		"\u0aec\u0aea\3\2\2\2\u0aec\u0aed\3\2\2\2\u0aed\u00d3\3\2\2\2\u0aee\u0aec"+
		"\3\2\2\2\u0aef\u0af7\5\u0148\u00a5\2\u0af0\u0af1\7@\2\2\u0af1\u0af7\5"+
		"\u0148\u00a5\2\u0af2\u0af3\7?\2\2\u0af3\u0af7\5\u0148\u00a5\2\u0af4\u0af5"+
		"\7:\2\2\u0af5\u0af7\5\u00d6l\2\u0af6\u0aef\3\2\2\2\u0af6\u0af0\3\2\2\2"+
		"\u0af6\u0af2\3\2\2\2\u0af6\u0af4\3\2\2\2\u0af7\u00d5\3\2\2\2\u0af8\u0af9"+
		"\5\u0392\u01ca\2\u0af9\u00d7\3\2\2\2\u0afa\u0afb\t\4\2\2\u0afb\u00d9\3"+
		"\2\2\2\u0afc\u0afd\7b\2\2\u0afd\u0afe\5\u0300\u0181\2\u0afe\u00db\3\2"+
		"\2\2\u0aff\u0b00\7@\2\2\u0b00\u0b01\7\u00f1\2\2\u0b01\u00dd\3\2\2\2\u0b02"+
		"\u0b04\5\u00e0q\2\u0b03\u0b02\3\2\2\2\u0b04\u0b05\3\2\2\2\u0b05\u0b03"+
		"\3\2\2\2\u0b05\u0b06\3\2\2\2\u0b06\u00df\3\2\2\2\u0b07\u0b13\7\u0123\2"+
		"\2\u0b08\u0b0a\7\u0123\2\2\u0b09\u0b0b\7Q\2\2\u0b0a\u0b09\3\2\2\2\u0b0a"+
		"\u0b0b\3\2\2\2\u0b0b\u0b0c\3\2\2\2\u0b0c\u0b13\5\u0428\u0215\2\u0b0d\u0b0e"+
		"\7@\2\2\u0b0e\u0b13\5\u0438\u021d\2\u0b0f\u0b10\7@\2\2\u0b10\u0b11\7\u00da"+
		"\2\2\u0b11\u0b13\5\u043c\u021f\2\u0b12\u0b07\3\2\2\2\u0b12\u0b08\3\2\2"+
		"\2\u0b12\u0b0d\3\2\2\2\u0b12\u0b0f\3\2\2\2\u0b13\u00e1\3\2\2\2\u0b14\u0b15"+
		"\7@\2\2\u0b15\u0b16\7\u0098\2\2\u0b16\u0b1a\5\u0300\u0181\2\u0b17\u0b18"+
		"\7:\2\2\u0b18\u0b1a\7\u0098\2\2\u0b19\u0b14\3\2\2\2\u0b19\u0b17\3\2\2"+
		"\2\u0b1a\u00e3\3\2\2\2\u0b1b\u0b1c\79\2\2\u0b1c\u0b1d\7\u0181\2\2\u0b1d"+
		"\u0b1e\5\u00f4{\2\u0b1e\u00e5\3\2\2\2\u0b1f\u0b20\79\2\2\u0b20\u0b21\7"+
		"\u0181\2\2\u0b21\u0b22\7\u01b3\2\2\u0b22\u0b23\5\u03d0\u01e9\2\u0b23\u0b24"+
		"\7b\2\2\u0b24\u0b25\5\u02ec\u0177\2\u0b25\u0b26\5\u00e8u\2\u0b26\u00e7"+
		"\3\2\2\2\u0b27\u0b28\7\u0120\2\2\u0b28\u0b29\7j\2\2\u0b29\u0b31\5\u02ec"+
		"\u0177\2\u0b2a\u0b2b\7@\2\2\u0b2b\u0b2c\7<\2\2\u0b2c\u0b31\5\u02ec\u0177"+
		"\2\u0b2d\u0b2e\7\u011b\2\2\u0b2e\u0b2f\7j\2\2\u0b2f\u0b31\5\u041e\u0210"+
		"\2\u0b30\u0b27\3\2\2\2\u0b30\u0b2a\3\2\2\2\u0b30\u0b2d\3\2\2\2\u0b31\u00e9"+
		"\3\2\2\2\u0b32\u0b33\79\2\2\u0b33\u0b34\7\u0181\2\2\u0b34\u0b35\7\u01cc"+
		"\2\2\u0b35\u0b36\5\u03d0\u01e9\2\u0b36\u0b37\7b\2\2\u0b37\u0b38\5\u02ec"+
		"\u0177\2\u0b38\u0b39\5\u00ecw\2\u0b39\u00eb\3\2\2\2\u0b3a\u0b3b\t\21\2"+
		"\2\u0b3b\u0b3e\5\u00eex\2\u0b3c\u0b3e\5\u00e8u\2\u0b3d\u0b3a\3\2\2\2\u0b3d"+
		"\u0b3c\3\2\2\2\u0b3e\u00ed\3\2\2\2\u0b3f\u0b44\5\u00f0y\2\u0b40\u0b41"+
		"\7)\2\2\u0b41\u0b43\5\u00f0y\2\u0b42\u0b40\3\2\2\2\u0b43\u0b46\3\2\2\2"+
		"\u0b44\u0b42\3\2\2\2\u0b44\u0b45\3\2\2\2\u0b45\u00ef\3\2\2\2\u0b46\u0b44"+
		"\3\2\2\2\u0b47\u0b48\7\u0181\2\2\u0b48\u0b49\7\u0224\2\2\u0b49\u0b4b\5"+
		"\u032a\u0196\2\u0b4a\u0b4c\5\u00f2z\2\u0b4b\u0b4a\3\2\2\2\u0b4b\u0b4c"+
		"\3\2\2\2\u0b4c\u0b4e\3\2\2\2\u0b4d\u0b4f\7\u01fe\2\2\u0b4e\u0b4d\3\2\2"+
		"\2\u0b4e\u0b4f\3\2\2\2\u0b4f\u0b66\3\2\2\2\u0b50\u0b51\7\u0181\2\2\u0b51"+
		"\u0b52\7\u0224\2\2\u0b52\u0b54\5\u00fc\177\2\u0b53\u0b55\5\u00f2z\2\u0b54"+
		"\u0b53\3\2\2\2\u0b54\u0b55\3\2\2\2\u0b55\u0b57\3\2\2\2\u0b56\u0b58\7\u01fe"+
		"\2\2\u0b57\u0b56\3\2\2\2\u0b57\u0b58\3\2\2\2\u0b58\u0b66\3\2\2\2\u0b59"+
		"\u0b5a\7K\2\2\u0b5a\u0b5b\7\u0224\2\2\u0b5b\u0b66\5\u013a\u009e\2\u0b5c"+
		"\u0b5d\7K\2\2\u0b5d\u0b5e\7\u0224\2\2\u0b5e\u0b5f\7#\2\2\u0b5f\u0b60\5"+
		"\u0346\u01a4\2\u0b60\u0b61\7$\2\2\u0b61\u0b62\5\u013a\u009e\2\u0b62\u0b66"+
		"\3\2\2\2\u0b63\u0b64\7\u012e\2\2\u0b64\u0b66\5\u0370\u01b9\2\u0b65\u0b47"+
		"\3\2\2\2\u0b65\u0b50\3\2\2\2\u0b65\u0b59\3\2\2\2\u0b65\u0b5c\3\2\2\2\u0b65"+
		"\u0b63\3\2\2\2\u0b66\u00f1\3\2\2\2\u0b67\u0b68\7i\2\2\u0b68\u0b6e\7\u01fc"+
		"\2\2\u0b69\u0b6a\7i\2\2\u0b6a\u0b6b\7x\2\2\u0b6b\u0b6c\7z\2\2\u0b6c\u0b6e"+
		"\5\u03d0\u01e9\2\u0b6d\u0b67\3\2\2\2\u0b6d\u0b69\3\2\2\2\u0b6e\u00f3\3"+
		"\2\2\2\u0b6f\u0b70\5\u00fc\177\2\u0b70\u0b71\7@\2\2\u0b71\u0b72\7<\2\2"+
		"\u0b72\u0b73\5\u02ec\u0177\2\u0b73\u0b80\3\2\2\2\u0b74\u0b75\5\u00fc\177"+
		"\2\u0b75\u0b76\7@\2\2\u0b76\u0b77\7#\2\2\u0b77\u0b78\5\u00f6|\2\u0b78"+
		"\u0b79\7$\2\2\u0b79\u0b80\3\2\2\2\u0b7a\u0b7b\5\u00fc\177\2\u0b7b\u0b7c"+
		"\7\u011b\2\2\u0b7c\u0b7d\7j\2\2\u0b7d\u0b7e\5\u041e\u0210\2\u0b7e\u0b80"+
		"\3\2\2\2\u0b7f\u0b6f\3\2\2\2\u0b7f\u0b74\3\2\2\2\u0b7f\u0b7a\3\2\2\2\u0b80"+
		"\u00f5\3\2\2\2\u0b81\u0b86\5\u00f8}\2\u0b82\u0b83\7)\2\2\u0b83\u0b85\5"+
		"\u00f8}\2\u0b84\u0b82\3\2\2\2\u0b85\u0b88\3\2\2\2\u0b86\u0b84\3\2\2\2"+
		"\u0b86\u0b87\3\2\2\2\u0b87\u00f7\3\2\2\2\u0b88\u0b86\3\2\2\2\u0b89\u0b8a"+
		"\5\u0448\u0225\2\u0b8a\u0b8d\7\33\2\2\u0b8b\u0b8e\7\u0198\2\2\u0b8c\u0b8e"+
		"\5\u00fa~\2\u0b8d\u0b8b\3\2\2\2\u0b8d\u0b8c\3\2\2\2\u0b8e\u00f9\3\2\2"+
		"\2\u0b8f\u0b95\5\u0404\u0203\2\u0b90\u0b95\5\u02d4\u016b\2\u0b91\u0b95"+
		"\5\u0326\u0194\2\u0b92\u0b95\5\u0428\u0215\2\u0b93\u0b95\7\u0223\2\2\u0b94"+
		"\u0b8f\3\2\2\2\u0b94\u0b90\3\2\2\2\u0b94\u0b91\3\2\2\2\u0b94\u0b92\3\2"+
		"\2\2\u0b94\u0b93\3\2\2\2\u0b95\u00fb\3\2\2\2\u0b96\u0b97\5\u032a\u0196"+
		"\2\u0b97\u0b98\5\u045a\u022e\2\u0b98\u00fd\3\2\2\2\u0b99\u0b9a\79\2\2"+
		"\u0b9a\u0b9b\7\u01a2\2\2\u0b9b\u0b9c\5\u0100\u0081\2\u0b9c\u0b9d\5\u0108"+
		"\u0085\2\u0b9d\u00ff\3\2\2\2\u0b9e\u0b9f\5\u034a\u01a6\2\u0b9f\u0ba0\5"+
		"\u0102\u0082\2\u0ba0\u0101\3\2\2\2\u0ba1\u0ba2\7#\2\2\u0ba2\u0ba3\7\24"+
		"\2\2\u0ba3\u0bb6\7$\2\2\u0ba4\u0ba5\7#\2\2\u0ba5\u0ba6\5\u0104\u0083\2"+
		"\u0ba6\u0ba7\7$\2\2\u0ba7\u0bb6\3\2\2\2\u0ba8\u0ba9\7#\2\2\u0ba9\u0baa"+
		"\7x\2\2\u0baa\u0bab\7z\2\2\u0bab\u0bac\5\u0104\u0083\2\u0bac\u0bad\7$"+
		"\2\2\u0bad\u0bb6\3\2\2\2\u0bae\u0baf\7#\2\2\u0baf\u0bb0\5\u0104\u0083"+
		"\2\u0bb0\u0bb1\7x\2\2\u0bb1\u0bb2\7z\2\2\u0bb2\u0bb3\5\u0104\u0083\2\u0bb3"+
		"\u0bb4\7$\2\2\u0bb4\u0bb6\3\2\2\2\u0bb5\u0ba1\3\2\2\2\u0bb5\u0ba4\3\2"+
		"\2\2\u0bb5\u0ba8\3\2\2\2\u0bb5\u0bae\3\2\2\2\u0bb6\u0103\3\2\2\2\u0bb7"+
		"\u0bbc\5\u0106\u0084\2\u0bb8\u0bb9\7)\2\2\u0bb9\u0bbb\5\u0106\u0084\2"+
		"\u0bba\u0bb8\3\2\2\2\u0bbb\u0bbe\3\2\2\2\u0bbc\u0bba\3\2\2\2\u0bbc\u0bbd"+
		"\3\2\2\2\u0bbd\u0105\3\2\2\2\u0bbe\u0bbc\3\2\2\2\u0bbf\u0bc0\5\u045c\u022f"+
		"\2\u0bc0\u0107\3\2\2\2\u0bc1\u0bc2\7\u0120\2\2\u0bc2\u0bc3\7j\2\2\u0bc3"+
		"\u0bcb\5\u02ec\u0177\2\u0bc4\u0bc5\7\u011b\2\2\u0bc5\u0bc6\7j\2\2\u0bc6"+
		"\u0bcb\5\u041e\u0210\2\u0bc7\u0bc8\7@\2\2\u0bc8\u0bc9\7<\2\2\u0bc9\u0bcb"+
		"\5\u02e4\u0173\2\u0bca\u0bc1\3\2\2\2\u0bca\u0bc4\3\2\2\2\u0bca\u0bc7\3"+
		"\2\2\2\u0bcb\u0109\3\2\2\2\u0bcc\u0bcd\79\2\2\u0bcd\u0bce\7\u00a9\2\2"+
		"\u0bce\u0bcf\5\u03d0\u01e9\2\u0bcf\u0bd0\5\u010c\u0087\2\u0bd0\u010b\3"+
		"\2\2\2\u0bd1\u0bd2\7\u01ef\2\2\u0bd2\u0bdd\7\u017b\2\2\u0bd3\u0bd4\7\u0120"+
		"\2\2\u0bd4\u0bd5\7j\2\2\u0bd5\u0bdd\5\u02ec\u0177\2\u0bd6\u0bd7\7\u011b"+
		"\2\2\u0bd7\u0bd8\7j\2\2\u0bd8\u0bdd\5\u041e\u0210\2\u0bd9\u0bda\7@\2\2"+
		"\u0bda\u0bdb\7<\2\2\u0bdb\u0bdd\5\u02e4\u0173\2\u0bdc\u0bd1\3\2\2\2\u0bdc"+
		"\u0bd3\3\2\2\2\u0bdc\u0bd6\3\2\2\2\u0bdc\u0bd9\3\2\2\2\u0bdd\u010d\3\2"+
		"\2\2\u0bde\u0bdf\79\2\2\u0bdf\u0be0\7\u01ab\2\2\u0be0\u0be1\5\u03d0\u01e9"+
		"\2\u0be1\u0be2\5\u0110\u0089\2\u0be2\u010f\3\2\2\2\u0be3\u0be4\7\u0120"+
		"\2\2\u0be4\u0be5\7j\2\2\u0be5\u0bed\5\u02ec\u0177\2\u0be6\u0be7\7\u011b"+
		"\2\2\u0be7\u0be8\7j\2\2\u0be8\u0bed\5\u041e\u0210\2\u0be9\u0bea\7@\2\2"+
		"\u0bea\u0beb\7<\2\2\u0beb\u0bed\5\u02e4\u0173\2\u0bec\u0be3\3\2\2\2\u0bec"+
		"\u0be6\3\2\2\2\u0bec\u0be9\3\2\2\2\u0bed\u0111\3\2\2\2\u0bee\u0bef\79"+
		"\2\2\u0bef\u0bf0\7\u0098\2\2\u0bf0\u0bf2\7\u00df\2\2\u0bf1\u0bf3\5\u0124"+
		"\u0093\2\u0bf2\u0bf1\3\2\2\2\u0bf2\u0bf3\3\2\2\2\u0bf3\u0bf4\3\2\2\2\u0bf4"+
		"\u0bf5\5\u0114\u008b\2\u0bf5\u0113\3\2\2\2\u0bf6\u0bf7\7=\2\2\u0bf7\u0bf8"+
		"\5\u011e\u0090\2\u0bf8\u0bf9\7e\2\2\u0bf9\u0bfa\5\u011c\u008f\2\u0bfa"+
		"\u0bfb\7j\2\2\u0bfb\u0bfd\5\u0118\u008d\2\u0bfc\u0bfe\5\u0116\u008c\2"+
		"\u0bfd\u0bfc\3\2\2\2\u0bfd\u0bfe\3\2\2\2\u0bfe\u0c15\3\2\2\2\u0bff\u0c00"+
		"\7>\2\2\u0c00\u0c01\5\u011e\u0090\2\u0c01\u0c02\7e\2\2\u0c02\u0c03\5\u011c"+
		"\u008f\2\u0c03\u0c04\7Y\2\2\u0c04\u0c06\5\u0118\u008d\2\u0c05\u0c07\5"+
		"\u00d8m\2\u0c06\u0c05\3\2\2\2\u0c06\u0c07\3\2\2\2\u0c07\u0c15\3\2\2\2"+
		"\u0c08\u0c09\7>\2\2\u0c09\u0c0a\7=\2\2\u0c0a\u0c0b\7\u00de\2\2\u0c0b\u0c0c"+
		"\7i\2\2\u0c0c\u0c0d\5\u011e\u0090\2\u0c0d\u0c0e\7e\2\2\u0c0e\u0c0f\5\u011c"+
		"\u008f\2\u0c0f\u0c10\7Y\2\2\u0c10\u0c12\5\u0118\u008d\2\u0c11\u0c13\5"+
		"\u00d8m\2\u0c12\u0c11\3\2\2\2\u0c12\u0c13\3\2\2\2\u0c13\u0c15\3\2\2\2"+
		"\u0c14\u0bf6\3\2\2\2\u0c14\u0bff\3\2\2\2\u0c14\u0c08\3\2\2\2\u0c15\u0115"+
		"\3\2\2\2\u0c16\u0c17\7Q\2\2\u0c17\u0c18\7=\2\2\u0c18\u0c19\7\u00de\2\2"+
		"\u0c19\u0117\3\2\2\2\u0c1a\u0c1f\5\u011a\u008e\2\u0c1b\u0c1c\7)\2\2\u0c1c"+
		"\u0c1e\5\u011a\u008e\2\u0c1d\u0c1b\3\2\2\2\u0c1e\u0c21\3\2\2\2\u0c1f\u0c1d"+
		"\3\2\2\2\u0c1f\u0c20\3\2\2\2\u0c20\u0119\3\2\2\2\u0c21\u0c1f\3\2\2\2\u0c22"+
		"\u0c24\7y\2\2\u0c23\u0c22\3\2\2\2\u0c23\u0c24\3\2\2\2\u0c24\u0c25\3\2"+
		"\2\2\u0c25\u0c26\5\u041e\u0210\2\u0c26\u011b\3\2\2\2\u0c27\u0c28\t\22"+
		"\2\2\u0c28\u011d\3\2\2\2\u0c29\u0c39\5\u0120\u0091\2\u0c2a\u0c39\7u\2"+
		"\2\u0c2b\u0c2c\7u\2\2\u0c2c\u0c39\7\u00df\2\2\u0c2d\u0c2e\7u\2\2\u0c2e"+
		"\u0c2f\7#\2\2\u0c2f\u0c30\5,\27\2\u0c30\u0c31\7$\2\2\u0c31\u0c39\3\2\2"+
		"\2\u0c32\u0c33\7u\2\2\u0c33\u0c34\7\u00df\2\2\u0c34\u0c35\7#\2\2\u0c35"+
		"\u0c36\5,\27\2\u0c36\u0c37\7$\2\2\u0c37\u0c39\3\2\2\2\u0c38\u0c29\3\2"+
		"\2\2\u0c38\u0c2a\3\2\2\2\u0c38\u0c2b\3\2\2\2\u0c38\u0c2d\3\2\2\2\u0c38"+
		"\u0c32\3\2\2\2\u0c39\u011f\3\2\2\2\u0c3a\u0c3f\5\u0122\u0092\2\u0c3b\u0c3c"+
		"\7)\2\2\u0c3c\u0c3e\5\u0122\u0092\2\u0c3d\u0c3b\3\2\2\2\u0c3e\u0c41\3"+
		"\2\2\2\u0c3f\u0c3d\3\2\2\2\u0c3f\u0c40\3\2\2\2\u0c40\u0121\3\2\2\2\u0c41"+
		"\u0c3f\3\2\2\2\u0c42\u0c44\7\64\2\2\u0c43\u0c45\5\u043a\u021e\2\u0c44"+
		"\u0c43\3\2\2\2\u0c44\u0c45\3\2\2\2\u0c45\u0c53\3\2\2\2\u0c46\u0c48\7\u00e1"+
		"\2\2\u0c47\u0c49\5\u043a\u021e\2\u0c48\u0c47\3\2\2\2\u0c48\u0c49\3\2\2"+
		"\2\u0c49\u0c53\3\2\2\2\u0c4a\u0c4c\78\2\2\u0c4b\u0c4d\5\u043a\u021e\2"+
		"\u0c4c\u0c4b\3\2\2\2\u0c4c\u0c4d\3\2\2\2\u0c4d\u0c53\3\2\2\2\u0c4e\u0c50"+
		"\5\u0350\u01a9\2\u0c4f\u0c51\5\u043a\u021e\2\u0c50\u0c4f\3\2\2\2\u0c50"+
		"\u0c51\3\2\2\2\u0c51\u0c53\3\2\2\2\u0c52\u0c42\3\2\2\2\u0c52\u0c46\3\2"+
		"\2\2\u0c52\u0c4a\3\2\2\2\u0c52\u0c4e\3\2\2\2\u0c53\u0123\3\2\2\2\u0c54"+
		"\u0c56\5\u0126\u0094\2\u0c55\u0c54\3\2\2\2\u0c56\u0c57\3\2\2\2\u0c57\u0c55"+
		"\3\2\2\2\u0c57\u0c58\3\2\2\2\u0c58\u0125\3\2\2\2\u0c59\u0c5a\7t\2\2\u0c5a"+
		"\u0c5b\7<\2\2\u0c5b\u0c60\5\u0128\u0095\2\u0c5c\u0c5d\7i\2\2\u0c5d\u0c5e"+
		"\t\23\2\2\u0c5e\u0c60\5\u0466\u0234\2\u0c5f\u0c59\3\2\2\2\u0c5f\u0c5c"+
		"\3\2\2\2\u0c60\u0127\3\2\2\2\u0c61\u0c62\5\u03d4\u01eb\2\u0c62\u0129\3"+
		"\2\2\2\u0c63\u0c64\79\2\2\u0c64\u0c65\7\u00f7\2\2\u0c65\u0c66\5\u012c"+
		"\u0097\2\u0c66\u012b\3\2\2\2\u0c67\u0c68\5\u03d0\u01e9\2\u0c68\u0c69\t"+
		"\17\2\2\u0c69\u0c6a\7n\2\2\u0c6a\u0c6b\7o\2\2\u0c6b\u0c9a\3\2\2\2\u0c6c"+
		"\u0c6d\5\u03d0\u01e9\2\u0c6d\u0c6e\7?\2\2\u0c6e\u0c6f\5f\64\2\u0c6f\u0c9a"+
		"\3\2\2\2\u0c70\u0c71\5\u03d0\u01e9\2\u0c71\u0c72\7:\2\2\u0c72\u0c75\7"+
		"D\2\2\u0c73\u0c74\7f\2\2\u0c74\u0c76\7r\2\2\u0c75\u0c73\3\2\2\2\u0c75"+
		"\u0c76\3\2\2\2\u0c76\u0c77\3\2\2\2\u0c77\u0c79\5\u02ec\u0177\2\u0c78\u0c7a"+
		"\5\u00d8m\2\u0c79\u0c78\3\2\2\2\u0c79\u0c7a\3\2\2\2\u0c7a\u0c9a\3\2\2"+
		"\2\u0c7b\u0c7c\5\u03d0\u01e9\2\u0c7c\u0c7d\7\u0136\2\2\u0c7d\u0c7e\7D"+
		"\2\2\u0c7e\u0c7f\5\u02ec\u0177\2\u0c7f\u0c9a\3\2\2\2\u0c80\u0c81\5\u03d0"+
		"\u01e9\2\u0c81\u0c82\7\u0120\2\2\u0c82\u0c83\7D\2\2\u0c83\u0c84\5\u012e"+
		"\u0098\2\u0c84\u0c85\7j\2\2\u0c85\u0c86\5\u012e\u0098\2\u0c86\u0c9a\3"+
		"\2\2\2\u0c87\u0c88\5\u03d0\u01e9\2\u0c88\u0c89\7\u011b\2\2\u0c89\u0c8a"+
		"\7j\2\2\u0c8a\u0c8b\5\u041e\u0210\2\u0c8b\u0c9a\3\2\2\2\u0c8c\u0c8d\5"+
		"\u03d0\u01e9\2\u0c8d\u0c8e\7\u0120\2\2\u0c8e\u0c8f\7j\2\2\u0c8f\u0c90"+
		"\5\u03d0\u01e9\2\u0c90\u0c9a\3\2\2\2\u0c91\u0c92\5\u03d0\u01e9\2\u0c92"+
		"\u0c93\7@\2\2\u0c93\u0c94\7<\2\2\u0c94\u0c95\5\u02ec\u0177\2\u0c95\u0c9a"+
		"\3\2\2\2\u0c96\u0c97\5\u03d0\u01e9\2\u0c97\u0c98\5\u00e2r\2\u0c98\u0c9a"+
		"\3\2\2\2\u0c99\u0c67\3\2\2\2\u0c99\u0c6c\3\2\2\2\u0c99\u0c70\3\2\2\2\u0c99"+
		"\u0c7b\3\2\2\2\u0c99\u0c80\3\2\2\2\u0c99\u0c87\3\2\2\2\u0c99\u0c8c\3\2"+
		"\2\2\u0c99\u0c91\3\2\2\2\u0c99\u0c96\3\2\2\2\u0c9a\u012d\3\2\2\2\u0c9b"+
		"\u0c9c\5\u0350\u01a9\2\u0c9c\u012f\3\2\2\2\u0c9d\u0c9e\79\2\2\u0c9e\u0c9f"+
		"\7\u01c8\2\2\u0c9f\u0ca0\7L\2\2\u0ca0\u0ca1\5\u0134\u009b\2\u0ca1\u0ca2"+
		"\5\u0132\u009a\2\u0ca2\u0131\3\2\2\2\u0ca3\u0cad\7\u009b\2\2\u0ca4\u0ca5"+
		"\7\u009a\2\2\u0ca5\u0cad\t\f\2\2\u0ca6\u0ca7\7\u011b\2\2\u0ca7\u0ca8\7"+
		"j\2\2\u0ca8\u0cad\5\u041e\u0210\2\u0ca9\u0caa\7\u0120\2\2\u0caa\u0cab"+
		"\7j\2\2\u0cab\u0cad\5\u0134\u009b\2\u0cac\u0ca3\3\2\2\2\u0cac\u0ca4\3"+
		"\2\2\2\u0cac\u0ca6\3\2\2\2\u0cac\u0ca9\3\2\2\2\u0cad\u0133\3\2\2\2\u0cae"+
		"\u0caf\5\u0350\u01a9\2\u0caf\u0135\3\2\2\2\u0cb0\u0cb1\79\2\2\u0cb1\u0cb2"+
		"\7\u00fb\2\2\u0cb2\u0cb3\5\u02ec\u0177\2\u0cb3\u0cb4\5\u0138\u009d\2\u0cb4"+
		"\u0137\3\2\2\2\u0cb5\u0cb6\7\66\2\2\u0cb6\u0d2a\5\u0140\u00a1\2\u0cb7"+
		"\u0cb8\t\21\2\2\u0cb8\u0cb9\7\u01a0\2\2\u0cb9\u0cba\7\u01da\2\2\u0cba"+
		"\u0d2a\5\u02ec\u0177\2\u0cbb\u0cbc\t\21\2\2\u0cbc\u0cbd\7\u01a2\2\2\u0cbd"+
		"\u0d2a\5\u013e\u00a0\2\u0cbe\u0cbf\t\21\2\2\u0cbf\u0cc0\7V\2\2\u0cc0\u0cc1"+
		"\7#\2\2\u0cc1\u0cc2\5\u0370\u01b9\2\u0cc2\u0cc3\7d\2\2\u0cc3\u0cc4\5\u0370"+
		"\u01b9\2\u0cc4\u0cc5\7$\2\2\u0cc5\u0d2a\3\2\2\2\u0cc6\u0cc7\t\21\2\2\u0cc7"+
		"\u0cc8\7\u00a9\2\2\u0cc8\u0d2a\5\u03d0\u01e9\2\u0cc9\u0cca\t\21\2\2\u0cca"+
		"\u0ccb\7\u01ab\2\2\u0ccb\u0d2a\5\u03d0\u01e9\2\u0ccc\u0ccd\t\21\2\2\u0ccd"+
		"\u0cce\7\u00f7\2\2\u0cce\u0d2a\5\u0370\u01b9\2\u0ccf\u0cd0\t\21\2\2\u0cd0"+
		"\u0cd1\7K\2\2\u0cd1\u0d2a\5\u013a\u009e\2\u0cd2\u0cd4\t\21\2\2\u0cd3\u0cd5"+
		"\7\u01df\2\2\u0cd4\u0cd3\3\2\2\2\u0cd4\u0cd5\3\2\2\2\u0cd5\u0cd6\3\2\2"+
		"\2\u0cd6\u0cd7\7\u010c\2\2\u0cd7\u0d2a\5\u02ec\u0177\2\u0cd8\u0cd9\t\21"+
		"\2\2\u0cd9\u0cda\7\u0181\2\2\u0cda\u0d2a\5\u00fc\177\2\u0cdb\u0cdc\t\21"+
		"\2\2\u0cdc\u0cdd\7\u0181\2\2\u0cdd\u0cde\t\24\2\2\u0cde\u0cdf\5\u03d0"+
		"\u01e9\2\u0cdf\u0ce0\7b\2\2\u0ce0\u0ce1\5\36\20\2\u0ce1\u0d2a\3\2\2\2"+
		"\u0ce2\u0ce3\t\21\2\2\u0ce3\u0ce4\7M\2\2\u0ce4\u0d2a\5\u013a\u009e\2\u0ce5"+
		"\u0ce6\t\21\2\2\u0ce6\u0ce7\7\u0125\2\2\u0ce7\u0d2a\5\u013a\u009e\2\u0ce8"+
		"\u0ce9\t\21\2\2\u0ce9\u0cea\7<\2\2\u0cea\u0d2a\5\u02ec\u0177\2\u0ceb\u0cec"+
		"\t\21\2\2\u0cec\u0ced\7\u01c8\2\2\u0ced\u0cee\7L\2\2\u0cee\u0d2a\5\u02ec"+
		"\u0177\2\u0cef\u0cf0\t\21\2\2\u0cf0\u0cf1\7A\2\2\u0cf1\u0d2a\5\u03d0\u01e9"+
		"\2\u0cf2\u0cf3\t\21\2\2\u0cf3\u0cf4\7\u00b2\2\2\u0cf4\u0cf5\7\u01fc\2"+
		"\2\u0cf5\u0cf6\7\u01e0\2\2\u0cf6\u0d2a\5\u03d0\u01e9\2\u0cf7\u0cf8\t\21"+
		"\2\2\u0cf8\u0cf9\7\u00b2\2\2\u0cf9\u0cfa\7\u01fc\2\2\u0cfa\u0cfb\7\u01b7"+
		"\2\2\u0cfb\u0d2a\5\u03d0\u01e9\2\u0cfc\u0cfd\t\21\2\2\u0cfd\u0cfe\7\u00b2"+
		"\2\2\u0cfe\u0cff\7\u01fc\2\2\u0cff\u0d00\7\u020b\2\2\u0d00\u0d2a\5\u03d0"+
		"\u01e9\2\u0d01\u0d02\t\21\2\2\u0d02\u0d03\7\u00b2\2\2\u0d03\u0d04\7\u01fc"+
		"\2\2\u0d04\u0d05\7\u01b4\2\2\u0d05\u0d2a\5\u03d0\u01e9\2\u0d06\u0d07\t"+
		"\21\2\2\u0d07\u0d08\7\u0128\2\2\u0d08\u0d2a\5\u03d0\u01e9\2\u0d09\u0d0a"+
		"\t\21\2\2\u0d0a\u0d0b\7N\2\2\u0d0b\u0d2a\5\u03d0\u01e9\2\u0d0c\u0d0d\t"+
		"\21\2\2\u0d0d\u0d0e\7\u0180\2\2\u0d0e\u0d0f\7N\2\2\u0d0f\u0d2a\5\u03d0"+
		"\u01e9\2\u0d10\u0d11\t\21\2\2\u0d11\u0d12\7G\2\2\u0d12\u0d13\7A\2\2\u0d13"+
		"\u0d2a\5\u03d0\u01e9\2\u0d14\u0d15\t\21\2\2\u0d15\u0d16\7G\2\2\u0d16\u0d17"+
		"\7\u00f1\2\2\u0d17\u0d18\7\u021a\2\2\u0d18\u0d2a\5\u02ec\u0177\2\u0d19"+
		"\u0d1a\t\21\2\2\u0d1a\u0d1b\7\u01fa\2\2\u0d1b\u0d2a\5\u02ec\u0177\2\u0d1c"+
		"\u0d1d\t\21\2\2\u0d1d\u0d1e\7\u020f\2\2\u0d1e\u0d1f\7i\2\2\u0d1f\u0d20"+
		"\5\u0370\u01b9\2\u0d20\u0d21\7\u010c\2\2\u0d21\u0d22\5\u02ec\u0177\2\u0d22"+
		"\u0d2a\3\2\2\2\u0d23\u0d24\t\21\2\2\u0d24\u0d25\7\u00ae\2\2\u0d25\u0d2a"+
		"\5\u0370\u01b9\2\u0d26\u0d27\7@\2\2\u0d27\u0d28\7<\2\2\u0d28\u0d2a\5\u02ec"+
		"\u0177\2\u0d29\u0cb5\3\2\2\2\u0d29\u0cb7\3\2\2\2\u0d29\u0cbb\3\2\2\2\u0d29"+
		"\u0cbe\3\2\2\2\u0d29\u0cc6\3\2\2\2\u0d29\u0cc9\3\2\2\2\u0d29\u0ccc\3\2"+
		"\2\2\u0d29\u0ccf\3\2\2\2\u0d29\u0cd2\3\2\2\2\u0d29\u0cd8\3\2\2\2\u0d29"+
		"\u0cdb\3\2\2\2\u0d29\u0ce2\3\2\2\2\u0d29\u0ce5\3\2\2\2\u0d29\u0ce8\3\2"+
		"\2\2\u0d29\u0ceb\3\2\2\2\u0d29\u0cef\3\2\2\2\u0d29\u0cf2\3\2\2\2\u0d29"+
		"\u0cf7\3\2\2\2\u0d29\u0cfc\3\2\2\2\u0d29\u0d01\3\2\2\2\u0d29\u0d06\3\2"+
		"\2\2\u0d29\u0d09\3\2\2\2\u0d29\u0d0c\3\2\2\2\u0d29\u0d10\3\2\2\2\u0d29"+
		"\u0d14\3\2\2\2\u0d29\u0d19\3\2\2\2\u0d29\u0d1c\3\2\2\2\u0d29\u0d23\3\2"+
		"\2\2\u0d29\u0d26\3\2\2\2\u0d2a\u0139\3\2\2\2\u0d2b\u0d2c\5\u034a\u01a6"+
		"\2\u0d2c\u0d2d\5\u013c\u009f\2\u0d2d\u0d34\3\2\2\2\u0d2e\u0d34\5\u02e2"+
		"\u0172\2\u0d2f\u0d34\5\u0350\u01a9\2\u0d30\u0d31\5\u0350\u01a9\2\u0d31"+
		"\u0d32\5\u0306\u0184\2\u0d32\u0d34\3\2\2\2\u0d33\u0d2b\3\2\2\2\u0d33\u0d2e"+
		"\3\2\2\2\u0d33\u0d2f\3\2\2\2\u0d33\u0d30\3\2\2\2\u0d34\u013b\3\2\2\2\u0d35"+
		"\u0d36\7#\2\2\u0d36\u0d37\5\u0460\u0231\2\u0d37\u0d38\7$\2\2\u0d38\u0d3c"+
		"\3\2\2\2\u0d39\u0d3a\7#\2\2\u0d3a\u0d3c\7$\2\2\u0d3b\u0d35\3\2\2\2\u0d3b"+
		"\u0d39\3\2\2\2\u0d3c\u013d\3\2\2\2\u0d3d\u0d3e\5\u034a\u01a6\2\u0d3e\u0d3f"+
		"\5\u0102\u0082\2\u0d3f\u013f\3\2\2\2\u0d40\u0d42\5\u0142\u00a2\2\u0d41"+
		"\u0d40\3\2\2\2\u0d42\u0d45\3\2\2\2\u0d43\u0d41\3\2\2\2\u0d43\u0d44\3\2"+
		"\2\2\u0d44\u0141\3\2\2\2\u0d45\u0d43\3\2\2\2\u0d46\u0d49\7j\2\2\u0d47"+
		"\u0d4a\5\u0418\u020d\2\u0d48\u0d4a\7\u0223\2\2\u0d49\u0d47\3\2\2\2\u0d49"+
		"\u0d48\3\2\2\2\u0d4a\u0143\3\2\2\2\u0d4b\u0d4c\79\2\2\u0d4c\u0d4d\7G\2"+
		"\2\u0d4d\u0d4e\7\u00f1\2\2\u0d4e\u0d4f\7\u021a\2\2\u0d4f\u0d50\5\u0350"+
		"\u01a9\2\u0d50\u0d51\5\u0146\u00a4\2\u0d51\u0145\3\2\2\2\u0d52\u0d54\5"+
		"\u014c\u00a7\2\u0d53\u0d52\3\2\2\2\u0d53\u0d54\3\2\2\2\u0d54\u0d55\3\2"+
		"\2\2\u0d55\u0d5e\5\u00d0i\2\u0d56\u0d5e\5\u014c\u00a7\2\u0d57\u0d58\7"+
		"\u0120\2\2\u0d58\u0d59\7j\2\2\u0d59\u0d5e\5\u02ec\u0177\2\u0d5a\u0d5b"+
		"\7\u011b\2\2\u0d5b\u0d5c\7j\2\2\u0d5c\u0d5e\5\u041e\u0210\2\u0d5d\u0d53"+
		"\3\2\2\2\u0d5d\u0d56\3\2\2\2\u0d5d\u0d57\3\2\2\2\u0d5d\u0d5a\3\2\2\2\u0d5e"+
		"\u0147\3\2\2\2\u0d5f\u0d60\5\u00d6l\2\u0d60\u0d61\5\u014a\u00a6\2\u0d61"+
		"\u0149\3\2\2\2\u0d62\u0d63\5\u034c\u01a7\2\u0d63\u014b\3\2\2\2\u0d64\u0d66"+
		"\5\u014e\u00a8\2\u0d65\u0d64\3\2\2\2\u0d66\u0d67\3\2\2\2\u0d67\u0d65\3"+
		"\2\2\2\u0d67\u0d68\3\2\2\2\u0d68\u014d\3\2\2\2\u0d69\u0d6a\7\u01d3\2\2"+
		"\u0d6a\u0d72\5\u0150\u00a9\2\u0d6b\u0d6c\7\u00dd\2\2\u0d6c\u0d72\7\u01d3"+
		"\2\2\u0d6d\u0d6e\7\u0212\2\2\u0d6e\u0d72\5\u0150\u00a9\2\u0d6f\u0d70\7"+
		"\u00dd\2\2\u0d70\u0d72\7\u0212\2\2\u0d71\u0d69\3\2\2\2\u0d71\u0d6b\3\2"+
		"\2\2\u0d71\u0d6d\3\2\2\2\u0d71\u0d6f\3\2\2\2\u0d72\u014f\3\2\2\2\u0d73"+
		"\u0d74\5\u03d0\u01e9\2\u0d74\u0151\3\2\2\2\u0d75\u0d76\79\2\2\u0d76\u0d77"+
		"\7y\2\2\u0d77\u0d78\5\u0154\u00ab\2\u0d78\u0153\3\2\2\2\u0d79\u0d7a\5"+
		"\u041e\u0210\2\u0d7a\u0d7b\t\21\2\2\u0d7b\u0d7c\7\u00e6\2\2\u0d7c\u0d7d"+
		"\5\u0466\u0234\2\u0d7d\u0d84\3\2\2\2\u0d7e\u0d7f\5\u041e\u0210\2\u0d7f"+
		"\u0d80\7\u0120\2\2\u0d80\u0d81\7j\2\2\u0d81\u0d82\5\u041e\u0210\2\u0d82"+
		"\u0d84\3\2\2\2\u0d83\u0d79\3\2\2\2\u0d83\u0d7e\3\2\2\2\u0d84\u0155\3\2"+
		"\2\2\u0d85\u0d87\79\2\2\u0d86\u0d88\7\u01df\2\2\u0d87\u0d86\3\2\2\2\u0d87"+
		"\u0d88\3\2\2\2\u0d88\u0d89\3\2\2\2\u0d89\u0d96\7\u010c\2\2\u0d8a\u0d8b"+
		"\5\u0350\u01a9\2\u0d8b\u0d8c\7\u0120\2\2\u0d8c\u0d8d\7j\2\2\u0d8d\u0d8e"+
		"\5\u0350\u01a9\2\u0d8e\u0d97\3\2\2\2\u0d8f\u0d90\7\u011b\2\2\u0d90\u0d94"+
		"\7j\2\2\u0d91\u0d95\5\u0410\u0209\2\u0d92\u0d95\7\u00a1\2\2\u0d93\u0d95"+
		"\7\u012a\2\2\u0d94\u0d91\3\2\2\2\u0d94\u0d92\3\2\2\2\u0d94\u0d93\3\2\2"+
		"\2\u0d95\u0d97\3\2\2\2\u0d96\u0d8a\3\2\2\2\u0d96\u0d8f\3\2\2\2\u0d97\u0157"+
		"\3\2\2\2\u0d98\u0d99\79\2\2\u0d99\u0d9a\7\u010d\2\2\u0d9a\u0d9b\7\u0116"+
		"\2\2\u0d9b\u0d9c\5\u0428\u0215\2\u0d9c\u0d9d\7\u011b\2\2\u0d9d\u0da1\7"+
		"j\2\2\u0d9e\u0da2\5\u0410\u0209\2\u0d9f\u0da2\7\u00a1\2\2\u0da0\u0da2"+
		"\7\u012a\2\2\u0da1\u0d9e\3\2\2\2\u0da1\u0d9f\3\2\2\2\u0da1\u0da0\3\2\2"+
		"\2\u0da2\u0159\3\2\2\2\u0da3\u0da4\79\2\2\u0da4\u0da5\7\u0180\2\2\u0da5"+
		"\u0da6\7N\2\2\u0da6\u0da7\5\u015c\u00af\2\u0da7\u015b\3\2\2\2\u0da8\u0da9"+
		"\7f\2\2\u0da9\u0dab\7r\2\2\u0daa\u0da8\3\2\2\2\u0daa\u0dab\3\2\2\2\u0dab"+
		"\u0dac\3\2\2\2\u0dac\u0dad\5\u034e\u01a8\2\u0dad\u0dae\5\u00c8e\2\u0dae"+
		"\u0de3\3\2\2\2\u0daf\u0db0\5\u034e\u01a8\2\u0db0\u0db1\7\u00f6\2\2\u0db1"+
		"\u0db2\7e\2\2\u0db2\u0db3\7\u00fb\2\2\u0db3\u0db4\5\u02ec\u0177\2\u0db4"+
		"\u0de3\3\2\2\2\u0db5\u0db6\7f\2\2\u0db6\u0db8\7r\2\2\u0db7\u0db5\3\2\2"+
		"\2\u0db7\u0db8\3\2\2\2\u0db8\u0db9\3\2\2\2\u0db9\u0dba\5\u034e\u01a8\2"+
		"\u0dba\u0dbc\7\u0120\2\2\u0dbb\u0dbd\7B\2\2\u0dbc\u0dbb\3\2\2\2\u0dbc"+
		"\u0dbd\3\2\2\2\u0dbd\u0dbe\3\2\2\2\u0dbe\u0dbf\5\u02e8\u0175\2\u0dbf\u0dc0"+
		"\7j\2\2\u0dc0\u0dc1\5\u02e8\u0175\2\u0dc1\u0de3\3\2\2\2\u0dc2\u0dc3\7"+
		"f\2\2\u0dc3\u0dc5\7r\2\2\u0dc4\u0dc2\3\2\2\2\u0dc4\u0dc5\3\2\2\2\u0dc5"+
		"\u0dc6\3\2\2\2\u0dc6\u0dc7\5\u034e\u01a8\2\u0dc7\u0dc8\7\u0120\2\2\u0dc8"+
		"\u0dc9\7j\2\2\u0dc9\u0dca\5\u034e\u01a8\2\u0dca\u0de3\3\2\2\2\u0dcb\u0dcc"+
		"\7f\2\2\u0dcc\u0dce\7r\2\2\u0dcd\u0dcb\3\2\2\2\u0dcd\u0dce\3\2\2\2\u0dce"+
		"\u0dcf\3\2\2\2\u0dcf\u0dd0\5\u034e\u01a8\2\u0dd0\u0dd1\7@\2\2\u0dd1\u0dd2"+
		"\7<\2\2\u0dd2\u0dd3\5\u02e4\u0173\2\u0dd3\u0de3\3\2\2\2\u0dd4\u0dd5\7"+
		"u\2\2\u0dd5\u0dd6\7t\2\2\u0dd6\u0dd7\7\u012f\2\2\u0dd7\u0dd8\5\u02ec\u0177"+
		"\2\u0dd8\u0dd9\7\u011a\2\2\u0dd9\u0dda\7z\2\2\u0dda\u0ddb\5\u0466\u0234"+
		"\2\u0ddb\u0ddc\3\2\2\2\u0ddc\u0ddd\7@\2\2\u0ddd\u0dde\7\u012f\2\2\u0dde"+
		"\u0de0\5\u02ec\u0177\2\u0ddf\u0de1\7\u018d\2\2\u0de0\u0ddf\3\2\2\2\u0de0"+
		"\u0de1\3\2\2\2\u0de1\u0de3\3\2\2\2\u0de2\u0daa\3\2\2\2\u0de2\u0daf\3\2"+
		"\2\2\u0de2\u0db7\3\2\2\2\u0de2\u0dc4\3\2\2\2\u0de2\u0dcd\3\2\2\2\u0de2"+
		"\u0dd4\3\2\2\2\u0de3\u015d\3\2\2\2\u0de4\u0de5\7\u01cb\2\2\u0de5\u0de6"+
		"\5\u02ec\u0177\2\u0de6\u0de7\5\u0160\u00b1\2\u0de7\u0dec\7\u01c6\2\2\u0de8"+
		"\u0de9\7Q\2\2\u0de9\u0ded\7\u01d7\2\2\u0dea\u0deb\7\u0138\2\2\u0deb\u0ded"+
		"\7\u01d7\2\2\u0dec\u0de8\3\2\2\2\u0dec\u0dea\3\2\2\2\u0dec\u0ded\3\2\2"+
		"\2\u0ded\u0dee\3\2\2\2\u0dee\u0def\7i\2\2\u0def\u0df0\5\u04ac\u0257\2"+
		"\u0df0\u015f\3\2\2\2\u0df1\u0df3\5\u0162\u00b2\2\u0df2\u0df1\3\2\2\2\u0df3"+
		"\u0df6\3\2\2\2\u0df4\u0df2\3\2\2\2\u0df4\u0df5\3\2\2\2\u0df5\u0161\3\2"+
		"\2\2\u0df6\u0df4\3\2\2\2\u0df7\u0df8\7\u00dd\2\2\u0df8\u0dfd\7\u01f6\2"+
		"\2\u0df9\u0dfd\7\u01f6\2\2\u0dfa\u0dfd\7\u00d0\2\2\u0dfb\u0dfd\7\u01b9"+
		"\2\2\u0dfc\u0df7\3\2\2\2\u0dfc\u0df9\3\2\2\2\u0dfc\u0dfa\3\2\2\2\u0dfc"+
		"\u0dfb\3\2\2\2\u0dfd\u0163\3\2\2\2\u0dfe\u0dff\7\u00f9\2\2\u0dff\u0e00"+
		"\5\u02ec\u0177\2\u0e00\u0e01\5\4\3\2\u0e01\u0165\3\2\2\2\u0e02\u0e04\7"+
		"8\2\2\u0e03\u0e05\7\u0133\2\2\u0e04\u0e03\3\2\2\2\u0e04\u0e05\3\2\2\2"+
		"\u0e05\u0e06\3\2\2\2\u0e06\u0e07\7\u0180\2\2\u0e07\u0e0b\7N\2\2\u0e08"+
		"\u0e09\7f\2\2\u0e09\u0e0a\7n\2\2\u0e0a\u0e0c\7r\2\2\u0e0b\u0e08\3\2\2"+
		"\2\u0e0b\u0e0c\3\2\2\2\u0e0c\u0e0d\3\2\2\2\u0e0d\u0e0e\5\u0168\u00b5\2"+
		"\u0e0e\u0e0f\7d\2\2\u0e0f\u0e15\5\u04ac\u0257\2\u0e10\u0e11\7Q\2\2\u0e11"+
		"\u0e16\7\u00f1\2\2\u0e12\u0e13\7Q\2\2\u0e13\u0e14\7\u00dd\2\2\u0e14\u0e16"+
		"\7\u00f1\2\2\u0e15\u0e10\3\2\2\2\u0e15\u0e12\3\2\2\2\u0e15\u0e16\3\2\2"+
		"\2\u0e16\u0167\3\2\2\2\u0e17\u0e19\5\u034e\u01a8\2\u0e18\u0e1a\5\u043a"+
		"\u021e\2\u0e19\u0e18\3\2\2\2\u0e19\u0e1a\3\2\2\2\u0e1a\u0e1b\3\2\2\2\u0e1b"+
		"\u0e1e\5\34\17\2\u0e1c\u0e1d\7Q\2\2\u0e1d\u0e1f\5\u03fc\u01ff\2\u0e1e"+
		"\u0e1c\3\2\2\2\u0e1e\u0e1f\3\2\2\2\u0e1f\u0e22\3\2\2\2\u0e20\u0e21\7\u012f"+
		"\2\2\u0e21\u0e23\5\u02ec\u0177\2\u0e22\u0e20\3\2\2\2\u0e22\u0e23\3\2\2"+
		"\2\u0e23\u0169\3\2\2\2\u0e24\u0e25\7\u01ef\2\2\u0e25\u0e26\7\u0180\2\2"+
		"\u0e26\u0e28\7N\2\2\u0e27\u0e29\7\u00ed\2\2\u0e28\u0e27\3\2\2\2\u0e28"+
		"\u0e29\3\2\2\2\u0e29\u0e2a\3\2\2\2\u0e2a\u0e30\5\u034e\u01a8\2\u0e2b\u0e2c"+
		"\7Q\2\2\u0e2c\u0e31\7\u00f1\2\2\u0e2d\u0e2e\7Q\2\2\u0e2e\u0e2f\7\u00dd"+
		"\2\2\u0e2f\u0e31\7\u00f1\2\2\u0e30\u0e2b\3\2\2\2\u0e30\u0e2d\3\2\2\2\u0e30"+
		"\u0e31\3\2\2\2\u0e31\u016b\3\2\2\2\u0e32\u0e33\79\2\2\u0e33\u0e36\7\u01ff"+
		"\2\2\u0e34\u0e35\7f\2\2\u0e35\u0e37\7r\2\2\u0e36\u0e34\3\2\2\2\u0e36\u0e37"+
		"\3\2\2\2\u0e37\u0e38\3\2\2\2\u0e38\u0e39\5\u02ec\u0177\2\u0e39\u0e3a\7"+
		"e\2\2\u0e3a\u0e3b\5\u034e\u01a8\2\u0e3b\u0e3c\5\u016e\u00b8\2\u0e3c\u016d"+
		"\3\2\2\2\u0e3d\u0e3e\7j\2\2\u0e3e\u0e40\5\u0466\u0234\2\u0e3f\u0e3d\3"+
		"\2\2\2\u0e3f\u0e40\3\2\2\2\u0e40\u0e46\3\2\2\2\u0e41\u0e42\7b\2\2\u0e42"+
		"\u0e43\7#\2\2\u0e43\u0e44\5\u0300\u0181\2\u0e44\u0e45\7$\2\2\u0e45\u0e47"+
		"\3\2\2\2\u0e46\u0e41\3\2\2\2\u0e46\u0e47\3\2\2\2\u0e47\u0e4e\3\2\2\2\u0e48"+
		"\u0e49\7Q\2\2\u0e49\u0e4a\7\u00d9\2\2\u0e4a\u0e4b\7#\2\2\u0e4b\u0e4c\5"+
		"\u0300\u0181\2\u0e4c\u0e4d\7$\2\2\u0e4d\u0e4f\3\2\2\2\u0e4e\u0e48\3\2"+
		"\2\2\u0e4e\u0e4f\3\2\2\2\u0e4f\u0e54\3\2\2\2\u0e50\u0e51\7\u0120\2\2\u0e51"+
		"\u0e52\7j\2\2\u0e52\u0e54\5\u02ec\u0177\2\u0e53\u0e3f\3\2\2\2\u0e53\u0e50"+
		"\3\2\2\2\u0e54\u016f\3\2\2\2\u0e55\u0e56\79\2\2\u0e56\u0e57\7M\2\2\u0e57"+
		"\u0e58\5\u013a\u009e\2\u0e58\u0e59\5\u0172\u00ba\2\u0e59\u0171\3\2\2\2"+
		"\u0e5a\u0e5c\5\u0174\u00bb\2\u0e5b\u0e5d\7\u0124\2\2\u0e5c\u0e5b\3\2\2"+
		"\2\u0e5c\u0e5d\3\2\2\2\u0e5d\u0e6f\3\2\2\2\u0e5e\u0e5f\7\u0120\2\2\u0e5f"+
		"\u0e60\7j\2\2\u0e60\u0e6f\5\u02ec\u0177\2\u0e61\u0e63\7\u00dd\2\2\u0e62"+
		"\u0e61\3\2\2\2\u0e62\u0e63\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e65\7\u00f6"+
		"\2\2\u0e65\u0e66\7e\2\2\u0e66\u0e67\7\u00fb\2\2\u0e67\u0e6f\5\u02ec\u0177"+
		"\2\u0e68\u0e69\7@\2\2\u0e69\u0e6a\7<\2\2\u0e6a\u0e6f\5\u02ec\u0177\2\u0e6b"+
		"\u0e6c\7\u011b\2\2\u0e6c\u0e6d\7j\2\2\u0e6d\u0e6f\5\u041e\u0210\2\u0e6e"+
		"\u0e5a\3\2\2\2\u0e6e\u0e5e\3\2\2\2\u0e6e\u0e62\3\2\2\2\u0e6e\u0e68\3\2"+
		"\2\2\u0e6e\u0e6b\3\2\2\2\u0e6f\u0173\3\2\2\2\u0e70\u0e72\5\u0480\u0241"+
		"\2\u0e71\u0e70\3\2\2\2\u0e72\u0e73\3\2\2\2\u0e73\u0e71\3\2\2\2\u0e73\u0e74"+
		"\3\2\2\2\u0e74\u0175\3\2\2\2\u0e75\u0e76\79\2\2\u0e76\u0e77\7K\2\2\u0e77"+
		"\u0e78\5\u013a\u009e\2\u0e78\u0e79\5\u0178\u00bd\2\u0e79\u0177\3\2\2\2"+
		"\u0e7a\u0e7c\5\u0174\u00bb\2\u0e7b\u0e7d\7\u0124\2\2\u0e7c\u0e7b\3\2\2"+
		"\2\u0e7c\u0e7d\3\2\2\2\u0e7d\u0e8f\3\2\2\2\u0e7e\u0e7f\7\u0120\2\2\u0e7f"+
		"\u0e80\7j\2\2\u0e80\u0e8f\5\u02ec\u0177\2\u0e81\u0e83\7\u00dd\2\2\u0e82"+
		"\u0e81\3\2\2\2\u0e82\u0e83\3\2\2\2\u0e83\u0e84\3\2\2\2\u0e84\u0e85\7\u00f6"+
		"\2\2\u0e85\u0e86\7e\2\2\u0e86\u0e87\7\u00fb\2\2\u0e87\u0e8f\5\u02ec\u0177"+
		"\2\u0e88\u0e89\7@\2\2\u0e89\u0e8a\7<\2\2\u0e8a\u0e8f\5\u02ec\u0177\2\u0e8b"+
		"\u0e8c\7\u011b\2\2\u0e8c\u0e8d\7j\2\2\u0e8d\u0e8f\5\u041e\u0210\2\u0e8e"+
		"\u0e7a\3\2\2\2\u0e8e\u0e7e\3\2\2\2\u0e8e\u0e82\3\2\2\2\u0e8e\u0e88\3\2"+
		"\2\2\u0e8e\u0e8b\3\2\2\2\u0e8f\u0179\3\2\2\2\u0e90\u0e91\79\2\2\u0e91"+
		"\u0e92\7\u01e3\2\2\u0e92\u0e9e\5\u02ec\u0177\2\u0e93\u0e94\7\u0120\2\2"+
		"\u0e94\u0e95\7j\2\2\u0e95\u0e9f\5\u02ec\u0177\2\u0e96\u0e97\7\u011b\2"+
		"\2\u0e97\u0e98\7j\2\2\u0e98\u0e9f\5\u041e\u0210\2\u0e99\u0e9a\7@\2\2\u0e9a"+
		"\u0e9f\5\u0442\u0222\2\u0e9b\u0e9c\t\25\2\2\u0e9c\u0e9d\7A\2\2\u0e9d\u0e9f"+
		"\5\u047c\u023f\2\u0e9e\u0e93\3\2\2\2\u0e9e\u0e96\3\2\2\2\u0e9e\u0e99\3"+
		"\2\2\2\u0e9e\u0e9b\3\2\2\2\u0e9f\u017b\3\2\2\2\u0ea0\u0ea1\79\2\2\u0ea1"+
		"\u0ea2\7\u0125\2\2\u0ea2\u0ea3\5\u013a\u009e\2\u0ea3\u0ea4\5\u0172\u00ba"+
		"\2\u0ea4\u017d\3\2\2\2\u0ea5\u0ea6\79\2\2\u0ea6\u0ea7\7\u0126\2\2\u0ea7"+
		"\u0ea8\7e\2\2\u0ea8\u0ea9\5\u034e\u01a8\2\u0ea9\u0eaa\7\u0120\2\2\u0eaa"+
		"\u0eab\7j\2\2\u0eab\u0eac\5\u02ec\u0177\2\u0eac\u017f\3\2\2\2\u0ead\u0eae"+
		"\79\2\2\u0eae\u0eb1\7\u0128\2\2\u0eaf\u0eb0\7f\2\2\u0eb0\u0eb2\7r\2\2"+
		"\u0eb1\u0eaf\3\2\2\2\u0eb1\u0eb2\3\2\2\2\u0eb2\u0eb3\3\2\2\2\u0eb3\u0eb4"+
		"\5\u034e\u01a8\2\u0eb4\u0eb5\5\u0182\u00c2\2\u0eb5\u0181\3\2\2\2\u0eb6"+
		"\u0ebf\5\u00c8e\2\u0eb7\u0ebf\5\u0436\u021c\2\u0eb8\u0eb9\7\u0120\2\2"+
		"\u0eb9\u0eba\7j\2\2\u0eba\u0ebf\5\u02ec\u0177\2\u0ebb\u0ebc\7@\2\2\u0ebc"+
		"\u0ebd\7<\2\2\u0ebd\u0ebf\5\u02ec\u0177\2\u0ebe\u0eb6\3\2\2\2\u0ebe\u0eb7"+
		"\3\2\2\2\u0ebe\u0eb8\3\2\2\2\u0ebe\u0ebb\3\2\2\2\u0ebf\u0183\3\2\2\2\u0ec0"+
		"\u0ec1\79\2\2\u0ec1\u0ec2\7\u01fa\2\2\u0ec2\u0ece\5\u02ec\u0177\2\u0ec3"+
		"\u0ec4\5\u0186\u00c4\2\u0ec4\u0ec5\5\u00d0i\2\u0ec5\u0ecf\3\2\2\2\u0ec6"+
		"\u0ecf\5\u0186\u00c4\2\u0ec7\u0ecf\5\u00d0i\2\u0ec8\u0ec9\7\u0120\2\2"+
		"\u0ec9\u0eca\7j\2\2\u0eca\u0ecf\5\u02ec\u0177\2\u0ecb\u0ecc\7\u011b\2"+
		"\2\u0ecc\u0ecd\7j\2\2\u0ecd\u0ecf\5\u041e\u0210\2\u0ece\u0ec3\3\2\2\2"+
		"\u0ece\u0ec6\3\2\2\2\u0ece\u0ec7\3\2\2\2\u0ece\u0ec8\3\2\2\2\u0ece\u0ecb"+
		"\3\2\2\2\u0ecf\u0185\3\2\2\2\u0ed0\u0ed1\7\u017b\2\2\u0ed1\u0ed2\t\26"+
		"\2\2\u0ed2\u0187\3\2\2\2\u0ed3\u0ed4\79\2\2\u0ed4\u0eed\7\u012d\2\2\u0ed5"+
		"\u0ed6\7f\2\2\u0ed6\u0ed8\7r\2\2\u0ed7\u0ed5\3\2\2\2\u0ed7\u0ed8\3\2\2"+
		"\2\u0ed8\u0ed9\3\2\2\2\u0ed9\u0eda\5\u03d0\u01e9\2\u0eda\u0edb\7@\2\2"+
		"\u0edb\u0edc\7\u012d\2\2\u0edc\u0edd\5\u0414\u020b\2\u0edd\u0eee\3\2\2"+
		"\2\u0ede\u0edf\5\u03d0\u01e9\2\u0edf\u0ee0\7\u0120\2\2\u0ee0\u0ee1\7j"+
		"\2\2\u0ee1\u0ee2\5\u02ec\u0177\2\u0ee2\u0eee\3\2\2\2\u0ee3\u0ee4\5\u03d0"+
		"\u01e9\2\u0ee4\u0ee5\7@\2\2\u0ee5\u0ee6\7<\2\2\u0ee6\u0ee7\5\u02ec\u0177"+
		"\2\u0ee7\u0eee\3\2\2\2\u0ee8\u0ee9\5\u03d0\u01e9\2\u0ee9\u0eea\7\u011b"+
		"\2\2\u0eea\u0eeb\7j\2\2\u0eeb\u0eec\5\u041e\u0210\2\u0eec\u0eee\3\2\2"+
		"\2\u0eed\u0ed7\3\2\2\2\u0eed\u0ede\3\2\2\2\u0eed\u0ee3\3\2\2\2\u0eed\u0ee8"+
		"\3\2\2\2\u0eee\u0189\3\2\2\2\u0eef\u0ef0\79\2\2\u0ef0\u0ef1\7\u01fb\2"+
		"\2\u0ef1\u0f0a\5\u02ec\u0177\2\u0ef2\u0ef3\7\u0120\2\2\u0ef3\u0ef4\7j"+
		"\2\2\u0ef4\u0f0b\5\u02ec\u0177\2\u0ef5\u0ef6\7\u011b\2\2\u0ef6\u0ef7\7"+
		"j\2\2\u0ef7\u0f0b\5\u041e\u0210\2\u0ef8\u0ef9\7@\2\2\u0ef9\u0f0b\5\u0442"+
		"\u0222\2\u0efa\u0efb\7\u01ca\2\2\u0efb\u0f0b\7\u0223\2\2\u0efc\u0efd\7"+
		"\u01ef\2\2\u0efd\u0f00\7\u01e3\2\2\u0efe\u0eff\7Q\2\2\u0eff\u0f01\5\u0442"+
		"\u0222\2\u0f00\u0efe\3\2\2\2\u0f00\u0f01\3\2\2\2\u0f01\u0f0b\3\2\2\2\u0f02"+
		"\u0f03\7@\2\2\u0f03\u0f04\7\u01e3\2\2\u0f04\u0f07\5\u018c\u00c7\2\u0f05"+
		"\u0f06\7Q\2\2\u0f06\u0f08\5\u0442\u0222\2\u0f07\u0f05\3\2\2\2\u0f07\u0f08"+
		"\3\2\2\2\u0f08\u0f0b\3\2\2\2\u0f09\u0f0b\t\13\2\2\u0f0a\u0ef2\3\2\2\2"+
		"\u0f0a\u0ef5\3\2\2\2\u0f0a\u0ef8\3\2\2\2\u0f0a\u0efa\3\2\2\2\u0f0a\u0efc"+
		"\3\2\2\2\u0f0a\u0f02\3\2\2\2\u0f0a\u0f09\3\2\2\2\u0f0b\u018b\3\2\2\2\u0f0c"+
		"\u0f11\5\u018e\u00c8\2\u0f0d\u0f0e\7)\2\2\u0f0e\u0f10\5\u018e\u00c8\2"+
		"\u0f0f\u0f0d\3\2\2\2\u0f10\u0f13\3\2\2\2\u0f11\u0f0f\3\2\2\2\u0f11\u0f12"+
		"\3\2\2\2\u0f12\u018d\3\2\2\2\u0f13\u0f11\3\2\2\2\u0f14\u0f15\5\u0448\u0225"+
		"\2\u0f15\u018f\3\2\2\2\u0f16\u0f17\79\2\2\u0f17\u0f1c\7\u019d\2\2\u0f18"+
		"\u0f19\7@\2\2\u0f19\u0f1d\5\u0474\u023b\2\u0f1a\u0f1b\7\u0122\2\2\u0f1b"+
		"\u0f1d\5\u047a\u023e\2\u0f1c\u0f18\3\2\2\2\u0f1c\u0f1a\3\2\2\2\u0f1d\u0191"+
		"\3\2\2\2\u0f1e\u0f1f\79\2\2\u0f1f\u0f20\7\u012f\2\2\u0f20\u0f2a\5\u02ec"+
		"\u0177\2\u0f21\u0f2b\7@\2\2\u0f22\u0f23\7\u0122\2\2\u0f23\u0f2b\5\u03fc"+
		"\u01ff\2\u0f24\u0f25\7\u0120\2\2\u0f25\u0f26\7j\2\2\u0f26\u0f2b\5\u02ec"+
		"\u0177\2\u0f27\u0f28\7\u011b\2\2\u0f28\u0f29\7j\2\2\u0f29\u0f2b\5\u041e"+
		"\u0210\2\u0f2a\u0f21\3\2\2\2\u0f2a\u0f22\3\2\2\2\u0f2a\u0f24\3\2\2\2\u0f2a"+
		"\u0f27\3\2\2\2\u0f2b\u0193\3\2\2\2\u0f2c\u0f2d\79\2\2\u0f2d\u0f2e\7\u00b2"+
		"\2\2\u0f2e\u0f2f\7\u01fc\2\2\u0f2f\u0f30\7\u01b4\2\2\u0f30\u0f31\5\u03d0"+
		"\u01e9\2\u0f31\u0f32\5\u0196\u00cc\2\u0f32\u0195\3\2\2\2\u0f33\u0f34\7"+
		"\u0120\2\2\u0f34\u0f35\7j\2\2\u0f35\u0f59\5\u02ec\u0177\2\u0f36\u0f37"+
		"\7@\2\2\u0f37\u0f38\7<\2\2\u0f38\u0f59\5\u02ec\u0177\2\u0f39\u0f3a\7\u011b"+
		"\2\2\u0f3a\u0f3b\7j\2\2\u0f3b\u0f59\5\u041e\u0210\2\u0f3c\u0f3d\t\27\2"+
		"\2\u0f3d\u0f3e\7\u01d8\2\2\u0f3e\u0f3f\7i\2\2\u0f3f\u0f41\5\u03d4\u01eb"+
		"\2\u0f40\u0f42\7Q\2\2\u0f41\u0f40\3\2\2\2\u0f41\u0f42\3\2\2\2\u0f42\u0f43"+
		"\3\2\2\2\u0f43\u0f44\5\u0198\u00cd\2\u0f44\u0f59\3\2\2\2\u0f45\u0f46\7"+
		"9\2\2\u0f46\u0f49\7\u01d8\2\2\u0f47\u0f48\7i\2\2\u0f48\u0f4a\5\u03d4\u01eb"+
		"\2\u0f49\u0f47\3\2\2\2\u0f49\u0f4a\3\2\2\2\u0f4a\u0f4b\3\2\2\2\u0f4b\u0f4c"+
		"\7\u01ed\2\2\u0f4c\u0f4d\5\u03d0\u01e9\2\u0f4d\u0f4e\7Q\2\2\u0f4e\u0f4f"+
		"\5\u03d0\u01e9\2\u0f4f\u0f59\3\2\2\2\u0f50\u0f51\7:\2\2\u0f51\u0f54\7"+
		"\u01d8\2\2\u0f52\u0f53\7f\2\2\u0f53\u0f55\7r\2\2\u0f54\u0f52\3\2\2\2\u0f54"+
		"\u0f55\3\2\2\2\u0f55\u0f56\3\2\2\2\u0f56\u0f57\7i\2\2\u0f57\u0f59\5\u03d4"+
		"\u01eb\2\u0f58\u0f33\3\2\2\2\u0f58\u0f36\3\2\2\2\u0f58\u0f39\3\2\2\2\u0f58"+
		"\u0f3c\3\2\2\2\u0f58\u0f45\3\2\2\2\u0f58\u0f50\3\2\2\2\u0f59\u0197\3\2"+
		"\2\2\u0f5a\u0f5f\5\u03d0\u01e9\2\u0f5b\u0f5c\7)\2\2\u0f5c\u0f5e\5\u03d0"+
		"\u01e9\2\u0f5d\u0f5b\3\2\2\2\u0f5e\u0f61\3\2\2\2\u0f5f\u0f5d\3\2\2\2\u0f5f"+
		"\u0f60\3\2\2\2\u0f60\u0199\3\2\2\2\u0f61\u0f5f\3\2\2\2\u0f62\u0f63\79"+
		"\2\2\u0f63\u0f64\7\u00b2\2\2\u0f64\u0f65\7\u01fc\2\2\u0f65\u0f66\7\u01b7"+
		"\2";
	private static final String _serializedATNSegment2 =
		"\2\u0f66\u0f71\5\u03d0\u01e9\2\u0f67\u0f68\7\u0120\2\2\u0f68\u0f69\7j"+
		"\2\2\u0f69\u0f72\5\u02ec\u0177\2\u0f6a\u0f6b\7@\2\2\u0f6b\u0f6c\7<\2\2"+
		"\u0f6c\u0f72\5\u02ec\u0177\2\u0f6d\u0f6e\7\u011b\2\2\u0f6e\u0f6f\7j\2"+
		"\2\u0f6f\u0f72\5\u041e\u0210\2\u0f70\u0f72\5\u0442\u0222\2\u0f71\u0f67"+
		"\3\2\2\2\u0f71\u0f6a\3\2\2\2\u0f71\u0f6d\3\2\2\2\u0f71\u0f70\3\2\2\2\u0f72"+
		"\u019b\3\2\2\2\u0f73\u0f74\79\2\2\u0f74\u0f75\7\u00b2\2\2\u0f75\u0f76"+
		"\7\u01fc\2\2\u0f76\u0f7f\7\u01e0\2\2\u0f77\u0f78\5\u03d0\u01e9\2\u0f78"+
		"\u0f79\7\u0120\2\2\u0f79\u0f7a\7j\2\2\u0f7a\u0f7b\5\u02ec\u0177\2\u0f7b"+
		"\u0f80\3\2\2\2\u0f7c\u0f7d\7@\2\2\u0f7d\u0f7e\7<\2\2\u0f7e\u0f80\5\u02ec"+
		"\u0177\2\u0f7f\u0f77\3\2\2\2\u0f7f\u0f7c\3\2\2\2\u0f80\u019d\3\2\2\2\u0f81"+
		"\u0f82\79\2\2\u0f82\u0f83\7\u00b2\2\2\u0f83\u0f84\7\u01fc\2\2\u0f84\u0f8d"+
		"\7\u020b\2\2\u0f85\u0f86\5\u03d0\u01e9\2\u0f86\u0f87\7\u0120\2\2\u0f87"+
		"\u0f88\7j\2\2\u0f88\u0f89\5\u02ec\u0177\2\u0f89\u0f8e\3\2\2\2\u0f8a\u0f8b"+
		"\7@\2\2\u0f8b\u0f8c\7<\2\2\u0f8c\u0f8e\5\u02ec\u0177\2\u0f8d\u0f85\3\2"+
		"\2\2\u0f8d\u0f8a\3\2\2\2\u0f8e\u019f\3\2\2\2\u0f8f\u0f90\79\2\2\u0f90"+
		"\u0f91\7L\2\2\u0f91\u0f92\5\u02ec\u0177\2\u0f92\u0f93\7e\2\2\u0f93\u0f9e"+
		"\5\u034e\u01a8\2\u0f94\u0f95\7\u0120\2\2\u0f95\u0f96\7j\2\2\u0f96\u0f9f"+
		"\5\u02ec\u0177\2\u0f97\u0f99\7\u00dd\2\2\u0f98\u0f97\3\2\2\2\u0f98\u0f99"+
		"\3\2\2\2\u0f99\u0f9a\3\2\2\2\u0f9a\u0f9b\7\u00f6\2\2\u0f9b\u0f9c\7e\2"+
		"\2\u0f9c\u0f9d\7\u00fb\2\2\u0f9d\u0f9f\5\u02ec\u0177\2\u0f9e\u0f94\3\2"+
		"\2\2\u0f9e\u0f98\3\2\2\2\u0f9f\u01a1\3\2\2\2\u0fa0\u0fa1\79\2\2\u0fa1"+
		"\u0fa2\7\u00ae\2\2\u0fa2\u0fa3\5\u03d0\u01e9\2\u0fa3\u0fa4\5\u01a4\u00d3"+
		"\2\u0fa4\u01a3\3\2\2\2\u0fa5\u0fce\5\u01a6\u00d4\2\u0fa6\u0fa7\7?\2\2"+
		"\u0fa7\u0fab\7\u00bb\2\2\u0fa8\u0fa9\7f\2\2\u0fa9\u0faa\7n\2\2\u0faa\u0fac"+
		"\7r\2\2\u0fab\u0fa8\3\2\2\2\u0fab\u0fac\3\2\2\2\u0fac\u0fad\3\2\2\2\u0fad"+
		"\u0fb0\7\u0223\2\2\u0fae\u0faf\t\30\2\2\u0faf\u0fb1\7\u0223\2\2\u0fb0"+
		"\u0fae\3\2\2\2\u0fb0\u0fb1\3\2\2\2\u0fb1\u0fce\3\2\2\2\u0fb2\u0fb3\7\u0120"+
		"\2\2\u0fb3\u0fb4\7\u00bb\2\2\u0fb4\u0fb5\7\u0223\2\2\u0fb5\u0fb6\7j\2"+
		"\2\u0fb6\u0fce\7\u0223\2\2\u0fb7\u0fb8\7\u0120\2\2\u0fb8\u0fb9\7j\2\2"+
		"\u0fb9\u0fce\5\u02ec\u0177\2\u0fba\u0fbb\7\u0120\2\2\u0fbb\u0fbc\7\u01a5"+
		"\2\2\u0fbc\u0fbd\5\u02ec\u0177\2\u0fbd\u0fbe\7j\2\2\u0fbe\u0fc0\5\u02ec"+
		"\u0177\2\u0fbf\u0fc1\5\u00d8m\2\u0fc0\u0fbf\3\2\2\2\u0fc0\u0fc1\3\2\2"+
		"\2\u0fc1\u0fce\3\2\2\2\u0fc2\u0fc3\7@\2\2\u0fc3\u0fc4\7<\2\2\u0fc4\u0fce"+
		"\5\u02ec\u0177\2\u0fc5\u0fc6\7@\2\2\u0fc6\u0fc7\7#\2\2\u0fc7\u0fc8\5\u00f6"+
		"|\2\u0fc8\u0fc9\7$\2\2\u0fc9\u0fce\3\2\2\2\u0fca\u0fcb\7\u011b\2\2\u0fcb"+
		"\u0fcc\7j\2\2\u0fcc\u0fce\5\u041e\u0210\2\u0fcd\u0fa5\3\2\2\2\u0fcd\u0fa6"+
		"\3\2\2\2\u0fcd\u0fb2\3\2\2\2\u0fcd\u0fb7\3\2\2\2\u0fcd\u0fba\3\2\2\2\u0fcd"+
		"\u0fc2\3\2\2\2\u0fcd\u0fc5\3\2\2\2\u0fcd\u0fca\3\2\2\2\u0fce\u01a5\3\2"+
		"\2\2\u0fcf\u0fd2\5\u01a8\u00d5\2\u0fd0\u0fd1\7)\2\2\u0fd1\u0fd3\5\u01a8"+
		"\u00d5\2\u0fd2\u0fd0\3\2\2\2\u0fd2\u0fd3\3\2\2\2\u0fd3\u01a7\3\2\2\2\u0fd4"+
		"\u0fd5\7?\2\2\u0fd5\u0fd6\7\u01a5\2\2\u0fd6\u0fd8\5\u03cc\u01e7\2\u0fd7"+
		"\u0fd9\5\u00d8m\2\u0fd8\u0fd7\3\2\2\2\u0fd8\u0fd9\3\2\2\2\u0fd9\u0ff7"+
		"\3\2\2\2\u0fda\u0fdb\7:\2\2\u0fdb\u0fdc\7\u01a5\2\2\u0fdc\u0fdd\7f\2\2"+
		"\u0fdd\u0fde\7r\2\2\u0fde\u0fe0\5\u0350\u01a9\2\u0fdf\u0fe1\5\u00d8m\2"+
		"\u0fe0\u0fdf\3\2\2\2\u0fe0\u0fe1\3\2\2\2\u0fe1\u0ff7\3\2\2\2\u0fe2\u0fe3"+
		"\7:\2\2\u0fe3\u0fe4\7\u01a5\2\2\u0fe4\u0fe6\5\u0350\u01a9\2\u0fe5\u0fe7"+
		"\5\u00d8m\2\u0fe6\u0fe5\3\2\2\2\u0fe6\u0fe7\3\2\2\2\u0fe7\u0ff7\3\2\2"+
		"\2\u0fe8\u0fe9\79\2\2\u0fe9\u0fea\7\u01a5\2\2\u0fea\u0fec\5\u0350\u01a9"+
		"\2\u0feb\u0fed\5\u00dco\2\u0fec\u0feb\3\2\2\2\u0fec\u0fed\3\2\2\2\u0fed"+
		"\u0fee\3\2\2\2\u0fee\u0fef\7\u00ae\2\2\u0fef\u0ff1\5\u0370\u01b9\2\u0ff0"+
		"\u0ff2\5\u03ce\u01e8\2\u0ff1\u0ff0\3\2\2\2\u0ff1\u0ff2\3\2\2\2\u0ff2\u0ff4"+
		"\3\2\2\2\u0ff3\u0ff5\5\u00d8m\2\u0ff4\u0ff3\3\2\2\2\u0ff4\u0ff5\3\2\2"+
		"\2\u0ff5\u0ff7\3\2\2\2\u0ff6\u0fd4\3\2\2\2\u0ff6\u0fda\3\2\2\2\u0ff6\u0fe2"+
		"\3\2\2\2\u0ff6\u0fe8\3\2\2\2\u0ff7\u01a9\3\2\2\2\u0ff8\u0ff9\79\2\2\u0ff9"+
		"\u0ffa\7\u00e6\2\2\u0ffa\u0ffb\7\u01d8\2\2\u0ffb\u0ffc\7i\2\2\u0ffc\u0ffd"+
		"\5\u01ac\u00d7\2\u0ffd\u0ffe\7\u01fa\2\2\u0ffe\u0fff\5\u02ec\u0177\2\u0fff"+
		"\u1000\5\u00d0i\2\u1000\u01ab\3\2\2\2\u1001\u1004\5\u041e\u0210\2\u1002"+
		"\u1004\7\u00e6\2\2\u1003\u1001\3\2\2\2\u1003\u1002\3\2\2\2\u1004\u01ad"+
		"\3\2\2\2\u1005\u1006\79\2\2\u1006\u1009\7N\2\2\u1007\u1008\7f\2\2\u1008"+
		"\u100a\7r\2\2\u1009\u1007\3\2\2\2\u1009\u100a\3\2\2\2\u100a\u100b\3\2"+
		"\2\2\u100b\u100c\5\u034e\u01a8\2\u100c\u100d\5\u01b0\u00d9\2\u100d\u01af"+
		"\3\2\2\2\u100e\u101e\5\u00c8e\2\u100f\u1010\7\u0120\2\2\u1010\u1011\7"+
		"j\2\2\u1011\u101e\5\u02ec\u0177\2\u1012\u1014\7\u0120\2\2\u1013\u1015"+
		"\7B\2\2\u1014\u1013\3\2\2\2\u1014\u1015\3\2\2\2\u1015\u1016\3\2\2\2\u1016"+
		"\u1017\5\u02ec\u0177\2\u1017\u1018\7j\2\2\u1018\u1019\5\u02ec\u0177\2"+
		"\u1019\u101e\3\2\2\2\u101a\u101b\7@\2\2\u101b\u101c\7<\2\2\u101c\u101e"+
		"\5\u02ec\u0177\2\u101d\u100e\3\2\2\2\u101d\u100f\3\2\2\2\u101d\u1012\3"+
		"\2\2\2\u101d\u101a\3\2\2\2\u101e\u01b1\3\2\2\2\u101f\u1022\7\u00a5\2\2"+
		"\u1020\u1023\5\u02fe\u0180\2\u1021\u1023\7u\2\2\u1022\u1020\3\2\2\2\u1022"+
		"\u1021\3\2\2\2\u1023\u01b3\3\2\2\2\u1024\u1026\7\u00ea\2\2\u1025\u1027"+
		"\7\u021e\2\2\u1026\u1025\3\2\2\2\u1026\u1027\3\2\2\2\u1027\u1030\3\2\2"+
		"\2\u1028\u102a\5\u034e\u01a8\2\u1029\u102b\5\u01b6\u00dc\2\u102a\u1029"+
		"\3\2\2\2\u102a\u102b\3\2\2\2\u102b\u1031\3\2\2\2\u102c\u102d\5\u02ec\u0177"+
		"\2\u102d\u102e\7e\2\2\u102e\u102f\5\u034e\u01a8\2\u102f\u1031\3\2\2\2"+
		"\u1030\u1028\3\2\2\2\u1030\u102c\3\2\2\2\u1030\u1031\3\2\2\2\u1031\u01b5"+
		"\3\2\2\2\u1032\u1033\7b\2\2\u1033\u1034\5\u02ec\u0177\2\u1034\u01b7\3"+
		"\2\2\2\u1035\u1036\7\u01b5\2\2\u1036\u1037\7e\2\2\u1037\u1038\5\u01ba"+
		"\u00de\2\u1038\u01b9\3\2\2\2\u1039\u103a\5\u01c2\u00e2\2\u103a\u103b\5"+
		"\u03d0\u01e9\2\u103b\u103c\7m\2\2\u103c\u103d\5\u01c4\u00e3\2\u103d\u10a9"+
		"\3\2\2\2\u103e\u103f\7B\2\2\u103f\u1040\5\u03d0\u01e9\2\u1040\u1041\7"+
		"m\2\2\u1041\u1042\5\u01c4\u00e3\2\u1042\u10a9\3\2\2\2\u1043\u1044\5\u01be"+
		"\u00e0\2\u1044\u1045\5\u02ec\u0177\2\u1045\u1046\7m\2\2\u1046\u1047\5"+
		"\u01c4\u00e3\2\u1047\u10a9\3\2\2\2\u1048\u1049\7\u00ae\2\2\u1049\u104a"+
		"\5\u0370\u01b9\2\u104a\u104b\7m\2\2\u104b\u104c\5\u01c4\u00e3\2\u104c"+
		"\u10a9\3\2\2\2\u104d\u104e\7\u00f7\2\2\u104e\u104f\5\u0370\u01b9\2\u104f"+
		"\u1050\7m\2\2\u1050\u1051\5\u01c4\u00e3\2\u1051\u10a9\3\2\2\2\u1052\u1053"+
		"\7\u01a2\2\2\u1053\u1054\5\u013e\u00a0\2\u1054\u1055\7m\2\2\u1055\u1056"+
		"\5\u01c4\u00e3\2\u1056\u10a9\3\2\2\2\u1057\u1058\7K\2\2\u1058\u1059\5"+
		"\u013a\u009e\2\u1059\u105a\7m\2\2\u105a\u105b\5\u01c4\u00e3\2\u105b\u10a9"+
		"\3\2\2\2\u105c\u105d\7\u0181\2\2\u105d\u105e\5\u00fc\177\2\u105e\u105f"+
		"\7m\2\2\u105f\u1060\5\u01c4\u00e3\2\u1060\u10a9\3\2\2\2\u1061\u1062\7"+
		"D\2\2\u1062\u1063\5\u02ec\u0177\2\u1063\u1064\7e\2\2\u1064\u1065\5\u03d0"+
		"\u01e9\2\u1065\u1066\7m\2\2\u1066\u1067\5\u01c4\u00e3\2\u1067\u10a9\3"+
		"\2\2\2\u1068\u1069\7D\2\2\u1069\u106a\5\u02ec\u0177\2\u106a\u106b\7e\2"+
		"\2\u106b\u106c\7\u00f7\2\2\u106c\u106d\5\u03d0\u01e9\2\u106d\u106e\7m"+
		"\2\2\u106e\u106f\5\u01c4\u00e3\2\u106f\u10a9\3\2\2\2\u1070\u1071\5\u01bc"+
		"\u00df\2\u1071\u1072\5\u02ec\u0177\2\u1072\u1073\7e\2\2\u1073\u1074\5"+
		"\u03d0\u01e9\2\u1074\u1075\7m\2\2\u1075\u1076\5\u01c4\u00e3\2\u1076\u10a9"+
		"\3\2\2\2\u1077\u1078\7M\2\2\u1078\u1079\5\u013a\u009e\2\u1079\u107a\7"+
		"m\2\2\u107a\u107b\5\u01c4\u00e3\2\u107b\u10a9\3\2\2\2\u107c\u107d\7\u0125"+
		"\2\2\u107d\u107e\5\u013a\u009e\2\u107e\u107f\7m\2\2\u107f\u1080\5\u01c4"+
		"\u00e3\2\u1080\u10a9\3\2\2\2\u1081\u1082\7\u020f\2\2\u1082\u1083\7i\2"+
		"\2\u1083\u1084\5\u0370\u01b9\2\u1084\u1085\7\u010c\2\2\u1085\u1086\5\u02ec"+
		"\u0177\2\u1086\u1087\7m\2\2\u1087\u1088\5\u01c4\u00e3\2\u1088\u10a9\3"+
		"\2\2\2\u1089\u108a\7\u0181\2\2\u108a\u108b\7\u01b3\2\2\u108b\u108c\5\u03d0"+
		"\u01e9\2\u108c\u108d\7b\2\2\u108d\u108e\5\u02ec\u0177\2\u108e\u108f\7"+
		"m\2\2\u108f\u1090\5\u01c4\u00e3\2\u1090\u10a9\3\2\2\2\u1091\u1092\7\u0181"+
		"\2\2\u1092\u1093\7\u01cc\2\2\u1093\u1094\5\u03d0\u01e9\2\u1094\u1095\7"+
		"b\2\2\u1095\u1096\5\u02ec\u0177\2\u1096\u1097\7m\2\2\u1097\u1098\5\u01c4"+
		"\u00e3\2\u1098\u10a9\3\2\2\2\u1099\u109a\7\u010d\2\2\u109a\u109b\7\u0116"+
		"\2\2\u109b\u109c\5\u0428\u0215\2\u109c\u109d\7m\2\2\u109d\u109e\5\u01c4"+
		"\u00e3\2\u109e\u10a9\3\2\2\2\u109f\u10a0\7V\2\2\u10a0\u10a1\7#\2\2\u10a1"+
		"\u10a2\5\u0370\u01b9\2\u10a2\u10a3\7d\2\2\u10a3\u10a4\5\u0370\u01b9\2"+
		"\u10a4\u10a5\7$\2\2\u10a5\u10a6\7m\2\2\u10a6\u10a7\5\u01c4\u00e3\2\u10a7"+
		"\u10a9\3\2\2\2\u10a8\u1039\3\2\2\2\u10a8\u103e\3\2\2\2\u10a8\u1043\3\2"+
		"\2\2\u10a8\u1048\3\2\2\2\u10a8\u104d\3\2\2\2\u10a8\u1052\3\2\2\2\u10a8"+
		"\u1057\3\2\2\2\u10a8\u105c\3\2\2\2\u10a8\u1061\3\2\2\2\u10a8\u1068\3\2"+
		"\2\2\u10a8\u1070\3\2\2\2\u10a8\u1077\3\2\2\2\u10a8\u107c\3\2\2\2\u10a8"+
		"\u1081\3\2\2\2\u10a8\u1089\3\2\2\2\u10a8\u1091\3\2\2\2\u10a8\u1099\3\2"+
		"\2\2\u10a8\u109f\3\2\2\2\u10a9\u01bb\3\2\2\2\u10aa\u10ab\t\31\2\2\u10ab"+
		"\u01bd\3\2\2\2\u10ac\u10b2\5\u01c0\u00e1\2\u10ad\u10b2\7\u00f2\2\2\u10ae"+
		"\u10b2\7\u00e2\2\2\u10af\u10b2\7\u01fb\2\2\u10b0\u10b2\7\u012f\2\2\u10b1"+
		"\u10ac\3\2\2\2\u10b1\u10ad\3\2\2\2\u10b1\u10ae\3\2\2\2\u10b1\u10af\3\2"+
		"\2\2\u10b1\u10b0\3\2\2\2\u10b2\u01bf\3\2\2\2\u10b3\u10b4\7\u01a0\2\2\u10b4"+
		"\u10c3\7\u01da\2\2\u10b5\u10b6\7\u01c8\2\2\u10b6\u10c3\7L\2\2\u10b7\u10c3"+
		"\7\u00fb\2\2\u10b8\u10b9\7G\2\2\u10b9\u10ba\7\u00f1\2\2\u10ba\u10c3\7"+
		"\u021a\2\2\u10bb\u10bd\7\u01df\2\2\u10bc\u10bb\3\2\2\2\u10bc\u10bd\3\2"+
		"\2\2\u10bd\u10be\3\2\2\2\u10be\u10c3\7\u010c\2\2\u10bf\u10c3\7\u01e3\2"+
		"\2\u10c0\u10c3\7<\2\2\u10c1\u10c3\7\u01fa\2\2\u10c2\u10b3\3\2\2\2\u10c2"+
		"\u10b5\3\2\2\2\u10c2\u10b7\3\2\2\2\u10c2\u10b8\3\2\2\2\u10c2\u10bc\3\2"+
		"\2\2\u10c2\u10bf\3\2\2\2\u10c2\u10c0\3\2\2\2\u10c2\u10c1\3\2\2\2\u10c3"+
		"\u01c1\3\2\2\2\u10c4\u10dc\7A\2\2\u10c5\u10dc\7\u0128\2\2\u10c6\u10dc"+
		"\7N\2\2\u10c7\u10c8\7\u0180\2\2\u10c8\u10dc\7N\2\2\u10c9\u10dc\7C\2\2"+
		"\u10ca\u10cb\7G\2\2\u10cb\u10dc\7A\2\2\u10cc\u10dc\7\u00a9\2\2\u10cd\u10dc"+
		"\7\u01ab\2\2\u10ce\u10dc\7\u012d\2\2\u10cf\u10d0\7\u00b2\2\2\u10d0\u10d1"+
		"\7\u01fc\2\2\u10d1\u10dc\7\u01e0\2\2\u10d2\u10d3\7\u00b2\2\2\u10d3\u10d4"+
		"\7\u01fc\2\2\u10d4\u10dc\7\u01b7\2\2\u10d5\u10d6\7\u00b2\2\2\u10d6\u10d7"+
		"\7\u01fc\2\2\u10d7\u10dc\7\u020b\2\2\u10d8\u10d9\7\u00b2\2\2\u10d9\u10da"+
		"\7\u01fc\2\2\u10da\u10dc\7\u01b4\2\2\u10db\u10c4\3\2\2\2\u10db\u10c5\3"+
		"\2\2\2\u10db\u10c6\3\2\2\2\u10db\u10c7\3\2\2\2\u10db\u10c9\3\2\2\2\u10db"+
		"\u10ca\3\2\2\2\u10db\u10cc\3\2\2\2\u10db\u10cd\3\2\2\2\u10db\u10ce\3\2"+
		"\2\2\u10db\u10cf\3\2\2\2\u10db\u10d2\3\2\2\2\u10db\u10d5\3\2\2\2\u10db"+
		"\u10d8\3\2\2\2\u10dc\u01c3\3\2\2\2\u10dd\u10de\t\26\2\2\u10de\u01c5\3"+
		"\2\2\2\u10df\u10e0\78\2\2\u10e0\u10e1\7\u01a0\2\2\u10e1\u10e2\7\u01da"+
		"\2\2\u10e2\u10e3\5\u02ec\u0177\2\u10e3\u10e4\7\u00ae\2\2\u10e4\u10e5\t"+
		"\32\2\2\u10e5\u10e6\7\u01d3\2\2\u10e6\u10e7\5\u0150\u00a9\2\u10e7\u01c7"+
		"\3\2\2\2\u10e8\u10eb\78\2\2\u10e9\u10ea\7l\2\2\u10ea\u10ec\7\u01ed\2\2"+
		"\u10eb\u10e9\3\2\2\2\u10eb\u10ec\3\2\2\2\u10ec\u10ed\3\2\2\2\u10ed\u10ee"+
		"\7\u01a2\2\2\u10ee\u10f3\5\u034a\u01a6\2\u10ef\u10f0\5\u0102\u0082\2\u10f0"+
		"\u10f1\5\u0442\u0222\2\u10f1\u10f4\3\2\2\2\u10f2\u10f4\5\u01ca\u00e6\2"+
		"\u10f3\u10ef\3\2\2\2\u10f3\u10f2\3\2\2\2\u10f4\u01c9\3\2\2\2\u10f5\u10f6"+
		"\7#\2\2\u10f6\u10f7\5\u01cc\u00e7\2\u10f7\u10f8\7$\2\2\u10f8\u01cb\3\2"+
		"\2\2\u10f9\u10fe\5\u01ce\u00e8\2\u10fa\u10fb\7)\2\2\u10fb\u10fd\5\u01ce"+
		"\u00e8\2\u10fc\u10fa\3\2\2\2\u10fd\u1100\3\2\2\2\u10fe\u10fc\3\2\2\2\u10fe"+
		"\u10ff\3\2\2\2\u10ff\u01cd\3\2\2\2\u1100\u10fe\3\2\2\2\u1101\u1102\5\u02da"+
		"\u016e\2\u1102\u1103\7\33\2\2\u1103\u1104\5\u0402\u0202\2\u1104\u01cf"+
		"\3\2\2\2\u1105\u1106\78\2\2\u1106\u1107\7V\2\2\u1107\u1108\7#\2\2\u1108"+
		"\u1109\5\u0370\u01b9\2\u1109\u110a\7d\2\2\u110a\u110b\5\u0370\u01b9\2"+
		"\u110b\u111c\7$\2\2\u110c\u110d\7Q\2\2\u110d\u110e\7K\2\2\u110e\u1110"+
		"\5\u013a\u009e\2\u110f\u1111\5\u01d2\u00ea\2\u1110\u110f\3\2\2\2\u1110"+
		"\u1111\3\2\2\2\u1111\u111d\3\2\2\2\u1112\u1113\7\u0138\2\2\u1113\u1115"+
		"\7K\2\2\u1114\u1116\5\u01d2\u00ea\2\u1115\u1114\3\2\2\2\u1115\u1116\3"+
		"\2\2\2\u1116\u111d\3\2\2\2\u1117\u1118\7Q\2\2\u1118\u111a\7\u0221\2\2"+
		"\u1119\u111b\5\u01d2\u00ea\2\u111a\u1119\3\2\2\2\u111a\u111b\3\2\2\2\u111b"+
		"\u111d\3\2\2\2\u111c\u110c\3\2\2\2\u111c\u1112\3\2\2\2\u111c\u1117\3\2"+
		"\2\2\u111d\u01d1\3\2\2\2\u111e\u111f\7d\2\2\u111f\u1123\7\u01c4\2\2\u1120"+
		"\u1121\7d\2\2\u1121\u1123\7\u01a9\2\2\u1122\u111e\3\2\2\2\u1122\u1120"+
		"\3\2\2\2\u1123\u01d3\3\2\2\2\u1124\u1125\78\2\2\u1125\u1129\7\u00a9\2"+
		"\2\u1126\u1127\7f\2\2\u1127\u1128\7n\2\2\u1128\u112a\7r\2\2\u1129\u1126"+
		"\3\2\2\2\u1129\u112a\3\2\2\2\u112a\u1132\3\2\2\2\u112b\u112c\5\u03d0\u01e9"+
		"\2\u112c\u112d\5\u0442\u0222\2\u112d\u1133\3\2\2\2\u112e\u112f\5\u03d0"+
		"\u01e9\2\u112f\u1130\7Y\2\2\u1130\u1131\5\u03d0\u01e9\2\u1131\u1133\3"+
		"\2\2\2\u1132\u112b\3\2\2\2\u1132\u112e\3\2\2\2\u1133\u01d5\3\2\2\2\u1134"+
		"\u1136\78\2\2\u1135\u1137\7\u0098\2\2\u1136\u1135\3\2\2\2\u1136\u1137"+
		"\3\2\2\2\u1137\u1138\3\2\2\2\u1138\u1139\7\u01ab\2\2\u1139\u113a\5\u03d0"+
		"\u01e9\2\u113a\u113b\7i\2\2\u113b\u113c\7\u0223\2\2\u113c\u113d\7j\2\2"+
		"\u113d\u113e\7\u0223\2\2\u113e\u113f\7Y\2\2\u113f\u1140\5\u03d0\u01e9"+
		"\2\u1140\u01d7\3\2\2\2\u1141\u1142\78\2\2\u1142\u1143\7\u00f7\2\2\u1143"+
		"\u1145\5\u03d0\u01e9\2\u1144\u1146\7d\2\2\u1145\u1144\3\2\2\2\u1145\u1146"+
		"\3\2\2\2\u1146\u1147\3\2\2\2\u1147\u1148\5\u0370\u01b9\2\u1148\u1149\5"+
		"\22\n\2\u1149\u01d9\3\2\2\2\u114a\u114b\78\2\2\u114b\u114c\7\u01c8\2\2"+
		"\u114c\u114d\7L\2\2\u114d\u114e\5\u02ec\u0177\2\u114e\u114f\7e\2\2\u114f"+
		"\u1152\5\u0448\u0225\2\u1150\u1151\7U\2\2\u1151\u1153\5\u01dc\u00ef\2"+
		"\u1152\u1150\3\2\2\2\u1152\u1153\3\2\2\2\u1153\u1154\3\2\2\2\u1154\u1155"+
		"\7\u00f9\2\2\u1155\u1156\t\33\2\2\u1156\u1157\5\u034a\u01a6\2\u1157\u1158"+
		"\7#\2\2\u1158\u1159\7$\2\2\u1159\u01db\3\2\2\2\u115a\u115f\5\u01de\u00f0"+
		"\2\u115b\u115c\7k\2\2\u115c\u115e\5\u01de\u00f0\2\u115d\u115b\3\2\2\2"+
		"\u115e\u1161\3\2\2\2\u115f\u115d\3\2\2\2\u115f\u1160\3\2\2\2\u1160\u01dd"+
		"\3\2\2\2\u1161\u115f\3\2\2\2\u1162\u1163\5\u0350\u01a9\2\u1163\u1164\7"+
		"t\2\2\u1164\u1165\7#\2\2\u1165\u1166\5\u01e0\u00f1\2\u1166\u1167\7$\2"+
		"\2\u1167\u01df\3\2\2\2\u1168\u116d\7\u0223\2\2\u1169\u116a\7)\2\2\u116a"+
		"\u116c\7\u0223\2\2\u116b\u1169\3\2\2\2\u116c\u116f\3\2\2\2\u116d\u116b"+
		"\3\2\2\2\u116d\u116e\3\2\2\2\u116e\u01e1\3\2\2\2\u116f\u116d\3\2\2\2\u1170"+
		"\u1171\78\2\2\u1171\u1175\7\u00fb\2\2\u1172\u1173\7f\2\2\u1173\u1174\7"+
		"n\2\2\u1174\u1176\7r\2\2\u1175\u1172\3\2\2\2\u1175\u1176\3\2\2\2\u1176"+
		"\u1177\3\2\2\2\u1177\u1179\5\u02ec\u0177\2\u1178\u117a\7Q\2\2\u1179\u1178"+
		"\3\2\2\2\u1179\u117a\3\2\2\2\u117a\u117b\3\2\2\2\u117b\u117c\5\u01e4\u00f3"+
		"\2\u117c\u01e3\3\2\2\2\u117d\u117f\5\u01e6\u00f4\2\u117e\u117d\3\2\2\2"+
		"\u117f\u1182\3\2\2\2\u1180\u117e\3\2\2\2\u1180\u1181\3\2\2\2\u1181\u01e5"+
		"\3\2\2\2\u1182\u1180\3\2\2\2\u1183\u1184\7<\2\2\u1184\u118b\5\u02ec\u0177"+
		"\2\u1185\u1186\7\u017b\2\2\u1186\u118b\5\u0462\u0232\2\u1187\u1188\7Y"+
		"\2\2\u1188\u118b\5\u0462\u0232\2\u1189\u118b\7\u00d8\2\2\u118a\u1183\3"+
		"\2\2\2\u118a\u1185\3\2\2\2\u118a\u1187\3\2\2\2\u118a\u1189\3\2\2\2\u118b"+
		"\u01e7\3\2\2\2\u118c\u118d\78\2\2\u118d\u118e\7G\2\2\u118e\u118f\7\u00f1"+
		"\2\2\u118f\u1190\7\u021a\2\2\u1190\u1192\5\u02ec\u0177\2\u1191\u1193\5"+
		"\u014c\u00a7\2\u1192\u1191\3\2\2\2\u1192\u1193\3\2\2\2\u1193\u1195\3\2"+
		"\2\2\u1194\u1196\5\u0454\u022b\2\u1195\u1194\3\2\2\2\u1195\u1196\3\2\2"+
		"\2\u1196\u01e9\3\2\2\2\u1197\u1198\78\2\2\u1198\u1199\7G\2\2\u1199\u119a"+
		"\7A\2\2\u119a\u119b\5\u01ec\u00f7\2\u119b\u01eb\3\2\2\2\u119c\u119d\7"+
		"f\2\2\u119d\u119e\7n\2\2\u119e\u11a0\7r\2\2\u119f\u119c\3\2\2\2\u119f"+
		"\u11a0\3\2\2\2\u11a0\u11a1\3\2\2\2\u11a1\u11a2\5\u034e\u01a8\2\u11a2\u11a4"+
		"\7#\2\2\u11a3\u11a5\5\u01ee\u00f8\2\u11a4\u11a3\3\2\2\2\u11a4\u11a5\3"+
		"\2\2\2\u11a5\u11a6\3\2\2\2\u11a6\u11ac\7$\2\2\u11a7\u11a8\7\u0109\2\2"+
		"\u11a8\u11a9\7#\2\2\u11a9\u11aa\5\u04d0\u0269\2\u11aa\u11ab\7$\2\2\u11ab"+
		"\u11ad\3\2\2\2\u11ac\u11a7\3\2\2\2\u11ac\u11ad\3\2\2\2\u11ad\u11ae\3\2"+
		"\2\2\u11ae\u11af\7\u01fa\2\2\u11af\u11b1\5\u02ec\u0177\2\u11b0\u11b2\5"+
		"\u0454\u022b\2\u11b1\u11b0\3\2\2\2\u11b1\u11b2\3\2\2\2\u11b2\u11c9\3\2"+
		"\2\2\u11b3\u11b4\7f\2\2\u11b4\u11b5\7n\2\2\u11b5\u11b7\7r\2\2\u11b6\u11b3"+
		"\3\2\2\2\u11b6\u11b7\3\2\2\2\u11b7\u11b8\3\2\2\2\u11b8\u11b9\5\u034e\u01a8"+
		"\2\u11b9\u11ba\7\u00d4\2\2\u11ba\u11bb\7\u013a\2\2\u11bb\u11c0\5\u034e"+
		"\u01a8\2\u11bc\u11bd\7#\2\2\u11bd\u11be\5\f\7\2\u11be\u11bf\7$\2\2\u11bf"+
		"\u11c1\3\2\2\2\u11c0\u11bc\3\2\2\2\u11c0\u11c1\3\2\2\2\u11c1\u11c2\3\2"+
		"\2\2\u11c2\u11c3\5\6\4\2\u11c3\u11c4\7\u01fa\2\2\u11c4\u11c6\5\u02ec\u0177"+
		"\2\u11c5\u11c7\5\u0454\u022b\2\u11c6\u11c5\3\2\2\2\u11c6\u11c7\3\2\2\2"+
		"\u11c7\u11c9\3\2\2\2\u11c8\u119f\3\2\2\2\u11c8\u11b6\3\2\2\2\u11c9\u01ed"+
		"\3\2\2\2\u11ca\u11cf\5\u01f0\u00f9\2\u11cb\u11cc\7)\2\2\u11cc\u11ce\5"+
		"\u01f0\u00f9\2\u11cd\u11cb\3\2\2\2\u11ce\u11d1\3\2\2\2\u11cf\u11cd\3\2"+
		"\2\2\u11cf\u11d0\3\2\2\2\u11d0\u01ef\3\2\2\2\u11d1\u11cf\3\2\2\2\u11d2"+
		"\u11d6\5\u042c\u0217\2\u11d3\u11d6\5\u01f2\u00fa\2\u11d4\u11d6\5f\64\2"+
		"\u11d5\u11d2\3\2\2\2\u11d5\u11d3\3\2\2\2\u11d5\u11d4\3\2\2\2\u11d6\u01f1"+
		"\3\2\2\2\u11d7\u11d8\7w\2\2\u11d8\u11d9\5\u034e\u01a8\2\u11d9\u11da\5"+
		"\u01f4\u00fb\2\u11da\u01f3\3\2\2\2\u11db\u11e1\b\u00fb\1\2\u11dc\u11dd"+
		"\f\4\2\2\u11dd\u11de\t\t\2\2\u11de\u11e0\5\u01f6\u00fc\2\u11df\u11dc\3"+
		"\2\2\2\u11e0\u11e3\3\2\2\2\u11e1\u11df\3\2\2\2\u11e1\u11e2\3\2\2\2\u11e2"+
		"\u01f5\3\2\2\2\u11e3\u11e1\3\2\2\2\u11e4\u11e5\t\34\2\2\u11e5\u01f7\3"+
		"\2\2\2\u11e6\u11e9\78\2\2\u11e7\u11e8\7l\2\2\u11e8\u11ea\7\u01ed\2\2\u11e9"+
		"\u11e7\3\2\2\2\u11e9\u11ea\3\2\2\2\u11ea\u11eb\3\2\2\2\u11eb\u11ec\7K"+
		"\2\2\u11ec\u11ed\5\u034a\u01a6\2\u11ed\u11fa\5\u0208\u0105\2\u11ee\u11ef"+
		"\7\u0204\2\2\u11ef\u11f0\5\u0206\u0104\2\u11f0\u11f1\5\u01fe\u0100\2\u11f1"+
		"\u11fb\3\2\2\2\u11f2\u11f3\7\u0204\2\2\u11f3\u11f4\7A\2\2\u11f4\u11f5"+
		"\7#\2\2\u11f5\u11f6\5\u01fa\u00fe\2\u11f6\u11f7\7$\2\2\u11f7\u11f8\5\u01fe"+
		"\u0100\2\u11f8\u11fb\3\2\2\2\u11f9\u11fb\5\u01fe\u0100\2\u11fa\u11ee\3"+
		"\2\2\2\u11fa\u11f2\3\2\2\2\u11fa\u11f9\3\2\2\2\u11fb\u01f9\3\2\2\2\u11fc"+
		"\u1201\5\u01fc\u00ff\2\u11fd\u11fe\7)\2\2\u11fe\u1200\5\u01fc\u00ff\2"+
		"\u11ff\u11fd\3\2\2\2\u1200\u1203\3\2\2\2\u1201\u11ff\3\2\2\2\u1201\u1202"+
		"\3\2\2\2\u1202\u01fb\3\2\2\2\u1203\u1201\3\2\2\2\u1204\u1205\5\u0342\u01a2"+
		"\2\u1205\u1206\5\u0404\u0203\2\u1206\u01fd\3\2\2\2\u1207\u1209\5\u0200"+
		"\u0101\2\u1208\u1207\3\2\2\2\u1209\u120a\3\2\2\2\u120a\u1208\3\2\2\2\u120a"+
		"\u120b\3\2\2\2\u120b\u01ff\3\2\2\2\u120c\u120d\7d\2\2\u120d\u1215\5\u0204"+
		"\u0103\2\u120e\u120f\7\u010c\2\2\u120f\u1215\5\u0462\u0232\2\u1210\u1211"+
		"\7\u020f\2\2\u1211\u1215\5\u0202\u0102\2\u1212\u1215\7\u00c7\2\2\u1213"+
		"\u1215\5\u0480\u0241\2\u1214\u120c\3\2\2\2\u1214\u120e\3\2\2\2\u1214\u1210"+
		"\3\2\2\2\u1214\u1212\3\2\2\2\u1214\u1213\3\2\2\2\u1215\u0201\3\2\2\2\u1216"+
		"\u1217\7i\2\2\u1217\u1218\7\u00ae\2\2\u1218\u1219\5\u0370\u01b9\2\u1219"+
		"\u121a\7)\2\2\u121a\u121b\7i\2\2\u121b\u121c\7\u00ae\2\2\u121c\u121d\5"+
		"\u0370\u01b9\2\u121d\u0203\3\2\2\2\u121e\u1226\5\u02da\u016e\2\u121f\u1223"+
		"\7\u0223\2\2\u1220\u1221\7)\2\2\u1221\u1224\5\u02da\u016e\2\u1222\u1224"+
		"\7\u0223\2\2\u1223\u1220\3\2\2\2\u1223\u1222\3\2\2\2\u1223\u1224\3\2\2"+
		"\2\u1224\u1226\3\2\2\2\u1225\u121e\3\2\2\2\u1225\u121f\3\2\2\2\u1226\u0205"+
		"\3\2\2\2\u1227\u1228\5\u0404\u0203\2\u1228\u0207\3\2\2\2\u1229\u122b\7"+
		"#\2\2\u122a\u122c\5\u020a\u0106\2\u122b\u122a\3\2\2\2\u122b\u122c\3\2"+
		"\2\2\u122c\u122d\3\2\2\2\u122d\u122e\7$\2\2\u122e\u0209\3\2\2\2\u122f"+
		"\u1234\5\u020c\u0107\2\u1230\u1231\7)\2\2\u1231\u1233\5\u020c\u0107\2"+
		"\u1232\u1230\3\2\2\2\u1233\u1236\3\2\2\2\u1234\u1232\3\2\2\2\u1234\u1235"+
		"\3\2\2\2\u1235\u020b\3\2\2\2\u1236\u1234\3\2\2\2\u1237\u1241\5\u045c\u022f"+
		"\2\u1238\u1239\5\u045c\u022f\2\u1239\u123a\7\u0098\2\2\u123a\u123b\5\u0300"+
		"\u0181\2\u123b\u1241\3\2\2\2\u123c\u123d\5\u045c\u022f\2\u123d\u123e\7"+
		"\33\2\2\u123e\u123f\5\u0300\u0181\2\u123f\u1241\3\2\2\2\u1240\u1237\3"+
		"\2\2\2\u1240\u1238\3\2\2\2\u1240\u123c\3\2\2\2\u1241\u020d\3\2\2\2\u1242"+
		"\u1245\78\2\2\u1243\u1244\7l\2\2\u1244\u1246\7\u01ed\2\2\u1245\u1243\3"+
		"\2\2\2\u1245\u1246\3\2\2\2\u1246\u1248\3\2\2\2\u1247\u1249\7\u0211\2\2"+
		"\u1248\u1247\3\2\2\2\u1248\u1249\3\2\2\2\u1249\u124b\3\2\2\2\u124a\u124c"+
		"\7\u01df\2\2\u124b\u124a\3\2\2\2\u124b\u124c\3\2\2\2\u124c\u124d\3\2\2"+
		"\2\u124d\u124e\7\u010c\2\2\u124e\u125c\5\u02ec\u0177\2\u124f\u1250\7\u01d3"+
		"\2\2\u1250\u1253\5\u0150\u00a9\2\u1251\u1252\7\u01bf\2\2\u1252\u1254\5"+
		"\u0150\u00a9\2\u1253\u1251\3\2\2\2\u1253\u1254\3\2\2\2\u1254\u1256\3\2"+
		"\2\2\u1255\u1257\5\u0212\u010a\2\u1256\u1255\3\2\2\2\u1256\u1257\3\2\2"+
		"\2\u1257\u125d\3\2\2\2\u1258\u1259\7#\2\2\u1259\u125a\5\u0210\u0109\2"+
		"\u125a\u125b\7$\2\2\u125b\u125d\3\2\2\2\u125c\u124f\3\2\2\2\u125c\u1258"+
		"\3\2\2\2\u125c\u125d\3\2\2\2\u125d\u020f\3\2\2\2\u125e\u125f\7Y\2\2\u125f"+
		"\u1260\7\u00a2\2\2\u1260\u1261\7Q\2\2\u1261\u1262\7K\2\2\u1262\u1263\5"+
		"\u013a\u009e\2\u1263\u1264\7)\2\2\u1264\u1265\t\35\2\2\u1265\u1266\7\u00a2"+
		"\2\2\u1266\u1267\7Q\2\2\u1267\u1268\7K\2\2\u1268\u1269\5\u013a\u009e\2"+
		"\u1269\u1270\3\2\2\2\u126a\u126b\t\35\2\2\u126b\u126c\7\u00a2\2\2\u126c"+
		"\u126d\7Q\2\2\u126d\u126e\7K\2\2\u126e\u1270\5\u013a\u009e\2\u126f\u125e"+
		"\3\2\2\2\u126f\u126a\3\2\2\2\u1270\u0211\3\2\2\2\u1271\u1272\7\u0212\2"+
		"\2\u1272\u1276\5\u0150\u00a9\2\u1273\u1274\7\u00dd\2\2\u1274\u1276\7\u0212"+
		"\2\2\u1275\u1271\3\2\2\2\u1275\u1273\3\2\2\2\u1276\u0213\3\2\2\2\u1277"+
		"\u1278\78\2\2\u1278\u1279\7\u01ff\2\2\u1279\u127a\5\u02ec\u0177\2\u127a"+
		"\u127b\7e\2\2\u127b\u127e\5\u034e\u01a8\2\u127c\u127d\7d\2\2\u127d\u127f"+
		"\5\u02da\u016e\2\u127e\u127c\3\2\2\2\u127e\u127f\3\2\2\2\u127f\u1282\3"+
		"\2\2\2\u1280\u1281\7i\2\2\u1281\u1283\5\u0484\u0243\2\u1282\u1280\3\2"+
		"\2\2\u1282\u1283\3\2\2\2\u1283\u1286\3\2\2\2\u1284\u1285\7j\2\2\u1285"+
		"\u1287\5\u0466\u0234\2\u1286\u1284\3\2\2\2\u1286\u1287\3\2\2\2\u1287\u128d"+
		"\3\2\2\2\u1288\u1289\7b\2\2\u1289\u128a\7#\2\2\u128a\u128b\5\u0300\u0181"+
		"\2\u128b\u128c\7$\2\2\u128c\u128e\3\2\2\2\u128d\u1288\3\2\2\2\u128d\u128e"+
		"\3\2\2\2\u128e\u1295\3\2\2\2\u128f\u1290\7Q\2\2\u1290\u1291\7\u00d9\2"+
		"\2\u1291\u1292\7#\2\2\u1292\u1293\5\u0300\u0181\2\u1293\u1294\7$\2\2\u1294"+
		"\u1296\3\2\2\2\u1295\u128f\3\2\2\2\u1295\u1296\3\2\2\2\u1296\u0215\3\2"+
		"\2\2\u1297\u129a\78\2\2\u1298\u1299\7l\2\2\u1299\u129b\7\u01ed\2\2\u129a"+
		"\u1298\3\2\2\2\u129a\u129b\3\2\2\2\u129b\u129c\3\2\2\2\u129c\u129d\7M"+
		"\2\2\u129d\u129e\5\u034a\u01a6\2\u129e\u129f\5\u0208\u0105\2\u129f\u12a0"+
		"\5\u01fe\u0100\2\u12a0\u0217\3\2\2\2\u12a1\u12a2\78\2\2\u12a2\u12a3\7"+
		"\u01e3\2\2\u12a3\u12a5\5\u02ec\u0177\2\u12a4\u12a6\5\u021a\u010e\2\u12a5"+
		"\u12a4\3\2\2\2\u12a5\u12a6\3\2\2\2\u12a6\u12a9\3\2\2\2\u12a7\u12a8\7Q"+
		"\2\2\u12a8\u12aa\5\u0442\u0222\2\u12a9\u12a7\3\2\2\2\u12a9\u12aa\3\2\2"+
		"\2\u12aa\u0219\3\2\2\2\u12ab\u12ac\7i\2\2\u12ac\u12ad\7A\2\2\u12ad\u12b2"+
		"\5\u047c\u023f\2\u12ae\u12af\7i\2\2\u12af\u12b0\7u\2\2\u12b0\u12b2\7\u0208"+
		"\2\2\u12b1\u12ab\3\2\2\2\u12b1\u12ae\3\2\2\2\u12b2\u021b\3\2\2\2\u12b3"+
		"\u12b6\78\2\2\u12b4\u12b5\7l\2\2\u12b5\u12b7\7\u01ed\2\2\u12b6\u12b4\3"+
		"\2\2\2\u12b6\u12b7\3\2\2\2\u12b7\u12b8\3\2\2\2\u12b8\u12b9\7\u0126\2\2"+
		"\u12b9\u12ba\5\u02ec\u0177\2\u12ba\u12bb\7d\2\2\u12bb\u12bc\7e\2\2\u12bc"+
		"\u12bd\5\u0486\u0244\2\u12bd\u12be\7j\2\2\u12be\u12c1\5\u034e\u01a8\2"+
		"\u12bf\u12c0\7c\2\2\u12c0\u12c2\5\u0300\u0181\2\u12c1\u12bf\3\2\2\2\u12c1"+
		"\u12c2\3\2\2\2\u12c2\u12c3\3\2\2\2\u12c3\u12c5\7\u009f\2\2\u12c4\u12c6"+
		"\t\36\2\2\u12c5\u12c4\3\2\2\2\u12c5\u12c6\3\2\2\2\u12c6\u12c7\3\2\2\2"+
		"\u12c7\u12c8\5\u021e\u0110\2\u12c8\u021d\3\2\2\2\u12c9\u12d0\7\u0114\2"+
		"\2\u12ca\u12d0\5\u0220\u0111\2\u12cb\u12cc\7#\2\2\u12cc\u12cd\5\u0222"+
		"\u0112\2\u12cd\u12ce\7$\2\2\u12ce\u12d0\3\2\2\2\u12cf\u12c9\3\2\2\2\u12cf"+
		"\u12ca\3\2\2\2\u12cf\u12cb\3\2\2\2\u12d0\u021f\3\2\2\2\u12d1\u12d7\5\u04ac"+
		"\u0257\2\u12d2\u12d7\5\u048a\u0246\2\u12d3\u12d7\5\u049a\u024e\2\u12d4"+
		"\u12d7\5\u04a6\u0254\2\u12d5\u12d7\5\u0224\u0113\2\u12d6\u12d1\3\2\2\2"+
		"\u12d6\u12d2\3\2\2\2\u12d6\u12d3\3\2\2\2\u12d6\u12d4\3\2\2\2\u12d6\u12d5"+
		"\3\2\2\2\u12d7\u0221\3\2\2\2\u12d8\u12da\5\u0220\u0111\2\u12d9\u12d8\3"+
		"\2\2\2\u12d9\u12da\3\2\2\2\u12da\u12e1\3\2\2\2\u12db\u12dd\7/\2\2\u12dc"+
		"\u12de\5\u0220\u0111\2\u12dd\u12dc\3\2\2\2\u12dd\u12de\3\2\2\2\u12de\u12e0"+
		"\3\2\2\2\u12df\u12db\3\2\2\2\u12e0\u12e3\3\2\2\2\u12e1\u12df\3\2\2\2\u12e1"+
		"\u12e2\3\2\2\2\u12e2\u0223\3\2\2\2\u12e3\u12e1\3\2\2\2\u12e4\u12e5\7\u0200"+
		"\2\2\u12e5\u12e8\5\u0350\u01a9\2\u12e6\u12e7\7)\2\2\u12e7\u12e9\7\u0223"+
		"\2\2\u12e8\u12e6\3\2\2\2\u12e8\u12e9\3\2\2\2\u12e9\u0225\3\2\2\2\u12ea"+
		"\u12eb\78\2\2\u12eb\u12ec\7L\2\2\u12ec\u12ed\5\u02ec\u0177\2\u12ed\u12ee"+
		"\5\u022c\u0117\2\u12ee\u12ef\5\u0228\u0115\2\u12ef\u12f0\7e\2\2\u12f0"+
		"\u12f2\5\u034e\u01a8\2\u12f1\u12f3\5\u0236\u011c\2\u12f2\u12f1\3\2\2\2"+
		"\u12f2\u12f3\3\2\2\2\u12f3\u12f5\3\2\2\2\u12f4\u12f6\5\u0234\u011b\2\u12f5"+
		"\u12f4\3\2\2\2\u12f5\u12f6\3\2\2\2\u12f6\u12f8\3\2\2\2\u12f7\u12f9\5\u0232"+
		"\u011a\2\u12f8\u12f7\3\2\2\2\u12f8\u12f9\3\2\2\2\u12f9\u12fa\3\2\2\2\u12fa"+
		"\u12fb\7\u00f9\2\2\u12fb\u12fc\t\33\2\2\u12fc\u12fd\5\u034a\u01a6\2\u12fd"+
		"\u12ff\7#\2\2\u12fe\u1300\5\u022e\u0118\2\u12ff\u12fe\3\2\2\2\u12ff\u1300"+
		"\3\2\2\2\u1300\u1301\3\2\2\2\u1301\u1302\7$\2\2\u1302\u1317\3\2\2\2\u1303"+
		"\u1304\78\2\2\u1304\u1305\7D\2\2\u1305\u1308\7L\2\2\u1306\u1307\7Y\2\2"+
		"\u1307\u1309\5\u034e\u01a8\2\u1308\u1306\3\2\2\2\u1308\u1309\3\2\2\2\u1309"+
		"\u130a\3\2\2\2\u130a\u130b\5\u00ccg\2\u130b\u130c\7i\2\2\u130c\u130d\7"+
		"\u01c7\2\2\u130d\u130e\7\u00d5\2\2\u130e\u130f\5\u0232\u011a\2\u130f\u1310"+
		"\7\u00f9\2\2\u1310\u1311\t\33\2\2\u1311\u1312\5\u034a\u01a6\2\u1312\u1313"+
		"\7#\2\2\u1313\u1314\5\u022e\u0118\2\u1314\u1315\7$\2\2\u1315\u1317\3\2"+
		"\2\2\u1316\u12ea\3\2\2\2\u1316\u1303\3\2\2\2\u1317\u0227\3\2\2\2\u1318"+
		"\u131d\5\u022a\u0116\2\u1319\u131a\7l\2\2\u131a\u131c\5\u022a\u0116\2"+
		"\u131b\u1319\3\2\2\2\u131c\u131f\3\2\2\2\u131d\u131b\3\2\2\2\u131d\u131e"+
		"\3\2\2\2\u131e\u0229\3\2\2\2\u131f\u131d\3\2\2\2\u1320\u1328\7\65\2\2"+
		"\u1321\u1328\7\67\2\2\u1322\u1328\7\66\2\2\u1323\u1324\7\66\2\2\u1324"+
		"\u1325\7\u013a\2\2\u1325\u1328\5,\27\2\u1326\u1328\7;\2\2\u1327\u1320"+
		"\3\2\2\2\u1327\u1321\3\2\2\2\u1327\u1322\3\2\2\2\u1327\u1323\3\2\2\2\u1327"+
		"\u1326\3\2\2\2\u1328\u022b\3\2\2\2\u1329\u132e\7\u01a7\2\2\u132a\u132e"+
		"\7\u01a1\2\2\u132b\u132c\7\u01bc\2\2\u132c\u132e\7\u013a\2\2\u132d\u1329"+
		"\3\2\2\2\u132d\u132a\3\2\2\2\u132d\u132b\3\2\2\2\u132e\u022d\3\2\2\2\u132f"+
		"\u1334\5\u0230\u0119\2\u1330\u1331\7)\2\2\u1331\u1333\5\u0230\u0119\2"+
		"\u1332\u1330\3\2\2\2\u1333\u1336\3\2\2\2\u1334\u1332\3\2\2\2\u1334\u1335"+
		"\3\2\2\2\u1335\u022f\3\2\2\2\u1336\u1334\3\2\2\2\u1337\u133b\7\u0224\2"+
		"\2\u1338\u133b\7\u0223\2\2\u1339\u133b\5\u0448\u0225\2\u133a\u1337\3\2"+
		"\2\2\u133a\u1338\3\2\2\2\u133a\u1339\3\2\2\2\u133b\u0231\3\2\2\2\u133c"+
		"\u133d\7U\2\2\u133d\u133e\7#\2\2\u133e\u133f\5\u0300\u0181\2\u133f\u1340"+
		"\7$\2\2\u1340\u0233\3\2\2\2\u1341\u1343\7i\2\2\u1342\u1344\7\u01c7\2\2"+
		"\u1343\u1342\3\2\2\2\u1343\u1344\3\2\2\2\u1344\u1345\3\2\2\2\u1345\u1346"+
		"\t\37\2\2\u1346\u0235\3\2\2\2\u1347\u1348\7\u01e5\2\2\u1348\u1349\5\u0238"+
		"\u011d\2\u1349\u0237\3\2\2\2\u134a\u134c\5\u023a\u011e\2\u134b\u134a\3"+
		"\2\2\2\u134c\u134d\3\2\2\2\u134d\u134b\3\2\2\2\u134d\u134e\3\2\2\2\u134e"+
		"\u0239\3\2\2\2\u134f\u1350\5\u0240\u0121\2\u1350\u1352\5\u023e\u0120\2"+
		"\u1351\u1353\7d\2\2\u1352\u1351\3\2\2\2\u1352\u1353\3\2\2\2\u1353\u1354"+
		"\3\2\2\2\u1354\u1355\5\u023c\u011f\2\u1355\u023b\3\2\2\2\u1356\u1357\5"+
		"\u0350\u01a9\2\u1357\u023d\3\2\2\2\u1358\u1359\t \2\2\u1359\u023f\3\2"+
		"\2\2\u135a\u135b\t!\2\2\u135b\u0241\3\2\2\2\u135c\u135e\78\2\2\u135d\u135f"+
		"\5\u0244\u0123\2\u135e\u135d\3\2\2\2\u135e\u135f\3\2\2\2\u135f\u1360\3"+
		"\2\2\2\u1360\u1364\7\u0128\2\2\u1361\u1362\7f\2\2\u1362\u1363\7n\2\2\u1363"+
		"\u1365\7r\2\2\u1364\u1361\3\2\2\2\u1364\u1365\3\2\2\2\u1365\u1366\3\2"+
		"\2\2\u1366\u1368\5\u034e\u01a8\2\u1367\u1369\5\u0436\u021c\2\u1368\u1367"+
		"\3\2\2\2\u1368\u1369\3\2\2\2\u1369\u0243\3\2\2\2\u136a\u136c\t\5\2\2\u136b"+
		"\u136a\3\2\2\2\u136b\u136c\3\2\2\2\u136c\u136d\3\2\2\2\u136d\u1370\t\2"+
		"\2\2\u136e\u1370\7\u0133\2\2\u136f\u136b\3\2\2\2\u136f\u136e\3\2\2\2\u1370"+
		"\u0245\3\2\2\2\u1371\u1372\78\2\2\u1372\u1376\7\u01fa\2\2\u1373\u1374"+
		"\7f\2\2\u1374\u1375\7n\2\2\u1375\u1377\7r\2\2\u1376\u1373\3\2\2\2\u1376"+
		"\u1377\3\2\2\2\u1377\u1378\3\2\2\2\u1378\u137b\5\u02ec\u0177\2\u1379\u137a"+
		"\7\u00ae\2\2\u137a\u137c\7\u0223\2\2\u137b\u1379\3\2\2\2\u137b\u137c\3"+
		"\2\2\2\u137c\u137e\3\2\2\2\u137d\u137f\5\u0186\u00c4\2\u137e\u137d\3\2"+
		"\2\2\u137e\u137f\3\2\2\2\u137f\u1380\3\2\2\2\u1380\u1381\7G\2\2\u1381"+
		"\u1382\7\u00f1\2\2\u1382\u1383\7\u021a\2\2\u1383\u1384\5\u02ec\u0177\2"+
		"\u1384\u1385\5\u0454\u022b\2\u1385\u0247\3\2\2\2\u1386\u1387\78\2\2\u1387"+
		"\u138b\7\u012d\2\2\u1388\u1389\7f\2\2\u1389\u138a\7n\2\2\u138a\u138c\7"+
		"r\2\2\u138b\u1388\3\2\2\2\u138b\u138c\3\2\2\2\u138c\u138d\3\2\2\2\u138d"+
		"\u138e\5\u03d0\u01e9\2\u138e\u138f\5\u04c0\u0261\2\u138f\u1390\7e\2\2"+
		"\u1390\u1391\5\u0374\u01bb\2\u1391\u1392\7Y\2\2\u1392\u1393\5\u0502\u0282"+
		"\2\u1393\u0249\3\2\2\2\u1394\u1395\78\2\2\u1395\u1396\7\u01fb\2\2\u1396"+
		"\u1397\5\u02ec\u0177\2\u1397\u1398\7\u01ca\2\2\u1398\u1399\7\u0223\2\2"+
		"\u1399\u139a\7\u01e3\2\2\u139a\u139d\5\u018c\u00c7\2\u139b\u139c\7Q\2"+
		"\2\u139c\u139e\5\u0442\u0222\2\u139d\u139b\3\2\2\2\u139d\u139e\3\2\2\2"+
		"\u139e\u024b\3\2\2\2\u139f\u13a0\78\2\2\u13a0\u13a1\7\u012f\2\2\u13a1"+
		"\u13a4\5\u02ec\u0177\2\u13a2\u13a3\7\u011b\2\2\u13a3\u13a5\5\u041e\u0210"+
		"\2\u13a4\u13a2\3\2\2\2\u13a4\u13a5\3\2\2\2\u13a5\u13a6\3\2\2\2\u13a6\u13a7"+
		"\7\u01d0\2\2\u13a7\u13aa\7\u0223\2\2\u13a8\u13a9\7Q\2\2\u13a9\u13ab\5"+
		"\u03fc\u01ff\2\u13aa\u13a8\3\2\2\2\u13aa\u13ab\3\2\2\2\u13ab\u024d\3\2"+
		"\2\2\u13ac\u13ad\78\2\2\u13ad\u13ae\7\u00b2\2\2\u13ae\u13af\7\u01fc\2"+
		"\2\u13af\u13b0\t\"\2\2\u13b0\u13b1\5\u03d0\u01e9\2\u13b1\u13b2\5\u0442"+
		"\u0222\2\u13b2\u024f\3\2\2\2\u13b3\u13b6\78\2\2\u13b4\u13b5\7l\2\2\u13b5"+
		"\u13b7\7\u01ed\2\2\u13b6\u13b4\3\2\2\2\u13b6\u13b7\3\2\2\2\u13b7\u13b8"+
		"\3\2\2\2\u13b8\u13b9\7\u020f\2\2\u13b9\u13ba\7i\2\2\u13ba\u13bb\5\u0370"+
		"\u01b9\2\u13bb\u13bc\7\u010c\2\2\u13bc\u13bd\5\u02ec\u0177\2\u13bd\u13be"+
		"\7#\2\2\u13be\u13bf\5\u0210\u0109\2\u13bf\u13c0\7$\2\2\u13c0\u0251\3\2"+
		"\2\2\u13c1\u13c2\78\2\2\u13c2\u13c3\7\u00ae\2\2\u13c3\u13c4\5\u03d0\u01e9"+
		"\2\u13c4\u13c5\5\u0254\u012b\2\u13c5\u0253\3\2\2\2\u13c6\u13c8\5\u0442"+
		"\u0222\2\u13c7\u13c6\3\2\2\2\u13c7\u13c8\3\2\2\2\u13c8\u13da\3\2\2\2\u13c9"+
		"\u13ca\7d\2\2\u13ca\u13cc\7#\2\2\u13cb\u13cd\5\u03ca\u01e6\2\u13cc\u13cb"+
		"\3\2\2\2\u13cc\u13cd\3\2\2\2\u13cd\u13ce\3\2\2\2\u13ce\u13da\7$\2\2\u13cf"+
		"\u13d0\7d\2\2\u13d0\u13d1\7\u014b\2\2\u13d1\u13d3\7#\2\2\u13d2\u13d4\5"+
		"\u0256\u012c\2\u13d3\u13d2\3\2\2\2\u13d3\u13d4\3\2\2\2\u13d4\u13d5\3\2"+
		"\2\2\u13d5\u13da\7$\2\2\u13d6\u13d7\7d\2\2\u13d7\u13d8\7\u011f\2\2\u13d8"+
		"\u13da\5\u0442\u0222\2\u13d9\u13c7\3\2\2\2\u13d9\u13c9\3\2\2\2\u13d9\u13cf"+
		"\3\2\2\2\u13d9\u13d6\3\2\2\2\u13da\u0255\3\2\2\2\u13db\u13e0\7\u0223\2"+
		"\2\u13dc\u13dd\7)\2\2\u13dd\u13df\7\u0223\2\2\u13de\u13dc\3\2\2\2\u13df"+
		"\u13e2\3\2\2\2\u13e0\u13de\3\2\2\2\u13e0\u13e1\3\2\2\2\u13e1\u0257\3\2"+
		"\2\2\u13e2\u13e0\3\2\2\2\u13e3\u13e4\78\2\2\u13e4\u13e5\7\u00e6\2\2\u13e5"+
		"\u13e9\7\u01d8\2\2\u13e6\u13e7\7f\2\2\u13e7\u13e8\7n\2\2\u13e8\u13ea\7"+
		"r\2\2\u13e9\u13e6\3\2\2\2\u13e9\u13ea\3\2\2\2\u13ea\u13eb\3\2\2\2\u13eb"+
		"\u13ec\7i\2\2\u13ec\u13ed\5\u01ac\u00d7\2\u13ed\u13ee\7\u01fa\2\2\u13ee"+
		"\u13ef\5\u02ec\u0177\2\u13ef\u13f0\5\u0454\u022b\2\u13f0\u0259\3\2\2\2"+
		"\u13f1\u13f2\7\u01ba\2\2\u13f2\u13f3\t#\2\2\u13f3\u025b\3\2\2\2\u13f4"+
		"\u13f5\7:\2\2\u13f5\u13f6\7\u01a0\2\2\u13f6\u13f9\7\u01da\2\2\u13f7\u13f8"+
		"\7f\2\2\u13f8\u13fa\7r\2\2\u13f9\u13f7\3\2\2\2\u13f9\u13fa\3\2\2\2\u13fa"+
		"\u13fb\3\2\2\2\u13fb\u13fd\5\u02ec\u0177\2\u13fc\u13fe\5\u00d8m\2\u13fd"+
		"\u13fc\3\2\2\2\u13fd\u13fe\3\2\2\2\u13fe\u025d\3\2\2\2\u13ff\u1400\7:"+
		"\2\2\u1400\u1403\7\u01a2\2\2\u1401\u1402\7f\2\2\u1402\u1404\7r\2\2\u1403"+
		"\u1401\3\2\2\2\u1403\u1404\3\2\2\2\u1404\u1405\3\2\2\2\u1405\u1407\5\u0260"+
		"\u0131\2\u1406\u1408\5\u00d8m\2\u1407\u1406\3\2\2\2\u1407\u1408\3\2\2"+
		"\2\u1408\u025f\3\2\2\2\u1409\u140e\5\u013e\u00a0\2\u140a\u140b\7)\2\2"+
		"\u140b\u140d\5\u013e\u00a0\2\u140c\u140a\3\2\2\2\u140d\u1410\3\2\2\2\u140e"+
		"\u140c\3\2\2\2\u140e\u140f\3\2\2\2\u140f\u0261\3\2\2\2\u1410\u140e\3\2"+
		"\2\2\u1411\u1412\7:\2\2\u1412\u1415\7V\2\2\u1413\u1414\7f\2\2\u1414\u1416"+
		"\7r\2\2\u1415\u1413\3\2\2\2\u1415\u1416\3\2\2\2\u1416\u1417\3\2\2\2\u1417"+
		"\u1418\7#\2\2\u1418\u1419\5\u0370\u01b9\2\u1419\u141a\7d\2\2\u141a\u141b"+
		"\5\u0370\u01b9\2\u141b\u141d\7$\2\2\u141c\u141e\5\u00d8m\2\u141d\u141c"+
		"\3\2\2\2\u141d\u141e\3\2\2\2\u141e\u0263\3\2\2\2\u141f\u1420\7:\2\2\u1420"+
		"\u1423\7\u00a9\2\2\u1421\u1422\7f\2\2\u1422\u1424\7r\2\2\u1423\u1421\3"+
		"\2\2\2\u1423\u1424\3\2\2\2\u1424\u1425\3\2\2\2\u1425\u1427\5\u02ec\u0177"+
		"\2\u1426\u1428\5\u00d8m\2\u1427\u1426\3\2\2\2\u1427\u1428\3\2\2\2\u1428"+
		"\u0265\3\2\2\2\u1429\u142a\7:\2\2\u142a\u142d\7\u01ab\2\2\u142b\u142c"+
		"\7f\2\2\u142c\u142e\7r\2\2\u142d\u142b\3\2\2\2\u142d\u142e\3\2\2\2\u142e"+
		"\u142f\3\2\2\2\u142f\u1431\5\u02ec\u0177\2\u1430\u1432\5\u00d8m\2\u1431"+
		"\u1430\3\2\2\2\u1431\u1432\3\2\2\2\u1432\u0267\3\2\2\2\u1433\u1434\7:"+
		"\2\2\u1434\u1437\7\u00f7\2\2\u1435\u1436\7f\2\2\u1436\u1438\7r\2\2\u1437"+
		"\u1435\3\2\2\2\u1437\u1438\3\2\2\2\u1438\u1439\3\2\2\2\u1439\u143b\5\u03d4"+
		"\u01eb\2\u143a\u143c\5\u00d8m\2\u143b\u143a\3\2\2\2\u143b\u143c\3\2\2"+
		"\2\u143c\u0269\3\2\2\2\u143d\u143e\7:\2\2\u143e\u143f\7\u01c8\2\2\u143f"+
		"\u1442\7L\2\2\u1440\u1441\7f\2\2\u1441\u1443\7r\2\2\u1442\u1440\3\2\2"+
		"\2\u1442\u1443\3\2\2\2\u1443\u1444\3\2\2\2\u1444\u1446\5\u02ec\u0177\2"+
		"\u1445\u1447\5\u00d8m\2\u1446\u1445\3\2\2\2\u1446\u1447\3\2\2\2\u1447"+
		"\u026b\3\2\2\2\u1448\u1449\7:\2\2\u1449\u144c\7\u00fb\2\2\u144a\u144b"+
		"\7f\2\2\u144b\u144d\7r\2\2\u144c\u144a\3\2\2\2\u144c\u144d\3\2\2\2\u144d"+
		"\u144e\3\2\2\2\u144e\u1450\5\u03d4\u01eb\2\u144f\u1451\5\u00d8m\2\u1450"+
		"\u144f\3\2\2\2\u1450\u1451\3\2\2\2\u1451\u026d\3\2\2\2\u1452\u1453\7:"+
		"\2\2\u1453\u1454\7G\2\2\u1454\u1455\7\u00f1\2\2\u1455\u1458\7\u021a\2"+
		"\2\u1456\u1457\7f\2\2\u1457\u1459\7r\2\2\u1458\u1456\3\2\2\2\u1458\u1459"+
		"\3\2\2\2\u1459\u145a\3\2\2\2\u145a\u145c\5\u03d4\u01eb\2\u145b\u145d\5"+
		"\u00d8m\2\u145c\u145b\3\2\2\2\u145c\u145d\3\2\2\2\u145d\u026f\3\2\2\2"+
		"\u145e\u145f\7:\2\2\u145f\u1460\7G\2\2\u1460\u1463\7A\2\2\u1461\u1462"+
		"\7f\2\2\u1462\u1464\7r\2\2\u1463\u1461\3\2\2\2\u1463\u1464\3\2\2\2\u1464"+
		"\u1465\3\2\2\2\u1465\u146a\5\u02e6\u0174\2\u1466\u1467\7)\2\2\u1467\u1469"+
		"\5\u02e6\u0174\2\u1468\u1466\3\2\2\2\u1469\u146c\3\2\2\2\u146a\u1468\3"+
		"\2\2\2\u146a\u146b\3\2\2\2\u146b\u146e\3\2\2\2\u146c\u146a\3\2\2\2\u146d"+
		"\u146f\5\u00d8m\2\u146e\u146d\3\2\2\2\u146e\u146f\3\2\2\2\u146f\u0271"+
		"\3\2\2\2\u1470\u1471\7:\2\2\u1471\u1474\7K\2\2\u1472\u1473\7f\2\2\u1473"+
		"\u1475\7r\2\2\u1474\u1472\3\2\2\2\u1474\u1475\3\2\2\2\u1475\u1476\3\2"+
		"\2\2\u1476\u1478\5\u0274\u013b\2\u1477\u1479\5\u00d8m\2\u1478\u1477\3"+
		"\2\2\2\u1478\u1479\3\2\2\2\u1479\u0273\3\2\2\2\u147a\u147f\5\u013a\u009e"+
		"\2\u147b\u147c\7)\2\2\u147c\u147e\5\u013a\u009e\2\u147d\u147b\3\2\2\2"+
		"\u147e\u1481\3\2\2\2\u147f\u147d\3\2\2\2\u147f\u1480\3\2\2\2\u1480\u0275"+
		"\3\2\2\2\u1481\u147f\3\2\2\2\u1482\u1484\7:\2\2\u1483\u1485\7\u01df\2"+
		"\2\u1484\u1483\3\2\2\2\u1484\u1485\3\2\2\2\u1485\u1486\3\2\2\2\u1486\u1489"+
		"\7\u010c\2\2\u1487\u1488\7f\2\2\u1488\u148a\7r\2\2\u1489\u1487\3\2\2\2"+
		"\u1489\u148a\3\2\2\2\u148a\u148b\3\2\2\2\u148b\u148d\5\u02ec\u0177\2\u148c"+
		"\u148e\5\u00d8m\2\u148d\u148c\3\2\2\2\u148d\u148e\3\2\2\2\u148e\u0277"+
		"\3\2\2\2\u148f\u1490\7:\2\2\u1490\u1491\7\u0180\2\2\u1491\u1494\7N\2\2"+
		"\u1492\u1493\7f\2\2\u1493\u1495\7r\2\2\u1494\u1492\3\2\2\2\u1494\u1495"+
		"\3\2\2\2\u1495\u1496\3\2\2\2\u1496\u1498\5\u0198\u00cd\2\u1497\u1499\5"+
		"\u00d8m\2\u1498\u1497\3\2\2\2\u1498\u1499\3\2\2\2\u1499\u0279\3\2\2\2"+
		"\u149a\u149b\7:\2\2\u149b\u149e\7\u0181\2\2\u149c\u149d\7f\2\2\u149d\u149f"+
		"\7r\2\2\u149e\u149c\3\2\2\2\u149e\u149f\3\2\2\2\u149f\u14a0\3\2\2\2\u14a0"+
		"\u14a2\5\u027c\u013f\2\u14a1\u14a3\5\u00d8m\2\u14a2\u14a1\3\2\2\2\u14a2"+
		"\u14a3\3\2\2\2\u14a3\u027b\3\2\2\2\u14a4\u14a9\5\u00fc\177\2\u14a5\u14a6"+
		"\7)\2\2\u14a6\u14a8\5\u00fc\177\2\u14a7\u14a5\3\2\2\2\u14a8\u14ab\3\2"+
		"\2\2\u14a9\u14a7\3\2\2\2\u14a9\u14aa\3\2\2\2\u14aa\u027d\3\2\2\2\u14ab"+
		"\u14a9\3\2\2\2\u14ac\u14ad\7:\2\2\u14ad\u14ae\7\u0181\2\2\u14ae\u14b1"+
		"\7\u01b3\2\2\u14af\u14b0\7f\2\2\u14b0\u14b2\7r\2\2\u14b1\u14af\3\2\2\2"+
		"\u14b1\u14b2\3\2\2\2\u14b2\u14b3\3\2\2\2\u14b3\u14b4\5\u03d0\u01e9\2\u14b4"+
		"\u14b5\7b\2\2\u14b5\u14b7\5\u02ec\u0177\2\u14b6\u14b8\5\u00d8m\2\u14b7"+
		"\u14b6\3\2\2\2\u14b7\u14b8\3\2\2\2\u14b8\u027f\3\2\2\2\u14b9\u14ba\7:"+
		"\2\2\u14ba\u14bb\7\u0181\2\2\u14bb\u14be\7\u01cc\2\2\u14bc\u14bd\7f\2"+
		"\2\u14bd\u14bf\7r\2\2\u14be\u14bc\3\2\2\2\u14be\u14bf\3\2\2\2\u14bf\u14c0"+
		"\3\2\2\2\u14c0\u14c1\5\u03d0\u01e9\2\u14c1\u14c2\7b\2\2\u14c2\u14c4\5"+
		"\u02ec\u0177\2\u14c3\u14c5\5\u00d8m\2\u14c4\u14c3\3\2\2\2\u14c4\u14c5"+
		"\3\2\2\2\u14c5\u0281\3\2\2\2\u14c6\u14c7\7:\2\2\u14c7\u14c8\7\u011a\2"+
		"\2\u14c8\u14c9\7z\2\2\u14c9\u14cb\5\u0466\u0234\2\u14ca\u14cc\5\u00d8"+
		"m\2\u14cb\u14ca\3\2\2\2\u14cb\u14cc\3\2\2\2\u14cc\u0283\3\2\2\2\u14cd"+
		"\u14ce\7:\2\2\u14ce\u14d1\7\u01ff\2\2\u14cf\u14d0\7f\2\2\u14d0\u14d2\7"+
		"r\2\2\u14d1\u14cf\3\2\2\2\u14d1\u14d2\3\2\2\2\u14d2\u14d3\3\2\2\2\u14d3"+
		"\u14d4\5\u02ec\u0177\2\u14d4\u14d5\7e\2\2\u14d5\u14d7\5\u02e6\u0174\2"+
		"\u14d6\u14d8\5\u00d8m\2\u14d7\u14d6\3\2\2\2\u14d7\u14d8\3\2\2\2\u14d8"+
		"\u0285\3\2\2\2\u14d9\u14da\7:\2\2\u14da\u14dd\7M\2\2\u14db\u14dc\7f\2"+
		"\2\u14dc\u14de\7r\2\2\u14dd\u14db\3\2\2\2\u14dd\u14de\3\2\2\2\u14de\u14df"+
		"\3\2\2\2\u14df\u14e1\5\u0274\u013b\2\u14e0\u14e2\5\u00d8m\2\u14e1\u14e0"+
		"\3\2\2\2\u14e1\u14e2\3\2\2\2\u14e2\u0287\3\2\2\2\u14e3\u14e4\7:\2\2\u14e4"+
		"\u14e7\7\u01e3\2\2\u14e5\u14e6\7f\2\2\u14e6\u14e8\7r\2\2\u14e7\u14e5\3"+
		"\2\2\2\u14e7\u14e8\3\2\2\2\u14e8\u14e9\3\2\2\2\u14e9\u14eb\5\u0198\u00cd"+
		"\2\u14ea\u14ec\5\u00d8m\2\u14eb\u14ea\3\2\2\2\u14eb\u14ec\3\2\2\2\u14ec"+
		"\u0289\3\2\2\2\u14ed\u14ee\7:\2\2\u14ee\u14f1\7\u0125\2\2\u14ef\u14f0"+
		"\7f\2\2\u14f0\u14f2\7r\2\2\u14f1\u14ef\3\2\2\2\u14f1\u14f2\3\2\2\2\u14f2"+
		"\u14f3\3\2\2\2\u14f3\u14f5\5\u0274\u013b\2\u14f4\u14f6\5\u00d8m\2\u14f5"+
		"\u14f4\3\2\2\2\u14f5\u14f6\3\2\2\2\u14f6\u028b\3\2\2\2\u14f7\u14f8\7:"+
		"\2\2\u14f8\u14fb\7\u0126\2\2\u14f9\u14fa\7f\2\2\u14fa\u14fc\7r\2\2\u14fb"+
		"\u14f9\3\2\2\2\u14fb\u14fc\3\2\2\2\u14fc\u14fd\3\2\2\2\u14fd\u14fe\5\u02ec"+
		"\u0177\2\u14fe\u14ff\7e\2\2\u14ff\u1501\5\u02e6\u0174\2\u1500\u1502\5"+
		"\u00d8m\2\u1501\u1500\3\2\2\2\u1501\u1502\3\2\2\2\u1502\u028d\3\2\2\2"+
		"\u1503\u1504\7:\2\2\u1504\u1507\7\u0128\2\2\u1505\u1506\7f\2\2\u1506\u1508"+
		"\7r\2\2\u1507\u1505\3\2\2\2\u1507\u1508\3\2\2\2\u1508\u1509\3\2\2\2\u1509"+
		"\u150b\5\u04d0\u0269\2\u150a\u150c\5\u00d8m\2\u150b\u150a\3\2\2\2\u150b"+
		"\u150c\3\2\2\2\u150c\u028f\3\2\2\2\u150d\u150e\7:\2\2\u150e\u1511\7\u01fa"+
		"\2\2\u150f\u1510\7f\2\2\u1510\u1512\7r\2\2\u1511\u150f\3\2\2\2\u1511\u1512"+
		"\3\2\2\2\u1512\u1513\3\2\2\2\u1513\u1515\5\u04d0\u0269\2\u1514\u1516\5"+
		"\u00d8m\2\u1515\u1514\3\2\2\2\u1515\u1516\3\2\2\2\u1516\u0291\3\2\2\2"+
		"\u1517\u1518\7:\2\2\u1518\u151b\7\u012d\2\2\u1519\u151a\7f\2\2\u151a\u151c"+
		"\7r\2\2\u151b\u1519\3\2\2\2\u151b\u151c\3\2\2\2\u151c\u151d\3\2\2\2\u151d"+
		"\u151e\5\u04d0\u0269\2\u151e\u0293\3\2\2\2\u151f\u1520\7:\2\2\u1520\u1523"+
		"\7\u01fb\2\2\u1521\u1522\7f\2\2\u1522\u1524\7r\2\2\u1523\u1521\3\2\2\2"+
		"\u1523\u1524\3\2\2\2\u1524\u1525\3\2\2\2\u1525\u1527\5\u034e\u01a8\2\u1526"+
		"\u1528\5\u00d8m\2\u1527\u1526\3\2\2\2\u1527\u1528\3\2\2\2\u1528\u0295"+
		"\3\2\2\2\u1529\u152a\7:\2\2\u152a\u152d\7\u012f\2\2\u152b\u152c\7f\2\2"+
		"\u152c\u152e\7r\2\2\u152d\u152b\3\2\2\2\u152d\u152e\3\2\2\2\u152e\u152f"+
		"\3\2\2\2\u152f\u1530\5\u034e\u01a8\2\u1530\u0297\3\2\2\2\u1531\u1532\7"+
		":\2\2\u1532\u1533\7\u00b2\2\2\u1533\u1534\7\u01fc\2\2\u1534\u1537\t\""+
		"\2\2\u1535\u1536\7f\2\2\u1536\u1538\7r\2\2\u1537\u1535\3\2\2\2\u1537\u1538"+
		"\3\2\2\2\u1538\u1539\3\2\2\2\u1539\u153b\5\u02ec\u0177\2\u153a\u153c\5"+
		"\u00d8m\2\u153b\u153a\3\2\2\2\u153b\u153c\3\2\2\2\u153c\u0299\3\2\2\2"+
		"\u153d\u153e\7:\2\2\u153e\u1541\7\u020f\2\2\u153f\u1540\7f\2\2\u1540\u1542"+
		"\7r\2\2\u1541\u153f\3\2\2\2\u1541\u1542\3\2\2\2\u1542\u1543\3\2\2\2\u1543"+
		"\u1544\7i\2\2\u1544\u1545\5\u0370\u01b9\2\u1545\u1546\7\u010c\2\2\u1546"+
		"\u1548\5\u02ec\u0177\2\u1547\u1549\5\u00d8m\2\u1548\u1547\3\2\2\2\u1548"+
		"\u1549\3\2\2\2\u1549\u029b\3\2\2\2\u154a\u154b\7:\2\2\u154b\u154e\7L\2"+
		"\2\u154c\u154d\7f\2\2\u154d\u154f\7r\2\2\u154e\u154c\3\2\2\2\u154e\u154f"+
		"\3\2\2\2\u154f\u1550\3\2\2\2\u1550\u1551\5\u034e\u01a8\2\u1551\u1552\7"+
		"e\2\2\u1552\u1554\5\u02e6\u0174\2\u1553\u1555\5\u00d8m\2\u1554\u1553\3"+
		"\2\2\2\u1554\u1555\3\2\2\2\u1555\u029d\3\2\2\2\u1556\u1557\7:\2\2\u1557"+
		"\u155a\7\u00ae\2\2\u1558\u1559\7f\2\2\u1559\u155b\7r\2\2\u155a\u1558\3"+
		"\2\2\2\u155a\u155b\3\2\2\2\u155b\u155c\3\2\2\2\u155c\u155e\5\u0198\u00cd"+
		"\2\u155d\u155f\5\u00d8m\2\u155e\u155d\3\2\2\2\u155e\u155f\3\2\2\2\u155f"+
		"\u029f\3\2\2\2\u1560\u1561\7:\2\2\u1561\u1562\7\u00e6\2\2\u1562\u1565"+
		"\7\u01d8\2\2\u1563\u1564\7f\2\2\u1564\u1566\7r\2\2\u1565\u1563\3\2\2\2"+
		"\u1565\u1566\3\2\2\2\u1566\u1567\3\2\2\2\u1567\u1568\7i\2\2\u1568\u1569"+
		"\5\u01ac\u00d7\2\u1569\u156a\7\u01fa\2\2\u156a\u156b\5\u02ec\u0177\2\u156b"+
		"\u02a1\3\2\2\2\u156c\u156d\7:\2\2\u156d\u1570\7N\2\2\u156e\u156f\7f\2"+
		"\2\u156f\u1571\7r\2\2\u1570\u156e\3\2\2\2\u1570\u1571\3\2\2\2\u1571\u1572"+
		"\3\2\2\2\u1572\u1574\5\u03d4\u01eb\2\u1573\u1575\5\u00d8m\2\u1574\u1573"+
		"\3\2\2\2\u1574\u1575\3\2\2\2\u1575\u02a3\3\2\2\2\u1576\u1577\7\u01f2\2"+
		"\2\u1577\u1578\7G\2\2\u1578\u1579\7<\2\2\u1579\u157b\5\u02ec\u0177\2\u157a"+
		"\u157c\5\u02a6\u0154\2\u157b\u157a\3\2\2\2\u157b\u157c\3\2\2\2\u157c\u157d"+
		"\3\2\2\2\u157d\u157e\7Y\2\2\u157e\u157f\7\u01fa\2\2\u157f\u1580\5\u02ec"+
		"\u0177\2\u1580\u1581\7O\2\2\u1581\u1583\5\u02ec\u0177\2\u1582\u1584\5"+
		"\u0454\u022b\2\u1583\u1582\3\2\2\2\u1583\u1584\3\2\2\2\u1584\u02a5\3\2"+
		"\2\2\u1585\u1586\5\u02a8\u0155\2\u1586\u1587\7#\2\2\u1587\u1588\5\u047c"+
		"\u023f\2\u1588\u1589\7$\2\2\u1589\u02a7\3\2\2\2\u158a\u158b\7~\2\2\u158b"+
		"\u158e\7j\2\2\u158c\u158e\7\u00c1\2\2\u158d\u158a\3\2\2\2\u158d\u158c"+
		"\3\2\2\2\u158e\u02a9\3\2\2\2\u158f\u1590\7\u01dc\2\2\u1590\u1591\5\u0350"+
		"\u01a9\2\u1591\u02ab\3\2\2\2\u1592\u1593\7\u01de\2\2\u1593\u1594\5\u0538"+
		"\u029d\2\u1594\u02ad\3\2\2\2\u1595\u1596\7\u01f0\2\2\u1596\u1598\5\u02ec"+
		"\u0177\2\u1597\u1599\5\u02b0\u0159\2\u1598\u1597\3\2\2\2\u1598\u1599\3"+
		"\2\2\2\u1599\u159a\3\2\2\2\u159a\u159b\7d\2\2\u159b\u159c\5\u04c2\u0262"+
		"\2\u159c\u02af\3\2\2\2\u159d\u159e\7#\2\2\u159e\u159f\5\u0346\u01a4\2"+
		"\u159f\u15a0\7$\2\2\u15a0\u02b1\3\2\2\2\u15a1\u15a2\7\u01ef\2\2\u15a2"+
		"\u15a3\7\u0180\2\2\u15a3\u15a5\7N\2\2\u15a4\u15a6\7\u00ed\2\2\u15a5\u15a4"+
		"\3\2\2\2\u15a5\u15a6\3\2\2\2\u15a6\u15a7\3\2\2\2\u15a7\u15a9\5\u034e\u01a8"+
		"\2\u15a8\u15aa\5\24\13\2\u15a9\u15a8\3\2\2\2\u15a9\u15aa\3\2\2\2\u15aa"+
		"\u02b3\3\2\2\2\u15ab\u15ac\7\u01e7\2\2\u15ac\u15ad\5\u02b6\u015c\2\u15ad"+
		"\u02b5\3\2\2\2\u15ae\u15b0\5\u02be\u0160\2\u15af\u15b1\7\u00ed\2\2\u15b0"+
		"\u15af\3\2\2\2\u15b0\u15b1\3\2\2\2\u15b1\u15b2\3\2\2\2\u15b2\u15b3\5\u034e"+
		"\u01a8\2\u15b3\u15cd\3\2\2\2\u15b4\u15b6\5\u02bc\u015f\2\u15b5\u15b7\7"+
		"\u00ed\2\2\u15b6\u15b5\3\2\2\2\u15b6\u15b7\3\2\2\2\u15b7\u15b8\3\2\2\2"+
		"\u15b8\u15b9\5\u02ec\u0177\2\u15b9\u15cd\3\2\2\2\u15ba\u15bb\7#\2\2\u15bb"+
		"\u15bc\5\u02b8\u015d\2\u15bc\u15bd\7$\2\2\u15bd\u15bf\5\u02be\u0160\2"+
		"\u15be\u15c0\7\u00ed\2\2\u15bf\u15be\3\2\2\2\u15bf\u15c0\3\2\2\2\u15c0"+
		"\u15c1\3\2\2\2\u15c1\u15c2\5\u034e\u01a8\2\u15c2\u15cd\3\2\2\2\u15c3\u15c4"+
		"\7#\2\2\u15c4\u15c5\5\u02b8\u015d\2\u15c5\u15c6\7$\2\2\u15c6\u15c8\5\u02bc"+
		"\u015f\2\u15c7\u15c9\7\u00ed\2\2\u15c8\u15c7\3\2\2\2\u15c8\u15c9\3\2\2"+
		"\2\u15c9\u15ca\3\2\2\2\u15ca\u15cb\5\u02ec\u0177\2\u15cb\u15cd\3\2\2\2"+
		"\u15cc\u15ae\3\2\2\2\u15cc\u15b4\3\2\2\2\u15cc\u15ba\3\2\2\2\u15cc\u15c3"+
		"\3\2\2\2\u15cd\u02b7\3\2\2\2\u15ce\u15d3\5\u02ba\u015e\2\u15cf\u15d0\7"+
		")\2\2\u15d0\u15d2\5\u02ba\u015e\2\u15d1\u15cf\3\2\2\2\u15d2\u15d5\3\2"+
		"\2\2\u15d3\u15d1\3\2\2\2\u15d3\u15d4\3\2\2\2\u15d4\u02b9\3\2\2\2\u15d5"+
		"\u15d3\3\2\2\2\u15d6\u15d7\7\u021e\2\2\u15d7\u02bb\3\2\2\2\u15d8\u15d9"+
		"\t$\2\2\u15d9\u02bd\3\2\2\2\u15da\u15db\t\32\2\2\u15db\u02bf\3\2\2\2\u15dc"+
		"\u15dd\79\2\2\u15dd\u15de\7G\2\2\u15de\u15e1\7A\2\2\u15df\u15e0\7f\2\2"+
		"\u15e0\u15e2\7r\2\2\u15e1\u15df\3\2\2\2\u15e1\u15e2\3\2\2\2\u15e2\u15e3"+
		"\3\2\2\2\u15e3\u15e4\5\u047e\u0240\2\u15e4\u15e5\5\u02c2\u0162\2\u15e5"+
		"\u02c1\3\2\2\2\u15e6\u15e7\7\u0120\2\2\u15e7\u15e8\7j\2\2\u15e8\u15f6"+
		"\5\u02ec\u0177\2\u15e9\u15eb\7\u0120\2\2\u15ea\u15ec\7B\2\2\u15eb\u15ea"+
		"\3\2\2\2\u15eb\u15ec\3\2\2\2\u15ec\u15ed\3\2\2\2\u15ed\u15ee\5\u02ec\u0177"+
		"\2\u15ee\u15ef\7j\2\2\u15ef\u15f0\5\u02ec\u0177\2\u15f0\u15f6\3\2\2\2"+
		"\u15f1\u15f6\5\u00c8e\2\u15f2\u15f3\7@\2\2\u15f3\u15f4\7<\2\2\u15f4\u15f6"+
		"\5\u02ec\u0177\2\u15f5\u15e6\3\2\2\2\u15f5\u15e9\3\2\2\2\u15f5\u15f1\3"+
		"\2\2\2\u15f5\u15f2\3\2\2\2\u15f6\u02c3\3\2\2\2\u15f7\u15f8\78\2\2\u15f8"+
		"\u15f9\7\u0181\2\2\u15f9\u15fa\5\u032a\u0196\2\u15fa\u15fb\5\u0442\u0222"+
		"\2\u15fb\u02c5\3\2\2\2\u15fc\u15fd\78\2\2\u15fd\u15fe\7\u0181\2\2\u15fe"+
		"\u15ff\7\u01b3\2\2\u15ff\u1601\5\u03d0\u01e9\2\u1600\u1602\7\u0098\2\2"+
		"\u1601\u1600\3\2\2\2\u1601\u1602\3\2\2\2\u1602\u1603\3\2\2\2\u1603\u1604"+
		"\7i\2\2\u1604\u1605\7\u00ae\2\2\u1605\u1606\5\u0370\u01b9\2\u1606\u1607"+
		"\7b\2\2\u1607\u160a\5\u02ec\u0177\2\u1608\u1609\7\u01cc\2\2\u1609\u160b"+
		"\5\u03d0\u01e9\2\u160a\u1608\3\2\2\2\u160a\u160b\3\2\2\2\u160b\u160c\3"+
		"\2\2\2\u160c\u160d\7d\2\2\u160d\u160e\5\u00eex\2\u160e\u02c7\3\2\2\2\u160f"+
		"\u1610\78\2\2\u1610\u1611\7\u0181\2\2\u1611\u1612\7\u01cc\2\2\u1612\u1613"+
		"\5\u03d0\u01e9\2\u1613\u1614\7b\2\2\u1614\u1615\5\u02ec\u0177\2\u1615"+
		"\u02c9\3\2\2\2\u1616\u1617\7\u0127\2\2\u1617\u1618\7\u01d1\2\2\u1618\u1619"+
		"\7i\2\2\u1619\u161a\5\u0462\u0232\2\u161a\u161b\3\2\2\2\u161b\u161c\7"+
		"e\2\2\u161c\u161d\5\u02ce\u0168\2\u161d\u161e\7m\2\2\u161e\u161f\5\u02cc"+
		"\u0167\2\u161f\u02cb\3\2\2\2\u1620\u1621\t\26\2\2\u1621\u02cd\3\2\2\2"+
		"\u1622\u1623\5\u01c2\u00e2\2\u1623\u1624\5\u03d0\u01e9\2\u1624\u1631\3"+
		"\2\2\2\u1625\u1626\7B\2\2\u1626\u1631\5\u03d0\u01e9\2\u1627\u1628\t%\2"+
		"\2\u1628\u1631\5\u0370\u01b9\2\u1629\u162a\t&\2\2\u162a\u1631\5\u013e"+
		"\u00a0\2\u162b\u162c\7\u010d\2\2\u162c\u162d\7\u0116\2\2\u162d\u1631\5"+
		"\u0428\u0215\2\u162e\u162f\t\'\2\2\u162f\u1631\5\u013a\u009e\2\u1630\u1622"+
		"\3\2\2\2\u1630\u1625\3\2\2\2\u1630\u1627\3\2\2\2\u1630\u1629\3\2\2\2\u1630"+
		"\u162b\3\2\2\2\u1630\u162e\3\2\2\2\u1631\u02cf\3\2\2\2\u1632\u1635\7\u0210"+
		"\2\2\u1633\u1636\5\u0350\u01a9\2\u1634\u1636\7\24\2\2\u1635\u1633\3\2"+
		"\2\2\u1635\u1634\3\2\2\2\u1636\u02d1\3\2\2\2\u1637\u1639\7-\2\2\u1638"+
		"\u163a\5\u02d8\u016d\2\u1639\u1638\3\2\2\2\u1639\u163a\3\2\2\2\u163a\u02d3"+
		"\3\2\2\2\u163b\u163c\t(\2\2\u163c\u02d5\3\2\2\2\u163d\u163f\7\23\2\2\u163e"+
		"\u163d\3\2\2\2\u163e\u163f\3\2\2\2\u163f\u1640\3\2\2\2\u1640\u1642\7\u0224"+
		"\2\2\u1641\u1643\5\u02d8\u016d\2\u1642\u1641\3\2\2\2\u1642\u1643\3\2\2"+
		"\2\u1643\u02d7\3\2\2\2\u1644\u1645\7\62\2\2\u1645\u1646\7\u0222\2\2\u1646"+
		"\u02d9\3\2\2\2\u1647\u1649\5\u02dc\u016f\2\u1648\u1647\3\2\2\2\u1648\u1649"+
		"\3\2\2\2\u1649\u164a\3\2\2\2\u164a\u164c\7\u0222\2\2\u164b\u164d\5\u02de"+
		"\u0170\2\u164c\u164b\3\2\2\2\u164c\u164d\3\2\2\2\u164d\u1650\3\2\2\2\u164e"+
		"\u1650\5\u02e0\u0171\2\u164f\u1648\3\2\2\2\u164f\u164e\3\2\2\2\u1650\u02db"+
		"\3\2\2\2\u1651\u1652\t)\2\2\u1652\u1653\7\f\2\2\u1653\u02dd\3\2\2\2\u1654"+
		"\u1655\7\u013b\2\2\u1655\u1656\7\u0223\2\2\u1656\u02df\3\2\2\2\u1657\u1658"+
		"\t*\2\2\u1658\u02e1\3\2\2\2\u1659\u165a\t+\2\2\u165a\u02e3\3\2\2\2\u165b"+
		"\u165c\5\u02da\u016e\2\u165c\u02e5\3\2\2\2\u165d\u165e\5\u02ea\u0176\2"+
		"\u165e\u165f\7\27\2\2\u165f\u1661\3\2\2\2\u1660\u165d\3\2\2\2\u1660\u1661"+
		"\3\2\2\2\u1661\u1662\3\2\2\2\u1662\u1663\5\u02ec\u0177\2\u1663\u02e7\3"+
		"\2\2\2\u1664\u1665\5\u02ea\u0176\2\u1665\u1666\7\27\2\2\u1666\u1668\3"+
		"\2\2\2\u1667\u1664\3\2\2\2\u1667\u1668\3\2\2\2\u1668\u1669\3\2\2\2\u1669"+
		"\u166a\5\u02ec\u0177\2\u166a\u02e9\3\2\2\2\u166b\u166c\5\u02da\u016e\2"+
		"\u166c\u02eb\3\2\2\2\u166d\u166e\5\u02da\u016e\2\u166e\u02ed\3\2\2\2\u166f"+
		"\u1671\7#\2\2\u1670\u166f\3\2\2\2\u1670\u1671\3\2\2\2\u1671\u1672\3\2"+
		"\2\2\u1672\u1677\5\u02e6\u0174\2\u1673\u1674\7)\2\2\u1674\u1676\5\u02e6"+
		"\u0174\2\u1675\u1673\3\2\2\2\u1676\u1679\3\2\2\2\u1677\u1675\3\2\2\2\u1677"+
		"\u1678\3\2\2\2\u1678\u167b\3\2\2\2\u1679\u1677\3\2\2\2\u167a\u167c\7$"+
		"\2\2\u167b\u167a\3\2\2\2\u167b\u167c\3\2\2\2\u167c\u02ef\3\2\2\2\u167d"+
		"\u167e\7#\2\2\u167e\u1683\5\u02e8\u0175\2\u167f\u1680\7)\2\2\u1680\u1682"+
		"\5\u02e8\u0175\2\u1681\u167f\3\2\2\2\u1682\u1685\3\2\2\2\u1683\u1681\3"+
		"\2\2\2\u1683\u1684\3\2\2\2\u1684\u1686\3\2\2\2\u1685\u1683\3\2\2\2\u1686"+
		"\u1687\7$\2\2\u1687\u02f1\3\2\2\2\u1688\u168b\7\u0223\2\2\u1689\u168b"+
		"\5\u02da\u016e\2\u168a\u1688\3\2\2\2\u168a\u1689\3\2\2\2\u168b\u02f3\3"+
		"\2\2\2\u168c\u168d\5\u02da\u016e\2\u168d\u02f5\3\2\2\2\u168e\u168f\5\u02da"+
		"\u016e\2\u168f\u02f7\3\2\2\2\u1690\u1692\7E\2\2\u1691\u1690\3\2\2\2\u1691"+
		"\u1692\3\2\2\2\u1692\u1693\3\2\2\2\u1693\u1694\7H\2\2\u1694\u02f9\3\2"+
		"\2\2\u1695\u1696\t,\2\2\u1696\u02fb\3\2\2\2\u1697\u1698\t-\2\2\u1698\u02fd"+
		"\3\2\2\2\u1699\u169a\5\u02ec\u0177\2\u169a\u02ff\3\2\2\2\u169b\u169c\b"+
		"\u0181\1\2\u169c\u16ae\5\u0304\u0183\2\u169d\u169e\7\22\2\2\u169e\u16ae"+
		"\5\u0300\u0181;\u169f\u16a0\7\23\2\2\u16a0\u16ae\5\u0300\u0181:\u16a1"+
		"\u16a2\5\u031c\u018f\2\u16a2\u16a3\5\u0300\u0181\61\u16a3\u16ae\3\2\2"+
		"\2\u16a4\u16a5\7n\2\2\u16a5\u16ae\5\u0300\u0181/\u16a6\u16a7\5\u0334\u019b"+
		"\2\u16a7\u16a8\7\u00c9\2\2\u16a8\u16a9\5\u0334\u019b\2\u16a9\u16ae\3\2"+
		"\2\2\u16aa\u16ab\7F\2\2\u16ab\u16ae\5\u0406\u0204\2\u16ac\u16ae\7\u0098"+
		"\2\2\u16ad\u169b\3\2\2\2\u16ad\u169d\3\2\2\2\u16ad\u169f\3\2\2\2\u16ad"+
		"\u16a1\3\2\2\2\u16ad\u16a4\3\2\2\2\u16ad\u16a6\3\2\2\2\u16ad\u16aa\3\2"+
		"\2\2\u16ad\u16ac\3\2\2\2\u16ae\u17a4\3\2\2\2\u16af\u16b0\f<\2\2\u16b0"+
		"\u16b1\7\u00cb\2\2\u16b1\u16b2\7\u008b\2\2\u16b2\u16b3\7\u0139\2\2\u16b3"+
		"\u17a3\5\u0300\u0181=\u16b4\u16b5\f9\2\2\u16b5\u16b6\7\22\2\2\u16b6\u17a3"+
		"\5\u0300\u0181:\u16b7\u16b8\f8\2\2\u16b8\u16b9\7\23\2\2\u16b9\u17a3\5"+
		"\u0300\u01819\u16ba\u16bb\f\67\2\2\u16bb\u16bc\7\24\2\2\u16bc\u17a3\5"+
		"\u0300\u01818\u16bd\u16be\f\66\2\2\u16be\u16bf\7\25\2\2\u16bf\u17a3\5"+
		"\u0300\u0181\67\u16c0\u16c1\f\65\2\2\u16c1\u16c2\7\20\2\2\u16c2\u17a3"+
		"\5\u0300\u0181\66\u16c3\u16c4\f\64\2\2\u16c4\u16c5\7\17\2\2\u16c5\u17a3"+
		"\5\u0300\u0181\65\u16c6\u16c7\f\63\2\2\u16c7\u16c8\5\u02fc\u017f\2\u16c8"+
		"\u16c9\5\u0300\u0181\64\u16c9\u17a3\3\2\2\2\u16ca\u16cb\f\62\2\2\u16cb"+
		"\u16cc\5\u031c\u018f\2\u16cc\u16cd\5\u0300\u0181\63\u16cd\u17a3\3\2\2"+
		"\2\u16ce\u16cf\f.\2\2\u16cf\u16d0\7w\2\2\u16d0\u17a3\5\u0300\u0181/\u16d1"+
		"\u16d2\f-\2\2\u16d2\u16d3\7w\2\2\u16d3\u16d4\5\u0300\u0181\2\u16d4\u16d5"+
		"\7\u00d1\2\2\u16d5\u16d6\5\u0300\u0181.\u16d6\u17a3\3\2\2\2\u16d7\u16d8"+
		"\f,\2\2\u16d8\u16d9\7n\2\2\u16d9\u16da\7w\2\2\u16da\u17a3\5\u0300\u0181"+
		"-\u16db\u16dc\f+\2\2\u16dc\u16dd\7n\2\2\u16dd\u16de\7w\2\2\u16de\u16df"+
		"\5\u0300\u0181\2\u16df\u16e0\7\u00d1\2\2\u16e0\u16e1\5\u0300\u0181,\u16e1"+
		"\u17a3\3\2\2\2\u16e2\u16e3\f*\2\2\u16e3\u16e4\7\u0184\2\2\u16e4\u17a3"+
		"\5\u0300\u0181+\u16e5\u16e6\f)\2\2\u16e6\u16e7\7\u0184\2\2\u16e7\u16e8"+
		"\5\u0300\u0181\2\u16e8\u16e9\7\u00d1\2\2\u16e9\u16ea\5\u0300\u0181*\u16ea"+
		"\u17a3\3\2\2\2\u16eb\u16ec\f(\2\2\u16ec\u16ed\7n\2\2\u16ed\u16ee\7\u0184"+
		"\2\2\u16ee\u17a3\5\u0300\u0181)\u16ef\u16f0\f\'\2\2\u16f0\u16f1\7n\2\2"+
		"\u16f1\u16f2\7\u0184\2\2\u16f2\u16f3\5\u0300\u0181\2\u16f3\u16f4\7\u00d1"+
		"\2\2\u16f4\u16f5\5\u0300\u0181(\u16f5\u17a3\3\2\2\2\u16f6\u16f7\f&\2\2"+
		"\u16f7\u16f8\7\u0185\2\2\u16f8\u16f9\7j\2\2\u16f9\u17a3\5\u0300\u0181"+
		"\'\u16fa\u16fb\f%\2\2\u16fb\u16fc\7\u0185\2\2\u16fc\u16fd\7j\2\2\u16fd"+
		"\u16fe\5\u0300\u0181\2\u16fe\u16ff\7\u00d1\2\2\u16ff\u1700\5\u0300\u0181"+
		"&\u1700\u17a3\3\2\2\2\u1701\u1702\f$\2\2\u1702\u1703\7n\2\2\u1703\u1704"+
		"\7\u0185\2\2\u1704\u1705\7j\2\2\u1705\u17a3\5\u0300\u0181%\u1706\u1707"+
		"\f#\2\2\u1707\u1708\7n\2\2\u1708\u1709\7\u0185\2\2\u1709\u170a\7j\2\2"+
		"\u170a\u170b\5\u0300\u0181\2\u170b\u170c\7\u00d1\2\2\u170c\u170d\5\u0300"+
		"\u0181$\u170d\u17a3\3\2\2\2\u170e\u170f\f\27\2\2\u170f\u1710\7m\2\2\u1710"+
		"\u1711\7S\2\2\u1711\u1712\7Y\2\2\u1712\u17a3\5\u0300\u0181\30\u1713\u1714"+
		"\f\26\2\2\u1714\u1715\7m\2\2\u1715\u1716\7n\2\2\u1716\u1717\7S\2\2\u1717"+
		"\u1718\7Y\2\2\u1718\u17a3\5\u0300\u0181\27\u1719\u171a\f\23\2\2\u171a"+
		"\u171c\7s\2\2\u171b\u171d\7\u018b\2\2\u171c\u171b\3\2\2\2\u171c\u171d"+
		"\3\2\2\2\u171d\u171e\3\2\2\2\u171e\u171f\5\u0302\u0182\2\u171f\u1720\7"+
		"k\2\2\u1720\u1721\5\u0300\u0181\24\u1721\u17a3\3\2\2\2\u1722\u1723\f\22"+
		"\2\2\u1723\u1724\7n\2\2\u1724\u1726\7s\2\2\u1725\u1727\7\u018b\2\2\u1726"+
		"\u1725\3\2\2\2\u1726\u1727\3\2\2\2\u1727\u1728\3\2\2\2\u1728\u1729\5\u0302"+
		"\u0182\2\u1729\u172a\7k\2\2\u172a\u172b\5\u0300\u0181\23\u172b\u17a3\3"+
		"\2\2\2\u172c\u172d\f\21\2\2\u172d\u172e\7s\2\2\u172e\u172f\7\u0188\2\2"+
		"\u172f\u1730\5\u0302\u0182\2\u1730\u1731\7k\2\2\u1731\u1732\5\u0300\u0181"+
		"\22\u1732\u17a3\3\2\2\2\u1733\u1734\f\20\2\2\u1734\u1735\7n\2\2\u1735"+
		"\u1736\7s\2\2\u1736\u1737\7\u0188\2\2\u1737\u1738\5\u0302\u0182\2\u1738"+
		"\u1739\7k\2\2\u1739\u173a\5\u0300\u0181\21\u173a\u17a3\3\2\2\2\u173b\u173c"+
		"\f\4\2\2\u173c\u173d\5\u02fa\u017e\2\u173d\u173e\5\u0300\u0181\5\u173e"+
		"\u17a3\3\2\2\2\u173f\u1740\f>\2\2\u1740\u1741\7\62\2\2\u1741\u17a3\5\u0370"+
		"\u01b9\2\u1742\u1743\f=\2\2\u1743\u1744\7\u00eb\2\2\u1744\u17a3\5\u03d0"+
		"\u01e9\2\u1745\u1746\f\60\2\2\u1746\u17a3\5\u031c\u018f\2\u1747\u1748"+
		"\f\"\2\2\u1748\u1749\7m\2\2\u1749\u17a3\7o\2\2\u174a\u174b\f!\2\2\u174b"+
		"\u17a3\7\u0186\2\2\u174c\u174d\f \2\2\u174d\u174e\7m\2\2\u174e\u174f\7"+
		"n\2\2\u174f\u17a3\7o\2\2\u1750\u1751\f\37\2\2\u1751\u17a3\7\u0187\2\2"+
		"\u1752\u1753\f\35\2\2\u1753\u1754\7m\2\2\u1754\u17a3\7p\2\2\u1755\u1756"+
		"\f\34\2\2\u1756\u1757\7m\2\2\u1757\u1758\7n\2\2\u1758\u17a3\7p\2\2\u1759"+
		"\u175a\f\33\2\2\u175a\u175b\7m\2\2\u175b\u17a3\7q\2\2\u175c\u175d\f\32"+
		"\2\2\u175d\u175e\7m\2\2\u175e\u175f\7n\2\2\u175f\u17a3\7q\2\2\u1760\u1761"+
		"\f\31\2\2\u1761\u1762\7m\2\2\u1762\u17a3\7\u00d6\2\2\u1763\u1764\f\30"+
		"\2\2\u1764\u1765\7m\2\2\u1765\u1766\7n\2\2\u1766\u17a3\7\u00d6\2\2\u1767"+
		"\u1768\f\25\2\2\u1768\u1769\7m\2\2\u1769\u176a\7\u013a\2\2\u176a\u176b"+
		"\7#\2\2\u176b\u176c\5\u0346\u01a4\2\u176c\u176d\7$\2\2\u176d\u17a3\3\2"+
		"\2\2\u176e\u176f\f\24\2\2\u176f\u1770\7m\2\2\u1770\u1771\7n\2\2\u1771"+
		"\u1772\7\u013a\2\2\u1772\u1773\7#\2\2\u1773\u1774\5\u0346\u01a4\2\u1774"+
		"\u1775\7$\2\2\u1775\u17a3\3\2\2\2\u1776\u1777\f\17\2\2\u1777\u1778\7t"+
		"\2\2\u1778\u17a3\5\u030e\u0188\2\u1779\u177a\f\16\2\2\u177a\u177b\7n\2"+
		"\2\u177b\u177c\7t\2\2\u177c\u17a3\5\u030e\u0188\2\u177d\u177e\f\r\2\2"+
		"\u177e\u177f\5\u031e\u0190\2\u177f\u1780\5\u033a\u019e\2\u1780\u1781\5"+
		"\u0406\u0204\2\u1781\u17a3\3\2\2\2\u1782\u1783\f\f\2\2\u1783\u1784\5\u031e"+
		"\u0190\2\u1784\u1785\5\u033a\u019e\2\u1785\u1786\7#\2\2\u1786\u1787\5"+
		"\u0300\u0181\2\u1787\u1788\7$\2\2\u1788\u17a3\3\2\2\2\u1789\u178a\f\n"+
		"\2\2\u178a\u178b\7m\2\2\u178b\u17a3\7\u0189\2\2\u178c\u178d\f\t\2\2\u178d"+
		"\u178e\7m\2\2\u178e\u178f\7n\2\2\u178f\u17a3\7\u0189\2\2\u1790\u1791\f"+
		"\b\2\2\u1791\u1792\7m\2\2\u1792\u17a3\7\u018a\2\2\u1793\u1794\f\7\2\2"+
		"\u1794\u1795\7m\2\2\u1795\u1796\5\u03a2\u01d2\2\u1796\u1797\7\u018a\2"+
		"\2\u1797\u17a3\3\2\2\2\u1798\u1799\f\6\2\2\u1799\u179a\7m\2\2\u179a\u179b"+
		"\7n\2\2\u179b\u17a3\7\u018a\2\2\u179c\u179d\f\5\2\2\u179d\u179e\7m\2\2"+
		"\u179e\u179f\7n\2\2\u179f\u17a0\5\u03a2\u01d2\2\u17a0\u17a1\7\u018a\2"+
		"\2\u17a1\u17a3\3\2\2\2\u17a2\u16af\3\2\2\2\u17a2\u16b4\3\2\2\2\u17a2\u16b7"+
		"\3\2\2\2\u17a2\u16ba\3\2\2\2\u17a2\u16bd\3\2\2\2\u17a2\u16c0\3\2\2\2\u17a2"+
		"\u16c3\3\2\2\2\u17a2\u16c6\3\2\2\2\u17a2\u16ca\3\2\2\2\u17a2\u16ce\3\2"+
		"\2\2\u17a2\u16d1\3\2\2\2\u17a2\u16d7\3\2\2\2\u17a2\u16db\3\2\2\2\u17a2"+
		"\u16e2\3\2\2\2\u17a2\u16e5\3\2\2\2\u17a2\u16eb\3\2\2\2\u17a2\u16ef\3\2"+
		"\2\2\u17a2\u16f6\3\2\2\2\u17a2\u16fa\3\2\2\2\u17a2\u1701\3\2\2\2\u17a2"+
		"\u1706\3\2\2\2\u17a2\u170e\3\2\2\2\u17a2\u1713\3\2\2\2\u17a2\u1719\3\2"+
		"\2\2\u17a2\u1722\3\2\2\2\u17a2\u172c\3\2\2\2\u17a2\u1733\3\2\2\2\u17a2"+
		"\u173b\3\2\2\2\u17a2\u173f\3\2\2\2\u17a2\u1742\3\2\2\2\u17a2\u1745\3\2"+
		"\2\2\u17a2\u1747\3\2\2\2\u17a2\u174a\3\2\2\2\u17a2\u174c\3\2\2\2\u17a2"+
		"\u1750\3\2\2\2\u17a2\u1752\3\2\2\2\u17a2\u1755\3\2\2\2\u17a2\u1759\3\2"+
		"\2\2\u17a2\u175c\3\2\2\2\u17a2\u1760\3\2\2\2\u17a2\u1763\3\2\2\2\u17a2"+
		"\u1767\3\2\2\2\u17a2\u176e\3\2\2\2\u17a2\u1776\3\2\2\2\u17a2\u1779\3\2"+
		"\2\2\u17a2\u177d\3\2\2\2\u17a2\u1782\3\2\2\2\u17a2\u1789\3\2\2\2\u17a2"+
		"\u178c\3\2\2\2\u17a2\u1790\3\2\2\2\u17a2\u1793\3\2\2\2\u17a2\u1798\3\2"+
		"\2\2\u17a2\u179c\3\2\2\2\u17a3\u17a6\3\2\2\2\u17a4\u17a2\3\2\2\2\u17a4"+
		"\u17a5\3\2\2\2\u17a5\u0301\3\2\2\2\u17a6\u17a4\3\2\2\2\u17a7\u17a8\b\u0182"+
		"\1\2\u17a8\u17b1\5\u0304\u0183\2\u17a9\u17aa\7\22\2\2\u17aa\u17b1\5\u0302"+
		"\u0182\r\u17ab\u17ac\7\23\2\2\u17ac\u17b1\5\u0302\u0182\f\u17ad\u17ae"+
		"\5\u031c\u018f\2\u17ae\u17af\5\u0302\u0182\n\u17af\u17b1\3\2\2\2\u17b0"+
		"\u17a7\3\2\2\2\u17b0\u17a9\3\2\2\2\u17b0\u17ab\3\2\2\2\u17b0\u17ad\3\2"+
		"\2\2\u17b1\u17de\3\2\2\2\u17b2\u17b3\f\13\2\2\u17b3\u17b4\5\u031c\u018f"+
		"\2\u17b4\u17b5\5\u0302\u0182\f\u17b5\u17dd\3\2\2\2\u17b6\u17b7\f\b\2\2"+
		"\u17b7\u17b8\7m\2\2\u17b8\u17b9\7S\2\2\u17b9\u17ba\7Y\2\2\u17ba\u17dd"+
		"\5\u0302\u0182\t\u17bb\u17bc\f\7\2\2\u17bc\u17bd\7m\2\2\u17bd\u17be\7"+
		"n\2\2\u17be\u17bf\7S\2\2\u17bf\u17c0\7Y\2\2\u17c0\u17dd\5\u0302\u0182"+
		"\b\u17c1\u17c2\f\16\2\2\u17c2\u17c3\7\62\2\2\u17c3\u17dd\5\u0370\u01b9"+
		"\2\u17c4\u17c5\f\t\2\2\u17c5\u17dd\5\u031c\u018f\2\u17c6\u17c7\f\6\2\2"+
		"\u17c7\u17c8\7m\2\2\u17c8\u17c9\7\u013a\2\2\u17c9\u17ca\7#\2\2\u17ca\u17cb"+
		"\5\u0346\u01a4\2\u17cb\u17cc\7$\2\2\u17cc\u17dd\3\2\2\2\u17cd\u17ce\f"+
		"\5\2\2\u17ce\u17cf\7m\2\2\u17cf\u17d0\7n\2\2\u17d0\u17d1\7\u013a\2\2\u17d1"+
		"\u17d2\7#\2\2\u17d2\u17d3\5\u0346\u01a4\2\u17d3\u17d4\7$\2\2\u17d4\u17dd"+
		"\3\2\2\2\u17d5\u17d6\f\4\2\2\u17d6\u17d7\7m\2\2\u17d7\u17dd\7\u0189\2"+
		"\2\u17d8\u17d9\f\3\2\2\u17d9\u17da\7m\2\2\u17da\u17db\7n\2\2\u17db\u17dd"+
		"\7\u0189\2\2\u17dc\u17b2\3\2\2\2\u17dc\u17b6\3\2\2\2\u17dc\u17bb\3\2\2"+
		"\2\u17dc\u17c1\3\2\2\2\u17dc\u17c4\3\2\2\2\u17dc\u17c6\3\2\2\2\u17dc\u17cd"+
		"\3\2\2\2\u17dc\u17d5\3\2\2\2\u17dc\u17d8\3\2\2\2\u17dd\u17e0\3\2\2\2\u17de"+
		"\u17dc\3\2\2\2\u17de\u17df\3\2\2\2\u17df\u0303\3\2\2\2\u17e0\u17de\3\2"+
		"\2\2\u17e1\u1801\5\u02d2\u016a\2\u17e2\u1801\5\u031a\u018e\2\u17e3\u1801"+
		"\5\u034c\u01a7\2\u17e4\u17e6\7\u021f\2\2\u17e5\u17e7\5\u030a\u0186\2\u17e6"+
		"\u17e5\3\2\2\2\u17e6\u17e7\3\2\2\2\u17e7\u1801\3\2\2\2\u17e8\u17e9\7#"+
		"\2\2\u17e9\u17ea\5\u0300\u0181\2\u17ea\u17eb\7$\2\2\u17eb\u17ec\5\u0308"+
		"\u0185\2\u17ec\u1801\3\2\2\2\u17ed\u1801\5\u0310\u0189\2\u17ee\u1801\5"+
		"\u0364\u01b3\2\u17ef\u1801\5\u0406\u0204\2\u17f0\u17f1\5\u0406\u0204\2"+
		"\u17f1\u17f2\5\u0306\u0184\2\u17f2\u1801\3\2\2\2\u17f3\u17f4\7r\2\2\u17f4"+
		"\u1801\5\u0406\u0204\2\u17f5\u17f6\7\u0088\2\2\u17f6\u1801\5\u0406\u0204"+
		"\2\u17f7\u17f8\7\u0088\2\2\u17f8\u1801\5\u033c\u019f\2\u17f9\u1801\5\u0336"+
		"\u019c\2\u17fa\u1801\5\u0338\u019d\2\u17fb\u17fc\7\u00c5\2\2\u17fc\u17fd"+
		"\7#\2\2\u17fd\u17fe\5\u0374\u01bb\2\u17fe\u17ff\7$\2\2\u17ff\u1801\3\2"+
		"\2\2\u1800\u17e1\3\2\2\2\u1800\u17e2\3\2\2\2\u1800\u17e3\3\2\2\2\u1800"+
		"\u17e4\3\2\2\2\u1800\u17e8\3\2\2\2\u1800\u17ed\3\2\2\2\u1800\u17ee\3\2"+
		"\2\2\u1800\u17ef\3\2\2\2\u1800\u17f0\3\2\2\2\u1800\u17f3\3\2\2\2\u1800"+
		"\u17f5\3\2\2\2\u1800\u17f7\3\2\2\2\u1800\u17f9\3\2\2\2\u1800\u17fa\3\2"+
		"\2\2\u1800\u17fb\3\2\2\2\u1801\u0305\3\2\2\2\u1802\u1803\b\u0184\1\2\u1803"+
		"\u1804\5\u030a\u0186\2\u1804\u1809\3\2\2\2\u1805\u1806\f\3\2\2\u1806\u1808"+
		"\5\u030a\u0186\2\u1807\u1805\3\2\2\2\u1808\u180b\3\2\2\2\u1809\u1807\3"+
		"\2\2\2\u1809\u180a\3\2\2\2\u180a\u0307\3\2\2\2\u180b\u1809\3\2\2\2\u180c"+
		"\u1811\b\u0185\1\2\u180d\u180e\f\4\2\2\u180e\u1810\5\u030a\u0186\2\u180f"+
		"\u180d\3\2\2\2\u1810\u1813\3\2\2\2\u1811\u180f\3\2\2\2\u1811\u1812\3\2"+
		"\2\2\u1812\u0309\3\2\2\2\u1813\u1811\3\2\2\2\u1814\u1815\7\27\2\2\u1815"+
		"\u1826\5\u0390\u01c9\2\u1816\u1817\7\27\2\2\u1817\u1826\7\24\2\2\u1818"+
		"\u1819\7\'\2\2\u1819\u181a\5\u0300\u0181\2\u181a\u181b\7(\2\2\u181b\u1826"+
		"\3\2\2\2\u181c\u181e\7\'\2\2\u181d\u181f\5\u030c\u0187\2\u181e\u181d\3"+
		"\2\2\2\u181e\u181f\3\2\2\2\u181f\u1820\3\2\2\2\u1820\u1822\7\21\2\2\u1821"+
		"\u1823\5\u030c\u0187\2\u1822\u1821\3\2\2\2\u1822\u1823\3\2\2\2\u1823\u1824"+
		"\3\2\2\2\u1824\u1826\7(\2\2\u1825\u1814\3\2\2\2\u1825\u1816\3\2\2\2\u1825"+
		"\u1818\3\2\2\2\u1825\u181c\3\2\2\2\u1826\u030b\3\2\2\2\u1827\u1828\5\u0300"+
		"\u0181\2\u1828\u030d\3\2\2\2\u1829\u182f\5\u0406\u0204\2\u182a\u182b\7"+
		"#\2\2\u182b\u182c\5\u0374\u01bb\2\u182c\u182d\7$\2\2\u182d\u182f\3\2\2"+
		"\2\u182e\u1829\3\2\2\2\u182e\u182a\3\2\2\2\u182f\u030f\3\2\2\2\u1830\u1832"+
		"\7T\2\2\u1831\u1833\5\u0318\u018d\2\u1832\u1831\3\2\2\2\u1832\u1833\3"+
		"\2\2\2\u1833\u1834\3\2\2\2\u1834\u1836\5\u0312\u018a\2\u1835\u1837\5\u0316"+
		"\u018c\2\u1836\u1835\3\2\2\2\u1836\u1837\3\2\2\2\u1837\u1838\3\2\2\2\u1838"+
		"\u1839\7\u00cd\2\2\u1839\u0311\3\2\2\2\u183a\u183c\5\u0314\u018b\2\u183b"+
		"\u183a\3\2\2\2\u183c\u183d\3\2\2\2\u183d\u183b\3\2\2\2\u183d\u183e\3\2"+
		"\2\2\u183e\u0313\3\2\2\2\u183f\u1840\7U\2\2\u1840\u1841\5\u0300\u0181"+
		"\2\u1841\u1842\7h\2\2\u1842\u1843\5\u0300\u0181\2\u1843\u0315\3\2\2\2"+
		"\u1844\u1845\7g\2\2\u1845\u1846\5\u0300\u0181\2\u1846\u0317\3\2\2\2\u1847"+
		"\u1848\5\u0300\u0181\2\u1848\u0319\3\2\2\2\u1849\u184e\5\u0350\u01a9\2"+
		"\u184a\u184b\5\u0350\u01a9\2\u184b\u184c\5\u0306\u0184\2\u184c\u184e\3"+
		"\2\2\2\u184d\u1849\3\2\2\2\u184d\u184a\3\2\2\2\u184e\u031b\3\2\2\2\u184f"+
		"\u1858\5\u0324\u0193\2\u1850\u1858\7\60\2\2\u1851\u1858\7\61\2\2\u1852"+
		"\u1853\7\u0181\2\2\u1853\u1854\7#\2\2\u1854\u1855\5\u032a\u0196\2\u1855"+
		"\u1856\7$\2\2\u1856\u1858\3\2\2\2\u1857\u184f\3\2\2\2\u1857\u1850\3\2"+
		"\2\2\u1857\u1851\3\2\2\2\u1857\u1852\3\2\2\2\u1858\u031d\3\2\2\2\u1859"+
		"\u1866\5\u0320\u0191\2\u185a\u185b\7\u0181\2\2\u185b\u185c\7#\2\2\u185c"+
		"\u185d\5\u032a\u0196\2\u185d\u185e\7$\2\2\u185e\u1866\3\2\2\2\u185f\u1866"+
		"\7w\2\2\u1860\u1861\7n\2\2\u1861\u1866\7w\2\2\u1862\u1866\7\u0184\2\2"+
		"\u1863\u1864\7n\2\2\u1864\u1866\7\u0184\2\2\u1865\u1859\3\2\2\2\u1865"+
		"\u185a\3\2\2\2\u1865\u185f\3\2\2\2\u1865\u1860\3\2\2\2\u1865\u1862\3\2"+
		"\2\2\u1865\u1863\3\2\2\2\u1866\u031f\3\2\2\2\u1867\u186a\5\u0322\u0192"+
		"\2\u1868\u186a\5\u0324\u0193\2\u1869\u1867\3\2\2\2\u1869\u1868\3\2\2\2"+
		"\u186a\u0321\3\2\2\2\u186b\u186d\t.\2\2\u186c\u186b\3\2\2\2\u186d\u186e"+
		"\3\2\2\2\u186e\u186c\3\2\2\2\u186e\u186f\3\2\2\2\u186f\u0323\3\2\2\2\u1870"+
		"\u1871\t/\2\2\u1871\u0325\3\2\2\2\u1872\u1879\5\u0320\u0191\2\u1873\u1874"+
		"\7\u0181\2\2\u1874\u1875\7#\2\2\u1875\u1876\5\u032a\u0196\2\u1876\u1877"+
		"\7$\2\2\u1877\u1879\3\2\2\2\u1878\u1872\3\2\2\2\u1878\u1873\3\2\2\2\u1879"+
		"\u0327\3\2\2\2\u187a\u187b\t\60\2\2\u187b\u0329\3\2\2\2\u187c\u1882\5"+
		"\u0320\u0191\2\u187d\u187e\5\u0350\u01a9\2\u187e\u187f\7\27\2\2\u187f"+
		"\u1880\5\u032a\u0196\2\u1880\u1882\3\2\2\2\u1881\u187c\3\2\2\2\u1881\u187d"+
		"\3\2\2\2\u1882\u032b\3\2\2\2\u1883\u1884\t\61\2\2\u1884\u1886\5\u032e"+
		"\u0198\2\u1885\u1887\5\u0332\u019a\2\u1886\u1885\3\2\2\2\u1886\u1887\3"+
		"\2\2\2\u1887\u032d\3\2\2\2\u1888\u188f\5\u0330\u0199\2\u1889\u188a\7s"+
		"\2\2\u188a\u188b\5\u0330\u0199\2\u188b\u188c\7k\2\2\u188c\u188d\5\u0330"+
		"\u0199\2\u188d\u188f\3\2\2\2\u188e\u1888\3\2\2\2\u188e\u1889\3\2\2\2\u188f"+
		"\u032f\3\2\2\2\u1890\u1891\7\u0132\2\2\u1891\u189d\7\u011e\2\2\u1892\u1893"+
		"\7\u0132\2\2\u1893\u189d\7\u0100\2\2\u1894\u1895\7\u0099\2\2\u1895\u189d"+
		"\7\u00d5\2\2\u1896\u1897\5\u0300\u0181\2\u1897\u1898\7\u011e\2\2\u1898"+
		"\u189d\3\2\2\2\u1899\u189a\5\u0300\u0181\2\u189a\u189b\7\u0100\2\2\u189b"+
		"\u189d\3\2\2\2\u189c\u1890\3\2\2\2\u189c\u1892\3\2\2\2\u189c\u1894\3\2"+
		"\2\2\u189c\u1896\3\2\2\2\u189c\u1899\3\2\2\2\u189d\u0331\3\2\2\2\u189e"+
		"\u189f\7\u00d2\2\2\u189f\u18a0\7\u0099\2\2\u18a0\u18a9\7\u00d5\2\2\u18a1"+
		"\u18a2\7\u00d2\2\2\u18a2\u18a9\7y\2\2\u18a3\u18a4\7\u00d2\2\2\u18a4\u18a9"+
		"\7\u00c2\2\2\u18a5\u18a6\7\u00d2\2\2\u18a6\u18a7\7\u00dd\2\2\u18a7\u18a9"+
		"\7\u00c8\2\2\u18a8\u189e\3\2\2\2\u18a8\u18a1\3\2\2\2\u18a8\u18a3\3\2\2"+
		"\2\u18a8\u18a5\3\2\2\2\u18a9\u0333\3\2\2\2\u18aa\u18ab\7\u00d5\2\2\u18ab"+
		"\u18ac\7#\2\2\u18ac\u18ad\5\u0374\u01bb\2\u18ad\u18ae\7$\2\2\u18ae\u18b9"+
		"\3\2\2\2\u18af\u18b0\7\u00d5\2\2\u18b0\u18b1\7#\2\2\u18b1\u18b9\7$\2\2"+
		"\u18b2\u18b3\7#\2\2\u18b3\u18b4\5\u0374\u01bb\2\u18b4\u18b5\7)\2\2\u18b5"+
		"\u18b6\5\u0300\u0181\2\u18b6\u18b7\7$\2\2\u18b7\u18b9\3\2\2\2\u18b8\u18aa"+
		"\3\2\2\2\u18b8\u18af\3\2\2\2\u18b8\u18b2\3\2\2\2\u18b9\u0335\3\2\2\2\u18ba"+
		"\u18bb\7\u00d5\2\2\u18bb\u18bc\7#\2\2\u18bc\u18bd\5\u0374\u01bb\2\u18bd"+
		"\u18be\7$\2\2\u18be\u18c3\3\2\2\2\u18bf\u18c0\7\u00d5\2\2\u18c0\u18c1"+
		"\7#\2\2\u18c1\u18c3\7$\2\2\u18c2\u18ba\3\2\2\2\u18c2\u18bf\3\2\2\2\u18c3"+
		"\u0337\3\2\2\2\u18c4\u18c5\7#\2\2\u18c5\u18c6\5\u0374\u01bb\2\u18c6\u18c7"+
		"\7)\2\2\u18c7\u18c8\5\u0300\u0181\2\u18c8\u18c9\7$\2\2\u18c9\u0339\3\2"+
		"\2\2\u18ca\u18cb\t\62\2\2\u18cb\u033b\3\2\2\2\u18cc\u18cd\7\'\2\2\u18cd"+
		"\u18ce\5\u0374\u01bb\2\u18ce\u18cf\7(\2\2\u18cf\u18d7\3\2\2\2\u18d0\u18d1"+
		"\7\'\2\2\u18d1\u18d2\5\u033e\u01a0\2\u18d2\u18d3\7(\2\2\u18d3\u18d7\3"+
		"\2\2\2\u18d4\u18d5\7\'\2\2\u18d5\u18d7\7(\2\2\u18d6\u18cc\3\2\2\2\u18d6"+
		"\u18d0\3\2\2\2\u18d6\u18d4\3\2\2\2\u18d7\u033d\3\2\2\2\u18d8\u18dd\5\u033c"+
		"\u019f\2\u18d9\u18da\7)\2\2\u18da\u18dc\5\u033c\u019f\2\u18db\u18d9\3"+
		"\2\2\2\u18dc\u18df\3\2\2\2\u18dd\u18db\3\2\2\2\u18dd\u18de\3\2\2\2\u18de"+
		"\u033f\3\2\2\2\u18df\u18dd\3\2\2\2\u18e0\u18e5\5\u0344\u01a3\2\u18e1\u18e2"+
		"\7)\2\2\u18e2\u18e4\5\u0344\u01a3\2\u18e3\u18e1\3\2\2\2\u18e4\u18e7\3"+
		"\2\2\2\u18e5\u18e3\3\2\2\2\u18e5\u18e6\3\2\2\2\u18e6\u0341\3\2\2\2\u18e7"+
		"\u18e5\3\2\2\2\u18e8\u18e9\5\u0352\u01aa\2\u18e9\u0343\3\2\2\2\u18ea\u18f4"+
		"\5\u0300\u0181\2\u18eb\u18ec\5\u0342\u01a2\2\u18ec\u18ed\7\34\2\2\u18ed"+
		"\u18ee\5\u0300\u0181\2\u18ee\u18f4\3\2\2\2\u18ef\u18f0\5\u0342\u01a2\2"+
		"\u18f0\u18f1\7\37\2\2\u18f1\u18f2\5\u0300\u0181\2\u18f2\u18f4\3\2\2\2"+
		"\u18f3\u18ea\3\2\2\2\u18f3\u18eb\3\2\2\2\u18f3\u18ef\3\2\2\2\u18f4\u0345"+
		"\3\2\2\2\u18f5\u18fa\5\u0370\u01b9\2\u18f6\u18f7\7)\2\2\u18f7\u18f9\5"+
		"\u0370\u01b9\2\u18f8\u18f6\3\2\2\2\u18f9\u18fc\3\2\2\2\u18fa\u18f8\3\2"+
		"\2\2\u18fa\u18fb\3\2\2\2\u18fb\u0347\3\2\2\2\u18fc\u18fa\3\2\2\2\u18fd"+
		"\u18fe\5\u034a\u01a6\2\u18fe\u18ff\7#\2\2\u18ff\u1900\7$\2\2\u1900\u1935"+
		"\3\2\2\2\u1901\u1902\5\u034a\u01a6\2\u1902\u1903\7#\2\2\u1903\u1905\5"+
		"\u0340\u01a1\2\u1904\u1906\5\u03de\u01f0\2\u1905\u1904\3\2\2\2\u1905\u1906"+
		"\3\2\2\2\u1906\u1907\3\2\2\2\u1907\u1908\7$\2\2\u1908\u1935\3\2\2\2\u1909"+
		"\u190a\5\u034a\u01a6\2\u190a\u190b\7#\2\2\u190b\u190c\7\u018c\2\2\u190c"+
		"\u190e\5\u0344\u01a3\2\u190d\u190f\5\u03de\u01f0\2\u190e\u190d\3\2\2\2"+
		"\u190e\u190f\3\2\2\2\u190f\u1910\3\2\2\2\u1910\u1911\7$\2\2\u1911\u1935"+
		"\3\2\2\2\u1912\u1913\5\u034a\u01a6\2\u1913\u1914\7#\2\2\u1914\u1915\5"+
		"\u0340\u01a1\2\u1915\u1916\7)\2\2\u1916\u1917\7\u018c\2\2\u1917\u1919"+
		"\5\u0344\u01a3\2\u1918\u191a\5\u03de\u01f0\2\u1919\u1918\3\2\2\2\u1919"+
		"\u191a\3\2\2\2\u191a\u191b\3\2\2\2\u191b\u191c\7$\2\2\u191c\u1935\3\2"+
		"\2\2\u191d\u191e\5\u034a\u01a6\2\u191e\u191f\7#\2\2\u191f\u1920\7u\2\2"+
		"\u1920\u1922\5\u0340\u01a1\2\u1921\u1923\5\u03de\u01f0\2\u1922\u1921\3"+
		"\2\2\2\u1922\u1923\3\2\2\2\u1923\u1924\3\2\2\2\u1924\u1925\7$\2\2\u1925"+
		"\u1935\3\2\2\2\u1926\u1927\5\u034a\u01a6\2\u1927\u1928\7#\2\2\u1928\u1929"+
		"\7S\2\2\u1929\u192b\5\u0340\u01a1\2\u192a\u192c\5\u03de\u01f0\2\u192b"+
		"\u192a\3\2\2\2\u192b\u192c\3\2\2\2\u192c\u192d\3\2\2\2\u192d\u192e\7$"+
		"\2\2\u192e\u1935\3\2\2\2\u192f\u1930\5\u034a\u01a6\2\u1930\u1931\7#\2"+
		"\2\u1931\u1932\7\24\2\2\u1932\u1933\7$\2\2\u1933\u1935\3\2\2\2\u1934\u18fd"+
		"\3\2\2\2\u1934\u1901\3\2\2\2\u1934\u1909\3\2\2\2\u1934\u1912\3\2\2\2\u1934"+
		"\u191d\3\2\2\2\u1934\u1926\3\2\2\2\u1934\u192f\3\2\2\2\u1935\u0349\3\2"+
		"\2\2\u1936\u193b\5\u0352\u01aa\2\u1937\u1938\5\u0350\u01a9\2\u1938\u1939"+
		"\5\u0306\u0184\2\u1939\u193b\3\2\2\2\u193a\u1936\3\2\2\2\u193a\u1937\3"+
		"\2\2\2\u193b\u034b\3\2\2\2\u193c\u194e\7\u0224\2\2\u193d\u194e\7\u0223"+
		"\2\2\u193e\u193f\5\u034a\u01a6\2\u193f\u1940\7\u0223\2\2\u1940\u194e\3"+
		"\2\2\2\u1941\u1942\5\u034a\u01a6\2\u1942\u1943\7#\2\2\u1943\u1945\5\u0340"+
		"\u01a1\2\u1944\u1946\5\u03de\u01f0\2\u1945\u1944\3\2\2\2\u1945\u1946\3"+
		"\2\2\2\u1946\u1947\3\2\2\2\u1947\u1948\7$\2\2\u1948\u1949\7\u0223\2\2"+
		"\u1949\u194e\3\2\2\2\u194a\u194e\7p\2\2\u194b\u194e\7q\2\2\u194c\u194e"+
		"\7o\2\2\u194d\u193c\3\2\2\2\u194d\u193d\3\2\2\2\u194d\u193e\3\2\2\2\u194d"+
		"\u1941\3\2\2\2\u194d\u194a\3\2\2\2\u194d\u194b\3\2\2\2\u194d\u194c\3\2"+
		"\2\2\u194e\u034d\3\2\2\2\u194f\u1954\5\u0350\u01a9\2\u1950\u1951\5\u0350"+
		"\u01a9\2\u1951\u1952\5\u0306\u0184\2\u1952\u1954\3\2\2\2\u1953\u194f\3"+
		"\2\2\2\u1953\u1950\3\2\2\2\u1954\u034f\3\2\2\2\u1955\u1956\5\u02da\u016e"+
		"\2\u1956\u0351\3\2\2\2\u1957\u195b\5\u02da\u016e\2\u1958\u195b\5\u02e0"+
		"\u0171\2\u1959\u195b\5\u02e2\u0172\2\u195a\u1957\3\2\2\2\u195a\u1958\3"+
		"\2\2\2\u195a\u1959\3\2\2\2\u195b\u0353\3\2\2\2\u195c\u195e\5\u036a\u01b6"+
		"\2\u195d\u195f\5\u036c\u01b7\2\u195e\u195d\3\2\2\2\u195e\u195f\3\2\2\2"+
		"\u195f\u1969\3\2\2\2\u1960\u1961\7\u00e3\2\2\u1961\u1962\7Y\2\2\u1962"+
		"\u1963\7#\2\2\u1963\u1964\5\u03c6\u01e4\2\u1964\u1966\7$\2\2\u1965\u1967"+
		"\5\u036c\u01b7\2\u1966\u1965\3\2\2\2\u1966\u1967\3\2\2\2\u1967\u1969\3"+
		"\2\2\2\u1968\u195c\3\2\2\2\u1968\u1960\3\2\2\2\u1969\u0355\3\2\2\2\u196a"+
		"\u196b\7\u018f\2\2\u196b\u196c\7#\2\2\u196c\u196d\5\u0304\u0183\2\u196d"+
		"\u196e\5\u03b8\u01dd\2\u196e\u196f\7\u0190\2\2\u196f\u1970\5\u0358\u01ad"+
		"\2\u1970\u1971\7$\2\2\u1971\u1980\3\2\2\2\u1972\u1973\7\u018f\2\2\u1973"+
		"\u1974\7#\2\2\u1974\u1975\7\u0194\2\2\u1975\u1976\7#\2\2\u1976\u1977\5"+
		"\u0360\u01b1\2\u1977\u1978\7$\2\2\u1978\u1979\7)\2\2\u1979\u197a\5\u0304"+
		"\u0183\2\u197a\u197b\5\u03b8\u01dd\2\u197b\u197c\7\u0190\2\2\u197c\u197d"+
		"\5\u0358\u01ad\2\u197d\u197e\7$\2\2\u197e\u1980\3\2\2\2\u197f\u196a\3"+
		"\2\2\2\u197f\u1972\3\2\2\2\u1980\u0357\3\2\2\2\u1981\u1986\5\u035a\u01ae"+
		"\2\u1982\u1983\7)\2\2\u1983\u1985\5\u035a\u01ae\2\u1984\u1982\3\2\2\2"+
		"\u1985\u1988\3\2\2\2\u1986\u1984\3\2\2\2\u1986\u1987\3\2\2\2\u1987\u0359"+
		"\3\2\2\2\u1988\u1986\3\2\2\2\u1989\u198a\5\u0350\u01a9\2\u198a\u198b\5"+
		"\u0370\u01b9\2\u198b\u1995\3\2\2\2\u198c\u198d\5\u0350\u01a9\2\u198d\u198e"+
		"\5\u0370\u01b9\2\u198e\u198f\5\u035c\u01af\2\u198f\u1995\3\2\2\2\u1990"+
		"\u1991\5\u0350\u01a9\2\u1991\u1992\7i\2\2\u1992\u1993\7\u0164\2\2\u1993"+
		"\u1995\3\2\2\2\u1994\u1989\3\2\2\2\u1994\u198c\3\2\2\2\u1994\u1990\3\2"+
		"\2\2\u1995\u035b\3\2\2\2\u1996\u1997\b\u01af\1\2\u1997\u1998\5\u035e\u01b0"+
		"\2\u1998\u199d\3\2\2\2\u1999\u199a\f\3\2\2\u199a\u199c\5\u035e\u01b0\2"+
		"\u199b\u1999\3\2\2\2\u199c\u199f\3\2\2\2\u199d\u199b\3\2\2\2\u199d\u199e"+
		"\3\2\2\2\u199e\u035d\3\2\2\2\u199f\u199d\3\2\2\2\u19a0\u19a1\5\u02da\u016e"+
		"\2\u19a1\u19a2\5\u0302\u0182\2\u19a2\u19a9\3\2\2\2\u19a3\u19a4\7\u0098"+
		"\2\2\u19a4\u19a9\5\u0302\u0182\2\u19a5\u19a6\7n\2\2\u19a6\u19a9\7o\2\2"+
		"\u19a7\u19a9\7o\2\2\u19a8\u19a0\3\2\2\2\u19a8\u19a3\3\2\2\2\u19a8\u19a5"+
		"\3\2\2\2\u19a8\u19a7\3\2\2\2\u19a9\u035f\3\2\2\2\u19aa\u19af\5\u0362\u01b2"+
		"\2\u19ab\u19ac\7)\2\2\u19ac\u19ae\5\u0362\u01b2\2\u19ad\u19ab\3\2\2\2"+
		"\u19ae\u19b1\3\2\2\2\u19af\u19ad\3\2\2\2\u19af\u19b0\3\2\2\2\u19b0\u0361"+
		"\3\2\2\2\u19b1\u19af\3\2\2\2\u19b2\u19b3\5\u0302\u0182\2\u19b3\u19b4\7"+
		"d\2\2\u19b4\u19b5\5\u02da\u016e\2\u19b5\u19b9\3\2\2\2\u19b6\u19b7\7\u0098"+
		"\2\2\u19b7\u19b9\5\u0302\u0182\2\u19b8\u19b2\3\2\2\2\u19b8\u19b6\3\2\2"+
		"\2\u19b9\u0363\3\2\2\2\u19ba\u19bc\5\u0348\u01a5\2\u19bb\u19bd\5\u0366"+
		"\u01b4\2\u19bc\u19bb\3\2\2\2\u19bc\u19bd\3\2\2\2\u19bd\u19bf\3\2\2\2\u19be"+
		"\u19c0\5\u0368\u01b5\2\u19bf\u19be\3\2\2\2\u19bf\u19c0\3\2\2\2\u19c0\u19c2"+
		"\3\2\2\2\u19c1\u19c3\5\u03ea\u01f6\2\u19c2\u19c1\3\2\2\2\u19c2\u19c3\3"+
		"\2\2\2\u19c3\u19c6\3\2\2\2\u19c4\u19c6\5\u036e\u01b8\2\u19c5\u19ba\3\2"+
		"\2\2\u19c5\u19c4\3\2\2\2\u19c6\u0365\3\2\2\2\u19c7\u19c8\7\u0137\2\2\u19c8"+
		"\u19c9\7y\2\2\u19c9\u19ca\7#\2\2\u19ca\u19cb\5\u03de\u01f0\2\u19cb\u19cc"+
		"\7$\2\2\u19cc\u0367\3\2\2\2\u19cd\u19ce\7\u00fe\2\2\u19ce\u19cf\7#\2\2"+
		"\u19cf\u19d0\7c\2\2\u19d0\u19d1\5\u0300\u0181\2\u19d1\u19d2\7$\2\2\u19d2"+
		"\u0369\3\2\2\2\u19d3\u19d6\5\u0348\u01a5\2\u19d4\u19d6\5\u036e\u01b8\2"+
		"\u19d5\u19d3\3\2\2\2\u19d5\u19d4\3\2\2\2\u19d6\u036b\3\2\2\2\u19d7\u19d8"+
		"\7Q\2\2\u19d8\u19d9\7\u0164\2\2\u19d9\u036d\3\2\2\2\u19da\u19db\7\u00a9"+
		"\2\2\u19db\u19dc\7i\2\2\u19dc\u19dd\7#\2\2\u19dd\u19de\5\u0300\u0181\2"+
		"\u19de\u19df\7$\2\2\u19df\u1aaf\3\2\2\2\u19e0\u1aaf\7\u00b4\2\2\u19e1"+
		"\u1aaf\7\u00b5\2\2\u19e2\u19e3\7\u00b5\2\2\u19e3\u19e4\7#\2\2\u19e4\u19e5"+
		"\7\u0224\2\2\u19e5\u1aaf\7$\2\2\u19e6\u1aaf\7\u00b6\2\2\u19e7\u19e8\7"+
		"\u00b6\2\2\u19e8\u19e9\7#\2\2\u19e9\u19ea\7\u0224\2\2\u19ea\u1aaf\7$\2"+
		"\2\u19eb\u1aaf\7\u008d\2\2\u19ec\u19ed\7\u008d\2\2\u19ed\u19ee\7#\2\2"+
		"\u19ee\u19ef\7\u0224\2\2\u19ef\u1aaf\7$\2\2\u19f0\u1aaf\7\u008e\2\2\u19f1"+
		"\u19f2\7\u008e\2\2\u19f2\u19f3\7#\2\2\u19f3\u19f4\7\u0224\2\2\u19f4\u1aaf"+
		"\7$\2\2\u19f5\u1aaf\7\u0165\2\2\u19f6\u1aaf\7\u00a1\2\2\u19f7\u1aaf\7"+
		"\u012a\2\2\u19f8\u1aaf\7\u00e6\2\2\u19f9\u1aaf\7\u0166\2\2\u19fa\u1aaf"+
		"\7\u0167\2\2\u19fb\u19fc\7V\2\2\u19fc\u19fd\7#\2\2\u19fd\u19fe\5\u0300"+
		"\u0181\2\u19fe\u19ff\7d\2\2\u19ff\u1a00\5\u0370\u01b9\2\u1a00\u1a01\7"+
		"$\2\2\u1a01\u1aaf\3\2\2\2\u1a02\u1a03\7\u00fd\2\2\u1a03\u1a05\7#\2\2\u1a04"+
		"\u1a06\5\u0376\u01bc\2\u1a05\u1a04\3\2\2\2\u1a05\u1a06\3\2\2\2\u1a06\u1a07"+
		"\3\2\2\2\u1a07\u1aaf\7$\2\2\u1a08\u1a09\7\u0168\2\2\u1a09\u1a0a\7#\2\2"+
		"\u1a0a\u1a0b\5\u0300\u0181\2\u1a0b\u1a0c\7$\2\2\u1a0c\u1aaf\3\2\2\2\u1a0d"+
		"\u1a0e\7\u0168\2\2\u1a0e\u1a0f\7#\2\2\u1a0f\u1a10\5\u0300\u0181\2\u1a10"+
		"\u1a11\7)\2\2\u1a11\u1a12\5\u03a2\u01d2\2\u1a12\u1a13\7$\2\2\u1a13\u1aaf"+
		"\3\2\2\2\u1a14\u1a15\7\u0169\2\2\u1a15\u1a16\7#\2\2\u1a16\u1a17\5\u03a6"+
		"\u01d4\2\u1a17\u1a18\7$\2\2\u1a18\u1aaf\3\2\2\2\u1a19\u1a1a\7I\2\2\u1a1a"+
		"\u1a1b\7#\2\2\u1a1b\u1a1c\5\u03ae\u01d8\2\u1a1c\u1a1d\7$\2\2\u1a1d\u1aaf"+
		"\3\2\2\2\u1a1e\u1a1f\7X\2\2\u1a1f\u1a20\7#\2\2\u1a20\u1a21\5\u03b0\u01d9"+
		"\2\u1a21\u1a22\7$\2\2\u1a22\u1aaf\3\2\2\2\u1a23\u1a24\7\u0172\2\2\u1a24"+
		"\u1a25\7#\2\2\u1a25\u1a26\5\u0300\u0181\2\u1a26\u1a27\7d\2\2\u1a27\u1a28"+
		"\5\u0370\u01b9\2\u1a28\u1a29\7$\2\2\u1a29\u1aaf\3\2\2\2\u1a2a\u1a2b\7"+
		"W\2\2\u1a2b\u1a2c\7#\2\2\u1a2c\u1a2d\7\u00bc\2\2\u1a2d\u1a2e\5\u03a4\u01d3"+
		"\2\u1a2e\u1a2f\7$\2\2\u1a2f\u1aaf\3\2\2\2\u1a30\u1a31\7W\2\2\u1a31\u1a32"+
		"\7#\2\2\u1a32\u1a33\7\u00bd\2\2\u1a33\u1a34\5\u03a4\u01d3\2\u1a34\u1a35"+
		"\7$\2\2\u1a35\u1aaf\3\2\2\2\u1a36\u1a37\7W\2\2\u1a37\u1a38\7#\2\2\u1a38"+
		"\u1a39\7\u00be\2\2\u1a39\u1a3a\5\u03a4\u01d3\2\u1a3a\u1a3b\7$\2\2\u1a3b"+
		"\u1aaf\3\2\2\2\u1a3c\u1a3d\7W\2\2\u1a3d\u1a3e\7#\2\2\u1a3e\u1a3f\5\u03a4"+
		"\u01d3\2\u1a3f\u1a40\7$\2\2\u1a40\u1aaf\3\2\2\2\u1a41\u1a42\7\u00b7\2"+
		"\2\u1a42\u1a43\7#\2\2\u1a43\u1a44\5\u0300\u0181\2\u1a44\u1a45\7)\2\2\u1a45"+
		"\u1a46\5\u0300\u0181\2\u1a46\u1a47\7$\2\2\u1a47\u1aaf\3\2\2\2\u1a48\u1a49"+
		"\7\u00bf\2\2\u1a49\u1a4a\7#\2\2\u1a4a\u1a4b\5\u0374\u01bb\2\u1a4b\u1a4c"+
		"\7$\2\2\u1a4c\u1aaf\3\2\2\2\u1a4d\u1a4e\7\u017e\2\2\u1a4e\u1a4f\7#\2\2"+
		"\u1a4f\u1a50\5\u0374\u01bb\2\u1a50\u1a51\7$\2\2\u1a51\u1aaf\3\2\2\2\u1a52"+
		"\u1a53\7\u017f\2\2\u1a53\u1a54\7#\2\2\u1a54\u1a55\5\u0374\u01bb\2\u1a55"+
		"\u1a56\7$\2\2\u1a56\u1aaf\3\2\2\2\u1a57\u1a58\7\u016a\2\2\u1a58\u1a59"+
		"\7#\2\2\u1a59\u1a5a\5\u0374\u01bb\2\u1a5a\u1a5b\7$\2\2\u1a5b\u1aaf\3\2"+
		"\2\2\u1a5c\u1a5d\7\u016b\2\2\u1a5d\u1a5e\7#\2\2\u1a5e\u1a5f\7\u00a8\2"+
		"\2\u1a5f\u1a60\5\u02da\u016e\2\u1a60\u1a61\7$\2\2\u1a61\u1aaf\3\2\2\2"+
		"\u1a62\u1a63\7\u016b\2\2\u1a63\u1a64\7#\2\2\u1a64\u1a65\7\u00a8\2\2\u1a65"+
		"\u1a66\5\u02da\u016e\2\u1a66\u1a67\7)\2\2\u1a67\u1a68\5\u03b2\u01da\2"+
		"\u1a68\u1a69\7$\2\2\u1a69\u1aaf\3\2\2\2\u1a6a\u1a6b\7\u016b\2\2\u1a6b"+
		"\u1a6c\7#\2\2\u1a6c\u1a6d\7\u00a8\2\2\u1a6d\u1a6e\5\u02da\u016e\2\u1a6e"+
		"\u1a6f\7)\2\2\u1a6f\u1a70\5\u0374\u01bb\2\u1a70\u1a71\7$\2\2\u1a71\u1aaf"+
		"\3\2\2\2\u1a72\u1a73\7\u016b\2\2\u1a73\u1a74\7#\2\2\u1a74\u1a75\7\u00a8"+
		"\2\2\u1a75\u1a76\5\u02da\u016e\2\u1a76\u1a77\7)\2\2\u1a77\u1a78\5\u03b2"+
		"\u01da\2\u1a78\u1a79\7)\2\2\u1a79\u1a7a\5\u0374\u01bb\2\u1a7a\u1a7b\7"+
		"$\2\2\u1a7b\u1aaf\3\2\2\2\u1a7c\u1a7d\7\u016c\2\2\u1a7d\u1a7e\7#\2\2\u1a7e"+
		"\u1a7f\5\u0304\u0183\2\u1a7f\u1a80\5\u03b8\u01dd\2\u1a80\u1a81\7$\2\2"+
		"\u1a81\u1aaf\3\2\2\2\u1a82\u1a83\7\u016d\2\2\u1a83\u1a84\7#\2\2\u1a84"+
		"\u1a85\5\u03b4\u01db\2\u1a85\u1a86\7$\2\2\u1a86\u1aaf\3\2\2\2\u1a87\u1a88"+
		"\7\u016e\2\2\u1a88\u1a89\7#\2\2\u1a89\u1a8a\5\u03bc\u01df\2\u1a8a\u1a8b"+
		"\5\u0300\u0181\2\u1a8b\u1a8c\5\u03be\u01e0\2\u1a8c\u1a8d\7$\2\2\u1a8d"+
		"\u1aaf\3\2\2\2\u1a8e\u1a8f\7\u016f\2\2\u1a8f\u1a90\7#\2\2\u1a90\u1a91"+
		"\7\u00a8\2\2\u1a91\u1a92\5\u02da\u016e\2\u1a92\u1a93\7$\2\2\u1a93\u1aaf"+
		"\3\2\2\2\u1a94\u1a95\7\u016f\2\2\u1a95\u1a96\7#\2\2\u1a96\u1a97\7\u00a8"+
		"\2\2\u1a97\u1a98\5\u02da\u016e\2\u1a98\u1a99\7)\2\2\u1a99\u1a9a\5\u0300"+
		"\u0181\2\u1a9a\u1a9b\7$\2\2\u1a9b\u1aaf\3\2\2\2\u1a9c\u1a9d\7\u0170\2"+
		"\2\u1a9d\u1a9e\7#\2\2\u1a9e\u1a9f\5\u0300\u0181\2\u1a9f\u1aa0\7)\2\2\u1aa0"+
		"\u1aa2\5\u03c0\u01e1\2\u1aa1\u1aa3\5\u03c2\u01e2\2\u1aa2\u1aa1\3\2\2\2"+
		"\u1aa2\u1aa3\3\2\2\2\u1aa3\u1aa4\3\2\2\2\u1aa4\u1aa5\7$\2\2\u1aa5\u1aaf"+
		"\3\2\2\2\u1aa6\u1aa7\7\u0171\2\2\u1aa7\u1aa8\7#\2\2\u1aa8\u1aa9\5\u03bc"+
		"\u01df\2\u1aa9\u1aaa\5\u0300\u0181\2\u1aaa\u1aab\7d\2\2\u1aab\u1aac\5"+
		"\u0372\u01ba\2\u1aac\u1aad\7$\2\2\u1aad\u1aaf\3\2\2\2\u1aae\u19da\3\2"+
		"\2\2\u1aae\u19e0\3\2\2\2\u1aae\u19e1\3\2\2\2\u1aae\u19e2\3\2\2\2\u1aae"+
		"\u19e6\3\2\2\2\u1aae\u19e7\3\2\2\2\u1aae\u19eb\3\2\2\2\u1aae\u19ec\3\2"+
		"\2\2\u1aae\u19f0\3\2\2\2\u1aae\u19f1\3\2\2\2\u1aae\u19f5\3\2\2\2\u1aae"+
		"\u19f6\3\2\2\2\u1aae\u19f7\3\2\2\2\u1aae\u19f8\3\2\2\2\u1aae\u19f9\3\2"+
		"\2\2\u1aae\u19fa\3\2\2\2\u1aae\u19fb\3\2\2\2\u1aae\u1a02\3\2\2\2\u1aae"+
		"\u1a08\3\2\2\2\u1aae\u1a0d\3\2\2\2\u1aae\u1a14\3\2\2\2\u1aae\u1a19\3\2"+
		"\2\2\u1aae\u1a1e\3\2\2\2\u1aae\u1a23\3\2\2\2\u1aae\u1a2a\3\2\2\2\u1aae"+
		"\u1a30\3\2\2\2\u1aae\u1a36\3\2\2\2\u1aae\u1a3c\3\2\2\2\u1aae\u1a41\3\2"+
		"\2\2\u1aae\u1a48\3\2\2\2\u1aae\u1a4d\3\2\2\2\u1aae\u1a52\3\2\2\2\u1aae"+
		"\u1a57\3\2\2\2\u1aae\u1a5c\3\2\2\2\u1aae\u1a62\3\2\2\2\u1aae\u1a6a\3\2"+
		"\2\2\u1aae\u1a72\3\2\2\2\u1aae\u1a7c\3\2\2\2\u1aae\u1a82\3\2\2\2\u1aae"+
		"\u1a87\3\2\2\2\u1aae\u1a8e\3\2\2\2\u1aae\u1a94\3\2\2\2\u1aae\u1a9c\3\2"+
		"\2\2\u1aae\u1aa6\3\2\2\2\u1aaf\u036f\3\2\2\2\u1ab0\u1ab1\5\u0372\u01ba"+
		"\2\u1ab1\u1ab2\5\u039e\u01d0\2\u1ab2\u1acc\3\2\2\2\u1ab3\u1ab4\7\u0173"+
		"\2\2\u1ab4\u1ab5\5\u0372\u01ba\2\u1ab5\u1ab6\5\u039e\u01d0\2\u1ab6\u1acc"+
		"\3\2\2\2\u1ab7\u1ab8\5\u0372\u01ba\2\u1ab8\u1ab9\7\u0088\2\2\u1ab9\u1aba"+
		"\7\'\2\2\u1aba\u1abb\7\u0224\2\2\u1abb\u1abc\7(\2\2\u1abc\u1acc\3\2\2"+
		"\2\u1abd\u1abe\7\u0173\2\2\u1abe\u1abf\5\u0372\u01ba\2\u1abf\u1ac0\7\u0088"+
		"\2\2\u1ac0\u1ac1\7\'\2\2\u1ac1\u1ac2\7\u0224\2\2\u1ac2\u1ac3\7(\2\2\u1ac3"+
		"\u1acc\3\2\2\2\u1ac4\u1ac5\5\u0372\u01ba\2\u1ac5\u1ac6\7\u0088\2\2\u1ac6"+
		"\u1acc\3\2\2\2\u1ac7\u1ac8\7\u0173\2\2\u1ac8\u1ac9\5\u0372\u01ba\2\u1ac9"+
		"\u1aca\7\u0088\2\2\u1aca\u1acc\3\2\2\2\u1acb\u1ab0\3\2\2\2\u1acb\u1ab3"+
		"\3\2\2\2\u1acb\u1ab7\3\2\2\2\u1acb\u1abd\3\2\2\2\u1acb\u1ac4\3\2\2\2\u1acb"+
		"\u1ac7\3\2\2\2\u1acc\u0371\3\2\2\2\u1acd\u1adb\5\u037a\u01be\2\u1ace\u1adb"+
		"\5\u037e\u01c0\2\u1acf\u1adb\5\u0394\u01cb\2\u1ad0\u1adb\5\u0384\u01c3"+
		"\2\u1ad1\u1adb\5\u0380\u01c1\2\u1ad2\u1ad3\5\u039a\u01ce\2\u1ad3\u1ad4"+
		"\5\u039c\u01cf\2\u1ad4\u1adb\3\2\2\2\u1ad5\u1ad6\5\u039a\u01ce\2\u1ad6"+
		"\u1ad7\7#\2\2\u1ad7\u1ad8\7\u0224\2\2\u1ad8\u1ad9\7$\2\2\u1ad9\u1adb\3"+
		"\2\2\2\u1ada\u1acd\3\2\2\2\u1ada\u1ace\3\2\2\2\u1ada\u1acf\3\2\2\2\u1ada"+
		"\u1ad0\3\2\2\2\u1ada\u1ad1\3\2\2\2\u1ada\u1ad2\3\2\2\2\u1ada\u1ad5\3\2"+
		"\2\2\u1adb\u0373\3\2\2\2\u1adc\u1add\b\u01bb\1\2\u1add\u1ade\5\u0300\u0181"+
		"\2\u1ade\u1ae4\3\2\2\2\u1adf\u1ae0\f\3\2\2\u1ae0\u1ae1\7)\2\2\u1ae1\u1ae3"+
		"\5\u0300\u0181\2\u1ae2\u1adf\3\2\2\2\u1ae3\u1ae6\3\2\2\2\u1ae4\u1ae2\3"+
		"\2\2\2\u1ae4\u1ae5\3\2\2\2\u1ae5\u0375\3\2\2\2\u1ae6\u1ae4\3\2\2\2\u1ae7"+
		"\u1ae8\5\u0378\u01bd\2\u1ae8\u1ae9\7Y\2\2\u1ae9\u1aea\5\u0300\u0181\2"+
		"\u1aea\u0377\3\2\2\2\u1aeb\u1af3\7\u008f\2\2\u1aec\u1af3\7\u0091\2\2\u1aed"+
		"\u1af3\7\u0093\2\2\u1aee\u1af3\7\u0094\2\2\u1aef\u1af3\7\u0095\2\2\u1af0"+
		"\u1af3\7\u0096\2\2\u1af1\u1af3\5\u02da\u016e\2\u1af2\u1aeb\3\2\2\2\u1af2"+
		"\u1aec\3\2\2\2\u1af2\u1aed\3\2\2\2\u1af2\u1aee\3\2\2\2\u1af2\u1aef\3\2"+
		"\2\2\u1af2\u1af0\3\2\2\2\u1af2\u1af1\3\2\2\2\u1af3\u0379\3\2\2\2\u1af4"+
		"\u1af6\5\u0352\u01aa\2\u1af5\u1af7\5\u037c\u01bf\2\u1af6\u1af5\3\2\2\2"+
		"\u1af6\u1af7\3\2\2\2\u1af7\u1afe\3\2\2\2\u1af8\u1af9\5\u0352\u01aa\2\u1af9"+
		"\u1afb\5\u038e\u01c8\2\u1afa\u1afc\5\u037c\u01bf\2\u1afb\u1afa\3\2\2\2"+
		"\u1afb\u1afc\3\2\2\2\u1afc\u1afe\3\2\2\2\u1afd\u1af4\3\2\2\2\u1afd\u1af8"+
		"\3\2\2\2\u1afe\u037b\3\2\2\2\u1aff\u1b00\7#\2\2\u1b00\u1b01\5\u0374\u01bb"+
		"\2\u1b01\u1b02\7$\2\2\u1b02\u037d\3\2\2\2\u1b03\u1b1f\7\u013e\2\2\u1b04"+
		"\u1b1f\7\u00ab\2\2\u1b05\u1b1f\7\u00af\2\2\u1b06\u1b1f\7\u00b0\2\2\u1b07"+
		"\u1b1f\7\u00ac\2\2\u1b08\u1b09\7\u0142\2\2\u1b09\u1b1f\5\u038c\u01c7\2"+
		"\u1b0a\u1b0b\7\u0085\2\2\u1b0b\u1b1f\7J\2\2\u1b0c\u1b0e\7\u00ad\2\2\u1b0d"+
		"\u1b0f\5\u037c\u01bf\2\u1b0e\u1b0d\3\2\2\2\u1b0e\u1b0f\3\2\2\2\u1b0f\u1b1f"+
		"\3\2\2\2\u1b10\u1b12\7\u00cc\2\2\u1b11\u1b13\5\u037c\u01bf\2\u1b12\u1b11"+
		"\3\2\2\2\u1b12\u1b13\3\2\2\2\u1b13\u1b1f\3\2\2\2\u1b14\u1b16\7\u00b1\2"+
		"\2\u1b15\u1b17\5\u037c\u01bf\2\u1b16\u1b15\3\2\2\2\u1b16\u1b17\3\2\2\2"+
		"\u1b17\u1b1f\3\2\2\2\u1b18\u1b1f\7\u0084\2\2\u1b19\u1b1f\7\u0144\2\2\u1b1a"+
		"\u1b1f\7\u0143\2\2\u1b1b\u1b1f\7\u013f\2\2\u1b1c\u1b1f\7\u0140\2\2\u1b1d"+
		"\u1b1f\7\u0141\2\2\u1b1e\u1b03\3\2\2\2\u1b1e\u1b04\3\2\2\2\u1b1e\u1b05"+
		"\3\2\2\2\u1b1e\u1b06\3\2\2\2\u1b1e\u1b07\3\2\2\2\u1b1e\u1b08\3\2\2\2\u1b1e"+
		"\u1b0a\3\2\2\2\u1b1e\u1b0c\3\2\2\2\u1b1e\u1b10\3\2\2\2\u1b1e\u1b14\3\2"+
		"\2\2\u1b1e\u1b18\3\2\2\2\u1b1e\u1b19\3\2\2\2\u1b1e\u1b1a\3\2\2\2\u1b1e"+
		"\u1b1b\3\2\2\2\u1b1e\u1b1c\3\2\2\2\u1b1e\u1b1d\3\2\2\2\u1b1f\u037f\3\2"+
		"\2\2\u1b20\u1b21\7\u008c\2\2\u1b21\u1b22\7#\2\2\u1b22\u1b23\7\u0224\2"+
		"\2\u1b23\u1b25\7$\2\2\u1b24\u1b26\5\u0382\u01c2\2\u1b25\u1b24\3\2\2\2"+
		"\u1b25\u1b26\3\2\2\2\u1b26\u1b38\3\2\2\2\u1b27\u1b29\7\u008c\2\2\u1b28"+
		"\u1b2a\5\u0382\u01c2\2\u1b29\u1b28\3\2\2\2\u1b29\u1b2a\3\2\2\2\u1b2a\u1b38"+
		"\3\2\2\2\u1b2b\u1b2c\7\u008b\2\2\u1b2c\u1b2d\7#\2\2\u1b2d\u1b2e\7\u0224"+
		"\2\2\u1b2e\u1b30\7$\2\2\u1b2f\u1b31\5\u0382\u01c2\2\u1b30\u1b2f\3\2\2"+
		"\2\u1b30\u1b31\3\2\2\2\u1b31\u1b38\3\2\2\2\u1b32\u1b34\7\u008b\2\2\u1b33"+
		"\u1b35\5\u0382\u01c2\2\u1b34\u1b33\3\2\2\2\u1b34\u1b35\3\2\2\2\u1b35\u1b38"+
		"\3\2\2\2\u1b36\u1b38\7\u008a\2\2\u1b37\u1b20\3\2\2\2\u1b37\u1b27\3\2\2"+
		"\2\u1b37\u1b2b\3\2\2\2\u1b37\u1b32\3\2\2\2\u1b37\u1b36\3\2\2\2\u1b38\u0381"+
		"\3\2\2\2\u1b39\u1b3a\7Q\2\2\u1b3a\u1b3b\7\u008b\2\2\u1b3b\u1b40\7\u0139"+
		"\2\2\u1b3c\u1b3d\7\u0138\2\2\u1b3d\u1b3e\7\u008b\2\2\u1b3e\u1b40\7\u0139"+
		"\2\2\u1b3f\u1b39\3\2\2\2\u1b3f\u1b3c\3\2\2\2\u1b40\u0383\3\2\2\2\u1b41"+
		"\u1b44\5\u0386\u01c4\2\u1b42\u1b44\5\u0388\u01c5\2\u1b43\u1b41\3\2\2\2"+
		"\u1b43\u1b42\3\2\2\2\u1b44\u0385\3\2\2\2\u1b45\u1b46\5\u038a\u01c6\2\u1b46"+
		"\u1b47\7#\2\2\u1b47\u1b48\7\u0224\2\2\u1b48\u1b49\7$\2\2\u1b49\u0387\3"+
		"\2\2\2\u1b4a\u1b4b\5\u038a\u01c6\2\u1b4b\u0389\3\2\2\2\u1b4c\u1b4e\7\u0087"+
		"\2\2\u1b4d\u1b4f\7\u00b8\2\2\u1b4e\u1b4d\3\2\2\2\u1b4e\u1b4f\3\2\2\2\u1b4f"+
		"\u1b64\3\2\2\2\u1b50\u1b52\7\u0086\2\2\u1b51\u1b53\7\u00b8\2\2\u1b52\u1b51"+
		"\3\2\2\2\u1b52\u1b53\3\2\2\2\u1b53\u1b64\3\2\2\2\u1b54\u1b64\7\u0149\2"+
		"\2\u1b55\u1b56\7\u00b9\2\2\u1b56\u1b58\7\u0087\2\2\u1b57\u1b59\7\u00b8"+
		"\2\2\u1b58\u1b57\3\2\2\2\u1b58\u1b59\3\2\2\2\u1b59\u1b64\3\2\2\2\u1b5a"+
		"\u1b5b\7\u00b9\2\2\u1b5b\u1b5d\7\u0086";
	private static final String _serializedATNSegment3 =
		"\2\2\u1b5c\u1b5e\7\u00b8\2\2\u1b5d\u1b5c\3\2\2\2\u1b5d\u1b5e\3\2\2\2\u1b5e"+
		"\u1b64\3\2\2\2\u1b5f\u1b61\7\u00ba\2\2\u1b60\u1b62\7\u00b8\2\2\u1b61\u1b60"+
		"\3\2\2\2\u1b61\u1b62\3\2\2\2\u1b62\u1b64\3\2\2\2\u1b63\u1b4c\3\2\2\2\u1b63"+
		"\u1b50\3\2\2\2\u1b63\u1b54\3\2\2\2\u1b63\u1b55\3\2\2\2\u1b63\u1b5a\3\2"+
		"\2\2\u1b63\u1b5f\3\2\2\2\u1b64\u038b\3\2\2\2\u1b65\u1b66\7#\2\2\u1b66"+
		"\u1b67\7\u0224\2\2\u1b67\u1b6a\7$\2\2\u1b68\u1b6a\3\2\2\2\u1b69\u1b65"+
		"\3\2\2\2\u1b69\u1b68\3\2\2\2\u1b6a\u038d\3\2\2\2\u1b6b\u1b6c\b\u01c8\1"+
		"\2\u1b6c\u1b6d\7\27\2\2\u1b6d\u1b6e\5\u0390\u01c9\2\u1b6e\u1b74\3\2\2"+
		"\2\u1b6f\u1b70\f\3\2\2\u1b70\u1b71\7\27\2\2\u1b71\u1b73\5\u0390\u01c9"+
		"\2\u1b72\u1b6f\3\2\2\2\u1b73\u1b76\3\2\2\2\u1b74\u1b72\3\2\2\2\u1b74\u1b75"+
		"\3\2\2\2\u1b75\u038f\3\2\2\2\u1b76\u1b74\3\2\2\2\u1b77\u1b78\5\u0392\u01ca"+
		"\2\u1b78\u0391\3\2\2\2\u1b79\u1b7e\5\u02da\u016e\2\u1b7a\u1b7e\5\u041a"+
		"\u020e\2\u1b7b\u1b7e\5\u02e2\u0172\2\u1b7c\u1b7e\5\u02d4\u016b\2\u1b7d"+
		"\u1b79\3\2\2\2\u1b7d\u1b7a\3\2\2\2\u1b7d\u1b7b\3\2\2\2\u1b7d\u1b7c\3\2"+
		"\2\2\u1b7e\u0393\3\2\2\2\u1b7f\u1b82\5\u0396\u01cc\2\u1b80\u1b82\5\u0398"+
		"\u01cd\2\u1b81\u1b7f\3\2\2\2\u1b81\u1b80\3\2\2\2\u1b82\u0395\3\2\2\2\u1b83"+
		"\u1b85\7\u0157\2\2\u1b84\u1b86\7\u00b8\2\2\u1b85\u1b84\3\2\2\2\u1b85\u1b86"+
		"\3\2\2\2\u1b86\u1b87\3\2\2\2\u1b87\u1b88\7#\2\2\u1b88\u1b89\5\u0374\u01bb"+
		"\2\u1b89\u1b8a\7$\2\2\u1b8a\u0397\3\2\2\2\u1b8b\u1b8d\7\u0157\2\2\u1b8c"+
		"\u1b8e\7\u00b8\2\2\u1b8d\u1b8c\3\2\2\2\u1b8d\u1b8e\3\2\2\2\u1b8e\u0399"+
		"\3\2\2\2\u1b8f\u1b90\7\u0089\2\2\u1b90\u039b\3\2\2\2\u1b91\u1bae\7\u008f"+
		"\2\2\u1b92\u1bae\7\u0091\2\2\u1b93\u1bae\7\u0093\2\2\u1b94\u1bae\7\u0094"+
		"\2\2\u1b95\u1bae\7\u0095\2\2\u1b96\u1bae\5\u03a0\u01d1\2\u1b97\u1b98\7"+
		"\u008f\2\2\u1b98\u1b99\7j\2\2\u1b99\u1bae\7\u0091\2\2\u1b9a\u1b9b\7\u0093"+
		"\2\2\u1b9b\u1b9c\7j\2\2\u1b9c\u1bae\7\u0094\2\2\u1b9d\u1b9e\7\u0093\2"+
		"\2\u1b9e\u1b9f\7j\2\2\u1b9f\u1bae\7\u0095\2\2\u1ba0\u1ba1\7\u0093\2\2"+
		"\u1ba1\u1ba2\7j\2\2\u1ba2\u1bae\5\u03a0\u01d1\2\u1ba3\u1ba4\7\u0094\2"+
		"\2\u1ba4\u1ba5\7j\2\2\u1ba5\u1bae\7\u0095\2\2\u1ba6\u1ba7\7\u0094\2\2"+
		"\u1ba7\u1ba8\7j\2\2\u1ba8\u1bae\5\u03a0\u01d1\2\u1ba9\u1baa\7\u0095\2"+
		"\2\u1baa\u1bab\7j\2\2\u1bab\u1bae\5\u03a0\u01d1\2\u1bac\u1bae\3\2\2\2"+
		"\u1bad\u1b91\3\2\2\2\u1bad\u1b92\3\2\2\2\u1bad\u1b93\3\2\2\2\u1bad\u1b94"+
		"\3\2\2\2\u1bad\u1b95\3\2\2\2\u1bad\u1b96\3\2\2\2\u1bad\u1b97\3\2\2\2\u1bad"+
		"\u1b9a\3\2\2\2\u1bad\u1b9d\3\2\2\2\u1bad\u1ba0\3\2\2\2\u1bad\u1ba3\3\2"+
		"\2\2\u1bad\u1ba6\3\2\2\2\u1bad\u1ba9\3\2\2\2\u1bad\u1bac\3\2\2\2\u1bae"+
		"\u039d\3\2\2\2\u1baf\u1bb9\b\u01d0\1\2\u1bb0\u1bb1\f\5\2\2\u1bb1\u1bb2"+
		"\7\'\2\2\u1bb2\u1bb8\7(\2\2\u1bb3\u1bb4\f\4\2\2\u1bb4\u1bb5\7\'\2\2\u1bb5"+
		"\u1bb6\7\u0224\2\2\u1bb6\u1bb8\7(\2\2\u1bb7\u1bb0\3\2\2\2\u1bb7\u1bb3"+
		"\3\2\2\2\u1bb8\u1bbb\3\2\2\2\u1bb9\u1bb7\3\2\2\2\u1bb9\u1bba\3\2\2\2\u1bba"+
		"\u039f\3\2\2\2\u1bbb\u1bb9\3\2\2\2\u1bbc\u1bc2\7\u0096\2\2\u1bbd\u1bbe"+
		"\7\u0096\2\2\u1bbe\u1bbf\7#\2\2\u1bbf\u1bc0\7\u0224\2\2\u1bc0\u1bc2\7"+
		"$\2\2\u1bc1\u1bbc\3\2\2\2\u1bc1\u1bbd\3\2\2\2\u1bc2\u03a1\3\2\2\2\u1bc3"+
		"\u1bc4\t\63\2\2\u1bc4\u03a3\3\2\2\2\u1bc5\u1bc6\5\u0300\u0181\2\u1bc6"+
		"\u1bc7\7Y\2\2\u1bc7\u1bc8\5\u0374\u01bb\2\u1bc8\u1bcd\3\2\2\2\u1bc9\u1bca"+
		"\7Y\2\2\u1bca\u1bcd\5\u0374\u01bb\2\u1bcb\u1bcd\5\u0374\u01bb\2\u1bcc"+
		"\u1bc5\3\2\2\2\u1bcc\u1bc9\3\2\2\2\u1bcc\u1bcb\3\2\2\2\u1bcd\u03a5\3\2"+
		"\2\2\u1bce\u1bcf\5\u0300\u0181\2\u1bcf\u1bd0\5\u03a8\u01d5\2\u1bd0\u1bd1"+
		"\5\u03aa\u01d6\2\u1bd1\u1bd2\5\u03ac\u01d7\2\u1bd2\u1bd8\3\2\2\2\u1bd3"+
		"\u1bd4\5\u0300\u0181\2\u1bd4\u1bd5\5\u03a8\u01d5\2\u1bd5\u1bd6\5\u03aa"+
		"\u01d6\2\u1bd6\u1bd8\3\2\2\2\u1bd7\u1bce\3\2\2\2\u1bd7\u1bd3\3\2\2\2\u1bd8"+
		"\u03a7\3\2\2\2\u1bd9\u1bda\7\u0195\2\2\u1bda\u1bdb\5\u0300\u0181\2\u1bdb"+
		"\u03a9\3\2\2\2\u1bdc\u1bdd\7Y\2\2\u1bdd\u1bde\5\u0300\u0181\2\u1bde\u03ab"+
		"\3\2\2\2\u1bdf\u1be0\7i\2\2\u1be0\u1be1\5\u0300\u0181\2\u1be1\u03ad\3"+
		"\2\2\2\u1be2\u1be3\5\u0302\u0182\2\u1be3\u1be4\7t\2\2\u1be4\u1be5\5\u0302"+
		"\u0182\2\u1be5\u1be8\3\2\2\2\u1be6\u1be8\3\2\2\2\u1be7\u1be2\3\2\2\2\u1be7"+
		"\u1be6\3\2\2\2\u1be8\u03af\3\2\2\2\u1be9\u1bea\5\u0300\u0181\2\u1bea\u1beb"+
		"\5\u03aa\u01d6\2\u1beb\u1bec\5\u03ac\u01d7\2\u1bec\u1bfa\3\2\2\2\u1bed"+
		"\u1bee\5\u0300\u0181\2\u1bee\u1bef\5\u03ac\u01d7\2\u1bef\u1bf0\5\u03aa"+
		"\u01d6\2\u1bf0\u1bfa\3\2\2\2\u1bf1\u1bf2\5\u0300\u0181\2\u1bf2\u1bf3\5"+
		"\u03aa\u01d6\2\u1bf3\u1bfa\3\2\2\2\u1bf4\u1bf5\5\u0300\u0181\2\u1bf5\u1bf6"+
		"\5\u03ac\u01d7\2\u1bf6\u1bfa\3\2\2\2\u1bf7\u1bfa\5\u0374\u01bb\2\u1bf8"+
		"\u1bfa\3\2\2\2\u1bf9\u1be9\3\2\2\2\u1bf9\u1bed\3\2\2\2\u1bf9\u1bf1\3\2"+
		"\2\2\u1bf9\u1bf4\3\2\2\2\u1bf9\u1bf7\3\2\2\2\u1bf9\u1bf8\3\2\2\2\u1bfa"+
		"\u03b1\3\2\2\2\u1bfb\u1bfc\7\u0178\2\2\u1bfc\u1bfd\7#\2\2\u1bfd\u1bfe"+
		"\5\u03b4\u01db\2\u1bfe\u1bff\7$\2\2\u1bff\u03b3\3\2\2\2\u1c00\u1c05\5"+
		"\u03b6\u01dc\2\u1c01\u1c02\7)\2\2\u1c02\u1c04\5\u03b6\u01dc\2\u1c03\u1c01"+
		"\3\2\2\2\u1c04\u1c07\3\2\2\2\u1c05\u1c03\3\2\2\2\u1c05\u1c06\3\2\2\2\u1c06"+
		"\u03b5\3\2\2\2\u1c07\u1c05\3\2\2\2\u1c08\u1c09\5\u0300\u0181\2\u1c09\u1c0a"+
		"\7d\2\2\u1c0a\u1c0b\5\u02da\u016e\2\u1c0b\u1c0e\3\2\2\2\u1c0c\u1c0e\5"+
		"\u0300\u0181\2\u1c0d\u1c08\3\2\2\2\u1c0d\u1c0c\3\2\2\2\u1c0e\u03b7\3\2"+
		"\2\2\u1c0f\u1c10\7\u017a\2\2\u1c10\u1c1f\5\u0304\u0183\2\u1c11\u1c12\7"+
		"\u017a\2\2\u1c12\u1c13\5\u0304\u0183\2\u1c13\u1c14\5\u03ba\u01de\2\u1c14"+
		"\u1c1f\3\2\2\2\u1c15\u1c16\7\u017a\2\2\u1c16\u1c17\5\u03ba\u01de\2\u1c17"+
		"\u1c18\5\u0304\u0183\2\u1c18\u1c1f\3\2\2\2\u1c19\u1c1a\7\u017a\2\2\u1c1a"+
		"\u1c1b\5\u03ba\u01de\2\u1c1b\u1c1c\5\u0304\u0183\2\u1c1c\u1c1d\5\u03ba"+
		"\u01de\2\u1c1d\u1c1f\3\2\2\2\u1c1e\u1c0f\3\2\2\2\u1c1e\u1c11\3\2\2\2\u1c1e"+
		"\u1c15\3\2\2\2\u1c1e\u1c19\3\2\2\2\u1c1f\u03b9\3\2\2\2\u1c20\u1c21\7z"+
		"\2\2\u1c21\u1c25\7\u0179\2\2\u1c22\u1c23\7z\2\2\u1c23\u1c25\7\u00bb\2"+
		"\2\u1c24\u1c20\3\2\2\2\u1c24\u1c22\3\2\2\2\u1c25\u03bb\3\2\2\2\u1c26\u1c27"+
		"\t\64\2\2\u1c27\u03bd\3\2\2\2\u1c28\u1c29\7\u009e\2\2\u1c29\u1c2e\7\u0193"+
		"\2\2\u1c2a\u1c2b\7\u0192\2\2\u1c2b\u1c2e\7\u0193\2\2\u1c2c\u1c2e\3\2\2"+
		"\2\u1c2d\u1c28\3\2\2\2\u1c2d\u1c2a\3\2\2\2\u1c2d\u1c2c\3\2\2\2\u1c2e\u03bf"+
		"\3\2\2\2\u1c2f\u1c30\7\u017b\2\2\u1c30\u1c35\5\u0300\u0181\2\u1c31\u1c32"+
		"\7\u017b\2\2\u1c32\u1c33\7\u00dd\2\2\u1c33\u1c35\7\u00bb\2\2\u1c34\u1c2f"+
		"\3\2\2\2\u1c34\u1c31\3\2\2\2\u1c35\u03c1\3\2\2\2\u1c36\u1c37\7)\2\2\u1c37"+
		"\u1c38\7\u017d\2\2\u1c38\u1c41\7\u017c\2\2\u1c39\u1c3a\7)\2\2\u1c3a\u1c3b"+
		"\7\u017d\2\2\u1c3b\u1c41\7\u00dd\2\2\u1c3c\u1c3d\7)\2\2\u1c3d\u1c3e\7"+
		"\u017d\2\2\u1c3e\u1c3f\7\u00dd\2\2\u1c3f\u1c41\7\u00bb\2\2\u1c40\u1c36"+
		"\3\2\2\2\u1c40\u1c39\3\2\2\2\u1c40\u1c3c\3\2\2\2\u1c41\u03c3\3\2\2\2\u1c42"+
		"\u1c43\5\u036a\u01b6\2\u1c43\u1c44\5\u03c8\u01e5\2\u1c44\u03c5\3\2\2\2"+
		"\u1c45\u1c4a\5\u03c4\u01e3\2\u1c46\u1c47\7)\2\2\u1c47\u1c49\5\u03c4\u01e3"+
		"\2\u1c48\u1c46\3\2\2\2\u1c49\u1c4c\3\2\2\2\u1c4a\u1c48\3\2\2\2\u1c4a\u1c4b"+
		"\3\2\2\2\u1c4b\u03c7\3\2\2\2\u1c4c\u1c4a\3\2\2\2\u1c4d\u1c4e\7d\2\2\u1c4e"+
		"\u1c4f\7#\2\2\u1c4f\u1c50\5\u03ca\u01e6\2\u1c50\u1c51\7$\2\2\u1c51\u03c9"+
		"\3\2\2\2\u1c52\u1c57\5\u03cc\u01e7\2\u1c53\u1c54\7)\2\2\u1c54\u1c56\5"+
		"\u03cc\u01e7\2\u1c55\u1c53\3\2\2\2\u1c56\u1c59\3\2\2\2\u1c57\u1c55\3\2"+
		"\2\2\u1c57\u1c58\3\2\2\2\u1c58\u03cb\3\2\2\2\u1c59\u1c57\3\2\2\2\u1c5a"+
		"\u1c5b\5\u0350\u01a9\2\u1c5b\u1c5d\5\u0370\u01b9\2\u1c5c\u1c5e\5\u03ce"+
		"\u01e8\2\u1c5d\u1c5c\3\2\2\2\u1c5d\u1c5e\3\2\2\2\u1c5e\u03cd\3\2\2\2\u1c5f"+
		"\u1c61\7\u00eb\2\2\u1c60\u1c62\7\33\2\2\u1c61\u1c60\3\2\2\2\u1c61\u1c62"+
		"\3\2\2\2\u1c62\u1c63\3\2\2\2\u1c63\u1c64\5\u03d0\u01e9\2\u1c64\u03cf\3"+
		"\2\2\2\u1c65\u1c6a\5\u0350\u01a9\2\u1c66\u1c67\5\u0350\u01a9\2\u1c67\u1c68"+
		"\5\u038e\u01c8\2\u1c68\u1c6a\3\2\2\2\u1c69\u1c65\3\2\2\2\u1c69\u1c66\3"+
		"\2\2\2\u1c6a\u03d1\3\2\2\2\u1c6b\u1c6c\7d\2\2\u1c6c\u1c6d\5\u0350\u01a9"+
		"\2\u1c6d\u1c6e\7#\2\2\u1c6e\u1c6f\5\u03d4\u01eb\2\u1c6f\u1c70\7$\2\2\u1c70"+
		"\u1c7a\3\2\2\2\u1c71\u1c72\7d\2\2\u1c72\u1c7a\5\u0350\u01a9\2\u1c73\u1c74"+
		"\5\u0350\u01a9\2\u1c74\u1c75\7#\2\2\u1c75\u1c76\5\u03d4\u01eb\2\u1c76"+
		"\u1c77\7$\2\2\u1c77\u1c7a\3\2\2\2\u1c78\u1c7a\5\u0350\u01a9\2\u1c79\u1c6b"+
		"\3\2\2\2\u1c79\u1c71\3\2\2\2\u1c79\u1c73\3\2\2\2\u1c79\u1c78\3\2\2\2\u1c7a"+
		"\u03d3\3\2\2\2\u1c7b\u1c7c\b\u01eb\1\2\u1c7c\u1c7d\5\u02ec\u0177\2\u1c7d"+
		"\u1c83\3\2\2\2\u1c7e\u1c7f\f\3\2\2\u1c7f\u1c80\7)\2\2\u1c80\u1c82\5\u02ec"+
		"\u0177\2\u1c81\u1c7e\3\2\2\2\u1c82\u1c85\3\2\2\2\u1c83\u1c81\3\2\2\2\u1c83"+
		"\u1c84\3\2\2\2\u1c84\u03d5\3\2\2\2\u1c85\u1c83\3\2\2\2\u1c86\u1c98\5\u03d2"+
		"\u01ea\2\u1c87\u1c88\7d\2\2\u1c88\u1c89\7#\2\2\u1c89\u1c8a\5\u03ca\u01e6"+
		"\2\u1c8a\u1c8b\7$\2\2\u1c8b\u1c98\3\2\2\2\u1c8c\u1c8d\7d\2\2\u1c8d\u1c8e"+
		"\5\u0350\u01a9\2\u1c8e\u1c8f\7#\2\2\u1c8f\u1c90\5\u03ca\u01e6\2\u1c90"+
		"\u1c91\7$\2\2\u1c91\u1c98\3\2\2\2\u1c92\u1c93\5\u0350\u01a9\2\u1c93\u1c94"+
		"\7#\2\2\u1c94\u1c95\5\u03ca\u01e6\2\u1c95\u1c96\7$\2\2\u1c96\u1c98\3\2"+
		"\2\2\u1c97\u1c86\3\2\2\2\u1c97\u1c87\3\2\2\2\u1c97\u1c8c\3\2\2\2\u1c97"+
		"\u1c92\3\2\2\2\u1c98\u03d7\3\2\2\2\u1c99\u1c9a\7\u0163\2\2\u1c9a\u1c9b"+
		"\5\u034a\u01a6\2\u1c9b\u1c9c\7#\2\2\u1c9c\u1c9d\5\u0374\u01bb\2\u1c9d"+
		"\u1c9f\7$\2\2\u1c9e\u1ca0\5\u03da\u01ee\2\u1c9f\u1c9e\3\2\2\2\u1c9f\u1ca0"+
		"\3\2\2\2\u1ca0\u03d9\3\2\2\2\u1ca1\u1ca2\7\u00b3\2\2\u1ca2\u1ca3\7#\2"+
		"\2\u1ca3\u1ca4\5\u0300\u0181\2\u1ca4\u1ca5\7$\2\2\u1ca5\u03db\3\2\2\2"+
		"\u1ca6\u1ca7\t\65\2\2\u1ca7\u03dd\3\2\2\2\u1ca8\u1ca9\7x\2\2\u1ca9\u1caa"+
		"\7z\2\2\u1caa\u1cab\5\u03e0\u01f1\2\u1cab\u03df\3\2\2\2\u1cac\u1cb1\5"+
		"\u03e2\u01f2\2\u1cad\u1cae\7)\2\2\u1cae\u1cb0\5\u03e2\u01f2\2\u1caf\u1cad"+
		"\3\2\2\2\u1cb0\u1cb3\3\2\2\2\u1cb1\u1caf\3\2\2\2\u1cb1\u1cb2\3\2\2\2\u1cb2"+
		"\u03e1\3\2\2\2\u1cb3\u1cb1\3\2\2\2\u1cb4\u1cb5\5\u0300\u0181\2\u1cb5\u1cb6"+
		"\7b\2\2\u1cb6\u1cb8\5\u0326\u0194\2\u1cb7\u1cb9\5\u03e4\u01f3\2\u1cb8"+
		"\u1cb7\3\2\2\2\u1cb8\u1cb9\3\2\2\2\u1cb9\u1cc2\3\2\2\2\u1cba\u1cbc\5\u0300"+
		"\u0181\2\u1cbb\u1cbd\5\u0328\u0195\2\u1cbc\u1cbb\3\2\2\2\u1cbc\u1cbd\3"+
		"\2\2\2\u1cbd\u1cbf\3\2\2\2\u1cbe\u1cc0\5\u03e4\u01f3\2\u1cbf\u1cbe\3\2"+
		"\2\2\u1cbf\u1cc0\3\2\2\2\u1cc0\u1cc2\3\2\2\2\u1cc1\u1cb4\3\2\2\2\u1cc1"+
		"\u1cba\3\2\2\2\u1cc2\u03e3\3\2\2\2\u1cc3\u1cc4\7\u0115\2\2\u1cc4\u1cc8"+
		"\7\u00ff\2\2\u1cc5\u1cc6\7\u0115\2\2\u1cc6\u1cc8\7\u010e\2\2\u1cc7\u1cc3"+
		"\3\2\2\2\u1cc7\u1cc5\3\2\2\2\u1cc8\u03e5\3\2\2\2\u1cc9\u1cd1\7S\2\2\u1cca"+
		"\u1ccb\7S\2\2\u1ccb\u1ccc\7e\2\2\u1ccc\u1ccd\7#\2\2\u1ccd\u1cce\5\u0374"+
		"\u01bb\2\u1cce\u1ccf\7$\2\2\u1ccf\u1cd1\3\2\2\2\u1cd0\u1cc9\3\2\2\2\u1cd0"+
		"\u1cca\3\2\2\2\u1cd1\u03e7\3\2\2\2\u1cd2\u1cd3\7S\2\2\u1cd3\u03e9\3\2"+
		"\2\2\u1cd4\u1cd5\7\u0119\2\2\u1cd5\u1cd9\5\u03ec\u01f7\2\u1cd6\u1cd7\7"+
		"\u0119\2\2\u1cd7\u1cd9\5\u0350\u01a9\2\u1cd8\u1cd4\3\2\2\2\u1cd8\u1cd6"+
		"\3\2\2\2\u1cd9\u03eb\3\2\2\2\u1cda\u1cdc\7#\2\2\u1cdb\u1cdd\5\u03ee\u01f8"+
		"\2\u1cdc\u1cdb\3\2\2\2\u1cdc\u1cdd\3\2\2\2\u1cdd\u1cdf\3\2\2\2\u1cde\u1ce0"+
		"\5\u03f0\u01f9\2\u1cdf\u1cde\3\2\2\2\u1cdf\u1ce0\3\2\2\2\u1ce0\u1ce2\3"+
		"\2\2\2\u1ce1\u1ce3\5\u03de\u01f0\2\u1ce2\u1ce1\3\2\2\2\u1ce2\u1ce3\3\2"+
		"\2\2\u1ce3\u1ce5\3\2\2\2\u1ce4\u1ce6\5\u032c\u0197\2\u1ce5\u1ce4\3\2\2"+
		"\2\u1ce5\u1ce6\3\2\2\2\u1ce6\u1ce7\3\2\2\2\u1ce7\u1ce8\7$\2\2\u1ce8\u03ed"+
		"\3\2\2\2\u1ce9\u1cea\5\u0350\u01a9\2\u1cea\u03ef\3\2\2\2\u1ceb\u1cec\7"+
		"\u00d4\2\2\u1cec\u1ced\7z\2\2\u1ced\u1cee\5\u0374\u01bb\2\u1cee\u03f1"+
		"\3\2\2\2\u1cef\u1cf4\5\u03f6\u01fc\2\u1cf0\u1cf1\7)\2\2\u1cf1\u1cf3\5"+
		"\u03f6\u01fc\2\u1cf2\u1cf0\3\2\2\2\u1cf3\u1cf6\3\2\2\2\u1cf4\u1cf2\3\2"+
		"\2\2\u1cf4\u1cf5\3\2\2\2\u1cf5\u03f3\3\2\2\2\u1cf6\u1cf4\3\2\2\2\u1cf7"+
		"\u1cf9\5\u03f8\u01fd\2\u1cf8\u1cf7\3\2\2\2\u1cf8\u1cf9\3\2\2\2\u1cf9\u1cfa"+
		"\3\2\2\2\u1cfa\u1cfc\5\u03fa\u01fe\2\u1cfb\u1cfd\5\u0328\u0195\2\u1cfc"+
		"\u1cfb\3\2\2\2\u1cfc\u1cfd\3\2\2\2\u1cfd\u1cff\3\2\2\2\u1cfe\u1d00\5\u03e4"+
		"\u01f3\2\u1cff\u1cfe\3\2\2\2\u1cff\u1d00\3\2\2\2\u1d00\u1d0d\3\2\2\2\u1d01"+
		"\u1d03\5\u03f8\u01fd\2\u1d02\u1d01\3\2\2\2\u1d02\u1d03\3\2\2\2\u1d03\u1d04"+
		"\3\2\2\2\u1d04\u1d05\5\u03d0\u01e9\2\u1d05\u1d07\5\u03fc\u01ff\2\u1d06"+
		"\u1d08\5\u0328\u0195\2\u1d07\u1d06\3\2\2\2\u1d07\u1d08\3\2\2\2\u1d08\u1d0a"+
		"\3\2\2\2\u1d09\u1d0b\5\u03e4\u01f3\2\u1d0a\u1d09\3\2\2\2\u1d0a\u1d0b\3"+
		"\2\2\2\u1d0b\u1d0d\3\2\2\2\u1d0c\u1cf8\3\2\2\2\u1d0c\u1d02\3\2\2\2\u1d0d"+
		"\u03f5\3\2\2\2\u1d0e\u1d0f\5\u0350\u01a9\2\u1d0f\u1d10\5\u03f4\u01fb\2"+
		"\u1d10\u1d1a\3\2\2\2\u1d11\u1d12\5\u036a\u01b6\2\u1d12\u1d13\5\u03f4\u01fb"+
		"\2\u1d13\u1d1a\3\2\2\2\u1d14\u1d15\7#\2\2\u1d15\u1d16\5\u0300\u0181\2"+
		"\u1d16\u1d17\7$\2\2\u1d17\u1d18\5\u03f4\u01fb\2\u1d18\u1d1a\3\2\2\2\u1d19"+
		"\u1d0e\3\2\2\2\u1d19\u1d11\3\2\2\2\u1d19\u1d14\3\2\2\2\u1d1a\u03f7\3\2"+
		"\2\2\u1d1b\u1d1c\7\u00eb\2\2\u1d1c\u1d1d\5\u03d0\u01e9\2\u1d1d\u03f9\3"+
		"\2\2\2\u1d1e\u1d21\5\u03d0\u01e9\2\u1d1f\u1d21\3\2\2\2\u1d20\u1d1e\3\2"+
		"\2\2\u1d20\u1d1f\3\2\2\2\u1d21\u03fb\3\2\2\2\u1d22\u1d23\7#\2\2\u1d23"+
		"\u1d24\5\u03fe\u0200\2\u1d24\u1d25\7$\2\2\u1d25\u03fd\3\2\2\2\u1d26\u1d2b"+
		"\5\u0400\u0201\2\u1d27\u1d28\7)\2\2\u1d28\u1d2a\5\u0400\u0201\2\u1d29"+
		"\u1d27\3\2\2\2\u1d2a\u1d2d\3\2\2\2\u1d2b\u1d29\3\2\2\2\u1d2b\u1d2c\3\2"+
		"\2\2\u1d2c\u03ff\3\2\2\2\u1d2d\u1d2b\3\2\2\2\u1d2e\u1d2f\5\u02f6\u017c"+
		"\2\u1d2f\u1d30\7\33\2\2\u1d30\u1d31\5\u0402\u0202\2\u1d31\u1d3e\3\2\2"+
		"\2\u1d32\u1d3e\5\u02f6\u017c\2\u1d33\u1d34\5\u02f6\u017c\2\u1d34\u1d35"+
		"\7\27\2\2\u1d35\u1d36\5\u02f6\u017c\2\u1d36\u1d37\7\33\2\2\u1d37\u1d38"+
		"\5\u0402\u0202\2\u1d38\u1d3e\3\2\2\2\u1d39\u1d3a\5\u02f6\u017c\2\u1d3a"+
		"\u1d3b\7\27\2\2\u1d3b\u1d3c\5\u02f6\u017c\2\u1d3c\u1d3e\3\2\2\2\u1d3d"+
		"\u1d2e\3\2\2\2\u1d3d\u1d32\3\2\2\2\u1d3d\u1d33\3\2\2\2\u1d3d\u1d39\3\2"+
		"\2\2\u1d3e\u0401\3\2\2\2\u1d3f\u1d46\5\u0404\u0203\2\u1d40\u1d46\5\u02d4"+
		"\u016b\2\u1d41\u1d46\5\u0326\u0194\2\u1d42\u1d46\7\u0224\2\2\u1d43\u1d46"+
		"\7\u0223\2\2\u1d44\u1d46\7\u0198\2\2\u1d45\u1d3f\3\2\2\2\u1d45\u1d40\3"+
		"\2\2\2\u1d45\u1d41\3\2\2\2\u1d45\u1d42\3\2\2\2\u1d45\u1d43\3\2\2\2\u1d45"+
		"\u1d44\3\2\2\2\u1d46\u0403\3\2\2\2\u1d47\u1d54\5\u0370\u01b9\2\u1d48\u1d49"+
		"\5\u0352\u01aa\2\u1d49\u1d4a\5\u038e\u01c8\2\u1d4a\u1d4b\7\20\2\2\u1d4b"+
		"\u1d4c\7\u00ae\2\2\u1d4c\u1d54\3\2\2\2\u1d4d\u1d4e\7\u0173\2\2\u1d4e\u1d4f"+
		"\5\u0352\u01aa\2\u1d4f\u1d50\5\u038e\u01c8\2\u1d50\u1d51\7\20\2\2\u1d51"+
		"\u1d52\7\u00ae\2\2\u1d52\u1d54\3\2\2\2\u1d53\u1d47\3\2\2\2\u1d53\u1d48"+
		"\3\2\2\2\u1d53\u1d4d\3\2\2\2\u1d54\u0405\3\2\2\2\u1d55\u1d56\7\5\2\2\u1d56"+
		"\u0407\3\2\2\2\u1d57\u1d59\5\u040a\u0206\2\u1d58\u1d5a\5\u040c\u0207\2"+
		"\u1d59\u1d58\3\2\2\2\u1d59\u1d5a\3\2\2\2\u1d5a\u1d5c\3\2\2\2\u1d5b\u1d5d"+
		"\5\u040e\u0208\2\u1d5c\u1d5b\3\2\2\2\u1d5c\u1d5d\3\2\2\2\u1d5d\u1d5f\3"+
		"\2\2\2\u1d5e\u1d60\5\u03ce\u01e8\2\u1d5f\u1d5e\3\2\2\2\u1d5f\u1d60\3\2"+
		"\2\2\u1d60\u1d73\3\2\2\2\u1d61\u1d62\5\u040a\u0206\2\u1d62\u1d63\7#\2"+
		"\2\u1d63\u1d68\7\u0223\2\2\u1d64\u1d65\7)\2\2\u1d65\u1d67\7\u0223\2\2"+
		"\u1d66\u1d64\3\2\2\2\u1d67\u1d6a\3\2\2\2\u1d68\u1d66\3\2\2\2\u1d68\u1d69"+
		"\3\2\2\2\u1d69\u1d6b\3\2\2\2\u1d6a\u1d68\3\2\2\2\u1d6b\u1d6d\7$\2\2\u1d6c"+
		"\u1d6e\5\u040e\u0208\2\u1d6d\u1d6c\3\2\2\2\u1d6d\u1d6e\3\2\2\2\u1d6e\u1d70"+
		"\3\2\2\2\u1d6f\u1d71\5\u03ce\u01e8\2\u1d70\u1d6f\3\2\2\2\u1d70\u1d71\3"+
		"\2\2\2\u1d71\u1d73\3\2\2\2\u1d72\u1d57\3\2\2\2\u1d72\u1d61\3\2\2\2\u1d73"+
		"\u0409\3\2\2\2\u1d74\u1daf\7\u013e\2\2\u1d75\u1daf\7\u013f\2\2\u1d76\u1daf"+
		"\7\u0140\2\2\u1d77\u1daf\7\u0141\2\2\u1d78\u1daf\7\u00af\2\2\u1d79\u1daf"+
		"\7\u00ab\2\2\u1d7a\u1daf\7\u00b0\2\2\u1d7b\u1daf\7\u00ad\2\2\u1d7c\u1daf"+
		"\7\u00b1\2\2\u1d7d\u1daf\7\u00ac\2\2\u1d7e\u1daf\7\u0142\2\2\u1d7f\u1daf"+
		"\7\u0143\2\2\u1d80\u1daf\7\u0144\2\2\u1d81\u1d82\7\u0085\2\2\u1d82\u1daf"+
		"\7J\2\2\u1d83\u1daf\7\u0145\2\2\u1d84\u1daf\7\u0146\2\2\u1d85\u1daf\7"+
		"\u0147\2\2\u1d86\u1daf\7\u0148\2\2\u1d87\u1daf\7\u0149\2\2\u1d88\u1daf"+
		"\7\u0087\2\2\u1d89\u1daf\7\u0086\2\2\u1d8a\u1daf\7\u00b2\2\2\u1d8b\u1daf"+
		"\7\u00a8\2\2\u1d8c\u1daf\7\u014a\2\2\u1d8d\u1daf\7\u008c\2\2\u1d8e\u1daf"+
		"\7\u008a\2\2\u1d8f\u1daf\7\u008b\2\2\u1d90\u1daf\7\u0089\2\2\u1d91\u1daf"+
		"\7\u0084\2\2\u1d92\u1daf\7\u014b\2\2\u1d93\u1daf\7\u014c\2\2\u1d94\u1daf"+
		"\7\u014d\2\2\u1d95\u1daf\7\u014e\2\2\u1d96\u1daf\7\u014f\2\2\u1d97\u1daf"+
		"\7\u0150\2\2\u1d98\u1daf\7\u0151\2\2\u1d99\u1daf\7\u0152\2\2\u1d9a\u1daf"+
		"\7\u0153\2\2\u1d9b\u1daf\7\u0154\2\2\u1d9c\u1daf\7\u0155\2\2\u1d9d\u1daf"+
		"\7\u0156\2\2\u1d9e\u1daf\7\u0157\2\2\u1d9f\u1daf\7\u0158\2\2\u1da0\u1daf"+
		"\7\u0159\2\2\u1da1\u1daf\7\u015a\2\2\u1da2\u1daf\7\u015b\2\2\u1da3\u1daf"+
		"\7\u015c\2\2\u1da4\u1daf\7\u015d\2\2\u1da5\u1daf\7\u015e\2\2\u1da6\u1daf"+
		"\7\u015f\2\2\u1da7\u1daf\7\u0160\2\2\u1da8\u1daf\7\u0161\2\2\u1da9\u1daf"+
		"\7\u0162\2\2\u1daa\u1daf\7\u0088\2\2\u1dab\u1daf\5\u02da\u016e\2\u1dac"+
		"\u1daf\5\u0380\u01c1\2\u1dad\u1daf\5\u0370\u01b9\2\u1dae\u1d74\3\2\2\2"+
		"\u1dae\u1d75\3\2\2\2\u1dae\u1d76\3\2\2\2\u1dae\u1d77\3\2\2\2\u1dae\u1d78"+
		"\3\2\2\2\u1dae\u1d79\3\2\2\2\u1dae\u1d7a\3\2\2\2\u1dae\u1d7b\3\2\2\2\u1dae"+
		"\u1d7c\3\2\2\2\u1dae\u1d7d\3\2\2\2\u1dae\u1d7e\3\2\2\2\u1dae\u1d7f\3\2"+
		"\2\2\u1dae\u1d80\3\2\2\2\u1dae\u1d81\3\2\2\2\u1dae\u1d83\3\2\2\2\u1dae"+
		"\u1d84\3\2\2\2\u1dae\u1d85\3\2\2\2\u1dae\u1d86\3\2\2\2\u1dae\u1d87\3\2"+
		"\2\2\u1dae\u1d88\3\2\2\2\u1dae\u1d89\3\2\2\2\u1dae\u1d8a\3\2\2\2\u1dae"+
		"\u1d8b\3\2\2\2\u1dae\u1d8c\3\2\2\2\u1dae\u1d8d\3\2\2\2\u1dae\u1d8e\3\2"+
		"\2\2\u1dae\u1d8f\3\2\2\2\u1dae\u1d90\3\2\2\2\u1dae\u1d91\3\2\2\2\u1dae"+
		"\u1d92\3\2\2\2\u1dae\u1d93\3\2\2\2\u1dae\u1d94\3\2\2\2\u1dae\u1d95\3\2"+
		"\2\2\u1dae\u1d96\3\2\2\2\u1dae\u1d97\3\2\2\2\u1dae\u1d98\3\2\2\2\u1dae"+
		"\u1d99\3\2\2\2\u1dae\u1d9a\3\2\2\2\u1dae\u1d9b\3\2\2\2\u1dae\u1d9c\3\2"+
		"\2\2\u1dae\u1d9d\3\2\2\2\u1dae\u1d9e\3\2\2\2\u1dae\u1d9f\3\2\2\2\u1dae"+
		"\u1da0\3\2\2\2\u1dae\u1da1\3\2\2\2\u1dae\u1da2\3\2\2\2\u1dae\u1da3\3\2"+
		"\2\2\u1dae\u1da4\3\2\2\2\u1dae\u1da5\3\2\2\2\u1dae\u1da6\3\2\2\2\u1dae"+
		"\u1da7\3\2\2\2\u1dae\u1da8\3\2\2\2\u1dae\u1da9\3\2\2\2\u1dae\u1daa\3\2"+
		"\2\2\u1dae\u1dab\3\2\2\2\u1dae\u1dac\3\2\2\2\u1dae\u1dad\3\2\2\2\u1daf"+
		"\u040b\3\2\2\2\u1db0\u1db1\7#\2\2\u1db1\u1db4\7\u0224\2\2\u1db2\u1db3"+
		"\7)\2\2\u1db3\u1db5\7\u0224\2\2\u1db4\u1db2\3\2\2\2\u1db4\u1db5\3\2\2"+
		"\2\u1db5\u1db6\3\2\2\2\u1db6\u1db7\7$\2\2\u1db7\u040d\3\2\2\2\u1db8\u1db9"+
		"\t\66\2\2\u1db9\u1dbb\7@\2\2\u1dba\u1dbc\7\33\2\2\u1dbb\u1dba\3\2\2\2"+
		"\u1dbb\u1dbc\3\2\2\2\u1dbc\u1dbd\3\2\2\2\u1dbd\u1dbe\5\u0410\u0209\2\u1dbe"+
		"\u040f\3\2\2\2\u1dbf\u1dc2\5\u02da\u016e\2\u1dc0\u1dc1\7\27\2\2\u1dc1"+
		"\u1dc3\5\u02da\u016e\2\u1dc2\u1dc0\3\2\2\2\u1dc2\u1dc3\3\2\2\2\u1dc3\u0411"+
		"\3\2\2\2\u1dc4\u1dc9\5\u0410\u0209\2\u1dc5\u1dc6\7)\2\2\u1dc6\u1dc8\5"+
		"\u0410\u0209\2\u1dc7\u1dc5\3\2\2\2\u1dc8\u1dcb\3\2\2\2\u1dc9\u1dc7\3\2"+
		"\2\2\u1dc9\u1dca\3\2\2\2\u1dca\u0413\3\2\2\2\u1dcb\u1dc9\3\2\2\2\u1dcc"+
		"\u1dd2\7\u0224\2\2\u1dcd\u1dce\7\22\2\2\u1dce\u1dd2\7\u0224\2\2\u1dcf"+
		"\u1dd0\7\23\2\2\u1dd0\u1dd2\7\u0224\2\2\u1dd1\u1dcc\3\2\2\2\u1dd1\u1dcd"+
		"\3\2\2\2\u1dd1\u1dcf\3\2\2\2\u1dd2\u0415\3\2\2\2\u1dd3\u1dd9\7p\2\2\u1dd4"+
		"\u1dd9\7q\2\2\u1dd5\u1dd9\7e\2\2\u1dd6\u1dd9\5\u0418\u020d\2\u1dd7\u1dd9"+
		"\7\u0223\2\2\u1dd8\u1dd3\3\2\2\2\u1dd8\u1dd4\3\2\2\2\u1dd8\u1dd5\3\2\2"+
		"\2\u1dd8\u1dd6\3\2\2\2\u1dd8\u1dd7\3\2\2\2\u1dd9\u0417\3\2\2\2\u1dda\u1ddf"+
		"\5\u02da\u016e\2\u1ddb\u1ddf\5\u02e0\u0171\2\u1ddc\u1ddf\5\u041a\u020e"+
		"\2\u1ddd\u1ddf\5\u02e2\u0172\2\u1dde\u1dda\3\2\2\2\u1dde\u1ddb\3\2\2\2"+
		"\u1dde\u1ddc\3\2\2\2\u1dde\u1ddd\3\2\2\2\u1ddf\u0419\3\2\2\2\u1de0\u1de1"+
		"\t\67\2\2\u1de1\u041b\3\2\2\2\u1de2\u1de3\5\u0350\u01a9\2\u1de3\u041d"+
		"\3\2\2\2\u1de4\u1de9\5\u02da\u016e\2\u1de5\u1de9\5\u0418\u020d\2\u1de6"+
		"\u1de9\7\u00a1\2\2\u1de7\u1de9\7\u012a\2\2\u1de8\u1de4\3\2\2\2\u1de8\u1de5"+
		"\3\2\2\2\u1de8\u1de6\3\2\2\2\u1de8\u1de7\3\2\2\2\u1de9\u041f\3\2\2\2\u1dea"+
		"\u1deb\b\u0211\1\2\u1deb\u1dec\5\u0350\u01a9\2\u1dec\u1df2\3\2\2\2\u1ded"+
		"\u1dee\f\3\2\2\u1dee\u1def\7\27\2\2\u1def\u1df1\5\u0350\u01a9\2\u1df0"+
		"\u1ded\3\2\2\2\u1df1\u1df4\3\2\2\2\u1df2\u1df0\3\2\2\2\u1df2\u1df3\3\2"+
		"\2\2\u1df3\u0421\3\2\2\2\u1df4\u1df2\3\2\2\2\u1df5\u1dfa\5\u0424\u0213"+
		"\2\u1df6\u1df7\7)\2\2\u1df7\u1df9\5\u0424\u0213\2\u1df8\u1df6\3\2\2\2"+
		"\u1df9\u1dfc\3\2\2\2\u1dfa\u1df8\3\2\2\2\u1dfa\u1dfb\3\2\2\2\u1dfb\u0423"+
		"\3\2\2\2\u1dfc\u1dfa\3\2\2\2\u1dfd\u1e00\5\u0416\u020c\2\u1dfe\u1e00\5"+
		"\u0428\u0215\2\u1dff\u1dfd\3\2\2\2\u1dff\u1dfe\3\2\2\2\u1e00\u0425\3\2"+
		"\2\2\u1e01\u1e0f\7\u0223\2\2\u1e02\u1e0f\5\u02da\u016e\2\u1e03\u1e04\7"+
		"\u0089\2\2\u1e04\u1e05\7\u0223\2\2\u1e05\u1e0f\5\u039c\u01cf\2\u1e06\u1e07"+
		"\7\u0089\2\2\u1e07\u1e08\7#\2\2\u1e08\u1e09\7\u0224\2\2\u1e09\u1e0a\7"+
		"$\2\2\u1e0a\u1e0f\7\u0223\2\2\u1e0b\u1e0f\5\u0428\u0215\2\u1e0c\u1e0f"+
		"\7\u0098\2\2\u1e0d\u1e0f\7\u00a4\2\2\u1e0e\u1e01\3\2\2\2\u1e0e\u1e02\3"+
		"\2\2\2\u1e0e\u1e03\3\2\2\2\u1e0e\u1e06\3\2\2\2\u1e0e\u1e0b\3\2\2\2\u1e0e"+
		"\u1e0c\3\2\2\2\u1e0e\u1e0d\3\2\2\2\u1e0f\u0427\3\2\2\2\u1e10\u1e16\7\u0224"+
		"\2\2\u1e11\u1e12\7\22\2\2\u1e12\u1e16\7\u0224\2\2\u1e13\u1e14\7\23\2\2"+
		"\u1e14\u1e16\7\u0224\2\2\u1e15\u1e10\3\2\2\2\u1e15\u1e11\3\2\2\2\u1e15"+
		"\u1e13\3\2\2\2\u1e16\u0429\3\2\2\2\u1e17\u1e18\7\u00e0\2\2\u1e18\u1e1f"+
		"\7\u020e\2\2\u1e19\u1e1a\7\u00e0\2\2\u1e1a\u1e1f\7\u01c2\2\2\u1e1b\u1e1c"+
		"\7\u00b3\2\2\u1e1c\u1e1f\7\u00e0\2\2\u1e1d\u1e1f\7\u0203\2\2\u1e1e\u1e17"+
		"\3\2\2\2\u1e1e\u1e19\3\2\2\2\u1e1e\u1e1b\3\2\2\2\u1e1e\u1e1d\3\2\2\2\u1e1f"+
		"\u042b\3\2\2\2\u1e20\u1e21\5\u0350\u01a9\2\u1e21\u1e23\5\u0370\u01b9\2"+
		"\u1e22\u1e24\5\u0454\u022b\2\u1e23\u1e22\3\2\2\2\u1e23\u1e24\3\2\2\2\u1e24"+
		"\u1e25\3\2\2\2\u1e25\u1e26\5\22\n\2\u1e26\u042d\3\2\2\2\u1e27\u1e28\7"+
		"D\2\2\u1e28\u1e29\5\u02ec\u0177\2\u1e29\u1e2a\5\u0432\u021a\2\u1e2a\u1e30"+
		"\3\2\2\2\u1e2b\u1e30\5\u0432\u021a\2\u1e2c\u1e30\5\u0430\u0219\2\u1e2d"+
		"\u1e2e\7\u00eb\2\2\u1e2e\u1e30\5\u03d0\u01e9\2\u1e2f\u1e27\3\2\2\2\u1e2f"+
		"\u1e2b\3\2\2\2\u1e2f\u1e2c\3\2\2\2\u1e2f\u1e2d\3\2\2\2\u1e30\u042f\3\2"+
		"\2\2\u1e31\u1e39\7\u00f4\2\2\u1e32\u1e33\7n\2\2\u1e33\u1e39\7\u00f4\2"+
		"\2\u1e34\u1e35\7\u010a\2\2\u1e35\u1e39\7\u00f5\2\2\u1e36\u1e37\7\u010a"+
		"\2\2\u1e37\u1e39\7\u0104\2\2\u1e38\u1e31\3\2\2\2\u1e38\u1e32\3\2\2\2\u1e38"+
		"\u1e34\3\2\2\2\u1e38\u1e36\3\2\2\2\u1e39\u0431\3\2\2\2\u1e3a\u1e3b\7n"+
		"\2\2\u1e3b\u1e6e\7o\2\2\u1e3c\u1e6e\7o\2\2\u1e3d\u1e40\7F\2\2\u1e3e\u1e3f"+
		"\7Q\2\2\u1e3f\u1e41\5\u0442\u0222\2\u1e40\u1e3e\3\2\2\2\u1e40\u1e41\3"+
		"\2\2\2\u1e41\u1e42\3\2\2\2\u1e42\u1e6e\5\u0440\u0221\2\u1e43\u1e44\7E"+
		"\2\2\u1e44\u1e47\7H\2\2\u1e45\u1e46\7Q\2\2\u1e46\u1e48\5\u0442\u0222\2"+
		"\u1e47\u1e45\3\2\2\2\u1e47\u1e48\3\2\2\2\u1e48\u1e49\3\2\2\2\u1e49\u1e6e"+
		"\5\u0440\u0221\2\u1e4a\u1e4b\7\u00d9\2\2\u1e4b\u1e4c\7#\2\2\u1e4c\u1e4d"+
		"\5\u0300\u0181\2\u1e4d\u1e4f\7$\2\2\u1e4e\u1e50\5\u043e\u0220\2\u1e4f"+
		"\u1e4e\3\2\2\2\u1e4f\u1e50\3\2\2\2\u1e50\u1e6e\3\2\2\2\u1e51\u1e52\7\u0098"+
		"\2\2\u1e52\u1e6e\5\u0302\u0182\2\u1e53\u1e54\7\u00da\2\2\u1e54\u1e55\5"+
		"\u043c\u021f\2\u1e55\u1e56\7d\2\2\u1e56\u1e58\7\u0103\2\2\u1e57\u1e59"+
		"\5\u0434\u021b\2\u1e58\u1e57\3\2\2\2\u1e58\u1e59\3\2\2\2\u1e59\u1e6e\3"+
		"\2\2\2\u1e5a\u1e5b\7\u00da\2\2\u1e5b\u1e5c\5\u043c\u021f\2\u1e5c\u1e5d"+
		"\7d\2\2\u1e5d\u1e5e\7#\2\2\u1e5e\u1e5f\5\u0300\u0181\2\u1e5f\u1e60\7$"+
		"\2\2\u1e60\u1e61\7\u0216\2\2\u1e61\u1e6e\3\2\2\2\u1e62\u1e63\7\u00e1\2"+
		"\2\u1e63\u1e65\5\u034e\u01a8\2\u1e64\u1e66\5\u043a\u021e\2\u1e65\u1e64"+
		"\3\2\2\2\u1e65\u1e66\3\2\2\2\u1e66\u1e68\3\2\2\2\u1e67\u1e69\5\u0452\u022a"+
		"\2\u1e68\u1e67\3\2\2\2\u1e68\u1e69\3\2\2\2\u1e69\u1e6b\3\2\2\2\u1e6a\u1e6c"+
		"\5\u044a\u0226\2\u1e6b\u1e6a\3\2\2\2\u1e6b\u1e6c\3\2\2\2\u1e6c\u1e6e\3"+
		"\2\2\2\u1e6d\u1e3a\3\2\2\2\u1e6d\u1e3c\3\2\2\2\u1e6d\u1e3d\3\2\2\2\u1e6d"+
		"\u1e43\3\2\2\2\u1e6d\u1e4a\3\2\2\2\u1e6d\u1e51\3\2\2\2\u1e6d\u1e53\3\2"+
		"\2\2\u1e6d\u1e5a\3\2\2\2\u1e6d\u1e62\3\2\2\2\u1e6e\u0433\3\2\2\2\u1e6f"+
		"\u1e70\7#\2\2\u1e70\u1e71\5\u0436\u021c\2\u1e71\u1e72\7$\2\2\u1e72\u0435"+
		"\3\2\2\2\u1e73\u1e75\5\u0438\u021d\2\u1e74\u1e73\3\2\2\2\u1e75\u1e76\3"+
		"\2\2\2\u1e76\u1e74\3\2\2\2\u1e76\u1e77\3\2\2\2\u1e77\u0437\3\2\2\2\u1e78"+
		"\u1e79\7d\2\2\u1e79\u1e9e\5\u0372\u01ba\2\u1e7a\u1e7b\7\u00e8\2\2\u1e7b"+
		"\u1e9e\5\u0428\u0215\2\u1e7c\u1e9e\7\u00f0\2\2\u1e7d\u1e7e\7\u00dd\2\2"+
		"\u1e7e\u1e9e\7\u00f0\2\2\u1e7f\u1e81\7\u0106\2\2\u1e80\u1e82\7z\2\2\u1e81"+
		"\u1e80\3\2\2\2\u1e81\u1e82\3\2\2\2\u1e82\u1e83\3\2\2\2\u1e83\u1e9e\5\u0428"+
		"\u0215\2\u1e84\u1e85\7\u0112\2\2\u1e85\u1e9e\5\u0428\u0215\2\u1e86\u1e87"+
		"\7\u0113\2\2\u1e87\u1e9e\5\u0428\u0215\2\u1e88\u1e89\7\u00dd\2\2\u1e89"+
		"\u1e9e\7\u0112\2\2\u1e8a\u1e8b\7\u00dd\2\2\u1e8b\u1e9e\7\u0113\2\2\u1e8c"+
		"\u1e8d\7\u011a\2\2\u1e8d\u1e8e\7z\2\2\u1e8e\u1e9e\5\u03d0\u01e9\2\u1e8f"+
		"\u1e90\7\u0128\2\2\u1e90\u1e91\7\u00a8\2\2\u1e91\u1e9e\5\u03d0\u01e9\2"+
		"\u1e92\u1e94\7\u00e4\2\2\u1e93\u1e95\7Q\2\2\u1e94\u1e93\3\2\2\2\u1e94"+
		"\u1e95\3\2\2\2\u1e95\u1e96\3\2\2\2\u1e96\u1e9e\5\u0428\u0215\2\u1e97\u1e9e"+
		"\7\u0123\2\2\u1e98\u1e9a\7\u0123\2\2\u1e99\u1e9b\7Q\2\2\u1e9a\u1e99\3"+
		"\2\2\2\u1e9a\u1e9b\3\2\2\2\u1e9b\u1e9c\3\2\2\2\u1e9c\u1e9e\5\u0428\u0215"+
		"\2\u1e9d\u1e78\3\2\2\2\u1e9d\u1e7a\3\2\2\2\u1e9d\u1e7c\3\2\2\2\u1e9d\u1e7d"+
		"\3\2\2\2\u1e9d\u1e7f\3\2\2\2\u1e9d\u1e84\3\2\2\2\u1e9d\u1e86\3\2\2\2\u1e9d"+
		"\u1e88\3\2\2\2\u1e9d\u1e8a\3\2\2\2\u1e9d\u1e8c\3\2\2\2\u1e9d\u1e8f\3\2"+
		"\2\2\u1e9d\u1e92\3\2\2\2\u1e9d\u1e97\3\2\2\2\u1e9d\u1e98\3\2\2\2\u1e9e"+
		"\u0439\3\2\2\2\u1e9f\u1ea0\7#\2\2\u1ea0\u1ea1\5,\27\2\u1ea1\u1ea2\7$\2"+
		"\2\u1ea2\u043b\3\2\2\2\u1ea3\u1ea7\7\u00d7\2\2\u1ea4\u1ea5\7z\2\2\u1ea5"+
		"\u1ea7\7\u0098\2\2\u1ea6\u1ea3\3\2\2\2\u1ea6\u1ea4\3\2\2\2\u1ea7\u043d"+
		"\3\2\2\2\u1ea8\u1ea9\7\u00dd\2\2\u1ea9\u1eaa\7\u0108\2\2\u1eaa\u043f\3"+
		"\2\2\2\u1eab\u1eac\7b\2\2\u1eac\u1ead\7C\2\2\u1ead\u1eae\7\u012f\2\2\u1eae"+
		"\u1eaf\5\u02ec\u0177\2\u1eaf\u0441\3\2\2\2\u1eb0\u1eb1\7#\2\2\u1eb1\u1eb2"+
		"\5\u0444\u0223\2\u1eb2\u1eb3\7$\2\2\u1eb3\u0443\3\2\2\2\u1eb4\u1eb9\5"+
		"\u0446\u0224\2\u1eb5\u1eb6\7)\2\2\u1eb6\u1eb8\5\u0446\u0224\2\u1eb7\u1eb5"+
		"\3\2\2\2\u1eb8\u1ebb\3\2\2\2\u1eb9\u1eb7\3\2\2\2\u1eb9\u1eba\3\2\2\2\u1eba"+
		"\u0445\3\2\2\2\u1ebb\u1eb9\3\2\2\2\u1ebc\u1ebd\5\u0448\u0225\2\u1ebd\u1ebe"+
		"\7\33\2\2\u1ebe\u1ebf\5\u0402\u0202\2\u1ebf\u1ec2\3\2\2\2\u1ec0\u1ec2"+
		"\5\u0448\u0225\2\u1ec1\u1ebc\3\2\2\2\u1ec1\u1ec0\3\2\2\2\u1ec2\u0447\3"+
		"\2\2\2\u1ec3\u1ec9\5\u02da\u016e\2\u1ec4\u1ec9\5\u02e0\u0171\2\u1ec5\u1ec9"+
		"\5\u041a\u020e\2\u1ec6\u1ec9\5\u02e2\u0172\2\u1ec7\u1ec9\5\u02d4\u016b"+
		"\2\u1ec8\u1ec3\3\2\2\2\u1ec8\u1ec4\3\2\2\2\u1ec8\u1ec5\3\2\2\2\u1ec8\u1ec6"+
		"\3\2\2\2\u1ec8\u1ec7\3\2\2\2\u1ec9\u0449\3\2\2\2\u1eca\u1ed3\5\u044e\u0228"+
		"\2\u1ecb\u1ed3\5\u044c\u0227\2\u1ecc\u1ecd\5\u044e\u0228\2\u1ecd\u1ece"+
		"\5\u044c\u0227\2\u1ece\u1ed3\3\2\2\2\u1ecf\u1ed0\5\u044c\u0227\2\u1ed0"+
		"\u1ed1\5\u044e\u0228\2\u1ed1\u1ed3\3\2\2\2\u1ed2\u1eca\3\2\2\2\u1ed2\u1ecb"+
		"\3\2\2\2\u1ed2\u1ecc\3\2\2\2\u1ed2\u1ecf\3\2\2\2\u1ed3\u044b\3\2\2\2\u1ed4"+
		"\u1ed5\7e\2\2\u1ed5\u1ed6\7\67\2\2\u1ed6\u1ed7\5\u0450\u0229\2\u1ed7\u044d"+
		"\3\2\2\2\u1ed8\u1ed9\7e\2\2\u1ed9\u1eda\7\66\2\2\u1eda\u1edb\5\u0450\u0229"+
		"\2\u1edb\u044f\3\2\2\2\u1edc\u1edd\7\u00dd\2\2\u1edd\u1ee5\7\u00e7\2\2"+
		"\u1ede\u1ee5\7\u0124\2\2\u1edf\u1ee5\7\u00d8\2\2\u1ee0\u1ee1\7@\2\2\u1ee1"+
		"\u1ee5\7o\2\2\u1ee2\u1ee3\7@\2\2\u1ee3\u1ee5\7\u0098\2\2\u1ee4\u1edc\3"+
		"\2\2\2\u1ee4\u1ede\3\2\2\2\u1ee4\u1edf\3\2\2\2\u1ee4\u1ee0\3\2\2\2\u1ee4"+
		"\u1ee2\3\2\2\2\u1ee5\u0451\3\2\2\2\u1ee6\u1ee7\7\u0111\2\2\u1ee7\u1eed"+
		"\7\\\2\2\u1ee8\u1ee9\7\u0111\2\2\u1ee9\u1eed\7\u011c\2\2\u1eea\u1eeb\7"+
		"\u0111\2\2\u1eeb\u1eed\7\u012c\2\2\u1eec\u1ee6\3\2\2\2\u1eec\u1ee8\3\2"+
		"\2\2\u1eec\u1eea\3\2\2\2\u1eed\u0453\3\2\2\2\u1eee\u1eef\7\u01f1\2\2\u1eef"+
		"\u1ef0\7#\2\2\u1ef0\u1ef1\5\u0456\u022c\2\u1ef1\u1ef2\7$\2\2\u1ef2\u0455"+
		"\3\2\2\2\u1ef3\u1ef8\5\u0148\u00a5\2\u1ef4\u1ef5\7)\2\2\u1ef5\u1ef7\5"+
		"\u0148\u00a5\2\u1ef6\u1ef4\3\2\2\2\u1ef7\u1efa\3\2\2\2\u1ef8\u1ef6\3\2"+
		"\2\2\u1ef8\u1ef9\3\2\2\2\u1ef9\u0457\3\2\2\2\u1efa\u1ef8\3\2\2\2\u1efb"+
		"\u1f02\7\u0114\2\2\u1efc\u1f02\7\\\2\2\u1efd\u1f02\7\u0098\2\2\u1efe\u1eff"+
		"\7b\2\2\u1eff\u1f00\7C\2\2\u1f00\u1f02\5\u02ec\u0177\2\u1f01\u1efb\3\2"+
		"\2\2\u1f01\u1efc\3\2\2\2\u1f01\u1efd\3\2\2\2\u1f01\u1efe\3\2\2\2\u1f02"+
		"\u0459\3\2\2\2\u1f03\u1f04\7#\2\2\u1f04\u1f05\5\u0370\u01b9\2\u1f05\u1f06"+
		"\7$\2\2\u1f06\u1f1a\3\2\2\2\u1f07\u1f08\7#\2\2\u1f08\u1f09\5\u0370\u01b9"+
		"\2\u1f09\u1f0a\7)\2\2\u1f0a\u1f0b\5\u0370\u01b9\2\u1f0b\u1f0c\7$\2\2\u1f0c"+
		"\u1f1a\3\2\2\2\u1f0d\u1f0e\7#\2\2\u1f0e\u1f0f\7\u0198\2\2\u1f0f\u1f10"+
		"\7)\2\2\u1f10\u1f11\5\u0370\u01b9\2\u1f11\u1f12\7$\2\2\u1f12\u1f1a\3\2"+
		"\2\2\u1f13\u1f14\7#\2\2\u1f14\u1f15\5\u0370\u01b9\2\u1f15\u1f16\7)\2\2"+
		"\u1f16\u1f17\7\u0198\2\2\u1f17\u1f18\7$\2\2\u1f18\u1f1a\3\2\2\2\u1f19"+
		"\u1f03\3\2\2\2\u1f19\u1f07\3\2\2\2\u1f19\u1f0d\3\2\2\2\u1f19\u1f13\3\2"+
		"\2\2\u1f1a\u045b\3\2\2\2\u1f1b\u1f1c\5\u045e\u0230\2\u1f1c\u1f1d\5\u0342"+
		"\u01a2\2\u1f1d\u1f1e\5\u0404\u0203\2\u1f1e\u1f2b\3\2\2\2\u1f1f\u1f20\5"+
		"\u0342\u01a2\2\u1f20\u1f21\5\u045e\u0230\2\u1f21\u1f22\5\u0404\u0203\2"+
		"\u1f22\u1f2b\3\2\2\2\u1f23\u1f24\5\u0342\u01a2\2\u1f24\u1f25\5\u0404\u0203"+
		"\2\u1f25\u1f2b\3\2\2\2\u1f26\u1f27\5\u045e\u0230\2\u1f27\u1f28\5\u0404"+
		"\u0203\2\u1f28\u1f2b\3\2\2\2\u1f29\u1f2b\5\u0404\u0203\2\u1f2a\u1f1b\3"+
		"\2\2\2\u1f2a\u1f1f\3\2\2\2\u1f2a\u1f23\3\2\2\2\u1f2a\u1f26\3\2\2\2\u1f2a"+
		"\u1f29\3\2\2\2\u1f2b\u045d\3\2\2\2\u1f2c\u1f33\7t\2\2\u1f2d\u1f33\7\u0220"+
		"\2\2\u1f2e\u1f33\7\u0221\2\2\u1f2f\u1f30\7t\2\2\u1f30\u1f33\7\u0220\2"+
		"\2\u1f31\u1f33\7\u018c\2\2\u1f32\u1f2c\3\2\2\2\u1f32\u1f2d\3\2\2\2\u1f32"+
		"\u1f2e\3\2\2\2\u1f32\u1f2f\3\2\2\2\u1f32\u1f31\3\2\2\2\u1f33\u045f\3\2"+
		"\2\2\u1f34\u1f39\5\u045c\u022f\2\u1f35\u1f36\7)\2\2\u1f36\u1f38\5\u045c"+
		"\u022f\2\u1f37\u1f35\3\2\2\2\u1f38\u1f3b\3\2\2\2\u1f39\u1f37\3\2\2\2\u1f39"+
		"\u1f3a\3\2\2\2\u1f3a\u0461\3\2\2\2\u1f3b\u1f39\3\2\2\2\u1f3c\u1f3f\5\u0418"+
		"\u020d\2\u1f3d\u1f3f\7\u0223\2\2\u1f3e\u1f3c\3\2\2\2\u1f3e\u1f3d\3\2\2"+
		"\2\u1f3f\u0463\3\2\2\2\u1f40\u1f41\7\u0223\2\2\u1f41\u0465\3\2\2\2\u1f42"+
		"\u1f47\5\u041e\u0210\2\u1f43\u1f44\7)\2\2\u1f44\u1f46\5\u041e\u0210\2"+
		"\u1f45\u1f43\3\2\2\2\u1f46\u1f49\3\2\2\2\u1f47\u1f45\3\2\2\2\u1f47\u1f48"+
		"\3\2\2\2\u1f48\u0467\3\2\2\2\u1f49\u1f47\3\2\2\2\u1f4a\u1f4b\7@\2\2\u1f4b"+
		"\u1f4e\5\u046a\u0236\2\u1f4c\u1f4e\5\u0476\u023c\2\u1f4d\u1f4a\3\2\2\2"+
		"\u1f4d\u1f4c\3\2\2\2\u1f4e\u0469\3\2\2\2\u1f4f\u1f50\7\u00e5\2\2\u1f50"+
		"\u1f58\5\u046c\u0237\2\u1f51\u1f52\7\u0129\2\2\u1f52\u1f53\7\u00e9\2\2"+
		"\u1f53\u1f54\7d\2\2\u1f54\u1f55\7\u00e5\2\2\u1f55\u1f58\5\u046c\u0237"+
		"\2\u1f56\u1f58\5\u0470\u0239\2\u1f57\u1f4f\3\2\2\2\u1f57\u1f51\3\2\2\2"+
		"\u1f57\u1f56\3\2\2\2\u1f58\u046b\3\2\2\2\u1f59\u1f60\5\u046e\u0238\2\u1f5a"+
		"\u1f5c\7)\2\2\u1f5b\u1f5a\3\2\2\2\u1f5b\u1f5c\3\2\2\2\u1f5c\u1f5d\3\2"+
		"\2\2\u1f5d\u1f5f\5\u046e\u0238\2\u1f5e\u1f5b\3\2\2\2\u1f5f\u1f62\3\2\2"+
		"\2\u1f60\u1f5e\3\2\2\2\u1f60\u1f61\3\2\2\2\u1f61\u046d\3\2\2\2\u1f62\u1f60"+
		"\3\2\2\2\u1f63\u1f64\7\u00db\2\2\u1f64\u1f65\7\u00dc\2\2\u1f65\u1f6e\5"+
		"\u042a\u0216\2\u1f66\u1f67\7\u00e0\2\2\u1f67\u1f6e\7\u0118\2\2\u1f68\u1f69"+
		"\7\u00e0\2\2\u1f69\u1f6e\7\u0217\2\2\u1f6a\u1f6e\7\u00f4\2\2\u1f6b\u1f6c"+
		"\7n\2\2\u1f6c\u1f6e\7\u00f4\2\2\u1f6d\u1f63\3\2\2\2\u1f6d\u1f66\3\2\2"+
		"\2\u1f6d\u1f68\3\2\2\2\u1f6d\u1f6a\3\2\2\2\u1f6d\u1f6b\3\2\2\2\u1f6e\u046f"+
		"\3\2\2\2\u1f6f\u1f90\5\u0474\u023b\2\u1f70\u1f71\5\u0420\u0211\2\u1f71"+
		"\u1f72\7Y\2\2\u1f72\u1f73\7\u0099\2\2\u1f73\u1f90\3\2\2\2\u1f74\u1f75"+
		"\7\u008b\2\2\u1f75\u1f76\7\u0139\2\2\u1f76\u1f90\5\u0426\u0214\2\u1f77"+
		"\u1f78\7\u01b0\2\2\u1f78\u1f90\7\u0223\2\2\u1f79\u1f7a\7<\2\2\u1f7a\u1f90"+
		"\7\u0223\2\2\u1f7b\u1f7d\7\u00aa\2\2\u1f7c\u1f7e\5\u0472\u023a\2\u1f7d"+
		"\u1f7c\3\2\2\2\u1f7d\u1f7e\3\2\2\2\u1f7e\u1f90\3\2\2\2\u1f7f\u1f80\7\u00e2"+
		"\2\2\u1f80\u1f90\5\u0418\u020d\2\u1f81\u1f90\7\u0223\2\2\u1f82\u1f83\7"+
		"\u0129\2\2\u1f83\u1f84\7\u021d\2\2\u1f84\u1f90\5\u0418\u020d\2\u1f85\u1f90"+
		"\7\u0223\2\2\u1f86\u1f87\7\u0129\2\2\u1f87\u1f88\7\u021d\2\2\u1f88\u1f90"+
		"\7\u0098\2\2\u1f89\u1f8a\7\u015b\2\2\u1f8a\u1f8b\7\u00de\2\2\u1f8b\u1f90"+
		"\5\u03bc\u01df\2\u1f8c\u1f8d\7\u00e5\2\2\u1f8d\u1f8e\7\u01ee\2\2\u1f8e"+
		"\u1f90\7\u0223\2\2\u1f8f\u1f6f\3\2\2\2\u1f8f\u1f70\3\2\2\2\u1f8f\u1f74"+
		"\3\2\2\2\u1f8f\u1f77\3\2\2\2\u1f8f\u1f79\3\2\2\2\u1f8f\u1f7b\3\2\2\2\u1f8f"+
		"\u1f7f\3\2\2\2\u1f8f\u1f81\3\2\2\2\u1f8f\u1f82\3\2\2\2\u1f8f\u1f85\3\2"+
		"\2\2\u1f8f\u1f86\3\2\2\2\u1f8f\u1f89\3\2\2\2\u1f8f\u1f8c\3\2\2\2\u1f90"+
		"\u0471\3\2\2\2\u1f91\u1f92\t8\2\2\u1f92\u0473\3\2\2\2\u1f93\u1f94\5\u0420"+
		"\u0211\2\u1f94\u1f97\t9\2\2\u1f95\u1f98\5\u0422\u0212\2\u1f96\u1f98\7"+
		"\u0098\2\2\u1f97\u1f95\3\2\2\2\u1f97\u1f96\3\2\2\2\u1f98\u0475\3\2\2\2"+
		"\u1f99\u1f9a\7\u0122\2\2\u1f9a\u1f9b\5\u0478\u023d\2\u1f9b\u0477\3\2\2"+
		"\2\u1f9c\u1fa5\5\u047a\u023e\2\u1f9d\u1f9e\7\u008b\2\2\u1f9e\u1fa5\7\u0139"+
		"\2\2\u1f9f\u1fa0\7\u00e5\2\2\u1fa0\u1fa1\7\u00db\2\2\u1fa1\u1fa5\7\u00dc"+
		"\2\2\u1fa2\u1fa3\7\u0129\2\2\u1fa3\u1fa5\7\u021d\2\2\u1fa4\u1f9c\3\2\2"+
		"\2\u1fa4\u1f9d\3\2\2\2\u1fa4\u1f9f\3\2\2\2\u1fa4\u1fa2\3\2\2\2\u1fa5\u0479"+
		"\3\2\2\2\u1fa6\u1fa9\5\u0420\u0211\2\u1fa7\u1fa9\7u\2\2\u1fa8\u1fa6\3"+
		"\2\2\2\u1fa8\u1fa7\3\2\2\2\u1fa9\u047b\3\2\2\2\u1faa\u1faf\5\u047e\u0240"+
		"\2\u1fab\u1fac\7)\2\2\u1fac\u1fae\5\u047e\u0240\2\u1fad\u1fab\3\2\2\2"+
		"\u1fae\u1fb1\3\2\2\2\u1faf\u1fad\3\2\2\2\u1faf\u1fb0\3\2\2\2\u1fb0\u047d"+
		"\3\2\2\2\u1fb1\u1faf\3\2\2\2\u1fb2\u1fbe\5\u034e\u01a8\2\u1fb3\u1fb4\5"+
		"\u034e\u01a8\2\u1fb4\u1fb5\7\24\2\2\u1fb5\u1fbe\3\2\2\2\u1fb6\u1fb7\7"+
		"\u0118\2\2\u1fb7\u1fbe\5\u034e\u01a8\2\u1fb8\u1fb9\7\u0118\2\2\u1fb9\u1fba"+
		"\7#\2\2\u1fba\u1fbb\5\u034e\u01a8\2\u1fbb\u1fbc\7$\2\2\u1fbc\u1fbe\3\2"+
		"\2\2\u1fbd\u1fb2\3\2\2\2\u1fbd\u1fb3\3\2\2\2\u1fbd\u1fb6\3\2\2\2\u1fbd"+
		"\u1fb8\3\2\2\2\u1fbe\u047f\3\2\2\2\u1fbf\u1fc0\7\u01af\2\2\u1fc0\u1fc1"+
		"\7e\2\2\u1fc1\u1fc2\7o\2\2\u1fc2\u1fe3\7\u01be\2\2\u1fc3\u1fc4\7\u0204"+
		"\2\2\u1fc4\u1fc5\7o\2\2\u1fc5\u1fc6\7e\2\2\u1fc6\u1fc7\7o\2\2\u1fc7\u1fe3"+
		"\7\u01be\2\2\u1fc8\u1fe3\7\u0218\2\2\u1fc9\u1fe3\7\u01d5\2\2\u1fca\u1fe3"+
		"\7\u020a\2\2\u1fcb\u1fe3\7\u0215\2\2\u1fcc\u1fcd\7\u00fc\2\2\u1fcd\u1fce"+
		"\7\u0127\2\2\u1fce\u1fe3\7\u00a0\2\2\u1fcf\u1fd0\7\u00fc\2\2\u1fd0\u1fd1"+
		"\7\u0127\2\2\u1fd1\u1fe3\7\u01f3\2\2\u1fd2\u1fd3\7\u0127\2\2\u1fd3\u1fe3"+
		"\7\u00a0\2\2\u1fd4\u1fd5\7\u0127\2\2\u1fd5\u1fe3\7\u01f3\2\2\u1fd6\u1fe3"+
		"\7\u01c1\2\2\u1fd7\u1fd8\7n\2\2\u1fd8\u1fe3\7\u01c1\2\2\u1fd9\u1fda\7"+
		"\u01ad\2\2\u1fda\u1fe3\5\u0428\u0215\2\u1fdb\u1fdc\7\u00e3\2\2\u1fdc\u1fe3"+
		"\5\u0428\u0215\2\u1fdd\u1fde\7\u0209\2\2\u1fde\u1fe3\5\u03d0\u01e9\2\u1fdf"+
		"\u1fe3\5\u0482\u0242\2\u1fe0\u1fe1\7\u01c0\2\2\u1fe1\u1fe3\5\u0350\u01a9"+
		"\2\u1fe2\u1fbf\3\2\2\2\u1fe2\u1fc3\3\2\2\2\u1fe2\u1fc8\3\2\2\2\u1fe2\u1fc9"+
		"\3\2\2\2\u1fe2\u1fca\3\2\2\2\u1fe2\u1fcb\3\2\2\2\u1fe2\u1fcc\3\2\2\2\u1fe2"+
		"\u1fcf\3\2\2\2\u1fe2\u1fd2\3\2\2\2\u1fe2\u1fd4\3\2\2\2\u1fe2\u1fd6\3\2"+
		"\2\2\u1fe2\u1fd7\3\2\2\2\u1fe2\u1fd9\3\2\2\2\u1fe2\u1fdb\3\2\2\2\u1fe2"+
		"\u1fdd\3\2\2\2\u1fe2\u1fdf\3\2\2\2\u1fe2\u1fe0\3\2\2\2\u1fe3\u0481\3\2"+
		"\2\2\u1fe4\u1fe5\7@\2\2\u1fe5\u1fe8\5\u0470\u0239\2\u1fe6\u1fe8\5\u0476"+
		"\u023c\2\u1fe7\u1fe4\3\2\2\2\u1fe7\u1fe6\3\2\2\2\u1fe8\u0483\3\2\2\2\u1fe9"+
		"\u1fea\t:\2\2\u1fea\u0485\3\2\2\2\u1feb\u1fec\t;\2\2\u1fec\u0487\3\2\2"+
		"\2\u1fed\u1ff2\5\u0370\u01b9\2\u1fee\u1fef\7)\2\2\u1fef\u1ff1\5\u0370"+
		"\u01b9\2\u1ff0\u1fee\3\2\2\2\u1ff1\u1ff4\3\2\2\2\u1ff2\u1ff0\3\2\2\2\u1ff2"+
		"\u1ff3\3\2\2\2\u1ff3\u0489\3\2\2\2\u1ff4\u1ff2\3\2\2\2\u1ff5\u1ff7\5\u04b4"+
		"\u025b\2\u1ff6\u1ff5\3\2\2\2\u1ff6\u1ff7\3\2\2\2\u1ff7\u1ff8\3\2\2\2\u1ff8"+
		"\u1ff9\7\65\2\2\u1ff9\u1ffa\7O\2\2\u1ffa\u1ffb\5\u048c\u0247\2\u1ffb\u1ffd"+
		"\5\u048e\u0248\2\u1ffc\u1ffe\5\u0496\u024c\2\u1ffd\u1ffc\3\2\2\2\u1ffd"+
		"\u1ffe\3\2\2\2\u1ffe\u2000\3\2\2\2\u1fff\u2001\5\u04a4\u0253\2\u2000\u1fff"+
		"\3\2\2\2\u2000\u2001\3\2\2\2\u2001\u048b\3\2\2\2\u2002\u2008\5\u034e\u01a8"+
		"\2\u2003\u2004\5\u034e\u01a8\2\u2004\u2005\7d\2\2\u2005\u2006\5\u0350"+
		"\u01a9\2\u2006\u2008\3\2\2\2\u2007\u2002\3\2\2\2\u2007\u2003\3\2\2\2\u2008"+
		"\u048d\3\2\2\2\u2009\u201f\5\u04ac\u0257\2\u200a\u200b\7\u019c\2\2\u200b"+
		"\u200c\5\u0490\u0249\2\u200c\u200d\7\u00bb\2\2\u200d\u200e\5\u04ac\u0257"+
		"\2\u200e\u201f\3\2\2\2\u200f\u2010\7#\2\2\u2010\u2011\5\u0492\u024a\2"+
		"\u2011\u2012\7$\2\2\u2012\u2013\5\u04ac\u0257\2\u2013\u201f\3\2\2\2\u2014"+
		"\u2015\7#\2\2\u2015\u2016\5\u0492\u024a\2\u2016\u2017\7$\2\2\u2017\u2018"+
		"\7\u019c\2\2\u2018\u2019\5\u0490\u0249\2\u2019\u201a\7\u00bb\2\2\u201a"+
		"\u201b\5\u04ac\u0257\2\u201b\u201f\3\2\2\2\u201c\u201d\7\u0098\2\2\u201d"+
		"\u201f\7P\2\2\u201e\u2009\3\2\2\2\u201e\u200a\3\2\2\2\u201e\u200f\3\2"+
		"\2\2\u201e\u2014\3\2\2\2\u201e\u201c\3\2\2\2\u201f\u048f\3\2\2\2\u2020"+
		"\u2021\t<\2\2\u2021\u0491\3\2\2\2\u2022\u2023\b\u024a\1\2\u2023\u2024"+
		"\5\u0494\u024b\2\u2024\u202a\3\2\2\2\u2025\u2026\f\3\2\2\u2026\u2027\7"+
		")\2\2\u2027\u2029\5\u0494\u024b\2\u2028\u2025\3\2\2\2\u2029\u202c\3\2"+
		"\2\2\u202a\u2028\3\2\2\2\u202a\u202b\3\2\2\2\u202b\u0493\3\2\2\2\u202c"+
		"\u202a\3\2\2\2\u202d\u202e\5\u0350\u01a9\2\u202e\u202f\5\u0308\u0185\2"+
		"\u202f\u0495\3\2\2\2\u2030\u2031\7e\2\2\u2031\u2032\7\u019b\2\2\u2032"+
		"\u2033\5\u0498\u024d\2\u2033\u2034\7\u009f\2\2\u2034\u2035\7\66\2\2\u2035"+
		"\u2036\7@\2\2\u2036\u2038\5\u049c\u024f\2\u2037\u2039\5\u050e\u0288\2"+
		"\u2038\u2037\3\2\2\2\u2038\u2039\3\2\2\2\u2039\u2041\3\2\2\2\u203a\u203b"+
		"\7e\2\2\u203b\u203c\7\u019b\2\2\u203c\u203d\5\u0498\u024d\2\u203d\u203e"+
		"\7\u009f\2\2\u203e\u203f\7\u0114\2\2\u203f\u2041\3\2\2\2\u2040\u2030\3"+
		"\2\2\2\u2040\u203a\3\2\2\2\u2041\u0497\3\2\2\2\u2042\u2043\7#\2\2\u2043"+
		"\u2044\5\u03f2\u01fa\2\u2044\u2046\7$\2\2\u2045\u2047\5\u050e\u0288\2"+
		"\u2046\u2045\3\2\2\2\u2046\u2047\3\2\2\2\u2047\u204d\3\2\2\2\u2048\u2049"+
		"\7e\2\2\u2049\u204a\7D\2\2\u204a\u204d\5\u02ec\u0177\2\u204b\u204d\3\2"+
		"\2\2\u204c\u2042\3\2\2\2\u204c\u2048\3\2\2\2\u204c\u204b\3\2\2\2\u204d"+
		"\u0499\3\2\2\2\u204e\u2050\5\u04b4\u025b\2\u204f\u204e\3\2\2\2\u204f\u2050"+
		"\3\2\2\2\u2050\u2051\3\2\2\2\u2051\u2052\7\66\2\2\u2052\u2053\5\u04a8"+
		"\u0255\2\u2053\u2054\7@\2\2\u2054\u2056\5\u049c\u024f\2\u2055\u2057\5"+
		"\u0500\u0281\2\u2056\u2055\3\2\2\2\u2056\u2057\3\2\2\2\u2057\u2059\3\2"+
		"\2\2\u2058\u205a\5\u0510\u0289\2\u2059\u2058\3\2\2\2\u2059\u205a\3\2\2"+
		"\2\u205a\u205c\3\2\2\2\u205b\u205d\5\u04a4\u0253\2\u205c\u205b\3\2\2\2"+
		"\u205c\u205d\3\2\2\2\u205d\u049b\3\2\2\2\u205e\u205f\b\u024f\1\2\u205f"+
		"\u2060\5\u049e\u0250\2\u2060\u2066\3\2\2\2\u2061\u2062\f\3\2\2\u2062\u2063"+
		"\7)\2\2\u2063\u2065\5\u049e\u0250\2\u2064\u2061\3\2\2\2\u2065\u2068\3"+
		"\2\2\2\u2066\u2064\3\2\2\2\u2066\u2067\3\2\2\2\u2067\u049d\3\2\2\2\u2068"+
		"\u2066\3\2\2\2\u2069\u206a\5\u04a0\u0251\2\u206a\u206b\7\33\2\2\u206b"+
		"\u206c\5\u0300\u0181\2\u206c\u2074\3\2\2\2\u206d\u206e\7#\2\2\u206e\u206f"+
		"\5\u04a2\u0252\2\u206f\u2070\7$\2\2\u2070\u2071\7\33\2\2\u2071\u2072\5"+
		"\u0300\u0181\2\u2072\u2074\3\2\2\2\u2073\u2069\3\2\2\2\u2073\u206d\3\2"+
		"\2\2\u2074\u049f\3\2\2\2\u2075\u2076\5\u0350\u01a9\2\u2076\u2077\5\u0308"+
		"\u0185\2\u2077\u04a1\3\2\2\2\u2078\u2079\b\u0252\1\2\u2079\u207a\5\u04a0"+
		"\u0251\2\u207a\u2080\3\2\2\2\u207b\u207c\f\3\2\2\u207c\u207d\7)\2\2\u207d"+
		"\u207f\5\u04a0\u0251\2\u207e\u207b\3\2\2\2\u207f\u2082\3\2\2\2\u2080\u207e"+
		"\3\2\2\2\u2080\u2081\3\2\2\2\u2081\u04a3\3\2\2\2\u2082\u2080\3\2\2\2\u2083"+
		"\u2084\7\u0196\2\2\u2084\u2085\5\u04e4\u0273\2\u2085\u04a5\3\2\2\2\u2086"+
		"\u2088\5\u04b4\u025b\2\u2087\u2086\3\2\2\2\u2087\u2088\3\2\2\2\u2088\u2089"+
		"\3\2\2\2\u2089\u208a\7\67\2\2\u208a\u208b\7Y\2\2\u208b\u208d\5\u04a8\u0255"+
		"\2\u208c\u208e\5\u04aa\u0256\2\u208d\u208c\3\2\2\2\u208d\u208e\3\2\2\2"+
		"\u208e\u2090\3\2\2\2\u208f\u2091\5\u0510\u0289\2\u2090\u208f\3\2\2\2\u2090"+
		"\u2091\3\2\2\2\u2091\u2093\3\2\2\2\u2092\u2094\5\u04a4\u0253\2\u2093\u2092"+
		"\3\2\2\2\u2093\u2094\3\2\2\2\u2094\u04a7\3\2\2\2\u2095\u209e\5\u047e\u0240"+
		"\2\u2096\u2097\5\u047e\u0240\2\u2097\u2098\5\u0350\u01a9\2\u2098\u209e"+
		"\3\2\2\2\u2099\u209a\5\u047e\u0240\2\u209a\u209b\7d\2\2\u209b\u209c\5"+
		"\u0350\u01a9\2\u209c\u209e\3\2\2\2\u209d\u2095\3\2\2\2\u209d\u2096\3\2"+
		"\2\2\u209d\u2099\3\2\2\2\u209e\u04a9\3\2\2\2\u209f\u20a0\7b\2\2\u20a0"+
		"\u20a1\5\u0502\u0282\2\u20a1\u04ab\3\2\2\2\u20a2\u20a5\5\u04ae\u0258\2"+
		"\u20a3\u20a5\5\u0406\u0204\2\u20a4\u20a2\3\2\2\2\u20a4\u20a3\3\2\2\2\u20a5"+
		"\u04ad\3\2\2\2\u20a6\u20d4\5\u04b0\u0259\2\u20a7\u20a8\5\u04b0\u0259\2"+
		"\u20a8\u20a9\5\u03de\u01f0\2\u20a9\u20d4\3\2\2\2\u20aa\u20ac\5\u04b0\u0259"+
		"\2\u20ab\u20ad\5\u03de\u01f0\2\u20ac\u20ab\3\2\2\2\u20ac\u20ad\3\2\2\2"+
		"\u20ad\u20ae\3\2\2\2\u20ae\u20b0\5\u04c4\u0263\2\u20af\u20b1\5\u04d2\u026a"+
		"\2\u20b0\u20af\3\2\2\2\u20b0\u20b1\3\2\2\2\u20b1\u20d4\3\2\2\2\u20b2\u20b4"+
		"\5\u04b0\u0259\2\u20b3\u20b5\5\u03de\u01f0\2\u20b4\u20b3\3\2\2\2\u20b4"+
		"\u20b5\3\2\2\2\u20b5\u20b6\3\2\2\2\u20b6\u20b8\5\u04d2\u026a\2\u20b7\u20b9"+
		"\5\u04c4\u0263\2\u20b8\u20b7\3\2\2\2\u20b8\u20b9\3\2\2\2\u20b9\u20d4\3"+
		"\2\2\2\u20ba\u20bb\5\u04b4\u025b\2\u20bb\u20bc\5\u04b0\u0259\2\u20bc\u20d4"+
		"\3\2\2\2\u20bd\u20be\5\u04b4\u025b\2\u20be\u20bf\5\u04b0\u0259\2\u20bf"+
		"\u20c0\5\u03de\u01f0\2\u20c0\u20d4\3\2\2\2\u20c1\u20c2\5\u04b4\u025b\2"+
		"\u20c2\u20c4\5\u04b0\u0259\2\u20c3\u20c5\5\u03de\u01f0\2\u20c4\u20c3\3"+
		"\2\2\2\u20c4\u20c5\3\2\2\2\u20c5\u20c6\3\2\2\2\u20c6\u20c8\5\u04c4\u0263"+
		"\2\u20c7\u20c9\5\u04d2\u026a\2\u20c8\u20c7\3\2\2\2\u20c8\u20c9\3\2\2\2"+
		"\u20c9\u20d4\3\2\2\2\u20ca\u20cb\5\u04b4\u025b\2\u20cb\u20cd\5\u04b0\u0259"+
		"\2\u20cc\u20ce\5\u03de\u01f0\2\u20cd\u20cc\3\2\2\2\u20cd\u20ce\3\2\2\2"+
		"\u20ce\u20cf\3\2\2\2\u20cf\u20d1\5\u04d2\u026a\2\u20d0\u20d2\5\u04c4\u0263"+
		"\2\u20d1\u20d0\3\2\2\2\u20d1\u20d2\3\2\2\2\u20d2\u20d4\3\2\2\2\u20d3\u20a6"+
		"\3\2\2\2\u20d3\u20a7\3\2\2\2\u20d3\u20aa\3\2\2\2\u20d3\u20b2\3\2\2\2\u20d3"+
		"\u20ba\3\2\2\2\u20d3\u20bd\3\2\2\2\u20d3\u20c1\3\2\2\2\u20d3\u20ca\3\2"+
		"\2\2\u20d4\u04af\3\2\2\2\u20d5\u20d6\b\u0259\1\2\u20d6\u20d9\5\u04b2\u025a"+
		"\2\u20d7\u20d9\5\u0406\u0204\2\u20d8\u20d5\3\2\2\2\u20d8\u20d7\3\2\2\2"+
		"\u20d9\u20ee\3\2\2\2\u20da\u20db\f\5\2\2\u20db\u20dd\7R\2\2\u20dc\u20de"+
		"\5\u03dc\u01ef\2\u20dd\u20dc\3\2\2\2\u20dd\u20de\3\2\2\2\u20de\u20df\3"+
		"\2\2\2\u20df\u20ed\5\u04b0\u0259\6\u20e0\u20e1\f\4\2\2\u20e1\u20e3\7\u00c0"+
		"\2\2\u20e2\u20e4\5\u03dc\u01ef\2\u20e3\u20e2\3\2\2\2\u20e3\u20e4\3\2\2"+
		"\2\u20e4\u20e5\3\2\2\2\u20e5\u20ed\5\u04b0\u0259\5\u20e6\u20e7\f\3\2\2"+
		"\u20e7\u20e9\7\u00c1\2\2\u20e8\u20ea\5\u03dc\u01ef\2\u20e9\u20e8\3\2\2"+
		"\2\u20e9\u20ea\3\2\2\2\u20ea\u20eb\3\2\2\2\u20eb\u20ed\5\u04b0\u0259\4"+
		"\u20ec\u20da\3\2\2\2\u20ec\u20e0\3\2\2\2\u20ec\u20e6\3\2\2\2\u20ed\u20f0"+
		"\3\2\2\2\u20ee\u20ec\3\2\2\2\u20ee\u20ef\3\2\2\2\u20ef\u04b1\3\2\2\2\u20f0"+
		"\u20ee\3\2\2\2\u20f1\u20f3\7\64\2\2\u20f2\u20f4\7u\2\2\u20f3\u20f2\3\2"+
		"\2\2\u20f3\u20f4\3\2\2\2\u20f4\u20f6\3\2\2\2\u20f5\u20f7\5\u04e4\u0273"+
		"\2\u20f6\u20f5\3\2\2\2\u20f6\u20f7\3\2\2\2\u20f7\u20f9\3\2\2\2\u20f8\u20fa"+
		"\5\u04b6\u025c\2\u20f9\u20f8\3\2\2\2\u20f9\u20fa\3\2\2\2\u20fa\u20fc\3"+
		"\2\2\2\u20fb\u20fd\5\u0500\u0281\2\u20fc\u20fb\3\2\2\2\u20fc\u20fd\3\2"+
		"\2\2\u20fd\u20ff\3\2\2\2\u20fe\u2100\5\u050e\u0288\2\u20ff\u20fe\3\2\2"+
		"\2\u20ff\u2100\3\2\2\2\u2100\u2102\3\2\2\2\u2101\u2103\5\u04e8\u0275\2"+
		"\u2102\u2101\3\2\2\2\u2102\u2103\3\2\2\2\u2103\u2105\3\2\2\2\u2104\u2106"+
		"\5\u0512\u028a\2\u2105\u2104\3\2\2\2\u2105\u2106\3\2\2\2\u2106\u2108\3"+
		"\2\2\2\u2107\u2109\5\u04f6\u027c\2\u2108\u2107\3\2\2\2\u2108\u2109\3\2"+
		"\2\2\u2109\u2123\3\2\2\2\u210a\u210b\7\64\2\2\u210b\u210c\5\u03e6\u01f4"+
		"\2\u210c\u210e\5\u04e4\u0273\2\u210d\u210f\5\u04b6\u025c\2\u210e\u210d"+
		"\3\2\2\2\u210e\u210f\3\2\2\2\u210f\u2111\3\2\2\2\u2110\u2112\5\u0500\u0281"+
		"\2\u2111\u2110\3\2\2\2\u2111\u2112\3\2\2\2\u2112\u2114\3\2\2\2\u2113\u2115"+
		"\5\u050e\u0288\2\u2114\u2113\3\2\2\2\u2114\u2115\3\2\2\2\u2115\u2117\3"+
		"\2\2\2\u2116\u2118\5\u04e8\u0275\2\u2117\u2116\3\2\2\2\u2117\u2118\3\2"+
		"\2\2\u2118\u211a\3\2\2\2\u2119\u211b\5\u0512\u028a\2\u211a\u2119\3\2\2"+
		"\2\u211a\u211b\3\2\2\2\u211b\u211d\3\2\2\2\u211c\u211e\5\u04f6\u027c\2"+
		"\u211d\u211c\3\2\2\2\u211d\u211e\3\2\2\2\u211e\u2123\3\2\2\2\u211f\u2123"+
		"\5\u04d4\u026b\2\u2120\u2121\7A\2\2\u2121\u2123\5\u047e\u0240\2\u2122"+
		"\u20f1\3\2\2\2\u2122\u210a\3\2\2\2\u2122\u211f\3\2\2\2\u2122\u2120\3\2"+
		"\2\2\u2123\u04b3\3\2\2\2\u2124\u2125\7Q\2\2\u2125\u212a\5\u04ba\u025e"+
		"\2\u2126\u2127\7Q\2\2\u2127\u2128\7\u013d\2\2\u2128\u212a\5\u04ba\u025e"+
		"\2\u2129\u2124\3\2\2\2\u2129\u2126\3\2\2\2\u212a\u04b5\3\2\2\2\u212b\u212c"+
		"\7O\2\2\u212c\u212d\5\u04b8\u025d\2\u212d\u04b7\3\2\2\2\u212e\u2130\7"+
		"\u0131\2\2\u212f\u2131\7A\2\2\u2130\u212f\3\2\2\2\u2130\u2131\3\2\2\2"+
		"\u2131\u2132\3\2\2\2\u2132\u215b\5\u034e\u01a8\2\u2133\u2135\7\u0130\2"+
		"\2\u2134\u2136\7A\2\2\u2135\u2134\3\2\2\2\u2135\u2136\3\2\2\2\u2136\u2137"+
		"\3\2\2\2\u2137\u215b\5\u034e\u01a8\2\u2138\u2139\7\u00a4\2\2\u2139\u213b"+
		"\7\u0131\2\2\u213a\u213c\7A\2\2\u213b\u213a\3\2\2\2\u213b\u213c\3\2\2"+
		"\2\u213c\u213d\3\2\2\2\u213d\u215b\5\u034e\u01a8\2\u213e\u213f\7\u00a4"+
		"\2\2\u213f\u2141\7\u0130\2\2\u2140\u2142\7A\2\2\u2141\u2140\3\2\2\2\u2141"+
		"\u2142\3\2\2\2\u2142\u2143\3\2\2\2\u2143\u215b\5\u034e\u01a8\2\u2144\u2145"+
		"\7\u0102\2\2\u2145\u2147\7\u0131\2\2\u2146\u2148\7A\2\2\u2147\u2146\3"+
		"\2\2\2\u2147\u2148\3\2\2\2\u2148\u2149\3\2\2\2\u2149\u215b\5\u034e\u01a8"+
		"\2\u214a\u214b\7\u0102\2\2\u214b\u214d\7\u0130\2\2\u214c\u214e\7A\2\2"+
		"\u214d\u214c\3\2\2\2\u214d\u214e\3\2\2\2\u214e\u214f\3\2\2\2\u214f\u215b"+
		"\5\u034e\u01a8\2\u2150\u2152\7\u0133\2\2\u2151\u2153\7A\2\2\u2152\u2151"+
		"\3\2\2\2\u2152\u2153\3\2\2\2\u2153\u2154\3\2\2\2\u2154\u215b\5\u034e\u01a8"+
		"\2\u2155\u2157\7A\2\2\u2156\u2155\3\2\2\2\u2156\u2157\3\2\2\2\u2157\u2158"+
		"\3\2\2\2\u2158\u215b\5\u034e\u01a8\2\u2159\u215b\5\u034e\u01a8\2\u215a"+
		"\u212e\3\2\2\2\u215a\u2133\3\2\2\2\u215a\u2138\3\2\2\2\u215a\u213e\3\2"+
		"\2\2\u215a\u2144\3\2\2\2\u215a\u214a\3\2\2\2\u215a\u2150\3\2\2\2\u215a"+
		"\u2156\3\2\2\2\u215a\u2159\3\2\2\2\u215b\u04b9\3\2\2\2\u215c\u215d\b\u025e"+
		"\1\2\u215d\u215e\5\u04bc\u025f\2\u215e\u2164\3\2\2\2\u215f\u2160\f\3\2"+
		"\2\u2160\u2161\7)\2\2\u2161\u2163\5\u04bc\u025f\2\u2162\u215f\3\2\2\2"+
		"\u2163\u2166\3\2\2\2\u2164\u2162\3\2\2\2\u2164\u2165\3\2\2\2\u2165\u04bb"+
		"\3\2\2\2\u2166\u2164\3\2\2\2\u2167\u2168\5\u02ec\u0177\2\u2168\u2169\5"+
		"\u04c0\u0261\2\u2169\u216a\7d\2\2\u216a\u216b\5\u04be\u0260\2\u216b\u216c"+
		"\7#\2\2\u216c\u216d\5\u04c2\u0262\2\u216d\u216e\7$\2\2\u216e\u04bd\3\2"+
		"\2\2\u216f\u2174\7\u0180\2\2\u2170\u2171\7n\2\2\u2171\u2174\7\u0180\2"+
		"\2\u2172\u2174\3\2\2\2\u2173\u216f\3\2\2\2\u2173\u2170\3\2\2\2\u2173\u2172"+
		"\3\2\2\2\u2174\u04bf\3\2\2\2\u2175\u2176\7#\2\2\u2176\u2177\5\u03d4\u01eb"+
		"\2\u2177\u2178\7$\2\2\u2178\u217b\3\2\2\2\u2179\u217b\3\2\2\2\u217a\u2175"+
		"\3\2\2\2\u217a\u2179\3\2\2\2\u217b\u04c1\3\2\2\2\u217c\u2181\5\u04ac\u0257"+
		"\2\u217d\u2181\5\u048a\u0246\2\u217e\u2181\5\u049a\u024e\2\u217f\u2181"+
		"\5\u04a6\u0254\2\u2180\u217c\3\2\2\2\u2180\u217d\3\2\2\2\u2180\u217e\3"+
		"\2\2\2\u2180\u217f\3\2\2\2\u2181\u04c3\3\2\2\2\u2182\u2187\5\u04c6\u0264"+
		"\2\u2183\u2184\7i\2\2\u2184\u2185\7\u00e0\2\2\u2185\u2187\7\u0118\2\2"+
		"\u2186\u2182\3\2\2\2\u2186\u2183\3\2\2\2\u2187\u04c5\3\2\2\2\u2188\u2189"+
		"\b\u0264\1\2\u2189\u218a\5\u04c8\u0265\2\u218a\u218f\3\2\2\2\u218b\u218c"+
		"\f\3\2\2\u218c\u218e\5\u04c8\u0265\2\u218d\u218b\3\2\2\2\u218e\u2191\3"+
		"\2\2\2\u218f\u218d\3\2\2\2\u218f\u2190\3\2\2\2\u2190\u04c7\3\2\2\2\u2191"+
		"\u218f\3\2\2\2\u2192\u2194\5\u04cc\u0267\2\u2193\u2195\5\u04ce\u0268\2"+
		"\u2194\u2193\3\2\2\2\u2194\u2195\3\2\2\2\u2195\u2197\3\2\2\2\u2196\u2198"+
		"\5\u04ca\u0266\2\u2197\u2196\3\2\2\2\u2197\u2198\3\2\2\2\u2198\u04c9\3"+
		"\2\2\2\u2199\u219d\7\u018d\2\2\u219a\u219b\7\6\2\2\u219b\u219d\7\u018e"+
		"\2\2\u219c\u2199\3\2\2\2\u219c\u219a\3\2\2\2\u219d\u04cb\3\2\2\2\u219e"+
		"\u219f\7i\2\2\u219f\u21aa\7\66\2\2\u21a0\u21a1\7i\2\2\u21a1\u21a2\7\u00dd"+
		"\2\2\u21a2\u21a3\7H\2\2\u21a3\u21aa\7\66\2\2\u21a4\u21a5\7i\2\2\u21a5"+
		"\u21aa\7\u0182\2\2\u21a6\u21a7\7i\2\2\u21a7\u21a8\7H\2\2\u21a8\u21aa\7"+
		"\u0182\2\2\u21a9\u219e\3\2\2\2\u21a9\u21a0\3\2\2\2\u21a9\u21a4\3\2\2\2"+
		"\u21a9\u21a6\3\2\2\2\u21aa\u04cd\3\2\2\2\u21ab\u21ac\7\u013a\2\2\u21ac"+
		"\u21ad\5\u04d0\u0269\2\u21ad\u04cf\3\2\2\2\u21ae\u21af\b\u0269\1\2\u21af"+
		"\u21b0\5\u034e\u01a8\2\u21b0\u21b6\3\2\2\2\u21b1\u21b2\f\3\2\2\u21b2\u21b3"+
		"\7)\2\2\u21b3\u21b5\5\u034e\u01a8\2\u21b4\u21b1\3\2\2\2\u21b5\u21b8\3"+
		"\2\2\2\u21b6\u21b4\3\2\2\2\u21b6\u21b7\3\2\2\2\u21b7\u04d1\3\2\2\2\u21b8"+
		"\u21b6\3\2\2\2\u21b9\u21ba\5\u04d6\u026c\2\u21ba\u21bb\5\u04d8\u026d\2"+
		"\u21bb\u21c2\3\2\2\2\u21bc\u21bd\5\u04d8\u026d\2\u21bd\u21be\5\u04d6\u026c"+
		"\2\u21be\u21c2\3\2\2\2\u21bf\u21c2\5\u04d6\u026c\2\u21c0\u21c2\5\u04d8"+
		"\u026d\2\u21c1\u21b9\3\2\2\2\u21c1\u21bc\3\2\2\2\u21c1\u21bf\3\2\2\2\u21c1"+
		"\u21c0\3\2\2\2\u21c2\u04d3\3\2\2\2\u21c3\u21c4\b\u026b\1\2\u21c4\u21c5"+
		"\7P\2\2\u21c5\u21c6\7#\2\2\u21c6\u21c7\5\u0374\u01bb\2\u21c7\u21c8\7$"+
		"\2\2\u21c8\u21d1\3\2\2\2\u21c9\u21ca\f\3\2\2\u21ca\u21cb\7)\2\2\u21cb"+
		"\u21cc\7#\2\2\u21cc\u21cd\5\u0374\u01bb\2\u21cd\u21ce\7$\2\2\u21ce\u21d0"+
		"\3\2\2\2\u21cf\u21c9\3\2\2\2\u21d0\u21d3\3\2\2\2\u21d1\u21cf\3\2\2\2\u21d1"+
		"\u21d2\3\2\2\2\u21d2\u04d5\3\2\2\2\u21d3\u21d1\3\2\2\2\u21d4\u21d5\7~"+
		"\2\2\u21d5\u21f4\5\u04da\u026e\2\u21d6\u21d7\7~\2\2\u21d7\u21d8\5\u04da"+
		"\u026e\2\u21d8\u21d9\7)\2\2\u21d9\u21da\5\u04dc\u026f\2\u21da\u21f4\3"+
		"\2\2\2\u21db\u21dc\7\u00c3\2\2\u21dc\u21dd\5\u04e2\u0272\2\u21dd\u21de"+
		"\5\u04de\u0270\2\u21de\u21df\5\u04e0\u0271\2\u21df\u21e0\7\u0118\2\2\u21e0"+
		"\u21f4\3\2\2\2\u21e1\u21e2\7\u00c3\2\2\u21e2\u21e3\5\u04e2\u0272\2\u21e3"+
		"\u21e4\5\u04de\u0270\2\u21e4\u21e5\5\u04e0\u0271\2\u21e5\u21e6\7Q\2\2"+
		"\u21e6\u21e7\7\u00c2\2\2\u21e7\u21f4\3\2\2\2\u21e8\u21e9\7\u00c3\2\2\u21e9"+
		"\u21ea\5\u04e2\u0272\2\u21ea\u21eb\5\u04e0\u0271\2\u21eb\u21ec\7\u0118"+
		"\2\2\u21ec\u21f4\3\2\2\2\u21ed\u21ee\7\u00c3\2\2\u21ee\u21ef\5\u04e2\u0272"+
		"\2\u21ef\u21f0\5\u04e0\u0271\2\u21f0\u21f1\7Q\2\2\u21f1\u21f2\7\u00c2"+
		"\2\2\u21f2\u21f4\3\2\2\2\u21f3\u21d4\3\2\2\2\u21f3\u21d6\3\2\2\2\u21f3"+
		"\u21db\3\2\2\2\u21f3\u21e1\3\2\2\2\u21f3\u21e8\3\2\2\2\u21f3\u21ed\3\2"+
		"\2\2\u21f4\u04d7\3\2\2\2\u21f5\u21f6\7\177\2\2\u21f6\u21fc\5\u04dc\u026f"+
		"\2\u21f7\u21f8\7\177\2\2\u21f8\u21f9\5\u04de\u0270\2\u21f9\u21fa\5\u04e0"+
		"\u0271\2\u21fa\u21fc\3\2\2\2\u21fb\u21f5\3\2\2\2\u21fb\u21f7\3\2\2\2\u21fc"+
		"\u04d9\3\2\2\2\u21fd\u2200\5\u0300\u0181\2\u21fe\u2200\7u\2\2\u21ff\u21fd"+
		"\3\2\2\2\u21ff\u21fe\3\2\2\2\u2200\u04db\3\2\2\2\u2201\u2202\5\u0300\u0181"+
		"\2\u2202\u04dd\3\2\2\2\u2203\u2209\5\u0304\u0183\2\u2204\u2205\7\22\2"+
		"\2\u2205\u2209\7\u0224\2\2\u2206\u2207\7\23\2\2\u2207\u2209\7\u0224\2"+
		"\2\u2208\u2203\3\2\2\2\u2208\u2204\3\2\2\2\u2208\u2206\3\2\2\2\u2209\u04df"+
		"\3\2\2\2\u220a\u220b\t=\2\2\u220b\u04e1\3\2\2\2\u220c\u220d\t>\2\2\u220d"+
		"\u04e3\3\2\2\2\u220e\u220f\b\u0273\1\2\u220f\u2210\5\u04e6\u0274\2\u2210"+
		"\u2216\3\2\2\2\u2211\u2212\f\3\2\2\u2212\u2213\7)\2\2\u2213\u2215\5\u04e6"+
		"\u0274\2\u2214\u2211\3\2\2\2\u2215\u2218\3\2\2\2\u2216\u2214\3\2\2\2\u2216"+
		"\u2217\3\2\2\2\u2217\u04e5\3\2\2\2\u2218\u2216\3\2\2\2\u2219\u221a\5\u0350"+
		"\u01a9\2\u221a\u221b\7\30\2\2\u221b\u2226\3\2\2\2\u221c\u221d\5\u0300"+
		"\u0181\2\u221d\u221e\7d\2\2\u221e\u221f\5\u02da\u016e\2\u221f\u2226\3"+
		"\2\2\2\u2220\u2221\5\u0300\u0181\2\u2221\u2222\5\u02da\u016e\2\u2222\u2226"+
		"\3\2\2\2\u2223\u2226\5\u0300\u0181\2\u2224\u2226\7\24\2\2\u2225\u2219"+
		"\3\2\2\2\u2225\u221c\3\2\2\2\u2225\u2220\3\2\2\2\u2225\u2223\3\2\2\2\u2225"+
		"\u2224\3\2\2\2\u2226\u04e7\3\2\2\2\u2227\u2228\7y\2\2\u2228\u2229\7z\2"+
		"\2\u2229\u222a\5\u04ea\u0276\2\u222a\u04e9\3\2\2\2\u222b\u2230\5\u04ec"+
		"\u0277\2\u222c\u222d\7)\2\2\u222d\u222f\5\u04ec\u0277\2\u222e\u222c\3"+
		"\2\2\2\u222f\u2232\3\2\2\2\u2230\u222e\3\2\2\2\u2230\u2231\3\2\2\2\u2231"+
		"\u04eb\3\2\2\2\u2232\u2230\3\2\2\2\u2233\u2239\5\u0300\u0181\2\u2234\u2239"+
		"\5\u04ee\u0278\2\u2235\u2239\5\u04f2\u027a\2\u2236\u2239\5\u04f0\u0279"+
		"\2\u2237\u2239\5\u04f4\u027b\2\u2238\u2233\3\2\2\2\u2238\u2234\3\2\2\2"+
		"\u2238\u2235\3\2\2\2\u2238\u2236\3\2\2\2\u2238\u2237\3\2\2\2\u2239\u04ed"+
		"\3\2\2\2\u223a\u223b\7#\2\2\u223b\u223c\7$\2\2\u223c\u04ef\3\2\2\2\u223d"+
		"\u223e\7\u0183\2\2\u223e\u223f\7#\2\2\u223f\u2240\5\u0374\u01bb\2\u2240"+
		"\u2241\7$\2\2\u2241\u04f1\3\2\2\2\u2242\u2243\7\u00c4\2\2\u2243\u2244"+
		"\7#\2\2\u2244\u2245\5\u0374\u01bb\2\u2245\u2246\7$\2\2\u2246\u04f3\3\2"+
		"\2\2\u2247\u2248\7\u00c5\2\2\u2248\u2249\7\u00c6\2\2\u2249\u224a\7#\2"+
		"\2\u224a\u224b\5\u04ea\u0276\2\u224b\u224c\7$\2\2\u224c\u04f5\3\2\2\2"+
		"\u224d\u224e\7\u00c7\2\2\u224e\u224f\5\u04f8\u027d\2\u224f\u04f7\3\2\2"+
		"\2\u2250\u2251\b\u027d\1\2\u2251\u2252\5\u04fa\u027e\2\u2252\u2258\3\2"+
		"\2\2\u2253\u2254\f\3\2\2\u2254\u2255\7)\2\2\u2255\u2257\5\u04fa\u027e"+
		"\2\u2256\u2253\3\2\2\2\u2257\u225a\3\2\2\2\u2258\u2256\3\2\2\2\u2258\u2259"+
		"\3\2\2\2\u2259\u04f9\3\2\2\2\u225a\u2258\3\2\2\2\u225b\u225c\5\u0350\u01a9"+
		"\2\u225c\u225d\7d\2\2\u225d\u225e\5\u03ec\u01f7\2\u225e\u04fb\3\2\2\2"+
		"\u225f\u2260\5\u0350\u01a9\2\u2260\u04fd\3\2\2\2\u2261\u2262\7\u00d2\2"+
		"\2\u2262\u2263\7\u0099\2\2\u2263\u226d\7\u00d5\2\2\u2264\u2265\7\u00d2"+
		"\2\2\u2265\u226d\7y\2\2\u2266\u2267\7\u00d2\2\2\u2267\u226d\7\u00c2\2"+
		"\2\u2268\u2269\7\u00d2\2\2\u2269\u226a\7\u00dd\2\2\u226a\u226d\7\u00c8"+
		"\2\2\u226b\u226d\3\2\2\2\u226c\u2261\3\2\2\2\u226c\u2264\3\2\2\2\u226c"+
		"\u2266\3\2\2\2\u226c\u2268\3\2\2\2\u226c\u226b\3\2\2\2\u226d\u04ff\3\2"+
		"\2\2\u226e\u226f\7Y\2\2\u226f\u2270\5\u0502\u0282\2\u2270\u0501\3\2\2"+
		"\2\u2271\u2272\b\u0282\1\2\u2272\u2273\5\u0504\u0283\2\u2273\u2279\3\2"+
		"\2\2\u2274\u2275\f\3\2\2\u2275\u2276\7)\2\2\u2276\u2278\5\u0504\u0283"+
		"\2\u2277\u2274\3\2\2\2\u2278\u227b\3\2\2\2\u2279\u2277\3\2\2\2\u2279\u227a"+
		"\3\2\2\2\u227a\u0503\3\2\2\2\u227b\u2279\3\2\2\2\u227c\u227d\b\u0283\1"+
		"\2\u227d\u227f\5\u047e\u0240\2\u227e\u2280\5\u03d2\u01ea\2\u227f\u227e"+
		"\3\2\2\2\u227f\u2280\3\2\2\2\u2280\u22aa\3\2\2\2\u2281\u2283\5\u047e\u0240"+
		"\2\u2282\u2284\5\u03d2\u01ea\2\u2283\u2282\3\2\2\2\u2283\u2284\3\2\2\2"+
		"\u2284\u2285\3\2\2\2\u2285\u2286\5\u03d8\u01ed\2\u2286\u22aa\3\2\2\2\u2287"+
		"\u2289\5\u0354\u01ab\2\u2288\u228a\5\u03d6\u01ec\2\u2289\u2288\3\2\2\2"+
		"\u2289\u228a\3\2\2\2\u228a\u22aa\3\2\2\2\u228b\u228c\7\u0197\2\2\u228c"+
		"\u228e\5\u0354\u01ab\2\u228d\u228f\5\u03d6\u01ec\2\u228e\u228d\3\2\2\2"+
		"\u228e\u228f\3\2\2\2\u228f\u22aa\3\2\2\2\u2290\u2292\5\u0356\u01ac\2\u2291"+
		"\u2293\5\u03d2\u01ea\2\u2292\u2291\3\2\2\2\u2292\u2293\3\2\2\2\u2293\u22aa"+
		"\3\2\2\2\u2294\u2295\7\u0197\2\2\u2295\u2297\5\u0356\u01ac\2\u2296\u2298"+
		"\5\u03d2\u01ea\2\u2297\u2296\3\2\2\2\u2297\u2298\3\2\2\2\u2298\u22aa\3"+
		"\2\2\2\u2299\u229b\5\u0406\u0204\2\u229a\u229c\5\u03d2\u01ea\2\u229b\u229a"+
		"\3\2\2\2\u229b\u229c\3\2\2\2\u229c\u22aa\3\2\2\2\u229d\u229e\7\u0197\2"+
		"\2\u229e\u22a0\5\u0406\u0204\2\u229f\u22a1\5\u03d2\u01ea\2\u22a0\u229f"+
		"\3\2\2\2\u22a0\u22a1\3\2\2\2\u22a1\u22aa\3\2\2\2\u22a2\u22a3\7#\2\2\u22a3"+
		"\u22a4\5\u0504\u0283\2\u22a4\u22a5\5\u0506\u0284\2\u22a5\u22a7\7$\2\2"+
		"\u22a6\u22a8\5\u03d2\u01ea\2\u22a7\u22a6\3\2\2\2\u22a7\u22a8\3\2\2\2\u22a8"+
		"\u22aa\3\2\2\2\u22a9\u227c\3\2\2\2\u22a9\u2281\3\2\2\2\u22a9\u2287\3\2"+
		"\2\2\u22a9\u228b\3\2\2\2\u22a9\u2290\3\2\2\2\u22a9\u2294\3\2\2\2\u22a9"+
		"\u2299\3\2\2\2\u22a9\u229d\3\2\2\2\u22a9\u22a2\3\2\2\2\u22aa\u22af\3\2"+
		"\2\2\u22ab\u22ac\f\4\2\2\u22ac\u22ae\5\u0506\u0284\2\u22ad\u22ab\3\2\2"+
		"\2\u22ae\u22b1\3\2\2\2\u22af\u22ad\3\2\2\2\u22af\u22b0\3\2\2\2\u22b0\u0505"+
		"\3\2\2\2\u22b1\u22af\3\2\2\2\u22b2\u22b3\7a\2\2\u22b3\u22b4\7[\2\2\u22b4"+
		"\u22c7\5\u0504\u0283\2\u22b5\u22b6\5\u0508\u0285\2\u22b6\u22b7\7[\2\2"+
		"\u22b7\u22b8\5\u0504\u0283\2\u22b8\u22b9\5\u050c\u0287\2\u22b9\u22c7\3"+
		"\2\2\2\u22ba\u22bb\7[\2\2\u22bb\u22bc\5\u0504\u0283\2\u22bc\u22bd\5\u050c"+
		"\u0287\2\u22bd\u22c7\3\2\2\2\u22be\u22bf\7Z\2\2\u22bf\u22c0\5\u0508\u0285"+
		"\2\u22c0\u22c1\7[\2\2\u22c1\u22c2\5\u0504\u0283\2\u22c2\u22c7\3\2\2\2"+
		"\u22c3\u22c4\7Z\2\2\u22c4\u22c5\7[\2\2\u22c5\u22c7\5\u0504\u0283\2\u22c6"+
		"\u22b2\3\2\2\2\u22c6\u22b5\3\2\2\2\u22c6\u22ba\3\2\2\2\u22c6\u22be\3\2"+
		"\2\2\u22c6\u22c3\3\2\2\2\u22c7\u0507\3\2\2\2\u22c8\u22ca\7\\\2\2\u22c9"+
		"\u22cb\5\u050a\u0286\2\u22ca\u22c9\3\2\2\2\u22ca\u22cb\3\2\2\2\u22cb\u22d6"+
		"\3\2\2\2\u22cc\u22ce\7_\2\2\u22cd\u22cf\5\u050a\u0286\2\u22ce\u22cd\3"+
		"\2\2\2\u22ce\u22cf\3\2\2\2\u22cf\u22d6\3\2\2\2\u22d0\u22d2\7`\2\2\u22d1"+
		"\u22d3\5\u050a\u0286\2\u22d2\u22d1\3\2\2\2\u22d2\u22d3\3\2\2\2\u22d3\u22d6"+
		"\3\2\2\2\u22d4\u22d6\7]\2\2\u22d5\u22c8\3\2\2\2\u22d5\u22cc\3\2\2\2\u22d5"+
		"\u22d0\3\2\2\2\u22d5\u22d4\3\2\2\2\u22d6\u0509\3\2\2\2\u22d7\u22d8\7^"+
		"\2\2\u22d8\u050b\3\2\2\2\u22d9\u22da\7b\2\2\u22da\u22db\7#\2\2\u22db\u22dc"+
		"\5\u03d4\u01eb\2\u22dc\u22dd\7$\2\2\u22dd\u22e1\3\2\2\2\u22de\u22df\7"+
		"e\2\2\u22df\u22e1\5\u0300\u0181\2\u22e0\u22d9\3\2\2\2\u22e0\u22de\3\2"+
		"\2\2\u22e1\u050d\3\2\2\2\u22e2\u22e3\7c\2\2\u22e3\u22e4\5\u0300\u0181"+
		"\2\u22e4\u050f\3\2\2\2\u22e5\u22eb\5\u050e\u0288\2\u22e6\u22e7\7c\2\2"+
		"\u22e7\u22e8\7\u0099\2\2\u22e8\u22e9\7\u013a\2\2\u22e9\u22eb\5\u02fe\u0180"+
		"\2\u22ea\u22e5\3\2\2\2\u22ea\u22e6\3\2\2\2\u22eb\u0511\3\2\2\2\u22ec\u22ed"+
		"\7}\2\2\u22ed\u22ee\5\u0300\u0181\2\u22ee\u0513\3\2\2\2\u22ef\u22f0\7"+
		"\u009f\2\2\u22f0\u22f1\5\u0516\u028c\2\u22f1\u0515\3\2\2\2\u22f2\u22f4"+
		"\5\u0518\u028d\2\u22f3\u22f2\3\2\2\2\u22f4\u22f5\3\2\2\2\u22f5\u22f3\3"+
		"\2\2\2\u22f5\u22f6\3\2\2\2\u22f6\u0517\3\2\2\2\u22f7\u22fb\7\u0223\2\2"+
		"\u22f8\u22f9\7\u010c\2\2\u22f9\u22fb\5\u0462\u0232\2\u22fa\u22f7\3\2\2"+
		"\2\u22fa\u22f8\3\2\2\2\u22fb\u0519\3\2\2\2\u22fc\u22fe\7\u0201\2\2\u22fd"+
		"\u22ff\7A\2\2\u22fe\u22fd\3\2\2\2\u22fe\u22ff\3\2\2\2\u22ff\u2300\3\2"+
		"\2\2\u2300\u2305\5\u047c\u023f\2\u2301\u2302\7t\2\2\u2302\u2303\5\u051c"+
		"\u028f\2\u2303\u2304\7\u01dd\2\2\u2304\u2306\3\2\2\2\u2305\u2301\3\2\2"+
		"\2\u2305\u2306\3\2\2\2\u2306\u2308\3\2\2\2\u2307\u2309\7\u018d\2\2\u2308"+
		"\u2307\3\2\2\2\u2308\u2309\3\2\2\2\u2309\u051b\3\2\2\2\u230a\u230b\7\u01a0"+
		"\2\2\u230b\u231b\7\u0182\2\2\u230c\u230d\7\u00d5\2\2\u230d\u231b\7\u0182"+
		"\2\2\u230e\u230f\7\u00d5\2\2\u230f\u231b\7\u01ce\2\2\u2310\u2311\7\u0182"+
		"\2\2\u2311\u2312\7\66\2\2\u2312\u231b\7\u01ce\2\2\u2313\u231b\7\u0182"+
		"\2\2\u2314\u2315\7\u0182\2\2\u2315\u2316\7\u00d5\2\2\u2316\u231b\7\u01ce"+
		"\2\2\u2317\u231b\7\u01ce\2\2\u2318\u2319\7\u01a0\2\2\u2319\u231b\7\u01ce"+
		"\2\2\u231a\u230a\3\2\2\2\u231a\u230c\3\2\2\2\u231a\u230e\3\2\2\2\u231a"+
		"\u2310\3\2\2\2\u231a\u2313\3\2\2\2\u231a\u2314\3\2\2\2\u231a\u2317\3\2"+
		"\2\2\u231a\u2318\3\2\2\2\u231b\u051d\3\2\2\2\u231c\u231d\7\u01b2\2\2\u231d"+
		"\u051f\3\2\2\2\u231e\u2320\7\u01ac\2\2\u231f\u2321\7\u00d0\2\2\u2320\u231f"+
		"\3\2\2\2\u2320\u2321\3\2\2\2\u2321\u2322\3\2\2\2\u2322\u2327\5\u034e\u01a8"+
		"\2\u2323\u2324\7#\2\2\u2324\u2325\5,\27\2\u2325\u2326\7$\2\2\u2326\u2328"+
		"\3\2\2\2\u2327\u2323\3\2\2\2\u2327\u2328\3\2\2\2\u2328\u2329\3\2\2\2\u2329"+
		"\u232b\t\35\2\2\u232a\u232c\7\u01e4\2\2\u232b\u232a\3\2\2\2\u232b\u232c"+
		"\3\2\2\2\u232c\u232d\3\2\2\2\u232d\u232f\t?\2\2\u232e\u2330\5\u0532\u029a"+
		"\2\u232f\u232e\3\2\2\2\u232f\u2330\3\2\2\2\u2330\u2332\3\2\2\2\u2331\u2333"+
		"\7Q\2\2\u2332\u2331\3\2\2\2\u2332\u2333\3\2\2\2\u2333\u2334\3\2\2\2\u2334"+
		"\u2336\5\u0522\u0292\2\u2335\u2337\5\u050e\u0288\2\u2336\u2335\3\2\2\2"+
		"\u2336\u2337\3\2\2\2\u2337\u2347\3\2\2\2\u2338\u2339\7\u01ac\2\2\u2339"+
		"\u233a\7#\2\2\u233a\u233b\5\u04c2\u0262\2\u233b\u233c\7$\2\2\u233c\u233e"+
		"\7j\2\2\u233d\u233f\7\u01e4\2\2\u233e\u233d\3\2\2\2\u233e\u233f\3\2\2"+
		"\2\u233f\u2340\3\2\2\2\u2340\u2342\t?\2\2\u2341\u2343\7Q\2\2\u2342\u2341"+
		"\3\2\2\2\u2342\u2343\3\2\2\2\u2343\u2344\3\2\2\2\u2344\u2345\5\u0522\u0292"+
		"\2\u2345\u2347\3\2\2\2\u2346\u231e\3\2\2\2\u2346\u2338\3\2\2\2\u2347\u0521"+
		"\3\2\2\2\u2348\u234e\5\u052e\u0298\2\u2349\u234a\7#\2\2\u234a\u234b\5"+
		"\u0524\u0293\2\u234b\u234c\7$\2\2\u234c\u234e\3\2\2\2\u234d\u2348\3\2"+
		"\2\2\u234d\u2349\3\2\2\2\u234e\u0523\3\2\2\2\u234f\u2354\5\u0526\u0294"+
		"\2\u2350\u2351\7)\2\2\u2351\u2353\5\u0526\u0294\2\u2352\u2350\3\2\2\2"+
		"\u2353\u2356\3\2\2\2\u2354\u2352\3\2\2\2\u2354\u2355\3\2\2\2\u2355\u0525"+
		"\3\2\2\2\u2356\u2354\3\2\2\2\u2357\u2358\5\u0448\u0225\2\u2358\u2359\5"+
		"\u0528\u0295\2\u2359\u0527\3\2\2\2\u235a\u2362\5\u0416\u020c\2\u235b\u2362"+
		"\5\u0428\u0215\2\u235c\u2362\7\24\2\2\u235d\u235e\7#\2\2\u235e\u235f\5"+
		"\u052a\u0296\2\u235f\u2360\7$\2\2\u2360\u2362\3\2\2\2\u2361\u235a\3\2"+
		"\2\2\u2361\u235b\3\2\2\2\u2361\u235c\3\2\2\2\u2361\u235d\3\2\2\2\u2362"+
		"\u0529\3\2\2\2\u2363\u2368\5\u052c\u0297\2\u2364\u2365\7)\2\2\u2365\u2367"+
		"\5\u052c\u0297\2\u2366\u2364\3\2\2\2\u2367\u236a\3\2\2\2\u2368\u2366\3"+
		"\2\2\2\u2368\u2369\3\2\2\2\u2369\u052b\3\2\2\2\u236a\u2368\3\2\2\2\u236b"+
		"\u236c\5\u0416\u020c\2\u236c\u052d\3\2\2\2\u236d\u236f\5\u0530\u0299\2"+
		"\u236e\u236d\3\2\2\2\u236f\u2372\3\2\2\2\u2370\u236e\3\2\2\2\u2370\u2371"+
		"\3\2\2\2\u2371\u052f\3\2\2\2\u2372\u2370\3\2\2\2\u2373\u239b\7\u00d0\2"+
		"\2\u2374\u239b\7\u021c\2\2\u2375\u2377\7\u01c5\2\2\u2376\u2378\7d\2\2"+
		"\u2377\u2376\3\2\2\2\u2377\u2378\3\2\2\2\u2378\u2379\3\2\2\2\u2379\u239b"+
		"\7\u0223\2\2\u237a\u237c\7o\2\2\u237b\u237d\7d\2\2\u237c\u237b\3\2\2\2"+
		"\u237c\u237d\3\2\2\2\u237d\u237e\3\2\2\2\u237e\u239b\7\u0223\2\2\u237f"+
		"\u239b\7\u01ae\2\2\u2380\u239b\7\u01d4\2\2\u2381\u2383\7\u01eb\2\2\u2382"+
		"\u2384\7d\2\2\u2383\u2382\3\2\2\2\u2383\u2384\3\2\2\2\u2384\u2385\3\2"+
		"\2\2\u2385\u239b\7\u0223\2\2\u2386\u2388\7\u00d1\2\2\u2387\u2389\7d\2"+
		"\2\u2388\u2387\3\2\2\2\u2388\u2389\3\2\2\2\u2389\u238a\3\2\2\2\u238a\u239b"+
		"\7\u0223\2\2\u238b\u238c\7\u0101\2\2\u238c\u238d\7\u01eb\2\2\u238d\u239b"+
		"\5,\27\2\u238e\u238f\7\u0101\2\2\u238f\u2390\7\u01eb\2\2\u2390\u239b\7"+
		"\24\2\2\u2391\u2392\7\u0101\2\2\u2392\u2393\7n\2\2\u2393\u2394\7o\2\2"+
		"\u2394\u239b\5,\27\2\u2395\u2396\7\u0101\2\2\u2396\u2397\7o\2\2\u2397"+
		"\u239b\5,\27\2\u2398\u2399\7\u01c3\2\2\u2399\u239b\7\u0223\2\2\u239a\u2373"+
		"\3\2\2\2\u239a\u2374\3\2\2\2\u239a\u2375\3\2\2\2\u239a\u237a\3\2\2\2\u239a"+
		"\u237f\3\2\2\2\u239a\u2380\3\2\2\2\u239a\u2381\3\2\2\2\u239a\u2386\3\2"+
		"\2\2\u239a\u238b\3\2\2\2\u239a\u238e\3\2\2\2\u239a\u2391\3\2\2\2\u239a"+
		"\u2395\3\2\2\2\u239a\u2398\3\2\2\2\u239b\u0531\3\2\2\2\u239c\u239e\7b"+
		"\2\2\u239d\u239c\3\2\2\2\u239d\u239e\3\2\2\2\u239e\u239f\3\2\2\2\u239f"+
		"\u23a0\7\u01d2\2\2\u23a0\u23a1\7\u0223\2\2\u23a1\u0533\3\2\2\2\u23a2\u23a4"+
		"\7\u01c9\2\2\u23a3\u23a5\7\u01f0\2\2\u23a4\u23a3\3\2\2\2\u23a4\u23a5\3"+
		"\2\2\2\u23a5\u23a8\3\2\2\2\u23a6\u23a9\5\u02ec\u0177\2\u23a7\u23a9\7u"+
		"\2\2\u23a8\u23a6\3\2\2\2\u23a8\u23a7\3\2\2\2\u23a9\u0535\3\2\2\2\u23aa"+
		"\u23ab\7\u00c3\2\2\u23ab\u23ac\5\u0538\u029d\2\u23ac\u0537\3\2\2\2\u23ad"+
		"\u2402\5\u02fe\u0180\2\u23ae\u23af\t@\2\2\u23af\u2402\5\u02fe\u0180\2"+
		"\u23b0\u23b2\7\u00a7\2\2\u23b1\u23b3\t@\2\2\u23b2\u23b1\3\2\2\2\u23b2"+
		"\u23b3\3\2\2\2\u23b3\u23b4\3\2\2\2\u23b4\u2402\5\u02fe\u0180\2\u23b5\u23b7"+
		"\7\u01e8\2\2\u23b6\u23b8\t@\2\2\u23b7\u23b6\3\2\2\2\u23b7\u23b8\3\2\2"+
		"\2\u23b8\u23b9\3\2\2\2\u23b9\u2402\5\u02fe\u0180\2\u23ba\u23bc\7\u00ff"+
		"\2\2\u23bb\u23bd\t@\2\2\u23bc\u23bb\3\2\2\2\u23bc\u23bd\3\2\2\2\u23bd"+
		"\u23be\3\2\2\2\u23be\u2402\5\u02fe\u0180\2\u23bf\u23c1\7\u010e\2\2\u23c0"+
		"\u23c2\t@\2\2\u23c1\u23c0\3\2\2\2\u23c1\u23c2\3\2\2\2\u23c2\u23c3\3\2"+
		"\2\2\u23c3\u2402\5\u02fe\u0180\2\u23c4\u23c5\7\u019f\2\2\u23c5\u23c7\5"+
		"\u0414\u020b\2\u23c6\u23c8\t@\2\2\u23c7\u23c6\3\2\2\2\u23c7\u23c8\3\2"+
		"\2\2\u23c8\u23c9\3\2\2\2\u23c9\u23ca\5\u02fe\u0180\2\u23ca\u2402\3\2\2"+
		"\2\u23cb\u23cc\7\u01ea\2\2\u23cc\u23ce\5\u0414\u020b\2\u23cd\u23cf\t@"+
		"\2\2\u23ce\u23cd\3\2\2\2\u23ce\u23cf\3\2\2\2\u23cf\u23d0\3\2\2\2\u23d0"+
		"\u23d1\5\u02fe\u0180\2\u23d1\u2402\3\2\2\2\u23d2\u23d4\5\u0414\u020b\2"+
		"\u23d3\u23d5\t@\2\2\u23d4\u23d3\3\2\2\2\u23d4\u23d5\3\2\2\2\u23d5\u23d6"+
		"\3\2\2\2\u23d6\u23d7\5\u02fe\u0180\2\u23d7\u2402\3\2\2\2\u23d8\u23da\7"+
		"u\2\2\u23d9\u23db\t@\2\2\u23da\u23d9\3\2\2\2\u23da\u23db\3\2\2\2\u23db"+
		"\u23dc\3\2\2\2\u23dc\u2402\5\u02fe\u0180\2\u23dd\u23df\7\u01cd\2\2\u23de"+
		"\u23e0\t@\2\2\u23df\u23de\3\2\2\2\u23df\u23e0\3\2\2\2\u23e0\u23e1\3\2"+
		"\2\2\u23e1\u2402\5\u02fe\u0180\2\u23e2\u23e3\7\u01cd\2\2\u23e3\u23e5\5"+
		"\u0414\u020b\2\u23e4\u23e6\t@\2\2\u23e5\u23e4\3\2\2\2\u23e5\u23e6\3\2"+
		"\2\2\u23e6\u23e7\3\2\2\2\u23e7\u23e8\5\u02fe\u0180\2\u23e8\u2402\3\2\2"+
		"\2\u23e9\u23ea\7\u01cd\2\2\u23ea\u23ec\7u\2\2\u23eb\u23ed\t@\2\2\u23ec"+
		"\u23eb\3\2\2\2\u23ec\u23ed\3\2\2\2\u23ed\u23ee\3\2\2\2\u23ee\u2402\5\u02fe"+
		"\u0180\2\u23ef\u23f1\7\u01a6\2\2\u23f0\u23f2\t@\2\2\u23f1\u23f0\3\2\2"+
		"\2\u23f1\u23f2\3\2\2\2\u23f2\u23f3\3\2\2\2\u23f3\u2402\5\u02fe\u0180\2"+
		"\u23f4\u23f5\7\u01a6\2\2\u23f5\u23f7\5\u0414\u020b\2\u23f6\u23f8\t@\2"+
		"\2\u23f7\u23f6\3\2\2\2\u23f7\u23f8\3\2\2\2\u23f8\u23f9\3\2\2\2\u23f9\u23fa"+
		"\5\u02fe\u0180\2\u23fa\u2402\3\2\2\2\u23fb\u23fc\7\u01a6\2\2\u23fc\u23fe"+
		"\7u\2\2\u23fd\u23ff\t@\2\2\u23fe\u23fd\3\2\2\2\u23fe\u23ff\3\2\2\2\u23ff"+
		"\u2400\3\2\2\2\u2400\u2402\5\u02fe\u0180\2\u2401\u23ad\3\2\2\2\u2401\u23ae"+
		"\3\2\2\2\u2401\u23b0\3\2\2\2\u2401\u23b5\3\2\2\2\u2401\u23ba\3\2\2\2\u2401"+
		"\u23bf\3\2\2\2\u2401\u23c4\3\2\2\2\u2401\u23cb\3\2\2\2\u2401\u23d2\3\2"+
		"\2\2\u2401\u23d8\3\2\2\2\u2401\u23dd\3\2\2\2\u2401\u23e2\3\2\2\2\u2401"+
		"\u23e9\3\2\2\2\u2401\u23ef\3\2\2\2\u2401\u23f4\3\2\2\2\u2401\u23fb\3\2"+
		"\2\2\u2402\u0539\3\2\2\2\u037c\u053e\u0548\u0551\u0555\u0559\u055c\u055f"+
		"\u0562\u0565\u056a\u056c\u0572\u0574\u0594\u059b\u05a6\u05ab\u05b0\u05b7"+
		"\u05bf\u05cb\u05d1\u05d9\u05e2\u05e8\u05ee\u05f2\u05f5\u05f8\u0604\u060e"+
		"\u0613\u0619\u061c\u061f\u0629\u062c\u062f\u0633\u0639\u063d\u0644\u064d"+
		"\u0653\u0658\u0662\u0672\u0678\u067a\u0682\u068c\u0696\u069c\u06a1\u06a4"+
		"\u06aa\u06ad\u06b1\u06bd\u06c0\u06cb\u06ce\u06d3\u06d8\u06dc\u06e5\u06f7"+
		"\u06ff\u0709\u0711\u0718\u071b\u0721\u0725\u072a\u072e\u0733\u0745\u074b"+
		"\u0751\u0759\u075c\u075f\u0763\u0769\u077a\u0781\u0789\u0791\u0798\u079b"+
		"\u07a7\u07b5\u07b9\u07c7\u07cd\u07d0\u07d7\u07da\u07df\u07e2\u07e4\u07e8"+
		"\u07ec\u07ef\u07f2\u07f7\u07fa\u07fe\u0801\u080b\u0815\u081c\u082e\u0834"+
		"\u083b\u0840\u0847\u085b\u0862\u0872\u0875\u088f\u089b\u08ae\u08b8\u08ba"+
		"\u08be\u08c3\u08c9\u08ce\u08d2\u08d7\u08dc\u08e0\u08f6\u08fe\u0905\u0923"+
		"\u0927\u0930\u0933\u0937\u093a\u093c\u0943\u094e\u0951\u0955\u0959\u0968"+
		"\u097a\u0981\u098a\u098d\u0999\u099e\u09a2\u09a8\u09ae\u09b2\u09b9\u09be"+
		"\u09c3\u09c8\u09cf\u09d8\u09e1\u09ea\u09f2\u09fa\u0a02\u0a0b\u0a14\u0a18"+
		"\u0a1f\u0a27\u0a31\u0a37\u0a3b\u0a3f\u0a43\u0a47\u0a4c\u0a4f\u0a53\u0a68"+
		"\u0a6e\u0acd\u0ad2\u0ae0\u0aec\u0af6\u0b05\u0b0a\u0b12\u0b19\u0b30\u0b3d"+
		"\u0b44\u0b4b\u0b4e\u0b54\u0b57\u0b65\u0b6d\u0b7f\u0b86\u0b8d\u0b94\u0bb5"+
		"\u0bbc\u0bca\u0bdc\u0bec\u0bf2\u0bfd\u0c06\u0c12\u0c14\u0c1f\u0c23\u0c38"+
		"\u0c3f\u0c44\u0c48\u0c4c\u0c50\u0c52\u0c57\u0c5f\u0c75\u0c79\u0c99\u0cac"+
		"\u0cd4\u0d29\u0d33\u0d3b\u0d43\u0d49\u0d53\u0d5d\u0d67\u0d71\u0d83\u0d87"+
		"\u0d94\u0d96\u0da1\u0daa\u0db7\u0dbc\u0dc4\u0dcd\u0de0\u0de2\u0dec\u0df4"+
		"\u0dfc\u0e04\u0e0b\u0e15\u0e19\u0e1e\u0e22\u0e28\u0e30\u0e36\u0e3f\u0e46"+
		"\u0e4e\u0e53\u0e5c\u0e62\u0e6e\u0e73\u0e7c\u0e82\u0e8e\u0e9e\u0eb1\u0ebe"+
		"\u0ece\u0ed7\u0eed\u0f00\u0f07\u0f0a\u0f11\u0f1c\u0f2a\u0f41\u0f49\u0f54"+
		"\u0f58\u0f5f\u0f71\u0f7f\u0f8d\u0f98\u0f9e\u0fab\u0fb0\u0fc0\u0fcd\u0fd2"+
		"\u0fd8\u0fe0\u0fe6\u0fec\u0ff1\u0ff4\u0ff6\u1003\u1009\u1014\u101d\u1022"+
		"\u1026\u102a\u1030\u10a8\u10b1\u10bc\u10c2\u10db\u10eb\u10f3\u10fe\u1110"+
		"\u1115\u111a\u111c\u1122\u1129\u1132\u1136\u1145\u1152\u115f\u116d\u1175"+
		"\u1179\u1180\u118a\u1192\u1195\u119f\u11a4\u11ac\u11b1\u11b6\u11c0\u11c6"+
		"\u11c8\u11cf\u11d5\u11e1\u11e9\u11fa\u1201\u120a\u1214\u1223\u1225\u122b"+
		"\u1234\u1240\u1245\u1248\u124b\u1253\u1256\u125c\u126f\u1275\u127e\u1282"+
		"\u1286\u128d\u1295\u129a\u12a5\u12a9\u12b1\u12b6\u12c1\u12c5\u12cf\u12d6"+
		"\u12d9\u12dd\u12e1\u12e8\u12f2\u12f5\u12f8\u12ff\u1308\u1316\u131d\u1327"+
		"\u132d\u1334\u133a\u1343\u134d\u1352\u135e\u1364\u1368\u136b\u136f\u1376"+
		"\u137b\u137e\u138b\u139d\u13a4\u13aa\u13b6\u13c7\u13cc\u13d3\u13d9\u13e0"+
		"\u13e9\u13f9\u13fd\u1403\u1407\u140e\u1415\u141d\u1423\u1427\u142d\u1431"+
		"\u1437\u143b\u1442\u1446\u144c\u1450\u1458\u145c\u1463\u146a\u146e\u1474"+
		"\u1478\u147f\u1484\u1489\u148d\u1494\u1498\u149e\u14a2\u14a9\u14b1\u14b7"+
		"\u14be\u14c4\u14cb\u14d1\u14d7\u14dd\u14e1\u14e7\u14eb\u14f1\u14f5\u14fb"+
		"\u1501\u1507\u150b\u1511\u1515\u151b\u1523\u1527\u152d\u1537\u153b\u1541"+
		"\u1548\u154e\u1554\u155a\u155e\u1565\u1570\u1574\u157b\u1583\u158d\u1598"+
		"\u15a5\u15a9\u15b0\u15b6\u15bf\u15c8\u15cc\u15d3\u15e1\u15eb\u15f5\u1601"+
		"\u160a\u1630\u1635\u1639\u163e\u1642\u1648\u164c\u164f\u1660\u1667\u1670"+
		"\u1677\u167b\u1683\u168a\u1691\u16ad\u171c\u1726\u17a2\u17a4\u17b0\u17dc"+
		"\u17de\u17e6\u1800\u1809\u1811\u181e\u1822\u1825\u182e\u1832\u1836\u183d"+
		"\u184d\u1857\u1865\u1869\u186e\u1878\u1881\u1886\u188e\u189c\u18a8\u18b8"+
		"\u18c2\u18d6\u18dd\u18e5\u18f3\u18fa\u1905\u190e\u1919\u1922\u192b\u1934"+
		"\u193a\u1945\u194d\u1953\u195a\u195e\u1966\u1968\u197f\u1986\u1994\u199d"+
		"\u19a8\u19af\u19b8\u19bc\u19bf\u19c2\u19c5\u19d5\u1a05\u1aa2\u1aae\u1acb"+
		"\u1ada\u1ae4\u1af2\u1af6\u1afb\u1afd\u1b0e\u1b12\u1b16\u1b1e\u1b25\u1b29"+
		"\u1b30\u1b34\u1b37\u1b3f\u1b43\u1b4e\u1b52\u1b58\u1b5d\u1b61\u1b63\u1b69"+
		"\u1b74\u1b7d\u1b81\u1b85\u1b8d\u1bad\u1bb7\u1bb9\u1bc1\u1bcc\u1bd7\u1be7"+
		"\u1bf9\u1c05\u1c0d\u1c1e\u1c24\u1c2d\u1c34\u1c40\u1c4a\u1c57\u1c5d\u1c61"+
		"\u1c69\u1c79\u1c83\u1c97\u1c9f\u1cb1\u1cb8\u1cbc\u1cbf\u1cc1\u1cc7\u1cd0"+
		"\u1cd8\u1cdc\u1cdf\u1ce2\u1ce5\u1cf4\u1cf8\u1cfc\u1cff\u1d02\u1d07\u1d0a"+
		"\u1d0c\u1d19\u1d20\u1d2b\u1d3d\u1d45\u1d53\u1d59\u1d5c\u1d5f\u1d68\u1d6d"+
		"\u1d70\u1d72\u1dae\u1db4\u1dbb\u1dc2\u1dc9\u1dd1\u1dd8\u1dde\u1de8\u1df2"+
		"\u1dfa\u1dff\u1e0e\u1e15\u1e1e\u1e23\u1e2f\u1e38\u1e40\u1e47\u1e4f\u1e58"+
		"\u1e65\u1e68\u1e6b\u1e6d\u1e76\u1e81\u1e94\u1e9a\u1e9d\u1ea6\u1eb9\u1ec1"+
		"\u1ec8\u1ed2\u1ee4\u1eec\u1ef8\u1f01\u1f19\u1f2a\u1f32\u1f39\u1f3e\u1f47"+
		"\u1f4d\u1f57\u1f5b\u1f60\u1f6d\u1f7d\u1f8f\u1f97\u1fa4\u1fa8\u1faf\u1fbd"+
		"\u1fe2\u1fe7\u1ff2\u1ff6\u1ffd\u2000\u2007\u201e\u202a\u2038\u2040\u2046"+
		"\u204c\u204f\u2056\u2059\u205c\u2066\u2073\u2080\u2087\u208d\u2090\u2093"+
		"\u209d\u20a4\u20ac\u20b0\u20b4\u20b8\u20c4\u20c8\u20cd\u20d1\u20d3\u20d8"+
		"\u20dd\u20e3\u20e9\u20ec\u20ee\u20f3\u20f6\u20f9\u20fc\u20ff\u2102\u2105"+
		"\u2108\u210e\u2111\u2114\u2117\u211a\u211d\u2122\u2129\u2130\u2135\u213b"+
		"\u2141\u2147\u214d\u2152\u2156\u215a\u2164\u2173\u217a\u2180\u2186\u218f"+
		"\u2194\u2197\u219c\u21a9\u21b6\u21c1\u21d1\u21f3\u21fb\u21ff\u2208\u2216"+
		"\u2225\u2230\u2238\u2258\u226c\u2279\u227f\u2283\u2289\u228e\u2292\u2297"+
		"\u229b\u22a0\u22a7\u22a9\u22af\u22c6\u22ca\u22ce\u22d2\u22d5\u22e0\u22ea"+
		"\u22f5\u22fa\u22fe\u2305\u2308\u231a\u2320\u2327\u232b\u232f\u2332\u2336"+
		"\u233e\u2342\u2346\u234d\u2354\u2361\u2368\u2370\u2377\u237c\u2383\u2388"+
		"\u239a\u239d\u23a4\u23a8\u23b2\u23b7\u23bc\u23c1\u23c7\u23ce\u23d4\u23da"+
		"\u23df\u23e5\u23ec\u23f1\u23f7\u23fe\u2401";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}