#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Table schema:
#CREATE TABLE IF NOT EXISTS t_order_0 (order_id BIGSERIAL NOT NULL, user_id INT NOT NULL, address_id BIGINT NOT NULL, status VARCHAR(50), PRIMARY KEY (order_id));
#CREATE TABLE IF NOT EXISTS t_order_1 (order_id BIGSERIAL NOT NULL, user_id INT NOT NULL, address_id BIGINT NOT NULL, status VARCHAR(50), PRIMARY KEY (order_id));
#CREATE TABLE IF NOT EXISTS t_order_item_0 (order_item_id BIGSERIAL NOT NULL, order_id BIGINT NOT NULL, user_id INT NOT NULL, status VARCHAR(50), PRIMARY KEY (order_item_id));
#CREATE TABLE IF NOT EXISTS t_order_item_1 (order_item_id BIGSERIAL NOT NULL, order_id BIGINT NOT NULL, user_id INT NOT NULL, status VARCHAR(50), PRIMARY KEY (order_item_id));
#CREATE TABLE IF NOT EXISTS t_address (address_id BIGSERIAL NOT NULL, address_name VARCHAR(100) NOT NULL, PRIMARY KEY (address_id));

dataSources:
  ds: !!com.zaxxer.hikari.HikariDataSource
    jdbcUrl: jdbc:postgresql://localhost:5432/demo_ds
    username: postgres
    password: test

rules:
- !SHARDING
  tables:
    t_order: 
      actualDataNodes: ds.t_order_${0..1}
      tableStrategy: 
        standard:
          shardingColumn: order_id
          shardingAlgorithmName: t_order_inline
      keyGenerateStrategy:
        column: order_id
        keyGeneratorName: snowflake
    t_order_item:
      actualDataNodes: ds.t_order_item_${0..1}
      tableStrategy:
        standard:
          shardingColumn: order_id
          shardingAlgorithmName: t_order_item_inline
      keyGenerateStrategy:
        column: order_item_id
        keyGeneratorName: snowflake
  bindingTables:
    - t_order,t_order_item
  broadcastTables:
    - t_address

  shardingAlgorithms:
    t_order_inline:
      type: INLINE
      props:
        algorithm.expression: t_order_${order_id % 2}
    t_order_item_inline:
      type: INLINE
      props:
        algorithm.expression: t_order_item_${order_id % 2}
  
  keyGenerators:
    snowflake:
      type: SNOWFLAKE
      props:
          worker.id: 123

props:
  sql.show: false
